    Update README.md
    Update README.md
    Update README.md
    Update README.md
    Create README.md
    Upgrade LR -> 1.18 to get thread safety fix
    Only attempt to crawl enabled crawlers to prevent the schedule page clogging up with errors
    Refactoring the facet resource
    Improving the performance of faceted search
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded BG to use UI with scheduling code
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Minor clean up
    Initial project import
    Fixed release notes
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Updated TL to 1130
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    First stab of new boostrap
    added osx phantomjs support to build
    added osx phantomjs support to build
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Added a scheduled Job to run daily backups (merge)
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    Upgraded shavenmaven
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Ensure js tests can run on 32 and 64 bit machines
    Ensure js tests can run on 32 and 64 bit machines
    Add first JS test
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    test
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Added revision & username to artifact comment
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    typo in build.xml
    Add a new all method to SearchResource that ignores a view's query (merge)
    Add a new all method to SearchResource that ignores a view's query
    fixed typo in build script
    added test sources
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    created a crawler comparitor
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Update ShavenMaven version
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Ensured model cache always returns a copy
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Imporved test
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Minor clean up
    Initial project import
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded to UI:664 for package move
    upgraded BG to use UI with scheduling code
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    upgraded utterlyidle (553) to get Module interface changes
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Move delete to its own resource and fix bug where deleting from a view would delete everything from that record definition
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Moved all crawler failure classes to failure package. Created FailureModule.
    Added crawler executor admin page for configuring queues crawler
    Split RecordsService for direct records access
    wired CrawlerFailureRepository into CrawlerFailures
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Enabled GZip for 'text/html' content
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Made lucene file urls work correctly
    Initial work to support switching persistence based on a Uri
    WIP: Added support for BGB using SQL as the backing store
    temp disabled decorating in search resource
    Created Http Queuing
    upgrade totallylazy & utterlyidle
    Updated BGB to use logging provided in LazyRecords
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Performance improvements around views
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Added batch import of views/crawlers
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Increase top padding to allow more room for legend
    Made sure etag is done after sitemesh
    Added ability to remove records
    Added 'reset' button to crawler definitions
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    The LuceneIndexDIrectory class to configure the location lucene will use to write the index, has become a config object to additionally specify if it should use a ram directory
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Improved performance of less via 304 and caching
    Added caching of 'less' and javascript resources
    start and stop jobs
    Moving scheduler to the request scope
    Moved static resources so they can be accessed when in library mode
    Extracted add modules method
    upgrading TL, UtterlyIdle and funclate versions
    upgrading waitrest and starting waitrest instance when starting baron for testing
    Spiking http scheduler
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Switched to using Twitter BootStrap
    Moving css to less
    Fixing unique links
    Moved classes and resources into sub packages
    Seperated ModelRendererActivator into sub activators
    Refactored CrawlerResource to have less responsibility
    Added a simple view menu
    Made CrawlerResource add a view
    Minor clean up
    Initial web search for lucene
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Changed case of any CheckPoint to Checkpoint
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    clean up warnings
    Made work with Java 7
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    Extracted crawler functionality from the resource
    Reduce memory requirements by removing a memorise from the root crawler
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Captured full crawler log in response
    upgrade totallylazy & utterlyidle
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Got new crawler working, except for dates
    Adding crawl all button and removing unused imports
    Add ellipses for pager
    Removed sorting of xml feed
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Added basic concurrent crawler support
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    Fixed build
    Stopped crawler from reading duplicate entries. Improved Jobs management
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    upgrading TL, UtterlyIdle and funclate versions
    Added aliases support
    Updated UIdle, Waitrest
    Using Record for crawling definition
    flexible checkpoint date support
    sorting entries within the feed by descending date if the checkpoint is of a java.util.Date type
    Adding support for record name with spaces
    Simplifying crawling logic and removing duplication
    replacing strings for more and checkpoint fields to keywords
    Preventing duplicate crawling when checkpoint is specified
    Upgrading TL, fixing dates handling in a crawler
    fixing checpoint logic and adding a test
    Added support for checpoints
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added feed pagination
    Filtering out empty names when creatinga a view from the crawler form
    Pushed some behaviour up to UIdle and TL
    More clean up around crawler resource
    Fixed sub crawling
    Building model from record definition
    Moved classes and resources into sub packages
    Create views screen
    Minor refactoring
    Got sub feed crawling via the UI working
    Refactor towards Crawling sub feeds
    Added test for XmlDefintionExtractor
    Refactored CrawlerResource to have less responsibility
    Updated TL Version
    Minor clean up
    Updated TL version
    Updated TL and removed dupliction
    Minor clean up
    Moved ApplicationBuilder to utterlyidle
    Added basic crawling of a xml based web serivce
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    changed Document to Option<Document> in DataTransformer
    Made sure BGB cleans up backups after tests
    SubfeedJobCreator now unique's on datasource instead of uri. DataTransformer fix for empty document
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    added checkpoint
    Refactoring & cleanup. Added duplicates removal in data transformer.
    added MoreDataCrawler
    added checkpoint handling
    extracted contents of functions to methods
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Updated crawler status page to display threads for retry queue correctly. Fixed malformed uri exception in PaginatedHttpJob.
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    fixed bug in crawler that wasn't merging data. Crawler V3 is FAST. (WIP)
    added an interface for StatusMonitor, and added RetryQueue to crawler status page
    Upgrade LR -> 1.18 to get thread safety fix
    Only attempt to crawl enabled crawlers to prevent the schedule page clogging up with errors
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Fixing potential None.get() invocation.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    moved updateView into master job
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working (merge)
    Fixed pagination not working
    changed disabled to enabled in code for crawler definitions
    changing crawlers property to disabled instead of enabled in order to simplify logic
    Made sure SearchResource does not execute multiple queries
    fixing null pointer in .enabled method
    pushed enabled method onto CrawlerRepository
    extracted CrawlerRepository
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Don't hang on to documents when crawling where possible
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Made sure new feeder works sequencially with large data
    Adding new crawler
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Moew work on Queue based crawler
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed forwardOnlyXmlRecordsReader
    Upgrade to UI that doesn't capture profiling data when not profiling, and minor refactorings
    Don't hang on to documents when crawling where possible
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Added support to delete all jobs and ensured crawler is interruptable
    upgrade totallylazy & utterlyidle
    Upgrade to latest records to get proper aliasing support in XML
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Upgraded with PECS TL and Cleaned up LazyRecords
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Optimizing imports
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Fixed bug hidden by erasure
    Got new crawler working, except for dates
    Added sub feed support to new crawler
    Adding new crawler
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Updated TL to 1130
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made all BGB resources support returning JSON models
    Reduce margin on input elements
    Made views run concurrently
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Added support for executors per definition and http authority
    Encapsulated status monitor in CrawlerExecutors
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Added support for batch put into lucene for improved write speed once the index gets large
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    pulled csv writing out of SearchResource
    moved bits into executor module
    Moved all crawler failure classes to failure package. Created FailureModule.
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    moved updateView into master job
    renamed crawlcontainer to crawlscope
    created executor package
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Updated crawler status page to display threads for retry queue correctly. Fixed malformed uri exception in PaginatedHttpJob.
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added crawler failures resource, now with RETRY\!
    fixed bug in crawler that wasn't merging data. Crawler V3 is FAST. (WIP)
    added an interface for StatusMonitor, and added RetryQueue to crawler status page
    Add executor visibility
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    clean up warnings
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Fixed crawler so subfeed data is not overwritten by parent data
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Upgrade to latest records to get proper aliasing support in XML
    Handle case where no document is returned from a subfeed URL
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Upgraded with PECS TL and Cleaned up LazyRecords
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Optimizing imports
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Got new crawler working, except for dates
    Made sure new feeder works sequencially with large data
    Added sub feed support to new crawler
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    QueuesCrawler uses CrawlerHttpClient
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    added a list of visited datasources
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Moved all crawler failure classes to failure package. Created FailureModule.
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Moved StagedJobExecutor into the CrawlerScope (renamed from CrawlerContainer)
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    Refactored Subfeed. Made sure datasource case is consistent.
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Changed FailureHandler to capture exceptions too
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Removed generic from StagedJob, as it was Response throughout the code.
    Updated crawler status page to display threads for retry queue correctly. Fixed malformed uri exception in PaginatedHttpJob.
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added CountLatch to notify us of when a crawl has completed. Added records updated count.
    Added crawler failures resource, now with RETRY\!
    moved write function into DataWriter. Removed write method from StagedJob.
    passdown uniques to subfeed jobs, rather than entire merged records
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Changed case of any CheckPoint to Checkpoint
    Fixed bug in PaginatedHttpJob that was causing the crawler to burn through next pages, if the checkpoint date did not exactly match
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    changed checkpoint logic to look for less than or equal to
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Minor cleanup
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    breaking down QueuesCrawler into small simple functions
    Moew work on Queue based crawler
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    Implemented subfeeds in concurrent crawler
    Extracted crawler functionality from the resource
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Optimizing imports
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Got new crawler working, except for dates
    Made sure new feeder works sequencially with large data
    Adding new crawler
    Upgrade LR -> 1.18 to get thread safety fix
    Cleaning up the latch code for crawling
    Rewrite DataWriter to use a Phaser and close in a finally block. Temporarily replace CountLatch with a Map in HttpJobExecutor to verify DataWriter works correctly
    Revert back to 1054
    Switch CountLatch for Phaser to check for Java 8 compatibility
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Fixed merging records using the wrong unique field in DataWriter.batchWrite.
    Variable naming tidyup
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Fixed extremely slow batchWrite for high loads of data.
    When writing changes, group data by definition name to allow writing partial definitions. Also merge definitions with the same name together
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made Executor Threads be named to aid debugging
    Reduce margin on input elements
    Made views run concurrently
    First stab of new boostrap
    First stab of new boostrap
    migrated StartupModule to ServicesModule
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Phill: prioritized queues. messy but works. Bodar to review.
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    CrawlerExecutors takes StagedJob for each JobExecutor
    Added a scheduled Job to run daily backups (merge)
    Parallel data writing
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    added RecordsUpdated back into QueuesCrawler
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Put writer queue capacity back in
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Added support for batch put into lucene for improved write speed once the index gets large
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Moved StagedJobExecutor into the CrawlerScope (renamed from CrawlerContainer)
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Brought back uniqueness check on definitions for QueuesCrawler.
    Removed uri debug. Temporary removal of uniques check in DataWriter.
    Added a check for a single unique field in the crawler definition. Fixed some styling issues in expandable frames.
    Removed generic from StagedJob, as it was Response throughout the code.
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added CountLatch to notify us of when a crawl has completed. Added records updated count.
    moved write function into DataWriter. Removed write method from StagedJob.
    fixed bug in crawler that wasn't merging data. Crawler V3 is FAST. (WIP)
    Some refactoring
    Moved pagination Datasource to Job
    added MoreDataCrawler
    added checkpoint handling
    extracted contents of functions to methods
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Updated to UI 711 for Jobs changes
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    Upgrade to latest bootstrap
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Cleaned up buttons
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Fixed names on status page. Added some links to crawler pages.
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Fixed jobUrl by upgrading funclate. Added message to crawlers list page when you change a crawler. Fixed style of dropdown on list page.
    added drop down to crawler admin to change the crawler implementation
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    removed duplication around coloured table headers
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Added delete all views, disabling batch operations when no crawlers/views exist
    Added delete all crawlers
    Reset all crawlers added
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Adding crawl all button and removing unused imports
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Changed scheduling work flow
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added simple end to end test for CrawlerResource
    Started moving Views towards same crud operations
    Added edit button
    Added quick crawl functionality
    Added import functionality
    Added export and delete
    Added simple list of crawlers
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Extracted create view from crawlers and added new button
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working (merge)
    Fixed pagination not working
    moved a button
    changing crawlers property to disabled instead of enabled in order to simplify logic
    Made sure SearchResource does not execute multiple queries
    Added copy crawler action
    added ability to enable/disable crawlers
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Added delete all crawlers test
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    Added 'reset' button to crawler definitions
    Added support to reset crawler
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    simplifying http scheduling
    Changed scheduling work flow
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Adding title to Crawler Status Page
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Jorge: bgbAdmin menu items rearranged
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Cleaned up buttons
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Fixed names on status page. Added some links to crawler pages.
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Updated crawler status page to display threads for retry queue correctly. Fixed malformed uri exception in PaginatedHttpJob.
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    reverted smoothie chart
    Added a switch to allow swapping in a different cralwer
    fixed bug in crawler that wasn't merging data. Crawler V3 is FAST. (WIP)
    Add executor visibility
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    clean up warnings
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Refactoring & cleanup. Added duplicates removal in data transformer.
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Upgraded with PECS TL and Cleaned up LazyRecords
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Made checkpoint support all types (string, date, uri)
    Got new crawler working, except for dates
    Made sure new feeder works sequencially with large data
    Removed duplicate and made unique required
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Upgrade LR -> 1.18 to get thread safety fix
    Cleaning up the latch code for crawling
    Rewrite DataWriter to use a Phaser and close in a finally block. Temporarily replace CountLatch with a Map in HttpJobExecutor to verify DataWriter works correctly
    Revert back to 1054
    Try catching any RuntimeExceptions in case they cause the latch not to be decremented
    Switch CountLatch for Phaser to check for Java 8 compatibility
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made crawlers interuptable
    Made crawlers interuptable
    Reduce margin on input elements
    Made views run concurrently
    First stab of new boostrap
    First stab of new boostrap
    migrated StartupModule to ServicesModule
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Phill: refactoring
    Phill: prioritized queues. messy but works. Bodar to review.
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    CrawlerExecutors takes StagedJob for each JobExecutor
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Added support for batch put into lucene for improved write speed once the index gets large
    upgraded funclate
    Removed functions from QueuesCrawler
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Fixed names on status page. Added some links to crawler pages.
    moved bits into executor module
    Added crawler executor admin page for configuring queues crawler
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    moved updateView into master job
    renamed crawlcontainer to crawlscope
    created executor package
    Began work on executor config resource
    Moved StagedJobExecutor into the CrawlerScope (renamed from CrawlerContainer)
    reinstated CountLatch into StagedJobExecutor
    pulled StagedJobExecutor out of QueuesCrawler
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Changed case of any CheckPoint to Checkpoint
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    added PaginatedHttpJob to CrawlerFailureRepository
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Minor cleanup
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    commit before crazy changes
    fixed checkpoint update implementation for missing next checkpoint value
    added checkpoint
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    got log working for QueuesCrawler
    Added crawler failures resource, now with RETRY\!
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    Extracted crawler functionality from the resource
    Reduce memory requirements by removing a memorise from the root crawler
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Captured full crawler log in response
    upgrade totallylazy & utterlyidle
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Got new crawler working, except for dates
    Adding crawl all button and removing unused imports
    Add ellipses for pager
    Removed sorting of xml feed
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Added basic concurrent crawler support
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    Fixed build
    Stopped crawler from reading duplicate entries. Improved Jobs management
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    upgrading TL, UtterlyIdle and funclate versions
    Added aliases support
    Updated UIdle, Waitrest
    Using Record for crawling definition
    flexible checkpoint date support
    sorting entries within the feed by descending date if the checkpoint is of a java.util.Date type
    Adding support for record name with spaces
    Simplifying crawling logic and removing duplication
    replacing strings for more and checkpoint fields to keywords
    Preventing duplicate crawling when checkpoint is specified
    Upgrading TL, fixing dates handling in a crawler
    fixing checpoint logic and adding a test
    Added support for checpoints
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added feed pagination
    Filtering out empty names when creatinga a view from the crawler form
    Pushed some behaviour up to UIdle and TL
    More clean up around crawler resource
    Fixed sub crawling
    Building model from record definition
    Moved classes and resources into sub packages
    Create views screen
    Minor refactoring
    Got sub feed crawling via the UI working
    Refactor towards Crawling sub feeds
    Added test for XmlDefintionExtractor
    Refactored CrawlerResource to have less responsibility
    Updated TL Version
    Minor clean up
    Updated TL version
    Updated TL and removed dupliction
    Minor clean up
    Moved ApplicationBuilder to utterlyidle
    Added basic crawling of a xml based web serivce
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    introduced properties baron-greenback.crawler.connect.timeout (deafult 50ms) and baron-greenback.crawler.read.timeout (default 60seconds)
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Created FileRoller to only allow x backups to exist (deleting old ones)
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Changed VisitedFactory to use BaronGreenbackProperties. Removed PersistenceUri.
    upgraded TotallyLazy
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Upgrade LR -> 1.18 to get thread safety fix
    Only attempt to crawl enabled crawlers to prevent the schedule page clogging up with errors
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Updating utterlyidle 766 -> 771
    Upgrading UI 755->765 to use new schedule method to stop UI from throwing (hidden) exceptions when it finds the wrong schedule method first
    deleting a crawler will now delete all failures created by that crawler
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Rename Types to PersistentTypes in preparation for new rendering types
    Support custom types in Baron Greenback (for rendering only) by adding them to the Types class
    Updated to UI 711 for Jobs changes
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded to UI:664 for package move
    upgraded BG to use UI with scheduling code
    Fix counts on views when a query with special characters is being used
    Made all BGB resources support returning JSON models
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Extracted create view from crawlers and added new button
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working (merge)
    Fixed pagination not working
    changed disabled to enabled in code for crawler definitions
    changing crawlers property to disabled instead of enabled in order to simplify logic
    Made sure SearchResource does not execute multiple queries
    pushed enabled method onto CrawlerRepository
    Fixed jobUrl by upgrading funclate. Added message to crawlers list page when you change a crawler. Fixed style of dropdown on list page.
    extracted CrawlerRepository
    Split crawler def and crawler imp resources
    Added copy crawler action
    added drop down to crawler admin to change the crawler implementation
    403-forbidden when crawling disabled crawler
    added ability to enable/disable crawlers
    Added 404 & message to CrawlerResource when trying to edit or export non-existant cralwers
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    got log working for QueuesCrawler
    Added crawler failures resource, now with RETRY\!
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    Extracted crawler functionality from the resource
    Reduce memory requirements by removing a memorise from the root crawler
    Made default crawler time a property
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Made lucene file urls work correctly
    Upgraded totallylazy. Moved rows updated to OK status message.
    Fixed bug when no records are updated
    Captured full crawler log in response
    removed duplication around coloured table headers
    Created Http Queuing
    upgrade totallylazy & utterlyidle
    Updated BGB to use logging provided in LazyRecords
    Upgrade to latest records to get proper aliasing support in XML
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Upgraded with PECS TL and Cleaned up LazyRecords
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Optimizing imports
    Added delete all views, disabling batch operations when no crawlers/views exist
    Extracting batch crawler operations to a separate resource
    Added delete all crawlers
    Reset all crawlers added
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    default checkpoint type is String
    Made checkpoint support all types (string, date, uri)
    Got new crawler working, except for dates
    Adding crawl all button and removing unused imports
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Added basic concurrent crawler support
    Increase top padding to allow more room for legend
    Added ability to remove records
    Added support to reset crawler
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    Filter out records without unique fields
    All submit buttons should be bootstrapped
    Fixed cssClass name to not have spaces for columnNames
    Stopped crawler from overwiting view definitions
    Added import and export to views
    Removed Views class
    Switche Views to using models, work in progress
    Added simple crawler exists method
    Added ability to import with a specific UUID
    Added LessCss module to server side compile less files
    Added caching of 'less' and javascript resources
    Minor Rename
    Jobs: now displays last response of any scheduled job
    using relative urls for jobs
    job url contains base path
    upgrading libs
    Added aliases support
    Upgrading TL version
    simplifying http scheduling
    Using Record for crawling definition
    flexible checkpoint date support
    Adding support for record name with spaces
    Simplifying crawling logic and removing duplication
    replacing strings for more and checkpoint fields to keywords
    Preventing duplicate crawling when checkpoint is specified
    Upgrading TL, fixing dates handling in a crawler
    Added support for checpoints
    Changed scheduling work flow
    Removing crawl button from the edit screen, refactoring scheduler
    Spiking http scheduler
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added feed pagination
    CRUD for views, removing unused less and st files
    More clean up around crawler resource
    Added groups
    Started moving Views towards same crud operations
    Added quick crawl functionality
    Added import functionality
    Added export and delete
    Added simple list of crawlers
    Added table sorting
    Fixed emptyKeyword
    Fixed saving of subfeeds
    Adde more button to add more fields
    Switched to using Twitter BootStrap
    Moved model creation to RecordDetinition
    Pulled out ModelRepository
    More renaming
    Renamed some fields
    Fields are visible by default
    Initial prototype of the record definition form with dynamic subfeeds
    Building model from record definition
    Made crawl template use model
    Added protection against negative number of fields in a crawler form
    Added additional rows too crawler
    Allow views to be updated
    Renamed templates
    Moved classes and resources into sub packages
    Used new TL methods
    Create views screen
    Added unique views and minor CSS clean up
    Minor refactoring
    Refactored CrawlerResource to have less responsibility
    Removed duplcation in form parameter handling
    Extracted input templates
    Added reset.css
    CSS: Aligned menu
    Added a simple view menu
    Made CrawlerResource add a view
    Added simple Views class
    WIP: Crawling sub feeds
    Started adding support for subfeeds
    Now updates or inserts based on a key
    Updated TL Version
    Minor clean up
    Updated TL version
    Updated TL version
    Added second example feed entry
    Added simple crawler interface
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Fixed CrawlerHttpClient to be more usable
    introduced properties baron-greenback.crawler.connect.timeout (deafult 50ms) and baron-greenback.crawler.read.timeout (default 60seconds)
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    upgraded utterlyidle (553) to get Module interface changes
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Added support for batch put into lucene for improved write speed once the index gets large
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Moved all crawler failure classes to failure package. Created FailureModule.
    Added crawler executor admin page for configuring queues crawler
    Split RecordsService for direct records access
    fixed bug where type field was being removed from failures persisted in lucene
    added PaginatedHttpJob to CrawlerFailureRepository
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    moved updateView into master job
    renamed crawlcontainer to crawlscope
    created executor package
    Began work on executor config resource
    Moved StagedJobExecutor into the CrawlerScope (renamed from CrawlerContainer)
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Add tinytype for SequentialCrawler's HttpClient
    Add tinytype for QueueCrawler's HttpHandler
    Changed FailureHandler to capture exceptions too
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    extracted CrawlerRepository
    Split crawler def and crawler imp resources
    register CrawlerActivator as a class, so that we can get him out later for the crawlerClass() method.
    Made sure BGB cleans up backups after tests
    Updated crawler status page to display threads for retry queue correctly. Fixed malformed uri exception in PaginatedHttpJob.
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added a switch to allow swapping in a different cralwer
    Added crawler failures resource, now with RETRY\!
    passdown uniques to subfeed jobs, rather than entire merged records
    fixed bug in crawler that wasn't merging data. Crawler V3 is FAST. (WIP)
    added a blocking retry rejection policy
    added a blocking retry rejection policy
    added an interface for StatusMonitor, and added RetryQueue to crawler status page
    Add executor visibility
    Sequential Crawler still the default
    Moved 3 executor services up to application scope for QueuesCrawler
    Add tiny type for failure queue and move up to application scope
    refactoring & cleanup of Jobs
    commit before crazy changes
    reverted CrawlerModule Crawler class
    added checkpoint
    Pushed more into Jobs
    WIP
    Moew work on Queue based crawler
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Added better test coverage for end to end tests
    removed less generation timing message
    Implemented subfeeds in concurrent crawler
    Extracted crawler functionality from the resource
    Made default crawler time a property
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Extracting batch crawler operations to a separate resource
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Adding crawl all button and removing unused imports
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Moved classes and resources into sub packages
    Seperated ModelRendererActivator into sub activators
    Removed ModelRenderer duplication
    Create views screen
    Refactored CrawlerResource to have less responsibility
    Made CrawlerResource add a view
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    changing crawlers property to disabled instead of enabled in order to simplify logic
    Made sure SearchResource does not execute multiple queries
    pushed enabled method onto CrawlerRepository
    added ability to enable/disable crawlers
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Made checkpoint support all types (string, date, uri)
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    fixing checpoint logic and adding a test
    Added support for checpoints
    Removing crawl button from the edit screen, refactoring scheduler
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added feed pagination
    More clean up around crawler resource
    Started move towards using models from form parameters
    UI clean up
    Fixed saving of subfeeds
    Adde more button to add more fields
    Switched to using Twitter BootStrap
    Renamed some fields
    Moving towards multiple subfeeds support
    Initial prototype of the record definition form with dynamic subfeeds
    Made crawl template use model
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Changed case of any CheckPoint to Checkpoint
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Stopped adding StringMappings directly into container now using BarongreenbackStringMappings
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Treat empty String as null in checkpoint handler
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    added PaginatedHttpJob to CrawlerFailureRepository
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    commit before crazy changes
    fixed checkpoint update implementation for missing next checkpoint value
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Make SequentialCrawler use abstracted checkpoint handler
    Implemented subfeeds in concurrent crawler
    Upgrade LR -> 1.18 to get thread safety fix
    Only attempt to crawl enabled crawlers to prevent the schedule page clogging up with errors
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded to UI:663 to get small bug fixes
    Fix counts on views when a query with special characters is being used
    Made all BGB resources support returning JSON models
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Split crawler def and crawler imp resources
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    Made default crawler time a property
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Created Http Queuing
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Introduced InvocationHandler to remove code duplication
    Extracting batch crawler operations to a separate resource -added missing class
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Adding new crawler
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduced default crawler interval to 1 minute
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    Made default crawler time a property
    Upgrade LR -> 1.18 to get thread safety fix
    Rewrite DataWriter to use a Phaser and close in a finally block. Temporarily replace CountLatch with a Map in HttpJobExecutor to verify DataWriter works correctly
    Revert back to 1054
    Switch CountLatch for Phaser to check for Java 8 compatibility
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Fixed compile, next tests
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Updated TL to 1130
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Updated all libs and switched to Amazon CDN (repo.bodar.com)
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Added support for batch put into lucene for improved write speed once the index gets large
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Moved all crawler failure classes to failure package. Created FailureModule.
    Split RecordsService for direct records access
    fixed bug where type field was being removed from failures persisted in lucene
    wired CrawlerFailureRepository into CrawlerFailures
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    fixed CrawlerFailuresResource
    Auto-created View should not be created if a view already looking at the same source exists
    removed some classes from CrawlerScope that are now chained down from the RequestScope
    renamed crawlcontainer to crawlscope
    Moved StagedJobExecutor into the CrawlerScope (renamed from CrawlerContainer)
    promoted CrawlContainer to a class
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Fixed CrawlerHttpClient to be more usable
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Fixed CrawlerHttpClient to be more usable
    introduced properties baron-greenback.crawler.connect.timeout (deafult 50ms) and baron-greenback.crawler.read.timeout (default 60seconds)
    Upgraded to TL:633 so that we can add a connect & read timeout to crawler requests. Added Request Time and Duration to failure list
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Add tinytype for SequentialCrawler's HttpClient
    Add tinytype for QueueCrawler's HttpHandler
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Upgrade to UI that doesn't capture profiling data when not profiling, and minor refactorings
    Excluded crawler requests from profiling
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Don't stop crawler when we have invalid xml from the feed.
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Made sure new feeder works sequencially with large data
    Added sub feed support to new crawler
    Adding new crawler
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Added error message on invalid query
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Extracted templates
    Added ability to import with a specific UUID
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added e2e test for import crawler functionality, upgrading utterlyidle to use the improved  uri handling mechanism
    Added import functionality
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    introduced properties baron-greenback.crawler.connect.timeout (deafult 50ms) and baron-greenback.crawler.read.timeout (default 60seconds)
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Created FileRoller to only allow x backups to exist (deleting old ones)
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    clean up warnings
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Fixed aliased keyword bug in PriorityMerge
    fixed bug in prioritymerge
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Added support for batch put into lucene for improved write speed once the index gets large
    upgraded funclate
    Added priority support in crawler fields
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Expose only one method for sorting from Sorter
    Updated to UI 711 for Jobs changes
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Upgraded to TL:633 so that we can add a connect & read timeout to crawler requests. Added Request Time and Duration to failure list
    Reduce margin on input elements
    Made views work concurrently
    First stab of new boostrap
    First stab of new boostrap
    migrated StartupModule to ServicesModule
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Cleaned up buttons
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    moved cralwerId from datasource into job's context
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Moved all crawler failure classes to failure package. Created FailureModule.
    moved pager & sorter model code into pager & sorter
    moved pager & sorter udner shared
    Split RecordsService for direct records access
    added sorting to failures page
    cosmetic
    moved Failure code to CrawlerFailures, so that CrawlerFailureRepository only knows about Records
    made ignoreAll instant
    added paging to failures page
    changed CrawlerFailureRepo to return Sequence<Pair<>> instead of Map
    display failure reason
    added PaginatedHttpJob to CrawlerFailureRepository
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Created a Failure class to replace Pair<StagedJob, String>
    fixed CrawlerFailuresResource
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    Refactored Subfeed. Made sure datasource case is consistent.
    pulled StagedJobExecutor out of QueuesCrawler
    reverted latch code around resubmitting failed jobs
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Changed FailureHandler to capture exceptions too
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Fixed jobUrl by upgrading funclate. Added message to crawlers list page when you change a crawler. Fixed style of dropdown on list page.
    Made sure BGB cleans up backups after tests
    Removed generic from StagedJob, as it was Response throughout the code.
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    added messages for actions in failure resource
    added ignore and retry all buttons
    added ignore button to failure
    added uri & response to cralwer failures page
    Added crawler failures resource, now with RETRY\!
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Upgraded to TL:633 so that we can add a connect & read timeout to crawler requests. Added Request Time and Duration to failure list
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Added created date and started comparison of staged jobs
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    save and load visited datasources for failures
    moved record (crawledRecord) from datasource into job's context
    Add a new all method to SearchResource that ignores a view's query
    moved cralwerId from datasource into job's context
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    added a list of visited datasources
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Moved all crawler failure classes to failure package. Created FailureModule.
    Split RecordsService for direct records access
    fixed bug where type field was being removed from failures persisted in lucene
    added remove to CrawlerFailureRepository
    added PaginatedHttpJob to CrawlerFailureRepository
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Moved all crawler failure classes to failure package. Created FailureModule.
    Split RecordsService for direct records access
    added PaginatedHttpJob to CrawlerFailureRepository
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Upgraded to TL:633 so that we can add a connect & read timeout to crawler requests. Added Request Time and Duration to failure list
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Moved all crawler failure classes to failure package. Created FailureModule.
    Split RecordsService for direct records access
    added PaginatedHttpJob to CrawlerFailureRepository
    Creating CrawlerFailureRepository which now persists HttpJob
    Created a Failure class to replace Pair<StagedJob, String>
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Changed case of any CheckPoint to Checkpoint
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Upgraded to TL:633 so that we can add a connect & read timeout to crawler requests. Added Request Time and Duration to failure list
    Stopped adding StringMappings directly into container now using BarongreenbackStringMappings
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Added created date and started comparison of staged jobs
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    save and load visited datasources for failures
    moved record (crawledRecord) from datasource into job's context
    Add a new all method to SearchResource that ignores a view's query (merge)
    Add a new all method to SearchResource that ignores a view's query
    moved cralwerId from datasource into job's context
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Moved all crawler failure classes to failure package. Created FailureModule.
    Split RecordsService for direct records access
    fixed bug where type field was being removed from failures persisted in lucene
    added remove to CrawlerFailureRepository
    added PaginatedHttpJob to CrawlerFailureRepository
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Updated to UI 711 for Jobs changes
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    Upgrade to latest bootstrap
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Cleaned up buttons
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Fixed names on status page. Added some links to crawler pages.
    Moved all crawler failure classes to failure package. Created FailureModule.
    moved pager & sorter model code into pager & sorter
    Split RecordsService for direct records access
    added sorting to failures page
    added paging to failures page
    display failure reason
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    added ignore and retry all buttons
    added ignore button to failure
    added uri & response to cralwer failures page
    Added crawler failures resource, now with RETRY\!
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Upgraded to TL:633 so that we can add a connect & read timeout to crawler requests. Added Request Time and Duration to failure list
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Cleaned up buttons
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Moved all crawler failure classes to failure package. Created FailureModule.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Changed case of any CheckPoint to Checkpoint
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    clean up warnings
    Upgraded to TL:633 so that we can add a connect & read timeout to crawler requests. Added Request Time and Duration to failure list
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Added created date and started comparison of staged jobs
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    tidy
    save and load visited datasources for failures
    moved record (crawledRecord) from datasource into job's context
    Add a new all method to SearchResource that ignores a view's query
    moved cralwerId from datasource into job's context
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Moved all crawler failure classes to failure package. Created FailureModule.
    Split RecordsService for direct records access
    small refactor
    fixed bug where type field was being removed from failures persisted in lucene
    added remove to CrawlerFailureRepository
    added PaginatedHttpJob to CrawlerFailureRepository
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    upgraded utterlyidle (553) to get Module interface changes
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Moved all crawler failure classes to failure package. Created FailureModule.
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Minor clean up
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Optimizing imports
    Delete all jobs
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    Extracting Jobs from HttpScheduler to separate responsibilites
    adding job wrapper around job record
    Removed unused lucene functionality
    Adding crawl all button and removing unused imports
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Fixed 'Too many open files' exception
    Renamed start and stop methods
    Moving scheduler to the request scope
    Fixed intermitant timing tests with a latch
    Spiking http scheduler
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Moved all crawler failure classes to failure package. Created FailureModule.
    Split RecordsService for direct records access
    moved Failure code to CrawlerFailures, so that CrawlerFailureRepository only knows about Records
    made ignoreAll instant
    changed CrawlerFailureRepo to return Sequence<Pair<>> instead of Map
    wired CrawlerFailureRepository into CrawlerFailures
    Creating CrawlerFailureRepository which now persists HttpJob
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Created a Failure class to replace Pair<StagedJob, String>
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Changed FailureHandler to capture exceptions too
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Removed generic from StagedJob, as it was Response throughout the code.
    Updated crawler status page to display threads for retry queue correctly. Fixed malformed uri exception in PaginatedHttpJob.
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    added ignore and retry all buttons
    added ignore button to failure
    Added crawler failures resource, now with RETRY\!
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Upgraded to TL:633 so that we can add a connect & read timeout to crawler requests. Added Request Time and Duration to failure list
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Moved all crawler failure classes to failure package. Created FailureModule.
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Created a Failure class to replace Pair<StagedJob, String>
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Changed FailureHandler to capture exceptions too
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Removed generic from StagedJob, as it was Response throughout the code.
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added crawler failures resource, now with RETRY\!
    fixed bug in crawler that wasn't merging data. Crawler V3 is FAST. (WIP)
    Add tiny type for failure queue and move up to application scope
    Some refactoring
    Moved pagination Datasource to Job
    WIP
    added MoreDataCrawler
    extracted contents of functions to methods
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    save and load visited datasources for failures
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Moved all crawler failure classes to failure package. Created FailureModule.
    Split RecordsService for direct records access
    tidy FailureMarshallers
    fixed bug where type field was being removed from failures persisted in lucene
    added MasterPaginatedHttpJob to CrawlerFailureRepository
    added PaginatedHttpJob to CrawlerFailureRepository
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    deleting a crawler will now delete all failures created by that crawler
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Upgraded to TL:633 so that we can add a connect & read timeout to crawler requests. Added Request Time and Duration to failure list
    Made work with Java 7
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    save and load visited datasources for failures
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Moved all crawler failure classes to failure package. Created FailureModule.
    Split RecordsService for direct records access
    moved Failure code to CrawlerFailures, so that CrawlerFailureRepository only knows about Records
    made ignoreAll instant
    fixed bug where type field was being removed from failures persisted in lucene
    wired CrawlerFailureRepository into CrawlerFailures
    added remove to CrawlerFailureRepository
    added PaginatedHttpJob to CrawlerFailureRepository
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Upgraded to TL:633 so that we can add a connect & read timeout to crawler requests. Added Request Time and Duration to failure list
    Stopped adding StringMappings directly into container now using BarongreenbackStringMappings
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Added created date and started comparison of staged jobs
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    moved cralwerId from datasource into job's context
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Moved all crawler failure classes to failure package. Created FailureModule.
    Split RecordsService for direct records access
    fixed bug where type field was being removed from failures persisted in lucene
    added remove to CrawlerFailureRepository
    added MasterPaginatedHttpJob to CrawlerFailureRepository
    added PaginatedHttpJob to CrawlerFailureRepository
    Upgrade LR -> 1.18 to get thread safety fix
    Rewrite DataWriter to use a Phaser and close in a finally block. Temporarily replace CountLatch with a Map in HttpJobExecutor to verify DataWriter works correctly
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Phill: oops - am new to Mercurial. missing files.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    More work on seperating the queues
    Initial go at reducing duplication in Blocking Queue
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    Made views run concurrently
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Phill: prioritized queues. messy but works. Bodar to review.
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Added support for batch put into lucene for improved write speed once the index gets large
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Fixing the crawlerExecutorConfig so that no exceptions are thrown in debug mode.
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made all BGB resources support returning JSON models
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Put writer queue capacity back in
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Added crawler executor admin page for configuring queues crawler
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    moved updateView into master job
    renamed crawlcontainer to crawlscope
    created executor package
    Began work on executor config resource
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Changed thread pools to have a fixed size.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Changed queues to be fixed size, and now uses CallerRunsPolicy
    Fix counts on views when a query with special characters is being used
    Made Executor Threads be named to aid debugging
    Made sure all executors created by factory are also closed
    Reduce margin on input elements
    Made views run concurrently
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Created bounded priority queue (BoundedPriorityBlockingQueue). Change ThreadPoolExecutorFactory if you don't like this implementation.
    More refactoring. Executors pulled into separate factory making the test less verbose.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Fixed signal issue
    More work on seperating the queues
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Added crawler executor admin page for configuring queues crawler
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Fixed CrawlerHttpClient to be more usable
    More work on seperating the queues
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Fixed CrawlerHttpClient to be more usable
    More work on seperating the queues
    Initial go at reducing duplication in Blocking Queue
    More cleanup around bounded queue
    Renamed signal classes
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Optimization: notify rather than notifyAll to avoid the thundering herd problem
    Created bounded priority queue (BoundedPriorityBlockingQueue). Change ThreadPoolExecutorFactory if you don't like this implementation.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    More refactoring. Executors pulled into separate factory making the test less verbose.
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    upgraded utterlyidle (553) to get Module interface changes
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Added support for batch put into lucene for improved write speed once the index gets large
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Moved all crawler failure classes to failure package. Created FailureModule.
    Added crawler executor admin page for configuring queues crawler
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Added batch import of views/crawlers
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Increasing default output handler threads from 1 to 10. The version of lucene we use now supports Concurrent Flushing.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Changed queues to be fixed size, and now uses CallerRunsPolicy
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    More refactoring. Executors pulled into separate factory making the test less verbose.
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    changed deafult for processing queue capacity to 1000
    Put writer queue capacity back in
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Added support for batch put into lucene for improved write speed once the index gets large
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    made crawler executor defaults sensible
    moved bits into executor module
    Added crawler executor admin page for configuring queues crawler
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Put writer queue capacity back in
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Added support for batch put into lucene for improved write speed once the index gets large
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Added crawler executor admin page for configuring queues crawler
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    More work on seperating the queues
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    Made views run concurrently
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Phill: prioritized queues. messy but works. Bodar to review.
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Added support for batch put into lucene for improved write speed once the index gets large
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Fixed names on status page. Added some links to crawler pages.
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    moved updateView into master job
    renamed crawlcontainer to crawlscope
    created executor package
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Updated crawler status page to display threads for retry queue correctly. Fixed malformed uri exception in PaginatedHttpJob.
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    fixed bug in crawler that wasn't merging data. Crawler V3 is FAST. (WIP)
    added an interface for StatusMonitor, and added RetryQueue to crawler status page
    Add executor visibility
    Moved 3 executor services up to application scope for QueuesCrawler
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made sure all executors created by factory are also closed
    Reduce margin on input elements
    Made views run concurrently
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    More refactoring. Executors pulled into separate factory making the test less verbose.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Fixed CrawlerHttpClient to be more usable
    More work on seperating the queues
    Reduce margin on input elements
    Made views run concurrently
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Fixed bug where we we have duplicate executors
    Updated TL(877) so that autobackup now deletes directories
    More refactoring. Executors pulled into separate factory making the test less verbose.
    Phill: started on the priority queue. not fully implemented yet (ie, not yet integrated with real code - that should be straightforward but am going to add a type-safety refactoring) but the multithreaded test passes
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Added support for executors per definition and http authority
    CrawlerExecutors takes StagedJob for each JobExecutor
    Encapsulated status monitor in CrawlerExecutors
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Put writer queue capacity back in
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Added support for batch put into lucene for improved write speed once the index gets large
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Fixed names on status page. Added some links to crawler pages.
    moved bits into executor module
    Added crawler executor admin page for configuring queues crawler
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    moved updateView into master job
    renamed crawlcontainer to crawlscope
    created executor package
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Fixed concurrent modification error in visited datasources. (After upgrade to totallylazy-1130)
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    clean up warnings
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Added created date and started comparison of staged jobs
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    upgraded TotallyLazy
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    tidy
    moved record (crawledRecord) from datasource into job's context
    Add a new all method to SearchResource that ignores a view's query (merge)
    Add a new all method to SearchResource that ignores a view's query
    moved cralwerId from datasource into job's context
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    added a list of visited datasources
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    small refactor
    Fixed pagination to be fast with big datasets
    removed SubfeedDatasource, and flattened into HttpDatasource
    Switched to using immutable record and keywords
    fixed CrawlerFailuresResource
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Moved StagedJobExecutor into the CrawlerScope (renamed from CrawlerContainer)
    changed Sequence<Pair<Keyword<?>, Object>> to Record in Datasource classes
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    Refactored Subfeed. Made sure datasource case is consistent.
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    SubfeedJobCreator now unique's on datasource instead of uri. DataTransformer fix for empty document
    Removed uri debug. Temporary removal of uniques check in DataWriter.
    Removed generic from StagedJob, as it was Response throughout the code.
    Updated crawler status page to display threads for retry queue correctly. Fixed malformed uri exception in PaginatedHttpJob.
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added CountLatch to notify us of when a crawl has completed. Added records updated count.
    merged DocumentProcessor and SubfeedJobCreator
    uncommented tests, and added previous uniques to subfeed test
    passdown uniques to subfeed jobs, rather than entire merged records
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Changed case of any CheckPoint to Checkpoint
    Fixed bug in PaginatedHttpJob that was causing the crawler to burn through next pages, if the checkpoint date did not exactly match
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    clean up warnings
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Added created date and started comparison of staged jobs
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Added support for batch put into lucene for improved write speed once the index gets large
    upgraded funclate
    Removed functions from QueuesCrawler
    Added priority support in crawler fields
    Upgraded lazy records
    moved record (crawledRecord) from datasource into job's context
    Add a new all method to SearchResource that ignores a view's query (merge)
    Add a new all method to SearchResource that ignores a view's query
    moved cralwerId from datasource into job's context
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    added a list of visited datasources
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    added PaginatedHttpJob to CrawlerFailureRepository
    small refactor
    Creating CrawlerFailureRepository which now persists HttpJob
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    removed some classes from CrawlerScope that are now chained down from the RequestScope
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Moved StagedJobExecutor into the CrawlerScope (renamed from CrawlerContainer)
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    Refactored Subfeed. Made sure datasource case is consistent.
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    changed Document to Option<Document> in DataTransformer
    Made sure BGB cleans up backups after tests
    tidy up PaginatedHttpJob, removed if's, replaced with functional
    Removed generic from StagedJob, as it was Response throughout the code.
    Minor cleanup
    Updated crawler status page to display threads for retry queue correctly. Fixed malformed uri exception in PaginatedHttpJob.
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added CountLatch to notify us of when a crawl has completed. Added records updated count.
    merged DocumentProcessor and SubfeedJobCreator
    passdown uniques to subfeed jobs, rather than entire merged records
    Some refactoring
    refactoring & cleanup of Jobs
    fixed checkpoint update implementation for missing next checkpoint value
    added checkpoint
    Refactoring & cleanup. Added duplicates removal in data transformer.
    Moved to context
    Moved pagination Datasource to Job
    Added unique keys & value to Subfeeder2
    Pushed more into Jobs
    WIP
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Changed case of any CheckPoint to Checkpoint
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Stopped adding StringMappings directly into container now using BarongreenbackStringMappings
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Added created date and started comparison of staged jobs
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Extracted create view from crawlers and added new button
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Removed functions from QueuesCrawler
    Added priority support in crawler fields
    Upgraded lazy records
    moved record (crawledRecord) from datasource into job's context
    Add a new all method to SearchResource that ignores a view's query (merge)
    Add a new all method to SearchResource that ignores a view's query
    remove StringMappings dependency on MasterPaginatedHttpJob
    moved cralwerId from datasource into job's context
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    added a list of visited datasources
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    added MasterPaginatedHttpJob to CrawlerFailureRepository
    added PaginatedHttpJob to CrawlerFailureRepository
    small refactor
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    fixed CrawlerFailuresResource
    Auto-created View should not be created if a view already looking at the same source exists
    removed some classes from CrawlerScope that are now chained down from the RequestScope
    moved updateView into master job
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Moved StagedJobExecutor into the CrawlerScope (renamed from CrawlerContainer)
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    Refactored Subfeed. Made sure datasource case is consistent.
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    changed Document to Option<Document> in DataTransformer
    Made sure BGB cleans up backups after tests
    Removed generic from StagedJob, as it was Response throughout the code.
    Updated crawler status page to display threads for retry queue correctly. Fixed malformed uri exception in PaginatedHttpJob.
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added CountLatch to notify us of when a crawl has completed. Added records updated count.
    Added crawler failures resource, now with RETRY\!
    passdown uniques to subfeed jobs, rather than entire merged records
    Some refactoring
    refactoring & cleanup of Jobs
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Added created date and started comparison of staged jobs
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Removed functions from QueuesCrawler
    Added priority support in crawler fields
    Upgraded lazy records
    moved record (crawledRecord) from datasource into job's context
    Add a new all method to SearchResource that ignores a view's query (merge)
    Add a new all method to SearchResource that ignores a view's query
    moved cralwerId from datasource into job's context
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    added a list of visited datasources
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    small refactor
    Creating CrawlerFailureRepository which now persists HttpJob
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    fixed CrawlerFailuresResource
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Moved StagedJobExecutor into the CrawlerScope (renamed from CrawlerContainer)
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    Refactored Subfeed. Made sure datasource case is consistent.
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Removed generic from StagedJob, as it was Response throughout the code.
    Updated crawler status page to display threads for retry queue correctly. Fixed malformed uri exception in PaginatedHttpJob.
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added CountLatch to notify us of when a crawl has completed. Added records updated count.
    moved write function into DataWriter. Removed write method from StagedJob.
    merged DocumentProcessor and SubfeedJobCreator
    passdown uniques to subfeed jobs, rather than entire merged records
    fixed bug in crawler that wasn't merging data. Crawler V3 is FAST. (WIP)
    moved records to request scope in QueuesCrawler
    Some refactoring
    refactoring & cleanup of Jobs
    commit before crazy changes
    added checkpoint
    Refactoring & cleanup. Added duplicates removal in data transformer.
    Moved to context
    Moved pagination Datasource to Job
    added some logging into QueuesCrawler
    Added unique keys & value to Subfeeder2
    Pushed more into Jobs
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Added search box for jobs history, and enabled searching on elapsed time
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Allowing registration of custom renderers for specific types.
    Rename Types to PersistentTypes in preparation for new rendering types
    Support custom types in Baron Greenback (for rendering only) by adding them to the Types class
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Rename Types to PersistentTypes in preparation for new rendering types
    Support custom types in Baron Greenback (for rendering only) by adding them to the Types class
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Renamed PersistenceApplicationScope and PersistenceRequestScope to BGB
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Added a scheduled Job to run daily backups (merge)
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Fixed StackOverFlow error when using SQL
    Initial work to support switching persistence based on a Uri
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Rename Types to PersistentTypes in preparation for new rendering types
    Support custom types in Baron Greenback (for rendering only) by adding them to the Types class
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Stopped adding StringMappings directly into container now using BarongreenbackStringMappings
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Changed VisitedFactory to use BaronGreenbackProperties. Removed PersistenceUri.
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Fixed StackOverFlow error when using SQL
    Initial work to support switching persistence based on a Uri
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Fixed StackOverFlow error when using SQL
    Made lucene file urls work correctly
    upgrade totallylazy & utterlyidle
    Updated BGB to use logging provided in LazyRecords
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Added Model Mapping
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Allowing registration of custom renderers for specific types.
    Rename Types to PersistentTypes in preparation for new rendering types
    Support custom types in Baron Greenback (for rendering only) by adding them to the Types class
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded BG to use UI with scheduling code
    Fix counts on views when a query with special characters is being used
    Stopped adding StringMappings directly into container now using BarongreenbackStringMappings
    Renamed PersistenceApplicationScope and PersistenceRequestScope to BGB
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Added a scheduled Job to run daily backups (merge)
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    upgraded utterlyidle (553) to get Module interface changes
    Add a (probably temporary) clear selection button
    Changed VisitedFactory to use BaronGreenbackProperties. Removed PersistenceUri.
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Added support to override persistence classes
    Fixed StackOverFlow error when using SQL
    Made lucene file urls work correctly
    Initial work to support switching persistence based on a Uri
    Updated BGB to use logging provided in LazyRecords
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Rename Types to PersistentTypes in preparation for new rendering types
    Support custom types in Baron Greenback (for rendering only) by adding them to the Types class
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Stopped adding StringMappings directly into container now using BarongreenbackStringMappings
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Rename Types to PersistentTypes in preparation for new rendering types
    Support custom types in Baron Greenback (for rendering only) by adding them to the Types class
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Changed VisitedFactory to use BaronGreenbackProperties. Removed PersistenceUri.
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Fixed StackOverFlow error when using SQL
    Initial work to support switching persistence based on a Uri
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Support custom types in Baron Greenback (for rendering only) by adding them to the Types class
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Renamed PersistenceApplicationScope and PersistenceRequestScope to BGB
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Made lucene file urls work correctly
    Initial work to support switching persistence based on a Uri
    WIP: Added support for BGB using SQL as the backing store
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    WIP: Added support for BGB using SQL as the backing store
    upgrade totallylazy & utterlyidle
    Fixed Records not being closed
    Records, and the activator are closeable
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Fixed bug in constructor
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Changed VisitedFactory to use BaronGreenbackProperties. Removed PersistenceUri.
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Fixed StackOverFlow error when using SQL
    Made lucene file urls work correctly
    Initial work to support switching persistence based on a Uri
    Upgrade LR -> 1.18 to get thread safety fix
    Improving the performance of faceted search
    Collapsing/expanding the side bar
    Upgrading LR 1.8->1.11 to import Lucene NRT changes
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Adding support for faceting fields and supporting drilling down on facets in search page
    Increasing Lucene's max clauses count and making it configurable via property
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Upgraded LR 274->275 to enable case insensitive search
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Added basic index/check page
    fixed a bug in fileUrl() that was failing nio indexes
    Exposed utility methods
    Renamed PersistenceApplicationScope and PersistenceRequestScope to BGB
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Added a scheduled Job to run daily backups (merge)
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Added background thread storage property
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    upgraded utterlyidle (553) to get Module interface changes
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    Use a RecordsActivator to ensure the LuceneRecords are being closed
    Added property to change pool impl and fixed close method
    Updated to latest Lucene Pool
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Added support to override persistence classes
    Fixed StackOverFlow error when using SQL
    Made lucene file urls work correctly
    Initial work to support switching persistence based on a Uri
    WIP: Added support for BGB using SQL as the backing store
    upgrade totallylazy & utterlyidle
    Updated BGB to use logging provided in LazyRecords
    Fixed Records not being closed
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Updated to use faster lucene records
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Flipped the order that the directory and indexwriter are added in the lucene module, so that the directory will be closed after the index write, and included a test to verify this works
    The LuceneIndexDIrectory class to configure the location lucene will use to write the index, has become a config object to additionally specify if it should use a ram directory
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Stopped crawler from overwiting view definitions
    Added LessCss module to server side compile less files
    Added Model Mapping
    Moving scheduler to the request scope
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Upgrading LR 1.8->1.11 to import Lucene NRT changes
    Upgrade LR -> 1.18 to get thread safety fix
    Improving the performance of faceted search
    Collapsing/expanding the side bar
    Upgrading LR 1.8->1.11 to import Lucene NRT changes
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Adding support for faceting fields and supporting drilling down on facets in search page
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Upgrading LR 1.8->1.11 to import Lucene NRT changes
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Extracted lucine directory type constants to DirectoryType enum
    Upgrade LR -> 1.18 to get thread safety fix
    Improving the performance of faceted search
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Added basic index/check page
    Extracted lucine directory type constants to DirectoryType enum
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Added a scheduled Job to run daily backups (merge)
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Moved Lucene backup and restore to LazyRecords
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Moved zip stuff to TL
    (merge)
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Check the user is sure before deleting everything
    Added online backup support for lucene and h2
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Made lucene file urls work correctly
    WIP: Added support for BGB using SQL as the backing store
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Initial work to support switching persistence based on a Uri
    WIP: Added support for BGB using SQL as the backing store
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Renamed PersistenceApplicationScope and PersistenceRequestScope to BGB
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Added a scheduled Job to run daily backups (merge)
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    upgraded utterlyidle (553) to get Module interface changes
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Added support to override persistence classes
    Fixed StackOverFlow error when using SQL
    Initial work to support switching persistence based on a Uri
    WIP: Added support for BGB using SQL as the backing store
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Added a scheduled Job to run daily backups (merge)
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    (merge)
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Added online backup support for lucene and h2
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Made lucene file urls work correctly
    WIP: Added support for BGB using SQL as the backing store
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Updated to UI 711 for Jobs changes
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Scheduler stop and start buttons replaced by a single toggle button. Upgraded to UI 671.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Changed schedules action button labels so they are more meaningful
    upgraded to UI:664 for package move
    upgraded BG to use UI with scheduling code
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    removed duplication around coloured table headers
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Delete all jobs
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Exposed unique data as meta data
    Added configurable index directory location
    Stopped crawler from reading duplicate entries. Improved Jobs management
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Jobs: now displays last response of any scheduled job
    start and stop jobs
    simplifying http scheduling
    edit and delete jobs
    Changed scheduling work flow
    Spiking http scheduler
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Removed response entity and displaying just 'OK' on job's creation success in schedules page. Upgraded UI 711 -> 727
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded to UI:664 for package move
    upgraded BG to use UI with scheduling code
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Added crawl all test
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    Stopped crawler from reading duplicate entries. Improved Jobs management
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Jobs: now displays last response of any scheduled job
    simplifying http scheduling
    edit and delete jobs
    Displaying jobs in a table
    Changed scheduling work flow
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded to UI:664 for package move
    changed labels in schedules edit page
    upgraded BG to use UI with scheduling code
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Jobs: now displays last response of any scheduled job
    edit and delete jobs
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Updated TL to 1130
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Added basic index/check page
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Added basic index/check page
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Added basic index/check page
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    upgraded utterlyidle (553) to get Module interface changes
    Add a (probably temporary) clear selection button
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Introduce separate URLs for actions so they can have security applied in Penfold
    upgraded funclate
    Move delete to its own resource and fix bug where deleting from a view would delete everything from that record definition
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Added batch import of views/crawlers
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Supporting drilldowns when searching
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Replaced 'BGB.search.bulk.actions.allIdentifiers' with 'BGB.search.countSelectedRows'. The new function does not rely on the actions forms' 'query' hidden input field.
    Stuart & Jorge: Moving query from the URL in the form action to a hidden input so it doesn't get dropped by the browser.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made all BGB resources support returning JSON models
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Export should be able to do the selected rows
    Introduce separate URLs for actions so they can have security applied in Penfold
    upgraded funclate
    Add support for selecting individual rows and performing an action on them
    Move export and delete into Action Resource
    Add method for deleting specific ids from a view
    Move delete to its own resource and fix bug where deleting from a view would delete everything from that record definition
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Supporting drilldowns when searching
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Selected rows message is now displayed next to Selection buttons
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    moved select buttons to right of page
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Add a select all button and fix select page not to toggle
    Introduce separate URLs for actions so they can have security applied in Penfold
    upgraded funclate
    Add a Select Page button
    Move export and delete into Action Resource
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Supporting drilldowns when searching
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Replaced 'BGB.search.bulk.actions.allIdentifiers' with 'BGB.search.countSelectedRows'. The new function does not rely on the actions forms' 'query' hidden input field.
    Stuart & Jorge: Moving query from the URL in the form action to a hidden input so it doesn't get dropped by the browser.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Introduce separate URLs for actions so they can have security applied in Penfold
    Upgrade LR -> 1.18 to get thread safety fix
    Column used to find records should be the first visible one, not just the first
    Up-ing the priority of the individual id export handler to prevent UI always choosing the 'export all' handler
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Upgrading TL 1.11->1.51, LR 1.3->1.8 and refactored FacetsResource.
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Supporting drilldowns when searching
    Supporting aliases for not-visible fields in views
    Populating meta tag with number of results to make the logic to retrieve it easier
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Tactical fix for export performance until aliased keyword support is in LazyRecords
    SearchResource.unique() will now display fields and groups in the same order as they appear in the view definition.
    Expose only one method for sorting from Sorter
    Supporting aliased keyword when sorting search page columns.
    Unaliasing definitions in all SearchResource methods.
    Moved aliasing logic into SearchResource due to performance issues
    Primary view policy should be applied only if the result of the search is in current view.
    Wired primary view shortcut policy as default policy.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Restored findAll method removed in last commit.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Including all headers in records search and removed 'findAll' method/path
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Updated LR:236
    Made all BGB resources support returning JSON models
    Adding properties that can be used in a parsed query
    Reduce margin on input elements
    First stab of new boostrap
    First stab of new boostrap
    migrated StartupModule to ServicesModule
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Fixed downloadable csv for both Chrome & IE
    upgraded utterlyidle (553) to get Module interface changes
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Export should be able to do the selected rows
    upgraded funclate
    Remove unused parameter
    Move delete to its own resource and fix bug where deleting from a view would delete everything from that record definition
    upgraded totallylazy & utterlyidle
    Re-add accidentally reverted changes
    Added priority support in crawler fields (merge)
    Added priority support in crawler fields
    Improve performance by realise()ing the model's keyword sequence
    make HTML version of list be highest priority
    Add a JSON representation of the list data
    Removed memory leak caused by holding onto front of sequence
    Upgraded lazy records
    Deleted csvWriter
    Checking in updated export code
    export csv now doesnt export hidden colums
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    sorted results of csv export
    created a crawler comparitor
    pulled csv writing out of SearchResource
    Added export as csv to search resource
    moved bits into executor module
    removed escapedName & unique from sorter header model
    moved pager & sorter model code into pager & sorter
    moved pager & sorter udner shared
    Split RecordsService for direct records access
    added sorting to failures page
    changed CrawlerFailureRepo to return Sequence<Pair<>> instead of Map
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    Inline Views into ViewsRepository
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    WIP: Added support for BGB using SQL as the backing store
    upgrade totallylazy & utterlyidle
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Upgraded with PECS TL and Cleaned up LazyRecords
    Switched to LazyRecords parser
    Switched to using LazyRecords
    Shortcut uses finUnique rather than findAll as the first one looks at all headers not just the visible ones
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Unique returns 404 when record not found
    Renaming search service to records service and removing data source dependencies from search resource
    refactoring SerchService
    refactored list method in SearchResource
    added faceting
    Optimizing imports
    Performance improvements around views
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Got new crawler working, except for dates
    Adding crawl all button and removing unused imports
    Add server-side sorting for results
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    CSS cleanup around views
    Split record name from query
    Started using decorator
    Made PredicateParser decoratable
    Functional refactor
    Seperated happy and sad paths
    Removed duplication
    Added error message on invalid query
    Parser supports whitespaces
    Switched to using standalone predicate parser
    Increase top padding to allow more room for legend
    Increase top padding to allow more room for legend
    Added ability to remove records
    Added 'reset' button to crawler definitions
    reordering buttons
    Added view copy
    Switched to using correct predicates so it will work with any records implementation (merge)
    Added initial Query Parser
    Quote search terms when rendering links to prevent special characters affecting the query
    Search result links are absolutely specified to prevent problems when sitemeshing
    Views: No match == no view, also added special 'records' view to show all data
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    Stopped crawler from reading duplicate entries. Improved Jobs management
    All submit buttons should be bootstrapped
    Extracted templates
    Fixed cssClass name to not have spaces for columnNames
    Allowed views to support custom query prefix
    Stopped crawler from overwiting view definitions
    Added import and export to views
    Removed Views class
    Added LessCss module to server side compile less files
    Exposing query in a meta tag
    Moving scheduler to the request scope
    Replaced string concatination with query building
    Adding support for record name with spaces
    Column ordering
    Changed scheduling work flow
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Fixing bug: crawing after import didn't work
    Added groups
    Made search work against all fields
    Allow views to be updated
    Got links working in views
    Moved classes and resources into sub packages
    Used new TL methods
    Used new funclate callable
    Added unique views and minor CSS clean up
    Added a simple view menu
    Made CrawlerResource add a view
    Updated TL version
    Added simple crawler interface
    Minor clean up
    Got some initial search working
    Initial web search for lucene
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Supporting drilldowns when searching
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Changing the no results message
    Populating meta tag with number of results to make the logic to retrieve it easier
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Fixing pagination controls position in IE7.
    Fixing selected row count label position in IE7.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Created a separated class for tablet-actions so it doesn't conflict with real actions' css
    Selected rows message is now displayed next to Selection buttons
    Switched pagination controls with actions bar
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    Upgrade to latest bootstrap
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    moved select buttons to right of page
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    removed escapedName & unique from sorter header model
    moved pager & sorter udner shared
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    removed duplication around coloured table headers
    Created Http Queuing
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Styling fix so that sorting links take up the whole header, and the javascript table sorted kicks in if all the data is being shown
    Add server-side sorting for results
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Added error message on invalid query
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Switched to using correct predicates so it will work with any records implementation (merge)
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Fixed cssClass name to not have spaces for columnNames
    Minor fix for IE7 support
    Added LessCss module to server side compile less files
    Removed quoting 'unique' values
    Exposing query in a meta tag
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added table sorting
    Improved test coverage and 'view/template' convention
    Moved classes and resources into sub packages
    Added unique views and minor CSS clean up
    Minor clean up
    Got some initial search working
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made StandardParser use correct constructor
    Upgrade LR -> 1.18 to get thread safety fix
    Trim queries before bracketing them to prevent syntax errors
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Update records prefixing to bracket queries. This prevents stupid OR clauses from bypassing view queries!
    Sort search page results by first *visible* header
    Supporting drilldowns when searching
    Supporting querying for aliased fields
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Preserving metadata when unwrapping an AliasedKeyword
    Moved aliasing logic into SearchResource due to performance issues
    Added support for aliases fields in views.
    Fixed performance regression after TotallyLazy 1154.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Restored findAll method removed in last commit.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Including all headers in records search and removed 'findAll' method/path
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Updated TL to 1130
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    clean up warnings
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Move delete to its own resource and fix bug where deleting from a view would delete everything from that record definition
    Added priority support in crawler fields (merge)
    Added priority support in crawler fields
    Improve performance by realise()ing the model's keyword sequence
    Upgraded lazy records
    export csv now doesnt export hidden colums
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Added export as csv to search resource
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    Inline Views into ViewsRepository
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    WIP: Added support for BGB using SQL as the backing store
    upgrade totallylazy & utterlyidle
    Upgrade to latest records to get proper aliasing support in XML
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Upgraded with PECS TL and Cleaned up LazyRecords
    Switched to LazyRecords parser
    Switched to using LazyRecords
    Making count work even without explicit query param definition
    the shortcut action now either sends you to the unique page for a search
    Count using the same algorithm as findUnique and findAll
    Removing duplication between findUnique and findAll
    Making findUnique more lenient
    Replacing find with filter as find throws ClassCastException in some scenarios
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    inlining methods
    Extracted query predicate building to a separate class
    Unique returns 404 when record not found
    Renaming search service to records service and removing data source dependencies from search resource
    refactoring SerchService
    refactored list method in SearchResource
    added faceting
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Supporting drilldowns when searching
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Primary view policy should be applied only if the result of the search is in current view.
    Added ShortcutPolicy to decide when to jump to the first result when searching. Created policy to check if there is just one result in primary views.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Fix results alignment in all screens
    Move views menu to go side-by-side with unique results
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Ensured meta data values are correctly encoded
    Exposed unique data as meta data
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Extracted templates
    Dan, Stu - Upgrade to latest bootstrap
    Added LessCss module to server side compile less files
    Exposing query in a meta tag
    added groupName as a class of a fieldset
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    UI clean up
    Added groups
    Moved classes and resources into sub packages
    Added unique views and minor CSS clean up
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Supporting drilldowns when searching
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Wired primary view shortcut policy as default policy.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Stopped adding StringMappings directly into container now using BarongreenbackStringMappings
    Moved lazyrecords classes into BGB scope
    Made StandardParser use correct constructor
    Tidy up code to increase reuse. Also add a subtractHours counterpart to addHours
    Upgrade libraries to get consistent date parser and nicer methods for adding hours
    More tolerant of input strings. output strings always include ms.
    Function to change times
    Add now as a date available anywhere in a predicate expression
    Add support for reading properties in View queries
    Adding properties that can be used in a parsed query
    Reduce margin on input elements
    First stab of new boostrap
    First stab of new boostrap
    migrated StartupModule to ServicesModule
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    upgraded utterlyidle (553) to get Module interface changes
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Move export and delete into Action Resource
    Added priority support in crawler fields (merge)
    Added priority support in crawler fields
    Allow for extensibility with Replacements
    Add a JSON representation of the list data
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    moved pager & sorter udner shared
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Extracted query predicate building to a separate class
    Optimizing imports
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Adding crawl all button and removing unused imports
    Add server-side sorting for results
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Created UtterlyIdle module to define parser parameters
    Started using decorator
    Made PredicateParser decoratable
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Moving scheduler to the request scope
    Temp: fixed analyzer to KeywordAnalyzer
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Pushed some behaviour up to UIdle and TL
    Made search work against all fields
    Adding redirect from the root path
    Moved classes and resources into sub packages
    Seperated ModelRendererActivator into sub activators
    Removed ModelRenderer duplication
    Added unique views and minor CSS clean up
    Refactored CrawlerResource to have less responsibility
    Added a simple view menu
    Made CrawlerResource add a view
    Started adding support for subfeeds
    Now updates or inserts based on a key
    Made searches work
    Added simple crawler interface
    Minor clean up
    Got some initial search working
    Initial web search for lucene
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Supporting drilldowns when searching
    Populating meta tag with number of results to make the logic to retrieve it easier
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Wired primary view shortcut policy as default policy.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Move actions code into a separate file to simplify footer
    Export should be able to do the selected rows
    Add an 'are you sure' confirmation for bulk actions
    Add a select all button and fix select page not to toggle
    upgraded funclate
    Add a Select Page button
    Add support for selecting individual rows and performing an action on them
    Move export and delete into Action Resource
    Move delete to its own resource and fix bug where deleting from a view would delete everything from that record definition
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Added export as csv to search resource
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    exposing query exception in meta tags
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Added error message on invalid query
    Increase top padding to allow more room for legend
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Exposing query in a meta tag
    adding view name to the title
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    UI clean up
    Added groups
    Added simple list of crawlers
    Switched to using Twitter BootStrap
    Improved test coverage and 'view/template' convention
    Moved classes and resources into sub packages
    Removed more duplication in templates and css
    Added a simple view menu
    Started adding support for subfeeds
    Minor clean up
    Got some initial search working
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Supporting drilldowns when searching
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Moved lazyrecords classes into BGB scope
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Supporting drilldowns when searching
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Supporting drilldowns when searching
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Upgraded with PECS TL and Cleaned up LazyRecords
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Extracted query predicate building to a separate class
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Supporting drilldowns when searching
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Fixed escaping special characters in csv writer
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Supporting drilldowns when searching
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Primary view policy should be applied only if the result of the search is in current view.
    Added ShortcutPolicy to decide when to jump to the first result when searching. Created policy to check if there is just one result in primary views.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added support to move or remove a field form view or crawler definition, Removed unused bootstrap 1.1
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Fixing the fading effect for quicklinks in Firefox
    Enrico & Olga: Fixing quicklinks javascript for IE8
    Adding quick navigation links to the details page
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Moved classes and resources into sub packages
    Added reset.css
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added simple crawler exists method
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added export and delete
    Pulled out ModelRepository
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    added functions to replace spaces with dashes or underscores in string templates
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Replace fieldsets and legends with divs for cross-browser appearance
    Replace fieldsets and legends with divs for cross-browser appearance
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Extracted templates
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added ability to import with a specific UUID
    Added LessCss module to server side compile less files
    Added support for checpoints
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    CRUD for views, removing unused less and st files
    Started move towards using models from form parameters
    Switched to using Twitter BootStrap
    Renamed templates
    Moved classes and resources into sub packages
    Extracted input templates
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Added error message on invalid query
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added ability to import with a specific UUID
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Fixed StackOverFlow error when using SQL
    Initial work to support switching persistence based on a Uri
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    Stopped crawler from reading duplicate entries. Improved Jobs management
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    added messages for actions in failure resource
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    delete index takes you to the same page
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Adding crawl all button and removing unused imports
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Pushed some behaviour up to UIdle and TL
    Improved test coverage and 'view/template' convention
    Moved classes and resources into sub packages
    Seperated ModelRendererActivator into sub activators
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added ability to import with a specific UUID
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    CRUD for views, removing unused less and st files
    Adde more button to add more fields
    Switched to using Twitter BootStrap
    Moved classes and resources into sub packages
    Removed more duplication in templates and css
    Extracted input templates
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Fixed sorting results table columns by using DataTables sorting feature instead of TableSorter.
    Upgraded UI 732->733, jQuery 1.6.4->1.10.2, jQuery UI 1.8.16->1.10.3. Introduced DataTables and FixedHeader jQuery plugins to make the results table header always visibile when scrolling page.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Created Http Queuing
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Styling fix so that sorting links take up the whole header, and the javascript table sorted kicks in if all the data is being shown
    Add server-side sorting for results
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    Defaulted sorting to be descending on first column
    All submit buttons should be bootstrapped
    Allowed views to support custom query prefix
    Added support to move or remove a field form view or crawler definition, Removed unused bootstrap 1.1
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added table sorting
    Fixed saving of subfeeds
    Improving more button
    Adde more button to add more fields
    Switched to using Twitter BootStrap
    Moving towards multiple subfeeds support
    refactoring subfeed js
    Initial prototype of the record definition form with dynamic subfeeds
    Made crawl template use model
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added support to hide a view. Also fixed bug when view only has one field
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Filtering out empty names when creatinga a view from the crawler form
    More clean up around crawler resource
    Started move towards using models from form parameters
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Extracted create view from crawlers and added new button
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added support to move or remove a field form view or crawler definition, Removed unused bootstrap 1.1
    Added LessCss module to server side compile less files
    Added support for checpoints
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    CRUD for views, removing unused less and st files
    Started move towards using models from form parameters
    Shortened form names
    Expanded end to end to test
    Added groups
    Added table sorting
    Fixed saving of subfeeds
    Switched to using Twitter BootStrap
    Fixed sub crawling
    Moving css to less
    More renaming
    More renaming
    Renamed some fields
    Moving towards multiple subfeeds support
    Initial prototype of the record definition form with dynamic subfeeds
    Made crawl template use model
    Renamed templates
    Moved classes and resources into sub packages
    Removed more duplication in templates and css
    Extracted input templates
    Started adding support for subfeeds
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Allowing registration of custom renderers for specific types.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using production version of jquery-migrate plugin.
    Fixing table sorting using datatables column types detection and improved logic for fixed header positioning.
    Moved FixedHeader and sorting initialization code inside tables-related js file.
    Fixed sorting results table columns by using DataTables sorting feature instead of TableSorter.
    Upgraded UI 732->733, jQuery 1.6.4->1.10.2, jQuery UI 1.8.16->1.10.3. Introduced DataTables and FixedHeader jQuery plugins to make the results table header always visibile when scrolling page.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    server side -- not working yet
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Added bgb admin menu
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Create a BGB namespace for the JS API to live in
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Move actions code into a separate file to simplify footer
    upgraded funclate
    Add support for selecting individual rows and performing an action on them
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Captured full crawler log in response
    Created Http Queuing
    upgrade totallylazy & utterlyidle
    Views reflect search query
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Added batch delete to clean the whole index
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    No redirect after error and preserve invalid batch model after form submission
    added batch export
    Added batch import of views/crawlers
    Removed unused lucene functionality
    Remove hrefs for disabled links
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Updated TL version
    Added support to move or remove a field form view or crawler definition, Removed unused bootstrap 1.1
    Added LessCss module to server side compile less files
    Upgraded less, jquery and fixed favicon
    Added caching of 'less' and javascript resources
    Removed quoting 'unique' values
    Added missing files
    Moved static resources so they can be accessed when in library mode
    edit and delete jobs
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added views admin link
    UI clean up
    Added simple end to end test for CrawlerResource
    Added groups
    Added simple list of crawlers
    Added table sorting
    Improving more button
    Switched to using Twitter BootStrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Convert facet entry count to be stored as a string rather than a number
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    clean up warnings
    Made work with Java 7
    Adding properties that can be used in a parsed query
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Re-add accidentally reverted changes
    Added priority support in crawler fields
    Improve performance by realise()ing the model's keyword sequence
    Use CachedClassLoader for performance improvements in CSV exports
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Creating CrawlerFailureRepository which now persists HttpJob
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    Inline Views into ViewsRepository
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added unique keys & value to Subfeeder2
    Moew work on Queue based crawler
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    Extracted crawler functionality from the resource
    Fixed concurency issue when queue is full, updated crawler time, fixed Java 7 issue
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Upgrade to latest records to get proper aliasing support in XML
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Upgraded with PECS TL and Cleaned up LazyRecords
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Optimizing imports
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Got new crawler working, except for dates
    Adding new crawler
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Added error message on invalid query
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    Fixed big B boolean eqaulity crazyness
    All submit buttons should be bootstrapped
    Allowed views to support custom query prefix
    Removed Views class
    Added LessCss module to server side compile less files
    Using Record for crawling definition
    flexible checkpoint date support
    fixing subfeed removal in a crawler definition screen
    fixing checpoint logic and adding a test
    Added support for checpoints
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Moved model value callable to funclate
    Filtering out empty names when creatinga a view from the crawler form
    More clean up around crawler resource
    Got alias saving
    Started move towards using models from form parameters
    Fixing bug: crawing after import didn't work
    Added groups
    Started moving Views towards same crud operations
    Added quick crawl functionality
    Fixed saving of subfeeds
    Moved model creation to RecordDetinition
    Building model from record definition
    Renamed templates
    Moved classes and resources into sub packages
    Added missing files
    Minor refactoring
    Refactor towards Crawling sub feeds
    Added test for XmlDefintionExtractor
    Refactored CrawlerResource to have less responsibility
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Made crawl template use model
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added support to move or remove a field form view or crawler definition, Removed unused bootstrap 1.1
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added support to hide a view. Also fixed bug when view only has one field
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    More clean up around crawler resource
    Started move towards using models from form parameters
    Moved classes and resources into sub packages
    Added missing files
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Allowing registration of custom renderers for specific types.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    UI clean up
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Updated to UI 711 for Jobs changes
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added better support for backup and restore
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Added model repository caching and fixed modifying mutable view models bug
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Changed scheduling work flow
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Moved classes and resources into sub packages
    Seperated ModelRendererActivator into sub activators
    Extracted input templates
    Added a simple view menu
    Made CrawlerResource add a view
    Added simple crawler interface
    Minor clean up
    Got some initial search working
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made work with Java 7
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Extracted ModelRepository interface in prep for caching
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Upgrade to latest records to get proper aliasing support in XML
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Upgraded with PECS TL and Cleaned up LazyRecords
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    added faceting
    Optimizing imports
    Definition fix
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Removed Views class
    Switche Views to using models, work in progress
    Added simple crawler exists method
    Added LessCss module to server side compile less files
    Minor cleanup
    Added Model Mapping
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added export and delete
    Added simple list of crawlers
    Pulled out ModelRepository
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added ability to import with a specific UUID
    Added LessCss module to server side compile less files
    Added support for checpoints
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added ability to import with a specific UUID
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Fixing bug in ModelRepository cache where entries from repository were not being loaded into the cache under some circumstances.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Ensured model cache always returns a copy
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Added model repository caching and fixed modifying mutable view models bug
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Upgraded less, jquery and fixed favicon
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    UI clean up
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added ability to import with a specific UUID
    Added LessCss module to server side compile less files
    Added support for checpoints
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Allowing registration of custom renderers for specific types.
    Allowing custom date format in DateRenderer through 'barongreenback.date.format' property.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded BG to use UI with scheduling code
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    moved pager & sorter udner shared
    Added crawler executor admin page for configuring queues crawler
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    removed SubfeedDatasource, and flattened into HttpDatasource
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added crawler failures resource, now with RETRY\!
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    added functions to replace spaces with dashes or underscores in string templates
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ability to choose how many rows per page to see
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    Fix unsuccessful merge
    reordering buttons
    Added view copy
    Upgrade Funclate
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Jobs: now displays last response of any scheduled job
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Pushed some behaviour up to UIdle and TL
    Expanded end to end to test
    Got links working in views
    Improved test coverage and 'view/template' convention
    Moved classes and resources into sub packages
    Seperated ModelRendererActivator into sub activators
    Extracted input templates
    Added a simple view menu
    Made CrawlerResource add a view
    Added simple crawler interface
    Minor clean up
    Got some initial search working
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Fixed jobUrl by upgrading funclate. Added message to crawlers list page when you change a crawler. Fixed style of dropdown on list page.
    Split crawler def and crawler imp resources
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    upgrading libs
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added simple list of crawlers
    Improving more button
    Switched to using Twitter BootStrap
    Added additional rows too crawler
    Got links working in views
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Populating meta tag with number of results to make the logic to retrieve it easier
    Adding support for searches with dates in summer time
    Escaping special characters contained in query to html entities when selecting all the rows
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Moved FixedHeader and sorting initialization code inside tables-related js file.
    Fixed sorting results table columns by using DataTables sorting feature instead of TableSorter.
    Upgraded UI 732->733, jQuery 1.6.4->1.10.2, jQuery UI 1.8.16->1.10.3. Introduced DataTables and FixedHeader jQuery plugins to make the results table header always visibile when scrolling page.
    Replaced 'BGB.search.bulk.actions.allIdentifiers' with 'BGB.search.countSelectedRows'. The new function does not rely on the actions forms' 'query' hidden input field.
    Replaced 'BGB.search.bulk.actions.allIdentifiers' with 'BGB.search.countSelectedRows'. The new function does not rely on the actions forms' 'query' hidden input field.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Fix row count (after bootstrap upgrade)
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Create a BGB namespace for the JS API to live in
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Updating jquery-ui to custom version including missing modules.
    Upgraded UI 732->733, jQuery 1.6.4->1.10.2, jQuery UI 1.8.16->1.10.3. Introduced DataTables and FixedHeader jQuery plugins to make the results table header always visibile when scrolling page.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Made ModelCleaner work with Lists
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Initial work to support switching persistence based on a Uri
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Stopped adding StringMappings directly into container now using BarongreenbackStringMappings
    Moved lazyrecords classes into BGB scope
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    removed duplication around coloured table headers
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    added ignore button to failure
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add server-side sorting for results
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Fixed cssClass name to not have spaces for columnNames
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added table sorting
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Adding support for faceting fields and supporting drilling down on facets in search page
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Renamed PersistenceApplicationScope and PersistenceRequestScope to BGB
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    Added property to change pool impl and fixed close method
    put useCache() call back into LessCssHandler
    Fixed StackOverFlow error when using SQL
    Made lucene file urls work correctly
    Initial work to support switching persistence based on a Uri
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using production version of jquery-migrate plugin.
    Upgrade LR -> 1.18 to get thread safety fix
    Fixing test
    Collapsing/expanding the side bar
    Adding 'Remove all filters' link
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Adding support for faceting fields and supporting drilling down on facets in search page
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Removed unintentional commit
    Escaped URI in BGB screens
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Extracted templates
    Allow for the possibility that BG properties might already be defined
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Allowing registration of custom renderers for specific types.
    Adding property (barongreenback.modelrepository.cache.enabled) for disabling the model repository cache. Cache is enabled by default.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded to UI:663 to get small bug fixes
    Fix counts on views when a query with special characters is being used
    Stopped adding StringMappings directly into container now using BarongreenbackStringMappings
    Moved lazyrecords classes into BGB scope
    Renamed PersistenceApplicationScope and PersistenceRequestScope to BGB
    Made all BGB resources support returning JSON models
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    upgraded utterlyidle (553) to get Module interface changes
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    extracted CrawlerRepository
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Added model repository caching and fixed modifying mutable view models bug
    Extracted ModelRepository interface in prep for caching
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Initial work to support switching persistence based on a Uri
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Optimizing imports
    Introduced InvocationHandler to remove code duplication
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Jobs: now displays last response of any scheduled job
    job url contains base path
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    More clean up around crawler resource
    Added simple list of crawlers
    Pulled out ModelRepository
    Adding redirect from the root path
    Moved classes and resources into sub packages
    Seperated ModelRendererActivator into sub activators
    Removed ModelRenderer duplication
    Create views screen
    Made CrawlerResource add a view
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Replace fieldsets and legends with divs for cross-browser appearance
    Replace fieldsets and legends with divs for cross-browser appearance
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added support to move or remove a field form view or crawler definition, Removed unused bootstrap 1.1
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    CRUD for views, removing unused less and st files
    Started move towards using models from form parameters
    Added single empty keyword definitions
    Fixed emptyKeyword
    Fixed saving of subfeeds
    Adde more button to add more fields
    Moving css to less
    Renamed some fields
    Made crawl template use model
    Added additional rows too crawler
    Renamed templates
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Adding crawl all button and removing unused imports
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    More clean up around crawler resource
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    Stopped crawler from reading duplicate entries. Improved Jobs management
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Adding property (barongreenback.modelrepository.cache.enabled) for disabling the model repository cache. Cache is enabled by default.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Fixing table sorting using datatables column types detection and improved logic for fixed header positioning.
    Upgrade LR -> 1.18 to get thread safety fix
    Fixes for side menu in default-decorated pages
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Fix results alignment in all screens
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using production version of jquery-migrate plugin.
    Fixing table sorting using datatables column types detection and improved logic for fixed header positioning.
    Moved FixedHeader and sorting initialization code inside tables-related js file.
    Fixed sorting results table columns by using DataTables sorting feature instead of TableSorter.
    Upgraded UI 732->733, jQuery 1.6.4->1.10.2, jQuery UI 1.8.16->1.10.3. Introduced DataTables and FixedHeader jQuery plugins to make the results table header always visibile when scrolling page.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    server side -- not working yet
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Added bgb admin menu
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Create a BGB namespace for the JS API to live in
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Move actions code into a separate file to simplify footer
    upgraded funclate
    Add support for selecting individual rows and performing an action on them
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Captured full crawler log in response
    Created Http Queuing
    upgrade totallylazy & utterlyidle
    Views reflect search query
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Added batch delete to clean the whole index
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    No redirect after error and preserve invalid batch model after form submission
    added batch export
    Added batch import of views/crawlers
    Removed unused lucene functionality
    Remove hrefs for disabled links
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Updated TL version
    Added support to move or remove a field form view or crawler definition, Removed unused bootstrap 1.1
    Added LessCss module to server side compile less files
    Upgraded less, jquery and fixed favicon
    Added caching of 'less' and javascript resources
    Removed quoting 'unique' values
    Added missing files
    Moved static resources so they can be accessed when in library mode
    edit and delete jobs
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added views admin link
    UI clean up
    Added simple end to end test for CrawlerResource
    Added groups
    Added simple list of crawlers
    Added table sorting
    Improving more button
    Switched to using Twitter BootStrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Upgraded UI 732->733, jQuery 1.6.4->1.10.2, jQuery UI 1.8.16->1.10.3. Introduced DataTables and FixedHeader jQuery plugins to make the results table header always visibile when scrolling page.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Upgraded UI 732->733, jQuery 1.6.4->1.10.2, jQuery UI 1.8.16->1.10.3. Introduced DataTables and FixedHeader jQuery plugins to make the results table header always visibile when scrolling page.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Jorge: bgbAdmin menu items rearranged
    upgraded BG to use UI with scheduling code
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    Upgrade to latest bootstrap
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Added bgb admin menu
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Allowing custom date format in DateRenderer through 'barongreenback.date.format' property.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Upgraded to TL:633 so that we can add a connect & read timeout to crawler requests. Added Request Time and Duration to failure list
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Dates are lexically ordered for easy sorting
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Upgraded UI 732->733, jQuery 1.6.4->1.10.2, jQuery UI 1.8.16->1.10.3. Introduced DataTables and FixedHeader jQuery plugins to make the results table header always visibile when scrolling page.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Escaped URI in BGB screens
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Pushed some behaviour up to UIdle and TL
    Started move towards using models from form parameters
    Moved classes and resources into sub packages
    Made CrawlerResource add a view
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Added model repository caching and fixed modifying mutable view models bug
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Created FileRoller to only allow x backups to exist (deleting old ones)
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    added drop down to crawler admin to change the crawler implementation
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    (merge)
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Added online backup support for lucene and h2
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Adding crawl all button and removing unused imports
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    Added 'reset' button to crawler definitions
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    start and stop jobs
    Changed scheduling work flow
    Removing crawl button from the edit screen, refactoring scheduler
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Started moving Views towards same crud operations
    Upgrade LR -> 1.18 to get thread safety fix
    Fixing test
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Prevent multiple execution of resizeHandler during defer timeout.
    Deferring execution of resize handler due to firefox's delay in hiding scrollbars.
    DataTables feature can be disable using .static class on tables.
    Don't try to emulate fixed position -- it is too flickery in Chrome/IE. Instead move it after scrolling finishes.
    Fixing reposition of fixed header after sorting and introducing module pattern.
    Reverted page layout and adapted fixed header feature to work with it.
    Fixing table sorting using datatables column types detection and improved logic for fixed header positioning.
    Preventing tables.js code from executing in pages with no results table.
    Moved FixedHeader and sorting initialization code inside tables-related js file.
    Fixed sorting results table columns by using DataTables sorting feature instead of TableSorter.
    Upgraded UI 732->733, jQuery 1.6.4->1.10.2, jQuery UI 1.8.16->1.10.3. Introduced DataTables and FixedHeader jQuery plugins to make the results table header always visibile when scrolling page.
    Replaced 'BGB.search.bulk.actions.allIdentifiers' with 'BGB.search.countSelectedRows'. The new function does not rely on the actions forms' 'query' hidden input field.
    Replaced 'BGB.search.bulk.actions.allIdentifiers' with 'BGB.search.countSelectedRows'. The new function does not rely on the actions forms' 'query' hidden input field.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Fix row count (after bootstrap upgrade)
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Create a BGB namespace for the JS API to live in
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Creating CrawlerFailureRepository which now persists HttpJob
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Added model repository caching and fixed modifying mutable view models bug
    Extracted ModelRepository interface in prep for caching
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Upgrade to latest records to get proper aliasing support in XML
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Upgraded with PECS TL and Cleaned up LazyRecords
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    added faceting
    Optimizing imports
    Definition fix
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Removed Views class
    Switche Views to using models, work in progress
    Added simple crawler exists method
    Added LessCss module to server side compile less files
    Minor cleanup
    Added Model Mapping
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added export and delete
    Added simple list of crawlers
    Pulled out ModelRepository
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding 'Remove all filters' link
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Decreasing the width of facet labels
    Increase facet entry size to support 7 digit counts
    Fix initial padding of data in unique screen
    Fix results alignment in all screens
    Hide 'show results' banner from unique results
    Move views menu to go side-by-side with unique results
    Transform view names into title case
    Update views styling to make active view more clear
    Convert facet entry count to be stored as a string rather than a number
    Upgrading TL 1.11->1.51, LR 1.3->1.8 and refactored FacetsResource.
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Fixing overlapping divs on Jobs History page
    Captialise action in Jobs History
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Making the legend's title display always on top.
    Fixing page control overlapping over rowpager in IE8.
    Reverted page layout and adapted fixed header feature to work with it.
    Fixing table sorting using datatables column types detection and improved logic for fixed header positioning.
    Upgraded UI 732->733, jQuery 1.6.4->1.10.2, jQuery UI 1.8.16->1.10.3. Introduced DataTables and FixedHeader jQuery plugins to make the results table header always visibile when scrolling page.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Fixed field border overlapping with legend box.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Created a separated class for tablet-actions so it doesn't conflict with real actions' css
    Selected rows message is now displayed next to Selection buttons
    Switched pagination controls with actions bar
    upgraded BG to use UI with scheduling code
    Changed group style to make it easier to differenciate between groups.
    Fix counts on views when a query with special characters is being used
    Make borders appear on IE7
    Fix navbar to top of screen
    Restore table heading colours when tablesorting is enabled
    Reduce margin on input elements
    Fix IE7 content overlapping menubar issue
    Fix IE7 content overlapping menubar issue
    Re-enable expander
    Server side working again
    Upgrade to latest bootstrap
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Cleaned up fieldset and legend
    Fixed select boxes to be correct size
    Made fieldset's have rounded corners and calculate legend margin from baseline
    Cleaned up buttons
    Changed Map to ImmutableModel in QueuesCrawler
    Added bgb admin menu
    Extracted create view from crawlers and added new button
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    moved select buttons to right of page
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Add a select all button and fix select page not to toggle
    upgraded funclate
    Add a Select Page button
    Add support for selecting individual rows and performing an action on them
    Move export and delete into Action Resource
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    correcting css class on export button
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    Made delete all also kill and recreate crawler executors
    Tighten padding around table cells
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Fixed jobUrl by upgrading funclate. Added message to crawlers list page when you change a crawler. Fixed style of dropdown on list page.
    added drop down to crawler admin to change the crawler implementation
    added ability to enable/disable crawlers
    Made sure BGB cleans up backups after tests
    Added a check for a single unique field in the crawler definition. Fixed some styling issues in expandable frames.
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    added ignore and retry all buttons
    added ignore button to failure
    added uri & response to cralwer failures page
    Added better support for backup and restore
    (merge)
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Added online backup support for lucene and h2
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Captured full crawler log in response
    upgrade totallylazy & utterlyidle
    Fix randomly overlapping elements in unique item view in IE7 by setting a position.
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Added delete all crawlers
    Reset all crawlers added
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    added nowrap for results table cells
    Got new crawler working, except for dates
    Adding crawl all button and removing unused imports
    Add ability to choose how many rows per page to see
    Styling fix so that sorting links take up the whole header, and the javascript table sorted kicks in if all the data is being shown
    Add server-side sorting for results
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    CSS cleanup around views
    Added error message on invalid query
    Increase top padding to allow more room for legend
    Increase top padding to allow more room for legend
    Increase top padding to allow more room for legend
    aligning name and value fields to the top
    Added ability to remove records
    Update padding and margin on fieldsets
    Added support to reset crawler
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Replace fieldsets and legends with divs for cross-browser appearance
    Replace fieldsets and legends with divs for cross-browser appearance
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    Stopped crawler from reading duplicate entries. Improved Jobs management
    resizing request and response on jobs list on mouse over
    All submit buttons should be bootstrapped
    Extracted templates
    Fixed cssClass name to not have spaces for columnNames
    Added support to move or remove a field form view or crawler definition, Removed unused bootstrap 1.1
    Added ability to import with a specific UUID
    Fixed hover and danger button style to always work
    Made LessCssHandler cache compilation result as Rhino/Less.js is just too slow
    Dan, Stu - Upgrade to latest bootstrap
    Minor fix for IE7 support
    Added LessCss module to server side compile less files
    Jobs: now displays last response of any scheduled job
    Renamed start and stop methods
    Added missing files
    Added support for checpoints
    Removing crawl button from the edit screen, refactoring scheduler
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    CRUD for views, removing unused less and st files
    Started move towards using models from form parameters
    Added checkboxs to end to end test
    UI clean up
    Added groups
    Made delete a 'danger' button
    Started moving Views towards same crud operations
    Added edit button
    Added quick crawl functionality
    Added import functionality
    Added export and delete
    Added simple list of crawlers
    Added table sorting
    Fixed emptyKeyword
    Fixed saving of subfeeds
    Adde more button to add more fields
    Switched to using Twitter BootStrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Cleaned up buttons
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added better support for backup and restore
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added simple end to end test for CrawlerResource
    Started moving Views towards same crud operations
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Adding crawl all button and removing unused imports
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added simple list of crawlers
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Allowing registration of custom renderers for specific types.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Moved lazyrecords classes into BGB scope
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    UI clean up
    Started moving Views towards same crud operations
    Made crawl template use model
    Added additional rows too crawler
    Renamed templates
    Moved classes and resources into sub packages
    Removed more duplication in templates and css
    Cleaned up input fields
    Create views screen
    Refactored CrawlerResource to have less responsibility
    Started adding support for subfeeds
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Renamed PersistenceApplicationScope and PersistenceRequestScope to BGB
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    Added property to change pool impl and fixed close method
    put useCache() call back into LessCssHandler
    Fixed StackOverFlow error when using SQL
    Initial work to support switching persistence based on a Uri
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Rename Types to PersistentTypes in preparation for new rendering types
    Support custom types in Baron Greenback (for rendering only) by adding them to the Types class
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    changing crawlers property to disabled instead of enabled in order to simplify logic
    Made sure SearchResource does not execute multiple queries
    added ability to enable/disable crawlers
    Added 404 & message to CrawlerResource when trying to edit or export non-existant cralwers
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    Extracted crawler functionality from the resource
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Made checkpoint support all types (string, date, uri)
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Added support for checpoints
    Removing crawl button from the edit screen, refactoring scheduler
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    CRUD for views, removing unused less and st files
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Moved classes and resources into sub packages
    Minor clean up
    Initial web search for lucene
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Upgraded UI 732->733, jQuery 1.6.4->1.10.2, jQuery UI 1.8.16->1.10.3. Introduced DataTables and FixedHeader jQuery plugins to make the results table header always visibile when scrolling page.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Added batch delete to clean the whole index
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Added batch delete to clean the whole index
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Escaping special characters contained in query to html entities when selecting all the rows
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Removing hidden input when de-selecting a row after selecting all pages
    Fixed de-selecting a row after selecting all pages
    Resetting BGB.search.allPagesSelected flag when selecting a single page.
    Replaced 'BGB.search.bulk.actions.allIdentifiers' with 'BGB.search.countSelectedRows'. The new function does not rely on the actions forms' 'query' hidden input field.
    Replaced 'BGB.search.bulk.actions.allIdentifiers' with 'BGB.search.countSelectedRows'. The new function does not rely on the actions forms' 'query' hidden input field.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Created a separated class for tablet-actions so it doesn't conflict with real actions' css
    Selected rows message is now displayed next to Selection buttons
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    moved select buttons to right of page
    Add an API for finding all identifiers
    Create a BGB namespace for the JS API to live in
    Remove confirmation messages
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Move actions code into a separate file to simplify footer
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Expose only one method for sorting from Sorter
    Supporting aliased keyword when sorting search page columns.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    clean up warnings
    Made work with Java 7
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    removed escapedName & unique from sorter header model
    moved pager & sorter model code into pager & sorter
    moved pager & sorter udner shared
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Default to sorting the first column descending
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Updated all libs
    upgrade totallylazy & utterlyidle
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Upgraded with PECS TL and Cleaned up LazyRecords
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Got new crawler working, except for dates
    Add server-side sorting for results
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    removed escapedName & unique from sorter header model
    moved pager & sorter udner shared
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Dan, Stu - Upgrade to latest bootstrap
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Switched to using Twitter BootStrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Dan, Stu - Upgrade to latest bootstrap
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Switched to using Twitter BootStrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Dan, Stu - Upgrade to latest bootstrap
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Switched to using Twitter BootStrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Dan, Stu - Upgrade to latest bootstrap
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Switched to using Twitter BootStrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Dan, Stu - Upgrade to latest bootstrap
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Switched to using Twitter BootStrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Dan, Stu - Upgrade to latest bootstrap
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added groups
    Switched to using Twitter BootStrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Dan, Stu - Upgrade to latest bootstrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Dan, Stu - Upgrade to latest bootstrap
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Switched to using Twitter BootStrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved pager & sorter model code into pager & sorter
    moved pager & sorter udner shared
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ability to choose how many rows per page to see
    Styling fix so that sorting links take up the whole header, and the javascript table sorted kicks in if all the data is being shown
    Add ellipses for pager
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    added semantic markup to last page
    moved pager & sorter udner shared
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    upgrading libs - breaking change in range in TL
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ability to choose how many rows per page to see
    Remove hrefs for disabled links
    Add ellipses for pager
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Switched pagination controls with actions bar
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved pager & sorter udner shared
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Got new crawler working, except for dates
    Add ability to choose how many rows per page to see
    Remove hrefs for disabled links
    Add ellipses for pager
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved pager & sorter udner shared
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Remove hrefs for disabled links
    Add ellipses for pager
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Removed all support from pager
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved pager & sorter model code into pager & sorter
    moved pager & sorter udner shared
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    fixed pagination bug in RequestPager
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Updated all libs
    upgrade totallylazy & utterlyidle
    Pager does not try to stay on current page when changing number of rows per page
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Ignore page parameter if showing all records
    Add ability to choose how many rows per page to see
    Styling fix so that sorting links take up the whole header, and the javascript table sorted kicks in if all the data is being shown
    Add ellipses for pager
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    removed all option
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved pager & sorter udner shared
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Got new crawler working, except for dates
    Add ability to choose how many rows per page to see
    Add ellipses for pager
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Add pagination to search results
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Captured full crawler log in response
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    fixed expander bug on ie8
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Fix for the expander in firefox
    Made expanding explicit (use css class 'shouldExpand')
    Captured full crawler log in response
    Upgrade LR -> 1.18 to get thread safety fix
    Improving the performance of faceted search
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    Made views run concurrently
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    upgraded utterlyidle (553) to get Module interface changes
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    Inline Views into ViewsRepository
    renamed crawlcontainer to crawlscope
    Add ViewsRepository to encapsulate view logic
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Renaming search service to records service and removing data source dependencies from search resource
    added faceting
    Added delete all views, disabling batch operations when no crawlers/views exist
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Adding crawl all button and removing unused imports
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Moved classes and resources into sub packages
    Seperated ModelRendererActivator into sub activators
    Removed ModelRenderer duplication
    Create views screen
    Made CrawlerResource add a view
    Upgrade LR -> 1.18 to get thread safety fix
    Only attempt to crawl enabled crawlers to prevent the schedule page clogging up with errors
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded to UI:663 to get small bug fixes
    Fix counts on views when a query with special characters is being used
    Made all BGB resources support returning JSON models
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Introduced InvocationHandler to remove code duplication
    Added missing file
    Upgrade LR -> 1.18 to get thread safety fix
    Refactoring the facet resource
    Improving the performance of faceted search
    Collapsing/expanding the side bar
    Adding 'Remove all filters' link
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Change faceting records activator to examine view definition rather than just view name
    Convert facet entry count to be stored as a string rather than a number
    Upgrading TL 1.11->1.51, LR 1.3->1.8 and refactored FacetsResource.
    Refactoring the FacetsResource.
    Ordering active facet entries by selection order.
    Fixed bug when faceting on another field and clicking 'show more'. Also make checked boxes go to the top of the list.
    Adding support for faceting fields and supporting drilling down on facets in search page
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding 'Remove all filters' link
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Convert facet entry count to be stored as a string rather than a number
    Adding support for faceting fields and supporting drilling down on facets in search page
    Upgrade LR -> 1.18 to get thread safety fix
    Improving the performance of faceted search
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Updated to UI 711 for Jobs changes
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    Upgrade to latest bootstrap
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    removed duplication around coloured table headers
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Added delete all views, disabling batch operations when no crawlers/views exist
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    CSS cleanup around views
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added import and export to views
    Added LessCss module to server side compile less files
    Changed scheduling work flow
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Started moving Views towards same crud operations
    Moved classes and resources into sub packages
    Added missing files
    Upgrade LR -> 1.18 to get thread safety fix
    Improving the performance of faceted search
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Change faceting records activator to examine view definition rather than just view name
    Adding support for faceting fields and supporting drilling down on facets in search page
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added import and export to views
    Switche Views to using models, work in progress
    Added LessCss module to server side compile less files
    edit and delete jobs
    Changed scheduling work flow
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Hide 'show results' banner from unique results
    Move views menu to go side-by-side with unique results
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    Added semantic count class attributes on the menu
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    added faceting
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Switche Views to using models, work in progress
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added e2e test for import crawler functionality, upgrading utterlyidle to use the improved  uri handling mechanism
    Added simple end to end test for CrawlerResource
    Switched to using Twitter BootStrap
    Moved classes and resources into sub packages
    Added missing files
    Added reset.css
    Added a simple view menu
    Made CrawlerResource add a view
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Adding support for faceting fields and supporting drilling down on facets in search page
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Adding support for faceting fields and supporting drilling down on facets in search page
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made sure all executors created by factory are also closed
    Reduce margin on input elements
    Made views run concurrently
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Convert facet entry count to be stored as a string rather than a number
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Added support for aliases fields in views.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Allowed views to support custom query prefix
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Added field in views edit page to specify parent view.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    sorting views
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    CSS cleanup around views
    Split record name from query
    removing lucene leftovers
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added support to hide a view. Also fixed bug when view only has one field
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Allowed views to support custom query prefix
    Switche Views to using models, work in progress
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    CRUD for views, removing unused less and st files
    UI clean up
    Started moving Views towards same crud operations
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Moving css to less
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Convert facet entry count to be stored as a string rather than a number
    Refactoring the FacetsResource.
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Added support for aliases fields in views.
    Added ShortcutPolicy to decide when to jump to the first result when searching. Created policy to check if there is just one result in primary views.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made work with Java 7
    Adding properties that can be used in a parsed query
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    moved updateView into master job
    Inline Views into ViewsRepository
    renamed crawlcontainer to crawlscope
    Add ViewsRepository to encapsulate view logic
    Upgrade LR -> 1.18 to get thread safety fix
    Improving the performance of faceted search
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Added error message on invalid query
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Extracted templates
    Stopped crawler from overwiting view definitions
    Added ability to import with a specific UUID
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added e2e test for import crawler functionality, upgrading utterlyidle to use the improved  uri handling mechanism
    Added import functionality
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Upgrading TL 1.11->1.51, LR 1.3->1.8 and refactored FacetsResource.
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Rename Types to PersistentTypes in preparation for new rendering types
    Support custom types in Baron Greenback (for rendering only) by adding them to the Types class
    Updated to UI 711 for Jobs changes
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made all BGB resources support returning JSON models
    Reduce margin on input elements
    Made views run concurrently
    Made views work concurrently
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    ViewsResource's export() should return a 404 when the view is not found
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    removed extraneous query from view resource
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    Inline Views into ViewsRepository
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Added model repository caching and fixed modifying mutable view models bug
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Views reflect search query
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    menu can take optional query
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Renaming search service to records service and removing data source dependencies from search resource
    added faceting
    Optimizing imports
    Added delete all views, disabling batch operations when no crawlers/views exist
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Switching to comparators fro totallylazy
    sorting views
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    Adding view exists check to the view resource
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added support to hide a view. Also fixed bug when view only has one field
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Stopped crawler from overwiting view definitions
    Added import and export to views
    Removed Views class
    Switche Views to using models, work in progress
    Added LessCss module to server side compile less files
    Minor Rename
    upgrading libs
    Added support for checpoints
    Changed scheduling work flow
    Removing crawl button from the edit screen, refactoring scheduler
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    CRUD for views, removing unused less and st files
    Started moving Views towards same crud operations
    Removed Views.add method
    Moved classes and resources into sub packages
    Create views screen
    Added a simple view menu
    Made CrawlerResource add a view
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Created FileRoller to only allow x backups to exist (deleting old ones)
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Ensure FileRoller deletes files from the auto backup directory
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    corrected property name
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Created FileRoller to only allow x backups to exist (deleting old ones)
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Created FileRoller to only allow x backups to exist (deleting old ones)
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded to UI:664 for package move
    upgraded BG to use UI with scheduling code
    Fix counts on views when a query with special characters is being used
    Made all BGB resources support returning JSON models
    Reduce margin on input elements
    First stab of new boostrap
    First stab of new boostrap
    migrated StartupModule to ServicesModule
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Ensure FileRoller deletes files from the auto backup directory
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    made BACKUP_JOB_ID public
    Created FileRoller to only allow x backups to exist (deleting old ones) (merge)
    Created FileRoller to only allow x backups to exist (deleting old ones)
    Upgraded to LR (119) to get backup/restore fix
    Added a scheduled Job to run daily backups (merge)
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    upgraded totallylazy & utterlyidle
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    moved updateView into master job
    renamed crawlcontainer to crawlscope
    created executor package
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Some refactoring
    Moved zip stuff to TL
    Added better support for backup and restore
    (merge)
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Added online backup support for lucene and h2
    Added model repository caching and fixed modifying mutable view models bug
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    WIP: Added support for BGB using SQL as the backing store
    Added support to delete all jobs and ensured crawler is interruptable
    upgrade totallylazy & utterlyidle
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    delete index takes you to the same page
    stopping all pending jobs when deleting the whole index and when deleting all jobs
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Switching to waitrest with embedded dependencies
    Added batch delete to clean the whole index
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    No redirect after error and preserve invalid batch model after form submission
    added batch export
    Added batch import of views/crawlers
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added better support for backup and restore
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    First stab of new boostrap
    migrated StartupModule to ServicesModule
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    tidy up
    Created FileRoller to only allow x backups to exist (deleting old ones)
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Ensure FileRoller deletes files from the auto backup directory
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Created FileRoller to only allow x backups to exist (deleting old ones)
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Ensure FileRoller deletes files from the auto backup directory
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Created FileRoller to only allow x backups to exist (deleting old ones)
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    upgraded utterlyidle (553) to get Module interface changes
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Added batch import of views/crawlers
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Ensure FileRoller deletes files from the auto backup directory
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    (merge)
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Added batch delete to clean the whole index
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    No redirect after error and preserve invalid batch model after form submission
    added batch export
    Added batch import of views/crawlers
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Added error message on invalid query
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Extracted templates
    Stopped crawler from overwiting view definitions
    Added ability to import with a specific UUID
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added e2e test for import crawler functionality, upgrading utterlyidle to use the improved  uri handling mechanism
    Added import functionality
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded to UI:663 to get small bug fixes
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    Upgrade to latest bootstrap
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Created FileRoller to only allow x backups to exist (deleting old ones)
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    added uri & response to cralwer failures page
    Added better support for backup and restore
    (merge)
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Check the user is sure before deleting everything
    Added online backup support for lucene and h2
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    delete index takes you to the same page
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Added batch delete to clean the whole index
    No redirect after error and preserve invalid batch model after form submission
    added batch export
    Added batch import of views/crawlers
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Added error message on invalid query
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Extracted templates
    Stopped crawler from overwiting view definitions
    Added ability to import with a specific UUID
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added e2e test for import crawler functionality, upgrading utterlyidle to use the improved  uri handling mechanism
    Added import functionality
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Handling invalid queries on Jobs History page.
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Updating utterlyidle 766 -> 771
    Upgrading UI 765->766 for more fixes to yadic exceptions when debugging
    Adding support for searches with dates in summer time
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Handling invalid queries on Jobs History page.
    Job History page's search box will now have the current query pre-populated.
    Fixing overlapping divs on Jobs History page
    Removing unused css class
    Moving pagination controls to results div for Jobs History.
    Added search box for jobs history, and enabled searching on elapsed time
    Captialise action in Jobs History
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Captialise action in Jobs History
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Handling invalid queries on Jobs History page.
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Handling invalid queries on Jobs History page.
    Added search box for jobs history, and enabled searching on elapsed time
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Changing job history item lifespan default value from 30 days to 24hr and making it configurable via a property.
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    renamed LessCache classes
    Reduce margin on input elements
    Don't recompile LESS when running in debug unless you actually need to
    Tidyup
    Server side working again
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    upgraded utterlyidle (553) to get Module interface changes
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Made LessCssHandler cache compilation result as Rhino/Less.js is just too slow
    Added LessCss module to server side compile less files
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    renamed LessCache classes
    added CompositeLessCssCache
    added UriLessCssCache
    Renamed getOption to get
    Changed API for LessCssCache to use Option
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    Server side working again
    server side -- not working yet
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Added crawler executor admin page for configuring queues crawler
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    server side -- not working yet
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Dan, Stu - Upgrade to latest bootstrap
    Added LessCss module to server side compile less files
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    renamed LessCache classes
    added UriLessCssCache
    Renamed getOption to get
    Changed API for LessCssCache to use Option
    Reduce margin on input elements
    Don't recompile LESS when running in debug unless you actually need to
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Add a purge parameter that forces the LESS handler to recompile LESS.
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Stopped InMemoryLessCache from being static
    renamed LessCache classes
    added UriLessCssCache
    Renamed getOption to get
    Changed API for LessCssCache to use Option
    Reduce margin on input elements
    Don't recompile LESS when running in debug unless you actually need to
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Add a purge parameter that forces the LESS handler to recompile LESS.
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Made map static in LessCssHandler, to return original caching functionality
    Created fileLessCssCache for speed
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    Server side working again
    server side -- not working yet
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    Don't recompile LESS when running in debug unless you actually need to
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Fixed UriCompiledLessCache keys to not include slashes
    Stopped InMemoryLessCache from being static
    renamed LessCache classes
    added UriLessCssCache
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Updated libs
    Made LessCssHandler cache compilation result as Rhino/Less.js is just too slow
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Made LessCssHandler cache compilation result as Rhino/Less.js is just too slow
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    Don't recompile LESS when running in debug unless you actually need to
    Server side working again
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    Update to use a patched version of the Less Compiler which doesn't make us use commons-logging
    Server side working again
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Fixed logic in LessCssHandler for staleness
    Fixed CompiledLess stale detection
    renamed LessCache classes
    added CompositeLessCssCache
    Renamed getOption to get
    Changed API for LessCssCache to use Option
    Reduce margin on input elements
    Don't recompile LESS when running in debug unless you actually need to
    Server side working again
    server side -- not working yet
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Add a purge parameter that forces the LESS handler to recompile LESS.
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Optimizing imports
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    less files are processed only when response code is 200
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Made LessCssHandler cache compilation result as Rhino/Less.js is just too slow
    Removed logging
    Added LessCss module to server side compile less files
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    renamed LessCache classes
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Fixed CompiledLess stale detection
    renamed LessCache classes
    added CompositeLessCssCache
    Changed API for LessCssCache to use Option
    Reduce margin on input elements
    Don't recompile LESS when running in debug unless you actually need to
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    renamed LessCache classes
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Updated to UI 711 for Jobs changes
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded BG to use UI with scheduling code
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    removed duplication around coloured table headers
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Delete all jobs
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Exposed unique data as meta data
    Added configurable index directory location
    Stopped crawler from reading duplicate entries. Improved Jobs management
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Jobs: now displays last response of any scheduled job
    start and stop jobs
    simplifying http scheduling
    edit and delete jobs
    Changed scheduling work flow
    Spiking http scheduler
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Updated to UI 711 for Jobs changes
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded BG to use UI with scheduling code
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Added crawl all test
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    Stopped crawler from reading duplicate entries. Improved Jobs management
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Jobs: now displays last response of any scheduled job
    simplifying http scheduling
    edit and delete jobs
    Displaying jobs in a table
    Changed scheduling work flow
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Supporting aliased keyword when sorting search page columns.
    Added support for aliases fields in views.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    changed checkpoint logic to look for less than or equal to
    Made all test run independent waitrest
    Add support for reading properties in View queries
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Extracted create view from crawlers and added new button
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Added support for batch put into lucene for improved write speed once the index gets large
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working (merge)
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    added drop down to crawler admin to change the crawler implementation
    Changed default cralwer in CrawlerActivator to SequentialCrawler
    Made sure BGB cleans up backups after tests
    Brought back uniqueness check on definitions for QueuesCrawler.
    restored QueuesCrawler as the default crawler
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added CountLatch to notify us of when a crawl has completed. Added records updated count.
    added checkpoint
    Refactoring & cleanup. Added duplicates removal in data transformer.
    Added unique keys & value to Subfeeder2
    breaking down QueuesCrawler into small simple functions
    Moew work on Queue based crawler
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Default to sorting the first column descending
    Added better test coverage for end to end tests
    removed less generation timing message
    Added better end to end to for import and subfeed
    Upgrade LR -> 1.18 to get thread safety fix
    Improving the performance of faceted search
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Move views menu to go side-by-side with unique results
    Change faceting records activator to examine view definition rather than just view name
    Convert facet entry count to be stored as a string rather than a number
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Moved aliasing logic into SearchResource due to performance issues
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Changed queues to be fixed size, and now uses CallerRunsPolicy
    Fix counts on views when a query with special characters is being used
    Fixed CrawlerHttpClient to be more usable
    Added basic index/check page
    Adding properties that can be used in a parsed query
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Added support for batch put into lucene for improved write speed once the index gets large
    upgraded funclate
    merge
    Added priority support in crawler fields
    make HTML version of list be highest priority
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    created a crawler comparitor
    pulled csv writing out of SearchResource
    moved bits into executor module
    Split RecordsService for direct records access
    fixed bug where type field was being removed from failures persisted in lucene
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    reverted ShowAndTell
    Updated crawler status page to display threads for retry queue correctly. Fixed malformed uri exception in PaginatedHttpJob.
    reverted ShowAndTell
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    got log working for QueuesCrawler
    Added crawler failures resource, now with RETRY\!
    reverted ShowAndTell
    fixed bug in crawler that wasn't merging data. Crawler V3 is FAST. (WIP)
    Refactoring & cleanup. Added duplicates removal in data transformer.
    Moew work on Queue based crawler
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Check the user is sure before deleting everything
    Added online backup support for lucene and h2
    removed forwardOnlyXmlRecordsReader
    Added model repository caching and fixed modifying mutable view models bug
    Added better test coverage for end to end tests
    removed less generation timing message
    Added better end to end to for import and subfeed
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Made lucene file urls work correctly
    Initial work to support switching persistence based on a Uri
    WIP: Added support for BGB using SQL as the backing store
    added running jobs to the queues page
    upgrade totallylazy & utterlyidle
    Updated BGB to use logging provided in LazyRecords
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Switching to waitrest with embedded dependencies
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    added nowrap for results table cells
    Got new crawler working, except for dates
    Add server-side sorting for results
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    Added 'reset' button to crawler definitions
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Removed test setup duplication
    Added LessCss module to server side compile less files
    Fixed 'Too many open files' exception
    upgrading TL, UtterlyIdle and funclate versions
    Removed unused empty test
    Added empty test to get build to work
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    changing crawlers property to disabled instead of enabled in order to simplify logic
    Made sure SearchResource does not execute multiple queries
    pushed enabled method onto CrawlerRepository
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    added some logging into QueuesCrawler
    breaking down QueuesCrawler into small simple functions
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Added better test coverage for end to end tests
    removed less generation timing message
    Added better end to end to for import and subfeed
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Fixed bug in PaginatedHttpJob that was causing the crawler to burn through next pages, if the checkpoint date did not exactly match
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    changed checkpoint logic to look for less than or equal to
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Fixed aliased keyword bug in PriorityMerge
    fixed bug in prioritymerge
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    changing crawlers property to disabled instead of enabled in order to simplify logic
    Made sure SearchResource does not execute multiple queries
    pushed enabled method onto CrawlerRepository
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Convert facet entry count to be stored as a string rather than a number
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    got log working for QueuesCrawler
    Added crawler failures resource, now with RETRY\!
    reverted ShowAndTell
    fixed bug in crawler that wasn't merging data. Crawler V3 is FAST. (WIP)
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    added running jobs to the queues page
    added a cap on the displayed completed jobs
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    When writing changes, group data by definition name to allow writing partial definitions. Also merge definitions with the same name together
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made work with Java 7
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Fixed aliased keyword bug in PriorityMerge
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    changing crawlers property to disabled instead of enabled in order to simplify logic
    Made sure SearchResource does not execute multiple queries
    Split crawler def and crawler imp resources
    added ability to enable/disable crawlers
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Made checkpoint support all types (string, date, uri)
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    Added support to reset crawler
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Moving scheduler to the request scope
    upgrading libs
    Exported Html testing to UtterlyIdle
    fixing checpoint logic and adding a test
    Changed scheduling work flow
    Removing crawl button from the edit screen, refactoring scheduler
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    More clean up around crawler resource
    Started move towards using models from form parameters
    Added checkboxs to end to end test
    Expanded end to end to test
    Added simple end to end test for CrawlerResource
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Added better test coverage for end to end tests
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Moved classes and resources into sub packages
    Added second example feed entry
    Minor clean up
    Added basic crawling of a xml based web serivce
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Changed case of any CheckPoint to Checkpoint
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made all test run independent waitrest
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added unique keys & value to Subfeeder2
    added MoreDataCrawler
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    Extracted crawler functionality from the resource
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Don't stop crawler when we have invalid xml from the feed.
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Got new crawler working, except for dates
    Made sure new feeder works sequencially with large data
    Removed duplicate and made unique required
    Added sub feed support to new crawler
    Adding new crawler
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Brought back uniqueness check on definitions for QueuesCrawler.
    Upgrade LR -> 1.18 to get thread safety fix
    Rewrite DataWriter to use a Phaser and close in a finally block. Temporarily replace CountLatch with a Map in HttpJobExecutor to verify DataWriter works correctly
    Revert back to 1054
    Switch CountLatch for Phaser to check for Java 8 compatibility
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Fixed merging records using the wrong unique field in DataWriter.batchWrite.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    When writing changes, group data by definition name to allow writing partial definitions. Also merge definitions with the same name together
    Added support for batch put into lucene for improved write speed once the index gets large
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Changed FailureHandler to capture exceptions too
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Brought back uniqueness check on definitions for QueuesCrawler.
    Removed uri debug. Temporary removal of uniques check in DataWriter.
    Added a check for a single unique field in the crawler definition. Fixed some styling issues in expandable frames.
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    uncommented tests, and added previous uniques to subfeed test
    passdown uniques to subfeed jobs, rather than entire merged records
    fixed bug in crawler that wasn't merging data. Crawler V3 is FAST. (WIP)
    Moved pagination Datasource to Job
    added checkpoint handling
    extracted contents of functions to methods
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Added better test coverage for end to end tests
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made work with Java 7
    Adding properties that can be used in a parsed query
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Added created date and started comparison of staged jobs
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    moved record (crawledRecord) from datasource into job's context
    Add a new all method to SearchResource that ignores a view's query
    moved cralwerId from datasource into job's context
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    added a list of visited datasources
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    removed SubfeedDatasource, and flattened into HttpDatasource
    Switched to using immutable record and keywords
    fixed CrawlerFailuresResource
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Moved StagedJobExecutor into the CrawlerScope (renamed from CrawlerContainer)
    changed Sequence<Pair<Keyword<?>, Object>> to Record in Datasource classes
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    Refactored Subfeed. Made sure datasource case is consistent.
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    SubfeedJobCreator now unique's on datasource instead of uri. DataTransformer fix for empty document
    Removed generic from StagedJob, as it was Response throughout the code.
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added CountLatch to notify us of when a crawl has completed. Added records updated count.
    merged DocumentProcessor and SubfeedJobCreator
    uncommented tests, and added previous uniques to subfeed test
    passdown uniques to subfeed jobs, rather than entire merged records
    fixed bug in crawler that wasn't merging data. Crawler V3 is FAST. (WIP)
    Added unique keys & value to Subfeeder2
    Pushed more into Jobs
    WIP
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Split crawler def and crawler imp resources
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added ability to import with a specific UUID
    Added LessCss module to server side compile less files
    Moving scheduler to the request scope
    upgrading libs
    Exported Html testing to UtterlyIdle
    Changed scheduling work flow
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added e2e test for import crawler functionality, upgrading utterlyidle to use the improved  uri handling mechanism
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    clean up warnings
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Fixed crawler so subfeed data is not overwritten by parent data
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Fixed bug when faceting on another field and clicking 'show more'. Also make checked boxes go to the top of the list.
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made all test run independent waitrest
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    code clean up. Deleted ConcurrentCrawler, CrawlerLatch and Feed.
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Added better test coverage for end to end tests
    removed less generation timing message
    Added better end to end to for import and subfeed
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Don't stop crawler when we have invalid xml from the feed.
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Switching to waitrest with embedded dependencies
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Added sub feed support to new crawler
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    added PaginatedHttpJob to CrawlerFailureRepository
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added e2e test for import crawler functionality, upgrading utterlyidle to use the improved  uri handling mechanism
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Moved classes and resources into sub packages
    Added second example feed entry
    Minor clean up
    Added basic crawling of a xml based web serivce
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Changed queues to be fixed size, and now uses CallerRunsPolicy
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Added all comparators for StagedJob
    Added created date and started comparison of staged jobs
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made work with Java 7
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    changed Document to Option<Document> in DataTransformer
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    added MoreDataCrawler
    added checkpoint handling
    extracted contents of functions to methods
    Upgrade LR -> 1.18 to get thread safety fix
    Only attempt to crawl enabled crawlers to prevent the schedule page clogging up with errors
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded to UI:664 for package move
    upgraded BG to use UI with scheduling code
    Fix counts on views when a query with special characters is being used
    changed test to crawl and create view
    updated xpath to find activeCrawler form
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Extracted create view from crawlers and added new button
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    created a crawler comparitor
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working (merge)
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Fixed jobUrl by upgrading funclate. Added message to crawlers list page when you change a crawler. Fixed style of dropdown on list page.
    Split crawler def and crawler imp resources
    Added copy crawler action
    added ability to enable/disable crawlers
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Added delete all crawlers test
    Added crawl all test
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    Added 'reset' button to crawler definitions
    Added support to reset crawler
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added ability to import with a specific UUID
    Added LessCss module to server side compile less files
    Moving scheduler to the request scope
    upgrading libs
    Added aliases support
    Exported Html testing to UtterlyIdle
    Changed scheduling work flow
    Removing crawl button from the edit screen, refactoring scheduler
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Expanded end to end to test
    Added simple end to end test for CrawlerResource
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working (merge)
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Split crawler def and crawler imp resources
    Made sure BGB cleans up backups after tests
    Brought back uniqueness check on definitions for QueuesCrawler.
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    Added better end to end to for import and subfeed
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    added MoreDataCrawler
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Got new crawler working, except for dates
    Add ellipses for pager
    Removed sorting of xml feed
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    removign duplication from tests
    flexible checkpoint date support
    Making unit test use String as a checkpoint to avoid time dependency
    sorting entries within the feed by descending date if the checkpoint is of a java.util.Date type
    fixing checpoint logic and adding a test
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Fixed bug in PaginatedHttpJob that was causing the crawler to burn through next pages, if the checkpoint date did not exactly match
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    tidy
    moved record (crawledRecord) from datasource into job's context
    Add a new all method to SearchResource that ignores a view's query
    moved cralwerId from datasource into job's context
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    small refactor
    Creating CrawlerFailureRepository which now persists HttpJob
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    fixed CrawlerFailuresResource
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Moved StagedJobExecutor into the CrawlerScope (renamed from CrawlerContainer)
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    Refactored Subfeed. Made sure datasource case is consistent.
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    changed Document to Option<Document> in DataTransformer
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added CountLatch to notify us of when a crawl has completed. Added records updated count.
    refactoring & cleanup of Jobs
    Refactoring & cleanup. Added duplicates removal in data transformer.
    Moved to context
    Moved pagination Datasource to Job
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Don't stop crawler when we have invalid xml from the feed.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Fixed bug when faceting on another field and clicking 'show more'. Also make checked boxes go to the top of the list.
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made work with Java 7
    Adding properties that can be used in a parsed query
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Creating CrawlerFailureRepository which now persists HttpJob
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    Inline Views into ViewsRepository
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added unique keys & value to Subfeeder2
    added MoreDataCrawler
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    Extracted crawler functionality from the resource
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Upgrade to latest records to get proper aliasing support in XML
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Upgraded with PECS TL and Cleaned up LazyRecords
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Got new crawler working, except for dates
    Removed duplicate and made unique required
    Added sub feed support to new crawler
    Adding new crawler
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Added caching of 'less' and javascript resources
    upgrading TL, UtterlyIdle and funclate versions
    Added aliases support
    Updated UIdle, Waitrest
    Using Record for crawling definition
    removign duplication from tests
    flexible checkpoint date support
    Making unit test use String as a checkpoint to avoid time dependency
    Simplifying crawling logic and removing duplication
    replacing strings for more and checkpoint fields to keywords
    Preventing duplicate crawling when checkpoint is specified
    Added support for checpoints
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added e2e test for import crawler functionality, upgrading utterlyidle to use the improved  uri handling mechanism
    Pushed some behaviour up to UIdle and TL
    Building model from record definition
    Allow views to be updated
    Fixing unique links
    Moved classes and resources into sub packages
    Create views screen
    Added unique views and minor CSS clean up
    Got sub feed crawling via the UI working
    Refactor towards Crawling sub feeds
    Added test for XmlDefintionExtractor
    Refactored CrawlerResource to have less responsibility
    Updated TL version
    Added second example feed entry
    Added simple crawler interface
    Minor clean up
    Initial web search for lucene
    Moved ApplicationBuilder to utterlyidle
    Added basic crawling of a xml based web serivce
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Changed case of any CheckPoint to Checkpoint
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    clean up warnings
    Adding properties that can be used in a parsed query
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Minor cleanup
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    added checkpoint handling
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Changed VisitedFactory to use BaronGreenbackProperties. Removed PersistenceUri.
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Add tinytype for QueueCrawler's HttpHandler
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Brought back uniqueness check on definitions for QueuesCrawler.
    extracted contents of functions to methods
    QueueCrawler: changed write to update based on unique key
    breaking down QueuesCrawler into small simple functions
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded BG to use UI with scheduling code
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    created a crawler comparitor
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    changing crawlers property to disabled instead of enabled in order to simplify logic
    Made sure SearchResource does not execute multiple queries
    Fixed jobUrl by upgrading funclate. Added message to crawlers list page when you change a crawler. Fixed style of dropdown on list page.
    Split crawler def and crawler imp resources
    Added copy crawler action
    added drop down to crawler admin to change the crawler implementation
    403-forbidden when crawling disabled crawler
    added ability to enable/disable crawlers
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    Added better end to end to for import and subfeed
    Reduce memory requirements by removing a memorise from the root crawler
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Fix build?
    Created Http Queuing
    upgrade totallylazy & utterlyidle
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Switching to waitrest with embedded dependencies
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Made checkpoint support all types (string, date, uri)
    Got new crawler working, except for dates
    Added sub feed support to new crawler
    Adding new crawler
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    Added 'reset' button to crawler definitions
    Added support to reset crawler
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Fixed cssClass name to not have spaces for columnNames
    Allowed views to support custom query prefix
    Added import and export to views
    Removed test setup duplication
    Switche Views to using models, work in progress
    Added ability to import with a specific UUID
    Added LessCss module to server side compile less files
    Moving scheduler to the request scope
    using TL with fixed file based lucene records
    Exported Html testing to UtterlyIdle
    Fixed intermitant timing tests with a latch
    Using Record for crawling definition
    flexible checkpoint date support
    Making unit test use String as a checkpoint to avoid time dependency
    sorting entries within the feed by descending date if the checkpoint is of a java.util.Date type
    Adding support for record name with spaces
    fixing checpoint logic and adding a test
    Changed scheduling work flow
    Removing crawl button from the edit screen, refactoring scheduler
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added e2e test for import crawler functionality, upgrading utterlyidle to use the improved  uri handling mechanism
    Pushed some behaviour up to UIdle and TL
    Got alias saving
    Started move towards using models from form parameters
    Added checkboxs to end to end test
    Expanded end to end to test
    Added simple end to end test for CrawlerResource
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    added MoreDataCrawler
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Added sub feed support to new crawler
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    flexible checkpoint date support
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Moved classes and resources into sub packages
    Added second example feed entry
    Minor clean up
    Added basic crawling of a xml based web serivce
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made all test run independent waitrest
    Made work with Java 7
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added unique keys & value to Subfeeder2
    added MoreDataCrawler
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    Extracted crawler functionality from the resource
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Upgrade to latest records to get proper aliasing support in XML
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Upgraded with PECS TL and Cleaned up LazyRecords
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Got new crawler working, except for dates
    Removed duplicate and made unique required
    Added sub feed support to new crawler
    Adding new crawler
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Added caching of 'less' and javascript resources
    upgrading TL, UtterlyIdle and funclate versions
    Added aliases support
    Updated UIdle, Waitrest
    Using Record for crawling definition
    removign duplication from tests
    flexible checkpoint date support
    Making unit test use String as a checkpoint to avoid time dependency
    Simplifying crawling logic and removing duplication
    replacing strings for more and checkpoint fields to keywords
    Preventing duplicate crawling when checkpoint is specified
    Added support for checpoints
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added e2e test for import crawler functionality, upgrading utterlyidle to use the improved  uri handling mechanism
    Pushed some behaviour up to UIdle and TL
    Building model from record definition
    Allow views to be updated
    Fixing unique links
    Moved classes and resources into sub packages
    Create views screen
    Added unique views and minor CSS clean up
    Got sub feed crawling via the UI working
    Refactor towards Crawling sub feeds
    Added test for XmlDefintionExtractor
    Refactored CrawlerResource to have less responsibility
    Updated TL version
    Added second example feed entry
    Added simple crawler interface
    Minor clean up
    Initial web search for lucene
    Moved ApplicationBuilder to utterlyidle
    Added basic crawling of a xml based web serivce
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added e2e test for import crawler functionality, upgrading utterlyidle to use the improved  uri handling mechanism
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Upgrade LR -> 1.18 to get thread safety fix
    Only attempt to crawl enabled crawlers to prevent the schedule page clogging up with errors
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded to UI:664 for package move
    upgraded BG to use UI with scheduling code
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    403-forbidden when crawling disabled crawler
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Imporved test
    Updated BGB to use logging provided in LazyRecords
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Added delete all crawlers test
    Added crawl all test
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Brought back uniqueness check on definitions for QueuesCrawler.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Removed duplicate and made unique required
    Added sub feed support to new crawler
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    flexible checkpoint date support
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Moved classes and resources into sub packages
    Added second example feed entry
    Minor clean up
    Added basic crawling of a xml based web serivce
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    deleting a crawler will now delete all failures created by that crawler
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Allowing registration of custom renderers for specific types.
    Rename Types to PersistentTypes in preparation for new rendering types
    Support custom types in Baron Greenback (for rendering only) by adding them to the Types class
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Fixed warnings
    Changed case of any CheckPoint to Checkpoint
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    clean up warnings
    Upgraded to TL:633 so that we can add a connect & read timeout to crawler requests. Added Request Time and Duration to failure list
    Stopped adding StringMappings directly into container now using BarongreenbackStringMappings
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Added created date and started comparison of staged jobs
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    tidy
    save and load visited datasources for failures
    moved record (crawledRecord) from datasource into job's context
    Add a new all method to SearchResource that ignores a view's query (merge)
    Add a new all method to SearchResource that ignores a view's query
    moved cralwerId from datasource into job's context
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    added a list of visited datasources
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Moved all crawler failure classes to failure package. Created FailureModule.
    moved Failure code to CrawlerFailures, so that CrawlerFailureRepository only knows about Records
    wired CrawlerFailureRepository into CrawlerFailures
    added MasterPaginatedHttpJob to CrawlerFailureRepository
    added PaginatedHttpJob to CrawlerFailureRepository
    small refactor
    Creating CrawlerFailureRepository which now persists HttpJob
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Upgraded to TL:633 so that we can add a connect & read timeout to crawler requests. Added Request Time and Duration to failure list
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Added created date and started comparison of staged jobs
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    tidy
    save and load visited datasources for failures
    moved record (crawledRecord) from datasource into job's context
    Add a new all method to SearchResource that ignores a view's query
    moved cralwerId from datasource into job's context
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    added a list of visited datasources
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    Moved all crawler failure classes to failure package. Created FailureModule.
    Split RecordsService for direct records access
    moved Failure code to CrawlerFailures, so that CrawlerFailureRepository only knows about Records
    changed CrawlerFailureRepo to return Sequence<Pair<>> instead of Map
    wired CrawlerFailureRepository into CrawlerFailures
    small refactor
    Creating CrawlerFailureRepository which now persists HttpJob
    Fixed pagination to be fast with big datasets
    removed SubfeedDatasource, and flattened into HttpDatasource
    Switched to using immutable record and keywords
    Created a Failure class to replace Pair<StagedJob, String>
    fixed CrawlerFailuresResource
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Moved StagedJobExecutor into the CrawlerScope (renamed from CrawlerContainer)
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Changed FailureHandler to capture exceptions too
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Removed generic from StagedJob, as it was Response throughout the code.
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added CountLatch to notify us of when a crawl has completed. Added records updated count.
    Added crawler failures resource, now with RETRY\!
    Add tiny type for failure queue and move up to application scope
    WIP
    added MoreDataCrawler
    extracted contents of functions to methods
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Allowing registration of custom renderers for specific types.
    Rename Types to PersistentTypes in preparation for new rendering types
    Support custom types in Baron Greenback (for rendering only) by adding them to the Types class
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Rename Types to PersistentTypes in preparation for new rendering types
    Support custom types in Baron Greenback (for rendering only) by adding them to the Types class
    Upgrade LR -> 1.18 to get thread safety fix
    Improving the performance of faceted search
    Collapsing/expanding the side bar
    Upgrading LR 1.8->1.11 to import Lucene NRT changes
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Renamed PersistenceApplicationScope and PersistenceRequestScope to BGB
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Added support to override persistence classes
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded to UI:664 for package move
    upgraded BG to use UI with scheduling code
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Split crawler def and crawler imp resources
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Updated BGB to use logging provided in LazyRecords
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Added crawl all test
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Moving scheduler to the request scope
    Exported Html testing to UtterlyIdle
    Changed scheduling work flow
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Supporting drilldowns when searching
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Primary view policy should be applied only if the result of the search is in current view.
    Added ShortcutPolicy to decide when to jump to the first result when searching. Created policy to check if there is just one result in primary views.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Fixed escaping special characters in csv writer
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Supporting drilldowns when searching
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    moved page classes into test folder
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    created a crawler comparitor
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    temp disabled decorating in search resource
    upgrade totallylazy & utterlyidle
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Added error message on invalid query
    Increase top padding to allow more room for legend
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Ensured that when an unknown view is specified, no results are shown
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Fixed warnings
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Moved lazyrecords classes into BGB scope
    Upgrade funclate (102)
    Tidy up code to increase reuse. Also add a subtractHours counterpart to addHours
    Upgrade libraries to get consistent date parser and nicer methods for adding hours
    More tolerant of input strings. output strings always include ms.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    moved pager & sorter udner shared
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    Added better end to end to for import and subfeed
    Reduce memory requirements by removing a memorise from the root crawler
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Moving scheduler to the request scope
    upgrading libs
    Exported Html testing to UtterlyIdle
    Changed scheduling work flow
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Adding support for faceting fields and supporting drilling down on facets in search page
    Supporting drilldowns when searching
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Upgrading TL 1.11->1.51, LR 1.3->1.8 and refactored FacetsResource.
    Supporting drilldowns when searching
    Adding support for searches with dates in summer time
    Adding support for searches with dates in summer time
    Upgrading LZ 277->278 for support to search by date and datetime in dd/MM/yy and similar formats
    Moved CsvWriter to baron-greenback and added support for rendereable types
    SearchResource.unique() will now display fields and groups in the same order as they appear in the view definition.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Including all headers in records search and removed 'findAll' method/path
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made all test run independent waitrest
    Made work with Java 7
    Reduce margin on input elements
    First stab of new boostrap
    First stab of new boostrap
    migrated StartupModule to ServicesModule
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    export csv now doesnt export hidden colums
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    created a crawler comparitor
    Added export as csv to search resource
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    Inline Views into ViewsRepository
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    Added better end to end to for import and subfeed
    Extracted crawler functionality from the resource
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    WIP: Added support for BGB using SQL as the backing store
    upgrade totallylazy & utterlyidle
    Upgrade to latest records to get proper aliasing support in XML
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Upgraded with PECS TL and Cleaned up LazyRecords
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Switching to waitrest with embedded dependencies
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Got new crawler working, except for dates
    Added sub feed support to new crawler
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Added error message on invalid query
    Switched to using standalone predicate parser
    Increase top padding to allow more room for legend
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Views: No match == no view, also added special 'records' view to show all data
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Extracted templates
    Added import and export to views
    Removed test setup duplication
    Switche Views to using models, work in progress
    Added LessCss module to server side compile less files
    Minor Rename
    Jobs: now displays last response of any scheduled job
    using TL with fixed file based lucene records
    upgrading TL, UtterlyIdle and funclate versions
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Pushed some behaviour up to UIdle and TL
    Added simple list of crawlers
    Fixed sub crawling
    Removed Views.add method
    Got links working in views
    Fixing unique links
    Improved test coverage and 'view/template' convention
    Moved classes and resources into sub packages
    Used new TL methods
    Added unique views and minor CSS clean up
    Minor refactoring
    Got sub feed crawling via the UI working
    Added reset.css
    Added a simple view menu
    Started adding support for subfeeds
    Now updates or inserts based on a key
    Minor clean up
    Updated TL version
    Minor clean up
    Initial web search for lucene
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    export csv now doesnt export hidden colums
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    pulled csv writing out of SearchResource
    Added export as csv to search resource
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Fixed warnings
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Moved lazyrecords classes into BGB scope
    Add now as a date available anywhere in a predicate expression
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Supporting drilldowns when searching
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Supporting drilldowns when searching
    Upgrade LR -> 1.18 to get thread safety fix
    Trim queries before bracketing them to prevent syntax errors
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Update records prefixing to bracket queries. This prevents stupid OR clauses from bypassing view queries!
    Sort search page results by first *visible* header
    Supporting drilldowns when searching
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Preserving metadata when unwrapping an AliasedKeyword
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    clean up warnings
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    SearchResource.unique() will now display fields and groups in the same order as they appear in the view definition.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    added functions to replace spaces with dashes or underscores in string templates
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    added functions to replace spaces with dashes or underscores in string templates
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Allowing custom date format in DateRenderer through 'barongreenback.date.format' property.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Allowing registration of custom renderers for specific types.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Escaped URI in BGB screens
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    DataTables feature can be disable using .static class on tables.
    Fixing table sorting using datatables column types detection and improved logic for fixed header positioning.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added support to hide a view. Also fixed bug when view only has one field
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    More clean up around crawler resource
    Started move towards using models from form parameters
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Made ModelCleaner work with Lists
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Moving scheduler to the request scope
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Adding support for faceting fields and supporting drilling down on facets in search page
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Allowing registration of custom renderers for specific types.
    Allowing custom date format in DateRenderer through 'barongreenback.date.format' property.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Added crawler executor admin page for configuring queues crawler
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    Added better end to end to for import and subfeed
    put useCache() call back into LessCssHandler
    added functions to replace spaces with dashes or underscores in string templates
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Removed SequentialCrawler and refactored QueuesCrawler into HttpCrawler since it uses HttpJobs.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added unique keys & value to Subfeeder2
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Escaping special characters contained in query to html entities when selecting all the rows
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Fixed de-selecting a row after selecting all pages
    Upgraded UI 732->733, jQuery 1.6.4->1.10.2, jQuery UI 1.8.16->1.10.3. Introduced DataTables and FixedHeader jQuery plugins to make the results table header always visibile when scrolling page.
    Replaced 'BGB.search.bulk.actions.allIdentifiers' with 'BGB.search.countSelectedRows'. The new function does not rely on the actions forms' 'query' hidden input field.
    Replaced 'BGB.search.bulk.actions.allIdentifiers' with 'BGB.search.countSelectedRows'. The new function does not rely on the actions forms' 'query' hidden input field.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    some refactoring
    finished bulk action tests
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Add first JS test
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Fixed bug in PaginatedHttpJob that was causing the crawler to burn through next pages, if the checkpoint date did not exactly match
    Fixed EndToEndTest so now it starts the scheduler before scheduling jobs
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded to UI:664 for package move
    upgraded BG to use UI with scheduling code
    Fix counts on views when a query with special characters is being used
    Fixed CrawlerHttpClient to be more usable
    introduced properties baron-greenback.crawler.connect.timeout (deafult 50ms) and baron-greenback.crawler.read.timeout (default 60seconds)
    Upgraded to TL:633 so that we can add a connect & read timeout to crawler requests. Added Request Time and Duration to failure list
    Made all test run independent waitrest
    Add support for reading properties in View queries
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Added a scheduled Job to run daily backups (merge)
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Added support for batch put into lucene for improved write speed once the index gets large
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    created a crawler comparitor
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working (merge)
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    (merge)
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Updated libs
    removed less generation timing message
    Updated to latest Lucene Pool
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Initial work to support switching persistence based on a Uri
    WIP: Added support for BGB using SQL as the backing store
    upgrade totallylazy & utterlyidle
    Imporved test
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Switched to LazyRecords parser
    using random directories
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    Added 'reset' button to crawler definitions
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    The LuceneIndexDIrectory class to configure the location lucene will use to write the index, has become a config object to additionally specify if it should use a ram directory
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Stopped crawler from overwiting view definitions
    Switche Views to using models, work in progress
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Fixing bug in ModelRepository cache where entries from repository were not being loaded into the cache under some circumstances.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Created FileRoller to only allow x backups to exist (deleting old ones)
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Ensured model cache always returns a copy
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Added model repository caching and fixed modifying mutable view models bug
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Expose only one method for sorting from Sorter
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made work with Java 7
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved pager & sorter udner shared
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Made Jobs immutable and updated lazyrecords
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Default to sorting the first column descending
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Upgrade to latest records to get proper aliasing support in XML
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Upgraded with PECS TL and Cleaned up LazyRecords
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Add server-side sorting for results
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Removed all support from pager
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved pager & sorter udner shared
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    fixed pagination bug in RequestPager
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    upgrading libs - breaking change in range in TL
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Ignore page parameter if showing all records
    Add ability to choose how many rows per page to see
    Add ellipses for pager
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved pager & sorter model code into pager & sorter
    moved pager & sorter udner shared
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    upgrading libs - breaking change in range in TL
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Optimizing imports
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ability to choose how many rows per page to see
    Styling fix so that sorting links take up the whole header, and the javascript table sorted kicks in if all the data is being shown
    Remove hrefs for disabled links
    Add ellipses for pager
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Added support for aliases fields in views.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added support to hide a view. Also fixed bug when view only has one field
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Switche Views to using models, work in progress
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    menu can take optional query
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    added faceting
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added support to hide a view. Also fixed bug when view only has one field
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Switche Views to using models, work in progress
    Added LessCss module to server side compile less files
    Moving scheduler to the request scope
    upgrading libs
    Exported Html testing to UtterlyIdle
    Changed scheduling work flow
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made all test run independent waitrest
    Add support for reading properties in View queries
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made work with Java 7
    Adding properties that can be used in a parsed query
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    Inline Views into ViewsRepository
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Upgrade to latest records to get proper aliasing support in XML
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Upgraded with PECS TL and Cleaned up LazyRecords
    Switched to LazyRecords parser
    Switched to using LazyRecords
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Fixed cssClass name to not have spaces for columnNames
    Removed Views class
    Switche Views to using models, work in progress
    Added LessCss module to server side compile less files
    Minor Rename
    Moving scheduler to the request scope
    using TL with fixed file based lucene records
    Column ordering
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Removed Views.add method
    Added visible checkbox when defining views
    Got links working in views
    Fixing unique links
    Moved classes and resources into sub packages
    Switched to using Boolean support in TL
    Added unique views and minor CSS clean up
    Added simple Views class
    Upgrade LR -> 1.18 to get thread safety fix
    Improving the performance of faceted search
    Collapsing/expanding the side bar
    Adding 'Remove all filters' link
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Convert facet entry count to be stored as a string rather than a number
    Ordering active facet entries by selection order.
    Fixed bug when faceting on another field and clicking 'show more'. Also make checked boxes go to the top of the list.
    Adding support for faceting fields and supporting drilling down on facets in search page
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    Upgrade LR -> 1.18 to get thread safety fix
    Improving the performance of faceted search
    Collapsing/expanding the side bar
    Upgrading LR 1.8->1.11 to import Lucene NRT changes
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Change faceting records activator to examine view definition rather than just view name
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Convert facet entry count to be stored as a string rather than a number
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Added support for aliases fields in views.
    Added field in views edit page to specify parent view.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Add support for reading properties in View queries
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working (merge)
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    temp disabled decorating in search resource
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Split record name from query
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Allowed views to support custom query prefix
    Switche Views to using models, work in progress
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Convert facet entry count to be stored as a string rather than a number
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Added support for aliases fields in views.
    Added field in views edit page to specify parent view.
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    First stab of new boostrap
    migrated StartupModule to ServicesModule
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    added faceting
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Split record name from query
    removing lucene leftovers
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added support to hide a view. Also fixed bug when view only has one field
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Allowed views to support custom query prefix
    Stopped crawler from overwiting view definitions
    Added import and export to views
    Switche Views to using models, work in progress
    Added LessCss module to server side compile less files
    Minor Rename
    Moving scheduler to the request scope
    using TL with fixed file based lucene records
    upgrading TL, UtterlyIdle and funclate versions
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added e2e test for import crawler functionality, upgrading utterlyidle to use the improved  uri handling mechanism
    Switched to using Twitter BootStrap
    Fixed sub crawling
    Removed Views.add method
    Improved test coverage and 'view/template' convention
    Moved classes and resources into sub packages
    Create views screen
    Made CrawlerResource add a view
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding 'Remove all filters' link
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Fixed bug when faceting on another field and clicking 'show more'. Also make checked boxes go to the top of the list.
    Adding support for faceting fields and supporting drilling down on facets in search page
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    Server side working again
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Created FileRoller to only allow x backups to exist (deleting old ones) (merge)
    Upgraded to LR (119) to get backup/restore fix
    Added a scheduled Job to run daily backups (merge)
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    created a crawler comparitor
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added better support for backup and restore
    (merge)
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Added online backup support for lucene and h2
    Added model repository caching and fixed modifying mutable view models bug
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Test for index deletion
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added better support for backup and restore
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added better support for backup and restore
    (merge)
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    Added online backup support for lucene and h2
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Test for index deletion
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    removing unused imports
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Moving scheduler to the request scope
    upgrading libs
    Exported Html testing to UtterlyIdle
    Changed scheduling work flow
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Ensure FileRoller deletes files from the auto backup directory
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Created FileRoller to only allow x backups to exist (deleting old ones)
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Changing job history item lifespan default value from 30 days to 24hr and making it configurable via a property.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Add test to check searching by Long values works
    Cleanup test
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Supporting drilldowns when searching
    Adding support for searches with dates in summer time
    Handling invalid queries on Jobs History page.
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Captialise action in Jobs History
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    tidy up: removed unused
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Fixed UriCompiledLessCache keys to not include slashes
    Stopped InMemoryLessCache from being static
    renamed LessCache classes
    added UriLessCssCache
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    renamed LessCache classes
    added CompositeLessCssCache
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Fixed logic in LessCssHandler for staleness
    renamed LessCache classes
    Changed API for LessCssCache to use Option
    Reduce margin on input elements
    Don't recompile LESS when running in debug unless you actually need to
    Server side working again
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Quote strings when deleting. Also change delete action url so redirections work correctly
    upgraded funclate
    Add a purge parameter that forces the LESS handler to recompile LESS.
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Fixed CompiledLess stale detection
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    added UriLessCssCache
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Updated to UI 711 for Jobs changes
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded BG to use UI with scheduling code
    moved page classes into test folder
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working (merge)
    Fixed pagination not working
    changing crawlers property to disabled instead of enabled in order to simplify logic
    Made sure SearchResource does not execute multiple queries
    403-forbidden when crawling disabled crawler
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Added support to delete all jobs and ensured crawler is interruptable
    Created Http Queuing
    Upgrade LR -> 1.18 to get thread safety fix
    Improving the performance of faceted search
    Collapsing/expanding the side bar
    Upgrading LR 1.12->1.13
    Upgrading LR 1.11->1.12 for changes in lucene storage delete functionality
    Upgrading LR 1.8->1.11 to import Lucene NRT changes
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Upgrading TL 1.11->1.51, LR 1.3->1.8 and refactored FacetsResource.
    Adding support for faceting fields and supporting drilling down on facets in search page
    Sort search page results by first *visible* header
    Upgrading to Lucene 4.10.0
    Upgrading UtterlyIdle 771->772
    Updating utterlyidle 766 -> 771
    Upgrading UI 765->766 for more fixes to yadic exceptions when debugging
    Upgrading UI 755->765 to use new schedule method to stop UI from throwing (hidden) exceptions when it finds the wrong schedule method first
    Fixed build
    Updated libs
    Update LR to 297 to lose crawler flakiness
    Adding support for searches with dates in summer time
    Upgrading LZ 277->278 for support to search by date and datetime in dd/MM/yy and similar formats
    Upgraded LR 276->277
    Updating utterlyidle 745->746
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Upgrading LR 275->276
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Upgraded LR 274->275 to enable case insensitive search
    Updated LR 272->274.
    Upgraded UI 732->733, jQuery 1.6.4->1.10.2, jQuery UI 1.8.16->1.10.3. Introduced DataTables and FixedHeader jQuery plugins to make the results table header always visibile when scrolling page.
    Upgraded Lucene from 3.6.0 to 4.5.1, LR from 270 to 272, UI from 728 to 732.
    Upgraded UI 727 -> 728
    Removed response entity and displaying just 'OK' on job's creation success in schedules page. Upgraded UI 711 -> 727
    Updated TL(1443-1155)
    Updated to UI 711 for Jobs changes
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Updated TL 1130->1142, UI 707->709, waitrest 103-> 104 and funclate 110->121.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Updated TL to 1130
    When writing changes, group data by definition name to allow writing partial definitions. Also merge definitions with the same name together
    Update LazyRecords from 257 to 261
    Scheduler stop and start buttons replaced by a single toggle button. Upgraded to UI 671.
    Undoing last revert. Back to using UI 670 now.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Upgrade to LR 257 to support '=' as separator, as well as ':'
    upgraded to UI:664 for package move
    upgraded to UI:663 to get small bug fixes
    upgraded BG to use UI with scheduling code
    Upgrade LR:256
    Fix counts on views when a query with special characters is being used
    Updated Lucene to 3.6.2 (from 3.6.0)
    Added basic index/check page
    Upgraded to TL:633 so that we can add a connect & read timeout to crawler requests. Added Request Time and Duration to failure list
    Updated LR:236
    added UriLessCssCache
    Changed API for LessCssCache to use Option
    Update LR (228) and TL (1060) and add a new activator for the old (NIO) directory
    Made work with Java 7
    Made crawlers interuptable
    Upgrade UI: 627 Y 157
    Switched to using TL CPU thread pool
    Named and made closeable CPU bounded pool
    Made Executor Threads be named to aid debugging
    Updated all libs and switched to Amazon CDN (repo.bodar.com)
    Upgrade UI (607)
    Upgrade funclate (102)
    Upgrade UI (606)
    Upgrade libraries to get consistent date parser and nicer methods for adding hours
    More tolerant of input strings. output strings always include ms.
    Function to change times
    Adding properties that can be used in a parsed query
    Updated dependencies
    Reduce margin on input elements
    Don't recompile LESS when running in debug unless you actually need to
    Updating to first release of less compiler (1.3.2-0)
    Update to use a patched version of the Less Compiler which doesn't make us use commons-logging
    Server side working again
    server side -- not working yet
    Made views work concurrently
    upgraded utterlyidle:583
    First stab of new boostrap
    First stab of new boostrap
    migrated StartupModule to ServicesModule
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(888) so that autobackup now deletes directories actually works (merge)
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Update to latest LR(125)
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Created FileRoller to only allow x backups to exist (deleting old ones) (merge)
    Created FileRoller to only allow x backups to exist (deleting old ones)
    Upgraded to LR (119) to get backup/restore fix
    Added a scheduled Job to run daily backups (merge)
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    Updated LazyRecords 111
    Upgraded shavenmaven
    JobResource now allows any request type to be scheduled, not just GET's
    Updated TL (852) UI (562)
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Added background thread storage property
    Upgrading totallylazy:833
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    upgraded utterlyidle (553) to get Module interface changes
    Add a (probably temporary) clear selection button
    upgraded TotallyLazy
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    upgraded totallylazy & yadic
    Upgrade dependencies
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Added support for batch put into lucene for improved write speed once the index gets large
    Upgrade to latest UtterlyIdle
    upgraded funclate
    Add support for selecting individual rows and performing an action on them
    upgraded totallylazy & utterlyidle
    upgraded lazyrecords
    Added priority support in crawler fields (merge)
    Added priority support in crawler fields
    Improve performance by realise()ing the model's keyword sequence
    Use CachedClassLoader for performance improvements in CSV exports
    Upgraded lazy records
    upgraded utterlyidle
    updating lazyRecords
    Deleted csvWriter
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    pulled csv writing out of SearchResource
    Added export as csv to search resource
    Upgrade to latest LazyRecords
    Bump to get latest lazyrecords
    moved bits into executor module
    Added crawler executor admin page for configuring queues crawler
    Split RecordsService for direct records access
    Creating CrawlerFailureRepository which now persists HttpJob
    Fixed pagination to be fast with big datasets
    Made Jobs immutable and updated lazyrecords
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Moved Lucene backup and restore to LazyRecords
    Fixed urls on CrawlerRetryResource
    Stu - Upgrade dependencies
    Changed FailureHandler to capture exceptions too
    Fixed pagination not working (merge)
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Fixed jobUrl by upgrading funclate. Added message to crawlers list page when you change a crawler. Fixed style of dropdown on list page.
    Added 404 & message to CrawlerResource when trying to edit or export non-existant cralwers
    changed Document to Option<Document> in DataTransformer
    Made sure BGB cleans up backups after tests
    tidy up PaginatedHttpJob, removed if's, replaced with functional
    SubfeedJobCreator now unique's on datasource instead of uri. DataTransformer fix for empty document
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added CountLatch to notify us of when a crawl has completed. Added records updated count.
    WIP
    Switched to using s3 for artifacts
    Enabled GZip for 'text/html' content
    Upgraded for gzip support
    Moved zip stuff to TL
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed forwardOnlyXmlRecordsReader
    Updated libs
    Upgrade to UI that doesn't capture profiling data when not profiling, and minor refactorings
    Excluded crawler requests from profiling
    Don't hang on to documents when crawling where possible
    removed less generation timing message
    Use a RecordsActivator to ensure the LuceneRecords are being closed
    Added property to change pool impl and fixed close method
    Updated to latest Lucene Pool
    (merge)
    put useCache() call back into LessCssHandler
    Update LazyRecords to get fix for dealing with closed Lucene indexes
    Created fileLessCssCache for speed
    Added support to override persistence classes
    Fixed StackOverFlow error when using SQL
    Initial work to support switching persistence based on a Uri
    Updated all libs
    Updated to use new Lucene sorting
    WIP: Added support for BGB using SQL as the backing store
    Improved performance by using new LaxyRecords
    Upgraded totallylazy. Moved rows updated to OK status message.
    upgrade totallylazy & utterlyidle
    Updated BGB to use logging provided in LazyRecords
    Upgrade to latest records to get proper aliasing support in XML
    Upgraded libs to ensure we are closing all resources
    Fixed Records not being closed
    Updated all libs versions
    Upgraded with PECS TL and Cleaned up LazyRecords
    upgrading libs - breaking change in range in TL
    upgrading lazyrecords
    Switched to LazyRecords parser
    upgrading lazyrecords
    Upgrading lazy records with lucene fixes
    Updated all libs
    Switched to using LazyRecords
    Upgrade to latest version of TL (Callables -> Functions)
    Upgrading totallyLazy version to ensure lucene directory is closed
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Added batch delete to clean the whole index
    Performance improvements around views
    Reset all crawlers added
    upgrading TL, jobs with exception are captured
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    Updated libs
    Updated TL with date fix
    adding job wrapper around job record
    Updated to use faster lucene records
    Removed unused lucene functionality
    Fixed bug hidden by erasure
    Got new crawler working, except for dates
    Switching to comparators fro totallylazy
    sorting views
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    upgrading TL
    QueryParser: Added simple date support
    Switched to using standalone predicate parser
    Added basic concurrent crawler support
    Increase top padding to allow more room for legend
    Increase top padding to allow more room for legend
    Added ability to remove records
    Added 'reset' button to crawler definitions
    reordering buttons
    Added view copy
    Upgrade Funclate
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added support to hide a view. Also fixed bug when view only has one field
    Ensured meta data values are correctly encoded
    Updated libs
    Added configurable index directory location
    Stopped crawler from reading duplicate entries. Improved Jobs management
    All submit buttons should be bootstrapped
    Updated TL version
    Fixed cssClass name to not have spaces for columnNames
    Added import and export to views
    Switche Views to using models, work in progress
    Updated libs
    Added LessCss module to server side compile less files
    Fixed build
    Improved performance of less via 304 and caching
    Added caching of 'less' and javascript resources
    Added Model Mapping
    Jobs: now displays last response of any scheduled job
    Fixed 'Too many open files' exception
    Moving scheduler to the request scope
    upgrading libs
    using TL with fixed file based lucene records
    upgrading libs
    upgrading TL, UtterlyIdle and funclate versions
    Added aliases support
    Exported Html testing to UtterlyIdle
    Updated UIdle, Waitrest
    Upgrading TL version
    flexible checkpoint date support
    Adding support for record name with spaces
    Upgrading TL, fixing dates handling in a crawler
    Spiking http scheduler
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added e2e test for import crawler functionality, upgrading utterlyidle to use the improved  uri handling mechanism
    Moved model value callable to funclate
    Pushed some behaviour up to UIdle and TL
    Started move towards using models from form parameters
    Cleaned up html/xml usage
    Fixed sub crawling
    Building model from record definition
    Added protection against negative number of fields in a crawler form
    Added additional rows too crawler
    Renamed templates
    Moved classes and resources into sub packages
    Removed ModelRenderer duplication
    Used new TL methods
    Used new funclate callable
    Switched to using Boolean support in TL
    Refactor towards Crawling sub feeds
    Added test for XmlDefintionExtractor
    Removed duplcation in form parameter handling
    Added a simple view menu
    Made CrawlerResource add a view
    Changed check box filter to use resursive(splitAt)
    Upgraded TL version
    Updated TL Version
    Updated TL version
    Updated TL version
    Updated TL and removed dupliction
    Added simple crawler interface
    Minor clean up
    Got some initial search working
    Initial web search for lucene
    Moved ApplicationBuilder to utterlyidle
    Added basic crawling of a xml based web serivce
    Initial project import
    Upgrade LR -> 1.18 to get thread safety fix
    Cleaning up the latch code for crawling
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Changed check box filter to use resursive(splitAt)
    Minor clean up
    Initial project import
    Updated dependency locations
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Minor clean up
    Initial project import
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Upgrading UtterlyIdle 771->772
    Updating utterlyidle 766 -> 771
    Upgrading UI 765->766 for more fixes to yadic exceptions when debugging
    Upgrading UI 755->765 to use new schedule method to stop UI from throwing (hidden) exceptions when it finds the wrong schedule method first
    Fixed build
    Updated libs
    Adding support for searches with dates in summer time
    Updating utterlyidle 745->746
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Upgraded UI 732->733, jQuery 1.6.4->1.10.2, jQuery UI 1.8.16->1.10.3. Introduced DataTables and FixedHeader jQuery plugins to make the results table header always visibile when scrolling page.
    Upgraded Lucene from 3.6.0 to 4.5.1, LR from 270 to 272, UI from 728 to 732.
    Upgraded UI 727 -> 728
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Updated TL 1130->1142, UI 707->709, waitrest 103-> 104 and funclate 110->121.
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Updated TL to 1130
    Scheduler stop and start buttons replaced by a single toggle button. Upgraded to UI 671.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Upgraded UT from 664 to 670 with Scheduler/jobs changes
    Crawler failures pagination controls aligned to the right
    upgraded to UI:664 for package move
    upgraded to UI:663 to get small bug fixes
    upgraded BG to use UI with scheduling code
    Fix counts on views when a query with special characters is being used
    Made all test run independent waitrest
    Updated all libs and switched to Amazon CDN (repo.bodar.com)
    Reduce margin on input elements
    First stab of new boostrap
    First stab of new boostrap
    added osx phantomjs support to build
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Added a scheduled Job to run daily backups (merge)
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    Upgraded shavenmaven
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Ensure js tests can run on 32 and 64 bit machines
    Add first JS test
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Added unique keys & value to Subfeeder2
    Switched to using s3 for artifacts
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    added faceting
    Switching to waitrest with embedded dependencies
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    Added 'reset' button to crawler definitions
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Updated TL version
    Added LessCss module to server side compile less files
    Fixed build
    Jobs: now displays last response of any scheduled job
    upgrading libs
    upgrading libs
    replacing mocks with stubs in http scheduler tests
    Updated UIdle, Waitrest
    upgrading waitrest and starting waitrest instance when starting baron for testing
    Added http scheduler tests
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Minor clean up
    Initial project import
    Updated dependency locations
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded BG to use UI with scheduling code
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    Made views work concurrently
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Added a scheduled Job to run daily backups (merge)
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    Updated LazyRecords 111
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Minor clean up
    Initial project import
    Some idea files, I guess due to a newer version of IntelliJ
    Some idea files, I guess due to a newer version of IntelliJ
    Upgrade LR -> 1.18 to get thread safety fix
    Only attempt to crawl enabled crawlers to prevent the schedule page clogging up with errors
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Update records prefixing to bracket queries. This prevents stupid OR clauses from bypassing view queries!
    Move views menu to go side-by-side with unique results
    Sort search page results by first *visible* header
    Supporting aliases for not-visible fields in views
    Changing the no results message
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Fixed de-selecting a row after selecting all pages
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Updated TL to 1130
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    added UriLessCssCache
    Made work with Java 7
    Adding properties that can be used in a parsed query
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Added a scheduled Job to run daily backups (merge)
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    Upgraded shavenmaven
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Introduce separate URLs for actions so they can have security applied in Penfold
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Fix randomly overlapping elements in unique item view in IE7 by setting a position.
    Switched to LazyRecords parser
    Upgrade to latest version of TL (Callables -> Functions)
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    Introduced InvocationHandler to remove code duplication
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Switched to using correct predicates so it will work with any records implementation (merge)
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added support to move or remove a field form view or crawler definition, Removed unused bootstrap 1.1
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Minor clean up
    Initial project import
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Update records prefixing to bracket queries. This prevents stupid OR clauses from bypassing view queries!
    Move views menu to go side-by-side with unique results
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Minor clean up
    Initial project import
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Minor clean up
    Initial project import
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Minor clean up
    Initial project import
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Made StandardParser use correct constructor
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    Upgraded totallylazy. Moved rows updated to OK status message.
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    Added caching of 'less' and javascript resources
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Minor clean up
    Initial web search for lucene
    Initial project import
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Fixed bug where we we have duplicate executors
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Added start to to scheduler
    Changed Map to ImmutableModel in QueuesCrawler
    Added bgb admin menu
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    Added support for batch put into lucene for improved write speed once the index gets large
    Move actions code into a separate file to simplify footer
    upgraded funclate
    upgraded totallylazy & utterlyidle
    Re-add accidentally reverted changes
    Added priority support in crawler fields
    Upgraded lazy records
    export csv now doesnt export hidden colums
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    pulled csv writing out of SearchResource
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Minor clean up
    Initial project import
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Added a scheduled Job to run daily backups (merge)
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Records, and the activator are closeable
    BreakingChange: BGB no longer directly depends on Records but uses a tiny type to wrap Records so you can target BGB in a strongly typed way
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    migrated StartupModule to ServicesModule
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Minor clean up
    Initial web search for lucene
    Initial project import
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Adding title to Crawler Status Page
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    (merge)
    put useCache() call back into LessCssHandler
    Update LazyRecords to get fix for dealing with closed Lucene indexes
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    WIP: Added support for BGB using SQL as the backing store
    Created Http Queuing
    Some idea files, I guess due to a newer version of IntelliJ
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Renaming the Jobs page to Recent Jobs and adding new Jobs History page that will display persisted jobs history entries for up to the last 30 days (by default).
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    upgraded BG to use UI with scheduling code
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    Server side working again
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Add support for selecting individual rows and performing an action on them
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Added reset.css
    Made CrawlerResource add a view
    Minor clean up
    Initial project import
    Some idea files, I guess due to a newer version of IntelliJ
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Updated TL to 1130
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Minor clean up
    Initial project import
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    Upgrade LR -> 1.18 to get thread safety fix
    Collapsing/expanding the side bar
    Adding quick navigation links to the details page
    Setting drills to empty on the details page
    Sort search page results by first *visible* header
    Adding support for searches with dates in summer time
    Moved CsvWriter to baron-greenback and added support for rendereable types
    Using ConcurrentHashMap data structure when creating DataSource's Set in HttpVisitedFactory to resolve concurrent modification issues.
    Fixed missing parameter in String format for toString method in Failure class.
    Revert attempted fix as it doesn't solve the concurrent modification issue
    Changed Set to LinkedHashSet when batchWriting to preserve definition's fields order.
    Updated TL to 1130
    Upgraded UT from 664 to 670 with Scheduler/jobs changes (runtime dependencies)
    Crawler failures pagination controls aligned to the right
    Fix counts on views when a query with special characters is being used
    Reduce margin on input elements
    First stab of new boostrap
    upgrded all bodar libs
    Date checkpoints should check for less than and greater than rather than exact matches
    Updated TL(877) so that autobackup now deletes directories
    Unit tests for bulk action tests
    Added start to job edit
    Upgraded TL(876) XPath performance increase, LR (121) PartionedIndex.close fix
    Added a scheduled Job to run daily backups (merge)
    Switched to using partitioned index, backup and restore need fixing
    Added a scheduled Job to run daily backups
    Upgraded shavenmaven
    JobResource now allows any request type to be scheduled, not just GET's
    Enabled background storage by default
    Add ant test runner into ShavenMaven
    Changed Map to ImmutableModel in QueuesCrawler
    Changed 'cralwer not enabled' message to show crawler name
    Add a (probably temporary) clear selection button
    Added a Visited Uri's cache. No longer persist visited alongside failures.
    Quote strings when deleting. Also change delete action url so redirections work correctly
    Backported LuceneRecords batch put datawriter fix
    upgraded funclate
    Added priority support in crawler fields
    Upgraded lazy records
    Add a new all method to SearchResource that ignores a view's query
    Made pager defensive and default when page or row count are less than 1
    Fixed QueuesCrawler bug that was following url's already seen on prev-archive's
    Moved csv export into seperate resource
    upgraded totallylazy & lazyrecords
    moved bits into executor module
    Split RecordsService for direct records access
    Fixed pagination to be fast with big datasets
    Switched to using immutable record and keywords
    Auto-created View should not be created if a view already looking at the same source exists
    renamed crawlcontainer to crawlscope
    Began work on executor config resource
    Crawlers have names
    Made delete all also kill and recreate crawler executors
    pulled StagedJobExecutor out of QueuesCrawler
    reverting change to bbc.json
    moved latch code into another method, so that we will still wait when we do a retry
    Fixed urls on CrawlerRetryResource
    Fixed pagination not working
    Made sure SearchResource does not execute multiple queries
    Made sure BGB cleans up backups after tests
    Update ShavenMaven version
    Changed QueuesCrawler to work with only 1 unique field. Fixed destination definition to be flattened. We now filter out dupes in the SubfeedJobCreator.
    Updated all libs to latest
    Fixed a bug where composite crawler was dropping records
    Added restore and auto backup support to delete
    Minor clean up
    removed less generation timing message
    put useCache() call back into LessCssHandler
    Created fileLessCssCache for speed
    Fixed StackOverFlow error when using SQL
    upgrade totallylazy & utterlyidle
    Switched to LazyRecords parser
    the shortcut action now either sends you to the unique page for a search
    jozef, tom added support for redirecting to a page when only 1 record is returned from a result set
    removing nowrap from tables
    Fixed concurrency issue with IndexReaders being closed to soon
    adding job wrapper around job record
    Removed unused lucene functionality
    Add ellipses for pager
    Removed unneed parenthesis from generate queries
    Moved pagination div outside results so that service side includes do not include it
    Add pagination to search results
    Increase top padding to allow more room for legend
    Added ability to remove records
    reordering buttons
    Added view copy
    Added initial Query Parser
    Search result links are absolutely specified to prevent problems when sitemeshing
    Ensured that when an unknown view is specified, no results are shown
    Dates are lexically ordered for easy sorting
    Added configurable index directory location
    All submit buttons should be bootstrapped
    Added LessCss module to server side compile less files
    cleaning up code for feed pagination, added e2e test for feed crawling with pagination
    Minor clean up
    Initial project import
