    mv libcpustats from frameworks/base to /native
    
    OK to lose history
    
    Change-Id: I563fec271e0bc240e4a09a8b9647c7439badd85b
    Fix log spam about CPU frequency on one device
    
    Previous kernels have allowed opening the CPU frequency file regardless
    whether the CPU is up or not.  This fixes some log spam on one device
    with dynamic hot plug CPU feature, which does not allow opening the CPU
    frequency file if CPU is down.
    
    Also, since the file descriptors are global and have long lives, add
    the close-on-exec flag.
    
    Change-Id: Ia14a2b9e20038dfb96a573920176a47a96bd3f5a
    mv libcpustats from frameworks/base to /native
    
    OK to lose history
    
    Change-Id: I563fec271e0bc240e4a09a8b9647c7439badd85b
    libs/ui: Add support for triple framebuffers
    
    Change-Id: I90dd38deeeda9a3785b87286cc7d252c6f948750
    Update ANativeWindow clients for sync
    
    This change updates the uses of ANativeWindow to use the new ANW functions that
    accept and return Sync HAL fence file descriptors.
    
    Change-Id: I3ca648b6ac33f7360e86754f924aa072f95242f6
    remove dependency on android_native{s_priv|buffer}.h
    
    Change-Id: Ie4b95f7061c240f37c504414259f92d72c4ffc89
    frameworks/base: android_native_buffer_t -> ANativeWindowBuffer
    
    Change-Id: Idc2eabaa805bb6d308ebb315872623f28d428417
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    frameworks/base: make the ANativeWindow query() method const
    
    query() does not modify the object's data, so it needs to be a const method
    
    Change-Id: I67c40a3c865461e6f1cc2193fd2d74286ff6ac8f
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    surfaceflinger: add support for gralloc dump hooks
    
    Change-Id: Ib6f539ed0132b70d040d653c03d52cc04249ac3c
    Framebuffer: Support variable number of framebuffers in the UI
    
    This change defines a macro NUM_FRAME_BUFFERS to set
    the desired number of framebuffers to be used by the UI,
    instead of hard-coding 2 framebuffers.
    
    Aditional logic has been  added to handle the initialization
    and destruction of NUM_FRAME_BUFFERS buffers.
    
    Change-Id: I3a4bfec3e0f453432f2ffebf084c00f574d3be46
    Signed-off-by: Rodrigo Obregon <robregon@ti.com>
    Add logging of various important graphics events
    
    There are 16 events logged in the event log:
    SF_APP_DEQUEUE_BEFORE
    SF_APP_DEQUEUE_AFTER
    SF_APP_LOCK_BEFORE
    SF_APP_LOCK_AFTER
    SF_APP_QUEUE
    
    SF_REPAINT
    SF_COMPOSITION_COMPLETE
    SF_UNLOCK_CLIENTS
    SF_SWAP_BUFFERS
    SF_REPAINT_DONE
    
    SF_FB_POST_BEFORE
    SF_FB_POST_AFTER
    SF_FB_DEQUEUE_BEFORE
    SF_FB_DEQUEUE_AFTER
    SF_FB_LOCK_BEFORE
    SF_FB_LOCK_AFTER
    
    all events log the buffer conserned and a timestamp in microseconds.
    
    by default the logging is not enabled, to turn it on:
    adb shell service call SurfaceFlinger 1006 i31 1
    adb shell setprop debug.graphic_log 1
    
    The effect is immediate in SurfaceFlinger, but applications need to be
    restarted.
    
    Change-Id: Ifc2e31f7aed072d9a7dede20ff2ce59231edbec1
    Introduce official public NativeWindow type.
    
    Not yet hooked up to anything in the NDK, but requires renaming
    the existing android_native_window_t type everywhere.
    
    Change-Id: Iffee6ea39c93b8b34e20fb69e4d2c7c837e5ea2e
    eclair snapshot
    Android side of the fix for [2121211] Sholes has stutter during animations
    
    a new method, compostionComplete() is added to the framebuffer hal, it is used by surfaceflinger to signal the driver that the composition is complete, BEFORE it releases its client. This gives a chance to the driver to
    second take, hopefully this time it doesn't break one of the builds: "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    Revert "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    
    This reverts commit 8b76a0ac6fbf07254629ed1ea86af014d5abe050.
    SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything.
    
    This change makes SurfaceHolder.setType(GPU) obsolete (it's now ignored).
    Added an API to android_native_window_t to allow extending the functionality without ever breaking binary compatibility. This is used to implement the new set_usage() API. This API needs to be called by software renderers because the default is to use usage flags suitable for h/w.
    fixed some issues with the software renderer when surfaces are made current.
    
    there was several issues:
    - when a surface was made non-current, the last frame wasn't shown and the buffer could stay locked
    - when a surface was made current the 2nd time, it would not dequeue a new buffer
    
    now, queue/dequeue are done when the surface is made current.
    
    for this to work, a new query() hook had to be added on android_native_window_t, it allows to retrieve some attributes of a window (currently only width and height).
    make use of new eglGetRenderBufferANDROID extension to clean-up a bit a few hacks added recently
    hack copybit back in for video playback on msm7k. we have h/w accelerated video again
    add support for update-on-demand in SurfaceFlinger
    move opengl/include/EGL/android_natives.h to include/ui/egl/android_natives.h and don't include it from egl.h
    
    the android_native_ types are just forward declared in egl.h
    get rid of android_native_buffer_t::getHandle() and replace it with an handle field
    
    this abstraction was not necessary. things are easier now.
    minor clean-up in FramebufferNativeWindow
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Initial Contribution
    remove dependency on android_native{s_priv|buffer}.h
    
    Change-Id: Ie4b95f7061c240f37c504414259f92d72c4ffc89
    frameworks/base: move ANativeWindow/android_native_buffer_t out
    
    These definitions have been moved to system/core.
    
    Change-Id: I021b6b5f2fd72d538b5ccdcb33860ebd3004d9ad
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    frameworks/base: make the ANativeWindow query() method const
    
    query() does not modify the object's data, so it needs to be a const method
    
    Change-Id: I67c40a3c865461e6f1cc2193fd2d74286ff6ac8f
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Revert "retire android_native_window_t"
    
    this type is still used by partner's source trees.
    we will get rid of it in next release's timeframe.
    
    This reverts commit 7b49b976277cb3538242151e7dbd24681ddec73e.
    retire android_native_window_t
    
    Change-Id: I232c526168e1a93977d1c2d0fa74c8937cdeb23b
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Add support for timestamps into SurfaceTexture.
    
    API addition: The timestamps are represented as nanoseconds from some
    arbitrary time point. Like the SurfaceTexture transform matrix, the
    timestamp retrieved by getTimestamp is for the last frame sent to the
    GL texture using updateTexImage().
    
    Camera HAL change: Expect vendors to set these timestamps using
    native_window_set_buffers_timestamp().  For now, they are
    autogenerated by SurfaceTextureClient if set_buffers_timestamp() is
    never called, but such timing is likely not accurate enough to pass a
    CTS test.
    
    bug:3300707
    
    Change-Id: Ife131a0c2a826ac27342e11b8a6c42ff49e1bea7
    ANativeWindow: add query for the concrete type.
    
    This change adds a query to the ANativeWindow interface for getting the
    concrete type of the ANativeWindow.
    
    Bug: 4086509
    Change-Id: I64aa86d72fbca3b52a98e1fc35608737781a3178
    ANativeWindow: add query for the concrete type.
    
    This change adds a query to the ANativeWindow interface for getting the
    concrete type of the ANativeWindow.
    
    Bug: 4086509
    Change-Id: I64aa86d72fbca3b52a98e1fc35608737781a3178
    ANativeWindow: add queues-to-window-composer check.
    
    This change adds a new 'method' to the ANativeWindow interface to check
    whether buffers queued to the window will be sent directly to the system
    window compositor.
    
    Change-Id: I4d4b199e328c110b68b250029aea650f03c8724d
    Bug: 3495535
    Add the MIN_UNDEQUEUED_BUFFERS query to ANW.
    
    This change adds a new query to ANativeWindow for getting the minimum
    number of buffers that must be left un-dequeued during the steady-state
    operation of the ANativeWindow.
    
    Change-Id: Ie8c461fc26b02ecde02ddb4f95bf763662cf1551
    Related-Bug: 3356050
    Reset ANativeWindow crop on buffer geometry changes.
    
    This changes the ANativeWindow API and the two implementations to reset
    the window's crop rectangle to be uncropped when the window's buffer
    geometry is changed.
    
    Bug: 3359604
    Change-Id: I64283dc8382ae687787ec0bebe6a5d5b4a0dcd6b
    fix [2835280] Add support for cancelling buffers to ANativeWindow
    
    There is a new ANativeWindow::cancelBuffer() API that can be used to
    cancel any dequeued buffer, BEFORE it's been enqueued. The buffer is
    returned to the list of availlable buffers. dequeue and cancel are not
    mutually thread safe, they must be called from the same thread or
    external synchronization must be used.
    
    Change-Id: I86cc7985bace8b6a93ad2c75d2bef5c3c2cb4d61
    fix [2931513] Add support for setting the orientation of an ANativeWindow
    
    Also implement support for cropping.
    
    Change-Id: Iba5888dd242bf2feaac9e9ce26e404c1f404c280
    Introduce official public NativeWindow type.
    
    Not yet hooked up to anything in the NDK, but requires renaming
    the existing android_native_window_t type everywhere.
    
    Change-Id: Iffee6ea39c93b8b34e20fb69e4d2c7c837e5ea2e
    added the notion of fixed-size buffers
    
    the new native_window_set_buffers_geometry allows
    to specify a size and format for all buffers to be
    dequeued. the buffer will be scalled to the window's
    size.
    
    Change-Id: I2c378b85c88d29cdd827a5f319d5c704d79ba381
    added native_window_set_buffer_count()
    
    this method can be used to change the number of buffers
    associated to a native window. the default is two.
    
    Change-Id: I608b959e6b29d77f95edb23c31dc9b099a758f2f
    Add incStrong and decStrong methods to android_native_{window,buffer}_t.
    
    This change adds the methods necessary to use sp<> to handle refcounting
    android_native_window_t and android_native_buffer_t.  The new methods forward
    the refcounting operations to the corresponding android_native_base_t
    functions.
    
    Change-Id: I7de8e262728e439bc1efdf69374a2a9f6f432ced
    added setCrop() to android_native_window_t
    
    hooked up the new method up to Surface.cpp
    the actual crop is not implemented in SF yet
    
    Change-Id: Ic6e313c98fd880f127a051a0ccc71808bd689751
    Add a new connect/disconnect API to android_native_window_t
    
    it's used to keep track of which API owns the surface.
    
    Change-Id: I1021c5905c020efc3c428e561b38189377168b22
    eclair snapshot
    really be more friendly with C
    be more friendly with C
    ui: make native_window_set_usage be a static inline
    
    Signed-off-by: Dima Zavin <dima@android.com>
    second take, hopefully this time it doesn't break one of the builds: "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    Revert "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    
    This reverts commit 8b76a0ac6fbf07254629ed1ea86af014d5abe050.
    SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything.
    
    This change makes SurfaceHolder.setType(GPU) obsolete (it's now ignored).
    Added an API to android_native_window_t to allow extending the functionality without ever breaking binary compatibility. This is used to implement the new set_usage() API. This API needs to be called by software renderers because the default is to use usage flags suitable for h/w.
    added NATIVE_WINDOW_FORMAT attribute to android_native_window_t
    fixed some issues with the software renderer when surfaces are made current.
    
    there was several issues:
    - when a surface was made non-current, the last frame wasn't shown and the buffer could stay locked
    - when a surface was made current the 2nd time, it would not dequeue a new buffer
    
    now, queue/dequeue are done when the surface is made current.
    
    for this to work, a new query() hook had to be added on android_native_window_t, it allows to retrieve some attributes of a window (currently only width and height).
    get rid off unneeded flags
    move android_native_buffer_t declaration into its own private/ui/android_native_priv.h header, since user code should never have access to it.
    move opengl/include/EGL/android_natives.h to include/ui/egl/android_natives.h and don't include it from egl.h
    
    the android_native_ types are just forward declared in egl.h
    get rid of android_native_buffer_t::getHandle() and replace it with an handle field
    
    this abstraction was not necessary. things are easier now.
    removed the "bits" attribute from android_native_buffer_t.
    
    "bits" can never be trusted now that we need to call lock() on the handle to get the virtual address of the buffer.
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    remove dependency on android_native{s_priv|buffer}.h
    
    Change-Id: Ie4b95f7061c240f37c504414259f92d72c4ffc89
    SurfaceMediaSource: use the vid enc usage bit
    
    This change makes SurfaceMediaSource add the VIDEO_ENC usage bit when
    allocating its GraphicBuffers rather than the HW_TEXTURE bit.
    
    Change-Id: Ie20e225c894fdbc31cad6bb82b3b64c7e98074eb
    SurfaceFlinger: use the HWC gralloc usage bit
    
    This change makes SurfaceFlinger always use the
    GRALLOC_USAGE_HW_COMPOSER usage bit when allocating buffers that may be
    passed to the HWComposer.
    
    Change-Id: I70362a8ede2b359fb2046853f85149d597465817
    Tweaks for forward-compatibility
    
    Change-Id: Iec525edc186e78d5d865f82dd5b1f56263c22e86
    frameworks/base: android_native_buffer_t -> ANativeWindowBuffer
    
    Change-Id: Idc2eabaa805bb6d308ebb315872623f28d428417
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Protected surface API
    
    To be used by DRM framework, implemented by display HAL
    
    Change-Id: I054a07a94f4d5dbe792f3a597e2e49a100d90eb2
    Add the SurfaceTexture C++ implementation.
    
    This change adds the C++ implementation of SurfaceTexture and related
    classes. The goal of this is for a SurfaceTexture to be passed to
    camera service or Stagefright in place of a Surface to allow camera
    preview or decoded video frames to be streamed to an OpenGL ES texture
    that an application can use.
    
    Change-Id: I55c83a7017f1ecb81c9c9e3252cbd118b914296c
    [3171580] Add transform field to native buffers. (DO NOT MERGE)
    
    This field indicate how the content of the buffer
    needs to be transformed.
    
    Change-Id: Ide3e980a90599e931406135693231276626adbbb
    [3171580] don't automatically log GraphicBuffer allocation failures
    
    some of these failures are not fatal and even expected in some cases
    so they should not emit a dump in the log in those cases.
    
    Change-Id: Idcfa252e3bfa9d74e27fe4ad8f8623aa01aa9c5e
    Move binder magic from the Surface class to GraphicBuffer.
    
    - Register buffers with Gralloc when unflattening a GraphicBuffer (rather than
    doing it in the Surface class).
    - Add support for a GraphicBuffer that wraps an android_native_window_t*.
    
    Change-Id: I029ac086111bbac800e5ca37eb505f558b718cd8
    split surface management from surface's buffers management
    
    Change-Id: If3c5655d1231f8f0c49ba68f972b1b20c93b3f87
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    fix[2228133] pixelflinger ignores the "vertical stride" leading to artifacts when playing back video
    
    we lost the concept of vertical stride when moving video playback to EGLImage.
    Here we bring it back in a somewhat hacky-way that will work only for the
    softgl/mdp backend.
        fix [2143798] Need to figure out how to do video
    
        Use EGLImageKHR instead of copybit directly.
        We now have the basis to use streaming YUV textures (well, in fact
        we already are). When/if we use the GPU instead of the MDP we'll
        need to make sure it supports the appropriate YUV format.
    
        Also make sure we compile if EGL_ANDROID_image_native_buffer is not supported
    fix [2167050] glTexImage2D code path buggy in SurfaceFlinger
    
    When EGLImage extension is not available, SurfaceFlinger will fallback to using
    glTexImage2D and glTexSubImage2D instead, which requires 50% more memory and an
    extra copy. However this code path has never been exercised and had some bugs
    which this patch fix.
    
    Mainly the scale factor wasn't computed right when falling back on glDrawElements.
    We also fallback to this mode of operation if a buffer doesn't have the adequate
    usage bits for EGLImage usage.
    
    This changes only code that is currently not executed. Some refactoring was needed to
    keep the change clean. This doesn't change anything functionaly.
    eclair snapshot
    fix [2068105] implement queueBuffer/lockBuffer/dequeueBuffer properly
    
    Rewrote SurfaceFlinger's buffer management from the ground-up.
    The design now support an arbitrary number of buffers per surface, however the current implementation is limited to four. Currently only 2 buffers are used in practice.
    
    The main new feature is to be able to dequeue all buffers at once (very important when there are only two).
    
    A client can dequeue all buffers until there are none available, it can lock all buffers except the last one that is used for composition. The client will block then, until a new buffer is enqueued.
    
    The current implementation requires that buffers are locked in the same order they are dequeued and enqueued in the same order they are locked. Only one buffer can be locked at a time.
    
    eg. Allowed sequence:   DQ, DQ, LOCK, Q, LOCK, Q
    eg. Forbidden sequence: DQ, DQ, LOCK, LOCK, Q, Q
    fix a memory corruption where a SF Client could be used after it's been destroyed
    implement dimming with a texture on msm7k so it uses copybit
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    deprecate L_8, LA_88 and RGB_332 in sdk
    
    re-add support for pixelformats L_8, LA_88 and RGB_332 in libui
    for backward compatibility.
    
    This may or may not fix 6058926
    
    Bug: 6049685
    Change-Id: Ic1b8b4cc994522f7fe664da64c0ef76b98bc6d53
    remove libui's dependency on libpixelflinger
    
    this also remove support for unused pixelformats.
    
    Change-Id: I2c759a6d2daa740f3786ed62095def8047ae933d
    Adding SurfaceEncoder for encoding FilterFrames
    
    Adding SurfaceEncoder which can be used to encode
    custom frame data. In a sense, it is reverse
    of what SurfaceTexture does.
    
    SurfaceEncoder takes in frames from a native window and
    passes them to an encoder, thus acting like a MediaSource.
    It uses GRAlloc buffers underneath for passing data.
    The client side sets the geometry, format in the beginning,
    which cannot be changed while the recording is going on.
    
    Currently, there is no common pixel format that both
    GRAlloc and HAL understand.
    Also, the encoder cannot encode using the data from the GRAlloc
    buffers.
    
    The SurfaceEncoder_test examines mainly the buffer passage
    since true encoding cannot be done at this point.
    SimpleDummyRecorder 'reads' the frames in the same thread
    as the start(), whereas DummyRecorder 'reads' in a separate
    thread much like the MPEG4Writer. The test with DummyRecorder
    is much closer to the real encoding implementation.
    
    Related to bug id: 4529323
    
    Change-Id: I58ec19a150f8fe4d6195196dc44f55002b46c7c8
    fix a bug I introduced recently where YUV formats would crash the system
    get rid off the YUV formats at the libui layer
    eclair snapshot
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    improve [un]marshalling of non-binder objects
    
    this change introduces a new class LightFlattenable<> which is
    a protocol to flatten simple objects that don't require
    binders or file descriptors; the benefit of this protocol is that
    it doesn't require the objects to have a virtual table and give us
    a consitant way of doing this.
    
    we also introduce an implementation of this protocol for
    POD structures, LightFlattenablePod<>.
    
    Parcel has been update to handle this protocol automatically.
    
    Sensor, Rect, Point and Region now use this new protocol.
    
    Change-Id: Icb3ce7fa1d785249eb666f39c2129f2fc143ea4a
    minor Rect.h cleanup
    
    add getBounds(), getWidth(), getHeight(), width() and height()
    are kept for backward compatibility.
    
    Change-Id: I83837abf17dc2f8bded1beff73430e8c7d9bbdb3
    SurfaceFlinger: add a crop to the layer state
    
    This change adds a crop rectangle specified in window coordinates to the layer
    state.  The all window pixels outside this crop rectangle are treated as though
    they were fully transparent.  This change also adds the plumbing necessary for
    WindowManager to set that crop.
    
    Change-Id: I582bc445dc8c97d4c943d4db8d582a6ef5a66081
    libui: add the Rect::transform method
    
    This change adds a method to Rect to transform a rectangle by a graphics HAL
    transform.
    
    Change-Id: Ic0d0988e731bdb5662faee41a5927b1242891658
    Bug: 6299171
    fix the float Rect in OpenGLRenderer to handle NANs
    
    - we want functions like isEmpty() to return true if NANs are
    involved in the Rect
    
    - also clean-up the intersect familly of calls
    
    - minor cleanup in the int32_t Rect as well
    
    These played a role in http://b/5331198.
    
    Bug: 5331198
    
    Change-Id: I5369725ab482e4b83da9f1bd4cee5256e5de75b2
    Add ANativeWindow API for directly drawing to the surface bits.
    
    Also other cleanup and fixes:
    
    - We now properly set the default window format to 565.
    - New APIs to set the window format and flags from native code.
    - Tweaked glue for simpler handling of the "destroy" message.
    - Um, other stuff.
    
    Change-Id: Id7790a21a2fa9a19b91854d225324a7c1e7c6ade
    eclair snapshot
    donut snapshot
    oops forgot these changes in the previous merge. fixes build
    minor clean-up to Rect and Point.
    
    - return "const" objects for overloaded operators to disallow constructs like: (a+b) = c;
    - don't return references to non-static members, it's not always safe.
    - Point.cpp was empty, so get rid of it
    Region now has its own implementation instead of relying on SkRegion, which allows us to break libui's dependency on libcorecg.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    strengthen region validation
    
    Change-Id: I75ee7bc4dd7a2f5357ac8994a23bc8b8bfb6eb44
    Add a way to retrieve a Region as a SharedBuffer
    
    Change-Id: Ia53cb905fbc88f899521658545f990fb9217b1e1
    change how we store Region data internally
    
    We used to keep the bounds of the region as a
    separate rectangle. Instead we now store it as the last
    element of the Vector<> of Rects.
    
    This has the benefit of being slightly more efficient when
    copying regions and reduces the overhead of small regions,
    but more importantly will allow us to export the underlaying
    SharedBuffer (eventually).
    
    Change-Id: I80790e4fb1a09a747a5616000cfef852ac4ce9e9
    improve [un]marshalling of non-binder objects
    
    this change introduces a new class LightFlattenable<> which is
    a protocol to flatten simple objects that don't require
    binders or file descriptors; the benefit of this protocol is that
    it doesn't require the objects to have a virtual table and give us
    a consitant way of doing this.
    
    we also introduce an implementation of this protocol for
    POD structures, LightFlattenablePod<>.
    
    Parcel has been update to handle this protocol automatically.
    
    Sensor, Rect, Point and Region now use this new protocol.
    
    Change-Id: Icb3ce7fa1d785249eb666f39c2129f2fc143ea4a
    Preliminary support for clipRect(Rect, Op)
    
    This adds basic support for clip regions. It is currently disabled at compile
    time. Enabling clip regions will require setting up a stencil buffer.
    
    Change-Id: I638616a972276e38737f8ac0633692c3845eaa74
    get rid of dependency on copybit HAL module
    
    Change-Id: Ia608099a2426c11a91d33063ba53c93e1eccb428
    Remove a dependency of Region (libui) on Parcel (libbinder).
    eclair snapshot
    Region::makeBoundsSelf() efficiently turns a region to its bounds
    return bounds Rect by value
    make sure the Region code disallows constructs like "(a+b)=c;", which is somewhat meaningless.
    move libbinder's header files under includes/binder
    Region now has its own implementation instead of relying on SkRegion, which allows us to break libui's dependency on libcorecg.
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    improve [un]marshalling of non-binder objects
    
    this change introduces a new class LightFlattenable<> which is
    a protocol to flatten simple objects that don't require
    binders or file descriptors; the benefit of this protocol is that
    it doesn't require the objects to have a virtual table and give us
    a consitant way of doing this.
    
    we also introduce an implementation of this protocol for
    POD structures, LightFlattenablePod<>.
    
    Parcel has been update to handle this protocol automatically.
    
    Sensor, Rect, Point and Region now use this new protocol.
    
    Change-Id: Icb3ce7fa1d785249eb666f39c2129f2fc143ea4a
    donut snapshot
    minor clean-up to Rect and Point.
    
    - return "const" objects for overloaded operators to disallow constructs like: (a+b) = c;
    - don't return references to non-static members, it's not always safe.
    - Point.cpp was empty, so get rid of it
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Show build config in dumpsys SurfaceFlinger
    
    This adds a line to the "dumpsys SurfaceFlinger" output that shows
    build-time configuration values.
    
    Example:
     Build configuration: [sf HAS_CONTEXT_PRIORITY] [libui] \
      [libgui USE_FENCE_SYNC]
    
    Bug 7206633
    
    Change-Id: Ibe1856b459d34a4be6ee83a4ebfd2807e6cc68a0
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    Remove frameworks/base/im since these stuff are only used by IM app
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    SurfaceFlinger: add support for secure displays
    
    This change adds support for displays that are not allowed to display surfaces
    with the eSecure flag set.  All non-virtual displays are considered secure,
    while virtual displays have their secure-ness specified at creation time.
    
    Bug: 7368436
    Change-Id: I81ad535d2d1e5a7ff78269017e85b111f0098500
    get rid of the shared-memory control block
    
    Change-Id: If814060aca1d2ff2619d4adcd57296983d207f7f
    Mouse pointer integration.
    
    Added support for loading the pointer icon from a resource.
    
    Moved the system server related bits of the input manager out
    of libui and into libinput since they do not need to be linked into
    applications.
    
    Change-Id: Iec11e0725b3add2b905c51f8ea2c3b4b0d1a2d67
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fence didn't manager sync_wait error codes properly
    
    error codes are returned in errno, this caused ::waitForwever()
    to only wait for 1 second and return improper error code (-1).
    
    needed to help debugging 7316632
    
    Bug: 7316632
    Change-Id: Ie144f614a88393393972a3a770c6b4b0581f961a
    Add Fence::waitForever which logs a warning timeout, and use it
    
    Bug: 7217641
    Change-Id: If0c1a613ead307c4045a47824174bf40c72bc7d7
    ui/Fence: change the TIMEOUT_NEVER value to -1
    
    Change-Id: I3ef0a4c06f80990b53a8bf2eda6edbfcbefd0f34
    Pass fences with buffers from SurfaceTextureClient
    
    Change-Id: I09b49433788d01e8b2b3684bb4d0112be29538d3
    Return fence to client in dequeuBuffer
    
    Change-Id: Ic19750793ad993f0e85391f3cabd743ba565d4c9
    Transfer HWC release fences to BufferQueue
    
    After a HWC set, each SurfaceFlinger Layer retrieves the release fence
    HWC returned and gives it to the layer's SurfaceTexture. The
    SurfaceTexture accumulates the fences into a merged fence until the
    next updateTexImage, then passes the merged fence to the BufferQueue
    in releaseBuffer.
    
    In a follow-on change, BufferQueue will return the fence along with
    the buffer slot in dequeueBuffer. For now, dequeueBuffer waits for the
    fence to signal before returning.
    
    The releaseFence default value for BufferQueue::releaseBuffer() is
    temporary to avoid transient build breaks with a multi-project
    checkin. It'll disappear in the next change.
    
    Change-Id: Iaa9a0d5775235585d9cbf453d3a64623d08013d9
    libui: add the Fence class
    
    This change adds the Fence class to libui for to wrap the libsync
    functionality.
    
    Change-Id: I93a31baeee608b93c14da807a32013dabf783f84
    DO NOT MERGE GraphicBufferAllocator: make frees async
    
    This change makes GraphicBufferAllocator::free queue a job to another thread to
    perform the actual free operation.  This prevents potentially slow free
    operations from blocking rendering.
    
    Bug: 7675940
    Change-Id: Id61099d66bb4c3949d04184e0d7f192ac18076b4
    [3171580] don't automatically log GraphicBuffer allocation failures
    
    some of these failures are not fatal and even expected in some cases
    so they should not emit a dump in the log in those cases.
    
    Change-Id: Idcfa252e3bfa9d74e27fe4ad8f8623aa01aa9c5e
    when a zero dimension buffer is allocated, turn the allocation into
    a 1x1 buffer instead of Nx1 (or 1xN)
    
    Change-Id: I27eeb15e83e13002dd9405f4e52b54f7dffc0fe7
    fix [2545826] calling into gralloc with external lock held
    
    Change-Id: I2d0e017382404c684c768a0dd0423d574213f10a
    eclair snapshot
    fix [2167050] glTexImage2D code path buggy in SurfaceFlinger
    
    When EGLImage extension is not available, SurfaceFlinger will fallback to using
    glTexImage2D and glTexSubImage2D instead, which requires 50% more memory and an
    extra copy. However this code path has never been exercised and had some bugs
    which this patch fix.
    
    Mainly the scale factor wasn't computed right when falling back on glDrawElements.
    We also fallback to this mode of operation if a buffer doesn't have the adequate
    usage bits for EGLImage usage.
    
    This changes only code that is currently not executed. Some refactoring was needed to
    keep the change clean. This doesn't change anything functionaly.
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    split-up Client.h out of SurfaceFlinger.h
    
    Change-Id: I1993bf23e417163749d886283563a93d50b361b4
    PermissionCache caches permission checks
    
    This is intended to absorb the cost of the IPC
    to the permission controller.
    Cached permission checks cost about 3us, while
    full blown ones are two orders of magnitude slower.
    
    CAVEAT: PermissionCache can only handle system
    permissions safely for now, because the cache is
    not purged upon global permission changes.
    
    Change-Id: I8b8a5e71e191e3c01e8f792f253c379190eee62e
    Some hardening of isolated processes by restricting access to services.
    
    Services now must explicitly opt in to being accessed by isolated
    processes.  Currently only the activity manager and surface flinger
    allow this.  Activity manager is needed so that we can actually
    bring up the process; SurfaceFlinger is needed to be able to get the
    display information for creating the Configuration.  The SurfaceFlinger
    should be safe because the app doesn't have access to the window
    manager so can't actually get a surface to do anything with.
    
    The activity manager now protects most of its entry points against
    isolated processes.
    
    Change-Id: I0dad8cb2c873575c4c7659c3c2a7eda8e98f46b0
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Allow META* macros outside of the framework
    
    The META* macros are useful outside of the framework
    for other systems implementing Binder interfaces, but
    they depend upon the android namespace. This includes
    the appropriate namespace operations, which should be
    sane even in that android namespace.
    
    Change-Id: If600156c65191f51f487d0ee301d9f9f532b263d
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    feat[parcel]: to support std string
    
    both reading and writing
    make sure Parcel handles 0-sized LightFlatenables
    
    Change-Id: Ib30a1c0228f8a938abaa0c7c8a6ba32ffd971121
    improve [un]marshalling of non-binder objects
    
    this change introduces a new class LightFlattenable<> which is
    a protocol to flatten simple objects that don't require
    binders or file descriptors; the benefit of this protocol is that
    it doesn't require the objects to have a virtual table and give us
    a consitant way of doing this.
    
    we also introduce an implementation of this protocol for
    POD structures, LightFlattenablePod<>.
    
    Parcel has been update to handle this protocol automatically.
    
    Sensor, Rect, Point and Region now use this new protocol.
    
    Change-Id: Icb3ce7fa1d785249eb666f39c2129f2fc143ea4a
    Fix a leak in Parcel::writeBlob.
    
    Was mistakenly assuming that Parcel::writeFileDescriptor took
    ownership of the fd that was passed in.  It does not!
    Added some comments and a default parameter to allow the caller
    to specify whether it wishes the Parcel to take ownership.
    
    Bug: 5563374
    Change-Id: I5a12f51d582bf246ce90133cce7690bb9bca93f6
    Fix a leak in Parcel::writeBlob.
    
    Was mistakenly assuming that Parcel::writeFileDescriptor took
    ownership of the fd that was passed in.  It does not!
    Added some comments and a default parameter to allow the caller
    to specify whether it wishes the Parcel to take ownership.
    
    Bug: 5563374
    Change-Id: I5a12f51d582bf246ce90133cce7690bb9bca93f6
    Fix handling of "allow fds" state.
    
    Didn't take into account nesting of bundles.  Boo.
    
    Change-Id: Ic8cf21ad8d6f4938a3e105128624c9d162310d01
    Transfer large bitmaps using ashmem.
    Bug: 5224703
    
    Change-Id: If385a66adf4c6179a0bb49c0e6d09a9567e23808
    Add mechanism for Parcel to not allow FDs to be written to it.
    
    This is to help implement issue #5224703.
    
    Change-Id: I026a5890495537d15b57fe61227a640aac806d46
    Revert "Transfer large bitmaps using ashmem. Bug: 5224703"
    
    This reverts commit 56c58f66b97d22fe7e7de1f7d9548bcbe1973029
    
    This CL was causing the browser to crash when adding bookmarks, visiting the bookmarks page, and sharing pages (see bug http://b/issue?id=5369231
    Revert "Transfer large bitmaps using ashmem. Bug: 5224703"
    
    This reverts commit 56c58f66b97d22fe7e7de1f7d9548bcbe1973029
    
    This CL was causing the browser to crash when adding bookmarks, visiting the bookmarks page, and sharing pages (see bug http://b/issue?id=5369231
    Transfer large bitmaps using ashmem.
    Bug: 5224703
    
    Change-Id: Ic7481dd9f173986f085a8bbdcc59bbe9830d7a44
    Parcel::appendFrom({const } Parcel *parcel, size_t, size_t)
    
    As far as I can tell "parcel" isn't actually modified by the implementation.
    
    Change-Id: Ib806eefdc13c97b932773e1dc9ca3a4aad4422b2
    Replace several IPCThreadState::get() lookups with one.
    
    Also, make StrictMode's ThreadLocal final.
    
    Change-Id: I08d400ed254fa67bb7a3dae1227f205a54c00df0
    More StrictMode work, keeping Binder & BlockGuard's thread-locals in-sync.
    
    Change-Id: Ia67cabcc17a73a0f15907ffea683d06bc41b90e5
    Add Parcel::readExceptionCode() and Parcel::writeNoException()
    
    Add native Parcel methods analogous to the Java versions.
    
    Currently, these don't do much, but upcoming StrictMode work changes
    the RPC calling conventions in some cases, so it's important that
    everybody uses these consistently, rather than having a lot of code
    trying to parse RPC responses out of Parcels themselves.
    
    As a summary, the current convention that Java Binder services use is
    to prepend the reply Parcel with an int32 signaling the exception
    status:
    
         0: no exception
         -1: Security exception
         -2: Bad Parcelable
         -3: ...
         -4: ...
         -5: ...
    
    ... followed by Parceled String if the exception code is non-zero.
    
    With an upcoming change, it'll be the case that a response Parcel can,
    non-exceptionally return rich data in the header, and also return data
    to the caller.  The important thing to note in this new case is that
    the first int32 in the reply parcel *will not be zero*, so anybody
    manually checking for it with reply.readInt32() will get false
    negative failures.
    
    Short summary: If you're calling into a Java service and manually
    checking the exception status with reply.readInt32(), change it to
    reply.readExceptionCode().
    
    Change-Id: I23f9a0e53a8cfbbd9759242cfde16723641afe04
    Start of work on passing around StrictMode policy over Binder calls.
    
    This is (intendend to be) a no-op change.
    
    At this stage, Binder RPCs just have an additional uint32 passed around
    in the header, right before the interface name.  But nothing is actually
    done with them yet.  That value should right now always be 0.
    
    This now boots and seems to work.
    
    Change-Id: I135b7c84f07575e6b9717fef2424d301a450df7b
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    donut snapshot
    bring the native_handle stuff back from master_gl
    move libbinder's header files under includes/binder
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@127101
    Initial Contribution
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    MemoryHeapBase: Save and binderize the offset
    
    The offset that is used in the creation of the MemoryHeapBase must be saved, so
    that it can be used to recreate the Heap when an IMemory object is passed
    across process boundary through the binder.
    
    Change-Id: Ie618fb5c0718e6711f55ed9235616fd801e648dc
    Signed-off-by: Anu Sundararajan <sanuradha@ti.com>
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    fix [2599939] "cannot play video" after open/close a video player a dozen of times
    
    get rid off the MAP_ONCE flag is MemoryHeapBase (as well as it's functionality),
    this feature should not be used anymore.
    
    the software renderer was incorrectly using the default ctor which set MAP_ONCE,
    causing the leak. the software renderer itself is incorrectly used while coming
    back from sleep.
    
    Change-Id: I123621f8d140550b864f352bbcd8a5729db12b57
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    No longer need "original calling uid".
    
    Change-Id: Ifc4a89dd088609a5a8553f6ac6553174e09e8222
    Multi-user - 1st major checkin
    
    Switching activity stacks
    Cache ContentProvider per user
    Long-press power to switch users (on phone)
    
    Added ServiceMap for separating services by user
    Launch PendingIntents on the correct user's uid
    Fix task switching from Recents list
    AppWidgetService is mostly working.
    
    Commands added to pm and am to allow creating and switching profiles.
    
    Change-Id: I15810e8cfbe50a04bd3323a7ef5a8ff4230870ed
    Framework-side support for Dalvik "isSensitiveThread" hook.
    
    Used in lock contention stats.
    
    Bug: 3226270
    Change-Id: Ie6f58d130a29079a59bdefad40b80304d9bc3623
    Don't propagate StrictMode over one-way Binder calls.
    
    This was causing stack stitching problems where a one-way call with
    violations followed by a two-way call without violations was getting
    the previous one-way call's violation stack stitched on to the second
    caller's stack.
    
    The solution is a little more indirect than I would've liked
    (preserving the binder's onTransact flags until enforceInterface) but
    was seemingly necessary to work without changing the AIDL compiler.
    It should also be sufficiently cheap, since no new calls to
    thread-local IPCThreadState lookups were required.  The additional
    work is just same-thread getter/setters on the existing
    IPCThreadState.
    
    Change-Id: I4b6db1d445c56e868e6d0d7be3ba6849f4ef23ae
    Start of work on passing around StrictMode policy over Binder calls.
    
    This is (intendend to be) a no-op change.
    
    At this stage, Binder RPCs just have an additional uint32 passed around
    in the header, right before the interface name.  But nothing is actually
    done with them yet.  That value should right now always be 0.
    
    This now boots and seems to work.
    
    Change-Id: I135b7c84f07575e6b9717fef2424d301a450df7b
    Propagate background scheduling class across processes.
    
    This is a very simply implementation: upon receiving an IPC, if the handling
    thread is at a background priority (the driver will have taken care of
    propagating this from the calling thread), then stick it in to the background
    scheduling group.  Plus an API to turn this off for the process, which is
    used by the system process.
    
    This also pulls some of the code for managing scheduling classes out of
    the Process JNI wrappers and in to some convenience methods in thread.h.
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add callback hack to find out when to reload system properties.
    
    Every IBinder object can accept a new transaction to tell it that
    it might want to reload system properties, and in the process
    anyone can register a callback to be executed when this happens.
    
    Use this to reload the trace property.
    
    This is very much ONLY for debugging.
    
    Change-Id: I55c67c46f8f3fa9073bef0dfaab4577ed1d47eb4
    Binder linkage no longer depends on JNI objrefs as persistent tokens
    
    There are two areas that have changed to eliminate the assumption that
    local jobject references are both canonical and persistent:
    
    1. JavaBBinderHolder no longer holds onto and reuses it parent object
    reference per se.  Since the underlying JavaBBinder object holds a
    real global ref, this was redundant anyway.  Now, for purposes of its
    transient need to perform JNI operations, it simply uses the current
    jobject ref(s) passed during method invocation, and no longer attempts
    to hold these refs beyond the scope of a single invocation.
    
    2. Binder obituaries no longer assume that a jobject reference to a
    recipient will always compare == as a 32-bit value with any future
    reference to the same object.  The implementation now asks Dalvik
    whether object references match.
    
    This amended patch fixes the earlier bug around races between
    remote binder death cleanup and local explicit unregistration of
    VM-side death recipients.
    
    Bug 2090115
    
    Change-Id: I70bd788a80ea953632b1f466f385ab6b78ef2913
    Revert "Binder linkage no longer depends on JNI objrefs as persistent tokens"
    
    This reverts commit c2d55dd89743c8a38deb809f3cdf1ad2d1dbac2b.
    Revert "Binder linkage no longer depends on JNI objrefs as persistent tokens"
    
    This reverts commit c2d55dd89743c8a38deb809f3cdf1ad2d1dbac2b.
    Binder linkage no longer depends on JNI objrefs as persistent tokens
    
    There are two areas that have changed to eliminate the assumption that
    local jobject references are both canonical and persistent:
    
    1. JavaBBinderHolder no longer holds onto and reuses it parent object
    reference per se.  Since the underlying JavaBBinder object holds a
    real global ref, this was redundant anyway.  Now, for purposes of its
    transient need to perform JNI operations, it simply uses the current
    jobject ref(s) passed during method invocation, and no longer attempts
    to hold these refs beyond the scope of a single invocation.
    
    2. Binder obituaries no longer assume that a jobject reference to a
    recipient will always compare == as a 32-bit value with any future
    reference to the same object.  The implementation now asks Dalvik
    whether object references match.
    
    Bug 2090115
    
    Change-Id: If62edd554d0a9fbb2d2977b0cbf8ad7cc8e2e68d
    Propagate background scheduling class across processes.
    
    This is a very simply implementation: upon receiving an IPC, if the handling
    thread is at a background priority (the driver will have taken care of
    propagating this from the calling thread), then stick it in to the background
    scheduling group.  Plus an API to turn this off for the process, which is
    used by the system process.
    
    This also pulls some of the code for managing scheduling classes out of
    the Process JNI wrappers and in to some convenience methods in thread.h.
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    add set thread count
    
    Change-Id: I70f02908d8362a465eb8a2a24356f6989847f7ba
    Eliminate single-process mode.
    Bug: 5010576
    
    Change-Id: Id450dc83efed4897d1e4ff451530fed14457aace
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Simplify the MemoryDealer implementation
    
    At some point the implementation became complicated because of
    SurfaceFlinger's special needs, since we are now relying on gralloc
    we can go back to much simpler MemoryDealer.
    
    Removed HeapInterface and AllocatorInterface, since those don't need
    to be paramterized anymore. Merged SimpleMemory and Allocation.
    Made SimplisticAllocator non virtual.
    
    Removed MemoryDealer flags (READ_ONLY, PAGE_ALIGNED)
    
    Removed a lot of unneeded code.
    eclair snapshot
    move libbinder's header files under includes/binder
    a brand new MessageQueue for SurfaceFlinger.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    added     static void publishAndJoinThreadPoolEx(const char *postfix = NULL)
    to support multiple zbs instance
    SF doesn't need more than a few binder threads
    
    Change-Id: Ic4659fb81f9990cc7caf84a496a8ae659a1d16a9
    Some hardening of isolated processes by restricting access to services.
    
    Services now must explicitly opt in to being accessed by isolated
    processes.  Currently only the activity manager and surface flinger
    allow this.  Activity manager is needed so that we can actually
    bring up the process; SurfaceFlinger is needed to be able to get the
    display information for creating the Configuration.  The SurfaceFlinger
    should be safe because the app doesn't have access to the window
    manager so can't actually get a surface to do anything with.
    
    The activity manager now protects most of its entry points against
    isolated processes.
    
    Change-Id: I0dad8cb2c873575c4c7659c3c2a7eda8e98f46b0
    added BinderService<> template to help creating native binder services
    
    Change-Id: Id980899d2647b56479f8a27c89eaa949f9209dfe
    Make static versions of libutils and libbinder.
    
    Fix some small static-initialization-order issues (and a static-
    initializers-missing issue) that result from doing so.  The static
    libraries don't actually get used for anything real at the moment --
    they're used for perf tests of bug 2660235.
    
    Bug: 2660235
    Change-Id: Iee2f38f79cc93b395e8d0a5a144ed92461f5ada0
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    fix a crasher when running out of memory
    
    MemoryHeapBase::getBase() returns MAP_FAILED in case or
    OOM, not null which is what SF was checking against.
    
    This addresses one of the issues of bug 7230543.
    
    Bug: 7230543
    Change-Id: I763a88f64a2f9ff75eb139cfbaf9a1a9746c5577
    MemoryHeapBase: Save and binderize the offset
    
    The offset that is used in the creation of the MemoryHeapBase must be saved, so
    that it can be used to recreate the Heap when an IMemory object is passed
    across process boundary through the binder.
    
    Change-Id: Ie618fb5c0718e6711f55ed9235616fd801e648dc
    Signed-off-by: Anu Sundararajan <sanuradha@ti.com>
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    fix [2599939] "cannot play video" after open/close a video player a dozen of times
    
    get rid off the MAP_ONCE flag is MemoryHeapBase (as well as it's functionality),
    this feature should not be used anymore.
    
    the software renderer was incorrectly using the default ctor which set MAP_ONCE,
    causing the leak. the software renderer itself is incorrectly used while coming
    back from sleep.
    
    Change-Id: I123621f8d140550b864f352bbcd8a5729db12b57
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    Move services/powermanager from frameworks/base to frameworks/native
    
    Move services/powermanager into frameworks/native so audioflinger can
    use it.  Note that this is not the same as a PowerManagerService,
    which is part of systemserver and handles turning the screen on and
    off, etc.  This is just a binder interface to allow taking wakelocks.
    
    Change-Id: I6b6a8b41cdbad17e826fda45aab5f059f22fc64e
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Move services/powermanager from frameworks/base to frameworks/native
    
    Move services/powermanager into frameworks/native so audioflinger can
    use it.  Note that this is not the same as a PowerManagerService,
    which is part of systemserver and handles turning the screen on and
    off, etc.  This is just a binder interface to allow taking wakelocks.
    
    Change-Id: I6b6a8b41cdbad17e826fda45aab5f059f22fc64e
    as a debug option SrufaceFlinger can now connect to DDMS
    
    this is disabled by default. To enable:
      setprop debug.sf.ddms 1
    
    this debug option requires to restart SurfaceFlinger
    
    Change-Id: Ic2f8050b29911b55bcd21721648b6978700c277d
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    Remove frameworks/base/im since these stuff are only used by IM app
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    Remove some #ifdef HAVE_ANDROID_OS that were needed for the simulator build
    
    Change-Id: I13d9f251f86c05ae5405f37adbf6b8e9660935ba
    Signed-off-by: Mike Lockwood <lockwood@android.com>
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    Remove some #ifdef HAVE_ANDROID_OS that were needed for the simulator build
    
    Change-Id: I13d9f251f86c05ae5405f37adbf6b8e9660935ba
    Signed-off-by: Mike Lockwood <lockwood@android.com>
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    Remove some #ifdef HAVE_ANDROID_OS that were needed for the simulator build
    
    Change-Id: I13d9f251f86c05ae5405f37adbf6b8e9660935ba
    Signed-off-by: Mike Lockwood <lockwood@android.com>
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    Add ASSIST keycode.
    
    Bug: 6594275
    Change-Id: I032b055207d16bfff93ee8a350c0dc52b9102926
    Add Japanese specific key codes
    
    These keys are specific to Japanese hardware keyboard which can be
    used by input method.
    
    Patch ported from AOSP, with the addition of KANA.
    
    Change-Id: I1474f0eb8971ed5d632822b1f9825c426f4817eb
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    Add support for "-rtl" in resources
    
    Change-Id: I0aaf10caf7b6a6d9e76b67dcabf01e4267b407bb
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    Include stack traces for certain native processes in bugreport.
    
    Bug: 6615693
    Change-Id: I64c3b3ce0bba62d9c332a795f7d979fb753dc27b
    move dumpstate and dumpsys from frameworks/base to frameworks/native
    
    Change-Id: I8a5318022ce5cd3e7c8055f21fe5da74639aa6c0
    Include stack traces for certain native processes in bugreport.
    
    Bug: 6615693
    Change-Id: I64c3b3ce0bba62d9c332a795f7d979fb753dc27b
    move dumpstate and dumpsys from frameworks/base to frameworks/native
    
    Change-Id: I8a5318022ce5cd3e7c8055f21fe5da74639aa6c0
    bugreport: Add /proc/interrupts dump
    
    Bug: 7301178
    
    Change-Id: Ifad3b981ac904d4637d69dfc223d5bb2c9d80bda
    Signed-off-by: Dmitry Shmidt <dimitrysh@google.com>
    bugreport: Add wlan FW counters dump for bcmdhd
    
    Bug: 7494877
    
    Change-Id: I4d24dbcf7596777ec02ab1312c2ab996ba7688f1
    Signed-off-by: Dmitry Shmidt <dimitrysh@google.com>
    dumpstate: add kernel memory fragmentation unusable index
    
    Dump /d/extfrag/unusable_index in bugreports.  It shows the
    percentage of memory in each zone that is not available for
    allocations for each order.
    
    Change-Id: I2af6680cb609887ea7b3d6107d1aa88bd0206b52
    Include Global table in bugreports.
    
    Bug: 7257648
    Change-Id: I84c7230fd115cf9d7269bc5367026b52cbcc86ac
    Allow disable of dumpstate vibrate
    
    Change-Id: I747b757f4b5e2d6a472b7b2a19f8c1ca8a4b7fdd
    add /d/sync to dumpstate
    
    Change-Id: I24f8f3e0420c2198ae3981fc067fb660898655e8
    Include stack traces for certain native processes in bugreport.
    
    Bug: 6615693
    Change-Id: I64c3b3ce0bba62d9c332a795f7d979fb753dc27b
    dumpstate: handle old style "adb bugreport"
    
    When "adb bugreport" was run on previous adb releases, it
    called "adb shell dumpstate". In later versions of Android,
    this was changed to "adb shell bugreport", which starts
    the dumpstate service.
    
    Modify the dumpstate command so that it calls bugreport
    when it's not running as root. This allows both
    "adb shell dumpstate" and "adb shell bugreport" to have
    the exact same output.
    
    Bug: 6391938
    Change-Id: Ia32bb9ebc579db3bee7caa0fe66dc3f124d60a12
    dumpstate: Add kernel wakeup sources info
    
    Change-Id: I0f95afd6815c1403d8400a18ef3cd19d936d4601
    Dump packages.xml as root.
    
    Bug: 6501151
    Change-Id: Ied638bdbe9ed6fbf749a44de8ac1f9d4167829c1
    dumpstate: collect xtables based iface stats, update iptables info.
    
    The newer kernels now have /proc/net/xt_qtaguid/iface_stat_fmt.
    Add the extra iptables output and remove ip6tables for nat which doesn't
    exist.
    
    Change-Id: I819c707b337a707ca0acd87d9ab38cd68ca0f36c
    Ignore SIGPIPE is some of the tools used via bugreport
    
     adb bugreport > b & sleep 5; kill $?
    will show that a bunch of tools will SIGPIPE when trying to output data
    which is normal.
    We don't have a way on linux (bsd yes), to set NOSIGPIPE on the file desc
    passed down via fork/exec.
    
    Bug: 6447319
    Change-Id: I25b30a823addcff89d252f162d0a07035d4fdd3f
    Add sdcard_r group to dumpstate.
    
    Bug: 6321962
    Change-Id: I318cd88493396f3d8adb5d4d0fc7a12ee40ba737
    Add sdcard_r group to dumpstate.
    
    Bug: 6321962
    Change-Id: I318cd88493396f3d8adb5d4d0fc7a12ee40ba737
    move dumpstate and dumpsys from frameworks/base to frameworks/native
    
    Change-Id: I8a5318022ce5cd3e7c8055f21fe5da74639aa6c0
    Use a named constant rather than a magic number.
    
    Change-Id: I86e8c91c6f5628df3eec38faf28598cc8cef2ea3
    Add stack dump from drmserver process to bugreports
    
    This would be helpful tracking down ANR issues in drmserver
    
    o related-to-bug: 7132419
    
    Change-Id: I7eceaa0c29af26bd0092110be6bddf8f4c063545
    Include stack traces for certain native processes in bugreport.
    
    Bug: 6615693
    Change-Id: I64c3b3ce0bba62d9c332a795f7d979fb753dc27b
    Ensure that /data/anr/traces.txt is world-writable
    
    The umask changed for init. We have to force /data/anr to be world
    readble and /data/anr/traces.txt to be world writable so dalvik
    processes can write to it.
    
    Hopefully this is a short term change while we investigate tightening
    up these permissions.
    
    Bug: 6300296
    Change-Id: Iacb4c9f1bc69d2ac679697f9cf9a52694f888489
    dumpstate: don't follow symlinks when creating /data/anr/traces.txt
    
    Make Android more robust against symlink attacks when /data/anr
    is world-writable.
    
    Bug: 5614000
    Change-Id: I9a7e4c4ec9aa4300ac30a968db0dcd276f364ab6
    Ensure that /data/anr/traces.txt is world-writable
    
    The umask changed for init. We have to force /data/anr to be world
    readble and /data/anr/traces.txt to be world writable so dalvik
    processes can write to it.
    
    Hopefully this is a short term change while we investigate tightening
    up these permissions.
    
    Bug: 6300296
    Change-Id: Iacb4c9f1bc69d2ac679697f9cf9a52694f888489
    move dumpstate and dumpsys from frameworks/base to frameworks/native
    
    Change-Id: I8a5318022ce5cd3e7c8055f21fe5da74639aa6c0
    feat[parcel]: to support std string
    
    both reading and writing
    move dumpstate and dumpsys from frameworks/base to frameworks/native
    
    Change-Id: I8a5318022ce5cd3e7c8055f21fe5da74639aa6c0
    merge libsurfaceflinger_client into libgui
    
    this is the first step in unifying surfacetexture and surface.
    for this reason the header files were not moved, as most of them
    will eventually go away.
    
    NOTE: currently we keep libsurfaceflinger_client.so as an empty
    library to workaround prebuilt binaries wrongly linking against
    it.
    
    Change-Id: I130f0de2428e8579033dc41394d093f4e1431a00
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    move dumpstate and dumpsys from frameworks/base to frameworks/native
    
    Change-Id: I8a5318022ce5cd3e7c8055f21fe5da74639aa6c0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    move dumpstate and dumpsys from frameworks/base to frameworks/native
    
    Change-Id: I8a5318022ce5cd3e7c8055f21fe5da74639aa6c0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Ignore SIGPIPE is some of the tools used via bugreport
    
     adb bugreport > b & sleep 5; kill $?
    will show that a bunch of tools will SIGPIPE when trying to output data
    which is normal.
    We don't have a way on linux (bsd yes), to set NOSIGPIPE on the file desc
    passed down via fork/exec.
    
    Bug: 6447319
    Change-Id: I25b30a823addcff89d252f162d0a07035d4fdd3f
    move dumpstate and dumpsys from frameworks/base to frameworks/native
    
    Change-Id: I8a5318022ce5cd3e7c8055f21fe5da74639aa6c0
    Add android.hardware.camera.any feature to camera permissions.
    
    Bug: 6847310
    Change-Id: I9283932a7c211cd08b3b9fe6a93d8f219e6c9767
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add android.hardware.camera.any feature to camera permissions.
    
    Bug: 6847310
    Change-Id: I9283932a7c211cd08b3b9fe6a93d8f219e6c9767
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add android.hardware.camera.any feature to camera permissions.
    
    Bug: 6847310
    Change-Id: I9283932a7c211cd08b3b9fe6a93d8f219e6c9767
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add android.hardware.camera.any feature to camera permissions.
    
    Bug: 6847310
    Change-Id: I9283932a7c211cd08b3b9fe6a93d8f219e6c9767
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    add com.android.nfc_extras to native/ for pdk.
    
    Change-Id: Ife40ac33241878814f5d9e027e43cd176c57fb56
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Move com.nxp.mifare to frameworks/native.
    
    Change-Id: I4dbec41cbf062334af8d66780859736f0ee5dab3
    add com.android.nfc_extras to native/ for pdk.
    
    Change-Id: Ife40ac33241878814f5d9e027e43cd176c57fb56
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    feat[parcel]: to support std string
    
    both reading and writing
    Move services/powermanager from frameworks/base to frameworks/native
    
    Move services/powermanager into frameworks/native so audioflinger can
    use it.  Note that this is not the same as a PowerManagerService,
    which is part of systemserver and handles turning the screen on and
    off, etc.  This is just a binder interface to allow taking wakelocks.
    
    Change-Id: I6b6a8b41cdbad17e826fda45aab5f059f22fc64e
    eclair snapshot
    update most gl tests to use EGLUtils
    donut snapshot
    Remove opengl tests from tests build
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Code drop from //branches/cupcake/...@124589
    Use new PowerManager API.
    
    Change-Id: I66165d9954e2d1da9204216382a05a873f1393f4
    Move services/powermanager from frameworks/base to frameworks/native
    
    Move services/powermanager into frameworks/native so audioflinger can
    use it.  Note that this is not the same as a PowerManagerService,
    which is part of systemserver and handles turning the screen on and
    off, etc.  This is just a binder interface to allow taking wakelocks.
    
    Change-Id: I6b6a8b41cdbad17e826fda45aab5f059f22fc64e
    Utils: Fix a bug in the linear transformation code.
    
    Hand merge from ics-aah
    
    > Utils: Fix a bug in the linear transformation code.
    >
    > Fix a bug where an incorrect result would be computed if you used the
    > linear transformation code to do a reverse transformation (from B's
    > domain into A's domain) when the scaler fraction was negative.
    >
    > Change-Id: I8e5f109314d235a177ab41f65d3c4cd08cff78be
    > Signed-off-by: John Grossman <johngro@google.com>
    
    Change-Id: Id90e18f685c61c1a89fd91c32adcf01363b3e8f3
    Signed-off-by: John Grossman <johngro@google.com>
    Add a linear transform library to libutils
    
    Change-Id: Icdec5a6bebd9d8f24b3f335f8ec8b09a5810a774
    Add a very simple helper function to log slow functions.
    
    Change-Id: I2e2e072206d02b572a330dd25857c161b5b563bf
    add Looper.cpp to build for linux host to use in CTS audio
    
    Change-Id: I59cfe30fd48fcba0bb949033f4d2aef5ce9916e4
    frameworks/native: link host libutils against external/zlib
    
    Fix the SDK build by statically linking host libutils against libz
    from external/zlib.
    
    Change-Id: Id6805d3c9071e6fa0559024336642b5386cf3c52
    frameworks/native: move Zip* from libandroidfw to libutils
    
    ZipUtils is needed by build/tools, move it from libandroidfw
    (frameworks/base) to libutils (frameworks/native).
    
    Change-Id: Ib8c41134ccdec6d6aa8d49860f8dddef49a24783
    Add a simple work queue abstraction.
    
    Makes it easy to schedule a bunch of work to happen in parallel.
    
    Change-Id: Id9c0e52fc8b6d78d2b9ed4c2ee47abce0a01775c
    Added rules to build f/n/libs/utils in 64-bit: lib64utils.a
    
    It's needed to build four shared libraries in 64-bit for 64-bit
    emulator with "-gpu on"
      lib64OpenglRender.so
      lib64EGL_translator.so
      lib64GLES_CM_translator.so
      lib64GLES_V2_translator.so
    
    Change-Id: Ia6c05b23df1e9cd9e7f2e94e4cd5bde4be5d336b
    libutils: add a system-wide tracing utility
    
    This change adds some utility functionality for doing userland tracing
    into the kernel trace log.
    
    Change-Id: Id0a8cee9ea515b1d8765afd1cecf472a88b4b9e8
    frameworks/base refactoring
    
    create the new libandroidfw from parts of libui and libutils
    
    Change-Id: I1584995616fff5d527a2aba63921b682a6194d58
    Thread::getTid returns pid_t gettid() after run
    
    This is needed when the parent or any other thread besides the child
    needs access to the child's kernel tid.
    
    Change-Id: Ib148505913eb78314cfd76657c30d7b20663dffd
    Add a basic hashtable data structure, with tests!
    
    The basic hashtable is intended to be used to support a variety
    of different datastructures such as map, set, multimap,
    multiset, linkedmap, generationcache, etc.
    
    Consequently its interface is fairly primitive.
    
    The basic hashtable supports copy-on-write style functionality
    using SharedBuffer.
    
    The change introduces a simple generic function in TypeHelpers for
    specifying hash functions.  The idea is to add template
    specializations of hash_type<T> next to the relevant data structures
    such as String8, String16, sp<T>, etc.
    
    Change-Id: I2c479229e9d4527b4fbfe3b8b04776a2fd32c973
    Use libcorkscrew for stack unwinding.
    
    Change-Id: Iee1ee5a2018ab8cfc1ce12ec2a124809245eaa02
    add -ldl to host executables
    
    This fixes the build on Linux when RefBase is compiled with reference tracking
    enabled.
    
    Change-Id: I3e931e0b463ce836f6fdb30c37068d77144631a3
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    may fix the build
    
    Change-Id: I065b1e6652f0e800ba5674a6d9aa954c3ac6c790
    Remove unimplemented memory pool.
    
    dlmalloc does such a great job that we don't need a pool anyways.
    
    Change-Id: I105b28c4a5c491543959190c7c0a9de75a5b8052
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    Add a linear transform library to libutils
    
    Change-Id: Icdec5a6bebd9d8f24b3f335f8ec8b09a5810a774
    libutils: add a binary blob cache implementation.
    
    This change adds an implementation of a cache that stores key/value
    pairs of unstructured binary blobs.
    
    Change-Id: Idd01fdabedfa3aed6d359a6efb0592967af52651
    Change assets to use 64-bit API
    
    The asset system and supporting libraries were using off_t instead of
    off64_t to access files larger than 2GB (32-bit signed). This change
    replaces all off_t with off64_t and lseek64.
    
    There is a new utils/Compat.h added for Mac OS compatibility.
    
    Also fixed some size-related compiler warnings.
    
    Bug: 3205336
    Change-Id: I9097b3cb7a602e811fe52f245939d8975da55e9e
    Support non-orientation aware keyboards and other devices.
    
    Fixed a bug with dpad keys on external keyboards being rotated
    according to the display orientation by adding a new input device
    configuration property called "keyboard.orientationAware".
    
    Added a mechanism for overriding the key layout and key character
    map in the input device configuration file using the new
    "keyboard.layout" and "keyboard.characterMap" properties.
    
    Also added "trackball.orientationAware", "touch.orientationAware" and
    "touch.deviceType" configuration properties.
    
    Rewrote the configuration property reading code in native code
    so that it can be used by EventHub and other components.
    
    Added basic support for installable idc, kl, and kcm files
    in /data/system/devices.  However, there is no provision for
    copying files there yet.
    
    Disabled long-press character pickers on full keyboards so that
    key repeating works as expected.
    
    Change-Id: I1bd9f0c3d344421db444e7d271eb09bc8bab4791
    Added support for full PC-style keyboards.
    
    BREAKING CHANGE: Redesigned the key character map format to
    accomodate full keyboards with more comprehensive suite of modifiers.
    Old key character maps will not work anymore and must be updated.
    The new format is plain text only and it not compiled to a binary
    file (so the "kcm" tool will be removed in a subsequent check-in).
    
    Added FULL keyboard type to support full PC-style keyboards.
    
    Added SPECIAL_FUNCTION keyboard type to support special function
    keypads that do not have any printable keys suitable for typing
    and only have keys like HOME and POWER
    
    Added a special VIRTUAL_KEYBOARD device id convention that maps
    to a virtual keyboard with a fixed known layout.  This is designed
    to work around issues injecting input events on devices whose
    built-in keyboard does not have a useful key character map (ie.
    when the built-in keyboard is a special function keyboard only.)
    
    Modified several places where events were being synthesized
    to use the virtual keyboard.
    
    Removed support for the "qwerty" default layout.
    The new default layout is "Generic".  For the most part "qwerty"
    was being used as a backstop in case the built-in keyboard did
    not have a key character map (probably because it was a special
    function keypad) and the framework needed to be able to inject
    key events anyways.  The latter issue is resolved by using the
    special VIRTUAL_KEYBOARD device instead of BUILT_IN_KEYBOARD.
    
    Added the concept of a key modifier behavior so that
    MetaKeyKeyListener can distinguish between keyboards that use
    chorded vs. toggled modifiers.
    
    Wrote more robust key layout and key character map parsers
    to enable support for new keyboard features and user installable
    key maps.
    
    Fixed a bug in InputReader generating key ups when keys
    are released out of sequence.
    
    Updated tons of documentation.
    
    Currently QwertyKeyListener is being used for full keyboards
    with autotext and capitalization disabled.  This mostly works
    but causes some problems with character pickers, etc.
    These issues will be resolved in subsequent changes.
    
    Change-Id: Ica48f6097a551141c215bc0d2c6f7b3fb634d354
    Split UTF functions from String8/16
    
    Split out all the UTF-8/16/32 handling code from String8/16 to its own
    file to allow better reuse of code.
    
    Change-Id: If9ce63920edc75472c38da4adce0d13cda9ad2f7
    Replace epoll() with poll() and rename PollLoop to Looper.
    
    As part of this change, consolidated and cleaned up the Looper API so
    that there are fewer distinctions between the NDK and non-NDK declarations
    (no need for two callback types, etc.).
    
    Removed the dependence on specific constants from sys/poll.h such as
    POLLIN.  Instead looper.h defines events like LOOPER_EVENT_INPUT for
    the events that it supports.  That should help make any future
    under-the-hood implementation changes easier.
    
    Fixed a couple of compiler warnings along the way.
    
    Change-Id: I449a7ec780bf061bdd325452f823673e2b39b6ae
    Support streaming of compressed assets > 1 megabyte
    
    Compressed assets larger than one megabyte are now decompressed on demand
    rather than being decompressed in their entirety and held in memory.  Reading
    the data in order is relatively efficient, as is seeking forward in the stream.
    Seeking backwards is supported, but requires reprocessing the compressed data
    from the beginning, so is very inefficient.
    
    In addition, the size limit on compressed assets has been eliminated.
    
    Change-Id: I6e68247957e6c53e7e8ba70d12764695f1723bad
    Add initial gamepad support.
    
    Change-Id: I0439648f6eb5405f200e4223c915eb3a418b32b9
    Add OBB file helper class
    
    ObbFile is a binary blob that will be used in packaging large files
    with smaller APKs.
    
    Change-Id: Ib1594346cfa2f49113de6565af77c24efbd89d63
    Remove PollLoop from host build.
    
    We can't build (and we don't need) PollLoop in the SDK on all platforms.
    
    Change-Id: I3b0f327bbb8bc58b9b8630b0161cf360403fea68
    Native input dispatch rewrite work in progress.
    
    The old dispatch mechanism has been left in place and continues to
    be used by default for now.  To enable native input dispatch,
    edit the ENABLE_NATIVE_DISPATCH constant in WindowManagerPolicy.
    
    Includes part of the new input event NDK API.  Some details TBD.
    
    To wire up input dispatch, as the ViewRoot adds a window to the
    window session it receives an InputChannel object as an output
    argument.  The InputChannel encapsulates the file descriptors for a
    shared memory region and two pipe end-points.  The ViewRoot then
    provides the InputChannel to the InputQueue.  Behind the
    scenes, InputQueue simply attaches handlers to the native PollLoop object
    that underlies the MessageQueue.  This way MessageQueue doesn't need
    to know anything about input dispatch per-se, it just exposes (in native
    code) a PollLoop that other components can use to monitor file descriptor
    state changes.
    
    There can be zero or more targets for any given input event.  Each
    input target is specified by its input channel and some parameters
    including flags, an X/Y coordinate offset, and the dispatch timeout.
    An input target can request either synchronous dispatch (for foreground apps)
    or asynchronous dispatch (fire-and-forget for wallpapers and "outside"
    targets).  Currently, finding the appropriate input targets for an event
    requires a call back into the WindowManagerServer from native code.
    In the future this will be refactored to avoid most of these callbacks
    except as required to handle pending focus transitions.
    
    End-to-end event dispatch mostly works!
    
    To do: event injection, rate limiting, ANRs, testing, optimization, etc.
    
    Change-Id: I8c36b2b9e0a2d27392040ecda0f51b636456de25
    Make static versions of libutils and libbinder.
    
    Fix some small static-initialization-order issues (and a static-
    initializers-missing issue) that result from doing so.  The static
    libraries don't actually get used for anything real at the moment --
    they're used for perf tests of bug 2660235.
    
    Bug: 2660235
    Change-Id: Iee2f38f79cc93b395e8d0a5a144ed92461f5ada0
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    Totally remove Unicode.cpp and rely on ICU
    
    Unicode.cpp used a packed data table for character data that essentially
    duplicated ICU's functionality.
    
    Change-Id: Ia68fe4ac94e89dc68d9a3f45f33f6e648a5500b7
    eclair snapshot
    donut snapshot
    implement Mutex and Condition with pthread instead of calling futex directly.
    
    internally pthread uses futex. the implementation consists of simple inlines
    there are no implementation files anymore.
    get rid of LogSocket which wasn't even implemented (enabled)
    break dependency on utils/ZipEntry.h and utils/ZipFile.h, get rid of inet_address.h and Socket.h which were not used
    rename string_array.h to StringArray.h and move the implementation from the header file to a new cpp file.
    
    StringArray is used in two places in framework/base and in the Sim. Ideally we should get rid of it and use Vector<String8> instead of creating new code.
    rename a few files to camel-case, add copyright notices
    get rid of TimerProbe which is never used
    get rid of sleepForInterval() which didn't seem to be used anywhere in the source tree. Also get rid of ported.h which seem to be used only (possibly) in the sim. moved the implementation there.
    Sim-only files move, part 2/2.
    
    Move Pipe and executablepath from libutils to the simulator, since nothing
    else uses them.
    checkpoint: split libutils into libutils + libbinder
    donut snapshot
    Implement the C++ class to write the backed up file data.
    Add some C++ code to do raw files for backup
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Fixed several 64-bit porting issues
    
    1. Use "%zu" instead of "%d" for size_t in printf
    2. Variable precision specifier (eg. "%.*s") in printf should be of type int.
       (iov_len is size_t which is 64-bit when compiled with -m64)
    3. Use PRId64 instead of "%lld" to print variables of type int64_t
    
    Change-Id: I2be40a6514b5dffa0038d62b9bccc3401b8756e6
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Rename LOG_ASSERT to ALOG_ASSERT
    
    Change-Id: Ie2c7ea6560656d65bad791a61996174c75677517
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename LOG_ASSERT to ALOG_ASSERT  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157519
    
    Bug: 5449033
    Change-Id: I8ceb2dba1b031a0fd68d15d146960d9ced62bbf3
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    fix a memory leak and memory corruption in RefBase
    
    we would leak a weakref_impl if a RefBase was never incWeak()'ed.
    there was also a dangling pointer that would cause memory corruption
    and double-delete when a custom destroyer was used to delay the
    execution of ~RefBase.
    
    it turns out that the custom destroyer feature caused most of the
    problems, so it's now gone. The only client was SurfaceFlinger
    who now handles things on its own.
    
    RefBase is essentially back its "gingerbread" state, but the
    code was slightly cleaned-up.
    
    Bug: 5151207, 5084978
    Change-Id: Id6ef1d707f96d96366f75068f77b30e0ce2722a5
    revert surfaceflinger leak fix as it uncovered a crasher on xoom (DO NOT MERGE)
    
    This reverts commit 52a43990880b27808bcf562afcc4209d34728e6e.
    
    Change-Id: I1856a48f863b051395b8091ddfd1e01292fa1b1e
    Revert "revert surfaceflinger leak fix as it uncovered a crasher on xoom"
    
    This reverts commit af6edba59e250adbdfa5b3c3be134f70d8c38a16.
    
    Change-Id: I7793d3ca8a4d20a2b188364f47854328ab5f586d
    revert surfaceflinger leak fix as it uncovered a crasher on xoom
    
    Bug: 4600244
    Change-Id: Ia68ebf0f243a051ff6a21b3863e3e5d259bbf7ac
    fix RefBase so it retains binary-compatibility with gingerbread
    
    Bug: 4595257
    Change-Id: I0d5e10f497e3f39868bff58f6ded510c38b44b12
    fix RefBase so it retains binary-compatibility with gingerbread (DO NOT MERGE)
    
    Bug: 4595257
    Change-Id: I4773cf4fe59b2509db0ed733739eb6961d473b25
    fix RefBase so it retains binary-compatibility with gingerbread (DO NOT MERGE)
    
    Bug: 4595257
    Change-Id: I1db83149107d7dab1f0b7e73c684e0ff82e17e62
    Fix a leak in RefBase
    
    this bug was introduced recently. it caused RefBase's weakref_impl
    structure to be leaked for every RefBase object (about 20 bytes).
    
    Change-Id: Id85e749ba04521199555dd701198edd097c313d4
    Fix a leak in RefBase (DO NOT MERGE)
    
    this bug was introduced recently. it caused RefBase's weakref_impl
    structure to be leaked for every RefBase object (about 20 bytes).
    
    Change-Id: Ia9b155fbfa643ef72cfb8129e96260a3b806a78c
    merge various SF fixes from gingerbread to honeycomb-mr2 (DO NOT MERGE)
    
      Fix a race that could cause GL commands to be executed from the wrong thread.
      RefBase subclasses can now decide how they want to be destroyed.
      Fix a race in SurfaceFlinger that could cause layers to be leaked forever.
      Fix a race-condtion in SurfaceFlinger that could lead to a crash.
    
    initial cherry-pick:
    resolved conflicts for merge of b9783b49 to honeycomb-plus-aosp
    
    Change-Id: I2a335e03fff219e35c18a7b0089b3a11d636576f
    RefBase subclasses can now decide how they want to be destroyed.
    
    This adds a destroy() virtual on RefBase which
    sublasses can implement. destroy() is called
    in lieu of the destructor whenthe last strong
    ref goes away.
    
    Bug: 4483050
    Change-Id: I8cbf6044a6fd3f01043a45592b5a60fa1e5fade2
    Call RefBase::destroy() when OBJECT_LIFETIME_* is not the default
    
    Change-Id: Ifb2069e095dba57b7d97e9f2d942fd85fa975f58
    RefBase subclasses can now decide how they want to be destroyed.
    
    This adds a destroy() virtual on RefBase which
    sublasses can implement. destroy() is called
    in lieu of the destructor whenthe last strong
    ref goes away.
    libutils: Fix an improper const-cast in RefBase
    
    Under Fedora 15 Beta, gcc 4.6.0 warns:
    
      frameworks/base/libs/utils/RefBase.cpp: In member function
        ‘void android::RefBase::weakref_type::trackMe(bool, bool)’:
      frameworks/base/libs/utils/RefBase.cpp:483:67: error: passing
        ‘const android::RefBase::weakref_impl’ as ‘this’ argument of
        ‘void android::RefBase::weakref_impl::trackMe(bool, bool)’
        discards qualifiers [-fpermissive]
    
    trackMe is not a const function, so don't use const in the static_cast
    to a weakref_impl pointer.
    
    Change-Id: I3c9ba73eb127985f5f54197ffecf2939c50f632c
    Fix sp<> conversion operator / constructor
    
    some of the conversion operators were not using the proper
    pointer type when calling incStrong/decStrong, usually it
    has no bad consequences, but for some implementation
    of the ref-counted object it could lead to recording the wrong
    owner id.
    
    Change-Id: If574b9069b8a4cf6e0911a992c8f095aba799995
    Fix some issues with RefBase debugging.
    
    First slipt sp<> out of RefBase into StrongPointer.h so it can be reused
    more easily and to make it clear that it doesn't require RefBase.
    
    Note: the rest of the change only affects the system when DEBUG_REFS is enabled.
    
    The main problem we fix here is that the owner id associated with each
    reference could get out of date when a sp<> or wp<> was moved, for
    instance when they're used in a Vector< >.
    
    We fix this issue by calling into RefBase::moveReferences from
    a template specialization for sp<TYPE> and wp<TYPE> of the
    type helpers. RefBase::moveReferences() has then a chance to
    update the owner ids.
    
    There is a little bit of trickery to implement this generically in
    RefBase, where we need to use a templatized functor that can turn
    a sp<TYPE>* casted to a void* into a RefBase*.
    
    Introduced a new debug option DEBUG_REFS_FATAL_SANITY_CHECKS
    currently set to 0 by default as there seem to be an issue
    with sp<ANativeWindow> which trips the sanity checks.
    
    Change-Id: I4825b21c8ec47d4a0ef35d760760ae0c9cdfbd7f
    Remove RefBase.h dependency on TextOutput.h
    
    Change-Id: I72cd6b98ef82b4868fe1c8ec87862cf43fb4ee73
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Support looper callbacks based on smart pointers.
    
    Bug: 6559630
    Change-Id: I5a667f219f431838638acefbc9fa6afa610971bd
    Delete unused poll() code.
    
    We don't need this code anymore and it is just in the way.
    
    Bug: 6559630
    Change-Id: I1dc9decf85d5ea1feab159c2985da6c20baffdd5
    Remove unused statistics code.
    
    Bug: 6559630
    Change-Id: Iacdf4bb4c1c125c09305cbd8cb443c7c80cfc010
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Initial checkin of spot presentation for touchpad gestures. (DO NOT MERGE)
    
    Added a new PointerIcon API (hidden for now) for loading
    pointer icons.
    
    Fixed a starvation problem in the native Looper's sendMessage
    implementation which caused new messages to be posted ahead
    of old messages sent with sendMessageDelayed.
    
    Redesigned the touch pad gestures to be defined in terms of
    more fluid finger / spot movements.  The objective is to reinforce
    the natural mapping between fingers and spots which means there
    must not be any discontinuities in spot motion relative to
    the fingers.
    
    Removed the SpotController stub and folded its responsibilities
    into PointerController.
    
    Change-Id: Ib647dbd7a57a7f30dd9c6e2c260df51d7bbdd18e
    Refactor how timeouts are calculated. (DO NOT MERGE)
    
    Added a timeout mechanism to EventHub and InputReader so that
    InputMappers can request timeouts to perform delayed processing of
    input when needed.
    
    Change-Id: I89c1171c9326c6e413042e3ee13aa9f7f1fc0454
    Initial checkin of spot presentation for touchpad gestures.
    
    Added a new PointerIcon API (hidden for now) for loading
    pointer icons.
    
    Fixed a starvation problem in the native Looper's sendMessage
    implementation which caused new messages to be posted ahead
    of old messages sent with sendMessageDelayed.
    
    Redesigned the touch pad gestures to be defined in terms of
    more fluid finger / spot movements.  The objective is to reinforce
    the natural mapping between fingers and spots which means there
    must not be any discontinuities in spot motion relative to
    the fingers.
    
    Removed the SpotController stub and folded its responsibilities
    into PointerController.
    
    Change-Id: I5126b1e69d95252fda7f2a684c9287e239a57163
    Refactor how timeouts are calculated.
    
    Added a timeout mechanism to EventHub and InputReader so that
    InputMappers can request timeouts to perform delayed processing of
    input when needed.
    
    Change-Id: Iec2045baaf4e67690b15eef3c09a58d5cac76897
    Fade out the mouse pointer after inactivity or other events.
    
    Fades out the mouse pointer:
    - after 15 seconds of inactivity normally
    - after 3 seconds of inactivity in lights out mode
    - after a non-modifier key down
    - after a touch down
    
    Extended the native Looper to support enqueuing time delayed
    messages.  This is used by the PointerController to control
    pointer fade timing.
    
    Change-Id: I87792fea7dbe2d9376c78cf354fe3189a484d9da
    Switch Looper back to using poll() instead of epoll().
    
    Added a couple of micro-optimizations to avoid calling wake() unnecessarily
    and reduce JNI overhead slightly.
    
    Fixed a minor issue where we were not clearing the "next" field of Messages
    returned by the MessageQueue so the Message would hold on to its successor
    and potentially prevent the GC from collecting it if the message were leaked
    somehow.
    
    Change-Id: I488d29417ce0cdd7d0e447cda76ec978ef7f811c
    Looper: use pthread_once for TLS key initialization.
    
    Also fix a Valgrind complaint by zeroing out the entire epoll event
    struct since otherwise the data field union would be partly
    uninitialized (but not in a harmful way).
    
    Change-Id: I2091ce517e87fcad7c9caf90e2c5e4854a7ca465
    Reduce lock thrashing in native Looper.
    
    In the common case, there is nothing interesting happening on the native
    Looper besides occasional wake ups.  There is no point grabbing the
    semaphore then.
    
    Change-Id: Ib5c426d0e158dfa37891b7ff5537b6f833592fad
    Ensure input dispatcher and native looper handles EINTR.
    
    Change-Id: I0a42db5f273b9bfe4ab174e4ee65d5d852f9f6bc
    Replace epoll() with poll() and rename PollLoop to Looper.
    
    As part of this change, consolidated and cleaned up the Looper API so
    that there are fewer distinctions between the NDK and non-NDK declarations
    (no need for two callback types, etc.).
    
    Removed the dependence on specific constants from sys/poll.h such as
    POLLIN.  Instead looper.h defines events like LOOPER_EVENT_INPUT for
    the events that it supports.  That should help make any future
    under-the-hood implementation changes easier.
    
    Fixed a couple of compiler warnings along the way.
    
    Change-Id: I449a7ec780bf061bdd325452f823673e2b39b6ae
    Fixed several 64-bit porting issues
    
    1. Use "%zu" instead of "%d" for size_t in printf
    2. Variable precision specifier (eg. "%.*s") in printf should be of type int.
       (iov_len is size_t which is 64-bit when compiled with -m64)
    3. Use PRId64 instead of "%lld" to print variables of type int64_t
    
    Change-Id: I2be40a6514b5dffa0038d62b9bccc3401b8756e6
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)
    
    Change-Id: I26f76452ac49e2890b14d133c065493d8df0fb4a
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: Ib08fe86d23db91ee153e9f91a99a35c42b9208ea
    Resurrect verbose binder logging
    
    Updated the command name lists, and masked off the additional bits in
    the command word when doing the name lookup.
    
    Made descriptor values easier to grep for and consistent with kernel
    output (i.e. decimal rather than hex).  Attempt to show transaction
    descriptors as such (they're in a union with a pointer).
    
    Also, the writeLines() function in Static was using a no-op
    logging call to write an iovec.  It looks like all callers are using
    N=1, so I just added a log for the first string.
    
    Bug 5155269
    
    Change-Id: I417b8d77da3eb6ee1d2069ba94047210f75738bc
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fixed several 64-bit porting issues
    
    1. Use "%zu" instead of "%d" for size_t in printf
    2. Variable precision specifier (eg. "%.*s") in printf should be of type int.
       (iov_len is size_t which is 64-bit when compiled with -m64)
    3. Use PRId64 instead of "%lld" to print variables of type int64_t
    
    Change-Id: I2be40a6514b5dffa0038d62b9bccc3401b8756e6
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    BlobCache: implement cache serialization
    
    This change adds serialization and deserialization functionality to
    BlobCache, conforming to the Flattenable interface.
    
    Change-Id: Ibc99cb1c3d015f363d57d0713eabccec07ff975e
    BlobCache: remove the mutex locking
    
    This change removes the mutex from the BlobCache class.  The caller must
    be responsible for thread synchronization in order to properly implement
    the Flattenable interface, which is coming soon.  Otherwise would be the
    potential for the cache contents to change between the call to the
    getFlattenedSize and flatten methods.  Because the caller must do this
    synchronization anyway there's no reason to also some synchronization
    inside BlobCache.
    
    Change-Id: Ie1f4f6f82b78744f46a41ce863cac0cad276a20e
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Use rand() for MinGW
    
    The version of MinGW we use doesn't have nrand48() which is really lame,
    but we need to use libutils in the Windows SDK.
    
    Change-Id: If854c03dbf02bc29e79f49e4539f08c2bf057517
    libutils: add a binary blob cache implementation.
    
    This change adds an implementation of a cache that stores key/value
    pairs of unstructured binary blobs.
    
    Change-Id: Idd01fdabedfa3aed6d359a6efb0592967af52651
    Add elapsedRealtimeNano(), and use CLOCK_BOOTTIME where possible.
    
    Change-Id: I4231c8ca32663e6e2cb5b7c126d091f837373807
    Rename (IF_)LOG() to (IF_)ALOG()
    
    Change-Id: If49c81a2793182771c6160fbca93905daa6f44c1
    Rename (IF_)LOG() to (IF_)ALOG()  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/141576
    
    Bug: 5449033
    Change-Id: I42575e7c29cf1c0f465c357a5c97ab118df6f473
    Refactor how timeouts are calculated. (DO NOT MERGE)
    
    Added a timeout mechanism to EventHub and InputReader so that
    InputMappers can request timeouts to perform delayed processing of
    input when needed.
    
    Change-Id: I89c1171c9326c6e413042e3ee13aa9f7f1fc0454
    Refactor how timeouts are calculated.
    
    Added a timeout mechanism to EventHub and InputReader so that
    InputMappers can request timeouts to perform delayed processing of
    input when needed.
    
    Change-Id: Iec2045baaf4e67690b15eef3c09a58d5cac76897
    eclair snapshot
    get rid of sleepForInterval() which didn't seem to be used anywhere in the source tree. Also get rid of ported.h which seem to be used only (possibly) in the sim. moved the implementation there.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Revert "Fix regression in CursorWindow.copyStingToBuffer."
    
    This reverts commit d0ff68da6a606602235fb8749473999e3d1bde53.
    Fix regression in CursorWindow.copyStingToBuffer.
    Bug: 5332296
    
    Change-Id: Iff9eed786f0a8293b6156f883a66a322ddad5e99
    Split UTF functions from String8/16
    
    Split out all the UTF-8/16/32 handling code from String8/16 to its own
    file to allow better reuse of code.
    
    Change-Id: If9ce63920edc75472c38da4adce0d13cda9ad2f7
    Totally remove Unicode.cpp and rely on ICU
    
    Unicode.cpp used a packed data table for character data that essentially
    duplicated ICU's functionality.
    
    Change-Id: Ia68fe4ac94e89dc68d9a3f45f33f6e648a5500b7
    Excise code from Unicode.cpp that was dead
    
    Remove some utility functions for discovering character data
    that ICU probably took over a while ago.
    
    Change-Id: I97abe4de2f51eb2bf48679941258bc501184c3dc
    donut snapshot
    rename a few files to camel-case, add copyright notices
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    eclair snapshot
    rename string_array.h to StringArray.h and move the implementation from the header file to a new cpp file.
    
    StringArray is used in two places in framework/base and in the Sim. Ideally we should get rid of it and use Vector<String8> instead of creating new code.
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Add initial support for cursor-based pointing devices.
    
    Some parts stubbed out but you can plug in a mouse and move
    a green cursor around to interact with the UI.
    
    Change-Id: I80d597a7f11d3bd92041890f74b3c77326975e6e
    Support non-orientation aware keyboards and other devices.
    
    Fixed a bug with dpad keys on external keyboards being rotated
    according to the display orientation by adding a new input device
    configuration property called "keyboard.orientationAware".
    
    Added a mechanism for overriding the key layout and key character
    map in the input device configuration file using the new
    "keyboard.layout" and "keyboard.characterMap" properties.
    
    Also added "trackball.orientationAware", "touch.orientationAware" and
    "touch.deviceType" configuration properties.
    
    Rewrote the configuration property reading code in native code
    so that it can be used by EventHub and other components.
    
    Added basic support for installable idc, kl, and kcm files
    in /data/system/devices.  However, there is no provision for
    copying files there yet.
    
    Disabled long-press character pickers on full keyboards so that
    key repeating works as expected.
    
    Change-Id: I1bd9f0c3d344421db444e7d271eb09bc8bab4791
    Add TEMP_FAILURE_RETRY around open and write calls
    
    Bug: 7330849
    Change-Id: I9aef3c3d3a248c3eea7ca060124ad6decaa6b4da
    libutils cleanup: remove unused or seldom used code from misc.{cpp|h}
    
    Change-Id: I72206f16619d81887e3b85603494563faab3b445
    Fixed 64-bit porting issues
    
    Fixed two issues about casting between int and pointer which
    cause compilation error in 64-bit mode (eg. for 64-bit emulator)
    
    Change-Id: I5ca9a933a239db73e56d6f27de05aa42bd06a650
    frameworks/native: move Zip* from libandroidfw to libutils
    
    ZipUtils is needed by build/tools, move it from libandroidfw
    (frameworks/base) to libutils (frameworks/native).
    
    Change-Id: Ib8c41134ccdec6d6aa8d49860f8dddef49a24783
    frameworks/base refactoring
    
    create the new libandroidfw from parts of libui and libutils
    
    Change-Id: I1584995616fff5d527a2aba63921b682a6194d58
    frameworks/base refactoring.
    
    step 2: move libutils headers to their new home: androidfw
    
    Change-Id: I14624ba23db92a81f2cb929f104386e1fab293ef
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)
    
    Change-Id: I26f76452ac49e2890b14d133c065493d8df0fb4a
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: Ib08fe86d23db91ee153e9f91a99a35c42b9208ea
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Change assets to use 64-bit API
    
    The asset system and supporting libraries were using off_t instead of
    off64_t to access files larger than 2GB (32-bit signed). This change
    replaces all off_t with off64_t and lseek64.
    
    There is a new utils/Compat.h added for Mac OS compatibility.
    
    Also fixed some size-related compiler warnings.
    
    Bug: 3205336
    Change-Id: I9097b3cb7a602e811fe52f245939d8975da55e9e
    Initialized check in ZipFileRO::findEntryByName
    
    If a ZipFileRO object is uninitialized, the hash table will not have
    been initialized. This condition wasn't checked in findEntryByName.
    
    Bug: 3121109
    Change-Id: Ib696e0e7e0cb4dd0fb2e456d6a847e5e8f4fe14e
    MinGW/Cygwin requires open() in O_BINARY mode.
    
    Alsso printf %zd is not supported on MinGW/Cygwin.
    
    Change-Id: I03811dabb46e2b05dd1d8abcc0ff97b125c77d54
    Use pread() in ZipFileRO for Linux
    
    AssetManager instances are created by zygote and passed to all its
    children so that they don't have to individually open
    frameworks-res.apk. This creates a problem for determining the current
    file offset when using lseek() on those files, because you can't
    guarantee the cross-process locking of a mutex. Luckily, Linux
    implements pread() to get around this suckiness.
    
    The problem is that only Linux implements this, so we have to keep the
    old locking for use on host builds with aapt and friends. aapt doesn't
    have this same problem of sharing file descriptors across forked
    processes, so we can keep the local AutoMutex to protect accesses of
    those files.
    
    Change-Id: Ibe9f11499a53fe345f50fbaea438815ec0fd363e
    ZipFileRO: moar logging and wrap close
    
    There is apparently still a race upon reading the entry Local File
    Header that can't be tracked down, so move the LFH check inside the
    mutex-protected block so we can call lseek again to see where we are
    when we log an error.
    
    Also, close() can fail so use TEMP_FAILURE_RETRY on it so we don't
    unwittingly leak file descriptors when Mean Mr. EINTR comes a-knocking.
    
    Change-Id: I753abad0bd882fe28f7281c406fa76f64393ef4c
    Revert "Revert "Free created FileMap when uncompressing files""
    
    This revert reverts commit a19ef306bd0a257c67b50f5e0e669e9fe52b0889.
    Add locking around ZIP seeking
    
    Since we switched to seeking to the LFH to verify its existence instead
    of a huge mmap of the file, we have to guarantee that another seek
    doesn't happen before we finish our read on the LFH.
    
    Change-Id: If8135d9cb6f2f5cc4db734eafa4f6b5f6269c62a
    Revert "Free created FileMap when uncompressing files"
    
    This reverts commit 52b8235238fb4d8cf141020cc1ae33880929dc3f.
    
    munmap() on a region that overlaps something else (e.g, the ZIP Central
    Directory in this case) unmaps those other regions as well making the
    ZipFileRO class unhappy. Revert this for now until we can have FileMap
    deal with this craziness.
    Add debugging to ZipFileRO
    
    Some assets are failing to read from ZIP files. This adds a bit more
    debugging to figure out what's going on.
    
    Change-Id: Id90e10546c54c85069a34478fbc28bc2523bda5d
    Free created FileMap when uncompressing files
    
    Change-Id: Ice22c4ecb7c129b74bf60cd66ae79e110b017a4a
    Free scanBuf in ZipFileRO
    
    In the success case, the 65kB scanBuf was not freed!
    
    Also, get rid of annoying complaints about ssize_t from printf in error
    cases.
    
    Change-Id: If154ac19bf47637f898b4ec8c8e27c9a073a7b81
    ZipUtilsRO rewrite based on Dalvik Zip rewrite
    
    Change the way zip archives are handled.  This is necessary to deal with
    very large (~1GB) APK files, for which our current approach of mapping
    the entire file falls over.
    
    We now do the classic scavenger hunt for the End Of Central Directory
    magic on a buffer of data read from the file, instead of a memory-mapped
    section.  We use what we find to create a map that covers the Central
    Directory only.
    
    If the caller is interested in unpacking the file contents, we have to
    do an additional file read to discover the size of the Local File Header
    section so we can skip past it.
    
    This is based on Change I745fb15abb in the dalvik tree. Both
    implementations share a common ancestry, but the cost of unifying them
    outweighs the benefits of wrapping C calls.
    
    Change-Id: Iddacb50fe913917c2845708a530872d65fdbe620
    donut snapshot
    rename a few files to camel-case, add copyright notices
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Rename LOG_ASSERT to ALOG_ASSERT
    
    Change-Id: Ie2c7ea6560656d65bad791a61996174c75677517
    Rename LOG_ASSERT to ALOG_ASSERT  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157519
    
    Bug: 5449033
    Change-Id: I8ceb2dba1b031a0fd68d15d146960d9ced62bbf3
    Split UTF functions from String8/16
    
    Split out all the UTF-8/16/32 handling code from String8/16 to its own
    file to allow better reuse of code.
    
    Change-Id: If9ce63920edc75472c38da4adce0d13cda9ad2f7
    Optional use of UTF-8 strings in resource bundles
    
    Allows the use of UTF-8 for packing resources instead of the
    default of UTF-16 for Java. When strings are extracted from the
    ResStringPool, they are converted to UTF-16 and the result is
    cached for subsequent calls.
    
    When using aapt to package, add in the "-8" switch to pack the
    resources using UTF-8. This will result in the value, key, and
    type strings as well as the compiled XML string values taking
    significantly less space in the final application package in
    most scenarios.
    
    Change-Id: I129483f8b3d3b1c5869dced05cb525e494a6c83a
    auto import from //branches/cupcake/...@137873
    auto import from //depot/cupcake/@136594
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Workaround for add_tid_to_cgroup failed to write
    
    Bug: 6467109
    Change-Id: I6dff8e608d83c7a7c453c25c94ad100f113769b9
    Workaround for add_tid_to_cgroup failed to write
    
    Bug: 6467109
    Change-Id: I6dff8e608d83c7a7c453c25c94ad100f113769b9
    Scheduling group cleanup
    
    Remove C++ APIs androidSetThreadSchedulingGroup and
    androidGetThreadSchedulingGroup, and the ANDROID_TGROUP_* constants.
    
    Former callers of these should now use the C APIs set_sched_policy and
    get_sched_policy, and the SP_* constants.
    
    Note: debug.sys.noschedgroups is not supported by the C APIs,
    this needs to be discussed.
    
    Change-Id: I32bbfc539ef4090faf9ef0320380e8cca9eae07c
    Add a simple work queue abstraction.
    
    Makes it easy to schedule a bunch of work to happen in parallel.
    
    Change-Id: Id9c0e52fc8b6d78d2b9ed4c2ee47abce0a01775c
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOG() to (IF_)ALOG()
    
    Change-Id: If49c81a2793182771c6160fbca93905daa6f44c1
    Thread::getTid returns pid_t gettid() after run
    
    This is needed when the parent or any other thread besides the child
    needs access to the child's kernel tid.
    
    Change-Id: Ib148505913eb78314cfd76657c30d7b20663dffd
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOG() to (IF_)ALOG()  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/141576
    
    Bug: 5449033
    Change-Id: I42575e7c29cf1c0f465c357a5c97ab118df6f473
    Fix androidGetThreadPriority for non-pthread configurations.
    
    related-to-build
    
    Change-Id: Ic865af0865906f96fd615a56a030c8e3adaf13c4
    A new API "androidGetThreadPriority"
    
    Change-Id: I6baeead8c70460863343fd557250635fb1e6a170
    Add a call to pthread_attr_destroy to avoid potential memory leaks.
    
    Change-Id: Ib57efc3530e9793298190cc9cab19c9af54e11a7
    Add C++ thread API androidGetThreadSchedulingGroup
    
    This API is intended for applications that need to read a thread's
    scheduling group, while using the higher-level (C++) family of thread APIs.
    
    Change-Id: I5e58017f74c3989b20b5b1cc2bc4483c95720520
    Add Thread::join
    
    This new API will be used by applications that previously used the
    lower-level pthread APIs (including pthread_join).  Centralizing on the
    Thread class instead of pthread will permit additional functionality to
    be added later in only one location.
    
    Change-Id: I8460169ac9c61ac9f85752405ed54c94651058d7
    Thread ID zero for androidSetThreadSchedulingGroup
    
    Already implemented by androidSetThreadPriority but not documented
    
    Change-Id: I85302b17092952065f3f3a4214d8d8abdd465dbd
    Bug 4608375
    
    Update priority and policy together for audio threads
    
    Change-Id: Ib3b07b32586c222c4aacbf23414ae8b05db502be
    Remove redundant memory barrier
    
    pthread_create already includes the necessary memory barriers:
     - parent at pthread_create : pthread_mutex_unlock(start_mutex)
     - child at __thread_entry : pthread_mutex_lock(start_mutex)
    
    Add lock around uses of mThread.
    
    Added comments:
     - uses of mThread require lock
     - androidCreateRawThreadEtc returned ID is not safe for direct use from non-parent threads.
    
    Change-Id: I18cb296b41ddaf64cf127b57aab31154319b5970
    Bug 3362814 Fix SMP race in access to mRequestExit
    
    Also fix an unlikely SMP race in access to mHoldSelf on entry to _threadLoop.
    
    Change-Id: I6cbc0b94739c7dd5e77e8a5ba0da22cdc0b1a4db
    Clean up use of HAVE_ANDROID_OS
    
    HAVE_ANDROID_OS was defined as "1" for targets, but never defined as "0"
    for non-targets. Changing them to #ifdef should be safe and matches
    all the other uses of HAVE_ANDROID_OS throughout the system.
    
    Change-Id: I82257325a8ae5e4e4371ddfc4dbf51cea8ea0abb
    fix failing thread object run
    
    A previously exited Thread object refuses to run again, if the
    thread-id of the caller, conincides with the thread-id it previously
    used in the worker thread. Hence reset the previously used worker
    thread-id to -1 when it exits.
    
     Signed-off-by: Ritu Srivastava <rsrivast@sta.samsung.com>
    
    Change-Id: I873925c312a43ec8a16392b98cc959042ff6bfd2
    
    Signed-off-by: Madan Ankapura <mankapur@sta.samsung.com>
    Revert "libutils: Fix race condition in Thread::requestExitAndWait()"
    
    This change turned out to be unnecessary
    
    This reverts commit 4a7f412e1d932f46f6adf079df4d9ee7279bd795.
    libutils: Fix race condition in Thread::requestExitAndWait()
    
    Hold a reference to the thread in requestExitAndWait() so the
    condition variable it is waiting on will not be destroyed before
    its wait() call returns.
    
    Change-Id: If8b6cf84117203926a4180f43f0224469e92a500
    Signed-off-by: Mike Lockwood <lockwood@android.com>
    Fix issue 3302649.
    
    The cause of the problem is that AudioTrack::start() can fail if it is called from a newly created
    thread that has the same ID as the AudioTrack callback thread that has just been stopped and not yet exited.
    This is possible as the thread ID used by the Thread class is not the TID.
    
    The fix consists in clearing the thread ID before exiting the thread loop.
    
    Change-Id: I8b5f6a63feeaeb9a01267380e85f6f1456e7aa01
    Fix issue 3302649.
    
    The cause of the problem is that AudioTrack::start() can fail if it is called from a newly created
    thread that has the same ID as the AudioTrack callback thread that has just been stopped and not yet exited.
    This is possible as the thread ID used by the Thread class is not the TID.
    
    The fix consists in clearing the thread ID before exiting the thread loop.
    
    Change-Id: I66e679665c384403cb3ba2c31746f5de72d5836d
    Always set the scheduling group when starting a new thread.
    
    Change-Id: Ia33acf13fc3752707f3819928c36315e223fa1bd
    Hopefully fix the build.
    
    Change-Id: Id8cd92c0895c9939e1386ef488bd1309a3be3568
    Add system property to turn off scheduling groups.
    
    Do this:
    
    adb shell setprop debug.sys.noschedgroups 1
    
    Change-Id: I6e06a74205fd45ee1526ce71fe33944465d39984
    Maybe really fix windows build.
    Hopefully fix Windows build
    Propagate background scheduling class across processes.
    
    This is a very simply implementation: upon receiving an IPC, if the handling
    thread is at a background priority (the driver will have taken care of
    propagating this from the calling thread), then stick it in to the background
    scheduling group.  Plus an API to turn this off for the process, which is
    used by the system process.
    
    This also pulls some of the code for managing scheduling classes out of
    the Process JNI wrappers and in to some convenience methods in thread.h.
    eclair snapshot
    use broadcast() instead of signal() when signaling the condition-variable Thread::RequestExitAndWait() is waiting for
    
    we could have several thread waiting on the condition and they all need to wake-up.
    also added a debug "mTid" field in the class, which contains the tid of the thread (as opposed to pthread_t), this
    is useful when debugging under gdb for instance.
    Fix Win32 libutils to get a working SDK build.
    implement Mutex and Condition with pthread instead of calling futex directly.
    
    internally pthread uses futex. the implementation consists of simple inlines
    there are no implementation files anymore.
    auto import from //depot/cupcake/@136594
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@132589
    auto import from //depot/cupcake/@137055
    Initial Contribution
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Change assets to use 64-bit API
    
    The asset system and supporting libraries were using off_t instead of
    off64_t to access files larger than 2GB (32-bit signed). This change
    replaces all off_t with off64_t and lseek64.
    
    There is a new utils/Compat.h added for Mac OS compatibility.
    
    Also fixed some size-related compiler warnings.
    
    Bug: 3205336
    Change-Id: I9097b3cb7a602e811fe52f245939d8975da55e9e
    Improve support for external keyboards.
    
    Use Vendor ID, Product ID and optionally the Version to
    locate keymaps and configuration files for external devices.
    
    Moved virtual key definition parsing to native code so that
    EventHub can identify touch screens with virtual keys and load
    the appropriate key layout file.
    
    Cleaned up a lot of old code in EventHub.
    
    Fixed a regression in ViewRoot's fallback event handling.
    
    Fixed a minor bug in FileMap that caused it to try to munmap
    or close invalid handled when released if the attempt to map
    the file failed.
    
    Added a couple of new String8 conveniences for formatting strings.
    
    Modified Tokenizer to fall back to open+read when mmap fails since
    we can't mmap sysfs files as needed to open the virtual key
    definition files in /sys/board_properties/.
    
    Change-Id: I6ca5e5f9547619fd082ddac47e87ce185da69ee6
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    Remove frameworks/base/im since these stuff are only used by IM app
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    eclair snapshot
    some work to try to reduce the code size of some native libraries
    
    - make sure that all binder Bn classes define a ctor and dtor in their respective library.
      This avoids duplication of the ctor/dtor in libraries where these objects are instantiated.
      This is also cleaner, should we want these ctor/dtor to do something one day.
    
    - same change as above for some Bp classes and various other non-binder classes
    
    - moved the definition of CHECK_INTERFACE() in IInterface.h instead of having it everywhere.
    
    - improved the CHECK_INTERFACE() macro so it calls a single method in Parcel, instead of inlining its code everywhere
    
    - IBinder::getInterfaceDescriptor() now returns a "const String16&" instead of String16, which saves calls to String16 and ~String16
    
    - implemented a cache for BpBinder::getInterfaceDescriptor(), since this does an IPC. HOWEVER, this method never seems to be called.
      The cache makes BpBinder bigger, so we need to figure out if we need this method at all.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add a simple work queue abstraction.
    
    Makes it easy to schedule a bunch of work to happen in parallel.
    
    Change-Id: Id9c0e52fc8b6d78d2b9ed4c2ee47abce0a01775c
    Add a very simple helper function to log slow functions.
    
    Change-Id: I2e2e072206d02b572a330dd25857c161b5b563bf
    Refactored DummyConsumer
    
    DummyConsumer no longer uses a ProxyConsumerListener
    
    Change-Id: I0a99428b3f9dae82cb47d5da3589de77653f3d7c
    Added a DummyConsumer for use with BufferQueue.
    
    The DummyConsumer is a consumer that can connect to BufferQueue
    that does nothing.  It is required as BufferQueue checks
    if a consumer is connected.  Also fixes a bug where SurfaceTexture
    was reusing old texture slots.
    
    Bug: 6172739
    Change-Id: I5e7a118dd4d07807ba4c763200242b5ee7d3412b
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Use libcorkscrew to format the stack trace.
    
    Change-Id: I3a5439ada76bc77c2dd491eaed2272e16a811cc7
    Slight change to the unwinder API.
    
    Change-Id: I5424de76a21b74842e004e0281936b3f492d3c7a
    Use libcorkscrew for stack unwinding.
    
    Change-Id: Iee1ee5a2018ab8cfc1ce12ec2a124809245eaa02
    eclair snapshot
    some work to try to reduce the code size of some native libraries
    
    - make sure that all binder Bn classes define a ctor and dtor in their respective library.
      This avoids duplication of the ctor/dtor in libraries where these objects are instantiated.
      This is also cleaner, should we want these ctor/dtor to do something one day.
    
    - same change as above for some Bp classes and various other non-binder classes
    
    - moved the definition of CHECK_INTERFACE() in IInterface.h instead of having it everywhere.
    
    - improved the CHECK_INTERFACE() macro so it calls a single method in Parcel, instead of inlining its code everywhere
    
    - IBinder::getInterfaceDescriptor() now returns a "const String16&" instead of String16, which saves calls to String16 and ~String16
    
    - implemented a cache for BpBinder::getInterfaceDescriptor(), since this does an IPC. HOWEVER, this method never seems to be called.
      The cache makes BpBinder bigger, so we need to figure out if we need this method at all.
    auto import from //depot/cupcake/@136594
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    frameworks/native: move Zip* from libandroidfw to libutils
    
    ZipUtils is needed by build/tools, move it from libandroidfw
    (frameworks/base) to libutils (frameworks/native).
    
    Change-Id: Ib8c41134ccdec6d6aa8d49860f8dddef49a24783
    frameworks/base refactoring
    
    create the new libandroidfw from parts of libui and libutils
    
    Change-Id: I1584995616fff5d527a2aba63921b682a6194d58
    frameworks/base refactoring.
    
    step 2: move libutils headers to their new home: androidfw
    
    Change-Id: I14624ba23db92a81f2cb929f104386e1fab293ef
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    donut snapshot
    donut snapshot
    fix FILE* version of ZipUtils::inflateToBuffer
    
    This can't have ever worked; a successful fread() was returning 1
    instead of getSize.
    rename a few files to camel-case, add copyright notices
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add a basic hashtable data structure, with tests!
    
    The basic hashtable is intended to be used to support a variety
    of different datastructures such as map, set, multimap,
    multiset, linkedmap, generationcache, etc.
    
    Consequently its interface is fairly primitive.
    
    The basic hashtable supports copy-on-write style functionality
    using SharedBuffer.
    
    The change introduces a simple generic function in TypeHelpers for
    specifying hash functions.  The idea is to add template
    specializations of hash_type<T> next to the relevant data structures
    such as String8, String16, sp<T>, etc.
    
    Change-Id: I2c479229e9d4527b4fbfe3b8b04776a2fd32c973
    libutils cleanup: remove unused or seldom used code from misc.{cpp|h}
    
    Change-Id: I72206f16619d81887e3b85603494563faab3b445
    Add callback hack to find out when to reload system properties.
    
    Every IBinder object can accept a new transaction to tell it that
    it might want to reload system properties, and in the process
    anyone can register a callback to be executed when this happens.
    
    Use this to reload the trace property.
    
    This is very much ONLY for debugging.
    
    Change-Id: I55c67c46f8f3fa9073bef0dfaab4577ed1d47eb4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fixed several 64-bit porting issues
    
    1. Use "%zu" instead of "%d" for size_t in printf
    2. Variable precision specifier (eg. "%.*s") in printf should be of type int.
       (iov_len is size_t which is 64-bit when compiled with -m64)
    3. Use PRId64 instead of "%lld" to print variables of type int64_t
    
    Change-Id: I2be40a6514b5dffa0038d62b9bccc3401b8756e6
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Native input dispatch rewrite work in progress.
    
    The old dispatch mechanism has been left in place and continues to
    be used by default for now.  To enable native input dispatch,
    edit the ENABLE_NATIVE_DISPATCH constant in WindowManagerPolicy.
    
    Includes part of the new input event NDK API.  Some details TBD.
    
    To wire up input dispatch, as the ViewRoot adds a window to the
    window session it receives an InputChannel object as an output
    argument.  The InputChannel encapsulates the file descriptors for a
    shared memory region and two pipe end-points.  The ViewRoot then
    provides the InputChannel to the InputQueue.  Behind the
    scenes, InputQueue simply attaches handlers to the native PollLoop object
    that underlies the MessageQueue.  This way MessageQueue doesn't need
    to know anything about input dispatch per-se, it just exposes (in native
    code) a PollLoop that other components can use to monitor file descriptor
    state changes.
    
    There can be zero or more targets for any given input event.  Each
    input target is specified by its input channel and some parameters
    including flags, an X/Y coordinate offset, and the dispatch timeout.
    An input target can request either synchronous dispatch (for foreground apps)
    or asynchronous dispatch (fire-and-forget for wallpapers and "outside"
    targets).  Currently, finding the appropriate input targets for an event
    requires a call back into the WindowManagerServer from native code.
    In the future this will be refactored to avoid most of these callbacks
    except as required to handle pending focus transitions.
    
    End-to-end event dispatch mostly works!
    
    To do: event injection, rate limiting, ANRs, testing, optimization, etc.
    
    Change-Id: I8c36b2b9e0a2d27392040ecda0f51b636456de25
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Revert "Revert "put back the unused virtuals in Vector<>""
    
    This reverts commit 225c66a48cdc3acef21ee380dc134449749d3cb3
    
    Change-Id: If31a04b81052cbc7dd7bf237c07107c33066d03d
    minor SharedBuffer clean-up
    
    Change-Id: If38b7ce85806ae628c00f2c938de4e3f75142543
    Revert "put back the unused virtuals in Vector<>"
    
    This reverts commit 1648d4c13ba2eff3ea14cd87ee94028458a39f97.
    
    Bug: 6977192
    
    Change-Id: Idbb6b239aaed4fb1c054ce943f6ba06ede3492bb
    put back the unused virtuals in Vector<>
    
    some binaries are using these private APIs and broke
    (as they should!) with this change. Temporarily restore the
    virtuals to work around this.
    
    Bug: 6977550
    Change-Id: I7c37f24b16e4d586b89205c493db5169cf87e024
    improve Vector<> safety checks
    
    - make errors that will always cause a memory corruption always fatal
      (for eg: KeyedVector<>::editValue{For|At}() failure)
    - make other errors fatal in debug mode, those that can be caught by
      the caller.
    - fix typos
    
    Change-Id: I65cc7d81035c37ce2906fc4500c50e5d5b5c49eb
    fix a corruption in Vector<> when adding new items
    
    would happen when vectors are copied and new items is
    added in both vectors. we didn't duplicate the underlying
    storage when adding items in vectors.
    
    Bug: 6515797
    Change-Id: If544c07d96c05821e088d7f2c9b5736f7e306c31
    Rename LOG_ASSERT to ALOG_ASSERT
    
    Change-Id: Ie2c7ea6560656d65bad791a61996174c75677517
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename LOG_ASSERT to ALOG_ASSERT  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157519
    
    Bug: 5449033
    Change-Id: I8ceb2dba1b031a0fd68d15d146960d9ced62bbf3
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Minor code cleanups in vector.
    
    Fixed a potential bug where calling replaceAt with a reference to
    an existing element in the vector at the same index would cause
    the element to be destroyed while being copied to itself.
    
    Refactored the conditions in _grow and _shrink for clarity.
    The computations are exactly the same but I think it reads better
    this way.  In particular, the ssize_t variable 's' is gone: it didn't
    need to be signed anyways because its value could never be negative.
    
    Change-Id: If087841c15e6a87160eee874720c4a77eb0e99a6
    Replace Vector _grow/_shrink checks with assert.
    
    On review of the code, _grow and _shrink are checking for conditions
    that cannot happen and that don't even really make sense.  For
    example, if _shrink is called with where + amount > mCount then
    this is really bad, however the check only considered the case
    when where >= mCount and then it would arbitrarily choose a new
    value for where.  Huh?
    
    As it happens, the callers are correctly validating the
    arguments before passing them down to these methods so we can
    get rid of this code.
    
    Change-Id: I921852dba8997065bb0e9cac733e82028d14afcd
    Fix typo in an assert's log
    
    Change-Id: I94883a23a0a92eaf3e4976f942f747a2137499ac
    Even more native input dispatch work in progress.
    
    Added more tests.
    Fixed a regression in Vector.
    Fixed bugs in pointer tracking.
    Fixed a starvation issue in PollLoop when setting or removing callbacks.
    Fixed a couple of policy nits.
    
    Modified the internal representation of MotionEvent to be more
    efficient and more consistent.
    
    Added code to skip/cancel virtual key processing when there are multiple
    pointers down.  This helps to better disambiguate virtual key presses
    from stray touches (such as cheek presses).
    
    Change-Id: I2a7d2cce0195afb9125b23378baa94fd2fc6671c
    Native input dispatch rewrite work in progress.
    
    The old dispatch mechanism has been left in place and continues to
    be used by default for now.  To enable native input dispatch,
    edit the ENABLE_NATIVE_DISPATCH constant in WindowManagerPolicy.
    
    Includes part of the new input event NDK API.  Some details TBD.
    
    To wire up input dispatch, as the ViewRoot adds a window to the
    window session it receives an InputChannel object as an output
    argument.  The InputChannel encapsulates the file descriptors for a
    shared memory region and two pipe end-points.  The ViewRoot then
    provides the InputChannel to the InputQueue.  Behind the
    scenes, InputQueue simply attaches handlers to the native PollLoop object
    that underlies the MessageQueue.  This way MessageQueue doesn't need
    to know anything about input dispatch per-se, it just exposes (in native
    code) a PollLoop that other components can use to monitor file descriptor
    state changes.
    
    There can be zero or more targets for any given input event.  Each
    input target is specified by its input channel and some parameters
    including flags, an X/Y coordinate offset, and the dispatch timeout.
    An input target can request either synchronous dispatch (for foreground apps)
    or asynchronous dispatch (fire-and-forget for wallpapers and "outside"
    targets).  Currently, finding the appropriate input targets for an event
    requires a call back into the WindowManagerServer from native code.
    In the future this will be refactored to avoid most of these callbacks
    except as required to handle pending focus transitions.
    
    End-to-end event dispatch mostly works!
    
    To do: event injection, rate limiting, ANRs, testing, optimization, etc.
    
    Change-Id: I8c36b2b9e0a2d27392040ecda0f51b636456de25
    Revert "fix [2542425] memory leak during video recording"
    
    This reverts commit 544592e14f8d7643238e40ba9879727497900f35.
    fix [2542425] memory leak during video recording
    
    [Sorted|Keyed]Vector<TYPE> would leak their whole storage when resized
    from the end and TYPE had trivial dtor and copy operators.
    
    Change-Id: I8555bb1aa0863df72de27d67ae50e20706e90cf5
    fix [2542425] memory leak during video recording
    
    Vector::sort() is using _do_copy() incorrectly; _do_copy() calls the
    copy constructor, not the assignment operator, so we need to destroy
    the "destination" before copying the item.
    
    Change-Id: Iaeeac808fa5341a7d219edeba4aa63d44f31473c
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add a basic hashtable data structure, with tests!
    
    The basic hashtable is intended to be used to support a variety
    of different datastructures such as map, set, multimap,
    multiset, linkedmap, generationcache, etc.
    
    Consequently its interface is fairly primitive.
    
    The basic hashtable supports copy-on-write style functionality
    using SharedBuffer.
    
    The change introduces a simple generic function in TypeHelpers for
    specifying hash functions.  The idea is to add template
    specializations of hash_type<T> next to the relevant data structures
    such as String8, String16, sp<T>, etc.
    
    Change-Id: I2c479229e9d4527b4fbfe3b8b04776a2fd32c973
    Runtime resource overlay, iteration 1.
    
    Runtime resource overlay allows unmodified applications to appear
    as if they had been compiled with additional resources defined. See
    libs/utils/README for more information.
    
    This commit is the first iteration of runtime resource overlay. It
    provides the actual overlay modifications and loading of trusted overlay
    packages (ie residing in /vendor) targeting framework-res.apk.
    
    This commit loads exactly one overlay package. The overlay,
    if present, must target framework-res.apk and be located at
    /vendor/overlay/framework/framework-res.apk.
    
    Change-Id: If26ee7754813004a96c043dba37fbe99fa3919db
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Reduce emulator logspam
    
    The emulator doesn't support systrace, but we should point that out
    at most once per process.
    
    Bug 7436352
    
    Change-Id: I06b2c1ea0df6c02c11cd2496423c337f8d7c62a1
    Add callback hack to find out when to reload system properties.
    
    Every IBinder object can accept a new transaction to tell it that
    it might want to reload system properties, and in the process
    anyone can register a callback to be executed when this happens.
    
    Use this to reload the trace property.
    
    This is very much ONLY for debugging.
    
    Change-Id: I55c67c46f8f3fa9073bef0dfaab4577ed1d47eb4
    Change name of system property for traces.
    
    This allows the property to be changed from the settings UI.
    
    Change-Id: Ife7424b3549e5bbe51b6ad2fb8e5edde3a9fd608
    Add a log tag
    
    Change-Id: If30aa8536130cf6ff9918ce97c5e4e8651ae2fef
    Expose the set of enabled tags.
    
    This is used by the Java trace wrappers to avoid JNI overhead
    when trace tags are disabled.
    
    Also added a new tag for the input subsystem and view hierarchy.
    
    Change-Id: Ia04a507e42a37b1d3bbb19859e6c07a92f4fe9aa
    libutils: add a system-wide tracing utility
    
    This change adds some utility functionality for doing userland tracing
    into the kernel trace log.
    
    Change-Id: Id0a8cee9ea515b1d8765afd1cecf472a88b4b9e8
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Disable the use of clock_gettime for now.
    
    Bug: 7100774
    Change-Id: I6ede2a37a5d485134fe419b5dc766f70ae4af9d4
    Print warnings when backwards timestamps are detected.
    
    Bug: 7100774
    
    Change-Id: I752fd1680b32ce33d17d6042d6c82e27d7ba9dd2
    Add elapsedRealtimeNano(), and use CLOCK_BOOTTIME where possible.
    
    Change-Id: I4231c8ca32663e6e2cb5b7c126d091f837373807
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Clean up use of HAVE_ANDROID_OS
    
    HAVE_ANDROID_OS was defined as "1" for targets, but never defined as "0"
    for non-targets. Changing them to #ifdef should be safe and matches
    all the other uses of HAVE_ANDROID_OS throughout the system.
    
    Change-Id: I82257325a8ae5e4e4371ddfc4dbf51cea8ea0abb
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    frameworks/native: move Zip* from libandroidfw to libutils
    
    ZipUtils is needed by build/tools, move it from libandroidfw
    (frameworks/base) to libutils (frameworks/native).
    
    Change-Id: Ib8c41134ccdec6d6aa8d49860f8dddef49a24783
    frameworks/base refactoring
    
    create the new libandroidfw from parts of libui and libutils
    
    Change-Id: I1584995616fff5d527a2aba63921b682a6194d58
    frameworks/base refactoring.
    
    step 2: move libutils headers to their new home: androidfw
    
    Change-Id: I14624ba23db92a81f2cb929f104386e1fab293ef
    Change assets to use 64-bit API
    
    The asset system and supporting libraries were using off_t instead of
    off64_t to access files larger than 2GB (32-bit signed). This change
    replaces all off_t with off64_t and lseek64.
    
    There is a new utils/Compat.h added for Mac OS compatibility.
    
    Also fixed some size-related compiler warnings.
    
    Bug: 3205336
    Change-Id: I9097b3cb7a602e811fe52f245939d8975da55e9e
    ZipUtilsRO rewrite based on Dalvik Zip rewrite
    
    Change the way zip archives are handled.  This is necessary to deal with
    very large (~1GB) APK files, for which our current approach of mapping
    the entire file falls over.
    
    We now do the classic scavenger hunt for the End Of Central Directory
    magic on a buffer of data read from the file, instead of a memory-mapped
    section.  We use what we find to create a map that covers the Central
    Directory only.
    
    If the caller is interested in unpacking the file contents, we have to
    do an additional file read to discover the size of the Local File Header
    section so we can skip past it.
    
    This is based on Change I745fb15abb in the dalvik tree. Both
    implementations share a common ancestry, but the cost of unifying them
    outweighs the benefits of wrapping C calls.
    
    Change-Id: Iddacb50fe913917c2845708a530872d65fdbe620
    donut snapshot
    rename a few files to camel-case, add copyright notices
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Support tokenizing arbitrary content.
    
    Bug: 6110399
    Change-Id: I37be63b68934fd451e6dffbf7d6079553619c0a3
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Improve support for external keyboards.
    
    Use Vendor ID, Product ID and optionally the Version to
    locate keymaps and configuration files for external devices.
    
    Moved virtual key definition parsing to native code so that
    EventHub can identify touch screens with virtual keys and load
    the appropriate key layout file.
    
    Cleaned up a lot of old code in EventHub.
    
    Fixed a regression in ViewRoot's fallback event handling.
    
    Fixed a minor bug in FileMap that caused it to try to munmap
    or close invalid handled when released if the attempt to map
    the file failed.
    
    Added a couple of new String8 conveniences for formatting strings.
    
    Modified Tokenizer to fall back to open+read when mmap fails since
    we can't mmap sysfs files as needed to open the virtual key
    definition files in /sys/board_properties/.
    
    Change-Id: I6ca5e5f9547619fd082ddac47e87ce185da69ee6
    Fix SDK build on Windows due to use of mmap.
    
    Change-Id: Id4bd9a6f932285c93c5853e540efc20b99876564
    Added support for full PC-style keyboards.
    
    BREAKING CHANGE: Redesigned the key character map format to
    accomodate full keyboards with more comprehensive suite of modifiers.
    Old key character maps will not work anymore and must be updated.
    The new format is plain text only and it not compiled to a binary
    file (so the "kcm" tool will be removed in a subsequent check-in).
    
    Added FULL keyboard type to support full PC-style keyboards.
    
    Added SPECIAL_FUNCTION keyboard type to support special function
    keypads that do not have any printable keys suitable for typing
    and only have keys like HOME and POWER
    
    Added a special VIRTUAL_KEYBOARD device id convention that maps
    to a virtual keyboard with a fixed known layout.  This is designed
    to work around issues injecting input events on devices whose
    built-in keyboard does not have a useful key character map (ie.
    when the built-in keyboard is a special function keyboard only.)
    
    Modified several places where events were being synthesized
    to use the virtual keyboard.
    
    Removed support for the "qwerty" default layout.
    The new default layout is "Generic".  For the most part "qwerty"
    was being used as a backstop in case the built-in keyboard did
    not have a key character map (probably because it was a special
    function keypad) and the framework needed to be able to inject
    key events anyways.  The latter issue is resolved by using the
    special VIRTUAL_KEYBOARD device instead of BUILT_IN_KEYBOARD.
    
    Added the concept of a key modifier behavior so that
    MetaKeyKeyListener can distinguish between keyboards that use
    chorded vs. toggled modifiers.
    
    Wrote more robust key layout and key character map parsers
    to enable support for new keyboard features and user installable
    key maps.
    
    Fixed a bug in InputReader generating key ups when keys
    are released out of sequence.
    
    Updated tons of documentation.
    
    Currently QwertyKeyListener is being used for full keyboards
    with autotext and capitalization disabled.  This mostly works
    but causes some problems with character pickers, etc.
    These issues will be resolved in subsequent changes.
    
    Change-Id: Ica48f6097a551141c215bc0d2c6f7b3fb634d354
    Rename LOG_ASSERT to ALOG_ASSERT
    
    Change-Id: Ie2c7ea6560656d65bad791a61996174c75677517
    Rename LOG_ASSERT to ALOG_ASSERT  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157519
    
    Bug: 5449033
    Change-Id: I8ceb2dba1b031a0fd68d15d146960d9ced62bbf3
    Improve support for external keyboards.
    
    Use Vendor ID, Product ID and optionally the Version to
    locate keymaps and configuration files for external devices.
    
    Moved virtual key definition parsing to native code so that
    EventHub can identify touch screens with virtual keys and load
    the appropriate key layout file.
    
    Cleaned up a lot of old code in EventHub.
    
    Fixed a regression in ViewRoot's fallback event handling.
    
    Fixed a minor bug in FileMap that caused it to try to munmap
    or close invalid handled when released if the attempt to map
    the file failed.
    
    Added a couple of new String8 conveniences for formatting strings.
    
    Modified Tokenizer to fall back to open+read when mmap fails since
    we can't mmap sysfs files as needed to open the virtual key
    definition files in /sys/board_properties/.
    
    Change-Id: I6ca5e5f9547619fd082ddac47e87ce185da69ee6
    Added support for full PC-style keyboards.
    
    BREAKING CHANGE: Redesigned the key character map format to
    accomodate full keyboards with more comprehensive suite of modifiers.
    Old key character maps will not work anymore and must be updated.
    The new format is plain text only and it not compiled to a binary
    file (so the "kcm" tool will be removed in a subsequent check-in).
    
    Added FULL keyboard type to support full PC-style keyboards.
    
    Added SPECIAL_FUNCTION keyboard type to support special function
    keypads that do not have any printable keys suitable for typing
    and only have keys like HOME and POWER
    
    Added a special VIRTUAL_KEYBOARD device id convention that maps
    to a virtual keyboard with a fixed known layout.  This is designed
    to work around issues injecting input events on devices whose
    built-in keyboard does not have a useful key character map (ie.
    when the built-in keyboard is a special function keyboard only.)
    
    Modified several places where events were being synthesized
    to use the virtual keyboard.
    
    Removed support for the "qwerty" default layout.
    The new default layout is "Generic".  For the most part "qwerty"
    was being used as a backstop in case the built-in keyboard did
    not have a key character map (probably because it was a special
    function keypad) and the framework needed to be able to inject
    key events anyways.  The latter issue is resolved by using the
    special VIRTUAL_KEYBOARD device instead of BUILT_IN_KEYBOARD.
    
    Added the concept of a key modifier behavior so that
    MetaKeyKeyListener can distinguish between keyboards that use
    chorded vs. toggled modifiers.
    
    Wrote more robust key layout and key character map parsers
    to enable support for new keyboard features and user installable
    key maps.
    
    Fixed a bug in InputReader generating key ups when keys
    are released out of sequence.
    
    Updated tons of documentation.
    
    Currently QwertyKeyListener is being used for full keyboards
    with autotext and capitalization disabled.  This mostly works
    but causes some problems with character pickers, etc.
    These issues will be resolved in subsequent changes.
    
    Change-Id: Ica48f6097a551141c215bc0d2c6f7b3fb634d354
    Split UTF functions from String8/16
    
    Split out all the UTF-8/16/32 handling code from String8/16 to its own
    file to allow better reuse of code.
    
    Change-Id: If9ce63920edc75472c38da4adce0d13cda9ad2f7
    Add keycodes and meta-key modifiers to support external keyboards.
    
    Added new key maps for external keyboards.  These maps are intended to
    be shared across devices by inheriting the "keyboards.mk" product
    makefile as part of the device's product definition.
    
    One of the trickier changes here was to unwind some code in
    MetaKeyKeyListener that assumed that only the low 8 bits of the meta key
    state were actually used.  The new code abandons bitshifts in favor
    of simple conditionals that are probably easier to read anyways.
    The special meta key state constants used by MetaKeyKeyListener
    are now (@hide) defined in KeyEvent now so as to make it clearer that they
    share the same code space even if those codes are not valid for KeyEvents.
    
    The EventHub now takes care of detecting the appropriate key layout
    map and key character map when the device is added and sets system
    properties accordingly.  This avoids having duplicate code in
    KeyCharacterMap to probe for the appropriate key character map
    although the current probing mechanism has been preserved for legacy
    reasons just in case.
    
    Added support for tracking caps lock, num lock and scroll lock and
    turning their corresponding LEDs on and off as needed.
    
    The key character map format will need to be updated to correctly support
    PC style external keyboard semantics related to modifier keys.
    That will come in a later change so caps lock doesn't actually do
    anything right now except turn the shiny LEDs on and off...
    
    Added a list of symbolic key names to KeyEvent and improved the toString()
    output for debug diagnosis.  Having this list in a central place in the
    framework also allows us to remove it from Monkey so there is one less
    thing to maintain when we add new keycodes.
    
    Bug: 2912307
    Change-Id: If8c25e8d50a7c29bbf5d663c94284f5f86de5da4
    Fix bug with phantom input windows.
    
    Add dumpsys integration for the native input dispatcher.
    Add some InputDevice API stubs.
    Add an appendFormat helper method to String8 for printf style
    string formatting mainly for debugging purposes.
    Use generic ArrayList<WindowState> everywhere in WindowManagerService
    to eliminate unnecessary casts all over.
    
    Change-Id: I9d1e3bd90eb7222d10620200477f11b7bfd25e44
    Fix String8 to free its memory only after assignment operations based on pointers are finished in case that pointer referred to the string's original contents.
    
    Change-Id: I6961f3cf10ba3b728579ea63262db750a4cf8577
    Make static versions of libutils and libbinder.
    
    Fix some small static-initialization-order issues (and a static-
    initializers-missing issue) that result from doing so.  The static
    libraries don't actually get used for anything real at the moment --
    they're used for perf tests of bug 2660235.
    
    Bug: 2660235
    Change-Id: Iee2f38f79cc93b395e8d0a5a144ed92461f5ada0
    Optional use of UTF-8 strings in resource bundles
    
    Allows the use of UTF-8 for packing resources instead of the
    default of UTF-16 for Java. When strings are extracted from the
    ResStringPool, they are converted to UTF-16 and the result is
    cached for subsequent calls.
    
    When using aapt to package, add in the "-8" switch to pack the
    resources using UTF-8. This will result in the value, key, and
    type strings as well as the compiled XML string values taking
    significantly less space in the final application package in
    most scenarios.
    
    Change-Id: I129483f8b3d3b1c5869dced05cb525e494a6c83a
    donut snapshot
    quick fix; utf8_codepoint_count must be utf8_length
    Add useful functions to String8, which enables users to convert between UTF-8 and UTF-32
    It will be used in SQL functions in external/sqlite/android.
    See https://android-git.corp.google.com/g/Gerrit#change,5511 for example.
    
    Related internal bug id: 1707173
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Initial Contribution
    Fade out the mouse pointer after inactivity or other events.
    
    Fades out the mouse pointer:
    - after 15 seconds of inactivity normally
    - after 3 seconds of inactivity in lights out mode
    - after a non-modifier key down
    - after a touch down
    
    Extended the native Looper to support enqueuing time delayed
    messages.  This is used by the PointerController to control
    pointer fade timing.
    
    Change-Id: I87792fea7dbe2d9376c78cf354fe3189a484d9da
    Switch Looper back to using poll() instead of epoll().
    
    Added a couple of micro-optimizations to avoid calling wake() unnecessarily
    and reduce JNI overhead slightly.
    
    Fixed a minor issue where we were not clearing the "next" field of Messages
    returned by the MessageQueue so the Message would hold on to its successor
    and potentially prevent the GC from collecting it if the message were leaked
    somehow.
    
    Change-Id: I488d29417ce0cdd7d0e447cda76ec978ef7f811c
    Replace epoll() with poll() and rename PollLoop to Looper.
    
    As part of this change, consolidated and cleaned up the Looper API so
    that there are fewer distinctions between the NDK and non-NDK declarations
    (no need for two callback types, etc.).
    
    Removed the dependence on specific constants from sys/poll.h such as
    POLLIN.  Instead looper.h defines events like LOOPER_EVENT_INPUT for
    the events that it supports.  That should help make any future
    under-the-hood implementation changes easier.
    
    Fixed a couple of compiler warnings along the way.
    
    Change-Id: I449a7ec780bf061bdd325452f823673e2b39b6ae
    fix a corruption in Vector<> when adding new items
    
    would happen when vectors are copied and new items is
    added in both vectors. we didn't duplicate the underlying
    storage when adding items in vectors.
    
    Bug: 6515797
    Change-Id: If544c07d96c05821e088d7f2c9b5736f7e306c31
    frameworks/native: move Zip* from libandroidfw to libutils
    
    ZipUtils is needed by build/tools, move it from libandroidfw
    (frameworks/base) to libutils (frameworks/native).
    
    Change-Id: Ib8c41134ccdec6d6aa8d49860f8dddef49a24783
    frameworks/base refactoring
    
    create the new libandroidfw from parts of libui and libutils
    
    Change-Id: I1584995616fff5d527a2aba63921b682a6194d58
    Add a basic hashtable data structure, with tests!
    
    The basic hashtable is intended to be used to support a variety
    of different datastructures such as map, set, multimap,
    multiset, linkedmap, generationcache, etc.
    
    Consequently its interface is fairly primitive.
    
    The basic hashtable supports copy-on-write style functionality
    using SharedBuffer.
    
    The change introduces a simple generic function in TypeHelpers for
    specifying hash functions.  The idea is to add template
    specializations of hash_type<T> next to the relevant data structures
    such as String8, String16, sp<T>, etc.
    
    Change-Id: I2c479229e9d4527b4fbfe3b8b04776a2fd32c973
    Move extract native libraries to JNI code
    
    The built-in ZipFile class was quite a long time to find an unpack
    libraries. Move everything to using the libutils ZipFileRO class that
    goes quite a bit faster. Initial measurements are 6 times faster than
    the Java code.
    
    Also, read files off the disk and compare their CRC against the APK's
    CRC to see if we need to write the new file to disk. This also cuts down
    the bootup time by up to a second per APK that has native files.
    
    Change-Id: Ic464a7969a17368fb6a6b81d026888c4136c7603
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    libutils: add a binary blob cache implementation.
    
    This change adds an implementation of a cache that stores key/value
    pairs of unstructured binary blobs.
    
    Change-Id: Idd01fdabedfa3aed6d359a6efb0592967af52651
    Split UTF functions from String8/16
    
    Split out all the UTF-8/16/32 handling code from String8/16 to its own
    file to allow better reuse of code.
    
    Change-Id: If9ce63920edc75472c38da4adce0d13cda9ad2f7
    Replace epoll() with poll() and rename PollLoop to Looper.
    
    As part of this change, consolidated and cleaned up the Looper API so
    that there are fewer distinctions between the NDK and non-NDK declarations
    (no need for two callback types, etc.).
    
    Removed the dependence on specific constants from sys/poll.h such as
    POLLIN.  Instead looper.h defines events like LOOPER_EVENT_INPUT for
    the events that it supports.  That should help make any future
    under-the-hood implementation changes easier.
    
    Fixed a couple of compiler warnings along the way.
    
    Change-Id: I449a7ec780bf061bdd325452f823673e2b39b6ae
    Fix String8::operator+
    
    The LHS was ignored when using:
      String8 + String8
      String8 + (const char*)
    
    Add unit tests for above.
    
    Bug: 2898473
    Change-Id: Ic8fe7be668b665c36aaaa3fc3c3ffdfff0fbba25
    Don't build framework tests for simulator target.
    
    Change-Id: I70f29c7eb307e4f3ec5702f4eb9d97b4342e2f36
    Add OBB file helper class
    
    ObbFile is a binary blob that will be used in packaging large files
    with smaller APKs.
    
    Change-Id: Ib1594346cfa2f49113de6565af77c24efbd89d63
    Support for multiple tests
    
    The build system enforces some invariants that were being ignored
    before.
    
    Change-Id: Ie7675042af7f961a507386c13b2a0b592b591af8
    Native input dispatch rewrite work in progress.
    
    The old dispatch mechanism has been left in place and continues to
    be used by default for now.  To enable native input dispatch,
    edit the ENABLE_NATIVE_DISPATCH constant in WindowManagerPolicy.
    
    Includes part of the new input event NDK API.  Some details TBD.
    
    To wire up input dispatch, as the ViewRoot adds a window to the
    window session it receives an InputChannel object as an output
    argument.  The InputChannel encapsulates the file descriptors for a
    shared memory region and two pipe end-points.  The ViewRoot then
    provides the InputChannel to the InputQueue.  Behind the
    scenes, InputQueue simply attaches handlers to the native PollLoop object
    that underlies the MessageQueue.  This way MessageQueue doesn't need
    to know anything about input dispatch per-se, it just exposes (in native
    code) a PollLoop that other components can use to monitor file descriptor
    state changes.
    
    There can be zero or more targets for any given input event.  Each
    input target is specified by its input channel and some parameters
    including flags, an X/Y coordinate offset, and the dispatch timeout.
    An input target can request either synchronous dispatch (for foreground apps)
    or asynchronous dispatch (fire-and-forget for wallpapers and "outside"
    targets).  Currently, finding the appropriate input targets for an event
    requires a call back into the WindowManagerServer from native code.
    In the future this will be refactored to avoid most of these callbacks
    except as required to handle pending focus transitions.
    
    End-to-end event dispatch mostly works!
    
    To do: event injection, rate limiting, ANRs, testing, optimization, etc.
    
    Change-Id: I8c36b2b9e0a2d27392040ecda0f51b636456de25
    BlobCache: implement cache serialization
    
    This change adds serialization and deserialization functionality to
    BlobCache, conforming to the Flattenable interface.
    
    Change-Id: Ibc99cb1c3d015f363d57d0713eabccec07ff975e
    libutils: add a binary blob cache implementation.
    
    This change adds an implementation of a cache that stores key/value
    pairs of unstructured binary blobs.
    
    Change-Id: Idd01fdabedfa3aed6d359a6efb0592967af52651
    Even more native input dispatch work in progress.
    
    Added more tests.
    Fixed a regression in Vector.
    Fixed bugs in pointer tracking.
    Fixed a starvation issue in PollLoop when setting or removing callbacks.
    Fixed a couple of policy nits.
    
    Modified the internal representation of MotionEvent to be more
    efficient and more consistent.
    
    Added code to skip/cancel virtual key processing when there are multiple
    pointers down.  This helps to better disambiguate virtual key presses
    from stray touches (such as cheek presses).
    
    Change-Id: I2a7d2cce0195afb9125b23378baa94fd2fc6671c
    Native input dispatch rewrite work in progress.
    
    The old dispatch mechanism has been left in place and continues to
    be used by default for now.  To enable native input dispatch,
    edit the ENABLE_NATIVE_DISPATCH constant in WindowManagerPolicy.
    
    Includes part of the new input event NDK API.  Some details TBD.
    
    To wire up input dispatch, as the ViewRoot adds a window to the
    window session it receives an InputChannel object as an output
    argument.  The InputChannel encapsulates the file descriptors for a
    shared memory region and two pipe end-points.  The ViewRoot then
    provides the InputChannel to the InputQueue.  Behind the
    scenes, InputQueue simply attaches handlers to the native PollLoop object
    that underlies the MessageQueue.  This way MessageQueue doesn't need
    to know anything about input dispatch per-se, it just exposes (in native
    code) a PollLoop that other components can use to monitor file descriptor
    state changes.
    
    There can be zero or more targets for any given input event.  Each
    input target is specified by its input channel and some parameters
    including flags, an X/Y coordinate offset, and the dispatch timeout.
    An input target can request either synchronous dispatch (for foreground apps)
    or asynchronous dispatch (fire-and-forget for wallpapers and "outside"
    targets).  Currently, finding the appropriate input targets for an event
    requires a call back into the WindowManagerServer from native code.
    In the future this will be refactored to avoid most of these callbacks
    except as required to handle pending focus transitions.
    
    End-to-end event dispatch mostly works!
    
    To do: event injection, rate limiting, ANRs, testing, optimization, etc.
    
    Change-Id: I8c36b2b9e0a2d27392040ecda0f51b636456de25
    eclair snapshot
    move libbinder's header files under includes/binder
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix String8::operator+
    
    The LHS was ignored when using:
      String8 + String8
      String8 + (const char*)
    
    Add unit tests for above.
    
    Bug: 2898473
    Change-Id: Ic8fe7be668b665c36aaaa3fc3c3ffdfff0fbba25
    Split UTF functions from String8/16
    
    Split out all the UTF-8/16/32 handling code from String8/16 to its own
    file to allow better reuse of code.
    
    Change-Id: If9ce63920edc75472c38da4adce0d13cda9ad2f7
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Add a basic hashtable data structure, with tests!
    
    The basic hashtable is intended to be used to support a variety
    of different datastructures such as map, set, multimap,
    multiset, linkedmap, generationcache, etc.
    
    Consequently its interface is fairly primitive.
    
    The basic hashtable supports copy-on-write style functionality
    using SharedBuffer.
    
    The change introduces a simple generic function in TypeHelpers for
    specifying hash functions.  The idea is to add template
    specializations of hash_type<T> next to the relevant data structures
    such as String8, String16, sp<T>, etc.
    
    Change-Id: I2c479229e9d4527b4fbfe3b8b04776a2fd32c973
    fix a corruption in Vector<> when adding new items
    
    would happen when vectors are copied and new items is
    added in both vectors. we didn't duplicate the underlying
    storage when adding items in vectors.
    
    Bug: 6515797
    Change-Id: If544c07d96c05821e088d7f2c9b5736f7e306c31
    frameworks/native: move Zip* from libandroidfw to libutils
    
    ZipUtils is needed by build/tools, move it from libandroidfw
    (frameworks/base) to libutils (frameworks/native).
    
    Change-Id: Ib8c41134ccdec6d6aa8d49860f8dddef49a24783
    frameworks/base refactoring
    
    create the new libandroidfw from parts of libui and libutils
    
    Change-Id: I1584995616fff5d527a2aba63921b682a6194d58
    frameworks/base refactoring.
    
    step 2: move libutils headers to their new home: androidfw
    
    Change-Id: I14624ba23db92a81f2cb929f104386e1fab293ef
    Move extract native libraries to JNI code
    
    The built-in ZipFile class was quite a long time to find an unpack
    libraries. Move everything to using the libutils ZipFileRO class that
    goes quite a bit faster. Initial measurements are 6 times faster than
    the Java code.
    
    Also, read files off the disk and compare their CRC against the APK's
    CRC to see if we need to write the new file to disk. This also cuts down
    the bootup time by up to a second per APK that has native files.
    
    Change-Id: Ic464a7969a17368fb6a6b81d026888c4136c7603
    mv libcpustats from frameworks/base to /native
    
    OK to lose history
    
    Change-Id: I563fec271e0bc240e4a09a8b9647c7439badd85b
    mv libcpustats from frameworks/base to /native
    
    OK to lose history
    
    Change-Id: I563fec271e0bc240e4a09a8b9647c7439badd85b
    Fix log spam about CPU frequency on one device
    
    Previous kernels have allowed opening the CPU frequency file regardless
    whether the CPU is up or not.  This fixes some log spam on one device
    with dynamic hot plug CPU feature, which does not allow opening the CPU
    frequency file if CPU is down.
    
    Also, since the file descriptors are global and have long lives, add
    the close-on-exec flag.
    
    Change-Id: Ia14a2b9e20038dfb96a573920176a47a96bd3f5a
    mv libcpustats from frameworks/base to /native
    
    OK to lose history
    
    Change-Id: I563fec271e0bc240e4a09a8b9647c7439badd85b
    feat[parcel]: to support std string
    
    both reading and writing
    get rid of MemoryHeapPmem
    
    MemoryHeapPmem is not used any longer. PMEM is not a supported
    type of memory by the system anymore. a particular device might
    use PMEM and need something like MemoryHeapPmem, in this case this
    should be implemented in device specific code (HAL).
    
    This will most likely break older no longer supported targets.
    
    Change-Id: I434e4291219950018de8b793b0403bb2d92dd5cc
    move CursorWindow from libbinder to libandroidfw
    
    Change-Id: I3b304e4f74e0d0ec8b20c57296c62449c9a0f792
    PermissionCache caches permission checks
    
    This is intended to absorb the cost of the IPC
    to the permission controller.
    Cached permission checks cost about 3us, while
    full blown ones are two orders of magnitude slower.
    
    CAVEAT: PermissionCache can only handle system
    permissions safely for now, because the cache is
    not purged upon global permission changes.
    
    Change-Id: I8b8a5e71e191e3c01e8f792f253c379190eee62e
    Move CursorWindow class from core/jni to libbinder
    
    To allow use of the native CursorWindow class outside of the core framework jni
    
    Change-Id: I72e8dcb91a2c691130c33cdfd9a25d343da1c592
    Signed-off-by: Mike Lockwood <lockwood@android.com>
    Make static versions of libutils and libbinder.
    
    Fix some small static-initialization-order issues (and a static-
    initializers-missing issue) that result from doing so.  The static
    libraries don't actually get used for anything real at the moment --
    they're used for perf tests of bug 2660235.
    
    Bug: 2660235
    Change-Id: Iee2f38f79cc93b395e8d0a5a144ed92461f5ada0
    eclair snapshot
    keystore: remove old implementation and test.
    
    The new tests will be implemented in java.
    Add tests and misc fixes on keystore.
    
    * Refactor netkeystore.c to make client and server code testable.
    * Add a client test for setting new passwd and changing passwd.
    * Exclude "." and ".." from reset_keystore().
    * Change ServerCommand.executeCommand() to accept variable length of
      arguments and add convert() to marshalling the args to bytes.
    * Keystore.java is revised accordingly.
    donut snapshot
    donut snapshot
    Removed system/framework/android.awt.jar.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    eclair snapshot
    move libbinder's header files under includes/binder
    checkpoint: split libutils into libutils + libbinder
    feat[parcel]: to support std string
    
    both reading and writing
    Aligning native Parcel implementation to Java.
    
    The Java implementation of writing the RPC response header
    calculates the length of the header including the 4 bytes
    specifying the header length but the native implementation
    excludes the 4 bytes specifying the length from the header
    length.
    The native implementation has been aligned to the Java impl.
    
    Change-Id: I325bf272a63152d8fded4cf4e51a906b5a9bfe19
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)
    
    Change-Id: I26f76452ac49e2890b14d133c065493d8df0fb4a
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOG() to (IF_)ALOG()
    
    Change-Id: If49c81a2793182771c6160fbca93905daa6f44c1
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: Ib08fe86d23db91ee153e9f91a99a35c42b9208ea
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Fix possible leak in Parcel::writeDupFileDescriptor.
    
    Also, check the result of dup() just in case we got EMFILE
    or something.
    
    Change-Id: I18e627bd84f4c7941813fe1c2bad2cdd9e5afa83
    Fix a leak in Parcel::writeBlob.
    
    Was mistakenly assuming that Parcel::writeFileDescriptor took
    ownership of the fd that was passed in.  It does not!
    Added some comments and a default parameter to allow the caller
    to specify whether it wishes the Parcel to take ownership.
    
    Bug: 5563374
    Change-Id: I5a12f51d582bf246ce90133cce7690bb9bca93f6
    Fix a leak in Parcel::writeBlob.
    
    Was mistakenly assuming that Parcel::writeFileDescriptor took
    ownership of the fd that was passed in.  It does not!
    Added some comments and a default parameter to allow the caller
    to specify whether it wishes the Parcel to take ownership.
    
    Bug: 5563374
    Change-Id: I5a12f51d582bf246ce90133cce7690bb9bca93f6
    Revert "Use ashmem for CursorWindows."
    
    This reverts commit 0cde89f5f025b7826be009ebb9673b970e180e32.
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Rename (IF_)LOG() to (IF_)ALOG()  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/141576
    
    Bug: 5449033
    Change-Id: I42575e7c29cf1c0f465c357a5c97ab118df6f473
    Use ashmem for CursorWindows.
    Bug: 5332296
    
    The memory dealer introduces additional delays for reclaiming
    the memory owned by CursorWindows because the Binder object must
    be finalized.  Using ashmem instead gives CursorWindow more
    direct control over the lifetime of the shared memory region.
    
    The provider now allocates the CursorWindows and returns them
    to clients with a read-only protection bit set on the ashmem
    region.
    
    Improved the encapsulation of CursorWindow.  Callers shouldn't
    need to care about details like how string fields are allocated.
    
    Removed the compile-time configuration of string and numeric
    storage modes to remove some dead weight.
    
    Change-Id: I07c2bc2a9c573d7e435dcaecd269d25ea9807acd
    Fix handling of "allow fds" state.
    
    Didn't take into account nesting of bundles.  Boo.
    
    Change-Id: Ic8cf21ad8d6f4938a3e105128624c9d162310d01
    Transfer large bitmaps using ashmem.
    Bug: 5224703
    
    Change-Id: If385a66adf4c6179a0bb49c0e6d09a9567e23808
    Add mechanism for Parcel to not allow FDs to be written to it.
    
    This is to help implement issue #5224703.
    
    Change-Id: I026a5890495537d15b57fe61227a640aac806d46
    Revert "Transfer large bitmaps using ashmem. Bug: 5224703"
    
    This reverts commit 56c58f66b97d22fe7e7de1f7d9548bcbe1973029
    
    This CL was causing the browser to crash when adding bookmarks, visiting the bookmarks page, and sharing pages (see bug http://b/issue?id=5369231
    Revert "Transfer large bitmaps using ashmem. Bug: 5224703"
    
    This reverts commit 56c58f66b97d22fe7e7de1f7d9548bcbe1973029
    
    This CL was causing the browser to crash when adding bookmarks, visiting the bookmarks page, and sharing pages (see bug http://b/issue?id=5369231
    Transfer large bitmaps using ashmem.
    Bug: 5224703
    
    Change-Id: Ic7481dd9f173986f085a8bbdcc59bbe9830d7a44
    Rewrite battery history storage.
    
    We now write battery history directly into a buffer, instead of
    creating objects.  This allows for more efficient storage; later
    it can be even better because we can only write deltas.
    
    The old code is still there temporarily for validation.
    
    Change-Id: I9707d4d8ff30855be8ebdc93bc078911040d8e0b
    Parcel::appendFrom({const } Parcel *parcel, size_t, size_t)
    
    As far as I can tell "parcel" isn't actually modified by the implementation.
    
    Change-Id: Ib806eefdc13c97b932773e1dc9ca3a4aad4422b2
    Fix for writing empty strings to Parcel::writeString8()
    
    If writeString8 is called with the following sequence:
    
     writeString8(String8(""));
     writeString8(String8("TempString"));
    
    Then in the readString8, the 2nd String i.e. "TempString" is not read,
    instead an empty string is read.
    
    The bug comes because of the write call for String8("") where there are
    no String bytes present. In the write Statement, an extra ‘\0’ is
    written. During the Marshalling, Following bytes are written:
    
    1        2         3        4       5   ...
    0x0      0x0       0xB      ‘T’     ‘e’  ...
    
    The readString8 function has a check that, if String length is 0, don’t
    read anything. So the first byte is read as the length for the first
    string. The second byte i.e. ‘\0’ is read as the length for the second
    string and hence the second string becomes empty too.
    
    Change-Id: Id7acc0c80ae16e77be4331f1ddf69ea87e758420
    Don't propagate StrictMode over one-way Binder calls.
    
    This was causing stack stitching problems where a one-way call with
    violations followed by a two-way call without violations was getting
    the previous one-way call's violation stack stitched on to the second
    caller's stack.
    
    The solution is a little more indirect than I would've liked
    (preserving the binder's onTransact flags until enforceInterface) but
    was seemingly necessary to work without changing the AIDL compiler.
    It should also be sufficiently cheap, since no new calls to
    thread-local IPCThreadState lookups were required.  The additional
    work is just same-thread getter/setters on the existing
    IPCThreadState.
    
    Change-Id: I4b6db1d445c56e868e6d0d7be3ba6849f4ef23ae
    Replace several IPCThreadState::get() lookups with one.
    
    Also, make StrictMode's ThreadLocal final.
    
    Change-Id: I08d400ed254fa67bb7a3dae1227f205a54c00df0
    StrictMode: gather and return violating stacks in Binder replies
    
    Now, when Thread A has a strict mode policy in effect and does a
    Binder call to Thread B (most likely in another process), the strict
    mode policy is passed along, but with the GATHER penalty bit set which
    overrides other policies and instead gathers all offending stack
    traces to a threadlocal which are then written back in the Parcel's
    reply header.
    
    Change-Id: I7d4497032a0609b37b1a2a15855f5c929ba0584d
    More StrictMode work, keeping Binder & BlockGuard's thread-locals in-sync.
    
    Change-Id: Ia67cabcc17a73a0f15907ffea683d06bc41b90e5
    Add Parcel::readExceptionCode() and Parcel::writeNoException()
    
    Add native Parcel methods analogous to the Java versions.
    
    Currently, these don't do much, but upcoming StrictMode work changes
    the RPC calling conventions in some cases, so it's important that
    everybody uses these consistently, rather than having a lot of code
    trying to parse RPC responses out of Parcels themselves.
    
    As a summary, the current convention that Java Binder services use is
    to prepend the reply Parcel with an int32 signaling the exception
    status:
    
         0: no exception
         -1: Security exception
         -2: Bad Parcelable
         -3: ...
         -4: ...
         -5: ...
    
    ... followed by Parceled String if the exception code is non-zero.
    
    With an upcoming change, it'll be the case that a response Parcel can,
    non-exceptionally return rich data in the header, and also return data
    to the caller.  The important thing to note in this new case is that
    the first int32 in the reply parcel *will not be zero*, so anybody
    manually checking for it with reply.readInt32() will get false
    negative failures.
    
    Short summary: If you're calling into a Java service and manually
    checking the exception status with reply.readInt32(), change it to
    reply.readExceptionCode().
    
    Change-Id: I23f9a0e53a8cfbbd9759242cfde16723641afe04
    Start of work on passing around StrictMode policy over Binder calls.
    
    This is (intendend to be) a no-op change.
    
    At this stage, Binder RPCs just have an additional uint32 passed around
    in the header, right before the interface name.  But nothing is actually
    done with them yet.  That value should right now always be 0.
    
    This now boots and seems to work.
    
    Change-Id: I135b7c84f07575e6b9717fef2424d301a450df7b
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    donut snapshot
    Fix a major bug in Bundle when unparcelling from AIDL.
    
    There was a serious problem in the Bundle(Parcel) and readFromParcel() methods,
    where it wasn't doing the copying of the Parcel that Parcel.readBundle() does
    and is a basic requirement for it to work correctly.
    
    This re-arranges the code to make all of these functions (hopefully) correct.
    
    Also fix a problem in Parcel where we were not duping fds when copying data from
    one Parcel to another.
    bring the native_handle stuff back from master_gl
    checkpoint: split libutils into libutils + libbinder
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Need to dup file descriptor when reading from the binder for native handles
    
    When reading a native handle that has passed through the binder,
    the fds have to be duped to prevent them from getting closed when the binder
    object is destructed.
    
    Signed-off-by: Rebecca Schultz Zavin <rebecca@android.com>
    auto import from //branches/cupcake/...@130745
    auto import from //branches/cupcake/...@127101
    Initial Contribution
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    MemoryHeapBase: Save and binderize the offset
    
    The offset that is used in the creation of the MemoryHeapBase must be saved, so
    that it can be used to recreate the Heap when an IMemory object is passed
    across process boundary through the binder.
    
    Change-Id: Ie618fb5c0718e6711f55ed9235616fd801e648dc
    Signed-off-by: Anu Sundararajan <sanuradha@ti.com>
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    fix [2599939] "cannot play video" after open/close a video player a dozen of times
    
    get rid off the MAP_ONCE flag is MemoryHeapBase (as well as it's functionality),
    this feature should not be used anymore.
    
    the software renderer was incorrectly using the default ctor which set MAP_ONCE,
    causing the leak. the software renderer itself is incorrectly used while coming
    back from sleep.
    
    Change-Id: I123621f8d140550b864f352bbcd8a5729db12b57
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add Parcel::readExceptionCode() and Parcel::writeNoException()
    
    Add native Parcel methods analogous to the Java versions.
    
    Currently, these don't do much, but upcoming StrictMode work changes
    the RPC calling conventions in some cases, so it's important that
    everybody uses these consistently, rather than having a lot of code
    trying to parse RPC responses out of Parcels themselves.
    
    As a summary, the current convention that Java Binder services use is
    to prepend the reply Parcel with an int32 signaling the exception
    status:
    
         0: no exception
         -1: Security exception
         -2: Bad Parcelable
         -3: ...
         -4: ...
         -5: ...
    
    ... followed by Parceled String if the exception code is non-zero.
    
    With an upcoming change, it'll be the case that a response Parcel can,
    non-exceptionally return rich data in the header, and also return data
    to the caller.  The important thing to note in this new case is that
    the first int32 in the reply parcel *will not be zero*, so anybody
    manually checking for it with reply.readInt32() will get false
    negative failures.
    
    Short summary: If you're calling into a Java service and manually
    checking the exception status with reply.readInt32(), change it to
    reply.readExceptionCode().
    
    Change-Id: I23f9a0e53a8cfbbd9759242cfde16723641afe04
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Fix invalid madvise() during concurrent alloc/dealloc of MemoryDealer
    
    Currently, madvise(MADV_REMOVE) is called after deallocation.
    Another thread might allocate (and even write) the same region between
    deallocation and madvise(), in which case the new thread will fail to read
    what it have written.  So, call deallocate() after madvise(MADV_REMOVE).
    
    Bug: 5654596
    Change-Id: I26f36cd6013de499090768a0ddc68206a4a68219
    Simplify the MemoryDealer implementation
    
    At some point the implementation became complicated because of
    SurfaceFlinger's special needs, since we are now relying on gralloc
    we can go back to much simpler MemoryDealer.
    
    Removed HeapInterface and AllocatorInterface, since those don't need
    to be paramterized anymore. Merged SimpleMemory and Allocation.
    Made SimplisticAllocator non virtual.
    
    Removed MemoryDealer flags (READ_ONLY, PAGE_ALIGNED)
    
    Removed a lot of unneeded code.
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    fixed: readUint32 --> readInt32
    fixed some android service_manager's bugs:
    
    1. the impl of SVC_MGR_LIST_SERVICES can not return the active svc service names, it returns dead and live svc names.
    2. it can not return the correct service names in the case that someone died and restarted again, the it did not parse the svc linked list correctly.
    this file is the service,
    
    this commit is the client's impl is in IServiceManager.cpp which is corresponding to the commit in service_manager.c, pls refer to it!
    Some hardening of isolated processes by restricting access to services.
    
    Services now must explicitly opt in to being accessed by isolated
    processes.  Currently only the activity manager and surface flinger
    allow this.  Activity manager is needed so that we can actually
    bring up the process; SurfaceFlinger is needed to be able to get the
    display information for creating the Configuration.  The SurfaceFlinger
    should be safe because the app doesn't have access to the window
    manager so can't actually get a surface to do anything with.
    
    The activity manager now protects most of its entry points against
    isolated processes.
    
    Change-Id: I0dad8cb2c873575c4c7659c3c2a7eda8e98f46b0
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)
    
    Change-Id: I26f76452ac49e2890b14d133c065493d8df0fb4a
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: Ib08fe86d23db91ee153e9f91a99a35c42b9208ea
    Add Parcel::readExceptionCode() and Parcel::writeNoException()
    
    Add native Parcel methods analogous to the Java versions.
    
    Currently, these don't do much, but upcoming StrictMode work changes
    the RPC calling conventions in some cases, so it's important that
    everybody uses these consistently, rather than having a lot of code
    trying to parse RPC responses out of Parcels themselves.
    
    As a summary, the current convention that Java Binder services use is
    to prepend the reply Parcel with an int32 signaling the exception
    status:
    
         0: no exception
         -1: Security exception
         -2: Bad Parcelable
         -3: ...
         -4: ...
         -5: ...
    
    ... followed by Parceled String if the exception code is non-zero.
    
    With an upcoming change, it'll be the case that a response Parcel can,
    non-exceptionally return rich data in the header, and also return data
    to the caller.  The important thing to note in this new case is that
    the first int32 in the reply parcel *will not be zero*, so anybody
    manually checking for it with reply.readInt32() will get false
    negative failures.
    
    Short summary: If you're calling into a Java service and manually
    checking the exception status with reply.readInt32(), change it to
    reply.readExceptionCode().
    
    Change-Id: I23f9a0e53a8cfbbd9759242cfde16723641afe04
    Start of work on passing around StrictMode policy over Binder calls.
    
    This is (intendend to be) a no-op change.
    
    At this stage, Binder RPCs just have an additional uint32 passed around
    in the header, right before the interface name.  But nothing is actually
    done with them yet.  That value should right now always be 0.
    
    This now boots and seems to work.
    
    Change-Id: I135b7c84f07575e6b9717fef2424d301a450df7b
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add callback hack to find out when to reload system properties.
    
    Every IBinder object can accept a new transaction to tell it that
    it might want to reload system properties, and in the process
    anyone can register a callback to be executed when this happens.
    
    Use this to reload the trace property.
    
    This is very much ONLY for debugging.
    
    Change-Id: I55c67c46f8f3fa9073bef0dfaab4577ed1d47eb4
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Make static versions of libutils and libbinder.
    
    Fix some small static-initialization-order issues (and a static-
    initializers-missing issue) that result from doing so.  The static
    libraries don't actually get used for anything real at the moment --
    they're used for perf tests of bug 2660235.
    
    Bug: 2660235
    Change-Id: Iee2f38f79cc93b395e8d0a5a144ed92461f5ada0
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Revert "ugly, temporary, workaroung for a problem where a binder thread spins forever"
    
    This reverts commit 0845d0245e09548110cacb0f20e9934753388aab
    
    Change-Id: I395037cb9427cd11f7de6bb78fbdfa917fc6263a
    ugly, temporary, workaroung for a problem where a binder thread spins forever
    
    Bug: 7289992
    Change-Id: I0c3d482a1af57e5f444be2ba7f2751ac3e954af2
    ugly, temporary, workaroung for a problem where a binder thread spins forever
    
    Bug: 7289992
    Change-Id: I0c3d482a1af57e5f444be2ba7f2751ac3e954af2
    No longer need "original calling uid".
    
    Change-Id: Ifc4a89dd088609a5a8553f6ac6553174e09e8222
    Fix shutdown sequence to avoid SIGSEGV when running am command
    
    When the app_process is shutting down the main thread will close the
    binder fd while pool threads are executing an ioctl (in
    IPCThreadState::stopProcess called by AppRuntime::onStarted in
    app_main.c).
    
    The binder driver will then return all pending calls in ioctl
    without any error and with a command. One of the threads gets a
    BR_SPAWN_LOOPER which will create a new thread (the other thread
    gets a BR_NOOP). This new thread then calls
    vm->AttachCurrentThread. Usually this results in a log entry with
    "AndroidRuntime: NOTE: attach of thread 'Binder Thread #3' failed",
    but sometimes it also causes a SIGSEGV. This depends on the timing
    between the new thread an the main thread that calls DestroyJavaVM
    (in AndroidRuntime::start).
    
    If IPCThreadState.cpp is compiled with "#define LOG_NDEBUG 0" the
    pool thread will loop and hit the
    ALOG_ASSERT(mProcess->mDriverFD >= 0) in
    IPCThreadState::talkWithDriver.
    
    Crashes like this has been seen when running the am command and
    other commands that use the app_process.
    
    This fix makes sure that any command that is received when the driver
    fd is closed are ignored and IPCThreadState::talkWithDriver instead
    returns an error which will cause the pool thread to exit and detach
    itself from the vm. A check to avoid calling ioctl to a fd with -1
    was also added in IPCThreadState::threadDestructor.
    
    Another solution might be to change the binder driver so that it
    returns an error when the fd is closed (or atleast not a
    BR_SPAWN_LOOPER command). It might also be possible to call exit(0)
    which is done when System.exit(0) is called from java.
    
    Change-Id: I3d1f0ff64896c44be2a5994b3a90f7a06d27f429
    Scheduling group cleanup
    
    Remove C++ APIs androidSetThreadSchedulingGroup and
    androidGetThreadSchedulingGroup, and the ANDROID_TGROUP_* constants.
    
    Former callers of these should now use the C APIs set_sched_policy and
    get_sched_policy, and the SP_* constants.
    
    Note: debug.sys.noschedgroups is not supported by the C APIs,
    this needs to be discussed.
    
    Change-Id: I32bbfc539ef4090faf9ef0320380e8cca9eae07c
    Remove obsolete references to sched_policy.h
    
    As part of scheduling policy cleanup, remove or isolate
    all references to the scheduling policy APIs.
    
    Change-Id: Ia1ea2fe711a399039f25217309e061267744b856
    Multi-user - 1st major checkin
    
    Switching activity stacks
    Cache ContentProvider per user
    Long-press power to switch users (on phone)
    
    Added ServiceMap for separating services by user
    Launch PendingIntents on the correct user's uid
    Fix task switching from Recents list
    AppWidgetService is mostly working.
    
    Commands added to pm and am to allow creating and switching profiles.
    
    Change-Id: I15810e8cfbe50a04bd3323a7ef5a8ff4230870ed
    Rename LOG_ASSERT to ALOG_ASSERT
    
    Change-Id: Ie2c7ea6560656d65bad791a61996174c75677517
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)
    
    Change-Id: I26f76452ac49e2890b14d133c065493d8df0fb4a
    Rename (IF_)LOG() to (IF_)ALOG()
    
    Change-Id: If49c81a2793182771c6160fbca93905daa6f44c1
    Rename LOG_ASSERT to ALOG_ASSERT  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157519
    
    Bug: 5449033
    Change-Id: I8ceb2dba1b031a0fd68d15d146960d9ced62bbf3
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: Ib08fe86d23db91ee153e9f91a99a35c42b9208ea
    Initialize bwr.read_buffer in IPCThreadState::talkWithDriver.
    
    I/valgrind( 1309): ==1310== Syscall param
    ioctl(BINDER_WRITE_READ).read_buffer points to uninitialised byte(s)
    I/valgrind( 1309): ==1310==    at 0x480E670: __ioctl (__ioctl.S:10)
    I/valgrind( 1309): ==1310==  Address 0xbda651b4 is on thread 1's stack
    
    Change-Id: I02893df7b5786b6b2dbd9659f5706d7171295ab2
    Rename (IF_)LOG() to (IF_)ALOG()  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/141576
    
    Bug: 5449033
    Change-Id: I42575e7c29cf1c0f465c357a5c97ab118df6f473
    Resurrect verbose binder logging
    
    Updated the command name lists, and masked off the additional bits in
    the command word when doing the name lookup.
    
    Made descriptor values easier to grep for and consistent with kernel
    output (i.e. decimal rather than hex).  Attempt to show transaction
    descriptors as such (they're in a union with a pointer).
    
    Also, the writeLines() function in Static was using a no-op
    logging call to write an iovec.  It looks like all callers are using
    N=1, so I just added a log for the first string.
    
    Bug 5155269
    
    Change-Id: I417b8d77da3eb6ee1d2069ba94047210f75738bc
    Make sure binder ioctl structs don't contain uninitialized values.
    
    Change-Id: I8a678f91262417bb120e65e32c244ce1512b46c2
    Framework-side support for Dalvik "isSensitiveThread" hook.
    
    Used in lock contention stats.
    
    Bug: 3226270
    Change-Id: Ie6f58d130a29079a59bdefad40b80304d9bc3623
    Some debugging support.
    
    - New feature to "am monitor" to have it automatically launch
      gdbserv for you when a crash/ANR happens, and tell you how to
      run the client.
    
    - Update dumpstate to match new location of binder debug logs
    
    - Various commented out logs that are being used to track down
      issues.
    
    Change-Id: Ia5dd0cd2df983a1fc6be697642a4590aa02a26a5
    Don't propagate StrictMode over one-way Binder calls.
    
    This was causing stack stitching problems where a one-way call with
    violations followed by a two-way call without violations was getting
    the previous one-way call's violation stack stitched on to the second
    caller's stack.
    
    The solution is a little more indirect than I would've liked
    (preserving the binder's onTransact flags until enforceInterface) but
    was seemingly necessary to work without changing the AIDL compiler.
    It should also be sufficiently cheap, since no new calls to
    thread-local IPCThreadState lookups were required.  The additional
    work is just same-thread getter/setters on the existing
    IPCThreadState.
    
    Change-Id: I4b6db1d445c56e868e6d0d7be3ba6849f4ef23ae
    More StrictMode work, keeping Binder & BlockGuard's thread-locals in-sync.
    
    Change-Id: Ia67cabcc17a73a0f15907ffea683d06bc41b90e5
    Start of work on passing around StrictMode policy over Binder calls.
    
    This is (intendend to be) a no-op change.
    
    At this stage, Binder RPCs just have an additional uint32 passed around
    in the header, right before the interface name.  But nothing is actually
    done with them yet.  That value should right now always be 0.
    
    This now boots and seems to work.
    
    Change-Id: I135b7c84f07575e6b9717fef2424d301a450df7b
    Ensure that binder incalls to the system process keep the fg cgroup
    
    On binder incalls, the handler thread is given the caller's priority by the
    driver, but not the caller's cgroup.  We have explicit code that sets the
    handler's cgroup to match the caller's, *except* that the system process
    explicitly disables this behavior.  This led to a siuation in which we were
    running binder incalls to the system process at nice=10 but cgroup=fg.
    
    That's fine as far as it goes, except that if a GC happened in the handler
    thread, it would be promoted to foreground priority and cgroup both, to avoid
    having the GC take forever.  Then, when GC finished, the original priority
    is reset, and the cgroup set *based on that priority*.  This would push the
    handler thread into nice=10 cgroup=bg_non_interactive -- which matches the
    caller, but is supposed to be impossible in the system process.
    
    The end result of this was that we could be running "lengthy" operations in
    the system process in the background.  Unfortunately, some of the operations
    that wound up like this would hold important global system locks for up to
    twenty seconds as a result, making the entire device unresponsive to input
    for that period.
    
    This CL fixes the binder incall setup to ensure that within the system process,
    a binder incall is always begun from the normal foreground priority as well
    as cgroup.  In practice now the device still becomes laggy/sluggish when the
    offending lock-holding time-consuming incall occurs, but since it still runs
    as a foreground task it is able to proceed to completion within a short time
    rather than taking 20 seconds.
    
    Fixes bug #2403717
    
    Change-Id: Id046aeabd0e80c48eef94accc37842835eab308d
    Propagate background scheduling class across processes.
    
    This is a very simply implementation: upon receiving an IPC, if the handling
    thread is at a background priority (the driver will have taken care of
    propagating this from the calling thread), then stick it in to the background
    scheduling group.  Plus an API to turn this off for the process, which is
    used by the system process.
    
    This also pulls some of the code for managing scheduling classes out of
    the Process JNI wrappers and in to some convenience methods in thread.h.
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    MemoryHeapBase: Save and binderize the offset
    
    The offset that is used in the creation of the MemoryHeapBase must be saved, so
    that it can be used to recreate the Heap when an IMemory object is passed
    across process boundary through the binder.
    
    Change-Id: Ie618fb5c0718e6711f55ed9235616fd801e648dc
    Signed-off-by: Anu Sundararajan <sanuradha@ti.com>
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Clean up use of HAVE_ANDROID_OS
    
    HAVE_ANDROID_OS was defined as "1" for targets, but never defined as "0"
    for non-targets. Changing them to #ifdef should be safe and matches
    all the other uses of HAVE_ANDROID_OS throughout the system.
    
    Change-Id: I82257325a8ae5e4e4371ddfc4dbf51cea8ea0abb
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    add set thread count
    
    Change-Id: I70f02908d8362a465eb8a2a24356f6989847f7ba
    double checked locking pattern is not safe on SMP
    
    Change-Id: Ie6dd564bdcd45647cb4d62ab259462e3db112576
    Shorten thread names
    
    prctl(PR_SET_NAME) limits to 15 characters.  Before we had names like
    "Binder Thread #" and the counter was cut off :-( Also remove redundant
    "thread" at end of name; it's always a thread.
    
    Change-Id: I1f99c2730ba0787ed9b59c15914356cddf698e2f
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Remove some #ifdef HAVE_ANDROID_OS that were needed for the simulator build
    
    Change-Id: I13d9f251f86c05ae5405f37adbf6b8e9660935ba
    Signed-off-by: Mike Lockwood <lockwood@android.com>
    Eliminate single-process mode.
    Bug: 5010576
    
    Change-Id: Id450dc83efed4897d1e4ff451530fed14457aace
    android-2.1_r1 snapshot
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    PermissionCache caches permission checks
    
    This is intended to absorb the cost of the IPC
    to the permission controller.
    Cached permission checks cost about 3us, while
    full blown ones are two orders of magnitude slower.
    
    CAVEAT: PermissionCache can only handle system
    permissions safely for now, because the cache is
    not purged upon global permission changes.
    
    Change-Id: I8b8a5e71e191e3c01e8f792f253c379190eee62e
