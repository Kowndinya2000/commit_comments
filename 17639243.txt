    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Second round of changes to 'perf' profile collection daemon.
    
    Details:
    - avoid use of system() in favor of fork/exec.
    - add option to selectively disable/enable mpdecision service around perf
      collection runs to improve profile quality and avoid kernel pmuevents issues.
    - default to using 'simpleperf' instead of 'perf'
    
    Change-Id: I27928d8bb647fd852ec944158ebfd8efa38c01b4
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    Perf profile collection daemon.
    
    Collects system-wide profiles via periodic invocation of
    /system/bin/perf, placing the resulting data files in a destination
    directory selected via config file.  Behavior of the daemon, e.g how
    often to profile, duration of profiling runs, etc, can also be
    controlled with config file settings.
    
    Change-Id: I7978cab62aa0c2507ecf8d70ba073e77db730120
    puncture_fs: A new utility that is used with fs benchmarking tools.
    
    The tools fills up the filesystem completely then removes a set of files
    of predefined size to free up some predefined non-contiguous free space.
    It is used with benchmarking tools like fio to collect metrics on a used filesystem with sparse free space.
    
    Change-Id: Ieb1d38c0f95c51462060e541a662c378b79d81fb
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix missing #includes in system/extras.
    
    Change-Id: I78000cea6b2012f571e596ed400b3f04847cb761
    puncture_fs: A new utility that is used with fs benchmarking tools.
    
    The tools fills up the filesystem completely then removes a set of files
    of predefined size to free up some predefined non-contiguous free space.
    It is used with benchmarking tools like fio to collect metrics on a used filesystem with sparse free space.
    
    Change-Id: Ieb1d38c0f95c51462060e541a662c378b79d81fb
    Fix for X86 target
    
    The X86 target couldn't compile some tests that use assembly, but it can
    compile other things that now depend on some projects in the test subdir
    (namely libtestUtil for OpenGL tests)
    
    Also fatblock was including <sys/endian.h> directly instead of
    <endian.h> which broke some stuff on X86
    
    Change-Id: Ib71a6e548189ca2eacfd0caa7dbd17d200efd0ea
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    tests: add socket tagging test for qtaguid kernel netfilter module
    
    Add a small test to verify that socket tagging is not hopelessly
    broken.
    
    Test for
     - invalid: arg count, command, tags.
     - double tagging
     - acct_tag changing
     - optional uid
     - 64bit unsigned vs signed
     - invalid sock_fd
     - multiple entries
     - untagging
     - uid/gid checking + max tags.
    
    It tries its best to allow concurrent invocations, but it just
    can not be sure that it always detects the in-kernel addresses of
    the sockets it has tagged.
    
    Change-Id: I4e372fcddbd0b1cd6ba5d8be4692e0f31ec71a99
    Binder add ints benchmark
    
    Change-Id: Id05879404db8255264ee7f573e10a3f06ead8115
    WiFi load, scan, associate, unload stress test
    
    Change-Id: I5c33e5bee60550c1d82ffd0c18d7cae39db613a4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add liblog
    
    Bug: 8580410
    Change-Id: I9be769e7365b579dcfd94ac86e305044fcb515ee
    making sure it is built into the nativetest path so it gets picked up by
    continous tests.
    
    Change-Id: I6c6841b629691dd6825025886cf8169afbc3df98
    tests: add socket tagging test for qtaguid kernel netfilter module
    
    Add a small test to verify that socket tagging is not hopelessly
    broken.
    
    Test for
     - invalid: arg count, command, tags.
     - double tagging
     - acct_tag changing
     - optional uid
     - 64bit unsigned vs signed
     - invalid sock_fd
     - multiple entries
     - untagging
     - uid/gid checking + max tags.
    
    It tries its best to allow concurrent invocations, but it just
    can not be sure that it always detects the in-kernel addresses of
    the sockets it has tagged.
    
    Change-Id: I4e372fcddbd0b1cd6ba5d8be4692e0f31ec71a99
    WiFi Loop Stress test - refactor & chg test name
    
    Change-Id: I8d4a818b3547217227b1aa741534eb7884695dba
    WiFi Loop Stress Test - move to /data
    
    Change-Id: I37f30c6e6e6eb189211591e7710ea5e086d8e4f6
    WiFi Loop stress test - install at /data/nativestresstest
    
    Change-Id: I15206ac1c64eea3e9bb7ae682bc61f449b5967bf
    WiFi load, scan, associate, unload stress test
    
    Change-Id: I5c33e5bee60550c1d82ffd0c18d7cae39db613a4
    auto import from //branches/cupcake/...@137197
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Fix build in C++11 mode
    
    "PRIu64 is a C++11 literal -- fix it by adding a space
    
    Change-Id: I760bfc31b47c87adbc9d9f224ecfbf08fffcc2e2
    Signed-off-by: Bernhard Rosenkränzer <Bernhard.Rosenkranzer@linaro.org>
    qtaguid test: 64-bit compile issues
    
    Change-Id: If3d83ccc4a50eae503f15a9de948b8c21641d8de
    qtaguid: Converting test to GTest so that it will be run continously by TF.
    
    Change-Id: I067ed277f168e466d09572fb6c21e51e0bdaa9f2
    tests: add socket tagging test for qtaguid kernel netfilter module
    
    Add a small test to verify that socket tagging is not hopelessly
    broken.
    
    Test for
     - invalid: arg count, command, tags.
     - double tagging
     - acct_tag changing
     - optional uid
     - 64bit unsigned vs signed
     - invalid sock_fd
     - multiple entries
     - untagging
     - uid/gid checking + max tags.
    
    It tries its best to allow concurrent invocations, but it just
    can not be sure that it always detects the in-kernel addresses of
    the sockets it has tagged.
    
    Change-Id: I4e372fcddbd0b1cd6ba5d8be4692e0f31ec71a99
    Remove sound, memtest, vibrator, timetest, cachetest from tests build
    Bring timetest back.
    Bring timetest back.
    tests: Add simple direct i/o test
    
    Adds a simple write/readback test of direct i/o on a block
    device node.
    
    Change-Id: I06c2bb50fbc014157f5e0eaf2bbb910b89f5fc25
    Signed-off-by: Garmin Android technology group <android@garmin.com>
    directiotest: 64 bit compile issue
    
    Change-Id: Iaef4f2aebfc1258594fca64615cd52758ac23a75
    tests: Add simple direct i/o test
    
    Adds a simple write/readback test of direct i/o on a block
    device node.
    
    Change-Id: I06c2bb50fbc014157f5e0eaf2bbb910b89f5fc25
    Signed-off-by: Garmin Android technology group <android@garmin.com>
    Make UID rules specify "iif lo" to match real device configs.
    
    Change-Id: Ieddb54dfdf0ea66a13f5ebd3fbeeea786e0c1505
    Improvements to iproute.
    
    1. Teach it about links.
    2. Use decoded attribute names instead of raw attribute numbers
       in debug output.
    3. Add a function to decode netlink messages.
    
    Change-Id: I3cb7581bac750e4784e7fbf5567d373ecc0cefdf
    Improve the dump code.
    
    1. Make it generic and not tied to RTMsg only.
    2. Support dumps that are spread across multiple recv calls.
    
    Change-Id: Ifad803d80cc5085dd2fe4e8b5fb555d9459bd5ae
    Support setting and clearing the default network.
    
    Change-Id: I97531e429362b896bb72b80ba31bbc27bf345b75
    Clean up code in preparation for AOSP.
    
    1. Include copyright headers in all files.
    2. Clean up all lint messages except "bad header", which doesn't
       like our copyright statement, but which I do not seem to be
       able to disable.
    
    Change-Id: I33b44eb7f942f0ce03c001e674377f193fb66def
    Remove the EXPERIMENTAL from UID routing.
    
    Change-Id: I12e6f072f9c7c096c5212becc77e83b4407ab0d0
    Fix lint warnings.
    
    Change-Id: Icd3053963fd2e69cddb35ac7cb24bc428d536d43
    Manually add directly-connected routes as well as default routes
    
    Currently, the manual routing configuration that we use when
    running the tests on a kernel that does not have the
    accept_ra_rt_table sysctl does not add directly-connected routes
    to the per-interface routing tables. This does not allow us to
    test on-link connectivity unless the sysctl is present.
    
    Remove this restriction and enable testOnlinkCommunication.
    
    Also make testLeftoverRoutes conditional on HAVE_AUTOCONF_TABLE,
    because without per-interface routing tables, sending an RA does
    not result in the creation of a new routing table.
    
    Change-Id: I16177cf374040b87a78e7455b05b11b956f4e7ee
    Don't specify lladdr when deleting a neighbour.
    
    Change-Id: I8001527095da47dafc66569bd0d4f4f742b48a33
    Add debugging capabilities to iproute.
    
    Change-Id: If098aafc7feee6db49de29594565f166b2100cfd
    Add test for source address selection behaviour.
    
    Depends on use_optimistic kernel work:
        https://android-review.googlesource.com/#/c/109934/
    
    - Add busy wait for DAD to complete to verify that
      tentative and optimistic addresses both /eventually/
      become preferable addresses for source selection.
    
    Change-Id: I7a584129f69e6159ff9a0a7eaf54de3200321546
    Add basic RTM_GETADDR support.
    
      [iproute.py]
      - Basic RTM_GETADDR support (currently IPv6-only).
      - Add the rest of Linux's IFA_F_* flags values.
    
      [mark_test.py]
      - Fix comment typo.
    
    Bug: 17769720
    Change-Id: I4e883a6e01c825ee0de75314f12c0892e96d5a15
    Return route attribute types as strings.
    
    This is not really a good solution, because attributes are
    passed in as integers and returned as strings, but at least the
    returned values don't need to be decoded again. Without this
    change, attribute types are integers whose meaning cannot be
    determined without decoding the message again.
    
    The proper solution would be to define these as some sort of
    enum type.
    
    Change-Id: Ifd031329719db40f2230ae3d020c65427f3207f5
    Support decoding route attributes, cacheinfo, uid.
    
    Change-Id: Id7e84ba961a2dbb903e92cdd000017caee54299d
    Fix lint error.
    
    Change-Id: Ic627eec47b36cfb905bb89dcfaf770ecb7f99ea4
    Check that route deletion does not ignore the table.
    
    Change-Id: Id4904610d3223d87bfe46edb4b750688ec23e358
    Make iproute.py work on 3.4 kernels too.
    
    - Unrecognized attributes cause EINVAL.
    - Interface names have to be null-terminated.
    
    Change-Id: I6d032f534754465e01042a0c7bbb27ee4fbc2fa3
    Make the test more robust with an unreachable rule
    
    This ensures that even if the system has a default route, sends
    will return an error unless the socket has explicitly selected
    an interface.
    
    Change-Id: I3f0ddd88a1b679fa3fb47ab7b78616fe7bf3ca9f
    Improve iproute attribute decoding documentation.
    
    This reverts commit a54a9b1046a738d645c2aa1add5c26a348a517b8.
    
    Change-Id: I9d6566b4ed1f3723523745692bac0ed61e2775aa
    Test looking up routes with UIDs from userspace.
    
    This checks that the kernel properly parses the RTA_UID
    attribute when looking up a route from userspace.
    
    Change-Id: Ib43506f3143ca05a7d7245c54bb27a42b29fcd24
    Better support for rule attributes.
    
    1. Make attributes into a dict so we can find them.
    2. Add a function to decode some attributes to Python types.
    
    Change-Id: I8d52a203818f5b24cf691cd2e86d52744d2ee191
    Replace shelling out to ip with netlink code.
    
    This reduces test setup time by about 50%.
    
    Change-Id: I079bd29e5366eb7b23e63b2f4f3dbd9267376cca
    Change from UID routing to UID range routing.
    
    Change-Id: Iafa5857827841a5dca2442e46ebd6a77ec3780a1
    Fixes to iproute.
    
    1. Expect NLMSG_DONE after a dump. Otherwise, the NLMSG_DONE
       message will remain in the socket buffer and the next read on
       the socket (e.g., the read for an ACK) will get an unexpected
       message.
    2. Properly pad attributes that are not multiples of 4 bytes
       long. This is useful, for example, for interface names, which
       are not necessarily a multiple of 4 characters long.
    
    Change-Id: I08872ae6b287ec24231fdb4c9e54852c87daca69
    Support adding outgoing interface rules.
    
    Also add the ability for verbose debugging.
    
    Change-Id: I7bc4b03bfdb30e554c2a6c9594845f2da6594e0f
    Updates to mark_test.
    
    1. UID routing.
     - Also test per-UID routing, if supported by the kernel.
    
    2. Sysctl changes.
     - Refactor code that sets sysctls, and robustly restore them in
       tearDown.
     - Check for the TCP FWMARK reflect sysctl.
     - Support separate sysctls for IPv4 and IPv6 mark reflection.
     - Switch to using the per-interface RA sysctl, and configure
       routing manually if it's not there.
    
    3. Test coverage.
     - Test TCP FIN and FIN+ACK. This not only increases coverage
       but also makes the test more robust, since retransmitted FINs
       won't confuse other reflection tests.
     - Test behaviour with the mark sysctls off.
    
    4. Robustness changes.
     - Run the reflect and accept tests multiple times to help
       expose any flaky behaviour.
     - Skip multicast packets. This makes things more robust, as
       previously, code that was expecting no packets would fail
       because it would receive an RS instead.
    
    5. Readability improvements.
     - Move code around to make it a bit more readable.
    
    Change-Id: Ieb5f81a1ec077d25d49b212cecbe82c527d69002
    Add support for reading routing rules.
    
    Change-Id: I24e04f691cb5688d87da0b880ce6000fcc22c781
    Support setting the priority of rules.
    
    Change-Id: I625443a3a7491d16f07e5b7d03e87195adbe457f
    Move ip rule functionality to Python.
    
    This allows us to experiment with ip rules without having to
    compile a modified ip binary for the VM architecture.
    
    Change-Id: Ibb0bc510fc2b1686712b94fffae6f1cea26a82bf
    Clean up code in preparation for AOSP.
    
    1. Include copyright headers in all files.
    2. Clean up all lint messages except "bad header", which doesn't
       like our copyright statement, but which I do not seem to be
       able to disable.
    
    Change-Id: I33b44eb7f942f0ce03c001e674377f193fb66def
    Move all setup code to a new multinetwork_base.py
    
    Change-Id: I4874829bb10bdd1a84ec6485a8f36e5441fc510f
    Skip ping tests instead of failing if the VM has no connectivity.
    
    Change-Id: I8cf39e2409fd9521e89e73c5080b79159718965e
    When changing UID, become a member of AID_INET.
    
    Otherwise we can't open any sockets, which is not very useful.
    
    Change-Id: I4a7def277f1d14232cfc4486011935e608571fd6
    Test raw sockets as well, using GRE packets.
    
    Change-Id: Ifaa8adee811d952570cb8d8ae6ce2f6fad6dad00
    Fix flowlabel test, now it's working in the kernel
    
    Change-Id: Iad67073f303b611bba5d19b8d0ead768450118e7
    Move ip rule functionality to Python.
    
    This allows us to experiment with ip rules without having to
    compile a modified ip binary for the VM architecture.
    
    Change-Id: Ibb0bc510fc2b1686712b94fffae6f1cea26a82bf
    Fix lint warnings.
    
    Change-Id: I1eb3d3b5e182c77e77f33860fe48003ed4cb85cd
    Improve MarkTest.
    
    1. Add TCP SYN+ACK tests including syncookies and checks that
       accepting connections succeeids and that the sockets returned
       by accept() are marked.
    2. Mark the tests more robust with respect to extra packets by
       always explicitly expecting packets (including when testing
       outgoing kernel-generated packets) and looking for them
       anywhere in the queue instead of insisting they're the first
       packet in the queue.
    3. Make the tests more robust by using random source port,
       disabling ICMP rate limits, setting SO_REUSEADDR, and
       clearing queues more reliably.
    4. Move from 2 to 4 interfaces (mostly made possible by the
       robustness improvements above).
    5. Use named constants instead of repeating the numbers in
       multiple places.
    
    Change-Id: I596e557a7eea02ccf603c812a9b8ea6f5b2f95da
    Test mark-based routing for outgoing packets.
    
    Change-Id: Ifd696803f22a29bae162ab1d21d7b3552b9b80d3
    Kernel networking test scripts using UML.
    
    Change-Id: I28a9901e01a53e3dde551b6c8abf6391fe4354a4
    Add Python wrappers for bind and connect as well as sendmsg.
    
    Change-Id: Ie75ec2d56a58a74e1680eb01993797a48cec7c70
    Unbreak srcaddr_selection_test.
    
    Change-Id: Ia8ed30e6ee9cf0e2b2cceb7587ed87cb681bd3ad
    Clean up code in preparation for AOSP.
    
    1. Include copyright headers in all files.
    2. Clean up all lint messages except "bad header", which doesn't
       like our copyright statement, but which I do not seem to be
       able to disable.
    
    Change-Id: I33b44eb7f942f0ce03c001e674377f193fb66def
    Move all setup code to a new multinetwork_base.py
    
    Change-Id: I4874829bb10bdd1a84ec6485a8f36e5441fc510f
    Verify no NSes from optimistic addresses
    
    - also, fixup tests to skip at more appropriate times.
    
    Change-Id: Ib7df5a176a30a9e31e403883d52cd0d41b4475ae
    Further testing for optimistic address scenarios.
    
    - Add DAD failure test.
    - Separate testing address for "usability" from being "selected"
      (or "preferred") by source address selection.
    
    Change-Id: I8c11fb0dc539bc04e05274f513e07fe5531964ab
    Fix lint warnings.
    
    Change-Id: Icd3053963fd2e69cddb35ac7cb24bc428d536d43
    Add test for source address selection behaviour.
    
    Depends on use_optimistic kernel work:
        https://android-review.googlesource.com/#/c/109934/
    
    - Add busy wait for DAD to complete to verify that
      tentative and optimistic addresses both /eventually/
      become preferable addresses for source selection.
    
    Change-Id: I7a584129f69e6159ff9a0a7eaf54de3200321546
    Clean up code in preparation for AOSP.
    
    1. Include copyright headers in all files.
    2. Clean up all lint messages except "bad header", which doesn't
       like our copyright statement, but which I do not seem to be
       able to disable.
    
    Change-Id: I33b44eb7f942f0ce03c001e674377f193fb66def
    Move all setup code to a new multinetwork_base.py
    
    Change-Id: I4874829bb10bdd1a84ec6485a8f36e5441fc510f
    Remove the EXPERIMENTAL from UID routing.
    
    Change-Id: I12e6f072f9c7c096c5212becc77e83b4407ab0d0
    Don't infinite loop if read() on tun returns 0
    
    Change-Id: I146ca638a250ab1d20655b995f6fa9bf637187a6
    Fix lint warnings.
    
    Change-Id: Icd3053963fd2e69cddb35ac7cb24bc428d536d43
    Manually add directly-connected routes as well as default routes
    
    Currently, the manual routing configuration that we use when
    running the tests on a kernel that does not have the
    accept_ra_rt_table sysctl does not add directly-connected routes
    to the per-interface routing tables. This does not allow us to
    test on-link connectivity unless the sysctl is present.
    
    Remove this restriction and enable testOnlinkCommunication.
    
    Also make testLeftoverRoutes conditional on HAVE_AUTOCONF_TABLE,
    because without per-interface routing tables, sending an RA does
    not result in the creation of a new routing table.
    
    Change-Id: I16177cf374040b87a78e7455b05b11b956f4e7ee
    Add test for source address selection behaviour.
    
    Depends on use_optimistic kernel work:
        https://android-review.googlesource.com/#/c/109934/
    
    - Add busy wait for DAD to complete to verify that
      tentative and optimistic addresses both /eventually/
      become preferable addresses for source selection.
    
    Change-Id: I7a584129f69e6159ff9a0a7eaf54de3200321546
    net_test environment changes
    
    - update run_net_test.sh to config-enable privacy addresses
      and optimistic DAD (both apparently off by default)
    - update mark_test's SendRA to support passing in the ND
      retranstimer parameter
    
    Change-Id: I348609bcef16e0cb7b1f9cbfd33ef2ab4dcda917
    Add basic RTM_GETADDR support.
    
      [iproute.py]
      - Basic RTM_GETADDR support (currently IPv6-only).
      - Add the rest of Linux's IFA_F_* flags values.
    
      [mark_test.py]
      - Fix comment typo.
    
    Bug: 17769720
    Change-Id: I4e883a6e01c825ee0de75314f12c0892e96d5a15
    Make net_test work on 3.1 kernels.
    
    Change-Id: Ic8d2ae94a2f359ea2d3166d057f769c0692e944b
    Don't skip the LeftoverRoutes test.
    
    Instead, make it just document the issue.
    
    Change-Id: I03284bb238acee3217a3b2117c262423c0383b67
    When changing UID, become a member of AID_INET.
    
    Otherwise we can't open any sockets, which is not very useful.
    
    Change-Id: I4a7def277f1d14232cfc4486011935e608571fd6
    Use the right version in the rule deletion test.
    
    Change-Id: I54e53cf7751f1fce464c72d5a0468bba553f2cfa
    Return route attribute types as strings.
    
    This is not really a good solution, because attributes are
    passed in as integers and returned as strings, but at least the
    returned values don't need to be decoded again. Without this
    change, attribute types are integers whose meaning cannot be
    determined without decoding the message again.
    
    The proper solution would be to define these as some sort of
    enum type.
    
    Change-Id: Ifd031329719db40f2230ae3d020c65427f3207f5
    Also check the MTU via netlink.
    
    Change-Id: Ic12ab3046d1eeb5053c6d2e2693be818f6252c83
    Check that route deletion does not ignore the table.
    
    Change-Id: Id4904610d3223d87bfe46edb4b750688ec23e358
    Don't check IPv6 echo reply tclass on pre-3.14 kernels
    
    Change-Id: I6044ecd50d608d5d144c50a3e6182150a857fbad
    Better tests for Path MTU discovery.
    
    Add PMTU tests for unconnected sockets, and test PMTUD when
    routing using all methods, not just using socket marking.
    
    Change-Id: I8f0f6fc00afa95b8e57792c51e955e2150ef29dc
    Move sending via pktinfo to a SendOnNetid function.
    
    Change-Id: Ib97730123450384a5fe291c55f77e4b1e82983b7
    Make iproute.py work on 3.4 kernels too.
    
    - Unrecognized attributes cause EINVAL.
    - Interface names have to be null-terminated.
    
    Change-Id: I6d032f534754465e01042a0c7bbb27ee4fbc2fa3
    Add a function to build UDP packets with options.
    
    Change-Id: I416bb293cca532b05c93bcaead9b024dbfd8c2d0
    Add tests for {sticky,non-sticky} pktinfo routing
    
    Change-Id: I7ba69ef9e26999e920118b2f3c75e34fac032d8f
    Refactor outgoing routing into its own test.
    
    Change-Id: I74dbc0cc2c33b4a6163acc8a764599bab769ffe9
    Only run iptables when necessary.
    
    Only run iptables for tests where we test inbound packet marking
    (i.e., mark reflect and TCP mark accept). This makes running all
    the tests ~6 seconds faster, and makes it free to add new test
    cases if they don't use inbound marking.
    
    Change-Id: Iaed82ce37e1edbaac6fa58fbea30fc84186d899b
    Better test incoming connections.
    
    0. Factor the TCP accept tests into their own test class.
    1. Test all routing modes. Previously, the code was only testing
       incoming connections with SO_BINDTODEVICE and mark accepting.
       Test with UID and explicit marking as well.
    2. Also check that when data is sent on the connection, it goes
       out on the right interface.
    3. In between calls, attempt to clear the socket destination
       cache by changing IPv4 ToS and adding / deleting IPv6 options.
    
    Change-Id: I15a28aa1f657f9c876e622e8a1a07185976828e3
    Make the test more robust with an unreachable rule
    
    This ensures that even if the system has a default route, sends
    will return an error unless the socket has explicitly selected
    an interface.
    
    Change-Id: I3f0ddd88a1b679fa3fb47ab7b78616fe7bf3ca9f
    Separate the reflect and accept tests.
    
    This will allow testing accepting connections in various routing
    modes (uid, SO_BINDTODEVICE, mark, etc.). Currently we only test
    mark and SO_BINDTODEVICE.
    
    Change-Id: Ic93ae839e56ae70ecf2c878661ab4f60a8a2440e
    Test raw sockets as well, using GRE packets.
    
    Change-Id: Ifaa8adee811d952570cb8d8ae6ce2f6fad6dad00
    Use a DNS query instead of "hello" as UDP payload
    
    Change-Id: I4fa323f72736749ddab0d369a19c4774f8dbdd39
    Apparently setting don't fragment is unnecessary.
    
    Change-Id: Ib97704d8533e188f518e66805b4994769b850109
    Simplify putting sockets onto networks.
    
    Change-Id: Ibc82cdf3c8dd80f8bcab84b5a76f1e4d36069c89
    Test IPv4 PMTU as well.
    
    Change-Id: I98d7b1a4003886a08c98167da96c8851e0900f0c
    Add outgoing packet tests using IP{,V6}_UNICAST_IF
    
    Change-Id: I4973626e05a838704a10959a21837e22a2d41bab
    Test looking up routes with UIDs from userspace.
    
    This checks that the kernel properly parses the RTA_UID
    attribute when looking up a route from userspace.
    
    Change-Id: Ib43506f3143ca05a7d7245c54bb27a42b29fcd24
    Add a test for UID routing configuration.
    
    Change-Id: I79914799c653ccd5326368652a93d441f0565a3c
    Better support for rule attributes.
    
    1. Make attributes into a dict so we can find them.
    2. Add a function to decode some attributes to Python types.
    
    Change-Id: I8d52a203818f5b24cf691cd2e86d52744d2ee191
    Replace shelling out to ip with netlink code.
    
    This reduces test setup time by about 50%.
    
    Change-Id: I079bd29e5366eb7b23e63b2f4f3dbd9267376cca
    Check that remarking a socket works as expected.
    
    Change-Id: I3d554508b35fbe2084cd6c8c40e31734dd5294d5
    Change from UID routing to UID range routing.
    
    Change-Id: Iafa5857827841a5dca2442e46ebd6a77ec3780a1
    Test that local IPv6 connectivity goes direct.
    
    Change-Id: Ia7f78b040358d787a1cdd183c0517927b14c4054
    Test outgoing oif routing.
    
    Change-Id: If2d6e5b9e87d4329d4c9d1cbfe5142260bc4a08b
    Really disable DAD, and get rid of the sleeps.
    
    Change-Id: I9209549e265921f18f68fd10b305b51e192e90f2
    Deflakify the PMTU test.
    
    For reasons I don't understand, sending traffic and receiving a
    Packet Too Big error just after the network is set up sometimes
    doesn't work - the packet doesn't even make it to icmpv6_rcv.
    
    Add a sleep statement to fix this for now.
    
    Change-Id: If1751e005a89f44c4d1784ef46bef97031c90a64
    Change the error messages.
    
    Change-Id: Iad59231db7b3ed5e3fb8b757569cc203cec3c7dd
    Test the oif rules using SO_BINDTODEVICE.
    
    For now, this only tests incoming connections.
    
    Change-Id: Ie1fcf53786d6c65c7f4ec80eb6573e824e730899
    Add more tests.
    
    1. Check that toggling forwarding deletes autoconf routes in
       all tables.
    2. Add a test for Path MTU discovery (IPv6 only for now).
    3. Add a test that checks that there are no leftover routes on
       routing table switch. Currently disabled, because there's no
       way to delete routing tables in Linux.
    
    Change-Id: Ie21a2d2c14304d9c0fb7cd688b90cb8715e0bd68
    Refactor setup and common code into a superclass.
    
    Change-Id: Iee489954175de6eec12b711d6c3ebb9a64cfd6c3
    Updates to mark_test.
    
    1. UID routing.
     - Also test per-UID routing, if supported by the kernel.
    
    2. Sysctl changes.
     - Refactor code that sets sysctls, and robustly restore them in
       tearDown.
     - Check for the TCP FWMARK reflect sysctl.
     - Support separate sysctls for IPv4 and IPv6 mark reflection.
     - Switch to using the per-interface RA sysctl, and configure
       routing manually if it's not there.
    
    3. Test coverage.
     - Test TCP FIN and FIN+ACK. This not only increases coverage
       but also makes the test more robust, since retransmitted FINs
       won't confuse other reflection tests.
     - Test behaviour with the mark sysctls off.
    
    4. Robustness changes.
     - Run the reflect and accept tests multiple times to help
       expose any flaky behaviour.
     - Skip multicast packets. This makes things more robust, as
       previously, code that was expecting no packets would fail
       because it would receive an RS instead.
    
    5. Readability improvements.
     - Move code around to make it a bit more readable.
    
    Change-Id: Ieb5f81a1ec077d25d49b212cecbe82c527d69002
    Move ip rule functionality to Python.
    
    This allows us to experiment with ip rules without having to
    compile a modified ip binary for the VM architecture.
    
    Change-Id: Ibb0bc510fc2b1686712b94fffae6f1cea26a82bf
    Fix lint warnings.
    
    Change-Id: I1eb3d3b5e182c77e77f33860fe48003ed4cb85cd
    Improve MarkTest.
    
    1. Add TCP SYN+ACK tests including syncookies and checks that
       accepting connections succeeids and that the sockets returned
       by accept() are marked.
    2. Mark the tests more robust with respect to extra packets by
       always explicitly expecting packets (including when testing
       outgoing kernel-generated packets) and looking for them
       anywhere in the queue instead of insisting they're the first
       packet in the queue.
    3. Make the tests more robust by using random source port,
       disabling ICMP rate limits, setting SO_REUSEADDR, and
       clearing queues more reliably.
    4. Move from 2 to 4 interfaces (mostly made possible by the
       robustness improvements above).
    5. Use named constants instead of repeating the numbers in
       multiple places.
    
    Change-Id: I596e557a7eea02ccf603c812a9b8ea6f5b2f95da
    Test mark-based routing for outgoing packets.
    
    Change-Id: Ifd696803f22a29bae162ab1d21d7b3552b9b80d3
    Kernel networking test scripts using UML.
    
    Change-Id: I28a9901e01a53e3dde551b6c8abf6391fe4354a4
    A simple script to run all tests.
    
    Now just type:
    
        $CHECKOUT/system/extras/tests/net_test/run_net_test.sh all_tests.sh
    
    and everything runs, output test output between banner lines like:
    
        ##### Found 4 tests.
        ##### ./multinetwork_test.py (1/4)
        ##### ./net_test.py (2/4)
        ##### ./ping6_test.py (3/4)
        ##### ./srcaddr_selection_test.py (4/4)
        ##### 0 failed tests.
    
    The exit code is the number of failed tests.
    
    Change-Id: Ia00c2750c4538c8af5acbd9ec660a564a430677e
    Kernel networking test scripts using UML.
    
    Change-Id: I28a9901e01a53e3dde551b6c8abf6391fe4354a4
    Add tests for cross-family bind() and connect() operations.
    
    Change-Id: Ie11d593c1ed16e674da6f64dc153dd15b9a4c988
    Stop requiring a live Internet connection in ping6_test.py.
    
    Instead, use tun interfaces like multinetwork_test does, and
    a separate thread to reply to ping packets. This allows the
    test cases to be almost completely unchanged.
    
    Change-Id: Ie7e07ebdf493a3a1eb3b7774130b71205423944e
    Disable the ping6 flowlabel test, since it doesn't work.
    
    This has never worked on any released kernel. I committed it when
    I had local changes that made it work, but those changes were not
    accepted upstream.
    
    Change-Id: Ie6e356414551744c1c4ed7c1572fe0228a5db8db
    Clean up code in preparation for AOSP.
    
    1. Include copyright headers in all files.
    2. Clean up all lint messages except "bad header", which doesn't
       like our copyright statement, but which I do not seem to be
       able to disable.
    
    Change-Id: I33b44eb7f942f0ce03c001e674377f193fb66def
    Move all setup code to a new multinetwork_base.py
    
    Change-Id: I4874829bb10bdd1a84ec6485a8f36e5441fc510f
    Add a test for cross-protocol ping crash.
    
    Change-Id: Idfea9137d77675c15c8f11f4e9603ca79c49f997
    Skip ping tests instead of failing if the VM has no connectivity.
    
    Change-Id: I8cf39e2409fd9521e89e73c5080b79159718965e
    Fix lint warnings.
    
    Change-Id: Icd3053963fd2e69cddb35ac7cb24bc428d536d43
    Make it easier to test IPv4 ping on IPv6 sockets.
    
    Change-Id: I39c3b403553a42ec0ea2cfdb6924ce6b315c6dd4
    Add more checks to the ping code.
    
    Change-Id: Idcf6f54f102dbc7589033b9ce961dcb65e385b88
    Fix flowlabel test, now it's working in the kernel
    
    Change-Id: Iad67073f303b611bba5d19b8d0ead768450118e7
    Fix lint warnings.
    
    Change-Id: I1eb3d3b5e182c77e77f33860fe48003ed4cb85cd
    Kernel networking test scripts using UML.
    
    Change-Id: I28a9901e01a53e3dde551b6c8abf6391fe4354a4
    Download the rootfs instead of expecting it to be in the tree.
    
    Change-Id: I17ee3a8389a141218ce8ce99a71e41b9832e8533
    net_test environment changes
    
    - update run_net_test.sh to config-enable privacy addresses
      and optimistic DAD (both apparently off by default)
    - update mark_test's SendRA to support passing in the ND
      retranstimer parameter
    
    Change-Id: I348609bcef16e0cb7b1f9cbfd33ef2ab4dcda917
    Make net_test work on 3.1 kernels.
    
    Change-Id: Ic8d2ae94a2f359ea2d3166d057f769c0692e944b
    Make olddefconfig optional; it only appeared recently.
    
    Change-Id: Ib08c1f37712e0f83f58ab247262355d937f4efd3
    If there's a new root fs, delete the old one
    
    Otherwise xz will refuse to overwrite it. Explicitly delete it
    instead of passing -f to xz because that also forces a lot of
    other things, not just file overwrite.
    
    Change-Id: Iec3c73c9ae4775039eb9c3afed91bfaa4ebedb5d
    Clear CROSS_COMPILE when running tests.
    
    Change-Id: Ife7ea26b8695a7eb74485d24beb214a92abc33dd
    Improve MarkTest.
    
    1. Add TCP SYN+ACK tests including syncookies and checks that
       accepting connections succeeids and that the sockets returned
       by accept() are marked.
    2. Mark the tests more robust with respect to extra packets by
       always explicitly expecting packets (including when testing
       outgoing kernel-generated packets) and looking for them
       anywhere in the queue instead of insisting they're the first
       packet in the queue.
    3. Make the tests more robust by using random source port,
       disabling ICMP rate limits, setting SO_REUSEADDR, and
       clearing queues more reliably.
    4. Move from 2 to 4 interfaces (mostly made possible by the
       robustness improvements above).
    5. Use named constants instead of repeating the numbers in
       multiple places.
    
    Change-Id: I596e557a7eea02ccf603c812a9b8ea6f5b2f95da
    Don't export ARCH and SUBARCH, set them explicitly
    
    Change-Id: I1f3637202e78ba1c9448769251e641ba0af17624
    Kernel networking test scripts using UML.
    
    Change-Id: I28a9901e01a53e3dde551b6c8abf6391fe4354a4
    Kernel networking test scripts using UML.
    
    Change-Id: I28a9901e01a53e3dde551b6c8abf6391fe4354a4
    Add a README file.
    
    Change-Id: Iaf13f68c96f3ebbd611dc668689d468d5b0261fd
    Add Python wrappers for bind and connect as well as sendmsg.
    
    Change-Id: Ie75ec2d56a58a74e1680eb01993797a48cec7c70
    Support setting and clearing the default network.
    
    Change-Id: I97531e429362b896bb72b80ba31bbc27bf345b75
    Clean up code in preparation for AOSP.
    
    1. Include copyright headers in all files.
    2. Clean up all lint messages except "bad header", which doesn't
       like our copyright statement, but which I do not seem to be
       able to disable.
    
    Change-Id: I33b44eb7f942f0ce03c001e674377f193fb66def
    Move all setup code to a new multinetwork_base.py
    
    Change-Id: I4874829bb10bdd1a84ec6485a8f36e5441fc510f
    Clean up code in preparation for AOSP.
    
    1. Include copyright headers in all files.
    2. Clean up all lint messages except "bad header", which doesn't
       like our copyright statement, but which I do not seem to be
       able to disable.
    
    Change-Id: I33b44eb7f942f0ce03c001e674377f193fb66def
    Support returning a C pointer to struct data.
    
    Change-Id: Ib18b112a2e6398b54fb0504bbbbe0a3732704cac
    Add a module for dealing with C-style structs.
    
    Change-Id: I3faec98ba24aefe9c7eb211ac2c5f95f9f11e027
    Add Python wrappers for bind and connect as well as sendmsg.
    
    Change-Id: Ie75ec2d56a58a74e1680eb01993797a48cec7c70
    Clean up code in preparation for AOSP.
    
    1. Include copyright headers in all files.
    2. Clean up all lint messages except "bad header", which doesn't
       like our copyright statement, but which I do not seem to be
       able to disable.
    
    Change-Id: I33b44eb7f942f0ce03c001e674377f193fb66def
    Add a wrapper for sendmsg.
    
    Change-Id: Ie1e376fdf9c067415bc682139ef7862e4b6dcf23
    Fix for X86 target
    
    The X86 target couldn't compile some tests that use assembly, but it can
    compile other things that now depend on some projects in the test subdir
    (namely libtestUtil for OpenGL tests)
    
    Also fatblock was including <sys/endian.h> directly instead of
    <endian.h> which broke some stuff on X86
    
    Change-Id: Ib71a6e548189ca2eacfd0caa7dbd17d200efd0ea
    Remove sound, memtest, vibrator, timetest, cachetest from tests build
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add missing symbol type directives.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add missing symbol type directives.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    add suspend stress tester
    
    Add a command line tool that will fire an alarm every few seconds
    to stress test going in and out of suspend.
    
    Change-Id: Iaea31fe2bc8cdc8e5ce3e55fe56aed85680a5adc
    Fix missing #includes in system/extras.
    
    Change-Id: I78000cea6b2012f571e596ed400b3f04847cb761
    add suspend stress tester
    
    Add a command line tool that will fire an alarm every few seconds
    to stress test going in and out of suspend.
    
    Change-Id: Iaea31fe2bc8cdc8e5ce3e55fe56aed85680a5adc
    Load test for the sdcard.
    
    Simulate loads on the sdcard for write, read and open operations using
    one or more process.
    
    The number of processes to run concurently can be specified on the command line.
    The size of the file and the number of iterations (for averaging result) are
    also a command line flag.
    
    The user can have summary of the performance plus the raw data for
    processing with a separate tool.
    
    There is a basic python script to help plotting the result.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    android-2.1_r1 snapshot
    Add standard deviation to the test results
    Load test for the sdcard.
    
    Simulate loads on the sdcard for write, read and open operations using
    one or more process.
    
    The number of processes to run concurently can be specified on the command line.
    The size of the file and the number of iterations (for averaging result) are
    also a command line flag.
    
    The user can have summary of the performance plus the raw data for
    processing with a separate tool.
    
    There is a basic python script to help plotting the result.
    Add directory tree traversal benchmark.
    
    Generates a directory tree with requested depth, also writing files
    at each leaf to add width.  Then it times traversal of entire tree,
    which can reveal impact of VFS caching inside kernel.
    
    Also specify mode_t when creating files.
    
    Bug: 6925012
    Change-Id: I65370d6fd0b9777e959be3a0867f27ce22ee4644
    Load test for the sdcard.
    
    Simulate loads on the sdcard for write, read and open operations using
    one or more process.
    
    The number of processes to run concurently can be specified on the command line.
    The size of the file and the number of iterations (for averaging result) are
    also a command line flag.
    
    The user can have summary of the performance plus the raw data for
    processing with a separate tool.
    
    There is a basic python script to help plotting the result.
    android-2.1_r1 snapshot
    Add standard deviation to the test results
    Added main with command line args to plot the data.
    
    New shell script to generate scalability data.
    
    Fixed copyright notice.
    Fixed incomplete metadata issue when debugfs was not mounted.
    Load test for the sdcard.
    
    Simulate loads on the sdcard for write, read and open operations using
    one or more process.
    
    The number of processes to run concurently can be specified on the command line.
    The size of the file and the number of iterations (for averaging result) are
    also a command line flag.
    
    The user can have summary of the performance plus the raw data for
    processing with a separate tool.
    
    There is a basic python script to help plotting the result.
    Load test for the sdcard.
    
    Simulate loads on the sdcard for write, read and open operations using
    one or more process.
    
    The number of processes to run concurently can be specified on the command line.
    The size of the file and the number of iterations (for averaging result) are
    also a command line flag.
    
    The user can have summary of the performance plus the raw data for
    processing with a separate tool.
    
    There is a basic python script to help plotting the result.
    Add directory tree traversal benchmark.
    
    Generates a directory tree with requested depth, also writing files
    at each leaf to add width.  Then it times traversal of entire tree,
    which can reveal impact of VFS caching inside kernel.
    
    Also specify mode_t when creating files.
    
    Bug: 6925012
    Change-Id: I65370d6fd0b9777e959be3a0867f27ce22ee4644
    Load test for the sdcard.
    
    Simulate loads on the sdcard for write, read and open operations using
    one or more process.
    
    The number of processes to run concurently can be specified on the command line.
    The size of the file and the number of iterations (for averaging result) are
    also a command line flag.
    
    The user can have summary of the performance plus the raw data for
    processing with a separate tool.
    
    There is a basic python script to help plotting the result.
    eclair snapshot
    Fixed the plotting script to work with latest kernel version.
    
    Added a README file with basic instructions to build and
    run the tests.
    Add directory tree traversal benchmark.
    
    Generates a directory tree with requested depth, also writing files
    at each leaf to add width.  Then it times traversal of entire tree,
    which can reveal impact of VFS caching inside kernel.
    
    Also specify mode_t when creating files.
    
    Bug: 6925012
    Change-Id: I65370d6fd0b9777e959be3a0867f27ce22ee4644
    Load test for the sdcard.
    
    Simulate loads on the sdcard for write, read and open operations using
    one or more process.
    
    The number of processes to run concurently can be specified on the command line.
    The size of the file and the number of iterations (for averaging result) are
    also a command line flag.
    
    The user can have summary of the performance plus the raw data for
    processing with a separate tool.
    
    There is a basic python script to help plotting the result.
    eclair snapshot
    Added check for the version of Gnuplot.
    
    Must be 1.8
    Fixed the plotting script to work with latest kernel version.
    
    Added a README file with basic instructions to build and
    run the tests.
    Added main with command line args to plot the data.
    
    New shell script to generate scalability data.
    
    Fixed copyright notice.
    Fixed incomplete metadata issue when debugfs was not mounted.
    Load test for the sdcard.
    
    Simulate loads on the sdcard for write, read and open operations using
    one or more process.
    
    The number of processes to run concurently can be specified on the command line.
    The size of the file and the number of iterations (for averaging result) are
    also a command line flag.
    
    The user can have summary of the performance plus the raw data for
    processing with a separate tool.
    
    There is a basic python script to help plotting the result.
    Load test for the sdcard.
    
    Simulate loads on the sdcard for write, read and open operations using
    one or more process.
    
    The number of processes to run concurently can be specified on the command line.
    The size of the file and the number of iterations (for averaging result) are
    also a command line flag.
    
    The user can have summary of the performance plus the raw data for
    processing with a separate tool.
    
    There is a basic python script to help plotting the result.
    Added main with command line args to plot the data.
    
    New shell script to generate scalability data.
    
    Fixed copyright notice.
    Fixed incomplete metadata issue when debugfs was not mounted.
    fs_mgr exports its headers.
    
    Change-Id: I6fddb60a902be5ac216d32a751ec8c178c26ebaf
    Remove perm_checker and mounts-test.sh.
    
    These are enforced by SELinux and tested by CTS now.
    
    Change-Id: If506327f108c39449c611264a10623be9f1782fa
    fstest: Add a set of filesystem recovery tests with gTest.
    
    Tests to verify recovery from super block and gdt corruption.
    
    TESTED:
    Verified in dmesg that e2fsck is detecting and fixing errors in the
    filesystem.
    
    Change-Id: I1da6352c67fda3466b57875554a42291bd11809c
    Moves the out location of perm_checker and perm_checker.conf to /data/local
    Remove sound, memtest, vibrator, timetest, cachetest from tests build
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    fstest: Add a set of filesystem recovery tests with gTest.
    
    Tests to verify recovery from super block and gdt corruption.
    
    TESTED:
    Verified in dmesg that e2fsck is detecting and fixing errors in the
    filesystem.
    
    Change-Id: I1da6352c67fda3466b57875554a42291bd11809c
    Move system/extras to libc++.
    
    Bug: 15193147
    Change-Id: I2188179aa315b6b94493135cfb243d5a9018fd10
    Remove makefile cruft.
    
    Don't manually include stlport, and don't use private bionic headers.
    
    Change-Id: I0762ada6a759bcbb9b1d40f8bfd2255949da860d
    Adding a few bandwidth tests.
    
    New tests being added:
    - copy_bandwidth: Gathers the copy bandwidth using four different
      hand-coded assembler routines and using memcpy.
    - write_bandwidth: Gathers the write bandwidth using four different
      hand-coded assembler routines and using memset.
    - per_core_bandwidth: Launches a thread of any one of the write/copy
      bandwidth tests locked to every available core on the machine.
    - multithread_bandwidth: Launches a user specified number of threads running
      any one of the write/copy bandwidth tests.
    
    Each of the tests can be modified as to the size of the data to manipulate
    and the number of loops to run.
    
    Deleted tests:
    - memcpy (a better memcpy benchmark can be found in system/extras/micro_bench)
    - memset (a better memset benchmark can be found in system/extras/micro_bench)
    - memcmp (no real replacement, but I plan to add this to micro_bench)
    - strlen (no real replacement, but I plan to add this to micro_bench)
    - cpufreq (this doesn't work any more)
    
    All verification tests have been mostly shifted to system/extras/libc_test.
    
    Merge from internal master.
    
    (cherry-picked from commit 1348ce27ee9bb8e50a3294879c1523fa4b4d8f8b)
    
    Change-Id: I96e9f26357e4bac1d7bb8736176d80cc41d0b36b
    Adding a few bandwidth tests.
    
    New tests being added:
    - copy_bandwidth: Gathers the copy bandwidth using four different
      hand-coded assembler routines and using memcpy.
    - write_bandwidth: Gathers the write bandwidth using four different
      hand-coded assembler routines and using memset.
    - per_core_bandwidth: Launches a thread of any one of the write/copy
      bandwidth tests locked to every available core on the machine.
    - multithread_bandwidth: Launches a user specified number of threads running
      any one of the write/copy bandwidth tests.
    
    Each of the tests can be modified as to the size of the data to manipulate
    and the number of loops to run.
    
    Deleted tests:
    - memcpy (a better memcpy benchmark can be found in system/extras/micro_bench)
    - memset (a better memset benchmark can be found in system/extras/micro_bench)
    - memcmp (no real replacement, but I plan to add this to micro_bench)
    - strlen (no real replacement, but I plan to add this to micro_bench)
    - cpufreq (this doesn't work any more)
    
    All verification tests have been mostly shifted to system/extras/libc_test.
    
    Change-Id: I70d1e27da3b2ff1a4c8fc257e03b9c43c8c9e7cc
    Fix for X86 target
    
    The X86 target couldn't compile some tests that use assembly, but it can
    compile other things that now depend on some projects in the test subdir
    (namely libtestUtil for OpenGL tests)
    
    Also fatblock was including <sys/endian.h> directly instead of
    <endian.h> which broke some stuff on X86
    
    Change-Id: Ib71a6e548189ca2eacfd0caa7dbd17d200efd0ea
    Add FP test
    
    Change-Id: I8c40e48e8855d0b50e5a1242ccc520fa9a8af84d
    Remove sound, memtest, vibrator, timetest, cachetest from tests build
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Initial Contribution
    Move system/extras to libc++.
    
    Bug: 15193147
    Change-Id: I2188179aa315b6b94493135cfb243d5a9018fd10
    Add vldr vstr type benchmarking.
    
    Merge from internal master.
    
    (cherry-picked from commit 65d2c7894a93f66ea41d55f843285e7e7bdbf488)
    
    Change-Id: I854b5f310fa44efcaf93af14b84ffe5673cc46c0
    Add vldr vstr type benchmarking.
    
    Change-Id: Ib8d9ac401feacbfd2e0862ad0e5fd2c13a233c58
    Fix a few incorrect return codes.
    
    Merge from internal master.
    
    (cherry-picked from f90ab5f4ab00ddfbcf313be9001837aaefd64ba2)
    
    Change-Id: I87379bac089107a95301015d849433c9e304a988
    Fix a few incorrect return codes.
    
    Change-Id: I91b9e3cfc443698963e2e98fc4378bf92e5bfd95
    Add read bandwidth and small refactor.
    
    - Addition of read bandwidth test.
    - Move the allocation of all buffers used for testing into the
      setSize() function.
    - Add a canRun function to indicate whether a test is able to
      run on this platform. Currently, this only disables neon bandwidth
      tests on platforms that don't support neon.
    - Refactor the thread testing functions to use one common routine.
    
    Merge from internal master.
    
    (cherry-picked from 1a3794a84074d7f22b8ddaba840aedd758a14cdd)
    
    Change-Id: Ie0f29ec7e484a376471d121333b1982be8f41393
    Add read bandwidth and small refactor.
    
    - Addition of read bandwidth test.
    - Move the allocation of all buffers used for testing into the
      setSize() function.
    - Add a canRun function to indicate whether a test is able to
      run on this platform. Currently, this only disables neon bandwidth
      tests on platforms that don't support neon.
    - Refactor the thread testing functions to use one common routine.
    
    Change-Id: I4ebed7d20100f57e93fd10bbe9dbbb53b50cd4a6
    Adding a few bandwidth tests.
    
    New tests being added:
    - copy_bandwidth: Gathers the copy bandwidth using four different
      hand-coded assembler routines and using memcpy.
    - write_bandwidth: Gathers the write bandwidth using four different
      hand-coded assembler routines and using memset.
    - per_core_bandwidth: Launches a thread of any one of the write/copy
      bandwidth tests locked to every available core on the machine.
    - multithread_bandwidth: Launches a user specified number of threads running
      any one of the write/copy bandwidth tests.
    
    Each of the tests can be modified as to the size of the data to manipulate
    and the number of loops to run.
    
    Deleted tests:
    - memcpy (a better memcpy benchmark can be found in system/extras/micro_bench)
    - memset (a better memset benchmark can be found in system/extras/micro_bench)
    - memcmp (no real replacement, but I plan to add this to micro_bench)
    - strlen (no real replacement, but I plan to add this to micro_bench)
    - cpufreq (this doesn't work any more)
    
    All verification tests have been mostly shifted to system/extras/libc_test.
    
    Merge from internal master.
    
    (cherry-picked from commit 1348ce27ee9bb8e50a3294879c1523fa4b4d8f8b)
    
    Change-Id: I96e9f26357e4bac1d7bb8736176d80cc41d0b36b
    Adding a few bandwidth tests.
    
    New tests being added:
    - copy_bandwidth: Gathers the copy bandwidth using four different
      hand-coded assembler routines and using memcpy.
    - write_bandwidth: Gathers the write bandwidth using four different
      hand-coded assembler routines and using memset.
    - per_core_bandwidth: Launches a thread of any one of the write/copy
      bandwidth tests locked to every available core on the machine.
    - multithread_bandwidth: Launches a user specified number of threads running
      any one of the write/copy bandwidth tests.
    
    Each of the tests can be modified as to the size of the data to manipulate
    and the number of loops to run.
    
    Deleted tests:
    - memcpy (a better memcpy benchmark can be found in system/extras/micro_bench)
    - memset (a better memset benchmark can be found in system/extras/micro_bench)
    - memcmp (no real replacement, but I plan to add this to micro_bench)
    - strlen (no real replacement, but I plan to add this to micro_bench)
    - cpufreq (this doesn't work any more)
    
    All verification tests have been mostly shifted to system/extras/libc_test.
    
    Change-Id: I70d1e27da3b2ff1a4c8fc257e03b9c43c8c9e7cc
    Add missing <string.h> include.
    
    Change-Id: I7262823b75bbcce47697fe246f6c8e902a931c8c
    More C++11 compatibility.
    
    Bug: 18466763
    Change-Id: Ia308b7c8017cfdb7bebf5c307730ef3f0ef6f572
    Move system/extras to libc++.
    
    Bug: 15193147
    Change-Id: I2188179aa315b6b94493135cfb243d5a9018fd10
    Add vldr vstr type benchmarking.
    
    Merge from internal master.
    
    (cherry-picked from commit 65d2c7894a93f66ea41d55f843285e7e7bdbf488)
    
    Change-Id: I854b5f310fa44efcaf93af14b84ffe5673cc46c0
    Add vldr vstr type benchmarking.
    
    Change-Id: Ib8d9ac401feacbfd2e0862ad0e5fd2c13a233c58
    Add guards around neon code.
    
    Missed the neon code in the copy bandwidths. Added guards and the
    functionality to indicate that these are neon based benchmarks.
    
    (cherry-pick of a67e53c2345eac337d24e4decaf4733c5314aff8.)
    
    Change-Id: If0fae051c47979eb243681a3c994222cefaae826
    Add guards around neon code.
    
    Missed the neon code in the copy bandwidths. Added guards and the
    functionality to indicate that these are neon based benchmarks.
    
    Change-Id: I350d984b27063c47b3c78fc1fa88d33fae960d78
    Add read bandwidth and small refactor.
    
    - Addition of read bandwidth test.
    - Move the allocation of all buffers used for testing into the
      setSize() function.
    - Add a canRun function to indicate whether a test is able to
      run on this platform. Currently, this only disables neon bandwidth
      tests on platforms that don't support neon.
    - Refactor the thread testing functions to use one common routine.
    
    Merge from internal master.
    
    (cherry-picked from 1a3794a84074d7f22b8ddaba840aedd758a14cdd)
    
    Change-Id: Ie0f29ec7e484a376471d121333b1982be8f41393
    Add read bandwidth and small refactor.
    
    - Addition of read bandwidth test.
    - Move the allocation of all buffers used for testing into the
      setSize() function.
    - Add a canRun function to indicate whether a test is able to
      run on this platform. Currently, this only disables neon bandwidth
      tests on platforms that don't support neon.
    - Refactor the thread testing functions to use one common routine.
    
    Change-Id: I4ebed7d20100f57e93fd10bbe9dbbb53b50cd4a6
    Add defines around neon code.
    
    Merge from internal master.
    
    (cherry-picked from commit e5282ae49814c9ed0b9bdec920a20e6978349327)
    
    Change-Id: I00bf68545987ef360fe489b14df8e11fdd7b687b
    Add defines around neon code.
    
    Change-Id: Ia19f21ddf9fa4114ebea3e397a43ea63e260da2e
    Adding a few bandwidth tests.
    
    New tests being added:
    - copy_bandwidth: Gathers the copy bandwidth using four different
      hand-coded assembler routines and using memcpy.
    - write_bandwidth: Gathers the write bandwidth using four different
      hand-coded assembler routines and using memset.
    - per_core_bandwidth: Launches a thread of any one of the write/copy
      bandwidth tests locked to every available core on the machine.
    - multithread_bandwidth: Launches a user specified number of threads running
      any one of the write/copy bandwidth tests.
    
    Each of the tests can be modified as to the size of the data to manipulate
    and the number of loops to run.
    
    Deleted tests:
    - memcpy (a better memcpy benchmark can be found in system/extras/micro_bench)
    - memset (a better memset benchmark can be found in system/extras/micro_bench)
    - memcmp (no real replacement, but I plan to add this to micro_bench)
    - strlen (no real replacement, but I plan to add this to micro_bench)
    - cpufreq (this doesn't work any more)
    
    All verification tests have been mostly shifted to system/extras/libc_test.
    
    Merge from internal master.
    
    (cherry-picked from commit 1348ce27ee9bb8e50a3294879c1523fa4b4d8f8b)
    
    Change-Id: I96e9f26357e4bac1d7bb8736176d80cc41d0b36b
    Adding a few bandwidth tests.
    
    New tests being added:
    - copy_bandwidth: Gathers the copy bandwidth using four different
      hand-coded assembler routines and using memcpy.
    - write_bandwidth: Gathers the write bandwidth using four different
      hand-coded assembler routines and using memset.
    - per_core_bandwidth: Launches a thread of any one of the write/copy
      bandwidth tests locked to every available core on the machine.
    - multithread_bandwidth: Launches a user specified number of threads running
      any one of the write/copy bandwidth tests.
    
    Each of the tests can be modified as to the size of the data to manipulate
    and the number of loops to run.
    
    Deleted tests:
    - memcpy (a better memcpy benchmark can be found in system/extras/micro_bench)
    - memset (a better memset benchmark can be found in system/extras/micro_bench)
    - memcmp (no real replacement, but I plan to add this to micro_bench)
    - strlen (no real replacement, but I plan to add this to micro_bench)
    - cpufreq (this doesn't work any more)
    
    All verification tests have been mostly shifted to system/extras/libc_test.
    
    Change-Id: I70d1e27da3b2ff1a4c8fc257e03b9c43c8c9e7cc
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Adding a few bandwidth tests.
    
    New tests being added:
    - copy_bandwidth: Gathers the copy bandwidth using four different
      hand-coded assembler routines and using memcpy.
    - write_bandwidth: Gathers the write bandwidth using four different
      hand-coded assembler routines and using memset.
    - per_core_bandwidth: Launches a thread of any one of the write/copy
      bandwidth tests locked to every available core on the machine.
    - multithread_bandwidth: Launches a user specified number of threads running
      any one of the write/copy bandwidth tests.
    
    Each of the tests can be modified as to the size of the data to manipulate
    and the number of loops to run.
    
    Deleted tests:
    - memcpy (a better memcpy benchmark can be found in system/extras/micro_bench)
    - memset (a better memset benchmark can be found in system/extras/micro_bench)
    - memcmp (no real replacement, but I plan to add this to micro_bench)
    - strlen (no real replacement, but I plan to add this to micro_bench)
    - cpufreq (this doesn't work any more)
    
    All verification tests have been mostly shifted to system/extras/libc_test.
    
    Merge from internal master.
    
    (cherry-picked from commit 1348ce27ee9bb8e50a3294879c1523fa4b4d8f8b)
    
    Change-Id: I96e9f26357e4bac1d7bb8736176d80cc41d0b36b
    ext4_utils: brought over from master
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Overhaul FP tests to be simpler and report a more basic metric.
    
    Change-Id: I90eabb01e0ac3fd1aed2c29ea19cc08cf96cc515
    Add FP test
    
    Change-Id: I8c40e48e8855d0b50e5a1242ccc520fa9a8af84d
    Add vldr vstr type benchmarking.
    
    Merge from internal master.
    
    (cherry-picked from commit 65d2c7894a93f66ea41d55f843285e7e7bdbf488)
    
    Change-Id: I854b5f310fa44efcaf93af14b84ffe5673cc46c0
    Add vldr vstr type benchmarking.
    
    Change-Id: Ib8d9ac401feacbfd2e0862ad0e5fd2c13a233c58
    Add read bandwidth and small refactor.
    
    - Addition of read bandwidth test.
    - Move the allocation of all buffers used for testing into the
      setSize() function.
    - Add a canRun function to indicate whether a test is able to
      run on this platform. Currently, this only disables neon bandwidth
      tests on platforms that don't support neon.
    - Refactor the thread testing functions to use one common routine.
    
    Merge from internal master.
    
    (cherry-picked from 1a3794a84074d7f22b8ddaba840aedd758a14cdd)
    
    Change-Id: Ie0f29ec7e484a376471d121333b1982be8f41393
    Add read bandwidth and small refactor.
    
    - Addition of read bandwidth test.
    - Move the allocation of all buffers used for testing into the
      setSize() function.
    - Add a canRun function to indicate whether a test is able to
      run on this platform. Currently, this only disables neon bandwidth
      tests on platforms that don't support neon.
    - Refactor the thread testing functions to use one common routine.
    
    Change-Id: I4ebed7d20100f57e93fd10bbe9dbbb53b50cd4a6
    Adding a few bandwidth tests.
    
    New tests being added:
    - copy_bandwidth: Gathers the copy bandwidth using four different
      hand-coded assembler routines and using memcpy.
    - write_bandwidth: Gathers the write bandwidth using four different
      hand-coded assembler routines and using memset.
    - per_core_bandwidth: Launches a thread of any one of the write/copy
      bandwidth tests locked to every available core on the machine.
    - multithread_bandwidth: Launches a user specified number of threads running
      any one of the write/copy bandwidth tests.
    
    Each of the tests can be modified as to the size of the data to manipulate
    and the number of loops to run.
    
    Deleted tests:
    - memcpy (a better memcpy benchmark can be found in system/extras/micro_bench)
    - memset (a better memset benchmark can be found in system/extras/micro_bench)
    - memcmp (no real replacement, but I plan to add this to micro_bench)
    - strlen (no real replacement, but I plan to add this to micro_bench)
    - cpufreq (this doesn't work any more)
    
    All verification tests have been mostly shifted to system/extras/libc_test.
    
    Merge from internal master.
    
    (cherry-picked from commit 1348ce27ee9bb8e50a3294879c1523fa4b4d8f8b)
    
    Change-Id: I96e9f26357e4bac1d7bb8736176d80cc41d0b36b
    Adding a few bandwidth tests.
    
    New tests being added:
    - copy_bandwidth: Gathers the copy bandwidth using four different
      hand-coded assembler routines and using memcpy.
    - write_bandwidth: Gathers the write bandwidth using four different
      hand-coded assembler routines and using memset.
    - per_core_bandwidth: Launches a thread of any one of the write/copy
      bandwidth tests locked to every available core on the machine.
    - multithread_bandwidth: Launches a user specified number of threads running
      any one of the write/copy bandwidth tests.
    
    Each of the tests can be modified as to the size of the data to manipulate
    and the number of loops to run.
    
    Deleted tests:
    - memcpy (a better memcpy benchmark can be found in system/extras/micro_bench)
    - memset (a better memset benchmark can be found in system/extras/micro_bench)
    - memcmp (no real replacement, but I plan to add this to micro_bench)
    - strlen (no real replacement, but I plan to add this to micro_bench)
    - cpufreq (this doesn't work any more)
    
    All verification tests have been mostly shifted to system/extras/libc_test.
    
    Change-Id: I70d1e27da3b2ff1a4c8fc257e03b9c43c8c9e7cc
    Reduce warnings in memtest compilation
    
    Change-Id: I7afe6d6fa5229714530e92a70eede50103db48b2
    Add FP test
    
    Change-Id: I8c40e48e8855d0b50e5a1242ccc520fa9a8af84d
    Make memtest conform to POSIX memcmp defn
    eclair snapshot
    added a simple way to swap memcpy for another function
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Enhancements to workload scripts
    
    - display frame latencies (90th/95th/99th) for recents and systemapps
    - allow device type to be specified to capture
    - workaround for am hang when starting chrome on volantis
    - bullhead support for recentfling
    
    New output of "recentfling.sh":
    
    Fling recents...
    Frames: 772 latency: 19/22/34 Janks: 131(16%)
    
    New output of "systemapps.sh -T":
    
    App      Start(ms) Iter(ms) Jank      Latency
    gmail       1090    2168      69(72%) 65/75/88
    hangouts    1757    2758      60(82%) 69/111/114
    chrome         0     997      59(64%) 68/77/84
    youtube     3533    4834     140(48%) 70/93/150
    play        1868    3147      92(62%) 89/106/182
    home           0    1125     210(15%) 62/84/129
    TOTAL       8248   35052
    
    Change-Id: If4fc94ab0188dae2afabfbf696be06b6ddf55ce1
    Scripts to automate simple workloads for testing
    
    DO NOT MERGE (already in master)
    
    The initial set of scripts:
    recentsfling.sh : start a set of apps, switch to recents and fling
    systemapps.sh : start a set of apps, and then loop to move them
                    to the forground, checking whether the app had
                    been LMK'd or required direct reclaims
    feedly-chrome.sh : automate a feedly, chrome
                    workflow making sure both stay in memory
    
    Change-Id: I40f0862623ea0963bb0eaed3a585b41b69bbbbc7
    fix chrome activity name in systemapps.sh
    
    the activity name for chrome changed recently which broke
    systemapps.sh for some devices/builds. This change removes
    the dependance on the chrome activity name in  systemapps.sh
    
    Change-Id: I7f194a5c60221650300b6ab0df526f5bdf4b7f79
    Add -W option to systemapps.sh
    
    Changes the wait time between apps. Example; "./systemapps.sh -W 1.2"
    
    Change-Id: I3769aa93ebbcd129de2f3fa3df99720e1d83b2f9
    Enhancements to workload scripts
    
    - display frame latencies (90th/95th/99th) for recents and systemapps
    - allow device type to be specified to capture
    - workaround for am hang when starting chrome on volantis
    - bullhead support for recentfling
    
    New output of "recentfling.sh":
    
    Fling recents...
    Frames: 772 latency: 19/22/34 Janks: 131(16%)
    
    New output of "systemapps.sh -T":
    
    App      Start(ms) Iter(ms) Jank      Latency
    gmail       1090    2168      69(72%) 65/75/88
    hangouts    1757    2758      60(82%) 69/111/114
    chrome         0     997      59(64%) 68/77/84
    youtube     3533    4834     140(48%) 70/93/150
    play        1868    3147      92(62%) 89/106/182
    home           0    1125     210(15%) 62/84/129
    TOTAL       8248   35052
    
    Change-Id: If4fc94ab0188dae2afabfbf696be06b6ddf55ce1
    Scripts to automate simple workloads for testing
    
    DO NOT MERGE (already in master)
    
    The initial set of scripts:
    recentsfling.sh : start a set of apps, switch to recents and fling
    systemapps.sh : start a set of apps, and then loop to move them
                    to the forground, checking whether the app had
                    been LMK'd or required direct reclaims
    feedly-chrome.sh : automate a feedly, chrome
                    workflow making sure both stay in memory
    
    Change-Id: I40f0862623ea0963bb0eaed3a585b41b69bbbbc7
    fix chrome activity name in systemapps.sh
    
    the activity name for chrome changed recently which broke
    systemapps.sh for some devices/builds. This change removes
    the dependance on the chrome activity name in  systemapps.sh
    
    Change-Id: I7f194a5c60221650300b6ab0df526f5bdf4b7f79
    Enhancements to workload scripts
    
    - display frame latencies (90th/95th/99th) for recents and systemapps
    - allow device type to be specified to capture
    - workaround for am hang when starting chrome on volantis
    - bullhead support for recentfling
    
    New output of "recentfling.sh":
    
    Fling recents...
    Frames: 772 latency: 19/22/34 Janks: 131(16%)
    
    New output of "systemapps.sh -T":
    
    App      Start(ms) Iter(ms) Jank      Latency
    gmail       1090    2168      69(72%) 65/75/88
    hangouts    1757    2758      60(82%) 69/111/114
    chrome         0     997      59(64%) 68/77/84
    youtube     3533    4834     140(48%) 70/93/150
    play        1868    3147      92(62%) 89/106/182
    home           0    1125     210(15%) 62/84/129
    TOTAL       8248   35052
    
    Change-Id: If4fc94ab0188dae2afabfbf696be06b6ddf55ce1
    Fix hang when starting chrome
    
    Stop using the activity string and always use theverge.com
    
    Change-Id: I22efebe83e8baffecd2a8510ec75c9269f1c24ef
    Scripts to automate simple workloads for testing
    
    DO NOT MERGE (already in master)
    
    The initial set of scripts:
    recentsfling.sh : start a set of apps, switch to recents and fling
    systemapps.sh : start a set of apps, and then loop to move them
                    to the forground, checking whether the app had
                    been LMK'd or required direct reclaims
    feedly-chrome.sh : automate a feedly, chrome
                    workflow making sure both stay in memory
    
    Change-Id: I40f0862623ea0963bb0eaed3a585b41b69bbbbc7
    Scripts to automate simple workloads for testing
    
    DO NOT MERGE (already in master)
    
    The initial set of scripts:
    recentsfling.sh : start a set of apps, switch to recents and fling
    systemapps.sh : start a set of apps, and then loop to move them
                    to the forground, checking whether the app had
                    been LMK'd or required direct reclaims
    feedly-chrome.sh : automate a feedly, chrome
                    workflow making sure both stay in memory
    
    Change-Id: I40f0862623ea0963bb0eaed3a585b41b69bbbbc7
    Enhancements to workload scripts
    
    - display frame latencies (90th/95th/99th) for recents and systemapps
    - allow device type to be specified to capture
    - workaround for am hang when starting chrome on volantis
    - bullhead support for recentfling
    
    New output of "recentfling.sh":
    
    Fling recents...
    Frames: 772 latency: 19/22/34 Janks: 131(16%)
    
    New output of "systemapps.sh -T":
    
    App      Start(ms) Iter(ms) Jank      Latency
    gmail       1090    2168      69(72%) 65/75/88
    hangouts    1757    2758      60(82%) 69/111/114
    chrome         0     997      59(64%) 68/77/84
    youtube     3533    4834     140(48%) 70/93/150
    play        1868    3147      92(62%) 89/106/182
    home           0    1125     210(15%) 62/84/129
    TOTAL       8248   35052
    
    Change-Id: If4fc94ab0188dae2afabfbf696be06b6ddf55ce1
    Scripts to automate simple workloads for testing
    
    DO NOT MERGE (already in master)
    
    The initial set of scripts:
    recentsfling.sh : start a set of apps, switch to recents and fling
    systemapps.sh : start a set of apps, and then loop to move them
                    to the forground, checking whether the app had
                    been LMK'd or required direct reclaims
    feedly-chrome.sh : automate a feedly, chrome
                    workflow making sure both stay in memory
    
    Change-Id: I40f0862623ea0963bb0eaed3a585b41b69bbbbc7
    Scripts to automate simple workloads for testing
    
    DO NOT MERGE (already in master)
    
    The initial set of scripts:
    recentsfling.sh : start a set of apps, switch to recents and fling
    systemapps.sh : start a set of apps, and then loop to move them
                    to the forground, checking whether the app had
                    been LMK'd or required direct reclaims
    feedly-chrome.sh : automate a feedly, chrome
                    workflow making sure both stay in memory
    
    Change-Id: I40f0862623ea0963bb0eaed3a585b41b69bbbbc7
    auto import from //branches/cupcake/...@137197
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@136594
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Initial Contribution
    Automated import from //branches/donutburger/...@140818,140818
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add missing fcntl.h for pagingtest.c.
    
    Change-Id: I32ff00c9e00978b0d5787beb96c2bd1ad3455910
    Change file to include sys/time.h directly.
    
    Bug: 18627763
    Change-Id: Iba26399ab1ae1ae2a37246415bec02d9f9f7c300
    Add paging test
    
    Add a system paging test that measures the following things:
    - mmap and munmap a file
    - page a file and and out of memory
    - thrash the page cache by bringing in more pages than the system can hold in RAM
    
    Change-Id: I46dfb52a02e5030babd5b24c13a2abca779aeb02
    Add paging test
    
    Add a system paging test that measures the following things:
    - mmap and munmap a file
    - page a file and and out of memory
    - thrash the page cache by bringing in more pages than the system can hold in RAM
    
    Change-Id: I46dfb52a02e5030babd5b24c13a2abca779aeb02
    Change file to include sys/time.h directly.
    
    Bug: 18627763
    Change-Id: Iba26399ab1ae1ae2a37246415bec02d9f9f7c300
    Add paging test
    
    Add a system paging test that measures the following things:
    - mmap and munmap a file
    - page a file and and out of memory
    - thrash the page cache by bringing in more pages than the system can hold in RAM
    
    Change-Id: I46dfb52a02e5030babd5b24c13a2abca779aeb02
    Change file to include sys/time.h directly.
    
    Bug: 18627763
    Change-Id: Iba26399ab1ae1ae2a37246415bec02d9f9f7c300
    Add paging test
    
    Add a system paging test that measures the following things:
    - mmap and munmap a file
    - page a file and and out of memory
    - thrash the page cache by bringing in more pages than the system can hold in RAM
    
    Change-Id: I46dfb52a02e5030babd5b24c13a2abca779aeb02
    Add paging test
    
    Add a system paging test that measures the following things:
    - mmap and munmap a file
    - page a file and and out of memory
    - thrash the page cache by bringing in more pages than the system can hold in RAM
    
    Change-Id: I46dfb52a02e5030babd5b24c13a2abca779aeb02
    Change file to include sys/time.h directly.
    
    Bug: 18627763
    Change-Id: Iba26399ab1ae1ae2a37246415bec02d9f9f7c300
    Add paging test
    
    Add a system paging test that measures the following things:
    - mmap and munmap a file
    - page a file and and out of memory
    - thrash the page cache by bringing in more pages than the system can hold in RAM
    
    Change-Id: I46dfb52a02e5030babd5b24c13a2abca779aeb02
    New test to shmoo the size of the working set against the memory system.
    
    Find out the sweet spot of the paging system and approximate the page fault
    latency.
    Remove sound, memtest, vibrator, timetest, cachetest from tests build
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Initial Contribution
    New test to shmoo the size of the working set against the memory system.
    
    Find out the sweet spot of the paging system and approximate the page fault
    latency.
    bionic libc tests: clean up tests for seteuid call
    
    Clean up files and settings for seteuid test here,
    Since the tests will be migrated to unistd.seteuid* test
    in bionic/tests/unistd_test.cpp file
    
    Change-Id: Ia24b03c1e9a73e5e6c532e591a9d532253f0b9d1
    Signed-off-by: Yongqin Liu <yongqin.liu@linaro.org>
    bionic libc tests: clean up test_udp.c
    
    clean up the file and setting for file
        tests/bionic/libc/common/test_udp.c
    
    Change-Id: Id7889910e87309415b9504e6693322697907f426
    Signed-off-by: Yongqin Liu <yongqin.liu@linaro.org>
    bionic libc tests: clean up the tests for setjmp
    
    remove the file and settings of tests for setjmp
    
    Change-Id: I79f4997de3da2aa55ea2b1de992b8f4a60c0829a
    Signed-off-by: Yongqin Liu <yongqin.liu@linaro.org>
    bionic libc tests: clean up setting for hello_world.cpp
    
    clean up the remaining settings for hello_world.cpp
    in file tests/bionic/libc/Android.mk
    
    Change-Id: I6108a0d7e33c677dd2dba6dde3155f088d3fe14e
    Signed-off-by: Yongqin Liu <yongqin.liu@linaro.org>
    bionic libc tests: clean up test for static_init
    
    This change is to delete the static init test related files and settings.
    Since they do not contain useful test, they only test the member behivor
    in CPP constructor which are tested in bionic/tests/dlcfn_test.cpp file
    
    Change-Id: I06a882e16f9f917e79d82c2b78978a6f1e7c2bb6
    Signed-off-by: Yongqin Liu <yongqin.liu@linaro.org>
    bionic test libc: clean up test for pthread_once
    
    the test implemented in file
        tests/bionic/libc/common/test_pthread_once.c
    has been re-implemented in file
        bionic/test/pthread_once_smoke
    by the tests pthread.pthread_once_smoke and pthread.pthread_once_1934122,
    so here remove the related file and settings
    
    Change-Id: I2c8d6f8a07419d4840512736cf264a86482f7eaf
    Signed-off-by: Yongqin Liu <yongqin.liu@linaro.org>
    bionic libc test: clean up tests for getgrouplist
    
    Since the tests for getgrouplist will be implemented in bionic/tests
    directory, the test files and setting will be deleted from here.
    
    Change-Id: Ib5ece65ef2475ae8acc9ce5bfd2a255b734aa906
    Signed-off-by: Yongqin Liu <yongqin.liu@linaro.org>
    bionic libs test: clean up for gethostname test
    
    since the tests for gethostname will be migrated into
    bionic/tests/unistd_test.cpp as unistd.gethostname test
    in the gtest format, the related files and settings will
    be cleaned up here.
    
    Change-Id: Ibe2bc9d3304ec9ac08a24a318276f07b84a1afea
    Signed-off-by: Yongqin Liu <yongqin.liu@linaro.org>
    bionic libc tests: clean up test_netinet_icmp.c file
    
    since no meaningful tests implemented in this file.
    
    Change-Id: I5846b65cd31eb70232c207394d622551eb72a4a0
    Signed-off-by: Yongqin Liu <yongqin.liu@linaro.org>
    bionic libc test: clean up pthread mutex type test
    
    clean up the pthread mutex types related tests implemented in
      tests/bionic/libc/bionic/test_mutex.c
    and related settings, since the tests will be migrated into file
      bionic/tests/pthread_test.cpp
    
    Change-Id: Icbbac40c42de7df49ff19bae54d71b455cafb987
    Signed-off-by: Yongqin Liu <yongqin.liu@linaro.org>
    bionic libc test: clean up test_static_cpp_mutex test
    
    delete related file and setting for test test_static_cpp_mutex,
    since it is migrated into bionic/tests/pthread_test.cpp in gtest format
    
    Change-Id: Ia9d165b18410c40a6f07a3b0b23d53bf8e355d05
    Signed-off-by: Yongqin Liu <yongqin.liu@linaro.org>
    bionic libc test: clean up sysconf test
    
    After migrated the sysconf tests in file
        tests/bionic/libc/other/test_sysconf.c
    to file bionic/tests/unistd_test.cpp,
    
    clean up the test implementation files and settings here.
    
    Change-Id: I1a29047e462d8e423c4125d6cb50634049b296ef
    Signed-off-by: Yongqin Liu <yongqin.liu@linaro.org>
    bionic libc tests: clean up tests for destructor in executable
    
    The tests for constructor/destructor in an executable file have
    been re-implemented by tests:
      dlfcn.ctor_function_call in bionic/tests/dlfcn_test.cpp
      atexit.exit in bionic/tests/atexit_test.cpp
    
    So it's no meaning keep the tests for destructor in executable here
    any more, and this change is to clean those files and settings up.
    
    One thing list here is that in this system/extras directory,
    tests for destructor in executable are tested both in statically linked
    format and dynamically linked format. But in the bionic/tests, it is only
    tested in dynamically linked format.
    But this should not the reason to keep the test files and settings here.
    
    Change-Id: I0ceb0450ca53b43bcf8473d54f08103519486992
    Signed-off-by: Yongqin Liu <yongqin.liu@linaro.org>
    bionic libc test: remove gethostbyname test
    
    The change is to remove the implementation for gethostbyname bionic test
    here, since the new test implementation will be done under bionic/test/netdb_test.cpp
    
    Change-Id: Idd52e3bd6d623a59d64b4f5fc84eb66856970941
    Signed-off-by: Yongqin Liu <yongqin.liu@linaro.org>
    bionic libc test: clean up test for dlopen_null
    
    The test for dlopen function with null specified have been
    re-implemented by dlfcn.dladdr test in bionic/tests/dlfcn_test.cpp.
    so here deleted it for cleaning up
    
    Change-Id: I99c3d1d2252b41c7484310fa20a1298d80ad565c
    Signed-off-by: Yongqin Liu <yongqin.liu@linaro.org>
    bionic libc test: clean up dlclose related test in system/extras
    
    The dlclose related tests are re-implemented in bionic/tests/atexit_test.cpp
    These files are no need to be here.
    
    Change-Id: I8da70ed2ac12d639f737d83476d1614f8d560410
    Signed-off-by: Yongqin Liu <yongqin.liu@linaro.org>
    bionic libc test: remove relocation related bionic test
    
    The change is to remove the implementation for relocation
    related bionic test, since the new test implementation will be done
    in bionic/tests/dlfcn_test.cpp
    
    Change-Id: Idd7cf264bef67ec515f3f68746008a481fb89343
    Signed-off-by: Yongqin Liu <yongqin.liu@linaro.org>
    bionic libc test: remove getaddrinfo test
    
    The change is to remove the implementation for getaddrinfo bionic test here,
    since the new test implementation will be done under bionic/test/netdb_test.cpp
    
    Change-Id: I0a23a6b823530be30fca13e87ac067f8ce70f495
    Signed-off-by: Yongqin Liu <yongqin.liu@linaro.org>
    Remove another obsolete test.
    
    Change-Id: Ic4629a5e2cba6431d4bd138c260bb8889df0ad78
    Remove obsolete semaphore tests.
    
    Change-Id: I96d0dbbb8d3482a19ce33e389971451fa630c84a
    Remove some obviously useless tests (and fix the others so they build).
    
    Some of these tests are stupid (hello_world.cpp), others are already replaced
    by more complete tests in bionic (test_cpu_set.cpp).
    
    Change-Id: Ie6d2723b049b4e9bb1b98ae0166be2c19551fdd0
    Remove a useless so-called test for arc4random.
    
    Bug: 14499627
    Change-Id: I01308d022da007f814f3fd8927341dfb3bf7e4cd
    Remove a test for dead code.
    
    Bug: 14903517
    Change-Id: I139ae922c6c9468606d3145f0c74361ed789d949
    Remove test_thread_max.
    
    Not actually a useful test, and we already test creating threads, including
    error conditions in bionic as part of CTS.
    
    Change-Id: If478b1e389c5cf65a9827da7f57efd696afc6523
    Remove test_pthread_getcpuclockid.
    
    Bionic already has a better test that's part of CTS.
    
    Change-Id: I2e6bfb795d5fe1393432673a082338d85c083444
    Remove obsolete benchmarks.
    
    bionic now has all of these.
    
    Change-Id: I0b65f019b88bc9ac7d33bd424361497320c66b7b
    Remove <time.h> tests.
    
    I've turned the strftime and strptime tests into CTS tests, and it's
    not obvious what the other test was usefully testing.
    
    Change-Id: I9d0ba08c6f2e2170e902e4a2aa379dd7289bdf6c
    Remove bench_locks, which is a subset of bench_pthread.
    
    Change-Id: Id8d952d2ca634f86aaaf01e05c98524d9110b054
    Remove tests that are already better tested as part of CTS.
    
    Change-Id: I06592a245c2229ca455156bab40eb1a815eef75b
    Remove timer tests.
    
    bionic contains a superset of these tests, and the binoic tests are
    part of CTS.
    
    Change-Id: I9e05d44749c6d6c94271a150fd8b71a297d6ebca
    Remove test_aligned.c. Nothing useful is being tested here.
    
    Change-Id: I831b55bba93b7bf30febcd90c12d77c3d929fa51
    test_atomics is an ARM specific test
    
    Bionic only defines the __atomic_xxx functions for ARM legacy support.
    
    Change-Id: I813cf9d66ccfc026f89cfbc0e5cbed202e263594
    Signed-off-by: Chris Dearman <chris@mips.com>
    libc: Add pthread and stdio benchmark test programs.
    
    This patch adds two test programs to system/extras/test/bionic/libc
    
    The first one can be used to benchmark simple stdio operation
    (for now fread() / fwrite()).
    
    The second one can be used to benchmark misc. pthread operations.
    It can also easily be built with other toolchains for comparison
    with other C library / pthread implementations.
    
    Change-Id: I3e611244f3ff95e7485d8b8d6f91e5b8bab2de4b
    system/extras: remove LOCAL_PRELINK_MODULE
    
    Change-Id: Iafd936bcb30e3fcc18c522a701d567dd744f2fa3
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Minimal test program for clock(3)
    
    Change-Id: I4fcf6e3c6ed55f1db96dc93e6809b35d7719d32f
    Test cases for strptime
    
    Change-Id: I43484c7333a967bac527752f4a4f75ec1ab420e3
    libc tests: Add a drand48() test
    
    + Add a script to run a specific test on a device easily.
    
    Change-Id: Icaf050bc1c3b6aef3498e253badd63344a7d442f
    Add <sched.h> unit tests for cpu_set_t
    
    This adds test_cpu_set to check the new features provided by
    <sched.h> around cpu_set_t (i.e. CPU_SETSIZE, CPU_ZERO, CPU_SET,
    sched_getaffinity, sched_setaffinity, sched_getcpu, ...)
    
    Change-Id: I59030badb6f6c7560f7cb48fcfa722e8d7b9b1b9
    tests: Refine Bionic dlclose destruction test.
    
    The purpose of this change is to test that C constructors and
    destructors contained in shared libraries are properly called
    when the corresponding libs are loaded and unloaded through
    dlopen() and dlclose(), or when the program exits.
    
    The test_dlclose_destruction test already performs this for
    static C++ construction/destruction. The change refines it
    with another shared library that uses __attribute__((constructor))
    and __attribute__((destructor)) from C instead
    
    (see the new libdlclosetest2 shared library).
    
    A new test, test_executable_destructor is also added to check
    that the constructor and destructor functions located in the
    executable program itself are properly called.
    
    Change-Id: If364d1c710282e8117f980b09490770e7d8d1e33
    bionic: add a test for dlopen(NULL,...)
    
    Change-Id: Iee8b33d1a046a71f5fd934912ee36371c1c9e8e5
    bionic: add tests for sem_post() and static C++ destruction on dlclose().
    
    Change-Id: I95e5608240881a3880874ea0ae8a24e716186e7f
    Add pthread_rwlock_t unit tests
    
    Change-Id: Id40c317ed6d3bfe7d384ee1ba55a96bb869f361e
    Add setjmp() / longjmp() test.
    
    Change-Id: Id2115e580c2e3463afa9406a8d5236a0c5c5f819
    Add pthread mutex regression tests.
    
    Change-Id: I7a0ed8928dfc61ebe8f027327a3f34e90cad04fb
    Add clone() test.
    
    This also refreshes the tests to properly compile with the latest
    host toolchain.
    eclair snapshot
    Add a new unit test that checks that the static C++ constructors of
    shared libraries and dynamic executables are called only once, and in
    the correct order.
    Add a new test to check the behaviour of getaddrinfo()
    auto import //branches/master/...@140412
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@132589
    auto import from //depot/cupcake/@137055
    auto import from //branches/cupcake/...@132276
    Code drop from //branches/cupcake/...@124589
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Remove a glibc test.
    
    Change-Id: I58b6fbc70086a286e41a2b166e6ed8afe6237185
    AI 143632: am: CL 143504 Completed cstddef to be non empty and similar to the gnu stl implementation.
      Even if we don't want to have a bloated stl implementation, having empty
      files around is probably not very good either.
      Added a test to make sure the header file compiles on host and kila-eng.
      QA Impact: In system/extras/test/bionic/libstdc++ build the tests using:
      mm BIONIC_TESTS=1
      to build the host and target tests.
      Original author: niko
      Merged from: //branches/donutburger/...
    
    Automated import of CL 143632
    AI 143504: Completed cstddef to be non empty and similar to the gnu stl implementation.
      Even if we don't want to have a bloated stl implementation, having empty
      files around is probably not very good either.
      Added a test to make sure the header file compiles on host and kila-eng.
      QA Impact: In system/extras/test/bionic/libstdc++ build the tests using:
      mm BIONIC_TESTS=1
      to build the host and target tests.
      BUG=1601432
    
    Automated import of CL 143504
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    tests:bionic: small improvement to dlclose test.
    
    Change-Id: I2fa0e06fab770a42b95006751baca07bb0e19d1e
    libc tests: Add a drand48() test
    
    + Add a script to run a specific test on a device easily.
    
    Change-Id: Icaf050bc1c3b6aef3498e253badd63344a7d442f
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    Add pthread_rwlock_t unit tests
    
    Change-Id: Id40c317ed6d3bfe7d384ee1ba55a96bb869f361e
    Add pthread mutex regression tests.
    
    Change-Id: I7a0ed8928dfc61ebe8f027327a3f34e90cad04fb
    Remove some obviously useless tests (and fix the others so they build).
    
    Some of these tests are stupid (hello_world.cpp), others are already replaced
    by more complete tests in bionic (test_cpu_set.cpp).
    
    Change-Id: Ie6d2723b049b4e9bb1b98ae0166be2c19551fdd0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Use PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP.
    
    Change-Id: Ifa87d9a9406acec1d5cdf7dd63af0df52c5cfb3c
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    BinderAddInts benchmark change to spin delay
    
    Change-Id: Ib98190b3c6f6ac934c5ca74ec221c5391152f189
    Test util - add execCmd and full-range random
    
    Change-Id: I083050ceaabfa973adce3c046f706fb70c19dc6e
    Test Util psuedo-random and hex dump utilities
    
    Change-Id: I1d68edbef019d44f0336b848328b489ed093cb0f
    Binder add ints benchmark
    
    Change-Id: Id05879404db8255264ee7f573e10a3f06ead8115
    WiFi load, scan, associate, unload stress test
    
    Change-Id: I5c33e5bee60550c1d82ffd0c18d7cae39db613a4
    Binder add ints benchmark
    
    Change-Id: Id05879404db8255264ee7f573e10a3f06ead8115
    WiFi load, scan, associate, unload stress test
    
    Change-Id: I5c33e5bee60550c1d82ffd0c18d7cae39db613a4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Move system/extras to libc++.
    
    Bug: 15193147
    Change-Id: I2188179aa315b6b94493135cfb243d5a9018fd10
    Remove makefile cruft.
    
    Don't manually include stlport, and don't use private bionic headers.
    
    Change-Id: I0762ada6a759bcbb9b1d40f8bfd2255949da860d
    Add liblog
    
    Bug: 8580410
    Change-Id: I9be769e7365b579dcfd94ac86e305044fcb515ee
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I5a7df94d99dcb6f1de98bd9b8f659fd51a491c82
    Binder add ints benchmark
    
    Change-Id: Id05879404db8255264ee7f573e10a3f06ead8115
    Load test for the sdcard.
    
    Simulate loads on the sdcard for write, read and open operations using
    one or more process.
    
    The number of processes to run concurently can be specified on the command line.
    The size of the file and the number of iterations (for averaging result) are
    also a command line flag.
    
    The user can have summary of the performance plus the raw data for
    processing with a separate tool.
    
    There is a basic python script to help plotting the result.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Remove bogus semicolons
    
    Remove semicolons after function declarations.
    They don't (currently) hurt, but they're invalid and might
    break future compilers.
    
    Change-Id: I82a2b414f2e465d40948c4a4f8f103023a7830de
    Signed-off-by: Bernhard Rosenkränzer <Bernhard.Rosenkranzer@linaro.org>
    BinderAddInts benchmark change to spin delay
    
    Change-Id: Ib98190b3c6f6ac934c5ca74ec221c5391152f189
    binderAddInts benchmark refactor out workaround
    
    Change-Id: I88a99637fe4f6c070865781b1934885af728c281
    Prepare benchmark for real cpu_set_t implementation
    
    This modifies the benchmark to work with a <sched.h> header that
    provides CPU_SETSIZE, cpu_set_t and other thread-processor affinity
    functions.
    
    Change-Id: I87e9b51f7113487ea35dae158465e16bb02703a8
    Test Util psuedo-random and hex dump utilities
    
    Change-Id: I1d68edbef019d44f0336b848328b489ed093cb0f
    Binder add ints benchmark
    
    Change-Id: Id05879404db8255264ee7f573e10a3f06ead8115
    Tools to analyze mmc tracepoint data from the kernel
    
    mmc_trace_reduce will convert a log of mmc trace events from
    the kernel into a format usable by some perf tools.
    
    Change-Id: Ia468c803b928bce54bf913846d4ed5422f818046
    Tools to analyze mmc tracepoint data from the kernel
    
    mmc_trace_reduce will convert a log of mmc trace events from
    the kernel into a format usable by some perf tools.
    
    Change-Id: Ia468c803b928bce54bf913846d4ed5422f818046
    Tools to analyze mmc tracepoint data from the kernel
    
    mmc_trace_reduce will convert a log of mmc trace events from
    the kernel into a format usable by some perf tools.
    
    Change-Id: Ia468c803b928bce54bf913846d4ed5422f818046
    DO NOT MERGE Update rand_emmc_perf makefile.
    
    Change-Id: I4f0416508c3c144e6b44eee4a9dcc78c770dfb8e
    64bit emmc fix
    
            Generating both 32bit and 64bit varaints for emmc
    
    Change-Id: Iefb38576fc6a2c516b13f10e24828b373410d942
    Adding 64 bit emmc_rand_perf
    
    Genrating 32bit and 64bit variant in local/tmp
    
    Change-Id: Ia9a640eab5bfc428d00af4ae0ada6184d946108a
    fstest: Add a set of filesystem recovery tests with gTest.
    
    Tests to verify recovery from super block and gdt corruption.
    
    TESTED:
    Verified in dmesg that e2fsck is detecting and fixing errors in the
    filesystem.
    
    Change-Id: I1da6352c67fda3466b57875554a42291bd11809c
    Upgrade rand_emmc_perf to check for worst case behavior
    
    Add the -s <count> option to do that many random 4K IOPS, and
    then report the average and max times/operation, and the standard
    deviation of the data set.
    
    Add the -f <file> option to save the complete set of times for
    each I/O of a -s run.  This can be used for further analysis.
    
    Also, update the android_emmc_perf_tests.sh script to know about
    the new -s and -f options, and add support for the Flo device.
    
    Change-Id: I4bca4b48d3acf74d46331461625f7f8088509f96
    A testing/debugging tool to wipe partitions
    
    This is basically a command line tool version of the wipe_block_device()
    function in libext4_utils.  Useful for testing and/or debugging the
    BLKSECDISCARD and BLKDISCARD ioctls.
    
    Change-Id: I733f0f7daa673624ddbaac055d82b64d741acd70
    Add some tools for testing ext4 performance and resiliency.
    
    rand_emmc_perf is a simple test to test random read/write performance
    of emmc chips.  android_emmc_perf_tests is a script that runs on
    the host that uses rand_emmc_perf to test the emmc performance on
    a device.
    
    corrupt_gdt_free_blocks is used to corrupt a filesystem so the kernel
    trips over it at runtime and panics, thus testing kernel's ability to
    mark the filesystem as needing to be fixed.
    
    set_ext4_err_bit sets the error bit in the superblock so e2fsck will
    trigger a full check next boot.
    
    corrupt_gdt_free_blocks and set_ext4_err_bit are only built for
    userdebug and eng builds.  rand_emmc_perf is marked optional, and
    not included in any build by default.
    
    Change-Id: I808174025d891f358ac54008371cb590e3c19f2f
    Add the -u option to support running on USER builds
    
    Because USER builds do not have root access, the new -u
    option modifies the script to create a 512 Mbyte file
    in /data/local/tmp/testfile, and use that for testing.
    Read tests are disabled (because the inability to drop
    the caches makes them pointless), and the write tests
    now go through the filesystem layer, so it is not fair
    to compare these results to a non-userbuild run.  However,
    this test can help with before/after tests to see if
    a change has improved the I/O performance of the system.
    
    Change-Id: Id724f12e4564af7ced858de1df7c2d45b0a440b6
    Upgrade rand_emmc_perf to check for worst case behavior
    
    Add the -s <count> option to do that many random 4K IOPS, and
    then report the average and max times/operation, and the standard
    deviation of the data set.
    
    Add the -f <file> option to save the complete set of times for
    each I/O of a -s run.  This can be used for further analysis.
    
    Also, update the android_emmc_perf_tests.sh script to know about
    the new -s and -f options, and add support for the Flo device.
    
    Change-Id: I4bca4b48d3acf74d46331461625f7f8088509f96
    Update emmc perf test tool
    
    Drop caches before read tests.
    Fix random read tests to read area big enough to prevent
    the block cache from filling with the data being read.
    Test with the read-ahead set to 4K, and at the default value.
    
    Change-Id: Ifffa07fe4c89b6e103ce4fd71d0fa9881fed0dc7
    Add manta support to android_emmc_perf_tests.sh
    
    Also tweak the script a little bit.  This is only for testing,
    and doesn't ship in any product.
    
    Change-Id: I9506d6babddef91fc6d9c0083064e0ef8a2d70a8
    Add some tools for testing ext4 performance and resiliency.
    
    rand_emmc_perf is a simple test to test random read/write performance
    of emmc chips.  android_emmc_perf_tests is a script that runs on
    the host that uses rand_emmc_perf to test the emmc performance on
    a device.
    
    corrupt_gdt_free_blocks is used to corrupt a filesystem so the kernel
    trips over it at runtime and panics, thus testing kernel's ability to
    mark the filesystem as needing to be fixed.
    
    set_ext4_err_bit sets the error bit in the superblock so e2fsck will
    trigger a full check next boot.
    
    corrupt_gdt_free_blocks and set_ext4_err_bit are only built for
    userdebug and eng builds.  rand_emmc_perf is marked optional, and
    not included in any build by default.
    
    Change-Id: I808174025d891f358ac54008371cb590e3c19f2f
    emmc test: fix counter overflow
    
    Fix iops counter overflow that is observed with smaller write size
    
    Bug: 24099467
    Change-Id: Ibb1001bde4b68cabf4d0bced6df553f4f772685a
    Upgrade rand_emmc_perf to check for worst case behavior
    
    Add the -s <count> option to do that many random 4K IOPS, and
    then report the average and max times/operation, and the standard
    deviation of the data set.
    
    Add the -f <file> option to save the complete set of times for
    each I/O of a -s run.  This can be used for further analysis.
    
    Also, update the android_emmc_perf_tests.sh script to know about
    the new -s and -f options, and add support for the Flo device.
    
    Change-Id: I4bca4b48d3acf74d46331461625f7f8088509f96
    Update emmc perf test tool
    
    Drop caches before read tests.
    Fix random read tests to read area big enough to prevent
    the block cache from filling with the data being read.
    Test with the read-ahead set to 4K, and at the default value.
    
    Change-Id: Ifffa07fe4c89b6e103ce4fd71d0fa9881fed0dc7
    Fix a few bugs in rand_emmc_perf
    
    Fix the code to properly read urandom to init the random number generator.
    Fix to properly read the arguments if any options are given.
    Fix to enable it to be built against glibc.
    
    Change-Id: I9127a71232e39afa3054fe9f1612def9ae13d9d3
    Add some tools for testing ext4 performance and resiliency.
    
    rand_emmc_perf is a simple test to test random read/write performance
    of emmc chips.  android_emmc_perf_tests is a script that runs on
    the host that uses rand_emmc_perf to test the emmc performance on
    a device.
    
    corrupt_gdt_free_blocks is used to corrupt a filesystem so the kernel
    trips over it at runtime and panics, thus testing kernel's ability to
    mark the filesystem as needing to be fixed.
    
    set_ext4_err_bit sets the error bit in the superblock so e2fsck will
    trigger a full check next boot.
    
    corrupt_gdt_free_blocks and set_ext4_err_bit are only built for
    userdebug and eng builds.  rand_emmc_perf is marked optional, and
    not included in any build by default.
    
    Change-Id: I808174025d891f358ac54008371cb590e3c19f2f
    A testing/debugging tool to wipe partitions
    
    This is basically a command line tool version of the wipe_block_device()
    function in libext4_utils.  Useful for testing and/or debugging the
    BLKSECDISCARD and BLKDISCARD ioctls.
    
    Change-Id: I733f0f7daa673624ddbaac055d82b64d741acd70
    A new tool to test how many files can be opened simultaneously.
    
    This tool will try to simultaneously open the specified number of files
    in the specified directory.  It is useful to check if hard limits are
    high enough, and also check if a filesystem performs well when many files
    are open at the same time.  The sdcard daemon has some issues in this
    area, both in max files that can be open at once, and performance
    issues when too many are open.
    
    Change-Id: I05a1ca49208f54a27d5405e4850752f49cdca443
    A new tool to test how many files can be opened simultaneously.
    
    This tool will try to simultaneously open the specified number of files
    in the specified directory.  It is useful to check if hard limits are
    high enough, and also check if a filesystem performs well when many files
    are open at the same time.  The sdcard daemon has some issues in this
    area, both in max files that can be open at once, and performance
    issues when too many are open.
    
    Change-Id: I05a1ca49208f54a27d5405e4850752f49cdca443
    Add missing includes.
    
    Change-Id: Ie3acca064c1bcecb4e0305e61f01ba8cea4abe03
    A testing/debugging tool to wipe partitions
    
    This is basically a command line tool version of the wipe_block_device()
    function in libext4_utils.  Useful for testing and/or debugging the
    BLKSECDISCARD and BLKDISCARD ioctls.
    
    Change-Id: I733f0f7daa673624ddbaac055d82b64d741acd70
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@131421
    Add missing includes.
    
    Change-Id: Ie3acca064c1bcecb4e0305e61f01ba8cea4abe03
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@131421
    Don't abuse KERNEL_HEADERS.
    
    You get the right ones for free, and this would be wrong on multi-arch.
    
    Change-Id: I832ae5343bfa24a9c45a305afa62a0cf4ac75615
    A command to list md subsystem versions
    
    This command was written to query the dm-crypt subsystem version,
    but it prints out the version of all md subsystems currently running
    in the kernel.
    
    Change-Id: Iecf67c697c23b47b4a3f8f72df6048b87687c875
    A new tool to test how many files can be opened simultaneously.
    
    This tool will try to simultaneously open the specified number of files
    in the specified directory.  It is useful to check if hard limits are
    high enough, and also check if a filesystem performs well when many files
    are open at the same time.  The sdcard daemon has some issues in this
    area, both in max files that can be open at once, and performance
    issues when too many are open.
    
    Change-Id: I05a1ca49208f54a27d5405e4850752f49cdca443
    Add missing includes.
    
    Change-Id: Ie3acca064c1bcecb4e0305e61f01ba8cea4abe03
    A command to list md subsystem versions
    
    This command was written to query the dm-crypt subsystem version,
    but it prints out the version of all md subsystems currently running
    in the kernel.
    
    Change-Id: Iecf67c697c23b47b4a3f8f72df6048b87687c875
    Add uevents tool to dump kernel uevents
    
    Change-Id: I62d957490a50311ea26167befb89ec98ee71b119
    Add uevents tool to dump kernel uevents
    
    Change-Id: I62d957490a50311ea26167befb89ec98ee71b119
    fatblock: Program to offer dir as FAT32 filesystem using ublock
    
    Change-Id: I6712e062e17b02c453ce89a52000cd8bc3ee810d
    add make_ext4fs to the libext4_utils
    
    Move the bulk of make_ext4fs into libext4_utils, leaving a main() that
    does only option parsing.  Add reset functionality so that
    make_ext4fs() can be called multiple times within a process.
    
    Change-Id: Ia09a2385eab32bf3ca9eb9257c4f9df2c85e55be
    Initial commit of ext4_utils
    
    Change-Id: I911d5b7fd7170ec81d544850717d8e69976e272b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Remove mdp_test
    
    Change-Id: I1fe32589c3bdbfe5f9d11b60394762c9f064735c
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I5a7df94d99dcb6f1de98bd9b8f659fd51a491c82
    eclair snapshot
    tests: Add a simple MDP test.
    
    Signed-off-by: Dima Zavin <dima@android.com>
    Remove sound, memtest, vibrator, timetest, cachetest from tests build
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    tests: fb-simple: add 32bit support
    
    Add a commandline argument to provide bpp.
    
    test-fb-simple <bpp> <w> <h> <buffer#>
    
    Valid values for bpp are 16 and 32.
    
    Change-Id: I60485700c379746948abda6f03d617d9f605fb7b
    Signed-off-by: Dima Zavin <dima@android.com>
    eclair snapshot
    fb_test: allow the user to specify the buffer to draw to and make active.
    
    Signed-off-by: Dima Zavin <dima@android.com>
    fb_test: Look for fbdev in several possible locations.
    
    Also, only try to set console graphics mode if we have an fbcon.
    
    This should make this utility a little more robust, and a hopefully
    more useful for bringup.
    
    Signed-off-by: Dima Zavin <dima@android.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Fix divide-by-zero in test-fb-refresh.
    
    On some platforms, pixclock is 0, so this tool was crashing with SIGFPE.
    
    Change-Id: I51bcec2cf46b19c161aff6ec892ad2bdb0bd844f
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    WiFi load, scan, associate, unload stress test
    
    Change-Id: I5c33e5bee60550c1d82ffd0c18d7cae39db613a4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Don't set LOCAL_MODULE_PATH for native test.
    
    The build system will set it up automatically.
    
    Change-Id: I528aa6c296f2ca8ffe8c74beca2cd49117b229e3
    Add liblog
    
    Bug: 8580410
    Change-Id: I9be769e7365b579dcfd94ac86e305044fcb515ee
    WiFi Loop Stress test - refactor & chg test name
    
    Change-Id: I8d4a818b3547217227b1aa741534eb7884695dba
    WiFi Loop Stress Test - move to /data
    
    Change-Id: I37f30c6e6e6eb189211591e7710ea5e086d8e4f6
    WiFi Loop stress test - install at /data/nativestresstest
    
    Change-Id: I15206ac1c64eea3e9bb7ae682bc61f449b5967bf
    WiFi load, scan, associate, unload stress test
    
    Change-Id: I5c33e5bee60550c1d82ffd0c18d7cae39db613a4
    auto import from //branches/cupcake/...@137197
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Fix wifiLoadScanAssoc _GNU_SOURCE build failure.
    
    Change-Id: Ibdce3df36e4f5015fa559fb5d5afbf86fe23c123
    Use updated stop supplicant API
    
    Bug: 7227463
    Change-Id: Ifecb256fed68c2046b77a5ce7a8c9f25c8e3fe62
    Fix supplicant start
    
    Change-Id: I203e8f573850d44c28fe5dbd2160e2ce421f4bdb
    WiFi Loop Stress test - refactor & chg test name
    
    Change-Id: I8d4a818b3547217227b1aa741534eb7884695dba
    WiFi Loop test - remove workaround, add -p option
    
      + Removed workaround for missing sched_* routines
      + Added -p option to execute single specified pass
    
    Change-Id: I068934650eb7f1bbe0e555c2e6b3f14dd3ccd4ff
    Test Util psuedo-random and hex dump utilities
    
    Change-Id: I1d68edbef019d44f0336b848328b489ed093cb0f
    WiFi Loop Stress test - add pass completion message
    
    Change-Id: I610c19b34109fe009bd43c6e4c7dd15be2e1784c
    WiFi Loop Stress Test
    
      1. Added completion message for dashboard
      2. Fixed non-zero exit code for -?
    
    Change-Id: I05da51b9971359196cf396fc438e5093ca6b364a
    WiFi load, scan, associate, unload stress test
    
    Change-Id: I5c33e5bee60550c1d82ffd0c18d7cae39db613a4
    Add initial alsa tests
    
    Change-Id: Iffc30bfe3fe79c720a721ceb98a2618eb81326c1
    Signed-off-by: Dmitry Shmidt <dimitrysh@google.com>
    WiFi load, scan, associate, unload stress test
    
    Change-Id: I5c33e5bee60550c1d82ffd0c18d7cae39db613a4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add initial alsa tests
    
    Change-Id: Iffc30bfe3fe79c720a721ceb98a2618eb81326c1
    Signed-off-by: Dmitry Shmidt <dimitrysh@google.com>
    Add liblog
    
    Bug: 8580410
    Change-Id: I9be769e7365b579dcfd94ac86e305044fcb515ee
    making sure it is built into the nativetest path so it gets picked up by
    continous tests.
    
    Change-Id: I6c6841b629691dd6825025886cf8169afbc3df98
    tests: add socket tagging test for qtaguid kernel netfilter module
    
    Add a small test to verify that socket tagging is not hopelessly
    broken.
    
    Test for
     - invalid: arg count, command, tags.
     - double tagging
     - acct_tag changing
     - optional uid
     - 64bit unsigned vs signed
     - invalid sock_fd
     - multiple entries
     - untagging
     - uid/gid checking + max tags.
    
    It tries its best to allow concurrent invocations, but it just
    can not be sure that it always detects the in-kernel addresses of
    the sockets it has tagged.
    
    Change-Id: I4e372fcddbd0b1cd6ba5d8be4692e0f31ec71a99
    WiFi Loop Stress test - refactor & chg test name
    
    Change-Id: I8d4a818b3547217227b1aa741534eb7884695dba
    WiFi Loop Stress Test - move to /data
    
    Change-Id: I37f30c6e6e6eb189211591e7710ea5e086d8e4f6
    WiFi Loop stress test - install at /data/nativestresstest
    
    Change-Id: I15206ac1c64eea3e9bb7ae682bc61f449b5967bf
    WiFi load, scan, associate, unload stress test
    
    Change-Id: I5c33e5bee60550c1d82ffd0c18d7cae39db613a4
    auto import from //branches/cupcake/...@137197
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add initial alsa tests
    
    Change-Id: Iffc30bfe3fe79c720a721ceb98a2618eb81326c1
    Signed-off-by: Dmitry Shmidt <dimitrysh@google.com>
    WiFi load, scan, associate, unload stress test
    
    Change-Id: I5c33e5bee60550c1d82ffd0c18d7cae39db613a4
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    system/extras: remove LOCAL_PRELINK_MODULE
    
    Change-Id: Iafd936bcb30e3fcc18c522a701d567dd744f2fa3
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    WiFi Loop Stress Test - move to /data
    
    Change-Id: I37f30c6e6e6eb189211591e7710ea5e086d8e4f6
    WiFi load, scan, associate, unload stress test
    
    Change-Id: I5c33e5bee60550c1d82ffd0c18d7cae39db613a4
    libublock/fatblock: Tag modules optional.
    
    Change-Id: I793e67f21d41e4c6df0a2e2ab2b2864adb2fe5ed
    libublock: Don't prelink.
    
    Change-Id: Ib33e84439dd3073b7a46deb353e73d439b9fceb5
    libublock: Userspace library for ublock
    
    Change-Id: I0bbeb07095f8376084d982ff49ac0d4793c1195f
    For issue #2651381, allow library prelinking.
    
    Change-Id: I1b3e13f0e16b51604852437b32b1d8309471abc8
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add missing includes.
    
    Change-Id: Ie3acca064c1bcecb4e0305e61f01ba8cea4abe03
    Rename LOG() to ALOG()  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/141576
    
    Bug: 5449033
    Change-Id: I00b3eb4a1ebf0a52389064b3138b15c410a7cd97
    BinderAddInts benchmark change to spin delay
    
    Change-Id: Ib98190b3c6f6ac934c5ca74ec221c5391152f189
    Test util - add execCmd and full-range random
    
    Change-Id: I083050ceaabfa973adce3c046f706fb70c19dc6e
    Test Util Library - remove drand48 workaround
    
    Change-Id: I2bc8e3c83931bac3ce81e6ac34b5f97d8cd680fa
    Test Util psuedo-random and hex dump utilities
    
    Change-Id: I1d68edbef019d44f0336b848328b489ed093cb0f
    Binder add ints benchmark
    
    Change-Id: Id05879404db8255264ee7f573e10a3f06ead8115
    WiFi load, scan, associate, unload stress test
    
    Change-Id: I5c33e5bee60550c1d82ffd0c18d7cae39db613a4
    Better handling for the process info array
    
    We have phones that have more than 256 PIDs running at one time right
    now, so don't segmentation fault when that condition happens.
    
    Free all proc info after it ahs been used.
    
    Also if a process goes away before we read its process name, just print
    "<unknown>" instead.
    
    Change-Id: Ia3899be61b047852f62bf3cc6f30eb2fcd797a61
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    procrank: add proportional swap accounting
    
    Shared pages are reported in each of the sharing process swapped pages.
    Compute a proportional swap usage to get a meaningful value of what each
    process has in swap. Report also process unique pages swapped out.
    In case ZRAM is used compute the compression ration and report the
    actual RAM use of the swapped pages.
    
    Bug: 25392275
    Change-Id: I3a28c7812a09a02e1a604593615f5c6ad0340f9f
    procrank: Fix some printf alignements
    
    Bug: 25392275
    Change-Id: I8ea4d01310190c34b68d3f3140ea336ad82df665
    Swap column in procrank not reported with swap enabled
    
    Bug: 25392275
    Change-Id: I6d2a0b03abba555b3667f6ccf12896caeecf27aa
    procrank: support >4GB of memory from 32-bit procrank
    
    Use uint64_t for sizes.
    
    Change-Id: Ic686b4cbf4406aec1e9b01810924488bff63722e
    procrank: Use %zu for size_t and %d for pid_t
    
    Change-Id: Ic339a05a3091ec6b33b68bc5e76082de3513e9c7
    Signed-off-by: Ashok Bhat <ashok.bhat@arm.com>
    procrank: add support for only showing cached, noncached, or KSM pages
    
    Add the -c, -C, and -k arguments to only show pages that are
    cached (backed by storage), non-cached (backed by ram or swap),
    or have been collapsed by KSM respectively.
    
    Change-Id: I707570ad406106b0aca230d18f9945901d193aca
    procrank: show swapped pages per process
    
    Add a column showing swapped pages per process, but only show it
    if swapped pages exist in at least one process.
    
    Change-Id: I51a12fb8999c2a73418277fd575e7109478667d5
    procrank: add support for only showing cached, noncached, or KSM pages
    
    Add the -c, -C, and -k arguments to only show pages that are
    cached (backed by storage), non-cached (backed by ram or swap),
    or have been collapsed by KSM respectively.
    
    Change-Id: I707570ad406106b0aca230d18f9945901d193aca
    procrank: show swapped pages per process
    
    Add a column showing swapped pages per process, but only show it
    if swapped pages exist in at least one process.
    
    Change-Id: I51a12fb8999c2a73418277fd575e7109478667d5
    Ignore SIGPIPE is some of the tools used via dumpstate
    
      adb bugreport > b & sleep 5; kill $?
    will show that a bunch of tools will SIGPIPE when trying to output data
    which is normal.
    We don't have a way on linux (bsd yes), to set NOSIGPIPE on the file desc
    passed down via fork/exec.
    
    Bug: 6447319
    Change-Id: I1634a00a155fd8a3fd827aa4a77e94518534336c
    Include the shared memory and slab memory in procrank output.
    
    Change-Id: I0dac539c220fda867ce166d78dc898a8ec7aa18a
    Add information about totals to procrank.
    
    Now print a sum of all pss and uss at then end of the output, and
    then print information from /proc/meminfo to help put those in
    context.
    
    Change-Id: I323d219820830e9435bb4dcfd78cbb9a3d6c129c
    Detect an error case and prevent printing an uninitialized variable
    
    pm_process_usage can return an error, and leave procs[i]->usage
    unitialized.  Detect the error case and print a warning.  Also
    make the initialization of procs[i]->usage to 0 unconditional,
    so nothing will be printed in the final procrank stats when an
    error is detected.
    
    Change-Id: I03f90ae6a5ebb201b6e9e43593cec225e1a8ded0
    Add missing include headers for compilation on Intel SDK for Google TV.
    
    Change-Id: I172667643e13e2e1c278fd4c0156d5a2445d79f7
    Fixed buffer overflow in procrank.
    
    If there are more than 256 processes in the system procrank
    will overflow the procs array. Switched to heap allocation.
    
    Change-Id: I05223333d31f669c6ac87577671e301e6d05c682
    Better handling for the process info array
    
    We have phones that have more than 256 PIDs running at one time right
    now, so don't segmentation fault when that condition happens.
    
    Free all proc info after it ahs been used.
    
    Also if a process goes away before we read its process name, just print
    "<unknown>" instead.
    
    Change-Id: Ia3899be61b047852f62bf3cc6f30eb2fcd797a61
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Android.mk: Remove false dependency on host os
    
    Bug: 15749466
    Change-Id: Idca63cf0ddc84462485cdd266d473a32833fed74
    Signed-off-by: Daniel Rosenberg <drosen@google.com>
    f2fsutils: Added support for sparse f2fs representations
    
    Bug: 15749466
    Change-Id: I27b386e708e04d449fe460d1f9be553b438c9156
    Signed-off-by: Daniel Rosenberg <drosen@google.com>
    f2fs_utils: make Mac builds happy (copy out mkf2fsuserimg.sh)
    
    
    Change-Id: I8f911f2d084aee08f3f53da984d5c3d2a252cb05
    Signed-off-by: JP Abgrall <jpa@google.com>
    f2fs utils: Add mkf2fsuserimg.sh and make_f2fs
    
    This is used to generate empty userdata.img files.
    Normally, "fastboot format userdata" should be used.
    
    Caveats:
     - It only builds an empty sparse image.
     - windows/mac unsupported
    
    Change-Id: I5fbd9724fdd3f4513e7c91f123fc5fffcb475012
    Signed-off-by: JP Abgrall <jpa@google.com>
    f2fs_utils: provide sparse io and dynamic load.
    
    This uses
      external/f2fs-tools LGPL v2.1
    
    It provides low-level IO functions that f2fs-tools/mkfs expects
    for writing to the media. In this case we use the sparse lib.
    
    Change-Id: I8d141a0d4d14df9fe84d3b131484e9696fcd8870
    Signed-off-by: JP Abgrall <jpa@google.com>
    f2fs utils: set correct dependency on dynamic libf2fs
    
    Don't link against it anymore.
    Just let dlopen() deal with it correctly.
    The "config" struct will come from the f2fs_ioutils
    and libf2fs_fmt_host expects to have it global, so let
    link with -rdynamic and let dlopen() resolve it.
    
    Be more aggressive with linux-only builds.
    
    Bug: 15717498
    Change-Id: I03ebebed1fc652170b44f809df42c1f8595216eb
    Signed-off-by: JP Abgrall <jpa@google.com>
    f2fs utils: set correct dependency on dynamic libf2fs
    
    Don't link against it anymore.
    Just let dlopen() deal with it correctly.
    The "config" struct will come from the f2fs_ioutils
    and libf2fs_fmt_host expects to have it global, so let
    link with -rdynamic and let dlopen() resolve it.
    
    Be more aggressive with linux-only builds.
    
    Bug: 15717498
    Change-Id: I03ebebed1fc652170b44f809df42c1f8595216eb
    Signed-off-by: JP Abgrall <jpa@google.com>
    f2fs utils: Add mkf2fsuserimg.sh and make_f2fs
    
    This is used to generate empty userdata.img files.
    Normally, "fastboot format userdata" should be used.
    
    Caveats:
     - It only builds an empty sparse image.
     - windows/mac unsupported
    
    Change-Id: I5fbd9724fdd3f4513e7c91f123fc5fffcb475012
    Signed-off-by: JP Abgrall <jpa@google.com>
    f2fs_utils: provide sparse io and dynamic load.
    
    This uses
      external/f2fs-tools LGPL v2.1
    
    It provides low-level IO functions that f2fs-tools/mkfs expects
    for writing to the media. In this case we use the sparse lib.
    
    Change-Id: I8d141a0d4d14df9fe84d3b131484e9696fcd8870
    Signed-off-by: JP Abgrall <jpa@google.com>
    f2fs_utils: provide sparse io and dynamic load.
    
    This uses
      external/f2fs-tools LGPL v2.1
    
    It provides low-level IO functions that f2fs-tools/mkfs expects
    for writing to the media. In this case we use the sparse lib.
    
    Change-Id: I8d141a0d4d14df9fe84d3b131484e9696fcd8870
    Signed-off-by: JP Abgrall <jpa@google.com>
    ext4_utils: brought over from master
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    f2fs utils: Add mkf2fsuserimg.sh and make_f2fs
    
    This is used to generate empty userdata.img files.
    Normally, "fastboot format userdata" should be used.
    
    Caveats:
     - It only builds an empty sparse image.
     - windows/mac unsupported
    
    Change-Id: I5fbd9724fdd3f4513e7c91f123fc5fffcb475012
    Signed-off-by: JP Abgrall <jpa@google.com>
    f2fs utils: Add mkf2fsuserimg.sh and make_f2fs
    
    This is used to generate empty userdata.img files.
    Normally, "fastboot format userdata" should be used.
    
    Caveats:
     - It only builds an empty sparse image.
     - windows/mac unsupported
    
    Change-Id: I5fbd9724fdd3f4513e7c91f123fc5fffcb475012
    Signed-off-by: JP Abgrall <jpa@google.com>
    f2fs_utils: provide sparse io and dynamic load.
    
    This uses
      external/f2fs-tools LGPL v2.1
    
    It provides low-level IO functions that f2fs-tools/mkfs expects
    for writing to the media. In this case we use the sparse lib.
    
    Change-Id: I8d141a0d4d14df9fe84d3b131484e9696fcd8870
    Signed-off-by: JP Abgrall <jpa@google.com>
    Add clone() test.
    
    This also refreshes the tests to properly compile with the latest
    host toolchain.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Remove selinux/android.h from host tools
    
    For tools built for both host and device, only include if not host.
    
    (cherry-picked from commit 6bc4a54fdbd926c032ed5c99f8b5c69f624c6312)
    
    Change-Id: Ie102bd7575d2cf5eef3f95e6063c2970d143dac8
    f2fs_utils: fix build break in static_sdk_tools
    
    external/f2fs-tools/mkfs/f2fs_format.c:357:
        error: undefined reference to dev_read_version
    clang: error:
        linker command failed with exit code 1 (use -v to see invocation)
    make: *** [out/host/linux-x86/obj/lib/libf2fs_fmt_host_dyn.so] Error 1
    
    Change-Id: I9bf1eec9ee60aa2fc55a3d0793a67d36f271acef
    f2fs_utils: support new f2fs-tools f2fs_finalize_device API.
    
    Change-Id: Id5a6a7edc7871a6c0eb452ad7136732b9a730e6a
    Signed-off-by: JP Abgrall <jpa@google.com>
    f2fs_utils: provide sparse io and dynamic load.
    
    This uses
      external/f2fs-tools LGPL v2.1
    
    It provides low-level IO functions that f2fs-tools/mkfs expects
    for writing to the media. In this case we use the sparse lib.
    
    Change-Id: I8d141a0d4d14df9fe84d3b131484e9696fcd8870
    Signed-off-by: JP Abgrall <jpa@google.com>
    f2fs_utils: support new f2fs-tools f2fs_finalize_device API.
    
    Change-Id: Id5a6a7edc7871a6c0eb452ad7136732b9a730e6a
    Signed-off-by: JP Abgrall <jpa@google.com>
    f2fs_utils: provide sparse io and dynamic load.
    
    This uses
      external/f2fs-tools LGPL v2.1
    
    It provides low-level IO functions that f2fs-tools/mkfs expects
    for writing to the media. In this case we use the sparse lib.
    
    Change-Id: I8d141a0d4d14df9fe84d3b131484e9696fcd8870
    Signed-off-by: JP Abgrall <jpa@google.com>
    f2fsutils: Added support for sparse f2fs representations
    
    Bug: 15749466
    Change-Id: I27b386e708e04d449fe460d1f9be553b438c9156
    Signed-off-by: Daniel Rosenberg <drosen@google.com>
    f2fs_utils: provide sparse io and dynamic load.
    
    This uses
      external/f2fs-tools LGPL v2.1
    
    It provides low-level IO functions that f2fs-tools/mkfs expects
    for writing to the media. In this case we use the sparse lib.
    
    Change-Id: I8d141a0d4d14df9fe84d3b131484e9696fcd8870
    Signed-off-by: JP Abgrall <jpa@google.com>
    ext4_utils: brought over from master
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add missing includes.
    
    Change-Id: Ie3acca064c1bcecb4e0305e61f01ba8cea4abe03
    Fix missing #includes in system/extras.
    
    Change-Id: I78000cea6b2012f571e596ed400b3f04847cb761
    f2fs_sparseblock.c: Skip over empty segments, minor clean up
    
    Change-Id: Iec70cc6b16c84ac610d607a5fea3584b5778275a
    Signed-off-by: Daniel Rosenberg <drosen@google.com>
    f2fs_sparseblock: Fixed handling of journaled sit entries
    
    Bug: 15749466
    Change-Id: I3f7f13698e88efd7ffeb00c1ba3a070527a3f6a0
    Signed-off-by: Daniel Rosenberg <drosen@google.com>
    f2fs_sparseblock: Correctly handle f2fs checkpoint flags
    
    Bug: 15749466
    Change-Id: I31ecefc0cf2ebfba1652a8b87fd70b045624ffa4
    Signed-off-by: Daniel Rosenberg <drosen@google.com>
    f2fsutils: Added support for sparse f2fs representations
    
    Bug: 15749466
    Change-Id: I27b386e708e04d449fe460d1f9be553b438c9156
    Signed-off-by: Daniel Rosenberg <drosen@google.com>
    f2fs_utils: provide sparse io and dynamic load.
    
    This uses
      external/f2fs-tools LGPL v2.1
    
    It provides low-level IO functions that f2fs-tools/mkfs expects
    for writing to the media. In this case we use the sparse lib.
    
    Change-Id: I8d141a0d4d14df9fe84d3b131484e9696fcd8870
    Signed-off-by: JP Abgrall <jpa@google.com>
    ext4_utils: brought over from master
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    f2fs utils: Add mkf2fsuserimg.sh and make_f2fs
    
    This is used to generate empty userdata.img files.
    Normally, "fastboot format userdata" should be used.
    
    Caveats:
     - It only builds an empty sparse image.
     - windows/mac unsupported
    
    Change-Id: I5fbd9724fdd3f4513e7c91f123fc5fffcb475012
    Signed-off-by: JP Abgrall <jpa@google.com>
    f2fs utils: Add mkf2fsuserimg.sh and make_f2fs
    
    This is used to generate empty userdata.img files.
    Normally, "fastboot format userdata" should be used.
    
    Caveats:
     - It only builds an empty sparse image.
     - windows/mac unsupported
    
    Change-Id: I5fbd9724fdd3f4513e7c91f123fc5fffcb475012
    Signed-off-by: JP Abgrall <jpa@google.com>
    Add missing include.
    
    ...and remove an unused one.
    
    Change-Id: I7949964b6d74f861ad07ed56f5092014fdfc7c8a
    f2fs_utils: provide sparse io and dynamic load.
    
    This uses
      external/f2fs-tools LGPL v2.1
    
    It provides low-level IO functions that f2fs-tools/mkfs expects
    for writing to the media. In this case we use the sparse lib.
    
    Change-Id: I8d141a0d4d14df9fe84d3b131484e9696fcd8870
    Signed-off-by: JP Abgrall <jpa@google.com>
    Don't build libstdc++ host tests with the Bionic headers.
    
    This creates conflicts (e.g. <cfloat> includes <sys/limits.h> which is not
    always available on the host).
    
    Add missing using ::<function> statements to test_cstdlib.cpp.
    
    Remove obsolete debug trace (LOCAL_MODULE=xxxxx) in Android.mk
    AI 145159: am: CL 145059 (Almost) final set of wrapper around the C headers for stdc++ and their tests.
      The only one left is cstring.
      * bionic/libstdc++/include/cstdlib:
      * bionic/libstdc++/include/cstdio:
      * bionic/libstdc++/include/cstdint:
      * bionic/libstdc++/include/csignal:
      * bionic/libstdc++/include/csetjmp:
      Added header file.
      Checks the bionic headers file were picked up instead of the host ones.
      Added test for new header files
      * system/extras/tests/bionic/libstdc++/Android.mk:
      Added tests for the new header files.
      EXTRA_CFLAGS: include the bionic header files.
      Original author: niko
    
    Automated import of CL 145159
    AI 145059: (Almost) final set of wrapper around the C headers for stdc++ and their tests.
      The only one left is cstring.
      * bionic/libstdc++/include/cstdlib:
      * bionic/libstdc++/include/cstdio:
      * bionic/libstdc++/include/cstdint:
      * bionic/libstdc++/include/csignal:
      * bionic/libstdc++/include/csetjmp:
      Added header file.
      Checks the bionic headers file were picked up instead of the host ones.
      Added test for new header files
      * system/extras/tests/bionic/libstdc++/Android.mk:
      Added tests for the new header files.
      EXTRA_CFLAGS: include the bionic header files.
      BUG=1601432
    
    Automated import of CL 145059
    AI 144391: am: CL 144236 Added new C to stdc++ header files: cassert, cctype, climits, ctime.
      QA Impact:None
      Original author: niko
    
    Automated import of CL 144391
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    First checkin of cpustats
    
    This utility is similar to top but with two major differences. 1) It
    removes the overhead of gathering process/thread stats. 2) It measures
    the time spent in each frequency for each sample duration.
    
    Bug: 6147843
    Change-Id: Ie9073470f8cd1778fe902ea6383bef2311e91cf1
    Add a couple of performance debug utilities.
    
    micro_bench provides very simple tests for
    o sleep accuracy
    o cpu
    o memcpy
    o memset
    
    sane_schedstat is a front-end for /proc/schedstat to diff and format the
    counters.
    
    Change-Id: I6e178fe37fcfc9bf0a83ec17852e31146a91e7a4
    Signed-off-by: Nick Pelly <npelly@google.com>
    tests: Add simple direct i/o test
    
    Adds a simple write/readback test of direct i/o on a block
    device node.
    
    Change-Id: I06c2bb50fbc014157f5e0eaf2bbb910b89f5fc25
    Signed-off-by: Garmin Android technology group <android@garmin.com>
    Add missing includes.
    
    Change-Id: Ie3acca064c1bcecb4e0305e61f01ba8cea4abe03
    First checkin of cpustats
    
    This utility is similar to top but with two major differences. 1) It
    removes the overhead of gathering process/thread stats. 2) It measures
    the time spent in each frequency for each sample duration.
    
    Bug: 6147843
    Change-Id: Ie9073470f8cd1778fe902ea6383bef2311e91cf1
    Dump build_id feature in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ie2acd8a157bca9ad3c01a2e4b37e139aba89670f
    (cherry picked from commit 8f6225147c5b6cb2159a7f5cb0dab952ee0759df)
    Dump kernel/modules/thread mmap information in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ia65cb12804a6dffa440501736a6229b2f7248958
    (cherry picked from commit 7d59bb49fb47fbc82ef5c77d7aebf7174fd996e1)
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Build simpleperf in user-debug mode, and put it in /system/xbin/.
    
    (cherry picked from commit d455de47298ada7e3532104a8e3312822a940906)
    
    Change-Id: I53aa95e0c34957262bc9ebf3c2dff40bfee6867e
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    Dump kernel/modules/thread mmap information in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ia65cb12804a6dffa440501736a6229b2f7248958
    (cherry picked from commit 7d59bb49fb47fbc82ef5c77d7aebf7174fd996e1)
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Dump kernel/modules/thread mmap information in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ia65cb12804a6dffa440501736a6229b2f7248958
    (cherry picked from commit 7d59bb49fb47fbc82ef5c77d7aebf7174fd996e1)
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Dump kernel/modules/thread mmap information in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ia65cb12804a6dffa440501736a6229b2f7248958
    (cherry picked from commit 7d59bb49fb47fbc82ef5c77d7aebf7174fd996e1)
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Simpleperf: remove abort in child process.
    
    Bug: 22328419
    Change-Id: I3521a246929c10dc1eb9c9dac75240197b5b0a40
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Dump build_id feature in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ie2acd8a157bca9ad3c01a2e4b37e139aba89670f
    (cherry picked from commit 8f6225147c5b6cb2159a7f5cb0dab952ee0759df)
    Dump kernel/modules/thread mmap information in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ia65cb12804a6dffa440501736a6229b2f7248958
    (cherry picked from commit 7d59bb49fb47fbc82ef5c77d7aebf7174fd996e1)
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Dump build_id feature in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ie2acd8a157bca9ad3c01a2e4b37e139aba89670f
    (cherry picked from commit 8f6225147c5b6cb2159a7f5cb0dab952ee0759df)
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    Dump build_id feature in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ie2acd8a157bca9ad3c01a2e4b37e139aba89670f
    (cherry picked from commit 8f6225147c5b6cb2159a7f5cb0dab952ee0759df)
    Dump kernel/modules/thread mmap information in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ia65cb12804a6dffa440501736a6229b2f7248958
    (cherry picked from commit 7d59bb49fb47fbc82ef5c77d7aebf7174fd996e1)
    Dump build_id feature in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ie2acd8a157bca9ad3c01a2e4b37e139aba89670f
    (cherry picked from commit 8f6225147c5b6cb2159a7f5cb0dab952ee0759df)
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Dump build_id feature in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ie2acd8a157bca9ad3c01a2e4b37e139aba89670f
    (cherry picked from commit 8f6225147c5b6cb2159a7f5cb0dab952ee0759df)
    Dump kernel/modules/thread mmap information in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ia65cb12804a6dffa440501736a6229b2f7248958
    (cherry picked from commit 7d59bb49fb47fbc82ef5c77d7aebf7174fd996e1)
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Dump build_id feature in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ie2acd8a157bca9ad3c01a2e4b37e139aba89670f
    (cherry picked from commit 8f6225147c5b6cb2159a7f5cb0dab952ee0759df)
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    Dump kernel/modules/thread mmap information in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ia65cb12804a6dffa440501736a6229b2f7248958
    (cherry picked from commit 7d59bb49fb47fbc82ef5c77d7aebf7174fd996e1)
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    Dump build_id feature in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ie2acd8a157bca9ad3c01a2e4b37e139aba89670f
    (cherry picked from commit 8f6225147c5b6cb2159a7f5cb0dab952ee0759df)
    Dump kernel/modules/thread mmap information in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ia65cb12804a6dffa440501736a6229b2f7248958
    (cherry picked from commit 7d59bb49fb47fbc82ef5c77d7aebf7174fd996e1)
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Dump build_id feature in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ie2acd8a157bca9ad3c01a2e4b37e139aba89670f
    (cherry picked from commit 8f6225147c5b6cb2159a7f5cb0dab952ee0759df)
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    Dump build_id feature in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ie2acd8a157bca9ad3c01a2e4b37e139aba89670f
    (cherry picked from commit 8f6225147c5b6cb2159a7f5cb0dab952ee0759df)
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Dump build_id feature in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ie2acd8a157bca9ad3c01a2e4b37e139aba89670f
    (cherry picked from commit 8f6225147c5b6cb2159a7f5cb0dab952ee0759df)
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Dump kernel/modules/thread mmap information in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ia65cb12804a6dffa440501736a6229b2f7248958
    (cherry picked from commit 7d59bb49fb47fbc82ef5c77d7aebf7174fd996e1)
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Dump build_id feature in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ie2acd8a157bca9ad3c01a2e4b37e139aba89670f
    (cherry picked from commit 8f6225147c5b6cb2159a7f5cb0dab952ee0759df)
    Dump kernel/modules/thread mmap information in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ia65cb12804a6dffa440501736a6229b2f7248958
    (cherry picked from commit 7d59bb49fb47fbc82ef5c77d7aebf7174fd996e1)
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    Dump build_id feature in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ie2acd8a157bca9ad3c01a2e4b37e139aba89670f
    (cherry picked from commit 8f6225147c5b6cb2159a7f5cb0dab952ee0759df)
    Dump kernel/modules/thread mmap information in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ia65cb12804a6dffa440501736a6229b2f7248958
    (cherry picked from commit 7d59bb49fb47fbc82ef5c77d7aebf7174fd996e1)
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    Dump kernel/modules/thread mmap information in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ia65cb12804a6dffa440501736a6229b2f7248958
    (cherry picked from commit 7d59bb49fb47fbc82ef5c77d7aebf7174fd996e1)
    Dump kernel/modules/thread mmap information in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ia65cb12804a6dffa440501736a6229b2f7248958
    (cherry picked from commit 7d59bb49fb47fbc82ef5c77d7aebf7174fd996e1)
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Dump kernel/modules/thread mmap information in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ia65cb12804a6dffa440501736a6229b2f7248958
    (cherry picked from commit 7d59bb49fb47fbc82ef5c77d7aebf7174fd996e1)
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    Dump build_id feature in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ie2acd8a157bca9ad3c01a2e4b37e139aba89670f
    (cherry picked from commit 8f6225147c5b6cb2159a7f5cb0dab952ee0759df)
    Dump kernel/modules/thread mmap information in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ia65cb12804a6dffa440501736a6229b2f7248958
    (cherry picked from commit 7d59bb49fb47fbc82ef5c77d7aebf7174fd996e1)
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Dump build_id feature in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ie2acd8a157bca9ad3c01a2e4b37e139aba89670f
    (cherry picked from commit 8f6225147c5b6cb2159a7f5cb0dab952ee0759df)
    Dump kernel/modules/thread mmap information in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ia65cb12804a6dffa440501736a6229b2f7248958
    (cherry picked from commit 7d59bb49fb47fbc82ef5c77d7aebf7174fd996e1)
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Implement simpleperf stat subcommand.
    
    Also add some simple unit-tests.
    
    Change-Id: Ic30a2d4a879e028a8c82babbaf82e322fc49a838
    Implement simpleperf list subcommand.
    
    simpleperf is used to replace linux/tools/perf. And This CL implements
    the list subcommand of it.
    
    Change-Id: I3e6fe854e19cc370070d0fd8416d0aa6fa8f8e90
    Dump build_id feature in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ie2acd8a157bca9ad3c01a2e4b37e139aba89670f
    (cherry picked from commit 8f6225147c5b6cb2159a7f5cb0dab952ee0759df)
    Dump kernel/modules/thread mmap information in `simpleperf record`.
    
    Bug: 19483574
    Change-Id: Ia65cb12804a6dffa440501736a6229b2f7248958
    (cherry picked from commit 7d59bb49fb47fbc82ef5c77d7aebf7174fd996e1)
    Implement simpleperf record/dumprecord subcommands.
    
    (cherry picked from commit 9759e1b1ce76185aa539aeea2fb1cbd8382156e7)
    
    Bug: 19483574
    
    Change-Id: Id879713a75c2d3a6289d8847b95ee0bb4a2cc8a0
    Exclude verify_boot_signature from Mac build.
    
    verify_boot_signature doesn't build on Mac currently.
    Temporarily exclude it from Mac build.
    
    Bug: 21669400
    Change-Id: I7b978adafefb700d65f6fc10f69c949fce94c236
    Remove superfluous OpenSSL include paths.
    
    The libcrypto and libssl modules (and their respective static and host
    versions) use LOCAL_EXPORT_C_INCLUDE_DIRS thus just including the module
    is sufficient.
    
    Change-Id: I9b5360bb3af65a629c3e7bc6963a7fac78879c5f
    Add a reference C implementation for verifying signatures
    
    Due to OEM requests, add a reference implementation for boot/recovery
    image signature verification in C. The tool uses OpenSSL for ASN.1 and
    crypto routines.
    
    Bug: 18120110
    Change-Id: I9f6c59e0b338b68f35ac1c2c4d83c10d31d70cd9
    DO NOT MERGE: Add a tool for verifying verity signatures in images
    
    This tool takes a sparse ext4 image file, reads verity metadata
    from it, and verifies the signature of the verity table.
    
    Bug: 15984840
    Bug: 18120110
    Change-Id: I384a9ff885a0ffcd8febf100e76f3a1e5c7bbdab
    (cherry picked from commit c18aa9d69a69549b50966e322abe59cfa04edfe4)
    Add a tool for verifying verity signatures in images
    
    This tool takes a sparse ext4 image file, reads verity metadata
    from it, and verifies the signature of the verity table.
    
    Change-Id: I384a9ff885a0ffcd8febf100e76f3a1e5c7bbdab
    verity: fix makefile mixup.
    
    BootSigner -> BootSignature mixup.
    
    Change-Id: Ifae0f5d69540996f8b71dfccf4df0db7349269c4
    verity: Add tools to help OEMs generate signed boot images.
    
    Change-Id: Iea200def2fdd8a0d366888bb7b1ae401297063f1
    don't use sun's base64 encoders
    
    Use of sun.misc.BASE64Decoder considered harmful.  Use Bouncy Castle's
    instead, which come from the platform source tree.
    
    Change-Id: I7cc0d489854b9b33ddfc90501d064fa1142d9eee
    verity: add C++ version of build_verity_tree that handles sparse files
    
    A C++ version can reuse libsparse to calculate the verity hash tree
    of a sparse file without unsparsing it.  In addition to saving disk
    space, it also cuts the time taken in half by optimizing out the
    hash calculation for skipped blocks that are known to be zero.
    
    Change-Id: I882fe3a417dc2c83bb0e6cd974b6a886f8bc8ac3
    verity: add dependency between verity_signer and VeritySigner
    
    The verity_signer script executes the VeritySigner java module,
    add a LOCAL_REQUIRED_MODULES dependency.
    
    Change-Id: Ic1a8df46ead2aaf08d69936600e2312fa1b9a770
    Cleanup.
    
    Remove syspatch (now under external/syspatch) and spurious
    makefile noise.
    
    Change-Id: I2fa4b133ff18f9584b35f202de0639899906fd30
    Revert "Temporary revert to fix the build."
    
    This reverts commit d1cda72457fed396942ae58f689ce84de7af3e9e.
    
    Additionally changes libcrypto to libcrypto-host.
    
    Change-Id: I8e57c31f904fae0113a514c26a78711e15782216
    Revert "Revert "Temporary revert to fix the build.""
    
    This reverts commit a0dafc9aacecdf45cbc20f1d0acbff789f56e607.
    
    Change-Id: I3b1b3a0b3f5c43c0d8f6dc0b6f2f5738b09c1e81
    Revert "Temporary revert to fix the build."
    
    This reverts commit d1cda72457fed396942ae58f689ce84de7af3e9e.
    
    Change-Id: Ia072e7adee68a1fbb21ae0f9fa38d61b461fb39f
    Temporary revert to fix the build.
    
    Change-Id: I40454606e3d974bd6fc79b46f663061549a1a790
    Add verified partition tools.
    
    Change-Id: Icf34336e6d574d62b60fff093ea8abe20358ac89
    DO NOT MERGE: Add a tool for verifying verity signatures in images
    
    This tool takes a sparse ext4 image file, reads verity metadata
    from it, and verifies the signature of the verity table.
    
    Bug: 15984840
    Bug: 18120110
    Change-Id: I384a9ff885a0ffcd8febf100e76f3a1e5c7bbdab
    (cherry picked from commit c18aa9d69a69549b50966e322abe59cfa04edfe4)
    Add a tool for verifying verity signatures in images
    
    This tool takes a sparse ext4 image file, reads verity metadata
    from it, and verifies the signature of the verity table.
    
    Change-Id: I384a9ff885a0ffcd8febf100e76f3a1e5c7bbdab
    build_verity_tree: Add verbose flag
    
    Signed-off-by: Mohamad Ayyash <mkayyash@google.com>
    
    (cherry picked from commit 70f72fb1035e753f5cef176339618723fba943e2)
    
    Change-Id: Ic1f4c843e9597a9e7c0f43eb908c17420c259d9a
    build_verity_tree: Add verbose flag
    
    Change-Id: I0c5607f7aa5e964abc2031bbe71ff5c6e6ef56cc
    Signed-off-by: Mohamad Ayyash <mkayyash@google.com>
    Add 64 bit support to verity build.
    
    Now build verity only support 32bit environment, when the image
    size is bigger than 2^32 the verity image size calculation will
    be mistake.
    
    Change-Id: I41e5fe720c1269d6c06e23bfce5bc65226fb6e77
    Include bn.h for BN_ functions.
    
    The BN_ functions used in this source file require bn.h to be included.
    At the moment, a transitive include via evp.h is keeping the build
    working, but we shouldn't depend on that.
    
    Change-Id: I7153f29ca61d53e6abb7a9df78d0c6aceccafdb2
    verity: Move build_verity_tree.cpp to use BN_* for hex conversion.
    
    This fixes an issue where hexlified salts  weren't being properly
    consumed by moving to OpenSSL's BN_* functions.
    
    Bug: 15018770
    Change-Id: Iece1f2991d3b23d4ae7ff66b5fb02abc388cfa80
    Fix Mac build.
    
    Use correct format specifiers on the mac build.
    
    Change-Id: I626a766d9078ada9f073eeb107720d1feae07b68
    verity: add C++ version of build_verity_tree that handles sparse files
    
    A C++ version can reuse libsparse to calculate the verity hash tree
    of a sparse file without unsparsing it.  In addition to saving disk
    space, it also cuts the time taken in half by optimizing out the
    hash calculation for skipped blocks that are known to be zero.
    
    Change-Id: I882fe3a417dc2c83bb0e6cd974b6a886f8bc8ac3
    verity: Add tools to help OEMs generate signed boot images.
    
    Change-Id: Iea200def2fdd8a0d366888bb7b1ae401297063f1
    Add signature verification to keystore and verity signers
    
    This change adds -verify flags to keystore and verity signers for
    verifying the signatures of the signed content generated by the
    same tools. This allows implementers of verified boot to test and
    verify the correctness of their implementations.
    
    Bug: 15984840
    Change-Id: I327de9c3a9e035cd11dc5022e978c840cd37581c
    verity: Add tools to help OEMs generate signed boot images.
    
    Change-Id: Iea200def2fdd8a0d366888bb7b1ae401297063f1
    Add signature verification to keystore and verity signers
    
    This change adds -verify flags to keystore and verity signers for
    verifying the signatures of the signed content generated by the
    same tools. This allows implementers of verified boot to test and
    verify the correctness of their implementations.
    
    Bug: 15984840
    Change-Id: I327de9c3a9e035cd11dc5022e978c840cd37581c
    DO NOT MERGE: Update keystore and verity metadata signers
    
    Use the same PKCS8 format as every other signing tool, and update
    the signature format to use SHA-256 instead of SHA-1.
    
    Bug: 15984840
    Bug: 18120110
    Change-Id: I6ac9e3594b5ae572f5b6763f3bd5b1bdb6ba2ad2
    (cherry picked from commit 19c6bb5fe97c877976ef79762c6051223b8d2213)
    Reinstate "Update boot image signature format to version 1"
    
    This reverts commit 7377e002421ed9a04cc94cd808c234f48d93924d.
    
    Change-Id: I4b1d83b62ae4d4dd6952663744b1171b3e0d0766
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Revert "Update boot image signature format to version 1"
    
    This reverts commit b62eabde2db40f01dfed1cef48ac2cbabdff4d03.
    
    Change-Id: I98019b7990c5436fe6ad5ef1052729478bccbe17
    Update boot image signature format to version 1
    
    Add the full X.509v3 certificate to the signature footer for easier
    verification.
    
    Change-Id: Ic969e9c1e4ab1a25ffdde2ab818b8edf2ad95253
    (cherry picked from commit f67d3764c641e53d4a1b925b4d02fec92b7e894a)
    Update keystore and verity metadata signers
    
    Use the same PKCS8 format as every other signing tool, and update
    the signature format to use SHA-256 instead of SHA-1.
    
    Change-Id: I6ac9e3594b5ae572f5b6763f3bd5b1bdb6ba2ad2
    Update boot image signature format to version 1
    
    Add the full X.509v3 certificate to the signature footer for easier
    verification.
    
    Change-Id: Ic969e9c1e4ab1a25ffdde2ab818b8edf2ad95253
    verity: Add tools to help OEMs generate signed boot images.
    
    Change-Id: Iea200def2fdd8a0d366888bb7b1ae401297063f1
    Add signature verification to keystore and verity signers
    
    This change adds -verify flags to keystore and verity signers for
    verifying the signatures of the signed content generated by the
    same tools. This allows implementers of verified boot to test and
    verify the correctness of their implementations.
    
    Bug: 15984840
    Change-Id: I327de9c3a9e035cd11dc5022e978c840cd37581c
    verity: Add tools to help OEMs generate signed boot images.
    
    Change-Id: Iea200def2fdd8a0d366888bb7b1ae401297063f1
    DO NOT MERGE: Add a tool for verifying verity signatures in images
    
    This tool takes a sparse ext4 image file, reads verity metadata
    from it, and verifies the signature of the verity table.
    
    Bug: 15984840
    Bug: 18120110
    Change-Id: I384a9ff885a0ffcd8febf100e76f3a1e5c7bbdab
    (cherry picked from commit c18aa9d69a69549b50966e322abe59cfa04edfe4)
    Add a tool for verifying verity signatures in images
    
    This tool takes a sparse ext4 image file, reads verity metadata
    from it, and verifies the signature of the verity table.
    
    Change-Id: I384a9ff885a0ffcd8febf100e76f3a1e5c7bbdab
    Reapply comment changes from failed am 40193d94
    
    Comment updates from commit 40193d94 were removed while fixing
    a merge conflict. This change reapplies them to bring master back
    to the same revision as lmp-mr1-dev.
    
    Change-Id: Id6cd8fab7f13ada4077cb2edfc17681086f16611
    Add signature verification to keystore and verity signers
    
    This change adds -verify flags to keystore and verity signers for
    verifying the signatures of the signed content generated by the
    same tools. This allows implementers of verified boot to test and
    verify the correctness of their implementations.
    
    Bug: 15984840
    Change-Id: I327de9c3a9e035cd11dc5022e978c840cd37581c
    Fix comments in BootSignature.java.
    
    Clearly mark the comment above main() as an example and fix
    the parameters in the example command. Also briefly document
    the arguments in the main function for clarity.
    
    Bug: 18376609
    Change-Id: I84eaf75799a8128100eb97c70e04563c609e9928
    DO NOT MERGE: Implement boot signature verification
    
    Adds signature verification support to BootSignature.java.
    
    Bug: 15984840
    Bug: 18120110
    Change-Id: Ib1a67573bdcd0f41e2d920f518de15993c8750e0
    (cherry picked from commit 7999c089cfa82d63d4a28606c78b381b74509175)
    Reinstate "Update boot image signature format to version 1"
    
    This reverts commit 7377e002421ed9a04cc94cd808c234f48d93924d.
    
    Change-Id: I4b1d83b62ae4d4dd6952663744b1171b3e0d0766
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Revert "Update boot image signature format to version 1"
    
    This reverts commit b62eabde2db40f01dfed1cef48ac2cbabdff4d03.
    
    Change-Id: I98019b7990c5436fe6ad5ef1052729478bccbe17
    Update boot image signature format to version 1
    
    Add the full X.509v3 certificate to the signature footer for easier
    verification.
    
    Change-Id: Ic969e9c1e4ab1a25ffdde2ab818b8edf2ad95253
    (cherry picked from commit f67d3764c641e53d4a1b925b4d02fec92b7e894a)
    Fix issues with appended boot signature.
    
    In particular this changes the OID to the SHA1 OID and
    appends the full BootSignature.
    
    This is cherry-picked from a WIP bug checked into master, but is complete.
    The work in finalized by further changes from Sami Tolvanen
    
    Bug: 15984840
    Change-Id: Ic43784fc339b9aedf91363c9ec9a453c3bb53294
    (cherry picked from commit 1f2ebbd57e86fb0749aeb453fb337065985ab9c6)
    Implement boot signature verification
    
    Adds signature verification support to BootSignature.java.
    
    Change-Id: Ib1a67573bdcd0f41e2d920f518de15993c8750e0
    Update boot image signature format to version 1
    
    Add the full X.509v3 certificate to the signature footer for easier
    verification.
    
    Change-Id: Ic969e9c1e4ab1a25ffdde2ab818b8edf2ad95253
    WIP: Fix issues with appended boot signature.
    
    In particular this changes the OID to the SHA1 OID and
    appends the full BootSignature.
    
    Bug: 15984840
    Change-Id: Ic43784fc339b9aedf91363c9ec9a453c3bb53294
    verity: Add tools to help OEMs generate signed boot images.
    
    Change-Id: Iea200def2fdd8a0d366888bb7b1ae401297063f1
    Revert "Temporary revert to fix the build."
    
    This reverts commit d1cda72457fed396942ae58f689ce84de7af3e9e.
    
    Additionally changes libcrypto to libcrypto-host.
    
    Change-Id: I8e57c31f904fae0113a514c26a78711e15782216
    Revert "Revert "Temporary revert to fix the build.""
    
    This reverts commit a0dafc9aacecdf45cbc20f1d0acbff789f56e607.
    
    Change-Id: I3b1b3a0b3f5c43c0d8f6dc0b6f2f5738b09c1e81
    Revert "Temporary revert to fix the build."
    
    This reverts commit d1cda72457fed396942ae58f689ce84de7af3e9e.
    
    Change-Id: Ia072e7adee68a1fbb21ae0f9fa38d61b461fb39f
    Temporary revert to fix the build.
    
    Change-Id: I40454606e3d974bd6fc79b46f663061549a1a790
    Add verified partition tools.
    
    Change-Id: Icf34336e6d574d62b60fff093ea8abe20358ac89
    Revert "Temporary revert to fix the build."
    
    This reverts commit d1cda72457fed396942ae58f689ce84de7af3e9e.
    
    Additionally changes libcrypto to libcrypto-host.
    
    Change-Id: I8e57c31f904fae0113a514c26a78711e15782216
    Revert "Revert "Temporary revert to fix the build.""
    
    This reverts commit a0dafc9aacecdf45cbc20f1d0acbff789f56e607.
    
    Change-Id: I3b1b3a0b3f5c43c0d8f6dc0b6f2f5738b09c1e81
    Revert "Temporary revert to fix the build."
    
    This reverts commit d1cda72457fed396942ae58f689ce84de7af3e9e.
    
    Change-Id: Ia072e7adee68a1fbb21ae0f9fa38d61b461fb39f
    Temporary revert to fix the build.
    
    Change-Id: I40454606e3d974bd6fc79b46f663061549a1a790
    Add verified partition tools.
    
    Change-Id: Icf34336e6d574d62b60fff093ea8abe20358ac89
    Add signature verification to keystore and verity signers
    
    This change adds -verify flags to keystore and verity signers for
    verifying the signatures of the signed content generated by the
    same tools. This allows implementers of verified boot to test and
    verify the correctness of their implementations.
    
    Bug: 15984840
    Change-Id: I327de9c3a9e035cd11dc5022e978c840cd37581c
    DO NOT MERGE: Update keystore and verity metadata signers
    
    Use the same PKCS8 format as every other signing tool, and update
    the signature format to use SHA-256 instead of SHA-1.
    
    Bug: 15984840
    Bug: 18120110
    Change-Id: I6ac9e3594b5ae572f5b6763f3bd5b1bdb6ba2ad2
    (cherry picked from commit 19c6bb5fe97c877976ef79762c6051223b8d2213)
    Update keystore and verity metadata signers
    
    Use the same PKCS8 format as every other signing tool, and update
    the signature format to use SHA-256 instead of SHA-1.
    
    Change-Id: I6ac9e3594b5ae572f5b6763f3bd5b1bdb6ba2ad2
    verity: Add tools to help OEMs generate signed boot images.
    
    Change-Id: Iea200def2fdd8a0d366888bb7b1ae401297063f1
    don't use sun's base64 encoders
    
    Use of sun.misc.BASE64Decoder considered harmful.  Use Bouncy Castle's
    instead, which come from the platform source tree.
    
    Change-Id: I7cc0d489854b9b33ddfc90501d064fa1142d9eee
    Revert "Temporary revert to fix the build."
    
    This reverts commit d1cda72457fed396942ae58f689ce84de7af3e9e.
    
    Additionally changes libcrypto to libcrypto-host.
    
    Change-Id: I8e57c31f904fae0113a514c26a78711e15782216
    Revert "Revert "Temporary revert to fix the build.""
    
    This reverts commit a0dafc9aacecdf45cbc20f1d0acbff789f56e607.
    
    Change-Id: I3b1b3a0b3f5c43c0d8f6dc0b6f2f5738b09c1e81
    Revert "Temporary revert to fix the build."
    
    This reverts commit d1cda72457fed396942ae58f689ce84de7af3e9e.
    
    Change-Id: Ia072e7adee68a1fbb21ae0f9fa38d61b461fb39f
    Temporary revert to fix the build.
    
    Change-Id: I40454606e3d974bd6fc79b46f663061549a1a790
    Add verified partition tools.
    
    Change-Id: Icf34336e6d574d62b60fff093ea8abe20358ac89
    Validate the full image in VerityVerifier
    
    Check the entire image against the verity hash tree, instead of
    merely verifying the signature. For signature verification, add
    support for mincrypt public key format used by fs_mgr.
    
    Bug: 18502074
    Change-Id: I5f81a52e16fc86220d649cc550c6f726d67b16fb
    DO NOT MERGE: Add a tool for verifying verity signatures in images
    
    This tool takes a sparse ext4 image file, reads verity metadata
    from it, and verifies the signature of the verity table.
    
    Bug: 15984840
    Bug: 18120110
    Change-Id: I384a9ff885a0ffcd8febf100e76f3a1e5c7bbdab
    (cherry picked from commit c18aa9d69a69549b50966e322abe59cfa04edfe4)
    Add a tool for verifying verity signatures in images
    
    This tool takes a sparse ext4 image file, reads verity metadata
    from it, and verifies the signature of the verity table.
    
    Change-Id: I384a9ff885a0ffcd8febf100e76f3a1e5c7bbdab
    Add EC support back to signing tools
    
    Even though RSA is the only supported algorithm in various
    places, add EC support back to Utils.java to allow potential
    use in future.
    
    Change-Id: I1e0afbf133c9a6b9edc3873160697cb7c27ea29e
    DO NOT MERGE: Implement boot signature verification
    
    Adds signature verification support to BootSignature.java.
    
    Bug: 15984840
    Bug: 18120110
    Change-Id: Ib1a67573bdcd0f41e2d920f518de15993c8750e0
    (cherry picked from commit 7999c089cfa82d63d4a28606c78b381b74509175)
    Reinstate "Update boot image signature format to version 1"
    
    This reverts commit 7377e002421ed9a04cc94cd808c234f48d93924d.
    
    Change-Id: I4b1d83b62ae4d4dd6952663744b1171b3e0d0766
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Revert "Update boot image signature format to version 1"
    
    This reverts commit b62eabde2db40f01dfed1cef48ac2cbabdff4d03.
    
    Change-Id: I98019b7990c5436fe6ad5ef1052729478bccbe17
    Update boot image signature format to version 1
    
    Add the full X.509v3 certificate to the signature footer for easier
    verification.
    
    Change-Id: Ic969e9c1e4ab1a25ffdde2ab818b8edf2ad95253
    (cherry picked from commit f67d3764c641e53d4a1b925b4d02fec92b7e894a)
    Implement boot signature verification
    
    Adds signature verification support to BootSignature.java.
    
    Change-Id: Ib1a67573bdcd0f41e2d920f518de15993c8750e0
    Update boot image signature format to version 1
    
    Add the full X.509v3 certificate to the signature footer for easier
    verification.
    
    Change-Id: Ic969e9c1e4ab1a25ffdde2ab818b8edf2ad95253
    verity: Add tools to help OEMs generate signed boot images.
    
    Change-Id: Iea200def2fdd8a0d366888bb7b1ae401297063f1
    system/extra: include more of what you use.
    
    This is a reland of aa24bc89b78a5981df7618bdef78b7b49ffad14d which was
    reverted in 291e20dab39783c7074191ff2d2de9b86465c10f because it broke
    the git_master-gpl builder.
    
    This version of the change uses crypto.h as a proxy for mem.h because
    it'll work in both BoringSSL and OpenSSL.
    
    (cherry picked from commit a83adf6354f3073a1938ffcd6cadd5c357856de5)
    
    Bug: 21085331
    Change-Id: I9e4c9e4d459c2e31f74180b3a3b2ab139ab76e80
    DO NOT MERGE: Support converting X.509 cert into a verity public key
    
    fs_mgr requires an RSA public key in mincrypt format for verifying
    dm-verity hash tables. Add support for extracting public keys from
    existing X.509 certificates and converting it into mincrypt format
    for use with fs_mgr.
    
    Bug: 15984840
    Bug: 18120110
    Change-Id: Ibcdca116cdc32dfa33d8f5636ec728244cbf6fd5
    (cherry picked from commit 82d824a6b5028930abd87ecd870924c72d3b3931)
    Support converting X.509 cert into a verity public key
    
    fs_mgr requires an RSA public key in mincrypt format for verifying
    dm-verity hash tables. Add support for extracting public keys from
    existing X.509 certificates and converting it into mincrypt format
    for use with fs_mgr.
    
    Change-Id: Ibcdca116cdc32dfa33d8f5636ec728244cbf6fd5
    Revert "Temporary revert to fix the build."
    
    This reverts commit d1cda72457fed396942ae58f689ce84de7af3e9e.
    
    Additionally changes libcrypto to libcrypto-host.
    
    Change-Id: I8e57c31f904fae0113a514c26a78711e15782216
    Revert "Revert "Temporary revert to fix the build.""
    
    This reverts commit a0dafc9aacecdf45cbc20f1d0acbff789f56e607.
    
    Change-Id: I3b1b3a0b3f5c43c0d8f6dc0b6f2f5738b09c1e81
    Revert "Temporary revert to fix the build."
    
    This reverts commit d1cda72457fed396942ae58f689ce84de7af3e9e.
    
    Change-Id: Ia072e7adee68a1fbb21ae0f9fa38d61b461fb39f
    Temporary revert to fix the build.
    
    Change-Id: I40454606e3d974bd6fc79b46f663061549a1a790
    Add verified partition tools.
    
    Change-Id: Icf34336e6d574d62b60fff093ea8abe20358ac89
    verity: Add tools to help OEMs generate signed boot images.
    
    Change-Id: Iea200def2fdd8a0d366888bb7b1ae401297063f1
    Revert "Temporary revert to fix the build."
    
    This reverts commit d1cda72457fed396942ae58f689ce84de7af3e9e.
    
    Additionally changes libcrypto to libcrypto-host.
    
    Change-Id: I8e57c31f904fae0113a514c26a78711e15782216
    Revert "Revert "Temporary revert to fix the build.""
    
    This reverts commit a0dafc9aacecdf45cbc20f1d0acbff789f56e607.
    
    Change-Id: I3b1b3a0b3f5c43c0d8f6dc0b6f2f5738b09c1e81
    Revert "Temporary revert to fix the build."
    
    This reverts commit d1cda72457fed396942ae58f689ce84de7af3e9e.
    
    Change-Id: Ia072e7adee68a1fbb21ae0f9fa38d61b461fb39f
    Temporary revert to fix the build.
    
    Change-Id: I40454606e3d974bd6fc79b46f663061549a1a790
    Add verified partition tools.
    
    Change-Id: Icf34336e6d574d62b60fff093ea8abe20358ac89
    Prepare for BoringSSL update.
    
    This change tweaks things as needed so that the code will compile
    against both the BoringSSL that's currently in Android and a version
    from upstream. The BORINGSSL_201509 define is temporary to allow the
    switch to happen without breaking the build and a followup change will
    remove it.
    
    In this case, we backed off on removing |ERR_print_errors|, despite it
    being a wart in the layering of the code.
    
    (cherry picked from commit 7a688f6e8774920cb8cfc52bf2e3c16976e8ff23)
    
    Change-Id: I2f2f567cfc37fe2d5a69742302c5a92d289b814f
    system/extra: include more of what you use.
    
    This is a reland of aa24bc89b78a5981df7618bdef78b7b49ffad14d which was
    reverted in 291e20dab39783c7074191ff2d2de9b86465c10f because it broke
    the git_master-gpl builder.
    
    This version of the change uses crypto.h as a proxy for mem.h because
    it'll work in both BoringSSL and OpenSSL.
    
    (cherry picked from commit a83adf6354f3073a1938ffcd6cadd5c357856de5)
    
    Bug: 21085331
    Change-Id: I9e4c9e4d459c2e31f74180b3a3b2ab139ab76e80
    system/extras/verity: BoringSSL fix.
    
    In BoringSSL, the functions that references BIOs have been moved out of
    ERR in order to have some reasonable layering of the code.
    
    A recent addition here referenced ERR_print_errors, which is now
    BIO_print_errors in BoringSSL for that reason. Additionally, the
    BoringSSL headers don't #include so many standard headers for you so an
    explicit #include of errno.h is needed here.
    
    Change-Id: Iebcc353b1354bd85d432deebeb7873aae46b0d2a
    Add a reference C implementation for verifying signatures
    
    Due to OEM requests, add a reference implementation for boot/recovery
    image signature verification in C. The tool uses OpenSSL for ASN.1 and
    crypto routines.
    
    Bug: 18120110
    Change-Id: I9f6c59e0b338b68f35ac1c2c4d83c10d31d70cd9
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    librank: fix pm_memusage_t init and layout
    
    pm_memusage_t variables must be initialized to 0 or call initializer.
    
    Bug: 26083907
    Change-Id: I62882be13de9c546e73bcdc24ec43ed0d5251db1
    fix possible buffer overrun in librank
    
    Use snprintf instead of sprintf and fclose() before return.
    
    Change-Id: I2c367b2e7b943f4ed10551c18ecc971e6b830c66
    Signed-off-by: Daegeun Song <daegeun.song@lge.com>
    librank: 64-bit compile issues
    
    - size_t format and comparisons
    
    Change-Id: I00ad92ecf2566c7aa02b145e1b8679164b2c9f8a
    librank: add flag to show only KSM pages
    
    Passing -k will cause librank to only show KSM pages.  The RSS
    column will approximate the memory used before KSM, and PSS will
    show the memory used after KSM.
    
    Change-Id: I62310b2cda97316b835cf7ebe51b5155872c37dc
    librank: show swapped pages per library
    
    Add a column showing swapped pages per library, but only show it
    if swapped pages exist in at least one library.
    
    Change-Id: I8f5a55dee7ed8d1f02ed7c947f6a22f7a5771eb8
    librank: add command line argument for cached or non-cached pages
    
    Add -c and -C command line arguments to only count pages that are
    cached (backed by storage) or non-cached (backed by ram or swap)
    respectively.  Non-cached pages include all anonymous pages, as
    well as file backed pages that are mapped private and then modified.
    
    Change-Id: I95025d52f1c876b9c41fcbddaef5e95e32ebf307
    librank: add command line argument to show all mappings
    
    Add -a command line argument to show all mappings, including
    anonymous, stack, and heap mappings.
    
    Change-Id: I7d80e2b4f5d880d434f57e1e7a37678917cd7407
    librank: add permissions command line argument
    
    Add a command line argument to only list pages with the given
    permissions.
    
    Change-Id: I884eedea607b250ac721e7fdac555992c435441f
    librank: convert argument parsing to getopt_long
    
    Change-Id: Ia145018d9096a550febe465c9f5b5f00d36c444d
    librank: add flag to show only KSM pages
    
    Passing -k will cause librank to only show KSM pages.  The RSS
    column will approximate the memory used before KSM, and PSS will
    show the memory used after KSM.
    
    Change-Id: I62310b2cda97316b835cf7ebe51b5155872c37dc
    librank: show swapped pages per library
    
    Add a column showing swapped pages per library, but only show it
    if swapped pages exist in at least one library.
    
    Change-Id: I8f5a55dee7ed8d1f02ed7c947f6a22f7a5771eb8
    librank: add command line argument for cached or non-cached pages
    
    Add -c and -C command line arguments to only count pages that are
    cached (backed by storage) or non-cached (backed by ram or swap)
    respectively.  Non-cached pages include all anonymous pages, as
    well as file backed pages that are mapped private and then modified.
    
    Change-Id: I95025d52f1c876b9c41fcbddaef5e95e32ebf307
    librank: add command line argument to show all mappings
    
    Add -a command line argument to show all mappings, including
    anonymous, stack, and heap mappings.
    
    Change-Id: I7d80e2b4f5d880d434f57e1e7a37678917cd7407
    librank: add permissions command line argument
    
    Add a command line argument to only list pages with the given
    permissions.
    
    Change-Id: I884eedea607b250ac721e7fdac555992c435441f
    librank: convert argument parsing to getopt_long
    
    Change-Id: Ia145018d9096a550febe465c9f5b5f00d36c444d
    Ignore SIGPIPE is some of the tools used via dumpstate
    
      adb bugreport > b & sleep 5; kill $?
    will show that a bunch of tools will SIGPIPE when trying to output data
    which is normal.
    We don't have a way on linux (bsd yes), to set NOSIGPIPE on the file desc
    passed down via fork/exec.
    
    Bug: 6447319
    Change-Id: I1634a00a155fd8a3fd827aa4a77e94518534336c
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add missing includes.
    
    Change-Id: Ie3acca064c1bcecb4e0305e61f01ba8cea4abe03
    procmem: Use size_t instead of int to remove a potential bug.
    
    In procmem.c, num_maps and num_pages are declared as
    int. Pointers (int*) to these variables are being
    passed to functions pm_process_maps and pm_map_pagemap
    respectively, both of which expect size_t * argument.
    
    This will lead to problems in 64-bit systems where
    size_t and int_t have different size.
    
    To avoid the issue, num_maps and num_pages are declared
    as size_t. In addition, loop counters i and j are now
    declared as size_t to avoid comparison of signed int with
    unsigned int.
    
    Change-Id: I3fc51f9386c9b2d289d34808e19e3811ca4a3dae
    Signed-off-by: Ashok Bhat <ashok.bhat@arm.com>
    procmem: fix procmem crash issue
    
    For the case pm_map_pagemap return error(e.g, maps[i]->start==maps[i]->end==0),
    the main loop continue without set mis[i] fields, and then mis[i]==0. So that
    the corresponding mi item is 0 for this case.
    Skip dumping this item to avoid crash.
    
    Change-Id: I7e1bea1abdccfd7594b9d904938b3462dc182a76
    Signed-off-by: Hong-Mei Li <a21834@motorola.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    For issue #2651381, allow library prelinking.
    
    Change-Id: I1b3e13f0e16b51604852437b32b1d8309471abc8
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    procrank: add proportional swap accounting
    
    Shared pages are reported in each of the sharing process swapped pages.
    Compute a proportional swap usage to get a meaningful value of what each
    process has in swap. Report also process unique pages swapped out.
    In case ZRAM is used compute the compression ration and report the
    actual RAM use of the swapped pages.
    
    Bug: 25392275
    Change-Id: I3a28c7812a09a02e1a604593615f5c6ad0340f9f
    Do free and fclose when error occur.
    
    Do free and fclose when error occur.
    
    Change-Id: Ifc611579cf919eeb3fbbf1dff70e7f851a26e083
    Signed-off-by: Daegeun Song <daegeun.song@lge.com>
    Revert "libpagemap: Mask off page shift to get page frame number"
    
    This reverts commit 4bf06a51869f49d7ee3fb0163a2517ec5e33ba1f.
    
    Bug: 17360804
    Bug: 17332389
    Change-Id: I7e4d55215f391f5b3f71388943e9d95e5eff6f81
    libpagemap: Mask off page shift to get page frame number
    
    see comment above pagemap_read() from the kernel
    
    Bug: 17332389
    Change-Id: Iaec9a2c8d2783f5c1e7ba06d9c7156305abe0453
    Signed-off-by: Daniel Rosenberg <drosen@google.com>
    libpagemap: support 64-bit kernel from 32-bit libpagemap
    
    Use uint64_t and lseek64 to handle 64-bit virtual addresses
    when libpagemap is compiled as a 32-bit library.
    
    Change-Id: Ie4b6c7ef05aac604011f3ee28b059d9dfcd63edb
    fix libpagemap for x86_64
    
    libpagemap was storing a virtual pfn in an int, which works on arm64
    with 39 bits of virtual address space but fails on x86_64.  Use an
    unsigned long instead.
    
    Fixes errors when running procrank on x86_64:
    warning: could not read usage for 1
    
    Change-Id: I171c8ee49faa51accf3c1bb69059d549aee04979
    libpagemap: handle zero length memory regions
    
    /proc/pid/maps may report a zero-length memory region for a 4kB
    PROT_GROWSDOWN region because it subtracts 4kB for the guard page.
    Return 0 instead of -1 when this occurs, and set range_out to NULL
    and len to 0.  All existing callers of pm_process_pagemap_range
    will not dereference range_out if len is 0.
    
    Bug: 14683277
    Change-Id: If405651ad034dda780b93fab2dc616e177a0b917
    libpagemap: fix memory leak in pm_process_destroy()
    
    procrank/librank not impacted because they end quickly. But other
    programs that use libpagemap and last for long time can easily see this
    memory leak.
    
    Change-Id: I8c9e9444555bef9145c9d89850987a29f15a9b3b
    Signed-off-by: Carton He <carton.he@marvell.com>
    libpagemap: add pm_process_usage_flags
    
    Add pm_process_usage flags to get memory usage by a process, only
    counting pages with specified flags set.
    
    Change-Id: I900b673ddbb5ae92312773a8670dd59769617268
    libpagemap: fix reusing previous name for mappings with no name
    
    Mappings that are not from a file do not have a name.  The sscanf
    will read all of the fields up to the name, and then leave name
    untouched.  This causes the previous name to be reused.  Reset
    name to an empty string before each call to sscanf.
    
    Change-Id: Ib146732983eb074d0d4773be094efa0b672f5ed2
    libpagemap: add pm_process_usage_flags
    
    Add pm_process_usage flags to get memory usage by a process, only
    counting pages with specified flags set.
    
    Change-Id: I900b673ddbb5ae92312773a8670dd59769617268
    libpagemap: fix reusing previous name for mappings with no name
    
    Mappings that are not from a file do not have a name.  The sscanf
    will read all of the fields up to the name, and then leave name
    untouched.  This causes the previous name to be reused.  Reset
    name to an empty string before each call to sscanf.
    
    Change-Id: Ib146732983eb074d0d4773be094efa0b672f5ed2
    Fix various issues in procrank.
    
    Fixed these problems:
    1. Page swapped bit was not extracted correctly.
    2. Pages were ignored when page present bit is not set.
    3. Bit operations were not correct.
    4. There was a compiler warning about unsigned/signed comparision.
    5. Line limit was too short for the map file. This was causing procrank
       to generate a warning and remove the related process from results.
    
    Change-Id: Ifed3913a49b15f59010cfa842090a13228074df9
    Handle EOF when reading /proc/<pid>/pagemap
    
    Instead of handling maps with the name "[vectors]" specially,
    silently ignore EOF when reading from /proc/<pid>/pagemap, which
    occurs any time a a mapping is outside of the userspace range.
    
    Change-Id: I674ade1eab6fd7732c6d9e120d0750cca5415b25
    Ignore the vector page in /proc/<pid>/maps
    
    In kernel 2.6.37, the vector page was added to /proc/<pid>/maps,
    but because it is located above TASK_SIZE (usually 0xbf000000),
    it is considered to be in the kernel's address space, not the
    process', so it doesn't show up in /proc/<pid>/pagemap.
    
    When the vector page is detected, using the name "[vectors]",
    remove it from the map.
    
    Change-Id: I5f0758bbe5d2b927056fa9fee684fea63dd0fa4b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Fix a couple of type mismatches in pagemap.
    Initial Contribution
    procrank: add proportional swap accounting
    
    Shared pages are reported in each of the sharing process swapped pages.
    Compute a proportional swap usage to get a meaningful value of what each
    process has in swap. Report also process unique pages swapped out.
    In case ZRAM is used compute the compression ration and report the
    actual RAM use of the swapped pages.
    
    Bug: 25392275
    Change-Id: I3a28c7812a09a02e1a604593615f5c6ad0340f9f
    libpagemap: count swapped pages
    
    Add a new memusage field for swapped pages.
    
    Change-Id: I857143a5fdd294315dd89e834b1217a219f10479
    libpagemap: count swapped pages
    
    Add a new memusage field for swapped pages.
    
    Change-Id: I857143a5fdd294315dd89e834b1217a219f10479
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libpagemap: support 64-bit kernel from 32-bit libpagemap
    
    Use uint64_t and lseek64 to handle 64-bit virtual addresses
    when libpagemap is compiled as a 32-bit library.
    
    Change-Id: Ie4b6c7ef05aac604011f3ee28b059d9dfcd63edb
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    procrank: add proportional swap accounting
    
    Shared pages are reported in each of the sharing process swapped pages.
    Compute a proportional swap usage to get a meaningful value of what each
    process has in swap. Report also process unique pages swapped out.
    In case ZRAM is used compute the compression ration and report the
    actual RAM use of the swapped pages.
    
    Bug: 25392275
    Change-Id: I3a28c7812a09a02e1a604593615f5c6ad0340f9f
    Swap column in procrank not reported with swap enabled
    
    Bug: 25392275
    Change-Id: I6d2a0b03abba555b3667f6ccf12896caeecf27aa
    libpagemap: count swapped pages
    
    Add a new memusage field for swapped pages.
    
    Change-Id: I857143a5fdd294315dd89e834b1217a219f10479
    libpagemap: add pm_map_usage_flags
    
    Add pm_map_usage_flags, which is the same as pm_map_usage but only
    counts pages with the specified flags set.  This can be used to
    only count "swapbacked" pages, which are pages that cannot be
    flushed back to disk without using swap.
    
    Change-Id: I6367555d9385502c797935849bb4221a8354e251
    libpagemap: fix vss calculation
    
    pm_map_usage was not incrementing vss for pages that were in the
    process's map but not occupying a physical page.  Move the
    vss increment above the check for present mappings.
    
    Change-Id: I2706e6fbcbfe7d70f10950333a486d690bc84d6c
    libpagemap: count swapped pages
    
    Add a new memusage field for swapped pages.
    
    Change-Id: I857143a5fdd294315dd89e834b1217a219f10479
    libpagemap: add pm_map_usage_flags
    
    Add pm_map_usage_flags, which is the same as pm_map_usage but only
    counts pages with the specified flags set.  This can be used to
    only count "swapbacked" pages, which are pages that cannot be
    flushed back to disk without using swap.
    
    Change-Id: I6367555d9385502c797935849bb4221a8354e251
    libpagemap: fix vss calculation
    
    pm_map_usage was not incrementing vss for pages that were in the
    process's map but not occupying a physical page.  Move the
    vss increment above the check for present mappings.
    
    Change-Id: I2706e6fbcbfe7d70f10950333a486d690bc84d6c
    Fix various issues in procrank.
    
    Fixed these problems:
    1. Page swapped bit was not extracted correctly.
    2. Pages were ignored when page present bit is not set.
    3. Bit operations were not correct.
    4. There was a compiler warning about unsigned/signed comparision.
    5. Line limit was too short for the map file. This was causing procrank
       to generate a warning and remove the related process from results.
    
    Change-Id: Ifed3913a49b15f59010cfa842090a13228074df9
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    procrank: add proportional swap accounting
    
    Shared pages are reported in each of the sharing process swapped pages.
    Compute a proportional swap usage to get a meaningful value of what each
    process has in swap. Report also process unique pages swapped out.
    In case ZRAM is used compute the compression ration and report the
    actual RAM use of the swapped pages.
    
    Bug: 25392275
    Change-Id: I3a28c7812a09a02e1a604593615f5c6ad0340f9f
    libpagemap: support 64-bit kernel from 32-bit libpagemap
    
    Use uint64_t and lseek64 to handle 64-bit virtual addresses
    when libpagemap is compiled as a 32-bit library.
    
    Change-Id: Ie4b6c7ef05aac604011f3ee28b059d9dfcd63edb
    Add {BEGIN,END}_DECLS to header file.
    
    Enable this header to be cleanly included in C++ code.
    
    Change-Id: Ie4ae60629661237ce07b49b17802f01bf95552d8
    libpagemap: add pm_process_usage_flags
    
    Add pm_process_usage flags to get memory usage by a process, only
    counting pages with specified flags set.
    
    Change-Id: I900b673ddbb5ae92312773a8670dd59769617268
    libpagemap: fix new kernel flag names to start with PM_PAGE_
    
    Change-Id: I6b030d9d0356d63b3ddb853de304407bc70b38c4
    libpagemap: count swapped pages
    
    Add a new memusage field for swapped pages.
    
    Change-Id: I857143a5fdd294315dd89e834b1217a219f10479
    libpagemap: add pm_map_usage_flags
    
    Add pm_map_usage_flags, which is the same as pm_map_usage but only
    counts pages with the specified flags set.  This can be used to
    only count "swapbacked" pages, which are pages that cannot be
    flushed back to disk without using swap.
    
    Change-Id: I6367555d9385502c797935849bb4221a8354e251
    libpagemap: add page flags for new kernels
    
    Change-Id: If4a4a2bbe9b1a68c5dce1151cf8b7c60cae1a3fa
    libpagemap: add definition for mask of permission flags
    
    Change-Id: Ibd0b26e4f5245592152d2c8ef00e7da1ad5f3fdf
    libpagemap: add pm_process_usage_flags
    
    Add pm_process_usage flags to get memory usage by a process, only
    counting pages with specified flags set.
    
    Change-Id: I900b673ddbb5ae92312773a8670dd59769617268
    libpagemap: fix new kernel flag names to start with PM_PAGE_
    
    Change-Id: I6b030d9d0356d63b3ddb853de304407bc70b38c4
    libpagemap: count swapped pages
    
    Add a new memusage field for swapped pages.
    
    Change-Id: I857143a5fdd294315dd89e834b1217a219f10479
    libpagemap: add pm_map_usage_flags
    
    Add pm_map_usage_flags, which is the same as pm_map_usage but only
    counts pages with the specified flags set.  This can be used to
    only count "swapbacked" pages, which are pages that cannot be
    flushed back to disk without using swap.
    
    Change-Id: I6367555d9385502c797935849bb4221a8354e251
    libpagemap: add page flags for new kernels
    
    Change-Id: If4a4a2bbe9b1a68c5dce1151cf8b7c60cae1a3fa
    libpagemap: add definition for mask of permission flags
    
    Change-Id: Ibd0b26e4f5245592152d2c8ef00e7da1ad5f3fdf
    Fix various issues in procrank.
    
    Fixed these problems:
    1. Page swapped bit was not extracted correctly.
    2. Pages were ignored when page present bit is not set.
    3. Bit operations were not correct.
    4. There was a compiler warning about unsigned/signed comparision.
    5. Line limit was too short for the map file. This was causing procrank
       to generate a warning and remove the related process from results.
    
    Change-Id: Ifed3913a49b15f59010cfa842090a13228074df9
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Fix a couple of type mismatches in pagemap.
    Initial Contribution
    Add back missing shared library libutils used by the executable in linker
    command.  The executable contains calls to function defined in the missing
    library.  Currently this is linked via a dependency of another shared library.
    While this works, it is not the right thing to do.
    auto import from //branches/cupcake/...@137197
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Initial Contribution
    Automated import from //branches/donutburger/...@140818,140818
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Use "-z muldefs" to work around duplicate symbol issues.
    
    Bug: 18389563
    
    The duplicate symbols arise as part of a compiler-rt update, which impacts
    libc++_static.a (and causes conflicts with the symbols in libgcc.a).
    
    Change-Id: I67d25c5ffcf6bbf199593a07917b1dc739301a57
    Make memtrack an optional module.
    
    This isn't really _needed_ (someone correct me if I'm wrong), and
    right now it's preventing some of us from building for flounder
    because of the segfaults in ld.
    
    Change-Id: I5bdf81e1daca757e332447af61523c9e2b941a70
    Move system/extras to libc++.
    
    Bug: 15193147
    Change-Id: I2188179aa315b6b94493135cfb243d5a9018fd10
    Don't manually link stlport.
    
    Change-Id: I98f688e01ac65ac83941926ff8b370fba341d735
    Remove makefile cruft.
    
    Don't manually include stlport, and don't use private bionic headers.
    
    Change-Id: I0762ada6a759bcbb9b1d40f8bfd2255949da860d
    Add the memtrack utility.
    
    This utility attempts to track the PSS usage of all of the
    processes in the system. It will keep track of the min/max/avg/last
    PSS for every process it has ever seen and dump that information when
    the program is terminated or when a USR1 or TSTP signal is sent to
    the process.
    
    Change-Id: Id9364d5121b70f80b8335c379a241bee2fbdb019
    auto import from //branches/cupcake/...@137197
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Move system/extras to libc++.
    
    Bug: 15193147
    Change-Id: I2188179aa315b6b94493135cfb243d5a9018fd10
    Add the memtrack utility.
    
    This utility attempts to track the PSS usage of all of the
    processes in the system. It will keep track of the min/max/avg/last
    PSS for every process it has ever seen and dump that information when
    the program is terminated or when a USR1 or TSTP signal is sent to
    the process.
    
    Change-Id: Id9364d5121b70f80b8335c379a241bee2fbdb019
    Add the memtrack utility.
    
    This utility attempts to track the PSS usage of all of the
    processes in the system. It will keep track of the min/max/avg/last
    PSS for every process it has ever seen and dump that information when
    the program is terminated or when a USR1 or TSTP signal is sent to
    the process.
    
    Change-Id: Id9364d5121b70f80b8335c379a241bee2fbdb019
    Add a couple of performance debug utilities.
    
    micro_bench provides very simple tests for
    o sleep accuracy
    o cpu
    o memcpy
    o memset
    
    sane_schedstat is a front-end for /proc/schedstat to diff and format the
    counters.
    
    Change-Id: I6e178fe37fcfc9bf0a83ec17852e31146a91e7a4
    Signed-off-by: Nick Pelly <npelly@google.com>
    auto import from //branches/cupcake/...@137197
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add a couple of performance debug utilities.
    
    micro_bench provides very simple tests for
    o sleep accuracy
    o cpu
    o memcpy
    o memset
    
    sane_schedstat is a front-end for /proc/schedstat to diff and format the
    counters.
    
    Change-Id: I6e178fe37fcfc9bf0a83ec17852e31146a91e7a4
    Signed-off-by: Nick Pelly <npelly@google.com>
    Rename micro bench 32 bit
    
    Rename micro_bench32 to micro_bench for backwards compatibility.
    
    Change-Id: I130f281967cffc3e337d27e84c4caa66d39d1385
    Rename micro bench 32 bit
    
    Rename micro_bench32 to micro_bench for backwards compatibility.
    
    Change-Id: I130f281967cffc3e337d27e84c4caa66d39d1385
    Create 32 bit and 64 bit versions of exes.
    
    Change-Id: Ifc639b7ed97c75faf0ce52475e7c3ec0dc2dd9b9
    Fix build.
    
    Change-Id: I8027e9cb455ac396189b2b8e58588aa1959bb8c0
    Update micro_bench.
    
    Moving the code to cpp to access the cpuset CPU* macros (these
    macros are defined in sched.h inside of __USE_GNU which is not
    defined for the thumb C compiler). The C++ code is also slightly
    easier to read.
    Add code to set the priority of the process to the highest value.
    Add code to lock the process to a single cpu.
    Add the ability to compute average and standard deviation over
    a number of iterations.
    Change the timing code to use nanosecond resolution timing.
    Add options to allow modification of the alignment of the src/dst
    pointers for memcpy and the dst pointer for memset.
    Add an option to change the size of the data being copied in each
    iteration.
    
    Change-Id: Ib7c50ed4463f94e638eb81690fe8fe0d0bc3ea80
    Add a static variant for micro_bench.
    
    So that it will be easier to test target-dependent bionic implementations
    across devices.
    
    Change-Id: Ie74dc37d5632b1a270f0d2e9013d504a810640e2
    Add a couple of performance debug utilities.
    
    micro_bench provides very simple tests for
    o sleep accuracy
    o cpu
    o memcpy
    o memset
    
    sane_schedstat is a front-end for /proc/schedstat to diff and format the
    counters.
    
    Change-Id: I6e178fe37fcfc9bf0a83ec17852e31146a91e7a4
    Signed-off-by: Nick Pelly <npelly@google.com>
    tests: Add simple direct i/o test
    
    Adds a simple write/readback test of direct i/o on a block
    device node.
    
    Change-Id: I06c2bb50fbc014157f5e0eaf2bbb910b89f5fc25
    Signed-off-by: Garmin Android technology group <android@garmin.com>
    Add memmove benchmarking.
    
    Change-Id: I75bb907f5633d155cd411941ea6d9d39b9787983
    Add missing <string.h> include.
    
    Change-Id: Iffdfed00ac49a7920844fa5f9e1a3ffc6a77e641
    micro_bench: 64 bit compile issues
    
    - use %zu for size_t operands
    - suppress unused argument warning messages
    
    Change-Id: Ib39b8763414320d9e3a29408bc1b396ddb376293
    Add cold versions of benchmarks.
    
    - Created macros for one and two buffer benchmarks to simplify
      addition of new benchmarks.
    - Created cold versions of all benchmarks that work on buffer benchmarks.
      This means that the benchmark is given buffers that are not in the cache.
    - Verified the cold versions are working as intended by
      changing it so that the same buffer is written in each loop
      instead of the strided buffer. Using this method, the cold and
      normal benchmark run at the same speed.
    
    Merge from internal master.
    
    (cherry-picked from 991bcd464d67c3cff76477140331619ff138aafc)
    
    Change-Id: I4b1b55510d90cc9a941fd68244971cb08cfba553
    Add cold versions of benchmarks.
    
    - Created macros for one and two buffer benchmarks to simplify
      addition of new benchmarks.
    - Created cold versions of all benchmarks that work on buffer benchmarks.
      This means that the benchmark is given buffers that are not in the cache.
    - Verified the cold versions are working as intended by
      changing it so that the same buffer is written in each loop
      instead of the strided buffer. Using this method, the cold and
      normal benchmark run at the same speed.
    
    Change-Id: Ie5d1b015dd70d3935cfa2830a82955429a2f5b3c
    Adding strlen, strcat, strcpy benchmarks.
    
    Merge from internal master.
    
    (cherry-picked from 7401bc1263d9b9d9f7605a3c5bdaaf3171c7e9c0)
    
    Change-Id: I7139a96022540c3604dd38f7f7836c8823e540dc
    Adding strlen, strcat, strcpy benchmarks.
    
    Change-Id: I31542ecdec95c2d1d3fb9b2795581ad4d5e13c5c
    Add a benchmark of strcpy.
    
    List of all changes:
    - Add a strcpy benchmark.
    - Create a macro that is used to create all of the code for the main
      loop of the benchmark.
    - Fix the strcmp benchmark to use two buffers. The single buffer was
      an experiment that should not have been committed. It also crashes
      when a large alignment is used because it hard-coded an extra 2048
      allocation regardless of the alignment chosen.
    - Modify the libc benchmarks to take the function to bench as a
      parameter. This will allow us to benchmark new potential libc
      optimizations by adding a single line to the function table list.
    
    Merge from internal master.
    
    (cherry-picked from commit 014cf9dc226a775e27b2e6ace2461c510d9c6c19)
    
    Change-Id: I8848e309fa1b323fe98f4525eb0f27a889fd0a7f
    Add a benchmark of strcpy.
    
    List of all changes:
    - Add a strcpy benchmark.
    - Create a macro that is used to create all of the code for the main
      loop of the benchmark.
    - Fix the strcmp benchmark to use two buffers. The single buffer was
      an experiment that should not have been committed. It also crashes
      when a large alignment is used because it hard-coded an extra 2048
      allocation regardless of the alignment chosen.
    - Modify the libc benchmarks to take the function to bench as a
      parameter. This will allow us to benchmark new potential libc
      optimizations by adding a single line to the function table list.
    
    Change-Id: Id7129667669318acbd001c1bfa3db82764a39029
    Add strcmp benchmarking.
    
    NOTE: After this change memcpy results will be significantly lower
          for larger sized copies.
    
    Changes:
    - Addition of strcmp benchmarking.
    - Fix memcpy to initialize memory before copy. If this is not done, the
      results of memcpy are artificially higher.
    - Add a min and max when printing averages.
    - Add two new options --dst_or_mask and --src_or_mask to allow more
      flexibility when testing different alignments.
    
    Change-Id: Ia2859d5569ab5ffa35e5ac0f6d5d1f248fef6533
    Update micro_bench.
    
    Moving the code to cpp to access the cpuset CPU* macros (these
    macros are defined in sched.h inside of __USE_GNU which is not
    defined for the thumb C compiler). The C++ code is also slightly
    easier to read.
    Add code to set the priority of the process to the highest value.
    Add code to lock the process to a single cpu.
    Add the ability to compute average and standard deviation over
    a number of iterations.
    Change the timing code to use nanosecond resolution timing.
    Add options to allow modification of the alignment of the src/dst
    pointers for memcpy and the dst pointer for memset.
    Add an option to change the size of the data being copied in each
    iteration.
    
    Change-Id: Ib7c50ed4463f94e638eb81690fe8fe0d0bc3ea80
    Clean up su.
    
    Stop building su as a static executable. We don't rely on the getuid
    implementation for security, so we have nothing to fear from the dynamic
    linker.
    
    Add some missing error checking and improve error reporting.
    
    Remove various special cases that can all be rolled into the general
    case.
    
    Bug: 19647373
    Change-Id: I2689b8957a89da1f3be571fcdc966b1084efca9a
    auto import from //branches/cupcake/...@137197
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Special-case "su --help".
    
    Rather than force people to move from "su system echo -n hello", where
    the -n gets interpreted by getopt_long(3), to "su system -- echo -n hello",
    just hard-code the recognition of --help. This seems easier than moving
    people over to the more traditional "su -c 'echo -n hello'" style.
    
    Bug: 19948740
    Change-Id: I248269343b452a381effb7b8926ac7f2522b941b
    su should reset PATH, IFS, LOGNAME, and USER.
    
    Also add -h and --help while we're here (since all the toybox commands carry
    their own documentation, and our su isn't much like the real su).
    
    Bug: 19647373
    Bug: 19564110
    Change-Id: If2e6117b6701dcac03b5831f251e60a272bf0d61
    Fix su.
    
    Manually NULL-terminate the arguments array instead of trying to use memset.
    This was accidentally working on LP64 but fails reliably on LP32.
    
    Change-Id: Ic2ecb8ed2019f260c720f27dbd018a55e7cfa569
    Clean up su.
    
    Stop building su as a static executable. We don't rely on the getuid
    implementation for security, so we have nothing to fear from the dynamic
    linker.
    
    Add some missing error checking and improve error reporting.
    
    Remove various special cases that can all be rolled into the general
    case.
    
    Bug: 19647373
    Change-Id: I2689b8957a89da1f3be571fcdc966b1084efca9a
    su: support fine grained setting of gid and groups
    
    To allow some tests to quickly check if some group membership handling
    are correctly done, the tests need to run as a proc belonging to multiple
    groups.
    su would normally only allow setting uid=gid=something.
    
    This changes adds setting the gid separately from the uid and setting the
    groups:
      su [uid[,gid[,group1]...]] [cmd]]
    E.g.
     su
     su shell ls /data
     su 1000,shell,net_bw_acct,net_bw_stats id
    will return
     uid=1000(system) gid=2000(shell) groups=3006(net_bw_stats),3007(net_bw_acct)
    
    Change-Id: I713454bf14c3bc3ece93aec3729bda102542d1b1
    su: do uid check earlier.
    
    Change-Id: Ied4894019d2b0021e7f727569ff85650d209e5da
    auto import from //branches/cupcake_rel/...@140373
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //branches/cupcake/...@137197
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add missing includes.
    
    Change-Id: Ie3acca064c1bcecb4e0305e61f01ba8cea4abe03
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Remove sound, memtest, vibrator, timetest, cachetest from tests build
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add missing includes.
    
    Change-Id: Ie3acca064c1bcecb4e0305e61f01ba8cea4abe03
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Initial Contribution
