    Merge extensions as published at khronos.org
    
    No significant changes. The extensions now have assigned extensions
    numbers. And Jon Leech added missing suffixes in the declaration of
    eglSetBlobCacheFuncsANDROID; our header and code already had the
    suffix.
    
    Change-Id: I2faad8ebe0ca81b13e29729a15515ee6b17b94b2
    Mark extensions 'Complete', correct some stale version info
    
    Change-Id: I46ccd8eaeacc647399a5531e262c1b01e0a080b0
    Initial draft of EGL_ANDROID_image_native_buffer
    
    Change-Id: If9bdd27ffdb13fb85e9ef873b311d6721399f75f
    Merge extensions as published at khronos.org
    
    No significant changes. The extensions now have assigned extensions
    numbers. And Jon Leech added missing suffixes in the declaration of
    eglSetBlobCacheFuncsANDROID; our header and code already had the
    suffix.
    
    Change-Id: I2faad8ebe0ca81b13e29729a15515ee6b17b94b2
    Mark extensions 'Complete', correct some stale version info
    
    Change-Id: I46ccd8eaeacc647399a5531e262c1b01e0a080b0
    EGL: update EGL_ANDROID_recordable extension.
    
    This change adds an enum value and a description of the expected
    implementations to the EGL_ANDROID_recordable extension specification.
    It also adds the new enum value to the 'eglext.h' header.
    
    Change-Id: Ia0de2d5613708445ff83b85a7e550f9417531ee4
    Add the EGL_ANDROID_recordable spec.
    
    Change-Id: I002177a68fafd6bb941aa64445c85fd5ff56223a
    Merge extensions as published at khronos.org
    
    No significant changes. The extensions now have assigned extensions
    numbers. And Jon Leech added missing suffixes in the declaration of
    eglSetBlobCacheFuncsANDROID; our header and code already had the
    suffix.
    
    Change-Id: I2faad8ebe0ca81b13e29729a15515ee6b17b94b2
    Mark extensions 'Complete', correct some stale version info
    
    Change-Id: I46ccd8eaeacc647399a5531e262c1b01e0a080b0
    Add a spec for EGL_ANDROID_framebuffer_target.
    
    This change adds a new extension for EGL implementations to indicate the
    EGLConfigs that support use as a HWComposer framebuffer target layer.
    
    Change-Id: Ia7c8fbe8da09d57b4ec8bf1d9ddb67ca21aa2885
    Merge extensions as published at khronos.org
    
    No significant changes. The extensions now have assigned extensions
    numbers. And Jon Leech added missing suffixes in the declaration of
    eglSetBlobCacheFuncsANDROID; our header and code already had the
    suffix.
    
    Change-Id: I2faad8ebe0ca81b13e29729a15515ee6b17b94b2
    Mark extensions 'Complete', correct some stale version info
    
    Change-Id: I46ccd8eaeacc647399a5531e262c1b01e0a080b0
    DO NOT MERGE - native_fence_sync: fix an enum name
    
    This change replaces all references to the "EGL_NO_NATIVE_FENCE_ANDROID" enum
    with "EGL_NO_NATIVE_FENCE_FD_ANDROID".
    
    Bug: http://code.google.com/p/android/issues/detail?id=40295
    
    (cherry-pick from master)
    
    Change-Id: Ie25d4ab9721d8b69b8d4afcf18e902ef8e3ad911
    native_fence_sync: fix an enum name
    
    This change replaces all references to the "EGL_NO_NATIVE_FENCE_ANDROID" enum
    with "EGL_NO_NATIVE_FENCE_FD_ANDROID".
    
    Bug: http://code.google.com/p/android/issues/detail?id=40295
    Change-Id: I049b2ba185c2dbdccb8fc069701dbe805d63f645
    EGL: add the native_fence_sync extension
    
    This change adds support for the EGL_ANDROID_native_fence_sync extension to the
    Android EGL layer.  It also fixes a couple minor issues with the extension spec.
    
    Change-Id: Ic8829d21f37b701f33aa9c72c3d25e88e03fa3cd
    EGL_ANDROID_native_fence_sync: fix the version
    
    Change-Id: Ib43b8fec8f37bb847d7bcdbf7607fd56f19a0563
    EGL_ANDROID_fence_sync: make it more generic
    
    This change updates the extension spec to refer to generic "native fence sync
    objects" rather than "Android fence sync objects."
    
    Change-Id: I15a79f08571586431845b54c58c8420b652f40ef
    Update the EGL_ANDROID_fence_sync spec.
    
    Change-Id: I26589e51c2023aed4da8a25a098b01804200ddc2
    Add the EGL_ANDROID_fence_sync spec.
    
    Change-Id: I8c26e5caaf8d89a60a09a5308d55e336537b916e
    Small clarifications to EGL_ANDROID_presentation_time
    
    Change-Id: I4365a981776ab0a5719c268258b87ff1418f9aeb
    Recommend different time source
    
    We were recommending SystemClock#uptimeMillis() from Java code, but
    millisecond resolution is a little coarse.  We don't have an
    appropriate call in SystemClock, so use System.nanoTime() instead.
    
    Bug 8733179
    
    Change-Id: Ifb85a03eabf7ff168966adcb5ed5914bbf3884b2
    EGL_ANDROID_presentation_time: initial spec draft
    
    Change-Id: I1cd174a08c499e5bde19e7ecd449da8266e7e66e
    Merge extensions as published at khronos.org
    
    No significant changes. The extensions now have assigned extensions
    numbers. And Jon Leech added missing suffixes in the declaration of
    eglSetBlobCacheFuncsANDROID; our header and code already had the
    suffix.
    
    Change-Id: I2faad8ebe0ca81b13e29729a15515ee6b17b94b2
    Mark extensions 'Complete', correct some stale version info
    
    Change-Id: I46ccd8eaeacc647399a5531e262c1b01e0a080b0
    EGL: add the ANDROID suffix to the blob cache ext
    
    This change adds the ANDROID suffix to the all the types and functions
    defined by the EGL_ANDROID_blob_cache extension.
    
    Change-Id: I087875b96d9a7053efb9c8d5614f9f765eed799d
    Add the spec for EGL_ANDROID_blob_cache.
    
    Change-Id: Ibaff52fee5c856283536ad37251cc80a9f3f938b
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Restore old OpenGL tests
    
    These tests call android_createDisplaySurface() to get a
    FramebufferNativeWindow that is passed to EGL.  This relies on the
    existence of the framebuffer HAL, which is not supported on many
    recent devices.
    
    This change adds a new "window surface" object that the tests
    can use to get a window from SurfaceFlinger instead.  All tests
    except for the HWC tests now appear to do things.
    
    The HWC tests don't do anything useful, but they no longer depend
    on the android_createDisplaySurface() function.
    
    Bug 13323813
    
    Change-Id: I2cbfbacb3452fb658c29e945b0c7ae7c94c1a4ba
    remove libui dependency on libEGL
    
    Change-Id: I1194f04085637d5c384e134967249430cc43b6ee
    option to enable multisampling
    
    multisampling can be enabled by specifying the number of
    samples desired on the command line.
    
    Change-Id: I5f93c93ae7ada54bcd646c1065e07890d0cb9808
    add a fps counter to sanangeles demo
    
    Change-Id: I9a9473ce213301cc7661fddfb1ef5a6ffcb346d4
    eclair snapshot
    update most gl tests to use EGLUtils
    opengl tests
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Code drop from //branches/cupcake/...@124589
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Restore old OpenGL tests
    
    These tests call android_createDisplaySurface() to get a
    FramebufferNativeWindow that is passed to EGL.  This relies on the
    existence of the framebuffer HAL, which is not supported on many
    recent devices.
    
    This change adds a new "window surface" object that the tests
    can use to get a window from SurfaceFlinger instead.  All tests
    except for the HWC tests now appear to do things.
    
    The HWC tests don't do anything useful, but they no longer depend
    on the android_createDisplaySurface() function.
    
    Bug 13323813
    
    Change-Id: I2cbfbacb3452fb658c29e945b0c7ae7c94c1a4ba
    fixup include paths
    
    - remove unneeded include deps
    - remove some hardcoded include paths
    
    Change-Id: Ifae0e2b2d738e0f94f8525c45be78f4227ce1673
    remove libui dependency on libEGL
    
    Change-Id: I1194f04085637d5c384e134967249430cc43b6ee
    eclair snapshot
    update most gl tests to use EGLUtils
    donut snapshot
    Remove opengl tests from tests build
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Code drop from //branches/cupcake/...@124589
    Restore old OpenGL tests
    
    These tests call android_createDisplaySurface() to get a
    FramebufferNativeWindow that is passed to EGL.  This relies on the
    existence of the framebuffer HAL, which is not supported on many
    recent devices.
    
    This change adds a new "window surface" object that the tests
    can use to get a window from SurfaceFlinger instead.  All tests
    except for the HWC tests now appear to do things.
    
    The HWC tests don't do anything useful, but they no longer depend
    on the android_createDisplaySurface() function.
    
    Bug 13323813
    
    Change-Id: I2cbfbacb3452fb658c29e945b0c7ae7c94c1a4ba
    remove libui dependency on libEGL
    
    Change-Id: I1194f04085637d5c384e134967249430cc43b6ee
    eclair snapshot
    update most gl tests to use EGLUtils
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Code drop from //branches/cupcake/...@124589
    Restore old OpenGL tests
    
    These tests call android_createDisplaySurface() to get a
    FramebufferNativeWindow that is passed to EGL.  This relies on the
    existence of the framebuffer HAL, which is not supported on many
    recent devices.
    
    This change adds a new "window surface" object that the tests
    can use to get a window from SurfaceFlinger instead.  All tests
    except for the HWC tests now appear to do things.
    
    The HWC tests don't do anything useful, but they no longer depend
    on the android_createDisplaySurface() function.
    
    Bug 13323813
    
    Change-Id: I2cbfbacb3452fb658c29e945b0c7ae7c94c1a4ba
    another attempt to fix the build
    
    Change-Id: Ie0245db97170cca9a2cd8783b0fd512daf0d30a6
    fixup include paths
    
    - remove unneeded include deps
    - remove some hardcoded include paths
    
    Change-Id: Ifae0e2b2d738e0f94f8525c45be78f4227ce1673
    remove libui dependency on libEGL
    
    Change-Id: I1194f04085637d5c384e134967249430cc43b6ee
    YUV texturing test.
    
    Change-Id: Ib2a6b7eb2a5fc98ecaace032d6c63d50613aaa0d
    eclair snapshot
    update most gl tests to use EGLUtils
    donut snapshot
    Remove opengl tests from tests build
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Code drop from //branches/cupcake/...@124589
    Restore old OpenGL tests
    
    These tests call android_createDisplaySurface() to get a
    FramebufferNativeWindow that is passed to EGL.  This relies on the
    existence of the framebuffer HAL, which is not supported on many
    recent devices.
    
    This change adds a new "window surface" object that the tests
    can use to get a window from SurfaceFlinger instead.  All tests
    except for the HWC tests now appear to do things.
    
    The HWC tests don't do anything useful, but they no longer depend
    on the android_createDisplaySurface() function.
    
    Bug 13323813
    
    Change-Id: I2cbfbacb3452fb658c29e945b0c7ae7c94c1a4ba
    remove libui dependency on libEGL
    
    Change-Id: I1194f04085637d5c384e134967249430cc43b6ee
    gl2_yuvtex: use the gralloc-provided stride.
    
    This change fixes the gl2_yuvtex test to use the stride chosen by the
    gralloc implementation rather than hard-coding it.
    
    Bug: 4081948
    Change-Id: If7c96a20fc3fb1df2ff25e6afaa9f34dbad2002c
    gl2_yuvtex: use the gralloc-provided stride.
    
    This change fixes the gl2_yuvtex test to use the stride chosen by the
    gralloc implementation rather than hard-coding it.
    
    Bug: 4081948
    Change-Id: If7c96a20fc3fb1df2ff25e6afaa9f34dbad2002c
    YUV texturing test.
    
    Change-Id: Ib2a6b7eb2a5fc98ecaace032d6c63d50613aaa0d
    update EGL headers to the latest
    
    note that this doesn't update the EGL stubs.
    
    Change-Id: I00274431a490249d93eb6b5ba13f274b7f2682ae
    eclair snapshot
    Print out EGL configuration info for the config we've chosen.
    
    Don't ask for PBuffer support, since we don't actually use pbuffers,
    and some drivers might not support them.
    Print out all available EGL configurations.
    Use EGLUtils to simplify choosing a configuration.
    
    Doesn't actually select anything, possibly due to device driver errors.
    Create samples showing how to call OpenGL from JNI libraries.
    Draw a green triangle using OpenGL 2.0 APIs.
    Add additional error checking, exit early if errors occur.
    Add EGL call error checking.
    Simple app to create a gl2 context and dump the strings.
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    Declare that testViewport targets Froyo APIs
    
    (So that it can be built in Master, but run in
    Froyo.)
    Add a test program for Sapphire viewport
    rotation issue.
    Add a test of EGL pausing and resuming.
    Add a Java API for OpenGL ES 2.0.
    
    Currently this API is hidden.
    
    Add a test program.
    Add a Java API for OpenGL ES 2.0.
    
    Currently this API is hidden.
    
    Add a test program.
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    Declare that testViewport targets Froyo APIs
    
    (So that it can be built in Master, but run in
    Froyo.)
    Add a test program for Sapphire viewport
    rotation issue.
    Add a test of EGL pausing and resuming.
    eclair snapshot
    Create samples showing how to call OpenGL from JNI libraries.
    Add a test program for Sapphire viewport
    rotation issue.
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    Add a test program for Sapphire viewport
    rotation issue.
    GLDual test application.
    
    Draws two images at once, one GL based, one GL2 based.
    Create samples showing how to call OpenGL from JNI libraries.
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add a test program for Sapphire viewport
    rotation issue.
    eclair snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add a test program for Sapphire viewport
    rotation issue.
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    Add a test of EGL pausing and resuming.
    Add a Java API for OpenGL ES 2.0.
    
    Currently this API is hidden.
    
    Add a test program.
    Add a Java API for OpenGL ES 2.0.
    
    Currently this API is hidden.
    
    Add a test program.
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    Add a test of EGL pausing and resuming.
    eclair snapshot
    Create samples showing how to call OpenGL from JNI libraries.
    Add a test of EGL pausing and resuming.
    Add a test of EGL pausing and resuming.
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    Add a test of EGL pausing and resuming.
    GLDual test application.
    
    Draws two images at once, one GL based, one GL2 based.
    Create samples showing how to call OpenGL from JNI libraries.
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add a test of EGL pausing and resuming.
    eclair snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add a test of EGL pausing and resuming.
    eclair snapshot
    Add very simple input path. Fix end-of-line issues.
    Create samples showing how to call OpenGL from JNI libraries.
    Initial checkin of a framerate test app
    
    Measures the time to do nothing but clear the screen in an
    OpenGL Java app. Spews frame time statistics to the log.
    
    Control long frame time by setting debug.longframe_ms;
    e.g., adb shell setprop debug.longframe_ms 33
    
    Change-Id: I435a3cb170048349e00417c44db42121c68744b2
    Add a Java API for OpenGL ES 2.0.
    
    Currently this API is hidden.
    
    Add a test program.
    Add a Java API for OpenGL ES 2.0.
    
    Currently this API is hidden.
    
    Add a test program.
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    Initial checkin of a framerate test app
    
    Measures the time to do nothing but clear the screen in an
    OpenGL Java app. Spews frame time statistics to the log.
    
    Control long frame time by setting debug.longframe_ms;
    e.g., adb shell setprop debug.longframe_ms 33
    
    Change-Id: I435a3cb170048349e00417c44db42121c68744b2
    Add simple interactive end-to-end latency test.
    
    Change-Id: I4c2f2acf797a3a753f8a6061db3d2bcdc7d642f0
    Declare that testViewport targets Froyo APIs
    
    (So that it can be built in Master, but run in
    Froyo.)
    Add a test program for Sapphire viewport
    rotation issue.
    Add a test of EGL pausing and resuming.
    eclair snapshot
    Create samples showing how to call OpenGL from JNI libraries.
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    Initial checkin of a framerate test app
    
    Measures the time to do nothing but clear the screen in an
    OpenGL Java app. Spews frame time statistics to the log.
    
    Control long frame time by setting debug.longframe_ms;
    e.g., adb shell setprop debug.longframe_ms 33
    
    Change-Id: I435a3cb170048349e00417c44db42121c68744b2
    Add simple interactive end-to-end latency test.
    
    Change-Id: I4c2f2acf797a3a753f8a6061db3d2bcdc7d642f0
    An application version of the GL test.
    
    Change-Id: Ibcccdf2560eb24d3037c02c4740f0048b60d070c
    GLDual test application.
    
    Draws two images at once, one GL based, one GL2 based.
    Create samples showing how to call OpenGL from JNI libraries.
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Initial checkin of a framerate test app
    
    Measures the time to do nothing but clear the screen in an
    OpenGL Java app. Spews frame time statistics to the log.
    
    Control long frame time by setting debug.longframe_ms;
    e.g., adb shell setprop debug.longframe_ms 33
    
    Change-Id: I435a3cb170048349e00417c44db42121c68744b2
    Initial checkin of a framerate test app
    
    Measures the time to do nothing but clear the screen in an
    OpenGL Java app. Spews frame time statistics to the log.
    
    Control long frame time by setting debug.longframe_ms;
    e.g., adb shell setprop debug.longframe_ms 33
    
    Change-Id: I435a3cb170048349e00417c44db42121c68744b2
    Add simple interactive end-to-end latency test.
    
    Change-Id: I4c2f2acf797a3a753f8a6061db3d2bcdc7d642f0
    Add a Java API for OpenGL ES 2.0.
    
    Currently this API is hidden.
    
    Add a test program.
    eclair snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Restore old OpenGL tests
    
    These tests call android_createDisplaySurface() to get a
    FramebufferNativeWindow that is passed to EGL.  This relies on the
    existence of the framebuffer HAL, which is not supported on many
    recent devices.
    
    This change adds a new "window surface" object that the tests
    can use to get a window from SurfaceFlinger instead.  All tests
    except for the HWC tests now appear to do things.
    
    The HWC tests don't do anything useful, but they no longer depend
    on the android_createDisplaySurface() function.
    
    Bug 13323813
    
    Change-Id: I2cbfbacb3452fb658c29e945b0c7ae7c94c1a4ba
    fixup include paths
    
    - remove unneeded include deps
    - remove some hardcoded include paths
    
    Change-Id: Ifae0e2b2d738e0f94f8525c45be78f4227ce1673
    frameworks/base: remove LOCAL_PRELINK_MODULE
    
    Change-Id: I54dd62ebef47e7690afa5a858f3cad941b135481
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Hardware Composer new and refactored test cases
    
    Change-Id: Iabf46fc5d75891f917e06a257470a0e3f2bd3c95
    eclair snapshot
    keystore: exclude builds for simulator.
    keystore: switch to multi-user version.
    Add tests and misc fixes on keystore.
    
    * Refactor netkeystore.c to make client and server code testable.
    * Add a client test for setting new passwd and changing passwd.
    * Exclude "." and ".." from reset_keystore().
    * Change ServerCommand.executeCommand() to accept variable length of
      arguments and add convert() to marshalling the args to bytes.
    * Keystore.java is revised accordingly.
    donut snapshot
    Implement the generic mini-keystore for security.
    
    1. We will progressively migrate to this implementation.
    2. For richc to have a quick review on the keymgmt part.
    3. Add remove_key and make sure all functions are working.
    4. Add permission check for get operation.
    5. Return the retry count if unlock failed.
    6. Add the reset operation for keystore reset.
    7. Add the putfile shell command for putting the key value from file.
    8. Fix the boundary issue during parsing command.
    9. Use the ' ' as delimiter and reset the reply structure for each request.
    10. Add change password retry count check.
    11. Extract the read_marshal/write_marshal for certtool.h.
    12. Remove the old implementation.
    First version of the keystore service.
    
    The keystore service is protected by the user 'keystore'. Only keystore
    user/group can access the key content. All users are able to do the
    following commands from shell as well:
      listcerts
      listuserkeys
      installcert
      removecert
      installuserkey
      removeuserkey
    remove libui dependency on libEGL
    
    Change-Id: I1194f04085637d5c384e134967249430cc43b6ee
    Hardware Composer new and refactored test cases
    
    Change-Id: Iabf46fc5d75891f917e06a257470a0e3f2bd3c95
    Request RGBX rather than RGBA
    
    Fixes San Angeles for certain devices.
    
    Bug 13641473
    
    Change-Id: Icb148e1fed15fe56297942475c095e7eb4a11549
    Adjust for device orientation
    
    When the device is rotated, reverse the width/height values.
    
    Change-Id: Idc2b80b1cb96d9379cd94192997580e1ade70bf6
    Restore old OpenGL tests
    
    These tests call android_createDisplaySurface() to get a
    FramebufferNativeWindow that is passed to EGL.  This relies on the
    existence of the framebuffer HAL, which is not supported on many
    recent devices.
    
    This change adds a new "window surface" object that the tests
    can use to get a window from SurfaceFlinger instead.  All tests
    except for the HWC tests now appear to do things.
    
    The HWC tests don't do anything useful, but they no longer depend
    on the android_createDisplaySurface() function.
    
    Bug 13323813
    
    Change-Id: I2cbfbacb3452fb658c29e945b0c7ae7c94c1a4ba
    Import OpenGL ES 3.0 headers from Khronos SVN
    
    Add MODULE_LICENSE_MIT: The GLES headers use an MIT license or a
    slight variant of it (the "SGI Free Software License B version 2.0",
    http://oss.sgi.com/projects/FreeB/).
    
    Change-Id: Ic8f946341cdd0d579f51b6f7a3ee109cd31b1691
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Import OpenGL ES 3.0 headers from Khronos SVN
    
    Add MODULE_LICENSE_MIT: The GLES headers use an MIT license or a
    slight variant of it (the "SGI Free Software License B version 2.0",
    http://oss.sgi.com/projects/FreeB/).
    
    Change-Id: Ic8f946341cdd0d579f51b6f7a3ee109cd31b1691
    update the OpenGL ES headers to the latest
    
    Change-Id: Iceef1e95504897a5e3759b0401cf7031c9e74547
    eclair snapshot
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    opengl: Update registry and headers from Khronos
    
    gl.xml @ r26697:
    https://cvs.khronos.org/svn/repos/ogl/trunk/doc/registry/public/api
    
    GLES headers @ r26698:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    Bug: 15028495
    Change-Id: I57e0d8caac2bc2edb10c8252e06ffdb9a5ccf48b
    opengl: Update GLES headers and generate *.in from registry XML
    
    Import GLES headers from Khronos SVN r26322:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below for a list.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: I902517c23354e14f9c63b1584db286d682315bb5
    Revert "Update GLES headers from Khronos SVN r26322"
    
    This reverts commit 20670e33c76a32370695a82a3e7f2fb30be30608.
    
    Change-Id: Iae3dfbaf852ff1b6906af1d5508c2baf1173b481
    Revert "opengl: Update registry and headers from Khronos"
    
    This reverts commit f466a51c1325d2034326e25dd61c359ed2c566af.
    
    Change-Id: I2fe400e2dab8327695c36dc8eed101654368cd4b
    opengl: Update registry and headers from Khronos
    
    gl.xml @ r26697:
    https://cvs.khronos.org/svn/repos/ogl/trunk/doc/registry/public/api
    
    GLES headers @ r26698:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    Bug: 15028495
    Change-Id: Id8e7aaf8a09ec6f47dc3a3b14b95d0ddf35d50f6
    Update GLES headers from Khronos SVN r26322
    
    Public registry is:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    Bug: 15028495
    Change-Id: I2269a6a2486c34b6a9e378d4a25a41492d531c81
    Import OpenGL ES 3.0 headers from Khronos SVN
    
    Add MODULE_LICENSE_MIT: The GLES headers use an MIT license or a
    slight variant of it (the "SGI Free Software License B version 2.0",
    http://oss.sgi.com/projects/FreeB/).
    
    Change-Id: Ic8f946341cdd0d579f51b6f7a3ee109cd31b1691
    Import OpenGL ES 3.0 headers from Khronos SVN
    
    Add MODULE_LICENSE_MIT: The GLES headers use an MIT license or a
    slight variant of it (the "SGI Free Software License B version 2.0",
    http://oss.sgi.com/projects/FreeB/).
    
    Change-Id: Ic8f946341cdd0d579f51b6f7a3ee109cd31b1691
    opengl: Update registry and headers from Khronos
    
    gl.xml @ r26697:
    https://cvs.khronos.org/svn/repos/ogl/trunk/doc/registry/public/api
    
    GLES headers @ r26698:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    Bug: 15028495
    Change-Id: I57e0d8caac2bc2edb10c8252e06ffdb9a5ccf48b
    opengl: Update GLES headers and generate *.in from registry XML
    
    Import GLES headers from Khronos SVN r26322:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below for a list.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: I902517c23354e14f9c63b1584db286d682315bb5
    Revert "Update GLES headers from Khronos SVN r26322"
    
    This reverts commit 20670e33c76a32370695a82a3e7f2fb30be30608.
    
    Change-Id: Iae3dfbaf852ff1b6906af1d5508c2baf1173b481
    Revert "opengl: Update registry and headers from Khronos"
    
    This reverts commit f466a51c1325d2034326e25dd61c359ed2c566af.
    
    Change-Id: I2fe400e2dab8327695c36dc8eed101654368cd4b
    opengl: Update registry and headers from Khronos
    
    gl.xml @ r26697:
    https://cvs.khronos.org/svn/repos/ogl/trunk/doc/registry/public/api
    
    GLES headers @ r26698:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    Bug: 15028495
    Change-Id: Id8e7aaf8a09ec6f47dc3a3b14b95d0ddf35d50f6
    Update GLES headers from Khronos SVN r26322
    
    Public registry is:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    Bug: 15028495
    Change-Id: I2269a6a2486c34b6a9e378d4a25a41492d531c81
    Import OpenGL ES 3.0 headers from Khronos SVN
    
    Add MODULE_LICENSE_MIT: The GLES headers use an MIT license or a
    slight variant of it (the "SGI Free Software License B version 2.0",
    http://oss.sgi.com/projects/FreeB/).
    
    Change-Id: Ic8f946341cdd0d579f51b6f7a3ee109cd31b1691
    update the OpenGL ES headers to the latest
    
    Change-Id: Iceef1e95504897a5e3759b0401cf7031c9e74547
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    opengl: Update GLES headers and generate *.in from registry XML
    
    Import GLES headers from Khronos SVN r26322:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below for a list.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: I902517c23354e14f9c63b1584db286d682315bb5
    Revert "Update GLES headers from Khronos SVN r26322"
    
    This reverts commit 20670e33c76a32370695a82a3e7f2fb30be30608.
    
    Change-Id: Iae3dfbaf852ff1b6906af1d5508c2baf1173b481
    Revert "opengl: Generate *.in from registry XML"
    
    This reverts commit 4a73962c694bfe57eb2bea40ed6fb626be7006aa.
    
    Change-Id: I1fa5cbe4d0b86f6df69d616157b3fec68d706d7a
    opengl: Generate *.in from registry XML
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: Ib3fa700a146adf7f1487a93e459b1e6df0dcdc42
    Update GLES headers from Khronos SVN r26322
    
    Public registry is:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    Bug: 15028495
    Change-Id: I2269a6a2486c34b6a9e378d4a25a41492d531c81
    update GLES headers and add support for corresponding new extensions.
    
    Change-Id: I554d9659113b4721b748ee5c1a3b1ca82b11d75e
    surfaceflinger / GL extensions cleanup
    
    Add correct enumerants for OES_EGL_image_external to glext.h.
    SurfaceFlinger now checks for the correct extension name.
    
    Change-Id: I2ba2728a01fa2260bd086d2df4316c68f694a9b1
    Added support for the GL_TEXTURE_EXTERNAL target
    
    This will allow us to support YUV surfaces.
    
    Change-Id: I2d4da75f1006a5285bdc552695d4caeecccf2183
    fix OpenGL ES extension headers from khronos
    
    the official headers have a couple typos, which
    this CL fixes.
    
    Change-Id: I0359531a05a4a62ddbdce70c5841ec1c355feb3b
    update the OpenGL ES headers to the latest
    
    Change-Id: Iceef1e95504897a5e3759b0401cf7031c9e74547
    donut snapshot
    remove the gl{Vertex|Color|TexCoord|Normal}PointerBounds() "extension" fro eglext.h
    only export the GL entry-points, hide everything else.
    
    Conflicts:
    
            opengl/libagl/Android.mk
            opengl/libs/Android.mk
            opengl/libs/egl_impl.h
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    update the OpenGL ES headers to the latest
    
    Change-Id: Iceef1e95504897a5e3759b0401cf7031c9e74547
    eclair snapshot
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    opengl: Update registry and headers from Khronos
    
    gl.xml @ r26697:
    https://cvs.khronos.org/svn/repos/ogl/trunk/doc/registry/public/api
    
    GLES headers @ r26698:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    Bug: 15028495
    Change-Id: I57e0d8caac2bc2edb10c8252e06ffdb9a5ccf48b
    opengl: Update GLES headers and generate *.in from registry XML
    
    Import GLES headers from Khronos SVN r26322:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below for a list.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: I902517c23354e14f9c63b1584db286d682315bb5
    Revert "Update GLES headers from Khronos SVN r26322"
    
    This reverts commit 20670e33c76a32370695a82a3e7f2fb30be30608.
    
    Change-Id: Iae3dfbaf852ff1b6906af1d5508c2baf1173b481
    Revert "opengl: Update registry and headers from Khronos"
    
    This reverts commit f466a51c1325d2034326e25dd61c359ed2c566af.
    
    Change-Id: I2fe400e2dab8327695c36dc8eed101654368cd4b
    opengl: Update registry and headers from Khronos
    
    gl.xml @ r26697:
    https://cvs.khronos.org/svn/repos/ogl/trunk/doc/registry/public/api
    
    GLES headers @ r26698:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    Bug: 15028495
    Change-Id: Id8e7aaf8a09ec6f47dc3a3b14b95d0ddf35d50f6
    Update GLES headers from Khronos SVN r26322
    
    Public registry is:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    Bug: 15028495
    Change-Id: I2269a6a2486c34b6a9e378d4a25a41492d531c81
    Import OpenGL ES 3.0 headers from Khronos SVN
    
    Add MODULE_LICENSE_MIT: The GLES headers use an MIT license or a
    slight variant of it (the "SGI Free Software License B version 2.0",
    http://oss.sgi.com/projects/FreeB/).
    
    Change-Id: Ic8f946341cdd0d579f51b6f7a3ee109cd31b1691
    Import constness fix from gl3.h into gl2.h.
    
    This change has been made in Khronos SVN for GLES2 already, however it
    is mildly controversial and discussion is on-going.
    
    This change is necessary for Android because otherwise applications
    cannot include both GLES2/gl2.h and GLES3/gl3.h as the glShaderSource()
    prototype mismatches. Native programs may include framework headers
    (which now include GLES3 headers only) but already have included GLES2
    headers, creating an incompatibility.
    
    Change-Id: I70a4075e079ee063e76cef5a227abb0ae70aebb4
    Fix return type of glGetAttribLocation and glGetUniformLocation
    
    from int to GLint.
    
    See:
       http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetAttribLocation.xml
       http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetUniformLocation.xml
    
    Change-Id: I4a9f8e9e34b8c3cca239ae84bfe8f3cdfd94802a
    update the OpenGL ES headers to the latest
    
    Change-Id: Iceef1e95504897a5e3759b0401cf7031c9e74547
    eclair snapshot
    minor modifications to the official GLES 2.x headers
    
    - changed glTexImage2D() declaration so it matches that of GLES 1.x; otherwise we can't include both headers (!!!)
    - added parameter names to the declaration of some extensions (this is needed by glapigen and glentrygen)
    add GLES 2.x headers
    opengl: Add EXT_primitive_bounding_box to registry
    
    This extension hasn't been published yet, so it isn't in the public
    registry. That will change before the next platform release to AOSP.
    
    Bug: 15028495
    Change-Id: I3f8ac50e6a7f782738518cfd4571b07f94f83c49
    opengl: Update registry and headers from Khronos
    
    gl.xml @ r26697:
    https://cvs.khronos.org/svn/repos/ogl/trunk/doc/registry/public/api
    
    GLES headers @ r26698:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    Bug: 15028495
    Change-Id: I57e0d8caac2bc2edb10c8252e06ffdb9a5ccf48b
    opengl: Update GLES headers and generate *.in from registry XML
    
    Import GLES headers from Khronos SVN r26322:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below for a list.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: I902517c23354e14f9c63b1584db286d682315bb5
    Revert "Update GLES headers from Khronos SVN r26322"
    
    This reverts commit 20670e33c76a32370695a82a3e7f2fb30be30608.
    
    Change-Id: Iae3dfbaf852ff1b6906af1d5508c2baf1173b481
    Revert "opengl: Update registry and headers from Khronos"
    
    This reverts commit f466a51c1325d2034326e25dd61c359ed2c566af.
    
    Change-Id: I2fe400e2dab8327695c36dc8eed101654368cd4b
    Revert "opengl: Add EXT_primitive_bounding_box to registry"
    
    This reverts commit a66730f78796664fb5232aa4c1139f4b837beaf4.
    
    Change-Id: Idc7b589316f95ca48eced9d1c30c56acd9466410
    opengl: Update registry and headers from Khronos
    
    gl.xml @ r26697:
    https://cvs.khronos.org/svn/repos/ogl/trunk/doc/registry/public/api
    
    GLES headers @ r26698:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    Bug: 15028495
    Change-Id: Id8e7aaf8a09ec6f47dc3a3b14b95d0ddf35d50f6
    opengl: Add EXT_primitive_bounding_box to registry
    
    This extension hasn't been published yet, so it isn't in the public
    registry. That will change before the next platform release to AOSP.
    
    Bug: 15028495
    Change-Id: Iadafe0f776b5b9be4f81c4279a89c57ae02293e4
    Update GLES headers from Khronos SVN r26322
    
    Public registry is:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    Bug: 15028495
    Change-Id: I2269a6a2486c34b6a9e378d4a25a41492d531c81
    update GLES headers and add support for corresponding new extensions.
    
    Change-Id: I554d9659113b4721b748ee5c1a3b1ca82b11d75e
    surfaceflinger / GL extensions cleanup
    
    Add correct enumerants for OES_EGL_image_external to glext.h.
    SurfaceFlinger now checks for the correct extension name.
    
    Change-Id: I2ba2728a01fa2260bd086d2df4316c68f694a9b1
    Added support for the GL_TEXTURE_EXTERNAL target
    
    This will allow us to support YUV surfaces.
    
    Change-Id: I2d4da75f1006a5285bdc552695d4caeecccf2183
    fix OpenGL ES extension headers from khronos
    
    the official headers have a couple typos, which
    this CL fixes.
    
    Change-Id: I0359531a05a4a62ddbdce70c5841ec1c355feb3b
    update the OpenGL ES headers to the latest
    
    Change-Id: Iceef1e95504897a5e3759b0401cf7031c9e74547
    eclair snapshot
    minor modifications to the official GLES 2.x headers
    
    - changed glTexImage2D() declaration so it matches that of GLES 1.x; otherwise we can't include both headers (!!!)
    - added parameter names to the declaration of some extensions (this is needed by glapigen and glentrygen)
    add GLES 2.x headers
    opengl: Update GLES headers and generate *.in from registry XML
    
    Import GLES headers from Khronos SVN r26322:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below for a list.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: I902517c23354e14f9c63b1584db286d682315bb5
    Revert "Update GLES headers from Khronos SVN r26322"
    
    This reverts commit 20670e33c76a32370695a82a3e7f2fb30be30608.
    
    Change-Id: Iae3dfbaf852ff1b6906af1d5508c2baf1173b481
    Update GLES headers from Khronos SVN r26322
    
    Public registry is:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    Bug: 15028495
    Change-Id: I2269a6a2486c34b6a9e378d4a25a41492d531c81
    update the OpenGL ES headers to the latest
    
    Change-Id: Iceef1e95504897a5e3759b0401cf7031c9e74547
    eclair snapshot
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    update EGL headers to most recent
    
    - add ANDROID extensions missing from official headers:
        EGL_ANDROID_wait_sync
        EGL_ANDROID_presentation_time
    
    Change-Id: I5496d0de123a6279234098c19f9a12220adec876
    donut snapshot
    only export the GL entry-points, hide everything else.
    
    Conflicts:
    
            opengl/libagl/Android.mk
            opengl/libs/Android.mk
            opengl/libs/egl_impl.h
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    DO NOT MERGE A library for encoding and decoding ETC1 textures.
    
    The ETC1 compressed texture format is commonly
    supported by OpenGL ES 2.0-capable devices.
    
    This change adds a host-only version of the library. It is used by
    the etc1tool.
    A library for encoding and decoding ETC1 textures.
    
    The ETC1 compressed texture format is commonly
    supported by OpenGL ES 2.0-capable devices.
    update EGL headers to most recent
    
    - add ANDROID extensions missing from official headers:
        EGL_ANDROID_wait_sync
        EGL_ANDROID_presentation_time
    
    Change-Id: I5496d0de123a6279234098c19f9a12220adec876
    remove dependency of EGL on ndk header
    
    Change-Id: Ia6e489b5b4f028864bdf54923e81f604710dd8ad
    Refresh EGL header to work with the NDK
    
    This change allows to use this header with the NDK's standalone toolchain.
    For the record, the NDK toolchain defines __ANDROID__ as a compiler built-in
    macro, this is however not the case currently for the prebuilt binaries that
    are being used by the full Android build system, which otherwise defines ANDROID.
    
    This change allows the header to be used by all toolchains properly. Note however
    that we should properly should change our toolchain and sources to provide and
    rely on __ANDROID__ instead of ANDROID though.
    
    Change-Id: Iaa1aa1146985b5f24dcf3a83d9ddb9b4b59dc328
    Introduce official public NativeWindow type.
    
    Not yet hooked up to anything in the NDK, but requires renaming
    the existing android_native_window_t type everywhere.
    
    Change-Id: Iffee6ea39c93b8b34e20fb69e4d2c7c837e5ea2e
    update EGL headers to the latest
    
    note that this doesn't update the EGL stubs.
    
    Change-Id: I00274431a490249d93eb6b5ba13f274b7f2682ae
    eclair snapshot
    Add eglGetRenderBufferANDROID() extension, which returns the current render buffer as an android_native_buffer_t*
    Android now has its own EGL extension block (yay) 0x3140-0x314F. EGL_NATIVE_BUFFER_ANDROID now maps to 0x3140 instead of using the staging range
    move opengl/include/EGL/android_natives.h to include/ui/egl/android_natives.h and don't include it from egl.h
    
    the android_native_ types are just forward declared in egl.h
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    update EGL headers to the latest
    
    note that this doesn't update the EGL stubs.
    
    Change-Id: I00274431a490249d93eb6b5ba13f274b7f2682ae
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    GLConsumer: start using EGL_ANDROID_image_crop
    
    This change makes GLConsumer use the EGL_ANDROID_image_crop extension when
    available on a device.  The crop rectangle is passed to the EGL driver when
    creating EGLImages, allowing the crop to be performed by the driver rather than
    using the texture transform matrix.
    
    Bug: 10897141
    Change-Id: I63e9a5d5c85067376abc420e3639154468346311
    replace eglWaitSyncANDROID by eglWaitSyncKHR
    
    Change-Id: I22f1b3588011c88389e249f738f1e6915cc97e72
    update EGL headers to most recent
    
    - add ANDROID extensions missing from official headers:
        EGL_ANDROID_wait_sync
        EGL_ANDROID_presentation_time
    
    Change-Id: I5496d0de123a6279234098c19f9a12220adec876
    Add eglPresentationTimeANDROID
    
    Added EGL extension to set a timestamp on a surface.
    
    Also, fix JNI encoding of "long" in glgen.
    
    Bug 8191230
    
    Change-Id: I38b7334bade3f8ff02bffe600bb74469ef22c164
    EGL: add the EGL_ANDROID_framebuffer_target enum
    
    Change-Id: Id8b1b114e2a7a88956b857c63a0429e9b33fdb5c
    EGL: expose the EXT_create_context_robustness ext
    
    Change-Id: I1db43e96aa5e9e91a6176a4a3e5aa9d1f3ee4a7e
    EGL: Add the EGL_ANDROID_wait_sync extension
    
    Change-Id: Ie9a78e07fcaf27c5c13797141ad3c692217607fb
    EGL: add the native_fence_sync extension
    
    This change adds support for the EGL_ANDROID_native_fence_sync extension to the
    Android EGL layer.  It also fixes a couple minor issues with the extension spec.
    
    Change-Id: Ic8829d21f37b701f33aa9c72c3d25e88e03fa3cd
    egl: Reintroduce eglGetRenderBufferANDROID
    
    eglGetRenderBufferANDROID was removed as it had no users. This commit
    reintroduces this extensions as it's used by Qualcomm graphics HAL.
    
    Change-Id: I493306830a0d4f8722a42bcc84fb49236afdabeb
    Hibernate the EGL implementation when idle
    
    If the EGL implementation supports the EGL_IMG_hibernate_process
    extension, use it to hibernate (and hopefully release memory or other
    resources) when the process isn't actively using EGL or OpenGL ES. The
    idleness heuristic used in this change is:
    
    (a) Wake up when entering any EGL API call, and remain awake for the
        duration of the call.
    (b) Do not hibernate when any window surface exists; this means the
        application is very likely in the foreground.
    (c) Do not hibernate while any context is made current to a thread.
        The app may be using a client API without the EGL layer knowing,
        so it is not safe to hibernate.
    (d) Only check these conditions and attempt to hibernate after a
        window surface is destroyed or a thread's context is detached. By
        not attempting to hibernate at the end of every EGL call, we avoid
        some transient wakeups/hibernate cycles when the app is mostly idle,
        or is starting to become active but hasn't created its window
        surface yet.
    
    On a Galaxy Nexus, hibernating frees 1567 VM pages from the process.
    Both hibernating and waking can take anywhere from 30ms to over 100ms
    -- measurements have been very inconsistent.
    
    Change-Id: Ib555f5d9d069aefccca06e8173a89625b5f32d7e
    rework a bit how we manage EGL extensions
    
    - don't advertise extensions that are not supported
      by any implementation
    
    - remove EGL_ANDROID_swap_rectangle which is not
      implemented by anybody and confuses people
    
    - add some comments about mandatory extensions
    
    Bug: 5428001
    Change-Id: Id8dc48116ac1d1eb79ec9ef55d03e29d4257c1f3
    EGL: add the ANDROID suffix to the blob cache ext
    
    This change adds the ANDROID suffix to the all the types and functions
    defined by the EGL_ANDROID_blob_cache extension.
    
    Change-Id: I087875b96d9a7053efb9c8d5614f9f765eed799d
    EGL: use an in-memory the blob cache
    
    This change makes the makes the stub EGL_ANDROID_blob_cache callbacks
    actually use a BlobCache object.
    
    Bug: 5474671
    Change-Id: I5cbaae2dea3aad2fe306c9f57029c3f215a0863a
    Add (support for) EGL_NV_system_time extension.
    
    Change-Id: I62bf0fcb5ccdc77c042b425a42054fb3122575b6
    Signed-off-by: Mathias Agopian <mathias@google.com>
    EGL: update EGL_ANDROID_recordable extension.
    
    This change adds an enum value and a description of the expected
    implementations to the EGL_ANDROID_recordable extension specification.
    It also adds the new enum value to the 'eglext.h' header.
    
    Change-Id: Ia0de2d5613708445ff83b85a7e550f9417531ee4
    frameworks/base: android_native_buffer_t -> ANativeWindowBuffer
    
    Change-Id: Idc2eabaa805bb6d308ebb315872623f28d428417
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    cleanup EGL a bit. remove unused extension.
    
    Change-Id: I7758bc7d6dc2e70fc3590fe939ebf71fbcde7059
    cleanup EGL a bit. remove unused extension.
    
    Change-Id: Ia87120b076ab1bf7b28f06087878d8161fb46c88
    update EGL headers to the latest
    
    note that this doesn't update the EGL stubs.
    
    Change-Id: I00274431a490249d93eb6b5ba13f274b7f2682ae
    eclair snapshot
    Add eglGetRenderBufferANDROID() extension, which returns the current render buffer as an android_native_buffer_t*
    created an new EGL extension called ANDROID_swap_rectangle
    
    ANDROID_swap_rectangle allows to specify the rectangle affected by eglSwapBuffers(), anything outside of this rectangle is unchanged. in particular EGL_BUFFER_DESTROYED only applies to that rectangle. This extension as well as EGL_BUFFER_PRESERVED allow major optimizations on surfaceflinger, which can redraw only the dirty area during compositing.
    
    However, ANDROID_swap_rectangle allows further optimizations in EGL by reducing the amount of copy-back needed. ANDROID_swap_rectangle is particularily important for software implementations.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Remove unused LOCAL_LDLIBS.
    
    Change-Id: I62904c410a66f256da8253764577acae18f964f8
    libagl: support multilib build
    
    Use LOCAL_SRC_FILES_arch and LOCAL_CFLAGS_arch to support building
    for multiple architectures.
    
    Change-Id: I829c1bea880739bf8184df4006d0a481ffccc5c2
    frameworks/native: convert LOCAL_MODULE_PATH to LOCAL_MODULE_RELATIVE_PATH
    
    LOCAL_MODULE_PATH doesn't work for multiarch builds, replace it
    with LOCAL_MODULE_RELATIVE_PATH.
    
    Change-Id: I4e4ceec61d026bbe74ba604554c06104bde42e5e
    Add liblog
    
    Bug: 8580410
    Change-Id: I2ca4fa00dde0b574df3619134836bcb9315bd506
    [MIPS] Add MIPS architecture support to libagl
    
    Change-Id: I30eb92857a2a6ea867fe0ee45109f17609043aae
    Simplify OpenGL TLS access on ARM.
    
    bionic now assumes the TLS register is available, so OpenGL can too.
    
    Change-Id: If2b56a4c08de9f887759b78f70022026a181dc47
    Update ANativeWindow clients for sync
    
    This change updates the uses of ANativeWindow to use the new ANW functions that
    accept and return Sync HAL fence file descriptors.
    
    Change-Id: I3ca648b6ac33f7360e86754f924aa072f95242f6
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    remove copybit hack from software opengl (libagl)
    
    h/w acceleration is not supported through software gl + copybit anylonger,
    instead, h/w opengl must be used. in the system compositor, a new h/w
    composition api will be introduced to allow h/w accelerated composition with
    overlays and/or 2D blocks.
    
    Change-Id: I04949cb074ba8c4d637319ace23497c16a58d5bf
    Build software AGL library with correct get_tls() macro for ARMv7 based platforms
    
    This prevents crashes on snapdragon processors.
    implement [2396050] Add ETC1 texture support to AGL
    Use correct TLS codepath in graphics libraries
    
    Duplicate ARCH_ARM_HAVE_TLS_REGISTER BoardConfig to proprocessor
    HAVE_ARM_TLS_REGISTER define from Bionic's libc Android.mk to ensure that
    OpenGL libraries (libEGL, libGLESv1_CM, libGLESv2, libGLES_android) use the
    correct codepath in bionic_tls.h for accessing the TLS address
    eclair snapshot
        fix [2143798] Need to figure out how to do video
    
        Use EGLImageKHR instead of copybit directly.
        We now have the basis to use streaming YUV textures (well, in fact
        we already are). When/if we use the GPU instead of the MDP we'll
        need to make sure it supports the appropriate YUV format.
    
        Also make sure we compile if EGL_ANDROID_image_native_buffer is not supported
    remove libagl's dependency on gralloc_priv.h
    fix/clean these Android.mk following dbort and joeo's comments
    implement a real loader for EGL drivers
    
    we now look for a config file in /system/lib/egl/egl.cfg that describes the association of a display to a driver.
    these drivers are named: /system/lib/egl/lib{[EGL|GLESv1_CM|GLESv2] | GLES}_$TAG.so
    donut snapshot
    only export the GL entry-points, hide everything else.
    
    Conflicts:
    
            opengl/libagl/Android.mk
            opengl/libs/Android.mk
            opengl/libs/egl_impl.h
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Initial Contribution
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    fix [2133133] Software OpenGL ES Lighting is buggy (GL Gears washed out bug)
    
    A typo caused GL_AMBIENT_AND_DIFFUSE to only set the the ambient color.
    
    Fix another typo which caused the viewer position to be wrong for
    specular highlights.
    
    Switch back to eye-space lighting, since there are still some issues
    with some demos (San Angeles in particular).
    eclair snapshot
    fix [2231527] Compatibility with SpaceJunk game (OpenGL)
    
    we treated all lights as local lights when transforming their
    position back to object space.
    If FLAGS_2D_PROJECTION is set, the MVP matrices need updating when changing the viewport.
    If FLAGS_2D_PROJECTION is set, the MVP matrices need updating when changing the viewport.
    donut snapshot
    fix [1610840] Positional light doesn't work correctly on emulator
    
    This bug was introduced when lighting computations was changed from eye-space to object-space.
    The light position need to be transformed back to object-space each time the modelview matrix changes which requires us to compute the inverse of the modelview matrix. This computation was done with the assumption that normals where transformed (which was the case when the computation was made in eye-space), however, normals only require the inverse of the upper 3x3 matrix while transforming positions requires the inverse of the whole matrix.
    This caused the interesting behavior that lights were more-or-less transformed properly, but not translated at all, which caused improper lighting with directional lights in particular.
    
    There was also another smaller bug affecting directional lights: when vertices are read, only the active component are read, the other ones are ignored, later, the transformation operations are set up to ignore the unset values, howver, in the case of lighting, we use the vertex in object space (that is, before it is transformed), and therefore were using uninitalized values; in particular w.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    libagl: Transform the vertex if using eye space lighting with point lights
    
    This fixes lighting when using point lights, when eye space
    lighting is used (which is the default).
    
    Change-Id: I0cd0d2329893d6b5f8af3b1e595274c2076fc322
    fix [2133133] Software OpenGL ES Lighting is buggy (GL Gears washed out bug)
    
    A typo caused GL_AMBIENT_AND_DIFFUSE to only set the the ambient color.
    
    Fix another typo which caused the viewer position to be wrong for
    specular highlights.
    
    Switch back to eye-space lighting, since there are still some issues
    with some demos (San Angeles in particular).
    eclair snapshot
    Calculate specular lighting correctly
    
    Since the lighting calculations are done in object space, the vector
    from the object to the viewer also needs to be transformed to object
    space.
    Calculate specular lighting correctly
    
    Since the lighting calculations are done in object space, the vector
    from the object to the viewer also needs to be transformed to object
    space.
    donut snapshot
    fix [1610840] Positional light doesn't work correctly on emulator
    
    This bug was introduced when lighting computations was changed from eye-space to object-space.
    The light position need to be transformed back to object-space each time the modelview matrix changes which requires us to compute the inverse of the modelview matrix. This computation was done with the assumption that normals where transformed (which was the case when the computation was made in eye-space), however, normals only require the inverse of the upper 3x3 matrix while transforming positions requires the inverse of the whole matrix.
    This caused the interesting behavior that lights were more-or-less transformed properly, but not translated at all, which caused improper lighting with directional lights in particular.
    
    There was also another smaller bug affecting directional lights: when vertices are read, only the active component are read, the other ones are ignored, later, the transformation operations are set up to ignore the unset values, howver, in the case of lighting, we use the vertex in object space (that is, before it is transformed), and therefore were using uninitalized values; in particular w.
    fix a bug in GL lighting where the specular component could be ommited when vertex material was disabled.
    
    the specular enable flag wasn't computed in that case.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    remove dependency on android_native{s_priv|buffer}.h
    
    Change-Id: Ie4b95f7061c240f37c504414259f92d72c4ffc89
    implement EGL_TEXTURE_EXTERNAL_OES in libagl
    
    this allows the emulator to display some graphics
    
    Change-Id: Ib4671ad70b8df598d02307f2b9c5b843421cea25
    frameworks/base: android_native_buffer_t -> ANativeWindowBuffer
    
    Change-Id: Idc2eabaa805bb6d308ebb315872623f28d428417
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    remove copybit hack from software opengl (libagl)
    
    h/w acceleration is not supported through software gl + copybit anylonger,
    instead, h/w opengl must be used. in the system compositor, a new h/w
    composition api will be introduced to allow h/w accelerated composition with
    overlays and/or 2D blocks.
    
    Change-Id: I04949cb074ba8c4d637319ace23497c16a58d5bf
    Fix glCopyTexSubImage2D inverted texture bug.
    
    This bug only affects the software OpenGL ES
    driver.
    Proper EGLImageKHR error handling
    
    Validate EGLImageKHR format and return an error for unsupported ones.
    Also make sure to return an error when binding EGL_NO_IMAGE_KHR to a texture
    Fix ETC1 texture decoding.
    
    etc1_decode_image requires the stride argument to be in bytes, but the
    surface->stride field is in pixels. Convert by multiplying by pixel size.
    implement [2396050] Add ETC1 texture support to AGL
    fix [2397853] glCopyTexImage2D crashes emulator
    
    Fixed a typo which would cause a buffer overflow
    Fix glReadPixels() to verify that both x and y are non-negative.
    fix [2341222] AGL version of glDrawTexxOES doesn't handle "Z" value correctly
    eclair snapshot
    fix [2151588] glTexSubImage2D() allows pixel format conversion
    AGL's glCompressedTexImage2D now checks the imageSize parameter.
    
    This parameter indicates how many bytes of the image data are valid.
    
    Previously this parameter was ignored.
    donut snapshot
    remove libagl's dependency on gralloc_priv.h
    add glTexParameteri() and fix glTexParameteriv()
    fix a bug where copybit only renders in the first buffer when used with s/w GL
    move android_native_buffer_t declaration into its own private/ui/android_native_priv.h header, since user code should never have access to it.
    move opengl/include/EGL/android_natives.h to include/ui/egl/android_natives.h and don't include it from egl.h
    
    the android_native_ types are just forward declared in egl.h
    get rid of android_native_buffer_t::getHandle() and replace it with an handle field
    
    this abstraction was not necessary. things are easier now.
    removed the "bits" attribute from android_native_buffer_t.
    
    "bits" can never be trusted now that we need to call lock() on the handle to get the virtual address of the buffer.
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Initial Contribution
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    libGLES_android: fix 64-bit compile errors
    
    Fix size of vertex_t on 64-bit architectures
    Fix __get_tls casts, the TLS area is a void**
    Cast through uintptr_t to store integers in a pointer
    Use %zu to print size_t
    
    Change-Id: I91079ec76025237e6d2081784c5348518b0ce122
    get rid of HAL pixelformats 5551 and 4444
    
    Change-Id: I39409103144c1ba09078c4ddc323a58987fb09ea
    When disconnecting a surface, cancel don't queue the buffer
    
    This isn't really right either, but avoids having an extra buffer that
    the consumer has to drain which it might not be expecting.
    
    To be correct, disconnecting a surface from a context should retain
    the current buffer and continue using it when reconnected. The buffer
    should only be canceled when the surface is destroyed. That will wait
    for a later change.
    
    Bug: 8320762
    Change-Id: I5efa39c741193ca4f5612ea9de001ccbb683b345
    Defer destroying surfaces until not current
    
    Bug: 8320762
    Change-Id: I1320cf87923bcc5b795a86a13193363a49e29653
    When disconnecting a surface, cancel don't queue the buffer
    
    This isn't really right either, but avoids having an extra buffer that
    the consumer has to drain which it might not be expecting.
    
    To be correct, disconnecting a surface from a context should retain
    the current buffer and continue using it when reconnected. The buffer
    should only be canceled when the surface is destroyed. That will wait
    for a later change.
    
    Bug: 8320762
    Change-Id: I5efa39c741193ca4f5612ea9de001ccbb683b345
    Defer destroying surfaces until not current
    
    Bug: 8320762
    Change-Id: I1320cf87923bcc5b795a86a13193363a49e29653
    egl: Reintroduce eglGetRenderBufferANDROID
    
    eglGetRenderBufferANDROID was removed as it had no users. This commit
    reintroduces this extensions as it's used by Qualcomm graphics HAL.
    
    Change-Id: I493306830a0d4f8722a42bcc84fb49236afdabeb
    Update ANativeWindow clients for sync
    
    This change updates the uses of ANativeWindow to use the new ANW functions that
    accept and return Sync HAL fence file descriptors.
    
    Change-Id: I3ca648b6ac33f7360e86754f924aa072f95242f6
    Implement the EGL_KHR_fence_sync in libagl
    
    Implementing this in libagl allows us to start using it for
    SurfaceTexture in emulator builds, which is necessary to avoid
    corruption in the Browser when using the host-accelerated GL path.
    
    Bug: 6515813
    Change-Id: Icafba8687cb5d010d8d42b3866b298d2be984fc9
    fix EGL_CLIENT_STRING
    
    it should read OpenGL_ES (with an underscore)
    
    Bug: 6529643
    
    Change-Id: I7caf07793bffe5a8dcceaff496a222077486fc87
    remove dependency on android_native{s_priv|buffer}.h
    
    Change-Id: Ie4b95f7061c240f37c504414259f92d72c4ffc89
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    rework a bit how we manage EGL extensions
    
    - don't advertise extensions that are not supported
      by any implementation
    
    - remove EGL_ANDROID_swap_rectangle which is not
      implemented by anybody and confuses people
    
    - add some comments about mandatory extensions
    
    Bug: 5428001
    Change-Id: Id8dc48116ac1d1eb79ec9ef55d03e29d4257c1f3
    fix libagl surface initialization
    
    this broke recently when removing copybit support.
    
    Change-Id: I5cc7ff7f49268411c6c2cfb2d97590d52b13dbd5
    frameworks/base: android_native_buffer_t -> ANativeWindowBuffer
    
    Change-Id: Idc2eabaa805bb6d308ebb315872623f28d428417
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    remove last traces of copybit
    
    Change-Id: Ia0f13a0ee6f702256482b5eb29d7fa2aa840bfc7
    get rid of dependency on copybit HAL module
    
    Change-Id: Ia608099a2426c11a91d33063ba53c93e1eccb428
    Fix a multithreading bug in libagl's EGL.
    
    The bug caused libagl to return 0 from eglGetError if an EGL error value
    (including EGL_SUCCESS) was set on a different thread but not yet on the
    current thread.
    
    Bug: 3403756
    Change-Id: Ifd965091d116745c2e22c121151ade9e78eb14c6
    fix build.
    
    Change-Id: I49262ac143da297efcaec4eed04052274c73b7f8
    Fix for simulator build
    
    The code looks correct, but causes an internal compiler error on
    simulator builds on mine (an other) gLucid desktops.
    
    Change-Id: Iaf0d8120778ec1c6fc739ef13e6eaaac53e3bcc8
    fix eglChooseConfig() for special attributes.
    
    affects software renderer (emu) only.
    
    per EGL spec:
      If EGL_MAX_PBUFFER_WIDTH, EGL_MAX_PBUFFER_HEIGHT,
      EGL_MAX_PBUFFER_PIXELS, or EGL_NATIVE_VISUAL_ID are speciﬁed
      in attrib list, then they are ignored
    
    Change-Id: I3d5214ce896986da2f11d2eb1889afc41731eaa6
    fix [3119687] [Maps][4.6.0] Force close in street view
    
    The EGLConfig attributes MUST be sorted, because they're used in a binary search.
    A recent change introduced a bug where 2 of the configs had improperly
    sorted attributes.
    
    Change-Id: I1ac53e4463d62f27125ca9f82ed946e6c98ddba0
    software renderer: fix [3117351] GL driver doesn't set the EGL_NATIVE_VISUAL_ID
    
    Change-Id: I371bc0abfee6065247bc6f04b0e0451645eb2dbf
    fix [2236865] STOPSHIP: bump soft gl and egl minor version number
    
    Change-Id: Ibf46b18d7493348e189f2c93e969a6cac61f68b5
    libagl: eglSwapInterval fix
    
    SW egl returned always EGL_FALSE even when the display was valid.
    This made calls to eglSwapInterval to fail on HW since the wrapper
    fails if either SW or HW egl fails.
    
    Letting SW eglSwapInterval to return true when display is valid is
    ok since spec says that interval parameter is silently clamped.
    
    Change-Id: Ib4aa1dbfccf510a0f36621796e79a4d46852ee6a
    cleanup EGL a bit. remove unused extension.
    
    Change-Id: I7758bc7d6dc2e70fc3590fe939ebf71fbcde7059
    cleanup EGL a bit. remove unused extension.
    
    Change-Id: Ia87120b076ab1bf7b28f06087878d8161fb46c88
    fix [2931161] crash in labyritnth when completing a level
    
    Change-Id: I821d67effaf73d7008b2828d06f5489d1f976a1e
    remove copybit hack from software opengl (libagl)
    
    h/w acceleration is not supported through software gl + copybit anylonger,
    instead, h/w opengl must be used. in the system compositor, a new h/w
    composition api will be introduced to allow h/w accelerated composition with
    overlays and/or 2D blocks.
    
    Change-Id: I04949cb074ba8c4d637319ace23497c16a58d5bf
    Introduce official public NativeWindow type.
    
    Not yet hooked up to anything in the NDK, but requires renaming
    the existing android_native_window_t type everywhere.
    
    Change-Id: Iffee6ea39c93b8b34e20fb69e4d2c7c837e5ea2e
    Recover a handful of commits that were reverted earlier
    Use stride for source and target buffers when copybit is enabled.
    
    Change-Id: Ie651013b3522f8e004685d74190da86433086307
    fix a crasher in our EGL wrapper when attrib_list is NULL in eglChooseConfig
    
    the EGL specification states that this should be treated as though it was
    an empty list terminated with EGL_NONE.
    
    Change-Id: I294104370a86b5e5c34c7bcf15c5459eab464631
    Proper EGLImageKHR error handling
    
    Validate EGLImageKHR format and return an error for unsupported ones.
    Also make sure to return an error when binding EGL_NO_IMAGE_KHR to a texture
    android-2.1_r1 snapshot
    eclair snapshot
    fix [2236865] STOPSHIP: bump soft gl and egl minor version number
    part of fix [2186418] switch passion to 24-bits framebuffer
    
    add support for RGBX_8888 EGLConfigs in the software renderer
    (since that's what we're using in the MDP case)
    fix [2236832] software OpenGL ES driver doesn't work on sholes
    
    make sure to not pass our fake handles to the real gralloc
    fix[2228133] pixelflinger ignores the "vertical stride" leading to artifacts when playing back video
    
    we lost the concept of vertical stride when moving video playback to EGLImage.
    Here we bring it back in a somewhat hacky-way that will work only for the
    softgl/mdp backend.
    fix [2153873] EGL-1.4 software implementation misses surface attributes
    Fix obvious typo bug in egl.cpp
    
    can (and does sometimes) lead to accessing array with -1 as index
    fix [2147737] Pixel Flinger needs to set EGL_RENDERABLE_TYPE to EGL_OPENGL_ES_BIT
    
    Also set max swap interval to 1, which is the only supported value currently.
    better error handling in EGL
    second take, hopefully this time it doesn't break one of the builds: "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    Revert "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    
    This reverts commit 8b76a0ac6fbf07254629ed1ea86af014d5abe050.
    SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything.
    
    This change makes SurfaceHolder.setType(GPU) obsolete (it's now ignored).
    Added an API to android_native_window_t to allow extending the functionality without ever breaking binary compatibility. This is used to implement the new set_usage() API. This API needs to be called by software renderers because the default is to use usage flags suitable for h/w.
    be more robust when errors occur upon EGL surface creation (ie: don't crash)
    fixed some issues with the software renderer when surfaces are made current.
    
    there was several issues:
    - when a surface was made non-current, the last frame wasn't shown and the buffer could stay locked
    - when a surface was made current the 2nd time, it would not dequeue a new buffer
    
    now, queue/dequeue are done when the surface is made current.
    
    for this to work, a new query() hook had to be added on android_native_window_t, it allows to retrieve some attributes of a window (currently only width and height).
    donut snapshot
    remove libagl's dependency on gralloc_priv.h
    fix for [1969185] valgrind errors in new gl stuff
    use copybit for eglSwapBuffers() copy-back operations
    Add eglGetRenderBufferANDROID() extension, which returns the current render buffer as an android_native_buffer_t*
    fix a bug where copybit only renders in the first buffer when used with s/w GL
    make sure clear the draw and read EGLSurface when eglMakeCurrent() is called for unbinding from the thread
    donut snapshot
    fix EGL extension string names
    created an new EGL extension called ANDROID_swap_rectangle
    
    ANDROID_swap_rectangle allows to specify the rectangle affected by eglSwapBuffers(), anything outside of this rectangle is unchanged. in particular EGL_BUFFER_DESTROYED only applies to that rectangle. This extension as well as EGL_BUFFER_PRESERVED allow major optimizations on surfaceflinger, which can redraw only the dirty area during compositing.
    
    However, ANDROID_swap_rectangle allows further optimizations in EGL by reducing the amount of copy-back needed. ANDROID_swap_rectangle is particularily important for software implementations.
    move android_native_buffer_t declaration into its own private/ui/android_native_priv.h header, since user code should never have access to it.
    move opengl/include/EGL/android_natives.h to include/ui/egl/android_natives.h and don't include it from egl.h
    
    the android_native_ types are just forward declared in egl.h
    get rid of android_native_buffer_t::getHandle() and replace it with an handle field
    
    this abstraction was not necessary. things are easier now.
    removed the "bits" attribute from android_native_buffer_t.
    
    "bits" can never be trusted now that we need to call lock() on the handle to get the virtual address of the buffer.
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    integrate some OpenGL ES changes back from master_gl in preparation of opening GLES to the NDK.
    more debugging tools around BufferMapper
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    Automated import from //branches/master/...@142578,142578
    Automated import from //branches/donutburger/...@142484,142484
    Automated import from //branches/cupcake/...@142481,142481
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@132589
    auto import from //depot/cupcake/@137055
    auto import from //branches/cupcake/...@130745
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    remove dependency on android_native{s_priv|buffer}.h
    
    Change-Id: Ie4b95f7061c240f37c504414259f92d72c4ffc89
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    frameworks/base: android_native_buffer_t -> ANativeWindowBuffer
    
    Change-Id: Idc2eabaa805bb6d308ebb315872623f28d428417
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    remove copybit hack from software opengl (libagl)
    
    h/w acceleration is not supported through software gl + copybit anylonger,
    instead, h/w opengl must be used. in the system compositor, a new h/w
    composition api will be introduced to allow h/w accelerated composition with
    overlays and/or 2D blocks.
    
    Change-Id: I04949cb074ba8c4d637319ace23497c16a58d5bf
    eclair snapshot
    fix a bug where copybit only renders in the first buffer when used with s/w GL
    move android_native_buffer_t declaration into its own private/ui/android_native_priv.h header, since user code should never have access to it.
    move opengl/include/EGL/android_natives.h to include/ui/egl/android_natives.h and don't include it from egl.h
    
    the android_native_ types are just forward declared in egl.h
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    opengl: fix UAL conformity
    
    GAS assumes .align 2 if .align only is set, however the UAL doesn't enforce this assumption.
    
    Change-Id: I88b567dc84ee8f04a13f2b8e80c3ee41530a9e49
    Add misssing symbol type directives.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    Implement the EGL_KHR_fence_sync in libagl
    
    Implementing this in libagl allows us to start using it for
    SurfaceTexture in emulator builds, which is necessary to avoid
    corruption in the Browser when using the host-accelerated GL path.
    
    Bug: 6515813
    Change-Id: Icafba8687cb5d010d8d42b3866b298d2be984fc9
    implement EGL_TEXTURE_EXTERNAL_OES in libagl
    
    this allows the emulator to display some graphics
    
    Change-Id: Ib4671ad70b8df598d02307f2b9c5b843421cea25
    fix [2236865] STOPSHIP: bump soft gl and egl minor version number
    
    Change-Id: Ibf46b18d7493348e189f2c93e969a6cac61f68b5
    remove copybit hack from software opengl (libagl)
    
    h/w acceleration is not supported through software gl + copybit anylonger,
    instead, h/w opengl must be used. in the system compositor, a new h/w
    composition api will be introduced to allow h/w accelerated composition with
    overlays and/or 2D blocks.
    
    Change-Id: I04949cb074ba8c4d637319ace23497c16a58d5bf
    fix [2236865] STOPSHIP: bump soft gl and egl minor version number
    
    this is to allow developpers to deal with potiential differences
    between the softgl versions.
    
    Change-Id: I7ec2451d6af1be29818d66215b22977405d403e8
    implement [2396050] Add ETC1 texture support to AGL
    android-2.1_r1 snapshot
    eclair snapshot
    fix [2236865] STOPSHIP: bump soft gl and egl minor version number
    fix a bug where copybit only renders in the first buffer when used with s/w GL
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Initial Contribution
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    fix [2931718] glDrawArrays skips a triangle when more than 70 vertices are used.
    
    a typo prevented the last 2 vertices of a batch to be copied to the front of
    the next batch. Instead, the 2 very first vertices were used.
    
    Change-Id: I3c344784dac1cef64df2fb6f6efb2f901cc788db
    remove copybit hack from software opengl (libagl)
    
    h/w acceleration is not supported through software gl + copybit anylonger,
    instead, h/w opengl must be used. in the system compositor, a new h/w
    composition api will be introduced to allow h/w accelerated composition with
    overlays and/or 2D blocks.
    
    Change-Id: I04949cb074ba8c4d637319ace23497c16a58d5bf
    android-2.1_r1 snapshot
    fix [2235414] libagl glDeleteBuffers() crashes
    
    don't dereference null pointers, would happen if one of the array wasn't bound.
    eclair snapshot
    OpenGL ES doesn't allow glColorPointer with a size parameter other than 4
    donut snapshot
    s/w OpenGL no detects and handles all any combinations of triangle fans corresponding to a rectangle
    
    this allows fallback to faster copybit code in almost all cases.
    fix [1610840] Positional light doesn't work correctly on emulator
    
    This bug was introduced when lighting computations was changed from eye-space to object-space.
    The light position need to be transformed back to object-space each time the modelview matrix changes which requires us to compute the inverse of the modelview matrix. This computation was done with the assumption that normals where transformed (which was the case when the computation was made in eye-space), however, normals only require the inverse of the upper 3x3 matrix while transforming positions requires the inverse of the whole matrix.
    This caused the interesting behavior that lights were more-or-less transformed properly, but not translated at all, which caused improper lighting with directional lights in particular.
    
    There was also another smaller bug affecting directional lights: when vertices are read, only the active component are read, the other ones are ignored, later, the transformation operations are set up to ignore the unset values, howver, in the case of lighting, we use the vertex in object space (that is, before it is transformed), and therefore were using uninitalized values; in particular w.
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    opengl: fix UAL conformity
    
    GAS assumes .align 2 if .align only is set, however the UAL doesn't enforce this assumption.
    
    Change-Id: I88b567dc84ee8f04a13f2b8e80c3ee41530a9e49
    Add misssing symbol type directives.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libGLES_android: fix 64-bit compile errors
    
    Fix size of vertex_t on 64-bit architectures
    Fix __get_tls casts, the TLS area is a void**
    Cast through uintptr_t to store integers in a pointer
    Use %zu to print size_t
    
    Change-Id: I91079ec76025237e6d2081784c5348518b0ce122
    libagl shouldn't export anything
    
    Change-Id: Ia823dbc56aab2a0b8a6063df4348fe6baac124c6
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    frameworks/base: android_native_buffer_t -> ANativeWindowBuffer
    
    Change-Id: Idc2eabaa805bb6d308ebb315872623f28d428417
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    remove copybit hack from software opengl (libagl)
    
    h/w acceleration is not supported through software gl + copybit anylonger,
    instead, h/w opengl must be used. in the system compositor, a new h/w
    composition api will be introduced to allow h/w accelerated composition with
    overlays and/or 2D blocks.
    
    Change-Id: I04949cb074ba8c4d637319ace23497c16a58d5bf
    eclair snapshot
    Add eglGetRenderBufferANDROID() extension, which returns the current render buffer as an android_native_buffer_t*
    fix a bug where copybit only renders in the first buffer when used with s/w GL
    move opengl/include/EGL/android_natives.h to include/ui/egl/android_natives.h and don't include it from egl.h
    
    the android_native_ types are just forward declared in egl.h
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    fix [2133133] Software OpenGL ES Lighting is buggy (GL Gears washed out bug)
    
    A typo caused GL_AMBIENT_AND_DIFFUSE to only set the the ambient color.
    
    Fix another typo which caused the viewer position to be wrong for
    specular highlights.
    
    Switch back to eye-space lighting, since there are still some issues
    with some demos (San Angeles in particular).
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    [MIPS] Add MIPS architecture support to libagl
    
    Change-Id: I30eb92857a2a6ea867fe0ee45109f17609043aae
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    eclair snapshot
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libGLES_android: fix 64-bit compile errors
    
    Fix size of vertex_t on 64-bit architectures
    Fix __get_tls casts, the TLS area is a void**
    Cast through uintptr_t to store integers in a pointer
    Use %zu to print size_t
    
    Change-Id: I91079ec76025237e6d2081784c5348518b0ce122
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    eclair snapshot
    Bug Fixed for libagl.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    [MIPS] Add MIPS architecture support to libagl
    
    Change-Id: I30eb92857a2a6ea867fe0ee45109f17609043aae
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    [MIPS] Add MIPS architecture support to libagl
    
    Change-Id: I30eb92857a2a6ea867fe0ee45109f17609043aae
    libEGL: workaround for google bug 10194508
    
    Change-Id: Ief39288a57b52c3077e465bbb741797ed384ee8e
    Install symlinks in multilib build.
    
    (cherry picked from commit c3aed1eaefa9c824d5863d58db3954eb642cffe4)
    
    Change-Id: Ic0082ffbd7ecf610476bccb0929e67427a05190d
    Revert "Enable OMAP4 SGX workaround for OMAP3 too"
    
    Since the new TI SGX DDK 1.12 has fixed support for RGBA8888,
    the workaround can be reverted. This may help with CTS issues.
    
    Bug: 14995811
    This reverts commit 6e79cb81d02984c9f7ac0586078f947c94c56c2a.
    
    Change-Id: Id8160ebe577d7009d2dd5eb4501ec40356a4274d
    Remove unused LOCAL_LDLIBS.
    
    Change-Id: I62904c410a66f256da8253764577acae18f964f8
    Enable OMAP4 SGX workaround for OMAP3 too
    
    Change-Id: I04308d8b7435b4adf1811f75f48f9e8a07a8c8a6
    remove adreno 130 workaround support
    
    Change-Id: I8ea5ee65d405114b30cfaa44e1a0c971d1ef2a61
    try to keep omap4 alive
    
    Bug: 10527646
    Change-Id: Iec572a910e932115cf4f2e1215142b10cd91bd6f
    Add liblog
    
    Bug: 8580410
    Change-Id: I2ca4fa00dde0b574df3619134836bcb9315bd506
    Simplify OpenGL TLS access on ARM.
    
    bionic now assumes the TLS register is available, so OpenGL can too.
    
    Change-Id: If2b56a4c08de9f887759b78f70022026a181dc47
    Symlink /system/lib/libGLESv3.so -> libGLESv2.so
    
    The platform has a unified GLES2/GLES3 wrapper in libGLESv2.so, which
    is what bundled binaries should link against. The NDK will have
    separate GLES2 and GLES3 libraries so that applications will get a
    link error if they accidentally use GLES3 entry points in a GLES2
    application. This symlink allows GLES3 NDK apps to load using the
    unified wrapper.
    
    Change-Id: Ic344ef63c334047fccebb55b7cb2fb23a4c2d61b
    Use LOCAL_REQUIRED_MODULES to establish dependency
    
    instead of using the tricky order-only dependency on a phony target
    module name.
    
    Change-Id: I691f2d352d1bd7f619bdb0b75070709e1b8222c0
    Revert "Add GL Error logs (temporary)"
    
    This reverts commit 2da2c15068327a4fdad411f638905abcb2209d8a.
    Add GL Error logs (temporary)
    
    Adding logs to tell which specific methods throw OpenGL errors.
    
    Change-Id: I1d73c7566ed1ea6610392020411762c6255a0ede
    EGL: make max cache key size BoardConfig-able
    
    This change makes the maximum EGL blob cache key size configurable via a
    BoardConfig.
    
    Change-Id: Ic669cd25fc743662bd4f13aab62354fc3d54560c
    Add compile-time option to systrace GL-ES calls
    
    Change-Id: Ibec103bbf159626ad9745d0e071192ad424bc0e9
    reduce PB size from 2MB to 512KB
    
    this allows us to enable h/w acceleration on low-end
    devices while keeping memory usage down.
    
    Bug: 6557760
    Change-Id: I8af2de3038dc2579360b8b73aa452cb7a0e506a9
    Disable EGL hibernation due to jank
    
    Hibernating EGL takes a long time (>100 ms) and blocks all other
    rendering. During window animations, the outgoing activity begins
    hibernation before the animation stops, causing visible stutter.
    Hibernation is still available by setting 'BOARD_ALLOW_EGL_HIBERNATION
    := true' in the devices BoardConfig.mk
    
    Change-Id: Iab4e00723a1adcd97481e81b2efdc821b3e9712f
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    EGL: Use cache sizes defined in the BoardConfig
    
    This change introduces two new BoardConfig variables to control the size
    limits of the EGL blob cache.  MAX_EGL_CACHE_ENTRY_SIZE is the size
    limit for values inserted into the cache, and MAX_EGL_CACHE_SIZE is the
    size limit for all entries in the entire cache (including both keys and
    values).  If either of these BoardConfig variables are not defined then
    a default size limit is used instead.
    
    Change-Id: I6703d93f966b6389c6499f23d841e42339f9c9d7
    EGL: Add stubs for EGL_ANDROID_blob_cache
    
    This change adds a stub cache implementation that gets passed to the
    underlying EGL implementation at initialization time.
    
    Change-Id: I14437c5b6f91b7a34a19bb02ad802e6e54f88d2a
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    fix x86 build
    
    Change-Id: I03cfbfeaeb8b13842248856b14b4a23711036e10
    refactor EGL source code
    
    no changes is functionality. split various objects into their own files.
    make egl_display objec's lock internal.
    GLES2Dbg: change GLES2_dbg to shared library
    
    Change-Id: I493e9bff431bd939f4e80e1e9c614dd557307fa2
    Signed-off-by: David Li <davidxli@google.com>
    GLES2Dbg: use libLZF for compressing images
    
    liblzf is in external/liblzf, it's BSD-type licence (optionally GPL2)
    
    Change-Id: Idc7883fe2155f366cda384e64796a1493335ae4f
    Signed-off-by: David Li <davidxli@google.com>
    Added screenshot after glDraw* option to GLES2 Debugger
    
    Also added timing mode option using utils/Timers.h.
    Factored out common code to reduce size.
    Improved Protobuf message.
    Uploads data from glBufferData and glBufferSubData.
    
    Change-Id: Iaae5e706235d942df81c7eada7223fb0b0583911
    Signed-off-by: David Li <davidxli@google.com>
    Initial commit of GLESv2 debugger server
    
    Use debug.egl.debug_proc property to match process cmdline.
    Binds to TCP:5039 and waits for client connection.
    Sends function call parameters, textures and shaders using Protobuf.
    Java Eclipse client plug-in is next.
    
    Change-Id: I183b755263663f87e86dde1ad12f527d0445fd57
    Signed-off-by: David Li <davidxli@google.com>
    OpenGL tracing.
    
    Enable with:
    
    adb shell setprop debug.egl.trace 1
    
    Change-Id: Icfbc795f5260141510975228e72234e9aab56a85
    fix [2421247] implement eglGetProcAddress(), needed in the ndk
    
    Change-Id: I5027a27b43c0dd449a404024087853ca05bb8e4e
    Use correct TLS codepath in graphics libraries
    
    Duplicate ARCH_ARM_HAVE_TLS_REGISTER BoardConfig to proprocessor
    HAVE_ARM_TLS_REGISTER define from Bionic's libc Android.mk to ensure that
    OpenGL libraries (libEGL, libGLESv1_CM, libGLESv2, libGLES_android) use the
    correct codepath in bionic_tls.h for accessing the TLS address
    DO NOT MERGE A library for encoding and decoding ETC1 textures.
    
    The ETC1 compressed texture format is commonly
    supported by OpenGL ES 2.0-capable devices.
    
    This change adds a host-only version of the library. It is used by
    the etc1tool.
    A library for encoding and decoding ETC1 textures.
    
    The ETC1 compressed texture format is commonly
    supported by OpenGL ES 2.0-capable devices.
    eclair snapshot
    Use the TLS register if HAVE_ARM_TLS_REGISTER is defined
    
    this will be needed for SMP, but would improve dispatching GL calls a bit
    on armv6 and above.
    Revert "egl: temporarily also include eglTerminate->eglInitialize hack for 8k"
    
    This reverts commit ed5ecdba36648973be3033a045e2ece8bf039e4a.
    egl: temporarily also include eglTerminate->eglInitialize hack for 8k
    
    Change-Id: Id5c51e54e733b24e5d5d5de0dcca84ac53afd3a9
    Signed-off-by: Dima Zavin <dima@android.com>
    fix a bug recently introduced where EGL couldn't be initialized again after it had been terminated once
    donut snapshot
    fix/clean these Android.mk following dbort and joeo's comments
    implement a real loader for EGL drivers
    
    we now look for a config file in /system/lib/egl/egl.cfg that describes the association of a display to a driver.
    these drivers are named: /system/lib/egl/lib{[EGL|GLESv1_CM|GLESv2] | GLES}_$TAG.so
    Added most of the support needed for GLES 2.x
    checkpoint: split libutils into libutils + libbinder
    donut snapshot
    libGLESv1_CM.so doesn't need to depend on libutils or libui
    remove libEGL and libGLESv1_CM dependencies on libutils and libui
    only export the GL entry-points, hide everything else.
    
    Conflicts:
    
            opengl/libagl/Android.mk
            opengl/libs/Android.mk
            opengl/libs/egl_impl.h
    integrate some OpenGL ES changes back from master_gl in preparation of opening GLES to the NDK.
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I3f45a7ef5367c70e54ce6b36a8c030ae11033434
    Revert "opengl: Regenerate code with ES 3.1 and new extensions"
    
    This reverts commit 6cb7d3dc9f1ce37547646979e0625992264ea4d0.
    
    Change-Id: I2eb7fd721dda9c14a0bfcef1b1c9d9843bbec94b
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I35acb473cba2433b9aeb95d1b8bfbdcfadf22532
    improve GLES jumptables
    
    in the common case this saves one instructions per jump
    (which will help with the i-cache).
    
    this change also gets rid of the "use slow tls" option,
    which was useless. So at least now architectures that don't have
    assembly bindings will perform much better.
    
    Change-Id: I31be6c06ad2136b50ef3a1ac14682d7812ad40d2
    [MIPS] Add MIPS architecture support to opengl framework
    
    Change-Id: Id7704d35bed14d96a85dc1f29db0566cd03872b5
    Add ES3 support to libGLESv2 and tracing tools
    
    Since ES3 is backwards compatible with ES2, a new wrapper isn't
    necessary, and the Khronos implementation guidelines recommend
    supporting both versions with the same library.
    
    Change-Id: If9bb02be60ce01cc5fe25d1f40c4e7f37244ebf6
    update GLES headers and add support for corresponding new extensions.
    
    Change-Id: I554d9659113b4721b748ee5c1a3b1ca82b11d75e
    fix x86 build
    
    Change-Id: I03cfbfeaeb8b13842248856b14b4a23711036e10
    OpenGL tracing.
    
    Enable with:
    
    adb shell setprop debug.egl.trace 1
    
    Change-Id: Icfbc795f5260141510975228e72234e9aab56a85
    fix [2421247] implement eglGetProcAddress(), needed in the ndk
    
    Change-Id: I5027a27b43c0dd449a404024087853ca05bb8e4e
    eclair snapshot
    fix [2187212] add support for GLESv2 dispatch based on TLS
    
    Instead of using a different function pointer table for ES 1.x and ES 2.x,
    we use a single one that is the union (sort|uniq) of both tables. Two
    instances of this table are initialized with pointers to GL ES 1.x and GL ES 2.x
    entry-points.
    When a context is created, we store its version number and when it is bound to a
    thread we set the approruiate table based on the stored version.
    
    This introduce no penalty while dispatching gl calls to the right API version.
    
    [Pending Dr No approval for MR1]
    fix bug [2021677] egl driver unloaded after eglTerminate() is called
    
    refactored the code so that:
    - EGL APIs that can be called before or after eglInitialize() will work by loading the drivers first
    - make eglGetDisplay() a lot more efficient
    - make sure that EGL drivers are loaded in a thread-safe way
    - don't unload the drivers upon calling eglTerminate(), they're now never unloaded, since there is no safe way to do it (some thread could be running)
    - updated our EGL version to 1.4
    - return better error codes if errors happen during initialization
    implement a real loader for EGL drivers
    
    we now look for a config file in /system/lib/egl/egl.cfg that describes the association of a display to a driver.
    these drivers are named: /system/lib/egl/lib{[EGL|GLESv1_CM|GLESv2] | GLES}_$TAG.so
    Added most of the support needed for GLES 2.x
    donut snapshot
    use gl.h to generate the *.in files. we are now supporting the full gl.h and glext.h apis.
    integrate some OpenGL ES changes back from master_gl in preparation of opening GLES to the NDK.
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I3f45a7ef5367c70e54ce6b36a8c030ae11033434
    opengl: Update GLES headers and generate *.in from registry XML
    
    Import GLES headers from Khronos SVN r26322:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below for a list.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: I902517c23354e14f9c63b1584db286d682315bb5
    Revert "opengl: Generate *.in from registry XML"
    
    This reverts commit 4a73962c694bfe57eb2bea40ed6fb626be7006aa.
    
    Change-Id: I1fa5cbe4d0b86f6df69d616157b3fec68d706d7a
    Revert "opengl: Regenerate code with ES 3.1 and new extensions"
    
    This reverts commit 6cb7d3dc9f1ce37547646979e0625992264ea4d0.
    
    Change-Id: I2eb7fd721dda9c14a0bfcef1b1c9d9843bbec94b
    opengl: Generate *.in from registry XML
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: Ib3fa700a146adf7f1487a93e459b1e6df0dcdc42
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I35acb473cba2433b9aeb95d1b8bfbdcfadf22532
    Add ES3 support to libGLESv2 and tracing tools
    
    Since ES3 is backwards compatible with ES2, a new wrapper isn't
    necessary, and the Khronos implementation guidelines recommend
    supporting both versions with the same library.
    
    Change-Id: If9bb02be60ce01cc5fe25d1f40c4e7f37244ebf6
    Regenerate API/trace files for constness change
    
    Change-Id: I45836219fc0e97607d83d458de9babb44f4c7534
    Fix return type of glGetAttribLocation and glGetUniformLocation
    
    from int to GLint.
    
    See:
       http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetAttribLocation.xml
       http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetUniformLocation.xml
    
    Change-Id: I4a9f8e9e34b8c3cca239ae84bfe8f3cdfd94802a
    update GLES headers and add support for corresponding new extensions.
    
    Change-Id: I554d9659113b4721b748ee5c1a3b1ca82b11d75e
    OpenGL tracing.
    
    Enable with:
    
    adb shell setprop debug.egl.trace 1
    
    Change-Id: Icfbc795f5260141510975228e72234e9aab56a85
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I3f45a7ef5367c70e54ce6b36a8c030ae11033434
    opengl: Update GLES headers and generate *.in from registry XML
    
    Import GLES headers from Khronos SVN r26322:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below for a list.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: I902517c23354e14f9c63b1584db286d682315bb5
    Revert "opengl: Generate *.in from registry XML"
    
    This reverts commit 4a73962c694bfe57eb2bea40ed6fb626be7006aa.
    
    Change-Id: I1fa5cbe4d0b86f6df69d616157b3fec68d706d7a
    Revert "opengl: Regenerate code with ES 3.1 and new extensions"
    
    This reverts commit 6cb7d3dc9f1ce37547646979e0625992264ea4d0.
    
    Change-Id: I2eb7fd721dda9c14a0bfcef1b1c9d9843bbec94b
    opengl: Generate *.in from registry XML
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: Ib3fa700a146adf7f1487a93e459b1e6df0dcdc42
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I35acb473cba2433b9aeb95d1b8bfbdcfadf22532
    Add ES3 support to libGLESv2 and tracing tools
    
    Since ES3 is backwards compatible with ES2, a new wrapper isn't
    necessary, and the Khronos implementation guidelines recommend
    supporting both versions with the same library.
    
    Change-Id: If9bb02be60ce01cc5fe25d1f40c4e7f37244ebf6
    update GLES headers and add support for corresponding new extensions.
    
    Change-Id: I554d9659113b4721b748ee5c1a3b1ca82b11d75e
    OpenGL tracing.
    
    Enable with:
    
    adb shell setprop debug.egl.trace 1
    
    Change-Id: Icfbc795f5260141510975228e72234e9aab56a85
    Don't wrap EGLImageKHR and EGLSyncKHR anymore
    
    this simplify our EGL wrapper implementation a lot.
    This wrapping is no longer needed now that we can only
    support a single underlaying EGL implementation.
    
    Change-Id: I8213df7ac69daac447f1fe6e37044b78aac4e9a9
    add support for GL_EXT_debug_marker
    
    This extension is always added to the GL_EXTENSIONS
    extension string for the current GL context, regardless
    of if it's supported by the h/w driver.
    
    The extension itself will be handled by GLES_trace (eventually),
    when GLES_trace is not enabled, it'll result to a no-op.
    
    If the h/w implementation has this extension, we'll call that version
    instead of our dummy version.
    
    Change-Id: Ie5dd3387c4d45cd5ed5f03b73bda6045620a96bc
    fix x86 build
    
    Change-Id: I03cfbfeaeb8b13842248856b14b4a23711036e10
    refactor EGL source code
    
    no changes is functionality. split various objects into their own files.
    make egl_display objec's lock internal.
    small cleanup. gEGLImpl should have been static
    
    also added a ctor to initialized it in case we use it ont he stack
    one day.
    
    Change-Id: I2736b9bce3d8ba3b74fd029de4c18cca2cdbbf60
    eclair snapshot
    fix [2187212] add support for GLESv2 dispatch based on TLS
    
    Instead of using a different function pointer table for ES 1.x and ES 2.x,
    we use a single one that is the union (sort|uniq) of both tables. Two
    instances of this table are initialized with pointers to GL ES 1.x and GL ES 2.x
    entry-points.
    When a context is created, we store its version number and when it is bound to a
    thread we set the approruiate table based on the stored version.
    
    This introduce no penalty while dispatching gl calls to the right API version.
    
    [Pending Dr No approval for MR1]
    fix bug [2021677] egl driver unloaded after eglTerminate() is called
    
    refactored the code so that:
    - EGL APIs that can be called before or after eglInitialize() will work by loading the drivers first
    - make eglGetDisplay() a lot more efficient
    - make sure that EGL drivers are loaded in a thread-safe way
    - don't unload the drivers upon calling eglTerminate(), they're now never unloaded, since there is no safe way to do it (some thread could be running)
    - updated our EGL version to 1.4
    - return better error codes if errors happen during initialization
    implement a real loader for EGL drivers
    
    we now look for a config file in /system/lib/egl/egl.cfg that describes the association of a display to a driver.
    these drivers are named: /system/lib/egl/lib{[EGL|GLESv1_CM|GLESv2] | GLES}_$TAG.so
    donut snapshot
    only export the GL entry-points, hide everything else.
    
    Conflicts:
    
            opengl/libagl/Android.mk
            opengl/libs/Android.mk
            opengl/libs/egl_impl.h
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I3f45a7ef5367c70e54ce6b36a8c030ae11033434
    opengl: Update GLES headers and generate *.in from registry XML
    
    Import GLES headers from Khronos SVN r26322:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below for a list.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: I902517c23354e14f9c63b1584db286d682315bb5
    Revert "opengl: Generate *.in from registry XML"
    
    This reverts commit 4a73962c694bfe57eb2bea40ed6fb626be7006aa.
    
    Change-Id: I1fa5cbe4d0b86f6df69d616157b3fec68d706d7a
    Revert "opengl: Regenerate code with ES 3.1 and new extensions"
    
    This reverts commit 6cb7d3dc9f1ce37547646979e0625992264ea4d0.
    
    Change-Id: I2eb7fd721dda9c14a0bfcef1b1c9d9843bbec94b
    opengl: Generate *.in from registry XML
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: Ib3fa700a146adf7f1487a93e459b1e6df0dcdc42
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I35acb473cba2433b9aeb95d1b8bfbdcfadf22532
    Add ES3 support to libGLESv2 and tracing tools
    
    Since ES3 is backwards compatible with ES2, a new wrapper isn't
    necessary, and the Khronos implementation guidelines recommend
    supporting both versions with the same library.
    
    Change-Id: If9bb02be60ce01cc5fe25d1f40c4e7f37244ebf6
    Regenerate API/trace files for constness change
    
    Change-Id: I45836219fc0e97607d83d458de9babb44f4c7534
    Fix return type of glGetAttribLocation and glGetUniformLocation
    
    from int to GLint.
    
    See:
       http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetAttribLocation.xml
       http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetUniformLocation.xml
    
    Change-Id: I4a9f8e9e34b8c3cca239ae84bfe8f3cdfd94802a
    update GLES headers and add support for corresponding new extensions.
    
    Change-Id: I554d9659113b4721b748ee5c1a3b1ca82b11d75e
    update GL ES stub libraries with the new GL ES headers
    
    Change-Id: I83be94049ddfe3fd7f5bee71a21172ade1498dd5
    eclair snapshot
    fix [2187212] add support for GLESv2 dispatch based on TLS
    
    Instead of using a different function pointer table for ES 1.x and ES 2.x,
    we use a single one that is the union (sort|uniq) of both tables. Two
    instances of this table are initialized with pointers to GL ES 1.x and GL ES 2.x
    entry-points.
    When a context is created, we store its version number and when it is bound to a
    thread we set the approruiate table based on the stored version.
    
    This introduce no penalty while dispatching gl calls to the right API version.
    
    [Pending Dr No approval for MR1]
    gltrace: Add support for tracing running applications.
    
    Currently, to activate OpenGL tracing, an application has to be
    start with --opengl-trace option (or have a debug prop set).
    
    This CL adds support for tracing an application which may already
    be running. This is implemented as follows:
        - DDMS initiates a JDWP message to the VM indicating that
          opengl traces be enabled.
        - When that message is received, a flag is set that indicates
          that tracing should be enabled.
        - The trace flag is checked during every eglSwap() operation,
          and if it finds that tracing should be active and it isn't,
          then it starts the tracing component.
    
    Change-Id: I3347fe89fc06c7404d7aa9360f4b21e5bf36ebcb
    gltrace: transport buffering and context management
    
    This patch adds two improvements:
    1. Protobuf messages are buffered and sent in chunks.
    2. Multiple EGL contexts are handled properly: Corresponding
    to each EGLContext, a GLTraceContext with a unique ID is created.
    On eglMakeCurrent, the appropriate GLTraceContext is set and is
    used while tracing subsequent GL Calls in that thread.
    
    Change-Id: I34076376d3e5af205c87c7396ea47659844abd6e
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    Add liblog
    
    Bug: 8580410
    Change-Id: I2ca4fa00dde0b574df3619134836bcb9315bd506
    Simplify OpenGL TLS access on ARM.
    
    bionic now assumes the TLS register is available, so OpenGL can too.
    
    Change-Id: If2b56a4c08de9f887759b78f70022026a181dc47
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    fix EGL debugger
    
    always use GL_RGBA, GL_UNSIGNED_BYTE for screen capture
    and make sure to handle GL_BGRA_EXT used on some gpu.
    
    Change-Id: If9c973677fec8a5c4e72be22e7ef7d4bf5f008f4
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    GLES2Dbg: initial tests
    
    Change-Id: Ibf07eff68d39267fd5c9bec2870f59a5ae2f51e3
    GLES2Dbg: change GLES2_dbg to shared library
    
    Change-Id: I493e9bff431bd939f4e80e1e9c614dd557307fa2
    Signed-off-by: David Li <davidxli@google.com>
    GLESv2Dbg: ability to create GL calls from client
    
    caller.cpp Is generated by generate_caller_cpp.py
    Hand written functions are in caller.h
    
    Change-Id: I27ed9792df52569159a2d1b8a78207c7a7518537
    Signed-off-by: David Li <davidxli@google.com>
    GLES2Dbg: added SETPROP expectResponse
    
     to allow "stepping" in functions.
    Also fix bug in reference frame.
    
    Change-Id: Ia33620eaf2c5f4e615f7aad2df277b6afc617060
    Signed-off-by: David Li <davidxli@google.com>
    GLES2Dbg: use libLZF for compressing images
    
    liblzf is in external/liblzf, it's BSD-type licence (optionally GPL2)
    
    Change-Id: Idc7883fe2155f366cda384e64796a1493335ae4f
    Signed-off-by: David Li <davidxli@google.com>
    GLES2Debugger: Added DbgContext and vertex data capturing.
    
    Send VBO related commands to client, which tracks the state.
    Maintain index buffer content and vertex attrib pointer/buffer state on server.
    During glDrawArrays/Elements, send user memory data to client.
    
    Change-Id: Ia920e90479329b301ae4b5735e833eeb20293c94
    Signed-off-by: David Li <davidxli@google.com>
    Added screenshot after glDraw* option to GLES2 Debugger
    
    Also added timing mode option using utils/Timers.h.
    Factored out common code to reduce size.
    Improved Protobuf message.
    Uploads data from glBufferData and glBufferSubData.
    
    Change-Id: Iaae5e706235d942df81c7eada7223fb0b0583911
    Signed-off-by: David Li <davidxli@google.com>
    Initial commit of GLESv2 debugger server
    
    Use debug.egl.debug_proc property to match process cmdline.
    Binds to TCP:5039 and waits for client connection.
    Sends function call parameters, textures and shaders using Protobuf.
    Java Eclipse client plug-in is next.
    
    Change-Id: I183b755263663f87e86dde1ad12f527d0445fd57
    Signed-off-by: David Li <davidxli@google.com>
    gltrace: Add support for tracing running applications.
    
    Currently, to activate OpenGL tracing, an application has to be
    start with --opengl-trace option (or have a debug prop set).
    
    This CL adds support for tracing an application which may already
    be running. This is implemented as follows:
        - DDMS initiates a JDWP message to the VM indicating that
          opengl traces be enabled.
        - When that message is received, a flag is set that indicates
          that tracing should be enabled.
        - The trace flag is checked during every eglSwap() operation,
          and if it finds that tracing should be active and it isn't,
          then it starts the tracing component.
    
    Change-Id: I3347fe89fc06c7404d7aa9360f4b21e5bf36ebcb
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I3f45a7ef5367c70e54ce6b36a8c030ae11033434
    opengl: Update GLES headers and generate *.in from registry XML
    
    Import GLES headers from Khronos SVN r26322:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below for a list.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: I902517c23354e14f9c63b1584db286d682315bb5
    Revert "opengl: Generate *.in from registry XML"
    
    This reverts commit 4a73962c694bfe57eb2bea40ed6fb626be7006aa.
    
    Change-Id: I1fa5cbe4d0b86f6df69d616157b3fec68d706d7a
    Revert "opengl: Regenerate code with ES 3.1 and new extensions"
    
    This reverts commit 6cb7d3dc9f1ce37547646979e0625992264ea4d0.
    
    Change-Id: I2eb7fd721dda9c14a0bfcef1b1c9d9843bbec94b
    opengl: Generate *.in from registry XML
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: Ib3fa700a146adf7f1487a93e459b1e6df0dcdc42
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I35acb473cba2433b9aeb95d1b8bfbdcfadf22532
    Add ES3 support to libGLESv2 and tracing tools
    
    Since ES3 is backwards compatible with ES2, a new wrapper isn't
    necessary, and the Khronos implementation guidelines recommend
    supporting both versions with the same library.
    
    Change-Id: If9bb02be60ce01cc5fe25d1f40c4e7f37244ebf6
    gltrace: Send vertex attribute data after glDraw() call.
    
    This patch enables tracing of vertex attribute data that
    is specified using glVertexAttribPointer().
    
    At the time the glVertexAttribPointer() call is made, we
    only receive a pointer in client space, without any indication
    of the size (# of attributes). This size is known only at
    the time of the glDraw() call.
    
    This patch generates a new message glVertexAttribPointerData()
    when a draw call is issued that contains the vertex attribute
    data.
    
    A glDrawArrays() call directly gives the size of data to copy.
    A glDrawElements() call gives the indices to copy. In such a
    case, all data between the min & max indices drawn are copied
    and sent to the host. To support glDrawElements() with an
    element array buffer, this patch also adds state that maintains
    a copy of all element array buffers.
    
    Change-Id: I434da794a0aa9ada8e7474e219ffb1d79b183ecf
    gltrace: Trace thread time and wall clock time.
    
    For each gl function, trace both the thread and wall clock
    times.
    
    Change-Id: I32b6caa67fa50bf915dab89b3c5021ee82e28d55
    update GLES headers and add support for corresponding new extensions.
    
    Change-Id: I554d9659113b4721b748ee5c1a3b1ca82b11d75e
    gltrace: add start time & duration to each traced call.
    
    Change-Id: Idfec8f715f6000594b6381cbfdee9fdf6d89f484
    gltrace: Make framebuffer contents an optional message.
    
    Currently, the contents of the FrameBuffer are sent by encoding
    them as the last argument to the function call. As a result, it is
    not possible to know if a message has the framebuffer encoded in it
    without looking at the function type.
    
    This patch modifies the protobuf definition to include a separate
    optional framebuffer message.
    
    Change-Id: Ief3a6950052d927ca0743e729457435b48c25a92
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    gltrace: Send vertex attribute data after glDraw() call.
    
    This patch enables tracing of vertex attribute data that
    is specified using glVertexAttribPointer().
    
    At the time the glVertexAttribPointer() call is made, we
    only receive a pointer in client space, without any indication
    of the size (# of attributes). This size is known only at
    the time of the glDraw() call.
    
    This patch generates a new message glVertexAttribPointerData()
    when a draw call is issued that contains the vertex attribute
    data.
    
    A glDrawArrays() call directly gives the size of data to copy.
    A glDrawElements() call gives the indices to copy. In such a
    case, all data between the min & max indices drawn are copied
    and sent to the host. To support glDrawElements() with an
    element array buffer, this patch also adds state that maintains
    a copy of all element array buffers.
    
    Change-Id: I434da794a0aa9ada8e7474e219ffb1d79b183ecf
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    update GLES headers and add support for corresponding new extensions.
    
    Change-Id: I554d9659113b4721b748ee5c1a3b1ca82b11d75e
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I3f45a7ef5367c70e54ce6b36a8c030ae11033434
    opengl: Update GLES headers and generate *.in from registry XML
    
    Import GLES headers from Khronos SVN r26322:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below for a list.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: I902517c23354e14f9c63b1584db286d682315bb5
    Revert "opengl: Generate *.in from registry XML"
    
    This reverts commit 4a73962c694bfe57eb2bea40ed6fb626be7006aa.
    
    Change-Id: I1fa5cbe4d0b86f6df69d616157b3fec68d706d7a
    Revert "opengl: Regenerate code with ES 3.1 and new extensions"
    
    This reverts commit 6cb7d3dc9f1ce37547646979e0625992264ea4d0.
    
    Change-Id: I2eb7fd721dda9c14a0bfcef1b1c9d9843bbec94b
    opengl: Generate *.in from registry XML
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: Ib3fa700a146adf7f1487a93e459b1e6df0dcdc42
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I35acb473cba2433b9aeb95d1b8bfbdcfadf22532
    Rationalize GLES2/3 .in files.
    
    We weren't using gl2_api.in, since gl3_api.in was a superset. And
    gl3ext_api.in was empty, and Khronos has decided to keep it that way
    (any GLES2/3/... extensions will be in gl2ext.h).
    
    Since libGLES2.so will have all future backwards-compatible GLES APIs,
    it makes sense to just use gl2_api.in and gl2ext_api.in to build its
    contents. This changes renames gl3_api.in to gl2_api.in and updates
    uses of it, and removes gl3ext_api.in and references.
    
    Bug: 15028495
    Change-Id: I0745eda27ec91ee625f03e957e4fdb22035dd781
    GLES_trace: fix compile errors on 64 bit architectures
    
    GLES_trace passes some pointers back to the host. Encode them
    using int64's rather than int32's
    
    This fix requires an update to the host tool to look at pointers
    as 64 bit, and if not found, then fall back to 32 bit integers.
    
    Change-Id: I11ff2ca51290f05913c1b9143cecee1caf015543
    Add ES3 support to libGLESv2 and tracing tools
    
    Since ES3 is backwards compatible with ES2, a new wrapper isn't
    necessary, and the Khronos implementation guidelines recommend
    supporting both versions with the same library.
    
    Change-Id: If9bb02be60ce01cc5fe25d1f40c4e7f37244ebf6
    gltrace: Make code 64-bit safe.
    
    Currently, the trace API passes the pointers that need to be
    patched up via 32 bit integers. Such code will not be 64 bit safe.
    This patch sends all pointers in a separate array of pointers
    for the fixup calls to read from.
    
    Change-Id: If975333f11a6f6f9a74fba57de328affaed452a5
    gltrace: Trace thread time and wall clock time.
    
    For each gl function, trace both the thread and wall clock
    times.
    
    Change-Id: I32b6caa67fa50bf915dab89b3c5021ee82e28d55
    update GLES headers and add support for corresponding new extensions.
    
    Change-Id: I554d9659113b4721b748ee5c1a3b1ca82b11d75e
    gltrace: add start time & duration to each traced call.
    
    Change-Id: Idfec8f715f6000594b6381cbfdee9fdf6d89f484
    gltrace: transport buffering and context management
    
    This patch adds two improvements:
    1. Protobuf messages are buffered and sent in chunks.
    2. Multiple EGL contexts are handled properly: Corresponding
    to each EGLContext, a GLTraceContext with a unique ID is created.
    On eglMakeCurrent, the appropriate GLTraceContext is set and is
    used while tracing subsequent GL Calls in that thread.
    
    Change-Id: I34076376d3e5af205c87c7396ea47659844abd6e
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    gltrace: Make code 64-bit safe.
    
    Currently, the trace API passes the pointers that need to be
    patched up via 32 bit integers. Such code will not be 64 bit safe.
    This patch sends all pointers in a separate array of pointers
    for the fixup calls to read from.
    
    Change-Id: If975333f11a6f6f9a74fba57de328affaed452a5
    gltrace: Trace thread time and wall clock time.
    
    For each gl function, trace both the thread and wall clock
    times.
    
    Change-Id: I32b6caa67fa50bf915dab89b3c5021ee82e28d55
    gltrace: add start time & duration to each traced call.
    
    Change-Id: Idfec8f715f6000594b6381cbfdee9fdf6d89f484
    gltrace: transport buffering and context management
    
    This patch adds two improvements:
    1. Protobuf messages are buffered and sent in chunks.
    2. Multiple EGL contexts are handled properly: Corresponding
    to each EGLContext, a GLTraceContext with a unique ID is created.
    On eglMakeCurrent, the appropriate GLTraceContext is set and is
    used while tracing subsequent GL Calls in that thread.
    
    Change-Id: I34076376d3e5af205c87c7396ea47659844abd6e
    gltrace: attach contents of the appropriate framebuffer
    
    Currently, gltrace always attaches the contents of the currently
    bound framebuffer. This patch changes it to attach the contents
    of FB0 on eglSwap, and the currently bound framebuffer for the
    glDraw* calls.
    
    Change-Id: Ice0520d45d75638fe61cd91149df773074216510
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    Remove frameworks/base/im since these stuff are only used by IM app
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    as a debug option SrufaceFlinger can now connect to DDMS
    
    this is disabled by default. To enable:
      setprop debug.sf.ddms 1
    
    this debug option requires to restart SurfaceFlinger
    
    Change-Id: Ic2f8050b29911b55bcd21721648b6978700c277d
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    Remove frameworks/base/im since these stuff are only used by IM app
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I3f45a7ef5367c70e54ce6b36a8c030ae11033434
    opengl: Update GLES headers and generate *.in from registry XML
    
    Import GLES headers from Khronos SVN r26322:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below for a list.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: I902517c23354e14f9c63b1584db286d682315bb5
    Revert "opengl: Generate *.in from registry XML"
    
    This reverts commit 4a73962c694bfe57eb2bea40ed6fb626be7006aa.
    
    Change-Id: I1fa5cbe4d0b86f6df69d616157b3fec68d706d7a
    Revert "opengl: Regenerate code with ES 3.1 and new extensions"
    
    This reverts commit 6cb7d3dc9f1ce37547646979e0625992264ea4d0.
    
    Change-Id: I2eb7fd721dda9c14a0bfcef1b1c9d9843bbec94b
    opengl: Generate *.in from registry XML
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: Ib3fa700a146adf7f1487a93e459b1e6df0dcdc42
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I35acb473cba2433b9aeb95d1b8bfbdcfadf22532
    Rationalize GLES2/3 .in files.
    
    We weren't using gl2_api.in, since gl3_api.in was a superset. And
    gl3ext_api.in was empty, and Khronos has decided to keep it that way
    (any GLES2/3/... extensions will be in gl2ext.h).
    
    Since libGLES2.so will have all future backwards-compatible GLES APIs,
    it makes sense to just use gl2_api.in and gl2ext_api.in to build its
    contents. This changes renames gl3_api.in to gl2_api.in and updates
    uses of it, and removes gl3ext_api.in and references.
    
    Bug: 15028495
    Change-Id: I0745eda27ec91ee625f03e957e4fdb22035dd781
    GLES_trace: fix compile errors on 64 bit architectures
    
    GLES_trace passes some pointers back to the host. Encode them
    using int64's rather than int32's
    
    This fix requires an update to the host tool to look at pointers
    as 64 bit, and if not found, then fall back to 32 bit integers.
    
    Change-Id: I11ff2ca51290f05913c1b9143cecee1caf015543
    Add ES3 support to libGLESv2 and tracing tools
    
    Since ES3 is backwards compatible with ES2, a new wrapper isn't
    necessary, and the Khronos implementation guidelines recommend
    supporting both versions with the same library.
    
    Change-Id: If9bb02be60ce01cc5fe25d1f40c4e7f37244ebf6
    Regenerate API/trace files for constness change
    
    Change-Id: I45836219fc0e97607d83d458de9babb44f4c7534
    Fix return type of glGetAttribLocation and glGetUniformLocation
    
    from int to GLint.
    
    See:
       http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetAttribLocation.xml
       http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetUniformLocation.xml
    
    Change-Id: I4a9f8e9e34b8c3cca239ae84bfe8f3cdfd94802a
    gltrace: Make code 64-bit safe.
    
    Currently, the trace API passes the pointers that need to be
    patched up via 32 bit integers. Such code will not be 64 bit safe.
    This patch sends all pointers in a separate array of pointers
    for the fixup calls to read from.
    
    Change-Id: If975333f11a6f6f9a74fba57de328affaed452a5
    gltrace: Trace thread time and wall clock time.
    
    For each gl function, trace both the thread and wall clock
    times.
    
    Change-Id: I32b6caa67fa50bf915dab89b3c5021ee82e28d55
    update GLES headers and add support for corresponding new extensions.
    
    Change-Id: I554d9659113b4721b748ee5c1a3b1ca82b11d75e
    gltrace: add start time & duration to each traced call.
    
    Change-Id: Idfec8f715f6000594b6381cbfdee9fdf6d89f484
    gltrace: transport buffering and context management
    
    This patch adds two improvements:
    1. Protobuf messages are buffered and sent in chunks.
    2. Multiple EGL contexts are handled properly: Corresponding
    to each EGLContext, a GLTraceContext with a unique ID is created.
    On eglMakeCurrent, the appropriate GLTraceContext is set and is
    used while tracing subsequent GL Calls in that thread.
    
    Change-Id: I34076376d3e5af205c87c7396ea47659844abd6e
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    gltrace: transport buffering and context management
    
    This patch adds two improvements:
    1. Protobuf messages are buffered and sent in chunks.
    2. Multiple EGL contexts are handled properly: Corresponding
    to each EGLContext, a GLTraceContext with a unique ID is created.
    On eglMakeCurrent, the appropriate GLTraceContext is set and is
    used while tracing subsequent GL Calls in that thread.
    
    Change-Id: I34076376d3e5af205c87c7396ea47659844abd6e
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    Remove frameworks/base/im since these stuff are only used by IM app
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    gltrace: Allow receiving commands of length > 4
    
    Currently, gltrace offers very few trace collection options. As a
    result, these options are encoded in a single integer. The trace
    control task simply receives integers and interprets them as
    commands.
    
    This patch changes the control protocol to first receive the
    command length followed by the actual command itself. This allows
    for future flexibility to provide enable other commands.
    
    Change-Id: Id5f56c80a025bbbe7613ab4457e092732e7d9dc9
    gltrace: Use Unix Domain Socket rather than INET Socket
    
    Export trace information via abstract Unix Domain Socket (UDS).
    This allows tracing of applications without INTERNET permission,
    and should be faster as well.
    
    Change-Id: Iabb67fcc2bc2484afd8128af07dca723b81c52c6
    gltrace: transport buffering and context management
    
    This patch adds two improvements:
    1. Protobuf messages are buffered and sent in chunks.
    2. Multiple EGL contexts are handled properly: Corresponding
    to each EGLContext, a GLTraceContext with a unique ID is created.
    On eglMakeCurrent, the appropriate GLTraceContext is set and is
    used while tracing subsequent GL Calls in that thread.
    
    Change-Id: I34076376d3e5af205c87c7396ea47659844abd6e
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    as a debug option SrufaceFlinger can now connect to DDMS
    
    this is disabled by default. To enable:
      setprop debug.sf.ddms 1
    
    this debug option requires to restart SurfaceFlinger
    
    Change-Id: Ic2f8050b29911b55bcd21721648b6978700c277d
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    Remove frameworks/base/im since these stuff are only used by IM app
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I3f45a7ef5367c70e54ce6b36a8c030ae11033434
    opengl: Update GLES headers and generate *.in from registry XML
    
    Import GLES headers from Khronos SVN r26322:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below for a list.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: I902517c23354e14f9c63b1584db286d682315bb5
    Revert "opengl: Generate *.in from registry XML"
    
    This reverts commit 4a73962c694bfe57eb2bea40ed6fb626be7006aa.
    
    Change-Id: I1fa5cbe4d0b86f6df69d616157b3fec68d706d7a
    Revert "opengl: Regenerate code with ES 3.1 and new extensions"
    
    This reverts commit 6cb7d3dc9f1ce37547646979e0625992264ea4d0.
    
    Change-Id: I2eb7fd721dda9c14a0bfcef1b1c9d9843bbec94b
    opengl: Generate *.in from registry XML
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: Ib3fa700a146adf7f1487a93e459b1e6df0dcdc42
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I35acb473cba2433b9aeb95d1b8bfbdcfadf22532
    Rationalize GLES2/3 .in files.
    
    We weren't using gl2_api.in, since gl3_api.in was a superset. And
    gl3ext_api.in was empty, and Khronos has decided to keep it that way
    (any GLES2/3/... extensions will be in gl2ext.h).
    
    Since libGLES2.so will have all future backwards-compatible GLES APIs,
    it makes sense to just use gl2_api.in and gl2ext_api.in to build its
    contents. This changes renames gl3_api.in to gl2_api.in and updates
    uses of it, and removes gl3ext_api.in and references.
    
    Bug: 15028495
    Change-Id: I0745eda27ec91ee625f03e957e4fdb22035dd781
    Add ES3 support to libGLESv2 and tracing tools
    
    Since ES3 is backwards compatible with ES2, a new wrapper isn't
    necessary, and the Khronos implementation guidelines recommend
    supporting both versions with the same library.
    
    Change-Id: If9bb02be60ce01cc5fe25d1f40c4e7f37244ebf6
    Regenerate API/trace files for constness change
    
    Change-Id: I45836219fc0e97607d83d458de9babb44f4c7534
    Fix return type of glGetAttribLocation and glGetUniformLocation
    
    from int to GLint.
    
    See:
       http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetAttribLocation.xml
       http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetUniformLocation.xml
    
    Change-Id: I4a9f8e9e34b8c3cca239ae84bfe8f3cdfd94802a
    update GLES headers and add support for corresponding new extensions.
    
    Change-Id: I554d9659113b4721b748ee5c1a3b1ca82b11d75e
    gltrace: add start time & duration to each traced call.
    
    Change-Id: Idfec8f715f6000594b6381cbfdee9fdf6d89f484
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    gltrace: Allow receiving commands of length > 4
    
    Currently, gltrace offers very few trace collection options. As a
    result, these options are encoded in a single integer. The trace
    control task simply receives integers and interprets them as
    commands.
    
    This patch changes the control protocol to first receive the
    command length followed by the actual command itself. This allows
    for future flexibility to provide enable other commands.
    
    Change-Id: Id5f56c80a025bbbe7613ab4457e092732e7d9dc9
    gldebugger: Allow connections from root user
    
    Change-Id: I26ce670ae93c43bd36843576e824a9d7acea644d
    gltrace: Only accept connections from the shell.
    
    Only accept incoming connections from the shell user.
    
    Change-Id: Ibef1a796d794d45f73db59949b39cb1ce68542b4
    gltrace: Use Unix Domain Socket rather than INET Socket
    
    Export trace information via abstract Unix Domain Socket (UDS).
    This allows tracing of applications without INTERNET permission,
    and should be faster as well.
    
    Change-Id: Iabb67fcc2bc2484afd8128af07dca723b81c52c6
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    gltrace: transport buffering and context management
    
    This patch adds two improvements:
    1. Protobuf messages are buffered and sent in chunks.
    2. Multiple EGL contexts are handled properly: Corresponding
    to each EGLContext, a GLTraceContext with a unique ID is created.
    On eglMakeCurrent, the appropriate GLTraceContext is set and is
    used while tracing subsequent GL Calls in that thread.
    
    Change-Id: I34076376d3e5af205c87c7396ea47659844abd6e
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    gltrace: add user settings to control data captured.
    
    Currently users do not have control over the amount of data
    captured during tracing. This patch adds 3 settings that users
    can enable/disable at runtime:
      - capture framebuffer on eglSwap() calls
      - capture framebuffer on glDraw*() calls
      - capture texture data passed to glTexImage*() calls
    Disabling these options when not needed signficantly decreases
    the size of the trace file, and reduces performance overhead for
    the running application.
    
    These settings are stored in the per process GLTraceState.
    A separate thread listens for commands from the host, and updates
    the state based on the user commands.
    
    Change-Id: Ic4518b94e8bcbc5330ac7138153721caa98b365d
    gltrace: add start time & duration to each traced call.
    
    Change-Id: Idfec8f715f6000594b6381cbfdee9fdf6d89f484
    gltrace: transport buffering and context management
    
    This patch adds two improvements:
    1. Protobuf messages are buffered and sent in chunks.
    2. Multiple EGL contexts are handled properly: Corresponding
    to each EGLContext, a GLTraceContext with a unique ID is created.
    On eglMakeCurrent, the appropriate GLTraceContext is set and is
    used while tracing subsequent GL Calls in that thread.
    
    Change-Id: I34076376d3e5af205c87c7396ea47659844abd6e
    gltrace: attach contents of the appropriate framebuffer
    
    Currently, gltrace always attaches the contents of the currently
    bound framebuffer. This patch changes it to attach the contents
    of FB0 on eglSwap, and the currently bound framebuffer for the
    glDraw* calls.
    
    Change-Id: Ice0520d45d75638fe61cd91149df773074216510
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    Don't try to capture the pointer when using PBOs for texture APIs
    
    If a PBO is bound, then the pointer argument is a relative offset from
    the start of the PBO, not an absolute address.
    
    Fixes b/17063439
    
    Change-Id: I39629ce6c9bb3cb6bac5c9b0311287628306ddd4
    (cherry picked from commit 0ad707f2f3d714af7d983d68330ed51dace815f5)
    Use the count parameter to store all the uniform vectors, not just the first one. DO NOT MERGE.
    
    Change-Id: Ib56d859051f0b895de5c12ffa371cd4b2b65ac0b
    (cherry picked from commit 31b0aec64ba44b1ee0581e00a588d84f4b081512)
    Add data capturing of glCompressedTexImage2D and glCompressedTexSubImage2D calls.
    
    Change-Id: I38643f5d279a84f1b7069801d7c106fc8f1ae394
    Fix return type of glGetAttribLocation and glGetUniformLocation
    
    from int to GLint.
    
    See:
       http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetAttribLocation.xml
       http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetUniformLocation.xml
    
    Change-Id: I4a9f8e9e34b8c3cca239ae84bfe8f3cdfd94802a
    gltrace: Fix NPE
    
    Change-Id: Id7af9cd388f3508201f96a0624966c2ce01b4da5
    gltrace: Fixup vertex attrib pointers only for GLES2
    
    Change-Id: Ibf280c2a4372ce6e598e164eef0d72b7c0a6d1c2
    gltrace: Send vertex attribute data after glDraw() call.
    
    This patch enables tracing of vertex attribute data that
    is specified using glVertexAttribPointer().
    
    At the time the glVertexAttribPointer() call is made, we
    only receive a pointer in client space, without any indication
    of the size (# of attributes). This size is known only at
    the time of the glDraw() call.
    
    This patch generates a new message glVertexAttribPointerData()
    when a draw call is issued that contains the vertex attribute
    data.
    
    A glDrawArrays() call directly gives the size of data to copy.
    A glDrawElements() call gives the indices to copy. In such a
    case, all data between the min & max indices drawn are copied
    and sent to the host. To support glDrawElements() with an
    element array buffer, this patch also adds state that maintains
    a copy of all element array buffers.
    
    Change-Id: I434da794a0aa9ada8e7474e219ffb1d79b183ecf
    gltrace: Make code 64-bit safe.
    
    Currently, the trace API passes the pointers that need to be
    patched up via 32 bit integers. Such code will not be 64 bit safe.
    This patch sends all pointers in a separate array of pointers
    for the fixup calls to read from.
    
    Change-Id: If975333f11a6f6f9a74fba57de328affaed452a5
    gltrace: attach buffer data sent with glBufferData
    
    Attach the buffer that is passed with glBufferData
    and glBufferSubData to the proto buf.
    
    Change-Id: I1b4c1172d405736b06cb0a356a6e241e1d60c4d5
    gltrace: Trace thread time and wall clock time.
    
    For each gl function, trace both the thread and wall clock
    times.
    
    Change-Id: I32b6caa67fa50bf915dab89b3c5021ee82e28d55
    gltrace: Patch up all glUniform*() calls.
    
    This patch updates the trace information for all glUniform*() calls
    to have the right data (the actual uniforms that are passed).
    
    In addition, as soon as a program is linked, information regarding
    all the active attributes and uniforms is passed on to the debugger.
    
    Change-Id: Icfbc6722789b42c413a845cf546577fa6de7da2b
    gltrace: fixup Push & Insert Marker calls
    
    Change-Id: I58ced7225fac79ec636a65da4883614a5dce6dff
    gltrace: fixup data for glTexSubImage2D & glDeleteBuffers
    
    Change-Id: I1c1deb8c6026ecf1fa0ed5287ccf601416eba6dc
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    gltrace: add user settings to control data captured.
    
    Currently users do not have control over the amount of data
    captured during tracing. This patch adds 3 settings that users
    can enable/disable at runtime:
      - capture framebuffer on eglSwap() calls
      - capture framebuffer on glDraw*() calls
      - capture texture data passed to glTexImage*() calls
    Disabling these options when not needed signficantly decreases
    the size of the trace file, and reduces performance overhead for
    the running application.
    
    These settings are stored in the per process GLTraceState.
    A separate thread listens for commands from the host, and updates
    the state based on the user commands.
    
    Change-Id: Ic4518b94e8bcbc5330ac7138153721caa98b365d
    gltrace: add start time & duration to each traced call.
    
    Change-Id: Idfec8f715f6000594b6381cbfdee9fdf6d89f484
    gltrace: transport buffering and context management
    
    This patch adds two improvements:
    1. Protobuf messages are buffered and sent in chunks.
    2. Multiple EGL contexts are handled properly: Corresponding
    to each EGLContext, a GLTraceContext with a unique ID is created.
    On eglMakeCurrent, the appropriate GLTraceContext is set and is
    used while tracing subsequent GL Calls in that thread.
    
    Change-Id: I34076376d3e5af205c87c7396ea47659844abd6e
    gltrace: attach contents of the appropriate framebuffer
    
    Currently, gltrace always attaches the contents of the currently
    bound framebuffer. This patch changes it to attach the contents
    of FB0 on eglSwap, and the currently bound framebuffer for the
    glDraw* calls.
    
    Change-Id: Ice0520d45d75638fe61cd91149df773074216510
    gltrace: Make framebuffer contents an optional message.
    
    Currently, the contents of the FrameBuffer are sent by encoding
    them as the last argument to the function call. As a result, it is
    not possible to know if a message has the framebuffer encoded in it
    without looking at the function type.
    
    This patch modifies the protobuf definition to include a separate
    optional framebuffer message.
    
    Change-Id: Ief3a6950052d927ca0743e729457435b48c25a92
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I3f45a7ef5367c70e54ce6b36a8c030ae11033434
    opengl: Update GLES headers and generate *.in from registry XML
    
    Import GLES headers from Khronos SVN r26322:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below for a list.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: I902517c23354e14f9c63b1584db286d682315bb5
    Revert "opengl: Generate *.in from registry XML"
    
    This reverts commit 4a73962c694bfe57eb2bea40ed6fb626be7006aa.
    
    Change-Id: I1fa5cbe4d0b86f6df69d616157b3fec68d706d7a
    Revert "opengl: Regenerate code with ES 3.1 and new extensions"
    
    This reverts commit 6cb7d3dc9f1ce37547646979e0625992264ea4d0.
    
    Change-Id: I2eb7fd721dda9c14a0bfcef1b1c9d9843bbec94b
    opengl: Generate *.in from registry XML
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: Ib3fa700a146adf7f1487a93e459b1e6df0dcdc42
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I35acb473cba2433b9aeb95d1b8bfbdcfadf22532
    Add ES3 support to libGLESv2 and tracing tools
    
    Since ES3 is backwards compatible with ES2, a new wrapper isn't
    necessary, and the Khronos implementation guidelines recommend
    supporting both versions with the same library.
    
    Change-Id: If9bb02be60ce01cc5fe25d1f40c4e7f37244ebf6
    gltrace: Send vertex attribute data after glDraw() call.
    
    This patch enables tracing of vertex attribute data that
    is specified using glVertexAttribPointer().
    
    At the time the glVertexAttribPointer() call is made, we
    only receive a pointer in client space, without any indication
    of the size (# of attributes). This size is known only at
    the time of the glDraw() call.
    
    This patch generates a new message glVertexAttribPointerData()
    when a draw call is issued that contains the vertex attribute
    data.
    
    A glDrawArrays() call directly gives the size of data to copy.
    A glDrawElements() call gives the indices to copy. In such a
    case, all data between the min & max indices drawn are copied
    and sent to the host. To support glDrawElements() with an
    element array buffer, this patch also adds state that maintains
    a copy of all element array buffers.
    
    Change-Id: I434da794a0aa9ada8e7474e219ffb1d79b183ecf
    gltrace: Trace thread time and wall clock time.
    
    For each gl function, trace both the thread and wall clock
    times.
    
    Change-Id: I32b6caa67fa50bf915dab89b3c5021ee82e28d55
    update GLES headers and add support for corresponding new extensions.
    
    Change-Id: I554d9659113b4721b748ee5c1a3b1ca82b11d75e
    gltrace: add start time & duration to each traced call.
    
    Change-Id: Idfec8f715f6000594b6381cbfdee9fdf6d89f484
    gltrace: Make framebuffer contents an optional message.
    
    Currently, the contents of the FrameBuffer are sent by encoding
    them as the last argument to the function call. As a result, it is
    not possible to know if a message has the framebuffer encoded in it
    without looking at the function type.
    
    This patch modifies the protobuf definition to include a separate
    optional framebuffer message.
    
    Change-Id: Ief3a6950052d927ca0743e729457435b48c25a92
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    Don't try to capture the pointer when using PBOs for texture APIs
    
    If a PBO is bound, then the pointer argument is a relative offset from
    the start of the PBO, not an absolute address.
    
    Fixes b/17063439
    
    Change-Id: I39629ce6c9bb3cb6bac5c9b0311287628306ddd4
    (cherry picked from commit 0ad707f2f3d714af7d983d68330ed51dace815f5)
    gltrace: Fixup vertex attrib pointers only for GLES2
    
    Change-Id: Ibf280c2a4372ce6e598e164eef0d72b7c0a6d1c2
    gltrace: Send vertex attribute data after glDraw() call.
    
    This patch enables tracing of vertex attribute data that
    is specified using glVertexAttribPointer().
    
    At the time the glVertexAttribPointer() call is made, we
    only receive a pointer in client space, without any indication
    of the size (# of attributes). This size is known only at
    the time of the glDraw() call.
    
    This patch generates a new message glVertexAttribPointerData()
    when a draw call is issued that contains the vertex attribute
    data.
    
    A glDrawArrays() call directly gives the size of data to copy.
    A glDrawElements() call gives the indices to copy. In such a
    case, all data between the min & max indices drawn are copied
    and sent to the host. To support glDrawElements() with an
    element array buffer, this patch also adds state that maintains
    a copy of all element array buffers.
    
    Change-Id: I434da794a0aa9ada8e7474e219ffb1d79b183ecf
    gltrace: add user settings to control data captured.
    
    Currently users do not have control over the amount of data
    captured during tracing. This patch adds 3 settings that users
    can enable/disable at runtime:
      - capture framebuffer on eglSwap() calls
      - capture framebuffer on glDraw*() calls
      - capture texture data passed to glTexImage*() calls
    Disabling these options when not needed signficantly decreases
    the size of the trace file, and reduces performance overhead for
    the running application.
    
    These settings are stored in the per process GLTraceState.
    A separate thread listens for commands from the host, and updates
    the state based on the user commands.
    
    Change-Id: Ic4518b94e8bcbc5330ac7138153721caa98b365d
    gltrace: transport buffering and context management
    
    This patch adds two improvements:
    1. Protobuf messages are buffered and sent in chunks.
    2. Multiple EGL contexts are handled properly: Corresponding
    to each EGLContext, a GLTraceContext with a unique ID is created.
    On eglMakeCurrent, the appropriate GLTraceContext is set and is
    used while tracing subsequent GL Calls in that thread.
    
    Change-Id: I34076376d3e5af205c87c7396ea47659844abd6e
    gltrace: attach contents of the appropriate framebuffer
    
    Currently, gltrace always attaches the contents of the currently
    bound framebuffer. This patch changes it to attach the contents
    of FB0 on eglSwap, and the currently bound framebuffer for the
    glDraw* calls.
    
    Change-Id: Ice0520d45d75638fe61cd91149df773074216510
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I3f45a7ef5367c70e54ce6b36a8c030ae11033434
    opengl: Update GLES headers and generate *.in from registry XML
    
    Import GLES headers from Khronos SVN r26322:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below for a list.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: I902517c23354e14f9c63b1584db286d682315bb5
    Revert "opengl: Generate *.in from registry XML"
    
    This reverts commit 4a73962c694bfe57eb2bea40ed6fb626be7006aa.
    
    Change-Id: I1fa5cbe4d0b86f6df69d616157b3fec68d706d7a
    Revert "opengl: Regenerate code with ES 3.1 and new extensions"
    
    This reverts commit 6cb7d3dc9f1ce37547646979e0625992264ea4d0.
    
    Change-Id: I2eb7fd721dda9c14a0bfcef1b1c9d9843bbec94b
    opengl: Generate *.in from registry XML
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: Ib3fa700a146adf7f1487a93e459b1e6df0dcdc42
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I35acb473cba2433b9aeb95d1b8bfbdcfadf22532
    Add ES3 support to libGLESv2 and tracing tools
    
    Since ES3 is backwards compatible with ES2, a new wrapper isn't
    necessary, and the Khronos implementation guidelines recommend
    supporting both versions with the same library.
    
    Change-Id: If9bb02be60ce01cc5fe25d1f40c4e7f37244ebf6
    gltrace: Send vertex attribute data after glDraw() call.
    
    This patch enables tracing of vertex attribute data that
    is specified using glVertexAttribPointer().
    
    At the time the glVertexAttribPointer() call is made, we
    only receive a pointer in client space, without any indication
    of the size (# of attributes). This size is known only at
    the time of the glDraw() call.
    
    This patch generates a new message glVertexAttribPointerData()
    when a draw call is issued that contains the vertex attribute
    data.
    
    A glDrawArrays() call directly gives the size of data to copy.
    A glDrawElements() call gives the indices to copy. In such a
    case, all data between the min & max indices drawn are copied
    and sent to the host. To support glDrawElements() with an
    element array buffer, this patch also adds state that maintains
    a copy of all element array buffers.
    
    Change-Id: I434da794a0aa9ada8e7474e219ffb1d79b183ecf
    gltrace: Trace thread time and wall clock time.
    
    For each gl function, trace both the thread and wall clock
    times.
    
    Change-Id: I32b6caa67fa50bf915dab89b3c5021ee82e28d55
    update GLES headers and add support for corresponding new extensions.
    
    Change-Id: I554d9659113b4721b748ee5c1a3b1ca82b11d75e
    gltrace: add start time & duration to each traced call.
    
    Change-Id: Idfec8f715f6000594b6381cbfdee9fdf6d89f484
    gltrace: Make framebuffer contents an optional message.
    
    Currently, the contents of the FrameBuffer are sent by encoding
    them as the last argument to the function call. As a result, it is
    not possible to know if a message has the framebuffer encoded in it
    without looking at the function type.
    
    This patch modifies the protobuf definition to include a separate
    optional framebuffer message.
    
    Change-Id: Ief3a6950052d927ca0743e729457435b48c25a92
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    Don't try to capture the pointer when using PBOs for texture APIs
    
    If a PBO is bound, then the pointer argument is a relative offset from
    the start of the PBO, not an absolute address.
    
    Fixes b/17063439
    
    Change-Id: I39629ce6c9bb3cb6bac5c9b0311287628306ddd4
    (cherry picked from commit 0ad707f2f3d714af7d983d68330ed51dace815f5)
    free EGL resources associated to a thread when it terminates
    
    destroyed but current-to-a-thread resources are only destroyed
    when they're made not-current; however, we were not destroying
    those when the thread itself terminated, causing these resources
    to be leaked forever.
    
    we now install a tls-key destructor that takes care of this
    by calling eglReleaseThread upon thread termination.
    
    Bug: 9209776
    Change-Id: I88298a34e3a27488eb81eab76717715569c7d57c
    gltrace: flush trace buffer on createContext & makeCurrent
    
    Certain apps (e.g. chrome) seem to create contexts which are unused
    for long periods of time. If tracing is stopped before those contexts
    are used, then the debugger never gets to know that these contexts
    were created. Flushing the trace after these calls ensures that
    the debugger knows about all created/used contexts.
    
    Change-Id: I01baa11aa56ac89eddce3c2851e4bf01076984d1
    gltrace: Fixup vertex attrib pointers only for GLES2
    
    Change-Id: Ibf280c2a4372ce6e598e164eef0d72b7c0a6d1c2
    gltrace: Send vertex attribute data after glDraw() call.
    
    This patch enables tracing of vertex attribute data that
    is specified using glVertexAttribPointer().
    
    At the time the glVertexAttribPointer() call is made, we
    only receive a pointer in client space, without any indication
    of the size (# of attributes). This size is known only at
    the time of the glDraw() call.
    
    This patch generates a new message glVertexAttribPointerData()
    when a draw call is issued that contains the vertex attribute
    data.
    
    A glDrawArrays() call directly gives the size of data to copy.
    A glDrawElements() call gives the indices to copy. In such a
    case, all data between the min & max indices drawn are copied
    and sent to the host. To support glDrawElements() with an
    element array buffer, this patch also adds state that maintains
    a copy of all element array buffers.
    
    Change-Id: I434da794a0aa9ada8e7474e219ffb1d79b183ecf
    gltrace: add user settings to control data captured.
    
    Currently users do not have control over the amount of data
    captured during tracing. This patch adds 3 settings that users
    can enable/disable at runtime:
      - capture framebuffer on eglSwap() calls
      - capture framebuffer on glDraw*() calls
      - capture texture data passed to glTexImage*() calls
    Disabling these options when not needed signficantly decreases
    the size of the trace file, and reduces performance overhead for
    the running application.
    
    These settings are stored in the per process GLTraceState.
    A separate thread listens for commands from the host, and updates
    the state based on the user commands.
    
    Change-Id: Ic4518b94e8bcbc5330ac7138153721caa98b365d
    gltrace: transport buffering and context management
    
    This patch adds two improvements:
    1. Protobuf messages are buffered and sent in chunks.
    2. Multiple EGL contexts are handled properly: Corresponding
    to each EGLContext, a GLTraceContext with a unique ID is created.
    On eglMakeCurrent, the appropriate GLTraceContext is set and is
    used while tracing subsequent GL Calls in that thread.
    
    Change-Id: I34076376d3e5af205c87c7396ea47659844abd6e
    gltrace: attach contents of the appropriate framebuffer
    
    Currently, gltrace always attaches the contents of the currently
    bound framebuffer. This patch changes it to attach the contents
    of FB0 on eglSwap, and the currently bound framebuffer for the
    glDraw* calls.
    
    Change-Id: Ice0520d45d75638fe61cd91149df773074216510
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    gltrace: Add support for tracing running applications.
    
    Currently, to activate OpenGL tracing, an application has to be
    start with --opengl-trace option (or have a debug prop set).
    
    This CL adds support for tracing an application which may already
    be running. This is implemented as follows:
        - DDMS initiates a JDWP message to the VM indicating that
          opengl traces be enabled.
        - When that message is received, a flag is set that indicates
          that tracing should be enabled.
        - The trace flag is checked during every eglSwap() operation,
          and if it finds that tracing should be active and it isn't,
          then it starts the tracing component.
    
    Change-Id: I3347fe89fc06c7404d7aa9360f4b21e5bf36ebcb
    gltrace: Allow receiving commands of length > 4
    
    Currently, gltrace offers very few trace collection options. As a
    result, these options are encoded in a single integer. The trace
    control task simply receives integers and interprets them as
    commands.
    
    This patch changes the control protocol to first receive the
    command length followed by the actual command itself. This allows
    for future flexibility to provide enable other commands.
    
    Change-Id: Id5f56c80a025bbbe7613ab4457e092732e7d9dc9
    gltrace: Use Unix Domain Socket rather than INET Socket
    
    Export trace information via abstract Unix Domain Socket (UDS).
    This allows tracing of applications without INTERNET permission,
    and should be faster as well.
    
    Change-Id: Iabb67fcc2bc2484afd8128af07dca723b81c52c6
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    gltrace: add user settings to control data captured.
    
    Currently users do not have control over the amount of data
    captured during tracing. This patch adds 3 settings that users
    can enable/disable at runtime:
      - capture framebuffer on eglSwap() calls
      - capture framebuffer on glDraw*() calls
      - capture texture data passed to glTexImage*() calls
    Disabling these options when not needed signficantly decreases
    the size of the trace file, and reduces performance overhead for
    the running application.
    
    These settings are stored in the per process GLTraceState.
    A separate thread listens for commands from the host, and updates
    the state based on the user commands.
    
    Change-Id: Ic4518b94e8bcbc5330ac7138153721caa98b365d
    gltrace: transport buffering and context management
    
    This patch adds two improvements:
    1. Protobuf messages are buffered and sent in chunks.
    2. Multiple EGL contexts are handled properly: Corresponding
    to each EGLContext, a GLTraceContext with a unique ID is created.
    On eglMakeCurrent, the appropriate GLTraceContext is set and is
    used while tracing subsequent GL Calls in that thread.
    
    Change-Id: I34076376d3e5af205c87c7396ea47659844abd6e
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    Remove frameworks/base/im since these stuff are only used by IM app
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    opengl: Update GLES headers and generate *.in from registry XML
    
    Import GLES headers from Khronos SVN r26322:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below for a list.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: I902517c23354e14f9c63b1584db286d682315bb5
    Revert "opengl: Generate *.in from registry XML"
    
    This reverts commit 4a73962c694bfe57eb2bea40ed6fb626be7006aa.
    
    Change-Id: I1fa5cbe4d0b86f6df69d616157b3fec68d706d7a
    opengl: Generate *.in from registry XML
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: Ib3fa700a146adf7f1487a93e459b1e6df0dcdc42
    Don't wrap EGLImageKHR and EGLSyncKHR anymore
    
    this simplify our EGL wrapper implementation a lot.
    This wrapping is no longer needed now that we can only
    support a single underlaying EGL implementation.
    
    Change-Id: I8213df7ac69daac447f1fe6e37044b78aac4e9a9
    update GLES headers and add support for corresponding new extensions.
    
    Change-Id: I554d9659113b4721b748ee5c1a3b1ca82b11d75e
    update GL ES stub libraries with the new GL ES headers
    
    Change-Id: I83be94049ddfe3fd7f5bee71a21172ade1498dd5
    donut snapshot
    use gl.h to generate the *.in files. we are now supporting the full gl.h and glext.h apis.
    Add aarch64 EGL/GLES trampolines
    
    Change-Id: Ia90e18d26ff3bdb7e643aff8d77cbaddd2ac2a03
    EGL: add x86/64 assembly code for EGL/GLES wrappers
    
    There was no explicit support for x86/64 architecture in EGL/GLES wrappers.
    This resulted either in failures or sub-optimal implementation of the wrapper functions.
    
    Change-Id: I20d99d7372fbf642ee4b94a05c8cb971cba29988
    Signed-off-by: Wajdeczko, Michal <michal.wajdeczko@intel.com>
    Disable warnings when generating GL wrappers
    
    Bug: 15028495
    Change-Id: Ic0c974e868d05632a06748c90cedbdd409ce2aa8
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    improve GLES jumptables
    
    in the common case this saves one instructions per jump
    (which will help with the i-cache).
    
    this change also gets rid of the "use slow tls" option,
    which was useless. So at least now architectures that don't have
    assembly bindings will perform much better.
    
    Change-Id: I31be6c06ad2136b50ef3a1ac14682d7812ad40d2
    fix local include paths
    
    Change-Id: Icb921fa796ec08612dbb2feb7e7161bcb0cf4a99
    Fix MIPS assembly variable names to not conflict with GL API parameter names
    
    Change-Id: I8e93fb55018de53a596cb176d48dbfdf1fd396e4
    [MIPS] Add MIPS architecture support to opengl framework
    
    Change-Id: Id7704d35bed14d96a85dc1f29db0566cd03872b5
    Simplify OpenGL TLS access on ARM.
    
    bionic now assumes the TLS register is available, so OpenGL can too.
    
    Change-Id: If2b56a4c08de9f887759b78f70022026a181dc47
    Don't wrap EGLImageKHR and EGLSyncKHR anymore
    
    this simplify our EGL wrapper implementation a lot.
    This wrapping is no longer needed now that we can only
    support a single underlaying EGL implementation.
    
    Change-Id: I8213df7ac69daac447f1fe6e37044b78aac4e9a9
    add support for GL_EXT_debug_marker
    
    This extension is always added to the GL_EXTENSIONS
    extension string for the current GL context, regardless
    of if it's supported by the h/w driver.
    
    The extension itself will be handled by GLES_trace (eventually),
    when GLES_trace is not enabled, it'll result to a no-op.
    
    If the h/w implementation has this extension, we'll call that version
    instead of our dummy version.
    
    Change-Id: Ie5dd3387c4d45cd5ed5f03b73bda6045620a96bc
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    better fix for [3028370] GL get error should return a valid error if no context is bound.
    
    it turns out that we cannot return INVALID_OPERATION from glGetError() because the
    GL spec says that it must be called in a loop until it returns GL_NO_ERROR.
    
    now, we always return 0 from GL functions called from a thread with no
    context bound. This means that glGetError() will return NO_ERROR in this case,
    which is better than returning a random value (which could trap the app in a loop).
    
    if this happens in the main thread of a process, we LOG an error message once.
    
    Change-Id: Id59620e675a890286ef62a257c02b06e0fdcaf69
    Fix Android's glEGLImageTargetRenderbufferOES() wrapper
    
    glEGLImageTargetRenderbufferOES() pass the wrapped EGLImage
    to the implementation, rather than the unwrapped one.
    
    Change-Id: I149f9ed73e6ab9089110600e1db4311ba7a8c83a
    Implement Matrix Palette extension.
    
    Adds support for formerly-unimplemented methods:
    
    glCurrentPaletteMatrixOES
    glLoadPaletteFromModelViewMatrixOES
    glMatrixIndexPointerOES
    glWeightPointerOES
    
    The bulk of the changes are related to implementing the two PointerOES
    methods, which are implemented pretty much the same way as the existing
    Pointer methods were implemented.
    
    This change also changes the way glPointSizePointerOES is implemented,
    making it act like all the other Pointer methods. (Previously it was
    not handling non-direct-buffer arguments correctly.)
    
    Fixes bug 2308625 "Support matrix palette skinning
    in JSR239 and related APIs"
    
    Also updated GLLogWraper to fix two bugs in GLLogWrapper that were
    discovered while testing matrix palette skinning support:
    
    a) Handle trying to print the contents of null-but-enabled buffers.
    (It's not legal to draw with null-but-enabled buffers, and
    in fact some OpenGL drivers will crash if you try to render in this
    state, but there's no reason the GLLogWrapper should crash while trying
    to debug this situation.
    
    b) Don't read off the end of a vertex buffer with non-zero position when
    printing the entire contents of the vertex buffer. Now we only print from
    the current position to the end of the buffer.
    Implement Matrix Palette extension.
    
    Adds support for formerly-unimplemented methods:
    
    glCurrentPaletteMatrixOES
    glLoadPaletteFromModelViewMatrixOES
    glMatrixIndexPointerOES
    glWeightPointerOES
    
    The bulk of the changes are related to implementing the two PointerOES
    methods, which are implemented pretty much the same way as the existing
    Pointer methods were implemented.
    
    This change also changes the way glPointSizePointerOES is implemented,
    making it act like all the other Pointer methods. (Previously it was
    not handling non-direct-buffer arguments correctly.)
    
    Fixes bug 2308625 "Support matrix palette skinning
    in JSR239 and related APIs"
    
    Also updated GLLogWraper to fix two bugs in GLLogWrapper that were
    discovered while testing matrix palette skinning support:
    
    a) Handle trying to print the contents of null-but-enabled buffers.
    (It's not legal to draw with null-but-enabled buffers, and
    in fact some OpenGL drivers will crash if you try to render in this
    state, but there's no reason the GLLogWrapper should crash while trying
    to debug this situation.
    
    b) Don't read off the end of a vertex buffer with non-zero position when
    printing the entire contents of the vertex buffer. Now we only print from
    the current position to the end of the buffer.
    eclair snapshot
    Use the TLS register if HAVE_ARM_TLS_REGISTER is defined
    
    this will be needed for SMP, but would improve dispatching GL calls a bit
    on armv6 and above.
    add a way to easily catch and log GL errors (compile time flag)
    donut snapshot
    remove the gl{Vertex|Color|TexCoord|Normal}PointerBounds() "extension" fro eglext.h
    use gl.h to generate the *.in files. we are now supporting the full gl.h and glext.h apis.
    integrate some OpenGL ES changes back from master_gl in preparation of opening GLES to the NDK.
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    opengl: Update GLES headers and generate *.in from registry XML
    
    Import GLES headers from Khronos SVN r26322:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below for a list.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: I902517c23354e14f9c63b1584db286d682315bb5
    Revert "opengl: Generate *.in from registry XML"
    
    This reverts commit 4a73962c694bfe57eb2bea40ed6fb626be7006aa.
    
    Change-Id: I1fa5cbe4d0b86f6df69d616157b3fec68d706d7a
    opengl: Generate *.in from registry XML
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: Ib3fa700a146adf7f1487a93e459b1e6df0dcdc42
    add support for GL_EXT_debug_marker
    
    This extension is always added to the GL_EXTENSIONS
    extension string for the current GL context, regardless
    of if it's supported by the h/w driver.
    
    The extension itself will be handled by GLES_trace (eventually),
    when GLES_trace is not enabled, it'll result to a no-op.
    
    If the h/w implementation has this extension, we'll call that version
    instead of our dummy version.
    
    Change-Id: Ie5dd3387c4d45cd5ed5f03b73bda6045620a96bc
    update GL ES stub libraries with the new GL ES headers
    
    Change-Id: I83be94049ddfe3fd7f5bee71a21172ade1498dd5
    donut snapshot
    use gl.h to generate the *.in files. we are now supporting the full gl.h and glext.h apis.
    integrate some OpenGL ES changes back from master_gl in preparation of opening GLES to the NDK.
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Initial Contribution
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I3f45a7ef5367c70e54ce6b36a8c030ae11033434
    opengl: Update GLES headers and generate *.in from registry XML
    
    Import GLES headers from Khronos SVN r26322:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below for a list.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: I902517c23354e14f9c63b1584db286d682315bb5
    Revert "opengl: Generate *.in from registry XML"
    
    This reverts commit 4a73962c694bfe57eb2bea40ed6fb626be7006aa.
    
    Change-Id: I1fa5cbe4d0b86f6df69d616157b3fec68d706d7a
    Revert "opengl: Regenerate code with ES 3.1 and new extensions"
    
    This reverts commit 6cb7d3dc9f1ce37547646979e0625992264ea4d0.
    
    Change-Id: I2eb7fd721dda9c14a0bfcef1b1c9d9843bbec94b
    opengl: Generate *.in from registry XML
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: Ib3fa700a146adf7f1487a93e459b1e6df0dcdc42
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I35acb473cba2433b9aeb95d1b8bfbdcfadf22532
    Don't wrap EGLImageKHR and EGLSyncKHR anymore
    
    this simplify our EGL wrapper implementation a lot.
    This wrapping is no longer needed now that we can only
    support a single underlaying EGL implementation.
    
    Change-Id: I8213df7ac69daac447f1fe6e37044b78aac4e9a9
    update GLES headers and add support for corresponding new extensions.
    
    Change-Id: I554d9659113b4721b748ee5c1a3b1ca82b11d75e
    update GL ES stub libraries with the new GL ES headers
    
    Change-Id: I83be94049ddfe3fd7f5bee71a21172ade1498dd5
    eclair snapshot
    Added most of the support needed for GLES 2.x
    Add aarch64 EGL/GLES trampolines
    
    Change-Id: Ia90e18d26ff3bdb7e643aff8d77cbaddd2ac2a03
    EGL: add x86/64 assembly code for EGL/GLES wrappers
    
    There was no explicit support for x86/64 architecture in EGL/GLES wrappers.
    This resulted either in failures or sub-optimal implementation of the wrapper functions.
    
    Change-Id: I20d99d7372fbf642ee4b94a05c8cb971cba29988
    Signed-off-by: Wajdeczko, Michal <michal.wajdeczko@intel.com>
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I3f45a7ef5367c70e54ce6b36a8c030ae11033434
    Revert "opengl: Regenerate code with ES 3.1 and new extensions"
    
    This reverts commit 6cb7d3dc9f1ce37547646979e0625992264ea4d0.
    
    Change-Id: I2eb7fd721dda9c14a0bfcef1b1c9d9843bbec94b
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I35acb473cba2433b9aeb95d1b8bfbdcfadf22532
    Disable warnings when generating GL wrappers
    
    Bug: 15028495
    Change-Id: Ic0c974e868d05632a06748c90cedbdd409ce2aa8
    Rationalize GLES2/3 .in files.
    
    We weren't using gl2_api.in, since gl3_api.in was a superset. And
    gl3ext_api.in was empty, and Khronos has decided to keep it that way
    (any GLES2/3/... extensions will be in gl2ext.h).
    
    Since libGLES2.so will have all future backwards-compatible GLES APIs,
    it makes sense to just use gl2_api.in and gl2ext_api.in to build its
    contents. This changes renames gl3_api.in to gl2_api.in and updates
    uses of it, and removes gl3ext_api.in and references.
    
    Bug: 15028495
    Change-Id: I0745eda27ec91ee625f03e957e4fdb22035dd781
    improve GLES jumptables
    
    in the common case this saves one instructions per jump
    (which will help with the i-cache).
    
    this change also gets rid of the "use slow tls" option,
    which was useless. So at least now architectures that don't have
    assembly bindings will perform much better.
    
    Change-Id: I31be6c06ad2136b50ef3a1ac14682d7812ad40d2
    fix local include paths
    
    Change-Id: Icb921fa796ec08612dbb2feb7e7161bcb0cf4a99
    Fix MIPS assembly variable names to not conflict with GL API parameter names
    
    Change-Id: I8e93fb55018de53a596cb176d48dbfdf1fd396e4
    [MIPS] Add MIPS architecture support to opengl framework
    
    Change-Id: Id7704d35bed14d96a85dc1f29db0566cd03872b5
    Simplify OpenGL TLS access on ARM.
    
    bionic now assumes the TLS register is available, so OpenGL can too.
    
    Change-Id: If2b56a4c08de9f887759b78f70022026a181dc47
    Add ES3 support to libGLESv2 and tracing tools
    
    Since ES3 is backwards compatible with ES2, a new wrapper isn't
    necessary, and the Khronos implementation guidelines recommend
    supporting both versions with the same library.
    
    Change-Id: If9bb02be60ce01cc5fe25d1f40c4e7f37244ebf6
    Add runtime debugging capabilities to OpenGL
    
    The shell property debug.egl.trace can now be set to:
    
    0
      disables tracing
    1
      logs all GL calls
    error
      checks glGetError after every GL call, logs a stack trace on error
    systrace
      logs each GL call to systrace
    
    Change-Id: I34a2a2d4e19c373fd9eaa1b0cd93e67c87378996
    Revert "Add GL Error logs (temporary)"
    
    This reverts commit 2da2c15068327a4fdad411f638905abcb2209d8a.
    Add GL Error logs (temporary)
    
    Adding logs to tell which specific methods throw OpenGL errors.
    
    Change-Id: I1d73c7566ed1ea6610392020411762c6255a0ede
    Re-enable FAST_TLS in gl2 code
    
    Temporarily changed USE_FAST_TLS_KEY ifdef during debugging. Changing it
    back now.
    
    Change-Id: I7c2fcf7265b3d545e31ff7683bd7614100fad3e5
    New compile-time flags to make debugging easier for us poor souls
    Bug #7195815
    
    Change-Id: I23e7ac991891b9586cb8ed20b1305c8b1b3e2b43
    Add compile-time option to systrace GL-ES calls
    
    Change-Id: Ibec103bbf159626ad9745d0e071192ad424bc0e9
    Don't wrap EGLImageKHR and EGLSyncKHR anymore
    
    this simplify our EGL wrapper implementation a lot.
    This wrapping is no longer needed now that we can only
    support a single underlaying EGL implementation.
    
    Change-Id: I8213df7ac69daac447f1fe6e37044b78aac4e9a9
    add support for GL_EXT_debug_marker
    
    This extension is always added to the GL_EXTENSIONS
    extension string for the current GL context, regardless
    of if it's supported by the h/w driver.
    
    The extension itself will be handled by GLES_trace (eventually),
    when GLES_trace is not enabled, it'll result to a no-op.
    
    If the h/w implementation has this extension, we'll call that version
    instead of our dummy version.
    
    Change-Id: Ie5dd3387c4d45cd5ed5f03b73bda6045620a96bc
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    better fix for [3028370] GL get error should return a valid error if no context is bound.
    
    it turns out that we cannot return INVALID_OPERATION from glGetError() because the
    GL spec says that it must be called in a loop until it returns GL_NO_ERROR.
    
    now, we always return 0 from GL functions called from a thread with no
    context bound. This means that glGetError() will return NO_ERROR in this case,
    which is better than returning a random value (which could trap the app in a loop).
    
    if this happens in the main thread of a process, we LOG an error message once.
    
    Change-Id: Id59620e675a890286ef62a257c02b06e0fdcaf69
    Fix tons of bugs and add new text rendering support.
    
    Change-Id: I326c66b10784006f6df2f12d38e120cef94cd0d7
    Fix Android's glEGLImageTargetRenderbufferOES() wrapper
    
    glEGLImageTargetRenderbufferOES() pass the wrapped EGLImage
    to the implementation, rather than the unwrapped one.
    
    Change-Id: I149f9ed73e6ab9089110600e1db4311ba7a8c83a
    eclair snapshot
    Use the TLS register if HAVE_ARM_TLS_REGISTER is defined
    
    this will be needed for SMP, but would improve dispatching GL calls a bit
    on armv6 and above.
    add a way to easily catch and log GL errors (compile time flag)
    donut snapshot
    remove the gl{Vertex|Color|TexCoord|Normal}PointerBounds() "extension" fro eglext.h
    use gl.h to generate the *.in files. we are now supporting the full gl.h and glext.h apis.
    integrate some OpenGL ES changes back from master_gl in preparation of opening GLES to the NDK.
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I3f45a7ef5367c70e54ce6b36a8c030ae11033434
    opengl: Update GLES headers and generate *.in from registry XML
    
    Import GLES headers from Khronos SVN r26322:
    https://cvs.khronos.org/svn/repos/registry/trunk/public/gles/api
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below for a list.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: I902517c23354e14f9c63b1584db286d682315bb5
    Revert "opengl: Generate *.in from registry XML"
    
    This reverts commit 4a73962c694bfe57eb2bea40ed6fb626be7006aa.
    
    Change-Id: I1fa5cbe4d0b86f6df69d616157b3fec68d706d7a
    Revert "opengl: Regenerate code with ES 3.1 and new extensions"
    
    This reverts commit 6cb7d3dc9f1ce37547646979e0625992264ea4d0.
    
    Change-Id: I2eb7fd721dda9c14a0bfcef1b1c9d9843bbec94b
    opengl: Generate *.in from registry XML
    
    There are many non-functional whitespace and parameter name changes
    included here. These were introduced upstream when converting from the
    old .spec registry to the new XML registry.
    
    There are also some new extensions added. Unfortunately there isn't a
    version of the XML that matches the headers the previous versions of
    the *.in files were generated from, so I can't separate out the
    non-functional changes from the new extensions (other than temporarily
    hacking them out of the XML). See below.
    
    Finally, I had to hack the official glext.h. Khronos hasn't updated
    the official GLES1 headers since switching to the XML registry, and
    there is one critical difference: a "const void**" parameter in the
    official header is "const void* const*" in the registry. I changed the
    header to avoid build errors with code generated from the registry.
    
    Dependencies on the *.in files required manually updating some
    GLES_trace/ files as well:
    
    - gltrace_api.{h,cpp} must be manually re-generated using
      tools/genapi.py.
    - New GL prototypes must be manually added to gltrace.proto.
    - gltrace.pb.{h,cpp} must be regenerated using aprotoc (see dev.make)
    
    New GLES extensions in libs/GLES_CM/glext_api.in:
    - GL_OES_byte_coordinates
    - GL_EXT_map_buffer_range
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    
    New GLES2 extensions in libs/GLES2/gl2ext_api.in:
    - GL_KHR_blend_equation_advanced
    - GL_KHR_debug
    - GL_OES_sample_shading
    - GL_OES_texture_storage_multisample_2d_array
    - GL_EXT_disjoint_timer_query
    - GL_EXT_draw_buffers
    - GL_EXT_draw_instanced
    - GL_EXT_instanced_arrays
    - GL_EXT_map_buffer_range
    - GL_EXT_map_buffer_range
    - GL_EXT_multiview_draw_buffers
    - GL_EXT_separate_shader_objects
    - GL_ANGLE_instanced_arrays
    - GL_ANGLE_translated_shader_source
    - GL_APPLE_copy_texture_levels
    - GL_APPLE_sync
    - GL_INTEL_performance_query
    - GL_NV_blend_equation_advanced
    - GL_NV_copy_buffer
    - GL_NV_draw_instanced
    - GL_NV_framebuffer_blit
    - GL_NV_framebuffer_multisample
    - GL_NV_instanced_arrays
    - GL_NV_non_square_matrices
    
    Bug: 15028495
    Change-Id: Ib3fa700a146adf7f1487a93e459b1e6df0dcdc42
    opengl: Regenerate code with ES 3.1 and new extensions
    
    Enable ES 3.1 generation in glgen.py, and regenerate everything to add
    support for that as well as these new extensions in the registry:
    - EXT_copy_image
    - EXT_draw_buffers_indexed
    - EXT_geometry_shader
    - EXT_gpu_shader5
    - EXT_primitive_bounding_box
    - EXT_shader_implicit_conversions
    - EXT_shader_io_blocks
    - EXT_tessellation_shader
    - EXT_texture_border_clamp
    - EXT_texture_buffer
    - EXT_texture_cube_map_array
    - EXT_texture_view
    
    Bug: 15028495
    Change-Id: I35acb473cba2433b9aeb95d1b8bfbdcfadf22532
    Rationalize GLES2/3 .in files.
    
    We weren't using gl2_api.in, since gl3_api.in was a superset. And
    gl3ext_api.in was empty, and Khronos has decided to keep it that way
    (any GLES2/3/... extensions will be in gl2ext.h).
    
    Since libGLES2.so will have all future backwards-compatible GLES APIs,
    it makes sense to just use gl2_api.in and gl2ext_api.in to build its
    contents. This changes renames gl3_api.in to gl2_api.in and updates
    uses of it, and removes gl3ext_api.in and references.
    
    Bug: 15028495
    Change-Id: I0745eda27ec91ee625f03e957e4fdb22035dd781
    Import constness fix from gl3.h into gl2.h.
    
    This change has been made in Khronos SVN for GLES2 already, however it
    is mildly controversial and discussion is on-going.
    
    This change is necessary for Android because otherwise applications
    cannot include both GLES2/gl2.h and GLES3/gl3.h as the glShaderSource()
    prototype mismatches. Native programs may include framework headers
    (which now include GLES3 headers only) but already have included GLES2
    headers, creating an incompatibility.
    
    Change-Id: I70a4075e079ee063e76cef5a227abb0ae70aebb4
    Fix return type of glGetAttribLocation and glGetUniformLocation
    
    from int to GLint.
    
    See:
       http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetAttribLocation.xml
       http://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetUniformLocation.xml
    
    Change-Id: I4a9f8e9e34b8c3cca239ae84bfe8f3cdfd94802a
    add support for GL_EXT_debug_marker
    
    This extension is always added to the GL_EXTENSIONS
    extension string for the current GL context, regardless
    of if it's supported by the h/w driver.
    
    The extension itself will be handled by GLES_trace (eventually),
    when GLES_trace is not enabled, it'll result to a no-op.
    
    If the h/w implementation has this extension, we'll call that version
    instead of our dummy version.
    
    Change-Id: Ie5dd3387c4d45cd5ed5f03b73bda6045620a96bc
    update GL ES stub libraries with the new GL ES headers
    
    Change-Id: I83be94049ddfe3fd7f5bee71a21172ade1498dd5
    eclair snapshot
    Added most of the support needed for GLES 2.x
    OpenGL tracing.
    
    Enable with:
    
    adb shell setprop debug.egl.trace 1
    
    Change-Id: Icfbc795f5260141510975228e72234e9aab56a85
    eclair snapshot
    Added most of the support needed for GLES 2.x
    donut snapshot
    use gl.h to generate the *.in files. we are now supporting the full gl.h and glext.h apis.
    integrate some OpenGL ES changes back from master_gl in preparation of opening GLES to the NDK.
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    Rationalize GLES2/3 .in files.
    
    We weren't using gl2_api.in, since gl3_api.in was a superset. And
    gl3ext_api.in was empty, and Khronos has decided to keep it that way
    (any GLES2/3/... extensions will be in gl2ext.h).
    
    Since libGLES2.so will have all future backwards-compatible GLES APIs,
    it makes sense to just use gl2_api.in and gl2ext_api.in to build its
    contents. This changes renames gl3_api.in to gl2_api.in and updates
    uses of it, and removes gl3ext_api.in and references.
    
    Bug: 15028495
    Change-Id: I0745eda27ec91ee625f03e957e4fdb22035dd781
    Add ES3 support to libGLESv2 and tracing tools
    
    Since ES3 is backwards compatible with ES2, a new wrapper isn't
    necessary, and the Khronos implementation guidelines recommend
    supporting both versions with the same library.
    
    Change-Id: If9bb02be60ce01cc5fe25d1f40c4e7f37244ebf6
    Force a specific locale for sorting
    
    Avoids irrelevant output differences based on the user's locale. The
    current output files were generated with a C or POSIX locale, and sort
    differently under en_US.UTF-8.
    
    Change-Id: I0dd85475e9ee2d58e7fa9fe2a4f86ad5c8142e00
    OpenGL tracing.
    
    Enable with:
    
    adb shell setprop debug.egl.trace 1
    
    Change-Id: Icfbc795f5260141510975228e72234e9aab56a85
    eclair snapshot
    fix [2187212] add support for GLESv2 dispatch based on TLS
    
    Instead of using a different function pointer table for ES 1.x and ES 2.x,
    we use a single one that is the union (sort|uniq) of both tables. Two
    instances of this table are initialized with pointers to GL ES 1.x and GL ES 2.x
    entry-points.
    When a context is created, we store its version number and when it is bound to a
    thread we set the approruiate table based on the stored version.
    
    This introduce no penalty while dispatching gl calls to the right API version.
    
    [Pending Dr No approval for MR1]
    Added most of the support needed for GLES 2.x
    donut snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    eclair snapshot
    Added most of the support needed for GLES 2.x
    donut snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Don't wrap EGLImageKHR and EGLSyncKHR anymore
    
    this simplify our EGL wrapper implementation a lot.
    This wrapping is no longer needed now that we can only
    support a single underlaying EGL implementation.
    
    Change-Id: I8213df7ac69daac447f1fe6e37044b78aac4e9a9
    add support for GL_EXT_debug_marker
    
    This extension is always added to the GL_EXTENSIONS
    extension string for the current GL context, regardless
    of if it's supported by the h/w driver.
    
    The extension itself will be handled by GLES_trace (eventually),
    when GLES_trace is not enabled, it'll result to a no-op.
    
    If the h/w implementation has this extension, we'll call that version
    instead of our dummy version.
    
    Change-Id: Ie5dd3387c4d45cd5ed5f03b73bda6045620a96bc
    eclair snapshot
    Added most of the support needed for GLES 2.x
    donut snapshot
    use gl.h to generate the *.in files. we are now supporting the full gl.h and glext.h apis.
    integrate some OpenGL ES changes back from master_gl in preparation of opening GLES to the NDK.
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    OpenGL tracing.
    
    Enable with:
    
    adb shell setprop debug.egl.trace 1
    
    Change-Id: Icfbc795f5260141510975228e72234e9aab56a85
    eclair snapshot
    Added most of the support needed for GLES 2.x
    donut snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix convert8To4, convert8To5
    
    See b/5680952 "Compilation warnings in etc1.cpp" for discussion.
    
    Fixes b/5680952
    
    Change-Id: I0af6ba5ed5e60f3ed7a6a28eba3b09504fee1a3f
    DO NOT MERGE A library for encoding and decoding ETC1 textures.
    
    The ETC1 compressed texture format is commonly
    supported by OpenGL ES 2.0-capable devices.
    
    This change adds a host-only version of the library. It is used by
    the etc1tool.
    A library for encoding and decoding ETC1 textures.
    
    The ETC1 compressed texture format is commonly
    supported by OpenGL ES 2.0-capable devices.
    replace eglWaitSyncANDROID by eglWaitSyncKHR
    
    Change-Id: I22f1b3588011c88389e249f738f1e6915cc97e72
    cleanup EGL extensions strings and entry-points
    
    - move all the code related to EGL extensions in one place
    
    - add missing extension strings:
       EGL_KHR_lock_surface
       EGL_KHR_reusable_sync
    
    - add public extensions strings and entry-points
       EGL_ANDROID_wait_sync
       EGL_ANDROID_presentation_time
    
    - add missing entry-points for EGL_KHR_reusable_sync
    
    Change-Id: Ifd98966b549e8efd8ef5385eba0efde8c4cbc77b
    EGL: Add the EGL_ANDROID_wait_sync extension
    
    Change-Id: Ie9a78e07fcaf27c5c13797141ad3c692217607fb
    EGL: add the native_fence_sync extension
    
    This change adds support for the EGL_ANDROID_native_fence_sync extension to the
    Android EGL layer.  It also fixes a couple minor issues with the extension spec.
    
    Change-Id: Ic8829d21f37b701f33aa9c72c3d25e88e03fa3cd
    Hibernate the EGL implementation when idle
    
    If the EGL implementation supports the EGL_IMG_hibernate_process
    extension, use it to hibernate (and hopefully release memory or other
    resources) when the process isn't actively using EGL or OpenGL ES. The
    idleness heuristic used in this change is:
    
    (a) Wake up when entering any EGL API call, and remain awake for the
        duration of the call.
    (b) Do not hibernate when any window surface exists; this means the
        application is very likely in the foreground.
    (c) Do not hibernate while any context is made current to a thread.
        The app may be using a client API without the EGL layer knowing,
        so it is not safe to hibernate.
    (d) Only check these conditions and attempt to hibernate after a
        window surface is destroyed or a thread's context is detached. By
        not attempting to hibernate at the end of every EGL call, we avoid
        some transient wakeups/hibernate cycles when the app is mostly idle,
        or is starting to become active but hasn't created its window
        surface yet.
    
    On a Galaxy Nexus, hibernating frees 1567 VM pages from the process.
    Both hibernating and waking can take anywhere from 30ms to over 100ms
    -- measurements have been very inconsistent.
    
    Change-Id: Ib555f5d9d069aefccca06e8173a89625b5f32d7e
    Add (support for) EGL_NV_system_time extension.
    
    Change-Id: I62bf0fcb5ccdc77c042b425a42054fb3122575b6
    Signed-off-by: Mathias Agopian <mathias@google.com>
    Add support for KHR_fence_sync
    
    Change-Id: Ie2771b5869c9c8dcf5ecf9318e2ee6d4d1cd5cc9
    eclair snapshot
    Added most of the support needed for GLES 2.x
    donut snapshot
    created an new EGL extension called ANDROID_swap_rectangle
    
    ANDROID_swap_rectangle allows to specify the rectangle affected by eglSwapBuffers(), anything outside of this rectangle is unchanged. in particular EGL_BUFFER_DESTROYED only applies to that rectangle. This extension as well as EGL_BUFFER_PRESERVED allow major optimizations on surfaceflinger, which can redraw only the dirty area during compositing.
    
    However, ANDROID_swap_rectangle allows further optimizations in EGL by reducing the amount of copy-back needed. ANDROID_swap_rectangle is particularily important for software implementations.
    integrate some OpenGL ES changes back from master_gl in preparation of opening GLES to the NDK.
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Initial Contribution
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    remove adreno 130 workaround support
    
    Change-Id: I8ea5ee65d405114b30cfaa44e1a0c971d1ef2a61
    Add support for EGL_KHR_gl_colorspace
    
    Change-Id: I684d0b8556cd6c84ee4b4d67e1bb95c3b96fccfb
    Add EGL_KHR_get_all_proc_addresses to extension string
    
    We've had the extended behavior since Android 4.3, but the extension
    hadn't been ratified by Khronos yet so we couldn't add it to the
    extension string.
    
    Bug: 9681677
    Change-Id: I78842316a3ab7a3f66a0ac1a4742d837de664c4c
    fix local include paths
    
    Change-Id: Icb921fa796ec08612dbb2feb7e7161bcb0cf4a99
    cleanup EGL extensions strings and entry-points
    
    - move all the code related to EGL extensions in one place
    
    - add missing extension strings:
       EGL_KHR_lock_surface
       EGL_KHR_reusable_sync
    
    - add public extensions strings and entry-points
       EGL_ANDROID_wait_sync
       EGL_ANDROID_presentation_time
    
    - add missing entry-points for EGL_KHR_reusable_sync
    
    Change-Id: Ifd98966b549e8efd8ef5385eba0efde8c4cbc77b
    EGL: add the EGL_ANDROID_framebuffer_target enum
    
    Change-Id: Id8b1b114e2a7a88956b857c63a0429e9b33fdb5c
    EGL: expose the EXT_create_context_robustness ext
    
    Change-Id: I1db43e96aa5e9e91a6176a4a3e5aa9d1f3ee4a7e
    EGL: fix an extension string bug
    
    This change fixes a bug where initializing EGL multiple times (eglTerminate
    followed by eglInitialize) would cause extensions to show up in the extension
    string multiple times.
    
    Change-Id: I707a3da62ed30ef13835087167f84a08bc6addd7
    EGL: add the native_fence_sync extension
    
    This change adds support for the EGL_ANDROID_native_fence_sync extension to the
    Android EGL layer.  It also fixes a couple minor issues with the extension spec.
    
    Change-Id: Ic8829d21f37b701f33aa9c72c3d25e88e03fa3cd
    don't error out when eglTerminate()ing an already terminated display
    
    so says the EGL specification, section 3.2
    
    Change-Id: Ice60530f8f6e47b4e14e06d2ab8eba799a7688a6
    fix EGL_CLIENT_STRING
    
    it should read OpenGL_ES (with an underscore)
    
    Bug: 6529643
    
    Change-Id: I7caf07793bffe5a8dcceaff496a222077486fc87
    Disable EGL hibernation due to jank
    
    Hibernating EGL takes a long time (>100 ms) and blocks all other
    rendering. During window animations, the outgoing activity begins
    hibernation before the animation stops, causing visible stutter.
    Hibernation is still available by setting 'BOARD_ALLOW_EGL_HIBERNATION
    := true' in the devices BoardConfig.mk
    
    Change-Id: Iab4e00723a1adcd97481e81b2efdc821b3e9712f
    Fix deadlock when cleaning objects in eglTerminate
    
    When eglTerminate() is called with a window surface still exists, a
    deadlock would occur since egl_display_t::terminate() holds a lock
    while destroying the window surface, which calls
    onWindowSurfaceDestroyed() which attempts to take the same lock.
    
    This change refactors the hibernation code and data into a separate
    object with its own lock, separate from the egl_display_t lock. This
    avoids the deadlock and better encapsulates the hibernation logic.
    
    The change also fixes a bug discovered incidentally while debugging:
    hibernating after calling eglTerminate() succeeds, but will cause
    awakens from subsequent eglInitialize() to fail. We will no longer
    hibernate a terminated display.
    
    Change-Id: If55e5bb603d4f8953babc439ffc8d8a60af103d9
    Hibernate the EGL implementation when idle
    
    If the EGL implementation supports the EGL_IMG_hibernate_process
    extension, use it to hibernate (and hopefully release memory or other
    resources) when the process isn't actively using EGL or OpenGL ES. The
    idleness heuristic used in this change is:
    
    (a) Wake up when entering any EGL API call, and remain awake for the
        duration of the call.
    (b) Do not hibernate when any window surface exists; this means the
        application is very likely in the foreground.
    (c) Do not hibernate while any context is made current to a thread.
        The app may be using a client API without the EGL layer knowing,
        so it is not safe to hibernate.
    (d) Only check these conditions and attempt to hibernate after a
        window surface is destroyed or a thread's context is detached. By
        not attempting to hibernate at the end of every EGL call, we avoid
        some transient wakeups/hibernate cycles when the app is mostly idle,
        or is starting to become active but hasn't created its window
        surface yet.
    
    On a Galaxy Nexus, hibernating frees 1567 VM pages from the process.
    Both hibernating and waking can take anywhere from 30ms to over 100ms
    -- measurements have been very inconsistent.
    
    Change-Id: Ib555f5d9d069aefccca06e8173a89625b5f32d7e
    Increment/decrement a counter around EGL calls
    
    This is in preparation for a change that will hibernate the underlying
    EGL when idle. Instead of a bare egl_display_t*, get_display() now
    returns a egl_display_ptr, which acts like a smart pointer. The
    "wakecount" counter managed by the smart pointer isn't used for
    anything in this change. It will be used to make sure we don't
    hibernate when any thread is in an EGL call, without having to hold a
    mutex for the duration of the call.
    
    Change-Id: Iee52f3549a51162efc3800e1195d3f76bba2f2ce
    EGL: add GPU frame completion tracing
    
    This change adds a debug option to EGL to use an EGLSyncKHR each frame to
    determine when the GPU finishes rendering the frame.
    
    Change-Id: I09ce071db904b44f07ca814c586c291c8b59385a
    debug.egl.finish can be used to force a glFinish() when eglSwapBuffers() is called
    
    this debug property is evaludated at eglInitialize() time.
    
    Change-Id: Ie439e4aac87f7fdc6ab2add86183d6d042f3ee8b
    gltrace: Expose a function to set OpenGL trace level.
    
    This patch adds a function setGlDebugLevel() to libEGL to enable
    GL tracing. This will be used by the Java layer to add an option
    to "am start" that can enable tracing for a particular application.
    
    Change-Id: Ie1dbdd550f502df8633553595cb33ee9d9ae44e1
    EGLConfig is now not remaped to an internal EGLConfig
    
    this is possible now that we support only a single
    EGL implementation. this allows a large code simplification.
    
    Change-Id: I7a6b9db4c5d60f4407c6061e7a68729af63d5242
    remove multiplexing of multiple EGL implementation
    
    from now on, the system can only have one EGL
    implementation. this means the software and h/w renderer
    cannot be used at the same time on a device. Of course, the
    h/w renderer is always prefered; in its absence we
    default to the software renderer.
    
    Change-Id: Ib579f58055dd0ce4c4a99144131efa11c16ca3d3
    fix a dead-lock in eglMakeCurrent
    
    this was introduced in a recent change. eglMakeCurrent can
    end up calling eglDestroyImageKHR via ANativewWindow::disconnect
    when the consumer is in the same process.
    
    we make sure we don't hold the lock while this is happening.
    
    Change-Id: Id17fe4fd76eecf5f962cefb9aa32be41fc1b042d
    fix a race condition in eglMakeCurrent()
    
    it would happen when a context was made non-current, in this
    case we would call the implementation's eglMakeCurrent() which
    would succeed, if we're rescheduled at that point, another
    eglMakeCurrent() could make that context current to another thread,
    however, when we came back to the original call we would
    overwrite egl_context_t internal state.
    
    this is fixed by moving the critical section under
    egl_display_t's lock.
    
    Change-Id: I743c85696e13263d3a9570824940263df0caacdc
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    be a bit more defensive when parsing extension strings
    
    hopefully this will fix a crash in the emulator.
    
    Bug: 5624674
    Change-Id: I96586e29ea20efd73c4ad50870df5b7368bf3c3b
    fix crash when validating an invalid EGL objects
    
    the code that validated EGL objects dereferenced the object
    to access its EGLDisplay -- needed for validation (!).
    This was wrong for two reasons, first we dereferenced the object
    before validating it (potentially leading to a crash), secondly
    we didn't validate that the object existed in the right EGLDisplay.
    
    We now use the EGLDisplay passed by the user API.
    
    Change-Id: I66f9e851d4f8507892a6b1fee3065f124c4e7138
    rework a bit how we manage EGL extensions
    
    - don't advertise extensions that are not supported
      by any implementation
    
    - remove EGL_ANDROID_swap_rectangle which is not
      implemented by anybody and confuses people
    
    - add some comments about mandatory extensions
    
    Bug: 5428001
    Change-Id: Id8dc48116ac1d1eb79ec9ef55d03e29d4257c1f3
    fix crash when validating an invalid EGL objects
    
    the code that validated EGL objects dereferenced the object
    to access its EGLDisplay -- needed for validation (!).
    This was wrong for two reasons, first we dereferenced the object
    before validating it (potentially leading to a crash), secondly
    we didn't validate that the object existed in the right EGLDisplay.
    
    We now use the EGLDisplay passed by the user API.
    
    Change-Id: I66f9e851d4f8507892a6b1fee3065f124c4e7138
    EGL: use an in-memory the blob cache
    
    This change makes the makes the stub EGL_ANDROID_blob_cache callbacks
    actually use a BlobCache object.
    
    Bug: 5474671
    Change-Id: I5cbaae2dea3aad2fe306c9f57029c3f215a0863a
    EGL: Add stubs for EGL_ANDROID_blob_cache
    
    This change adds a stub cache implementation that gets passed to the
    underlying EGL implementation at initialization time.
    
    Change-Id: I14437c5b6f91b7a34a19bb02ad802e6e54f88d2a
    eglTerminate() now actually frees up all active egl objects
    
    as specified by the EGL specification, terminated objects's
    handles become invalid, the objects themselves are destroyed
    when they're not current to some thread.
    
    Change-Id: Id3a4a5736a5bbc3926a9ae8385d43772edb88eeb
    refactor EGL source code
    
    no changes is functionality. split various objects into their own files.
    make egl_display objec's lock internal.
    Add support for EGL_KHR_gl_colorspace
    
    Change-Id: I684d0b8556cd6c84ee4b4d67e1bb95c3b96fccfb
    fix local include paths
    
    Change-Id: Icb921fa796ec08612dbb2feb7e7161bcb0cf4a99
    Add ES3 support to libGLESv2 and tracing tools
    
    Since ES3 is backwards compatible with ES2, a new wrapper isn't
    necessary, and the Khronos implementation guidelines recommend
    supporting both versions with the same library.
    
    Change-Id: If9bb02be60ce01cc5fe25d1f40c4e7f37244ebf6
    Disable EGL hibernation due to jank
    
    Hibernating EGL takes a long time (>100 ms) and blocks all other
    rendering. During window animations, the outgoing activity begins
    hibernation before the animation stops, causing visible stutter.
    Hibernation is still available by setting 'BOARD_ALLOW_EGL_HIBERNATION
    := true' in the devices BoardConfig.mk
    
    Change-Id: Iab4e00723a1adcd97481e81b2efdc821b3e9712f
    Fix deadlock when cleaning objects in eglTerminate
    
    When eglTerminate() is called with a window surface still exists, a
    deadlock would occur since egl_display_t::terminate() holds a lock
    while destroying the window surface, which calls
    onWindowSurfaceDestroyed() which attempts to take the same lock.
    
    This change refactors the hibernation code and data into a separate
    object with its own lock, separate from the egl_display_t lock. This
    avoids the deadlock and better encapsulates the hibernation logic.
    
    The change also fixes a bug discovered incidentally while debugging:
    hibernating after calling eglTerminate() succeeds, but will cause
    awakens from subsequent eglInitialize() to fail. We will no longer
    hibernate a terminated display.
    
    Change-Id: If55e5bb603d4f8953babc439ffc8d8a60af103d9
    Hibernate the EGL implementation when idle
    
    If the EGL implementation supports the EGL_IMG_hibernate_process
    extension, use it to hibernate (and hopefully release memory or other
    resources) when the process isn't actively using EGL or OpenGL ES. The
    idleness heuristic used in this change is:
    
    (a) Wake up when entering any EGL API call, and remain awake for the
        duration of the call.
    (b) Do not hibernate when any window surface exists; this means the
        application is very likely in the foreground.
    (c) Do not hibernate while any context is made current to a thread.
        The app may be using a client API without the EGL layer knowing,
        so it is not safe to hibernate.
    (d) Only check these conditions and attempt to hibernate after a
        window surface is destroyed or a thread's context is detached. By
        not attempting to hibernate at the end of every EGL call, we avoid
        some transient wakeups/hibernate cycles when the app is mostly idle,
        or is starting to become active but hasn't created its window
        surface yet.
    
    On a Galaxy Nexus, hibernating frees 1567 VM pages from the process.
    Both hibernating and waking can take anywhere from 30ms to over 100ms
    -- measurements have been very inconsistent.
    
    Change-Id: Ib555f5d9d069aefccca06e8173a89625b5f32d7e
    Increment/decrement a counter around EGL calls
    
    This is in preparation for a change that will hibernate the underlying
    EGL when idle. Instead of a bare egl_display_t*, get_display() now
    returns a egl_display_ptr, which acts like a smart pointer. The
    "wakecount" counter managed by the smart pointer isn't used for
    anything in this change. It will be used to make sure we don't
    hibernate when any thread is in an EGL call, without having to hold a
    mutex for the duration of the call.
    
    Change-Id: Iee52f3549a51162efc3800e1195d3f76bba2f2ce
    EGL: add GPU frame completion tracing
    
    This change adds a debug option to EGL to use an EGLSyncKHR each frame to
    determine when the GPU finishes rendering the frame.
    
    Change-Id: I09ce071db904b44f07ca814c586c291c8b59385a
    debug.egl.finish can be used to force a glFinish() when eglSwapBuffers() is called
    
    this debug property is evaludated at eglInitialize() time.
    
    Change-Id: Ie439e4aac87f7fdc6ab2add86183d6d042f3ee8b
    EGLConfig is now not remaped to an internal EGLConfig
    
    this is possible now that we support only a single
    EGL implementation. this allows a large code simplification.
    
    Change-Id: I7a6b9db4c5d60f4407c6061e7a68729af63d5242
    remove multiplexing of multiple EGL implementation
    
    from now on, the system can only have one EGL
    implementation. this means the software and h/w renderer
    cannot be used at the same time on a device. Of course, the
    h/w renderer is always prefered; in its absence we
    default to the software renderer.
    
    Change-Id: Ib579f58055dd0ce4c4a99144131efa11c16ca3d3
    fix a dead-lock in eglMakeCurrent
    
    this was introduced in a recent change. eglMakeCurrent can
    end up calling eglDestroyImageKHR via ANativewWindow::disconnect
    when the consumer is in the same process.
    
    we make sure we don't hold the lock while this is happening.
    
    Change-Id: Id17fe4fd76eecf5f962cefb9aa32be41fc1b042d
    fix a race condition in eglMakeCurrent()
    
    it would happen when a context was made non-current, in this
    case we would call the implementation's eglMakeCurrent() which
    would succeed, if we're rescheduled at that point, another
    eglMakeCurrent() could make that context current to another thread,
    however, when we came back to the original call we would
    overwrite egl_context_t internal state.
    
    this is fixed by moving the critical section under
    egl_display_t's lock.
    
    Change-Id: I743c85696e13263d3a9570824940263df0caacdc
    fix crash when validating an invalid EGL objects
    
    the code that validated EGL objects dereferenced the object
    to access its EGLDisplay -- needed for validation (!).
    This was wrong for two reasons, first we dereferenced the object
    before validating it (potentially leading to a crash), secondly
    we didn't validate that the object existed in the right EGLDisplay.
    
    We now use the EGLDisplay passed by the user API.
    
    Change-Id: I66f9e851d4f8507892a6b1fee3065f124c4e7138
    rework a bit how we manage EGL extensions
    
    - don't advertise extensions that are not supported
      by any implementation
    
    - remove EGL_ANDROID_swap_rectangle which is not
      implemented by anybody and confuses people
    
    - add some comments about mandatory extensions
    
    Bug: 5428001
    Change-Id: Id8dc48116ac1d1eb79ec9ef55d03e29d4257c1f3
    fix crash when validating an invalid EGL objects
    
    the code that validated EGL objects dereferenced the object
    to access its EGLDisplay -- needed for validation (!).
    This was wrong for two reasons, first we dereferenced the object
    before validating it (potentially leading to a crash), secondly
    we didn't validate that the object existed in the right EGLDisplay.
    
    We now use the EGLDisplay passed by the user API.
    
    Change-Id: I66f9e851d4f8507892a6b1fee3065f124c4e7138
    Terminate EGL when an app goes in the background
    
    This does not happen on high end gfx devices. This happens
    only if only one EGL context is initialized in the current
    process.
    
    Change-Id: Ibd1737efdf84eef8a84108b05795440d1ae9964e
    EGL: implement loading and saving the cache
    
    This change adds support for saving and loading the contents of the EGL
    cache.  It also adds some simple tests for the EGL cache.
    
    Change-Id: I18e5e789e0897a0783d29d1c1e64d26de2dd44c4
    fix x86 build
    
    Change-Id: I03cfbfeaeb8b13842248856b14b4a23711036e10
    eglTerminate() now actually frees up all active egl objects
    
    as specified by the EGL specification, terminated objects's
    handles become invalid, the objects themselves are destroyed
    when they're not current to some thread.
    
    Change-Id: Id3a4a5736a5bbc3926a9ae8385d43772edb88eeb
    refactor EGL source code
    
    no changes is functionality. split various objects into their own files.
    make egl_display objec's lock internal.
    Add rate-limited logging for unimplemented es functions.
    
    Bug: 17322013
    
    Change-Id: I7aa5ab2f76cf344cfb75802edbfd44e8e7526ff1
    Revert "Temporarily turn on callstack logging"
    
    Bug: 13927881
    
    'twas useful and perhaps should be always enabled (please?)
    but not like this, so reverting.
    
    This reverts commit db4488565a791fc769b0b0b6ca4a0689eb3d5f4e.
    
    Change-Id: I9a78c6d6e48342ef6ca1f2f7b5303ca47ccc6086
    Temporarily turn on callstack logging
    
     Bug: 13745587
     Temporarily turn on callstack logging for gl_no_context() to
     try and track down font cache corruption
    
    Change-Id: I657ee85e811746441c5ce0ffe5adbfb3fb011d4c
    Make libEGL build cleanly under 64-bit
    
    Change-Id: I255dfb70b166b7469d59352b1acfc7aececa07de
    Make libEGL build cleanly under 64-bit
    
    Change-Id: I255dfb70b166b7469d59352b1acfc7aececa07de
    make sure we have a context when creating the 1st surface
    
    also add an option to dump the stack trace when
    calling a GL function without a context.
    
    Change-Id: I57b72bb8c322ac4253c3077bf150621bd9863b69
    improve GLES jumptables
    
    in the common case this saves one instructions per jump
    (which will help with the i-cache).
    
    this change also gets rid of the "use slow tls" option,
    which was useless. So at least now architectures that don't have
    assembly bindings will perform much better.
    
    Change-Id: I31be6c06ad2136b50ef3a1ac14682d7812ad40d2
    fix local include paths
    
    Change-Id: Icb921fa796ec08612dbb2feb7e7161bcb0cf4a99
    improved CallStack a bit
    
    - added a ctor that updates and dumps the stack immediately
    - added a "logtag" parameter to dump()
    
    Change-Id: Ie51c256071d282591752243bdb4f68cf9ff8829d
    Add ES3 support to libGLESv2 and tracing tools
    
    Since ES3 is backwards compatible with ES2, a new wrapper isn't
    necessary, and the Khronos implementation guidelines recommend
    supporting both versions with the same library.
    
    Change-Id: If9bb02be60ce01cc5fe25d1f40c4e7f37244ebf6
    gltrace: Add support for tracing running applications.
    
    Currently, to activate OpenGL tracing, an application has to be
    start with --opengl-trace option (or have a debug prop set).
    
    This CL adds support for tracing an application which may already
    be running. This is implemented as follows:
        - DDMS initiates a JDWP message to the VM indicating that
          opengl traces be enabled.
        - When that message is received, a flag is set that indicates
          that tracing should be enabled.
        - The trace flag is checked during every eglSwap() operation,
          and if it finds that tracing should be active and it isn't,
          then it starts the tracing component.
    
    Change-Id: I3347fe89fc06c7404d7aa9360f4b21e5bf36ebcb
    gltrace: Make sure device is debuggable.
    
    (cherry picked from commit 6482fa4db0a7ac99cd3503d6bf170f80b26fb695)
    
    Change-Id: I205aabcab1932025c12e7ba3d1b3cf94684f6758
    gltrace: Make sure device is debuggable.
    
    Change-Id: Icc22ff823a2f56733b232b927dd1fa494e9e1e81
    Add runtime debugging capabilities to OpenGL
    
    The shell property debug.egl.trace can now be set to:
    
    0
      disables tracing
    1
      logs all GL calls
    error
      checks glGetError after every GL call, logs a stack trace on error
    systrace
      logs each GL call to systrace
    
    Change-Id: I34a2a2d4e19c373fd9eaa1b0cd93e67c87378996
    gltrace: Do not start gltrace from early_egl_init.
    
    The debugging and tracing levels are initialized both during
    early_egl_init and egl_display_t::initialize(). For apps this has
    no effect since early_egl_init is called in the context of zygote.
    This CL removes the unnecessary call from early_egl_init.
    
    Change-Id: Ibc55c26228cd197f2e2623fbfb2d1a63d0722401
    assert -eng builds when calling a GL function without a context
    
    Bug: 7241626
    
    Change-Id: I0f1f9361e75e9186af8cff8d98a7d2224b266765
    Increment/decrement a counter around EGL calls
    
    This is in preparation for a change that will hibernate the underlying
    EGL when idle. Instead of a bare egl_display_t*, get_display() now
    returns a egl_display_ptr, which acts like a smart pointer. The
    "wakecount" counter managed by the smart pointer isn't used for
    anything in this change. It will be used to make sure we don't
    hibernate when any thread is in an EGL call, without having to hold a
    mutex for the duration of the call.
    
    Change-Id: Iee52f3549a51162efc3800e1195d3f76bba2f2ce
    gltrace: Expose a function to set OpenGL trace level.
    
    This patch adds a function setGlDebugLevel() to libEGL to enable
    GL tracing. This will be used by the Java layer to add an option
    to "am start" that can enable tracing for a particular application.
    
    Change-Id: Ie1dbdd550f502df8633553595cb33ee9d9ae44e1
    Don't wrap EGLImageKHR and EGLSyncKHR anymore
    
    this simplify our EGL wrapper implementation a lot.
    This wrapping is no longer needed now that we can only
    support a single underlaying EGL implementation.
    
    Change-Id: I8213df7ac69daac447f1fe6e37044b78aac4e9a9
    EGLConfig is now not remaped to an internal EGLConfig
    
    this is possible now that we support only a single
    EGL implementation. this allows a large code simplification.
    
    Change-Id: I7a6b9db4c5d60f4407c6061e7a68729af63d5242
    remove multiplexing of multiple EGL implementation
    
    from now on, the system can only have one EGL
    implementation. this means the software and h/w renderer
    cannot be used at the same time on a device. Of course, the
    h/w renderer is always prefered; in its absence we
    default to the software renderer.
    
    Change-Id: Ib579f58055dd0ce4c4a99144131efa11c16ca3d3
    add support for GL_EXT_debug_marker
    
    This extension is always added to the GL_EXTENSIONS
    extension string for the current GL context, regardless
    of if it's supported by the h/w driver.
    
    The extension itself will be handled by GLES_trace (eventually),
    when GLES_trace is not enabled, it'll result to a no-op.
    
    If the h/w implementation has this extension, we'll call that version
    instead of our dummy version.
    
    Change-Id: Ie5dd3387c4d45cd5ed5f03b73bda6045620a96bc
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    gltrace: transport buffering and context management
    
    This patch adds two improvements:
    1. Protobuf messages are buffered and sent in chunks.
    2. Multiple EGL contexts are handled properly: Corresponding
    to each EGLContext, a GLTraceContext with a unique ID is created.
    On eglMakeCurrent, the appropriate GLTraceContext is set and is
    used while tracing subsequent GL Calls in that thread.
    
    Change-Id: I34076376d3e5af205c87c7396ea47659844abd6e
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    fix crash when validating an invalid EGL objects
    
    the code that validated EGL objects dereferenced the object
    to access its EGLDisplay -- needed for validation (!).
    This was wrong for two reasons, first we dereferenced the object
    before validating it (potentially leading to a crash), secondly
    we didn't validate that the object existed in the right EGLDisplay.
    
    We now use the EGLDisplay passed by the user API.
    
    Change-Id: I66f9e851d4f8507892a6b1fee3065f124c4e7138
    fix crash when validating an invalid EGL objects
    
    the code that validated EGL objects dereferenced the object
    to access its EGLDisplay -- needed for validation (!).
    This was wrong for two reasons, first we dereferenced the object
    before validating it (potentially leading to a crash), secondly
    we didn't validate that the object existed in the right EGLDisplay.
    
    We now use the EGLDisplay passed by the user API.
    
    Change-Id: I66f9e851d4f8507892a6b1fee3065f124c4e7138
    add an option to EGL to dump stack traces on errors
    
    enable by setting debug.egl.callstack to 1
    
    Change-Id: I7fad9ce71b4c4c5ece97d4f9d139348eab742a3c
    this should fix the GL debugger
    
    we were checking against to the wrong variable
    
    Change-Id: Iff3f5ab2d6ba5ac0d3d8161011b38e673ee7e67b
    Always make GL calls with a valid EGL context.
    Bug #5010760
    
    Change-Id: If7500ef69683948e727df1406f458f18b11259d1
    fix x86 build
    
    Change-Id: I03cfbfeaeb8b13842248856b14b4a23711036e10
    eglTerminate() now actually frees up all active egl objects
    
    as specified by the EGL specification, terminated objects's
    handles become invalid, the objects themselves are destroyed
    when they're not current to some thread.
    
    Change-Id: Id3a4a5736a5bbc3926a9ae8385d43772edb88eeb
    refactor EGL source code
    
    no changes is functionality. split various objects into their own files.
    make egl_display objec's lock internal.
    EGL: Allow creating a SurfaceTexture EGLSurface.
    
    This change removes the check that disallowed the creation of an
    EGLSurface that would send frames to a SurfaceTexture.
    
    Change-Id: I44c6d5df503cc676a88144d72d39b414692ce4c9
    GLES2Dbg: use dump.gles2dbg file when fails to create socket
    
    setprop debug.egl.debug_forceUseFile 1: always use file
    setprop debug.egl.debug_maxFileSize <int MB>: exit when reached
    setprop debug.egl.debug_filePath <path>: may need to make the file
     writable first.
    setprop debug.egl.debug_port <unsigned short>
    setprop debug.egl.debug_proc <proc cmdline>: to match debuggee process
    
    Change-Id: I34ca1f3092f3abf17e2ded9d1689d0cdef6e07e8
    Signed-off-by: David Li <davidxli@google.com>
    GLES2Dbg: change GLES2_dbg to shared library
    
    Change-Id: I493e9bff431bd939f4e80e1e9c614dd557307fa2
    Signed-off-by: David Li <davidxli@google.com>
    Initialize reference counter for egl_display_t
    
    Add missing member initialization for reference counter, used to determine
    if a context is ready.
    
    Change-Id: I45f81177ac2851129681f827afe015b60b3cd73c
    egl: fixes for object refcounts
    
    eglMakeCurrent() would only deref the previous surfaces if the old and
    new contexts were the same.  eglTerminate() should not touch TLS.
    eglReleaseThread() needs to unbind the current context.
    
    Change-Id: I7f4c090a287ee1e29e4708ae10679fb9d7d8c8c5
    Related-Bug: 2964479
    Make objects collection a member of egl_display object
    
    Move EGL objects (contexts, surfaces, ...) collection from global
    static into EGL display object. Since EGL implementation currently
    supports only one display, this doesn't change current logic. This
    aims at preparing for next coming changes in eglTerminate() to
    support per-display cleanup.
    
    Bug: 4152714
    Change-Id: I5e424781b89c3c275f9922f943463d5f6b1f6bc6
    Check for initialized EGLDisplay when required by specification
    
    Check for initialized display, and set EGL error to EGL_NOT_INITIALIZED
    whenever it isn't, for all EGL functions taking an EGLDisplay as argument
    and requiring it to have been initialized.
    
    Bug: 3366011
    Change-Id: Ib1d8a3a207257995518f4430fe97f8c406c7fc13
    fix [4107131] nvidia driver call takes a very long time
    
    We were leaking all EGLSyncKHR objects, over time the list
    would grow and become very slow to operate on.
    
    Bug: 4107131
    Change-Id: I6c82daf49fe3189d04550781d64d57c30c95f552
    SurfaceTexture: disallow unsupported uses.
    
    This change makes the ANativeWindow_lock NDK function error out if it is
    passed an ANativeWindow with a concrete type that is not Surface.  It
    also makes eglCreateWindowSurface fail if it is passed a
    SurfaceTextureClient as its 'window' argument.
    
    Bug: 4087277
    Change-Id: Ie68c50c52d88f72d8a387f6c094908044c83a88c
    GLES2Debugger: Make command exchange async to improve performance.
    
    In message loop, use select to check for available commands from client,
     rather than always expecting commands in eglSwapBuffers.
    
    Change-Id: Ifc34dd77c2528c8b9c71f594e3eda4f93400cd2b
    Signed-off-by: David Li <davidxli@google.com>
    GLES2Debugger: Added DbgContext and vertex data capturing.
    
    Send VBO related commands to client, which tracks the state.
    Maintain index buffer content and vertex attrib pointer/buffer state on server.
    During glDrawArrays/Elements, send user memory data to client.
    
    Change-Id: Ia920e90479329b301ae4b5735e833eeb20293c94
    Signed-off-by: David Li <davidxli@google.com>
    Added screenshot after glDraw* option to GLES2 Debugger
    
    Also added timing mode option using utils/Timers.h.
    Factored out common code to reduce size.
    Improved Protobuf message.
    Uploads data from glBufferData and glBufferSubData.
    
    Change-Id: Iaae5e706235d942df81c7eada7223fb0b0583911
    Signed-off-by: David Li <davidxli@google.com>
    Initial commit of GLESv2 debugger server
    
    Use debug.egl.debug_proc property to match process cmdline.
    Binds to TCP:5039 and waits for client connection.
    Sends function call parameters, textures and shaders using Protobuf.
    Java Eclipse client plug-in is next.
    
    Change-Id: I183b755263663f87e86dde1ad12f527d0445fd57
    Signed-off-by: David Li <davidxli@google.com>
    egl: fixes for object refcounts
    
    eglMakeCurrent() would only deref the previous surfaces if the old and
    new contexts were the same.  eglTerminate() should not touch TLS.
    eglReleaseThread() needs to unbind the current context.
    
    Change-Id: I7f4c090a287ee1e29e4708ae10679fb9d7d8c8c5
    Related-Bug: 2964479
    Clean up use of HAVE_ANDROID_OS
    
    HAVE_ANDROID_OS was defined as "1" for targets, but never defined as "0"
    for non-targets. Changing them to #ifdef should be safe and matches
    all the other uses of HAVE_ANDROID_OS throughout the system.
    
    Change-Id: I82257325a8ae5e4e4371ddfc4dbf51cea8ea0abb
    Clear all EGL errors when entering EGL funcs.
    
    This changes the clearError function in the EGL wrapper layer to simply
    call eglGetError().  That should clear any pending errors from all the
    underlying EGL implementations, which is needed to correctly report the
    error for the most recently called EGL function.
    
    Change-Id: Iad19c69f0c5305e873f3c2f96d353280d31f7b61
    stubs
    
    Change-Id: I829039f3817a172e66eeb9df397e896a488a259d
    egl: clear error on function entry
    
    Clear the current thread error state on entry to API functions as
    mandated by the EGL 1.4 specification, section 3.1.  glGetError
    returns additional information about the "most recent EGL function".
    
    Change-Id: Ic24c64b39294ffc1a4e43fa72663e076b9d7decf
    egl: fix GetProcAddress for EGLimage extensions
    
    Return wrappers from GetProcAddress for glEGLImageTargetTexture2DOES
    and glEGLImageTargetRenderbufferStorageOES which unwrap the EGLimage
    handle before calling through to the implementation.
    
    Change-Id: I2f5b180ab3ccdb28a4f510a2bd8c2eee941a84df
    egl: expose EGLimage extensions
    
    Add EGL_KHR_gl_texture_cubemap_image and EGL_KHR_gl_renderbuffer_image
    to the static EGL extension string since these require no new APIs
    beyond what is already required.
    
    Change-Id: I2d1fde86b19bb9eee46b3b977f51784a17cfcc3c
    egl: fixes for object refcounts
    
    eglMakeCurrent() would only deref the previous surfaces if the old and
    new contexts were the same.  eglTerminate() should not touch TLS.
    eglReleaseThread() needs to unbind the current context.
    
    Change-Id: I213b8be77b1a23b5a8a6afaac60643662c8aa010
    fix [3258603] 'Quadrant' benchmark crashes inside eglQueryContext on GB/Crespo
    
    eglQueryContext(..., EGL_CONFIG_ID, ...) is dereferencing an uninitialized pointer
    due to a typo.
    
    Change-Id: I100addf3150f19cb6dfbce9987fb5239dd240878
    [3229973, 3247470, ...] set EGLNativeWindowSurface's format in EGL
    
    (there are multiple bugs this should fix)
    
    we now use the EGL_NATIVE_VISUAL_ID of a config to set
    the ANativeWindow's format from eglCreateWindowSurface(),
    this guarantees that the surface's format will match
    whatever EGLConfig the user chose.
    
    this should fix all current and future config/surface format
    mismatch and allow users to easily select 32-bits surfaces.
    
    Change-Id: I3835d0eb70c75eeecded3c3509a0a8207554c98b
    DO NOT MERGE. workaround [3177481] eglGetProcAddress() returns the wrong pointer for some GL extensions
    
    We just make sure eglGetProcAddress() will return NULL for
     glEGLImageTargetTexture2DOES
     glEGLImageTargetRenderbufferStorageOES
    
    which is better than returning the address of the wrong implementation.
    
    the correct fix is more involved.
    
    Change-Id: I585a1f40e564f862e5dd382224609ccd069cd3b5
    OpenGL tracing.
    
    Enable with:
    
    adb shell setprop debug.egl.trace 1
    
    Change-Id: Icfbc795f5260141510975228e72234e9aab56a85
    better fix for [3028370] GL get error should return a valid error if no context is bound.
    
    it turns out that we cannot return INVALID_OPERATION from glGetError() because the
    GL spec says that it must be called in a loop until it returns GL_NO_ERROR.
    
    now, we always return 0 from GL functions called from a thread with no
    context bound. This means that glGetError() will return NO_ERROR in this case,
    which is better than returning a random value (which could trap the app in a loop).
    
    if this happens in the main thread of a process, we LOG an error message once.
    
    Change-Id: Id59620e675a890286ef62a257c02b06e0fdcaf69
    fix [3028370] GL get error should return a valid error if no context is bound.
    
    glGetError() will now always return GL_INVALID_OPERATION if called from a thread
    with no GL context bound.
    
    Change-Id: I28ba458871db051bb4f5a26668a1fa123526869c
    fix typo EGL_NO_IMAGE_KHR -> EGL_NO_SYNC_KHR
    
    Change-Id: I38c87803e32030918f2deb06381eabce0faa870c
    fix small bug in EGL error management
    
    make sure to clear our EGL implementation's error when returning
    an error from an underlying implementation
    
    Change-Id: Ibce4726cef1f900e4c7f16002345d7a07f8cdf41
    Add support for KHR_fence_sync
    
    Change-Id: Ie2771b5869c9c8dcf5ecf9318e2ee6d4d1cd5cc9
    Fix a few typos in EGL wrapper
    
    Change-Id: I3b815ca6ec334ca12088f9721eece33df42b2e46
    Add KHR_gl_texture_2D_image extension string.
    cleanup EGL a bit. remove unused extension.
    
    Change-Id: I7758bc7d6dc2e70fc3590fe939ebf71fbcde7059
    cleanup EGL a bit. remove unused extension.
    
    Change-Id: Ia87120b076ab1bf7b28f06087878d8161fb46c88
    fix [2912927] Can't get NV_draw_path extension to work
    
    there was a problem with eglGetProcAddress() which would only work with
    GLES 1.x contexts.
    
    Change-Id: I4747671cbf7ed469bb471a377f1d6f36550d24df
    frameworks/base/opengl: Add NULL check
    
    Check for the validity of the attrs_list in eglChooseConfig before using
    it. This avoids a crash during tests in which the attributes are NULL.
    
    Change-Id: I1c0a46b505ae919e2454cfdce32f8dfc21ead247
    fix [2421247] implement eglGetProcAddress(), needed in the ndk
    
    Change-Id: I5027a27b43c0dd449a404024087853ca05bb8e4e
    Fix a bug that prevented the creation of EGL shared contexts.
    
    Change-Id: I6b0ec5ef86abdd4e9083067ba297107cfb094df3
    fix [2870926] Issue 9802: EGL wrapper has not been implemented correctly for eglQuerySurface().
    
    rework how our EGL wrapper manages EGLConfig:
    
    - we now store the EGLConfig with the EGLSurface and EGLContext
      so that we can have easy access to it from eglQueryContext
      and eglQuerySurface.
    
    - EGLConfig now are an index into a sorted table of egl_config_t,
      we use a binary search to retrieve our EGLConfig (the index) from
      the implementation's EGLConfig.
    
    - egl_config_t keeps track of the implementation's index,
      EGLConfig and CONFIG_ID as well as our CONFIG_ID.
    
    In many ways, this implementation is simpler and more robust, as it doesn't
    assume anything about the number of implementations nor what EGLConfig is
    made of (the previous code assumed EGLConfig didn't usem more than 24-bits).
    
    Change-Id: Id5abe923aacb6e1fd2b63bd8c15d7b04ae824922
    Fix a bug that prevented the creation of EGL shared contexts.
    
    Change-Id: I6b0ec5ef86abdd4e9083067ba297107cfb094df3
    fix a crasher in our EGL wrapper when attrib_list is NULL in eglChooseConfig
    
    the EGL specification states that this should be treated as though it was
    an empty list terminated with EGL_NONE.
    
    Change-Id: I294104370a86b5e5c34c7bcf15c5459eab464631
    small cleanup. gEGLImpl should have been static
    
    also added a ctor to initialized it in case we use it ont he stack
    one day.
    
    Change-Id: I2736b9bce3d8ba3b74fd029de4c18cca2cdbbf60
    Implement eglInitialize / eglTerminate reference counting
    
    Previously we imlpemented the standard semantics for
    eglInitialize / eglTerminate, which are that
    eglInitialize may be called any number of times,
    but the first call to eglTerminate will terminate
    the display.
    
    Now we follow reference-countins semantics, which
    means that eglTerminate will only terminate the
    display when the reference count returns to zero.
    
    This change allows EGL to be used by multiple
    independently written modules in the same process.
    
    (Otherwise there is no way for the independent
    modules to coordinate their use of the display.)
    fix [2189862] Race condition in eglIntialize and eglDestroy
    
    there is now a lock protext a perticular display. it's held during
    initialization and destruction.
    fix [2303866] eglMakeCurrent doesn't return all error messages described in the spec
    eclair snapshot
    fix[2222341] Soft reset while going back from camcorder settings
    
    add a way to convert a mapped "pushbuffer" buffer to a gralloc handle
    which then can be safely used by surfaceflinger, without including
    gralloc_priv.h
    return proper error code from eglCreateImageKHR
    fix [2187212] add support for GLESv2 dispatch based on TLS
    
    Instead of using a different function pointer table for ES 1.x and ES 2.x,
    we use a single one that is the union (sort|uniq) of both tables. Two
    instances of this table are initialized with pointers to GL ES 1.x and GL ES 2.x
    entry-points.
    When a context is created, we store its version number and when it is bound to a
    thread we set the approruiate table based on the stored version.
    
    This introduce no penalty while dispatching gl calls to the right API version.
    
    [Pending Dr No approval for MR1]
    fix a bug recently introduced where EGL couldn't be initialized again after it had been terminated once
    first step for fixing [2066786] EGL object lifetime management doesn't respect the EGL spec
    
    this change fixes the lifetime mgt of EGLSurface, EGLContext and EGLImageKHR in the EGL wrapper.
    EGLDisplay is still somewhat bogus and libagl's EGL is still incorrect.
    
    The idea of the change is that EGL objects are put in a list when created and removed when destroyed.
    Before each use, we first verify if the object is in the list and if so a reference is taken and kept
    for the scope of the whole EGL API being called, if not, an error is returned.
    
    Upon object destruction, the object is simply marked as "terminated" (this is not protected by a lock
    because it doesn't really matter). This flag is only used to deny access to the object by other APIs
    while it's still valid (for instance current or being used by another function in another thread).
    A reference is also removed and the object can then actually be destroyed when going out of scope.
    fix bug [2021677] egl driver unloaded after eglTerminate() is called
    
    refactored the code so that:
    - EGL APIs that can be called before or after eglInitialize() will work by loading the drivers first
    - make eglGetDisplay() a lot more efficient
    - make sure that EGL drivers are loaded in a thread-safe way
    - don't unload the drivers upon calling eglTerminate(), they're now never unloaded, since there is no safe way to do it (some thread could be running)
    - updated our EGL version to 1.4
    - return better error codes if errors happen during initialization
    Better error handling in EGL extensions
    log opengl-call-with-no-context only once per thread, instead of for each function call
    donut snapshot
    donut snapshot
    fix for [1969185] valgrind errors in new gl stuff
    Add eglGetRenderBufferANDROID() extension, which returns the current render buffer as an android_native_buffer_t*
    fix [1942438] eglGetCurrentSurface() returns bogus value
    fix [1942438] eglGetCurrentSurface() returns bogus value
    implement a real loader for EGL drivers
    
    we now look for a config file in /system/lib/egl/egl.cfg that describes the association of a display to a driver.
    these drivers are named: /system/lib/egl/lib{[EGL|GLESv1_CM|GLESv2] | GLES}_$TAG.so
    Added most of the support needed for GLES 2.x
    donut snapshot
    remove libEGL and libGLESv1_CM dependencies on libutils and libui
    should help fix the Simulator build.
    fix EGL extension string names
    created an new EGL extension called ANDROID_swap_rectangle
    
    ANDROID_swap_rectangle allows to specify the rectangle affected by eglSwapBuffers(), anything outside of this rectangle is unchanged. in particular EGL_BUFFER_DESTROYED only applies to that rectangle. This extension as well as EGL_BUFFER_PRESERVED allow major optimizations on surfaceflinger, which can redraw only the dirty area during compositing.
    
    However, ANDROID_swap_rectangle allows further optimizations in EGL by reducing the amount of copy-back needed. ANDROID_swap_rectangle is particularily important for software implementations.
    oops forgot to remove a LOGD when loading an opengl driver
    Make sure to map undefined OES functions to their non-OES counterpart if it exists.
    use gl.h to generate the *.in files. we are now supporting the full gl.h and glext.h apis.
    integrate some OpenGL ES changes back from master_gl in preparation of opening GLES to the NDK.
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    Automated import from //branches/master/...@142578,142578
    Automated import from //branches/donutburger/...@142484,142484
    Automated import from //branches/cupcake/...@142481,142481
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@132589
    auto import from //depot/cupcake/@137055
    auto import from //branches/cupcake/...@132276
    auto import from //branches/cupcake/...@130745
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add ES3 support to libGLESv2 and tracing tools
    
    Since ES3 is backwards compatible with ES2, a new wrapper isn't
    necessary, and the Khronos implementation guidelines recommend
    supporting both versions with the same library.
    
    Change-Id: If9bb02be60ce01cc5fe25d1f40c4e7f37244ebf6
    Hibernate the EGL implementation when idle
    
    If the EGL implementation supports the EGL_IMG_hibernate_process
    extension, use it to hibernate (and hopefully release memory or other
    resources) when the process isn't actively using EGL or OpenGL ES. The
    idleness heuristic used in this change is:
    
    (a) Wake up when entering any EGL API call, and remain awake for the
        duration of the call.
    (b) Do not hibernate when any window surface exists; this means the
        application is very likely in the foreground.
    (c) Do not hibernate while any context is made current to a thread.
        The app may be using a client API without the EGL layer knowing,
        so it is not safe to hibernate.
    (d) Only check these conditions and attempt to hibernate after a
        window surface is destroyed or a thread's context is detached. By
        not attempting to hibernate at the end of every EGL call, we avoid
        some transient wakeups/hibernate cycles when the app is mostly idle,
        or is starting to become active but hasn't created its window
        surface yet.
    
    On a Galaxy Nexus, hibernating frees 1567 VM pages from the process.
    Both hibernating and waking can take anywhere from 30ms to over 100ms
    -- measurements have been very inconsistent.
    
    Change-Id: Ib555f5d9d069aefccca06e8173a89625b5f32d7e
    Increment/decrement a counter around EGL calls
    
    This is in preparation for a change that will hibernate the underlying
    EGL when idle. Instead of a bare egl_display_t*, get_display() now
    returns a egl_display_ptr, which acts like a smart pointer. The
    "wakecount" counter managed by the smart pointer isn't used for
    anything in this change. It will be used to make sure we don't
    hibernate when any thread is in an EGL call, without having to hold a
    mutex for the duration of the call.
    
    Change-Id: Iee52f3549a51162efc3800e1195d3f76bba2f2ce
    Don't wrap EGLImageKHR and EGLSyncKHR anymore
    
    this simplify our EGL wrapper implementation a lot.
    This wrapping is no longer needed now that we can only
    support a single underlaying EGL implementation.
    
    Change-Id: I8213df7ac69daac447f1fe6e37044b78aac4e9a9
    remove multiplexing of multiple EGL implementation
    
    from now on, the system can only have one EGL
    implementation. this means the software and h/w renderer
    cannot be used at the same time on a device. Of course, the
    h/w renderer is always prefered; in its absence we
    default to the software renderer.
    
    Change-Id: Ib579f58055dd0ce4c4a99144131efa11c16ca3d3
    add support for GL_EXT_debug_marker
    
    This extension is always added to the GL_EXTENSIONS
    extension string for the current GL context, regardless
    of if it's supported by the h/w driver.
    
    The extension itself will be handled by GLES_trace (eventually),
    when GLES_trace is not enabled, it'll result to a no-op.
    
    If the h/w implementation has this extension, we'll call that version
    instead of our dummy version.
    
    Change-Id: Ie5dd3387c4d45cd5ed5f03b73bda6045620a96bc
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    fix crash when validating an invalid EGL objects
    
    the code that validated EGL objects dereferenced the object
    to access its EGLDisplay -- needed for validation (!).
    This was wrong for two reasons, first we dereferenced the object
    before validating it (potentially leading to a crash), secondly
    we didn't validate that the object existed in the right EGLDisplay.
    
    We now use the EGLDisplay passed by the user API.
    
    Change-Id: I66f9e851d4f8507892a6b1fee3065f124c4e7138
    fix crash when validating an invalid EGL objects
    
    the code that validated EGL objects dereferenced the object
    to access its EGLDisplay -- needed for validation (!).
    This was wrong for two reasons, first we dereferenced the object
    before validating it (potentially leading to a crash), secondly
    we didn't validate that the object existed in the right EGLDisplay.
    
    We now use the EGLDisplay passed by the user API.
    
    Change-Id: I66f9e851d4f8507892a6b1fee3065f124c4e7138
    cleanup: fix typos in logs
    
    Change-Id: Ib5744564a873ea2b84100174673dc4d3ae109fcf
    EGL: move disconnect to surface dtor
    
    This change moves the call to native_window_api_disconnect from
    eglDestroySurface to the egl_surface_t destructor.  The egl_surface_t
    can outlive the external EGLSurface if eglDestroySurface is called while
    the surface is made current on a thread.
    
    Change-Id: I0df6117a5633c2a19935fe356579abdd76fc471f
    eglTerminate() now actually frees up all active egl objects
    
    as specified by the EGL specification, terminated objects's
    handles become invalid, the objects themselves are destroyed
    when they're not current to some thread.
    
    Change-Id: Id3a4a5736a5bbc3926a9ae8385d43772edb88eeb
    refactor EGL source code
    
    no changes is functionality. split various objects into their own files.
    make egl_display objec's lock internal.
    Expose core EGL entry points to eglGetProcAddress
    
    Required behavior for EGL_KHR_get_all_proc_addresses.
    
    Change-Id: I1e6209ef3cb9f2fa6f22808b077c35139d4cb814
    Use /(vendor|system)/lib64/egl for 64-bit EGL libraries
    
    Change-Id: Ie64806bfe4ba60a3167b84685cf983d4ada1042d
    try to keep omap4 alive
    
    Bug: 10527646
    Change-Id: Iec572a910e932115cf4f2e1215142b10cd91bd6f
    Find non-extension GLES wrappers in eglGetProcAddress
    
    This allows apps to find OpenGL ES 3.0 functions using
    eglGetProcAddress() instead of dlopen/dlsym.
    
    Bug: 9681677
    Change-Id: I7ce6e1636bc47d6b0bf20a4e46bd67235714d129
    Find non-extension GLES wrappers in eglGetProcAddress
    
    This allows apps to find OpenGL ES 3.0 functions using
    eglGetProcAddress() instead of dlopen/dlsym.
    
    Bug: 9681677
    Change-Id: I7ce6e1636bc47d6b0bf20a4e46bd67235714d129
    change how the userspace GLES drivers are named
    
    for single library:
      /vendor/lib/egl/GLES.so
    
    for multiple libraries:
      /vendor/lib/egl/EGL.so
      /vendor/lib/egl/GLESv1_CM.so
      /vendor/lib/egl/GLESv2.so
    
    EGL_BOARD_CONFIG as well as egl.cfg are not needed anymore.
    
    To facilitate the transition, the loader will also look
    for the older naming scheme.
    
    Bug: 8631636
    Change-Id: Id4b113468df29bae72b323f76598229914e1c7a1
    fix a typo in EGL loader
    
    the code intended to filter out the software-renderer, but the
    test as written was essentially a no-op.
    
    the problem didn't happen most of the time because we had
    updated egl.cfg to not even list the software renderer.
    
    the test as written didn't generate a compile-time error
    because String8 has a const char* cast operator; but the
    end result was to compare pointers instead of the string
    itself.
    
    http://code.google.com/p/android/issues/detail?id=54606
    
    Change-Id: I739dd1c838fbc24c5643a631fae19713a8ef1717
    fix local include paths
    
    Change-Id: Icb921fa796ec08612dbb2feb7e7161bcb0cf4a99
    reduce PB size from 2MB to 512KB
    
    this allows us to enable h/w acceleration on low-end
    devices while keeping memory usage down.
    
    Bug: 6557760
    Change-Id: I8af2de3038dc2579360b8b73aa452cb7a0e506a9
    EGLConfig is now not remaped to an internal EGLConfig
    
    this is possible now that we support only a single
    EGL implementation. this allows a large code simplification.
    
    Change-Id: I7a6b9db4c5d60f4407c6061e7a68729af63d5242
    remove multiplexing of multiple EGL implementation
    
    from now on, the system can only have one EGL
    implementation. this means the software and h/w renderer
    cannot be used at the same time on a device. Of course, the
    h/w renderer is always prefered; in its absence we
    default to the software renderer.
    
    Change-Id: Ib579f58055dd0ce4c4a99144131efa11c16ca3d3
    add support for GL_EXT_debug_marker
    
    This extension is always added to the GL_EXTENSIONS
    extension string for the current GL context, regardless
    of if it's supported by the h/w driver.
    
    The extension itself will be handled by GLES_trace (eventually),
    when GLES_trace is not enabled, it'll result to a no-op.
    
    If the h/w implementation has this extension, we'll call that version
    instead of our dummy version.
    
    Change-Id: Ie5dd3387c4d45cd5ed5f03b73bda6045620a96bc
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    opengl: Ensure we only load the GLES emulation library when the emulator supports it.
    
    This patch modifies the libEGL.so loader to only load the emulator-specific
    EGL/GLES libraries if it detects at runtime that the emulator supports it.
    
    This prevents the system crashing when booting the platform image under an old
    emulator version, or one without GPU emulation enabled.
    
    Change-Id: I711b3f0a4ee1f3b080263780726ce7ec28ff11d6
    opengl: EGL: special case for GLES emulation
    
    This patch modifies the library loaded in libEGL.so to
    handle the case of GLES emulation as follows:
    
    - if we detect that we run inside the emulator, check the
      GPU emulation status through ro.kernel.qemu.gles, which
      will be set to 1 if supported, or 0 otherwise.
    
      When trying to run on an older version of the emulator,
      the kernel parameter will not be defined at all.
    
    - if GPU emulation is supported, use egl.cfg as usual.
      It will contain a line like "0 0 emulation" that will
      load libEGL_android.so appropriately.
    
    - nothing is changed if we don't run inside the emulator.
    
    NOTE: Ideally, we would modify libEGL_emulation.so to
          redirect all calls to libEGL_android.so in this case.
    
          However, this turns out to be extremely tedious to implement
          (too many functions with different signatures).
    
          As such,  it is much simpler to make the check before
          loading the library.
    
    Change-Id: I9930bc168d9013cc8700feedc57b979384467c37
    fix x86 build
    
    Change-Id: I03cfbfeaeb8b13842248856b14b4a23711036e10
    fix (Again) adding OES postfix when looking for gl functions
    
    Change-Id: Ib14723ed5355fdc423226ec20a32e26fe7dd68fe
    add OES postfix without truncating function
    
    Change-Id: Id47304cf38914190cec58d703801f456ab916f63
    GLES2Debugger: Added DbgContext and vertex data capturing.
    
    Send VBO related commands to client, which tracks the state.
    Maintain index buffer content and vertex attrib pointer/buffer state on server.
    During glDrawArrays/Elements, send user memory data to client.
    
    Change-Id: Ia920e90479329b301ae4b5735e833eeb20293c94
    Signed-off-by: David Li <davidxli@google.com>
    Initial commit of GLESv2 debugger server
    
    Use debug.egl.debug_proc property to match process cmdline.
    Binds to TCP:5039 and waits for client connection.
    Sends function call parameters, textures and shaders using Protobuf.
    Java Eclipse client plug-in is next.
    
    Change-Id: I183b755263663f87e86dde1ad12f527d0445fd57
    Signed-off-by: David Li <davidxli@google.com>
    support loading EGL libraries from /vendor/lib/egl as well as /system/lib/egl
    
    Change-Id: Idd9ca85ce3ba6c92234375071b53e5365e689062
    eclair snapshot
    fix [2187212] add support for GLESv2 dispatch based on TLS
    
    Instead of using a different function pointer table for ES 1.x and ES 2.x,
    we use a single one that is the union (sort|uniq) of both tables. Two
    instances of this table are initialized with pointers to GL ES 1.x and GL ES 2.x
    entry-points.
    When a context is created, we store its version number and when it is bound to a
    thread we set the approruiate table based on the stored version.
    
    This introduce no penalty while dispatching gl calls to the right API version.
    
    [Pending Dr No approval for MR1]
    log an error when loading an existing GL driver fails
    fix a bug in ComponentSizeChooser where it could pick a software EGLConfig instead of a better h/w one.
    
    We now just try to honor the stencil / depth buffer "at least", while doing a "shortest distance" on the colors.
    GLESv2 couldn't be loaded due to wrong path specification
    Make opengl loader use an absolute path.
    remove some spurious debuging LOGD
    fix/clean these Android.mk following dbort and joeo's comments
    implement a real loader for EGL drivers
    
    we now look for a config file in /system/lib/egl/egl.cfg that describes the association of a display to a driver.
    these drivers are named: /system/lib/egl/lib{[EGL|GLESv1_CM|GLESv2] | GLES}_$TAG.so
    Add aarch64 EGL/GLES trampolines
    
    Change-Id: Ia90e18d26ff3bdb7e643aff8d77cbaddd2ac2a03
    EGL: add x86/64 assembly code for EGL/GLES wrappers
    
    There was no explicit support for x86/64 architecture in EGL/GLES wrappers.
    This resulted either in failures or sub-optimal implementation of the wrapper functions.
    
    Change-Id: I20d99d7372fbf642ee4b94a05c8cb971cba29988
    Signed-off-by: Wajdeczko, Michal <michal.wajdeczko@intel.com>
    improve GLES jumptables
    
    in the common case this saves one instructions per jump
    (which will help with the i-cache).
    
    this change also gets rid of the "use slow tls" option,
    which was useless. So at least now architectures that don't have
    assembly bindings will perform much better.
    
    Change-Id: I31be6c06ad2136b50ef3a1ac14682d7812ad40d2
    fix local include paths
    
    Change-Id: Icb921fa796ec08612dbb2feb7e7161bcb0cf4a99
    Fix MIPS assembly variable names to not conflict with GL API parameter names
    
    Change-Id: I8e93fb55018de53a596cb176d48dbfdf1fd396e4
    [MIPS] Add MIPS architecture support to opengl framework
    
    Change-Id: Id7704d35bed14d96a85dc1f29db0566cd03872b5
    Simplify OpenGL TLS access on ARM.
    
    bionic now assumes the TLS register is available, so OpenGL can too.
    
    Change-Id: If2b56a4c08de9f887759b78f70022026a181dc47
    add all needed GL extension wrappers
    
    when increasing MAX_NUMBER_OF_GL_EXTENSIONS to 256
    we also needed to create all the corresponding wrappers.
    
    Change-Id: I90edaaf0885ccdfab48e7a1396bcf88e039cfb25
    fix x86 build
    
    Change-Id: I03cfbfeaeb8b13842248856b14b4a23711036e10
    improve a bit the implementation of eglGetProcAddress
    
    Change-Id: Ie07f33ae2162830df1e4f3d3b5e00fcfb8c350d6
    fix [2421247] implement eglGetProcAddress(), needed in the ndk
    
    Change-Id: I5027a27b43c0dd449a404024087853ca05bb8e4e
    EGL: add the ANDROID suffix to the blob cache ext
    
    This change adds the ANDROID suffix to the all the types and functions
    defined by the EGL_ANDROID_blob_cache extension.
    
    Change-Id: I087875b96d9a7053efb9c8d5614f9f765eed799d
    EGL: add deferred saving of the cache
    
    This change causes any insertions into the EGL cache to trigger an
    attempt to save the cache contents to disk.  The save operation is
    deferred to allow multiple cache insertions to be batched up.
    
    Change-Id: I6cfec9c0dbbef94d3f8880860e2a365dccc296c7
    EGL: implement loading and saving the cache
    
    This change adds support for saving and loading the contents of the EGL
    cache.  It also adds some simple tests for the EGL cache.
    
    Change-Id: I18e5e789e0897a0783d29d1c1e64d26de2dd44c4
    EGL: use an in-memory the blob cache
    
    This change makes the makes the stub EGL_ANDROID_blob_cache callbacks
    actually use a BlobCache object.
    
    Bug: 5474671
    Change-Id: I5cbaae2dea3aad2fe306c9f57029c3f215a0863a
    EGL: Add stubs for EGL_ANDROID_blob_cache
    
    This change adds a stub cache implementation that gets passed to the
    underlying EGL implementation at initialization time.
    
    Change-Id: I14437c5b6f91b7a34a19bb02ad802e6e54f88d2a
    fix x86 build
    
    Change-Id: I03cfbfeaeb8b13842248856b14b4a23711036e10
    refactor EGL source code
    
    no changes is functionality. split various objects into their own files.
    make egl_display objec's lock internal.
    small cleanup. gEGLImpl should have been static
    
    also added a ctor to initialized it in case we use it ont he stack
    one day.
    
    Change-Id: I2736b9bce3d8ba3b74fd029de4c18cca2cdbbf60
    eclair snapshot
    fix [2187212] add support for GLESv2 dispatch based on TLS
    
    Instead of using a different function pointer table for ES 1.x and ES 2.x,
    we use a single one that is the union (sort|uniq) of both tables. Two
    instances of this table are initialized with pointers to GL ES 1.x and GL ES 2.x
    entry-points.
    When a context is created, we store its version number and when it is bound to a
    thread we set the approruiate table based on the stored version.
    
    This introduce no penalty while dispatching gl calls to the right API version.
    
    [Pending Dr No approval for MR1]
    fix bug [2021677] egl driver unloaded after eglTerminate() is called
    
    refactored the code so that:
    - EGL APIs that can be called before or after eglInitialize() will work by loading the drivers first
    - make eglGetDisplay() a lot more efficient
    - make sure that EGL drivers are loaded in a thread-safe way
    - don't unload the drivers upon calling eglTerminate(), they're now never unloaded, since there is no safe way to do it (some thread could be running)
    - updated our EGL version to 1.4
    - return better error codes if errors happen during initialization
    implement a real loader for EGL drivers
    
    we now look for a config file in /system/lib/egl/egl.cfg that describes the association of a display to a driver.
    these drivers are named: /system/lib/egl/lib{[EGL|GLESv1_CM|GLESv2] | GLES}_$TAG.so
    donut snapshot
    only export the GL entry-points, hide everything else.
    
    Conflicts:
    
            opengl/libagl/Android.mk
            opengl/libs/Android.mk
            opengl/libs/egl_impl.h
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Remove vestigial remnants of GLES2_dbg
    
    These are left over from an early (not finished?) GL debugging
    facility that morphed into GLES_trace. Most of the rest of it has
    already been removed, these few pieces were still hanging aroung.
    
    Bug: 15028495
    Change-Id: Ib7c03eb8d0db30112e1b83e5262bba03006770de
    EGL: rename CallStack::dump into CallStack::log
    
    Bug: 11324229
    Change-Id: Ibac1be182c336e7aa5ac098f08d18b3c188964b4
    Add ES3 support to libGLESv2 and tracing tools
    
    Since ES3 is backwards compatible with ES2, a new wrapper isn't
    necessary, and the Khronos implementation guidelines recommend
    supporting both versions with the same library.
    
    Change-Id: If9bb02be60ce01cc5fe25d1f40c4e7f37244ebf6
    Add runtime debugging capabilities to OpenGL
    
    The shell property debug.egl.trace can now be set to:
    
    0
      disables tracing
    1
      logs all GL calls
    error
      checks glGetError after every GL call, logs a stack trace on error
    systrace
      logs each GL call to systrace
    
    Change-Id: I34a2a2d4e19c373fd9eaa1b0cd93e67c87378996
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    fix x86 build
    
    Change-Id: I03cfbfeaeb8b13842248856b14b4a23711036e10
    GLES2Debugger: Added DbgContext and vertex data capturing.
    
    Send VBO related commands to client, which tracks the state.
    Maintain index buffer content and vertex attrib pointer/buffer state on server.
    During glDrawArrays/Elements, send user memory data to client.
    
    Change-Id: Ia920e90479329b301ae4b5735e833eeb20293c94
    Signed-off-by: David Li <davidxli@google.com>
    Initial commit of GLESv2 debugger server
    
    Use debug.egl.debug_proc property to match process cmdline.
    Binds to TCP:5039 and waits for client connection.
    Sends function call parameters, textures and shaders using Protobuf.
    Java Eclipse client plug-in is next.
    
    Change-Id: I183b755263663f87e86dde1ad12f527d0445fd57
    Signed-off-by: David Li <davidxli@google.com>
    Trace glUniformXXv and glUniformMatrixXfv calls.
    
    Change-Id: I653021d2174fa1a7343d10b0fd2c29b3e5147be6
    OpenGL tracing.
    
    Enable with:
    
    adb shell setprop debug.egl.trace 1
    
    Change-Id: Icfbc795f5260141510975228e72234e9aab56a85
    Make Flattenable not virtual
    
    Fallout from the Flattenable change, update all its uses.
    
    Additionnaly, fix/tighten size checks when (un)flatten()ing
    things.
    
    Removed the assumption by some flattenables (e.g.: Fence)
    that the size passed to them would be exact (it can
    and will be larger in some cases)
    
    The code in Parcel is a bit complicated so that we don't
    have to expose the full implementation (and also to
    keep the code smallish).
    
    Change-Id: I0bf1c8aca2a3128491b4f45510bc46667e566dde
    EGL: fix eglTerminate blob cache behavior
    
    Bug: 9610573
    Change-Id: I258e7e0d82ab76fbacf0b9c25d4f92fca6df04ac
    fix local include paths
    
    Change-Id: Icb921fa796ec08612dbb2feb7e7161bcb0cf4a99
    EGL: make max cache key size BoardConfig-able
    
    This change makes the maximum EGL blob cache key size configurable via a
    BoardConfig.
    
    Change-Id: Ic669cd25fc743662bd4f13aab62354fc3d54560c
    EGL: do not use sparse files for shader
    
    - Process is killed by system with SIGBUS signal if it writes
      data to mapped sparse file on full filesystem.
    - Allocate space using write() function instead of ftruncate()
      to avoid creation of sparse files on full filesystem.
      Catch write() errors to handle out-of-space case during allocation.
    
    Bug: http://code.google.com/p/android/issues/detail?id=35376
    Change-Id: Ifc366454f34e71a43a0973eda4f591a920ea3a14
    Signed-off-by: Kirill Artamonov <kartamonov@nvidia.com>
    remove multiplexing of multiple EGL implementation
    
    from now on, the system can only have one EGL
    implementation. this means the software and h/w renderer
    cannot be used at the same time on a device. Of course, the
    h/w renderer is always prefered; in its absence we
    default to the software renderer.
    
    Change-Id: Ib579f58055dd0ce4c4a99144131efa11c16ca3d3
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    EGL: Use cache sizes defined in the BoardConfig
    
    This change introduces two new BoardConfig variables to control the size
    limits of the EGL blob cache.  MAX_EGL_CACHE_ENTRY_SIZE is the size
    limit for values inserted into the cache, and MAX_EGL_CACHE_SIZE is the
    size limit for all entries in the entire cache (including both keys and
    values).  If either of these BoardConfig variables are not defined then
    a default size limit is used instead.
    
    Change-Id: I6703d93f966b6389c6499f23d841e42339f9c9d7
    EGL: fix blob cache extension detection
    
    Bug: 5474671
    Change-Id: I6359063ccf23f076fc84c80b8a2f6731a65eef18
    EGL: add the ANDROID suffix to the blob cache ext
    
    This change adds the ANDROID suffix to the all the types and functions
    defined by the EGL_ANDROID_blob_cache extension.
    
    Change-Id: I087875b96d9a7053efb9c8d5614f9f765eed799d
    EGL: add deferred saving of the cache
    
    This change causes any insertions into the EGL cache to trigger an
    attempt to save the cache contents to disk.  The save operation is
    deferred to allow multiple cache insertions to be batched up.
    
    Change-Id: I6cfec9c0dbbef94d3f8880860e2a365dccc296c7
    EGL: implement loading and saving the cache
    
    This change adds support for saving and loading the contents of the EGL
    cache.  It also adds some simple tests for the EGL cache.
    
    Change-Id: I18e5e789e0897a0783d29d1c1e64d26de2dd44c4
    EGL: use an in-memory the blob cache
    
    This change makes the makes the stub EGL_ANDROID_blob_cache callbacks
    actually use a BlobCache object.
    
    Bug: 5474671
    Change-Id: I5cbaae2dea3aad2fe306c9f57029c3f215a0863a
    EGL: Add stubs for EGL_ANDROID_blob_cache
    
    This change adds a stub cache implementation that gets passed to the
    underlying EGL implementation at initialization time.
    
    Change-Id: I14437c5b6f91b7a34a19bb02ad802e6e54f88d2a
    Revert "Modify EGL to disconnect the window when the surface gets destroyed."
    
    This reverts commit 843cbb241da60ada234918a30cfe9a01a1e04187.
    Revert "Modify EGL to disconnect the window when the surface gets destroyed."
    
    This reverts commit 843cbb241da60ada234918a30cfe9a01a1e04187.
    Modify EGL to disconnect the window when the surface gets destroyed.
    
    Bug: 14445579
    
    Change-Id: I1d263ff6cffcb6e448761fca7ca4b06466ad65aa
    Expose core EGL entry points to eglGetProcAddress
    
    Required behavior for EGL_KHR_get_all_proc_addresses.
    
    Change-Id: I1e6209ef3cb9f2fa6f22808b077c35139d4cb814
    Make libEGL build cleanly under 64-bit
    
    Change-Id: I255dfb70b166b7469d59352b1acfc7aececa07de
    Make libEGL build cleanly under 64-bit
    
    Change-Id: I255dfb70b166b7469d59352b1acfc7aececa07de
    Improve error message
    
    The previous message indicated that the fault was due to an already-
    connected window, which was misleading at times.
    
    Bug 12439318
    
    Change-Id: I1e0a042673dd245d1b0d237af963c52946803eb6
    GLConsumer: start using EGL_ANDROID_image_crop
    
    This change makes GLConsumer use the EGL_ANDROID_image_crop extension when
    available on a device.  The crop rectangle is passed to the EGL driver when
    creating EGLImages, allowing the crop to be performed by the driver rather than
    using the texture transform matrix.
    
    Bug: 10897141
    Change-Id: I63e9a5d5c85067376abc420e3639154468346311
    Disable the egl_khr_gl_colorspace extension
    
    Bug: 10777398
    Change-Id: Ib50ea8b9d5d960537701b85929d6312304993a0f
    fix a possible null dereference when eglMakeCurrent() fails
    
    Bug: 10648797
    Change-Id: Iee0be47f2646feb25de4ea199bbb9b707452916e
    try to keep omap4 alive
    
    Bug: 10527646
    Change-Id: Iec572a910e932115cf4f2e1215142b10cd91bd6f
    only use format compatible with CPU consumers
    
    EGL now picks the buffer format out of a small set
    of formats compatible with CPU consumers instead of
    using the EGL_NATIVE_VISUAL_ID.
    
    Bug: 10194508
    Change-Id: If423cd29601b7a3ace8670f4c73004132cfc4b31
    Replace sRGB_888 with sRGB_X_8888
    
    Bug: 10357459
    Change-Id: I3a1d92cce2c9d3e930408129fb20887276fffddc
    Add support for EGL_KHR_gl_colorspace
    
    Change-Id: I684d0b8556cd6c84ee4b4d67e1bb95c3b96fccfb
    Don't swallow eglCreateContext errors
    
    If the implementation eglCreateContext failed, we called
    eglGetError(), so we could check that it set the EGL error properly.
    But since we'd already called this, when the app called eglGetError()
    it would get EGL_SUCCESS!
    
    Bug: 10181333
    Change-Id: Ic45d3a8fcb8c4421e04844c6d2f52761790b5948
    Add EGL_KHR_get_all_proc_addresses to extension string
    
    We've had the extended behavior since Android 4.3, but the extension
    hadn't been ratified by Khronos yet so we couldn't add it to the
    extension string.
    
    Bug: 9681677
    Change-Id: I78842316a3ab7a3f66a0ac1a4742d837de664c4c
    Drop frames based on presentation timestamp
    
    If there are two or more buffers pending that are ready for
    immediate presentation, drop all but the last one.
    
    Any code that didn't explicitly specify timestamps for buffers
    was using the default value (auto-generated "now").  As a result,
    surfaceflinger would drop frames whenever more than one buffer
    was queued.  We now use zero as the auto-generated timestamp,
    and we don't set the timestamp in eglBeginFrame().
    
    Change-Id: I187f42d33de227cd3411ff0dcd3b9ce1961457eb
    EGL: Fix error for eglCreateWindowSurface
    
    The EGL 1.4 spec section 3.5.1 states that EGL_BAD_ALLOC should be set
    if the supplied window already has an associated EGLSurface, not
    EGL_BAD_NATIVE_WINDOW as is currently set.
    
    Change-Id: If1598617f4e31904f2045560ae1cdf49d8a697dc
    Find non-extension GLES wrappers in eglGetProcAddress
    
    This allows apps to find OpenGL ES 3.0 functions using
    eglGetProcAddress() instead of dlopen/dlsym.
    
    Bug: 9681677
    Change-Id: I7ce6e1636bc47d6b0bf20a4e46bd67235714d129
    Find non-extension GLES wrappers in eglGetProcAddress
    
    This allows apps to find OpenGL ES 3.0 functions using
    eglGetProcAddress() instead of dlopen/dlsym.
    
    Bug: 9681677
    Change-Id: I7ce6e1636bc47d6b0bf20a4e46bd67235714d129
    improve GLES jumptables
    
    in the common case this saves one instructions per jump
    (which will help with the i-cache).
    
    this change also gets rid of the "use slow tls" option,
    which was useless. So at least now architectures that don't have
    assembly bindings will perform much better.
    
    Change-Id: I31be6c06ad2136b50ef3a1ac14682d7812ad40d2
    free EGL resources associated to a thread when it terminates
    
    destroyed but current-to-a-thread resources are only destroyed
    when they're made not-current; however, we were not destroying
    those when the thread itself terminated, causing these resources
    to be leaked forever.
    
    we now install a tls-key destructor that takes care of this
    by calling eglReleaseThread upon thread termination.
    
    Bug: 9209776
    Change-Id: I88298a34e3a27488eb81eab76717715569c7d57c
    EGL: expose the EGL_KHR_create_context extension
    
    Bug: 8616866
    Change-Id: Ic60f9f21397a1760c552b6f141d5177d1cbaf1f8
    fix "traceGpuCompletion" debug feature
    
    eglCreateSyncKHR requires a call to glFlush which we were not doing.
    fixed by moving the code above eglSwapBuffers(), which both
    fixes the problem and gives us a slightly better idea of when
    the GPU is done drawing.
    
    Change-Id: Ic826ef1fe25a6247742c3d49d0cb69f4031e3593
    fix local include paths
    
    Change-Id: Icb921fa796ec08612dbb2feb7e7161bcb0cf4a99
    don't use compile-time configuration of libgui as much as possible
    
    We now detect at runtime which sync features to use, which
    allows us to remove a lot of the compile-time configuration
    options. There  is still one option though, to disable
    KHR_fence_sync on some devices (which are more efficient
    without it).
    
    - added a backdoor to get the vendor's EGL strings
    
    the new logic is:
    - use always ANDROID_native_fence_sync if available
    - fallback to KHR_fence_sync if available and not disabled
      by the compile-time option
    - use KHR_wait_sync if available and either of the above is
      enabled
    
    Change-Id: I9c4b49d9ff1151faf902cc93bd53ea5f205aaabf
    replace eglWaitSyncANDROID by eglWaitSyncKHR
    
    Change-Id: I22f1b3588011c88389e249f738f1e6915cc97e72
    cleanup EGL extensions strings and entry-points
    
    - move all the code related to EGL extensions in one place
    
    - add missing extension strings:
       EGL_KHR_lock_surface
       EGL_KHR_reusable_sync
    
    - add public extensions strings and entry-points
       EGL_ANDROID_wait_sync
       EGL_ANDROID_presentation_time
    
    - add missing entry-points for EGL_KHR_reusable_sync
    
    Change-Id: Ifd98966b549e8efd8ef5385eba0efde8c4cbc77b
    Add eglPresentationTimeANDROID
    
    Added EGL extension to set a timestamp on a surface.
    
    Also, fix JNI encoding of "long" in glgen.
    
    Bug 8191230
    
    Change-Id: I38b7334bade3f8ff02bffe600bb74469ef22c164
    Add ES3 support to libGLESv2 and tracing tools
    
    Since ES3 is backwards compatible with ES2, a new wrapper isn't
    necessary, and the Khronos implementation guidelines recommend
    supporting both versions with the same library.
    
    Change-Id: If9bb02be60ce01cc5fe25d1f40c4e7f37244ebf6
    Gfx-3d: fix GetProcAddress in egl extention
    
    This patch can fix issue when Proc address return NULL.
    Glbench10, egl-ext and conformance test need this patch to run pass.
    
    Change-Id: I275c7cb6f77cb334c3ee7fa23cd696bba1c5a458
    Author: Liuhui Lu <liuhui.lu@intel.com>
    Signed-off-by: Shuo Gao <shuo.gao@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Author-tracking-BZ: 52622
    gltrace: Add support for tracing running applications.
    
    Currently, to activate OpenGL tracing, an application has to be
    start with --opengl-trace option (or have a debug prop set).
    
    This CL adds support for tracing an application which may already
    be running. This is implemented as follows:
        - DDMS initiates a JDWP message to the VM indicating that
          opengl traces be enabled.
        - When that message is received, a flag is set that indicates
          that tracing should be enabled.
        - The trace flag is checked during every eglSwap() operation,
          and if it finds that tracing should be active and it isn't,
          then it starts the tracing component.
    
    Change-Id: I3347fe89fc06c7404d7aa9360f4b21e5bf36ebcb
    Update comments to reflect what the code actually does
    
    Change-Id: I2613aa32c29eddc52a00090656c1bd11f9f5732b
    Add new debug option to force 4x MSAA in OpenGL ES 2.0 apps
    
    Change-Id: I53ac91a9ce07b5dd5f2ee0e3cc5b65b6402f9229
    log an error when eglCreateContext() fails in an inconsistant way
    
    this will help debugging bug: 7216919
    
    Change-Id: I54ac65f20c5ed55cc93a5cbc5350fadfb0fcb804
    Return back-end result from eglDestroyImageKHR
    
    Change-Id: I0e972b778f9802c28f52092bb9af087285833e0b
    Additional parameter validation for EGL functions
    
    Change-Id: I841d005647559799edbc2c4824c61ea5791cf893
    EGL: Add the EGL_ANDROID_wait_sync extension
    
    Change-Id: Ie9a78e07fcaf27c5c13797141ad3c692217607fb
    EGL: add the native_fence_sync extension
    
    This change adds support for the EGL_ANDROID_native_fence_sync extension to the
    Android EGL layer.  It also fixes a couple minor issues with the extension spec.
    
    Change-Id: Ic8829d21f37b701f33aa9c72c3d25e88e03fa3cd
    egl: Reintroduce eglGetRenderBufferANDROID
    
    eglGetRenderBufferANDROID was removed as it had no users. This commit
    reintroduces this extensions as it's used by Qualcomm graphics HAL.
    
    Change-Id: I493306830a0d4f8722a42bcc84fb49236afdabeb
    Hibernate the EGL implementation when idle
    
    If the EGL implementation supports the EGL_IMG_hibernate_process
    extension, use it to hibernate (and hopefully release memory or other
    resources) when the process isn't actively using EGL or OpenGL ES. The
    idleness heuristic used in this change is:
    
    (a) Wake up when entering any EGL API call, and remain awake for the
        duration of the call.
    (b) Do not hibernate when any window surface exists; this means the
        application is very likely in the foreground.
    (c) Do not hibernate while any context is made current to a thread.
        The app may be using a client API without the EGL layer knowing,
        so it is not safe to hibernate.
    (d) Only check these conditions and attempt to hibernate after a
        window surface is destroyed or a thread's context is detached. By
        not attempting to hibernate at the end of every EGL call, we avoid
        some transient wakeups/hibernate cycles when the app is mostly idle,
        or is starting to become active but hasn't created its window
        surface yet.
    
    On a Galaxy Nexus, hibernating frees 1567 VM pages from the process.
    Both hibernating and waking can take anywhere from 30ms to over 100ms
    -- measurements have been very inconsistent.
    
    Change-Id: Ib555f5d9d069aefccca06e8173a89625b5f32d7e
    Increment/decrement a counter around EGL calls
    
    This is in preparation for a change that will hibernate the underlying
    EGL when idle. Instead of a bare egl_display_t*, get_display() now
    returns a egl_display_ptr, which acts like a smart pointer. The
    "wakecount" counter managed by the smart pointer isn't used for
    anything in this change. It will be used to make sure we don't
    hibernate when any thread is in an EGL call, without having to hold a
    mutex for the duration of the call.
    
    Change-Id: Iee52f3549a51162efc3800e1195d3f76bba2f2ce
    EGL: add GPU frame completion tracing
    
    This change adds a debug option to EGL to use an EGLSyncKHR each frame to
    determine when the GPU finishes rendering the frame.
    
    Change-Id: I09ce071db904b44f07ca814c586c291c8b59385a
    debug.egl.finish can be used to force a glFinish() when eglSwapBuffers() is called
    
    this debug property is evaludated at eglInitialize() time.
    
    Change-Id: Ie439e4aac87f7fdc6ab2add86183d6d042f3ee8b
    Add tracing to various graphics components.
    
    This change adds ATRACE call tracing to BufferQueue,
    SurfaceTextureClient, SurfaceTexture, SurfaceFlinger, Layer, and EGL.
    
    Change-Id: I9d75ed26f5a3f0d1af635da38289520134cfbbb7
    Don't wrap EGLImageKHR and EGLSyncKHR anymore
    
    this simplify our EGL wrapper implementation a lot.
    This wrapping is no longer needed now that we can only
    support a single underlaying EGL implementation.
    
    Change-Id: I8213df7ac69daac447f1fe6e37044b78aac4e9a9
    EGLConfig is now not remaped to an internal EGLConfig
    
    this is possible now that we support only a single
    EGL implementation. this allows a large code simplification.
    
    Change-Id: I7a6b9db4c5d60f4407c6061e7a68729af63d5242
    remove multiplexing of multiple EGL implementation
    
    from now on, the system can only have one EGL
    implementation. this means the software and h/w renderer
    cannot be used at the same time on a device. Of course, the
    h/w renderer is always prefered; in its absence we
    default to the software renderer.
    
    Change-Id: Ib579f58055dd0ce4c4a99144131efa11c16ca3d3
    fix a race condition in eglMakeCurrent()
    
    it would happen when a context was made non-current, in this
    case we would call the implementation's eglMakeCurrent() which
    would succeed, if we're rescheduled at that point, another
    eglMakeCurrent() could make that context current to another thread,
    however, when we came back to the original call we would
    overwrite egl_context_t internal state.
    
    this is fixed by moving the critical section under
    egl_display_t's lock.
    
    Change-Id: I743c85696e13263d3a9570824940263df0caacdc
    add support for GL_EXT_debug_marker
    
    This extension is always added to the GL_EXTENSIONS
    extension string for the current GL context, regardless
    of if it's supported by the h/w driver.
    
    The extension itself will be handled by GLES_trace (eventually),
    when GLES_trace is not enabled, it'll result to a no-op.
    
    If the h/w implementation has this extension, we'll call that version
    instead of our dummy version.
    
    Change-Id: Ie5dd3387c4d45cd5ed5f03b73bda6045620a96bc
    hack up frame latency measurement
    
    Change-Id: I6d9a466a23285304f0e229a5649815636ab5d6af
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    gltrace: transport buffering and context management
    
    This patch adds two improvements:
    1. Protobuf messages are buffered and sent in chunks.
    2. Multiple EGL contexts are handled properly: Corresponding
    to each EGLContext, a GLTraceContext with a unique ID is created.
    On eglMakeCurrent, the appropriate GLTraceContext is set and is
    used while tracing subsequent GL Calls in that thread.
    
    Change-Id: I34076376d3e5af205c87c7396ea47659844abd6e
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    add a way to access the version string of the h/w implementation of EGL
    
    we use a hidden egl extension. the version string is printed
    in SF's dumpsys log.
    
    Change-Id: I123eb4bde6de462bb2404c67b74d6d6219a48d6a
    EGL: default to swap interval 1
    
    This change explicitly sets swap interval 1 on the window when an
    EGLSurface is created to render to it.
    
    Change-Id: I91eb29dbee3ae4a55076b921f084d503fbe94e03
    fix crash when validating an invalid EGL objects
    
    the code that validated EGL objects dereferenced the object
    to access its EGLDisplay -- needed for validation (!).
    This was wrong for two reasons, first we dereferenced the object
    before validating it (potentially leading to a crash), secondly
    we didn't validate that the object existed in the right EGLDisplay.
    
    We now use the EGLDisplay passed by the user API.
    
    Change-Id: I66f9e851d4f8507892a6b1fee3065f124c4e7138
    rework a bit how we manage EGL extensions
    
    - don't advertise extensions that are not supported
      by any implementation
    
    - remove EGL_ANDROID_swap_rectangle which is not
      implemented by anybody and confuses people
    
    - add some comments about mandatory extensions
    
    Bug: 5428001
    Change-Id: Id8dc48116ac1d1eb79ec9ef55d03e29d4257c1f3
    fix crash when validating an invalid EGL objects
    
    the code that validated EGL objects dereferenced the object
    to access its EGLDisplay -- needed for validation (!).
    This was wrong for two reasons, first we dereferenced the object
    before validating it (potentially leading to a crash), secondly
    we didn't validate that the object existed in the right EGLDisplay.
    
    We now use the EGLDisplay passed by the user API.
    
    Change-Id: I66f9e851d4f8507892a6b1fee3065f124c4e7138
    EGL: add the ANDROID suffix to the blob cache ext
    
    This change adds the ANDROID suffix to the all the types and functions
    defined by the EGL_ANDROID_blob_cache extension.
    
    Change-Id: I087875b96d9a7053efb9c8d5614f9f765eed799d
    EGL: Add stubs for EGL_ANDROID_blob_cache
    
    This change adds a stub cache implementation that gets passed to the
    underlying EGL implementation at initialization time.
    
    Change-Id: I14437c5b6f91b7a34a19bb02ad802e6e54f88d2a
    don't log EGL errors due to unimplemented proprietary extensions
    
    Change-Id: Icfc33d4f55d1e7fb49390ce0921ba37a438c9fc2
    Add (support for) EGL_NV_system_time extension.
    
    Change-Id: I62bf0fcb5ccdc77c042b425a42054fb3122575b6
    Signed-off-by: Mathias Agopian <mathias@google.com>
    fix logging of eglMakeCurrent() errors
    
    Change-Id: Ie22cabff822a8fb3186f082491234b9503b431c3
    EGL: move disconnect to surface dtor
    
    This change moves the call to native_window_api_disconnect from
    eglDestroySurface to the egl_surface_t destructor.  The egl_surface_t
    can outlive the external EGLSurface if eglDestroySurface is called while
    the surface is made current on a thread.
    
    Change-Id: I0df6117a5633c2a19935fe356579abdd76fc471f
    connect/disconnect is now called from our EGL wrapper
    
    the original connect/disconnect hooks are deprecated
    and replace by api_connect/api_disconnect. the original
    hooks are no no-ops.
    api_connect/api_disconnect is now only called from the
    android framework.
    
    Bug: 5057915
    Change-Id: I8ca64cd1acd6cabf915bf54689ec2e5f6dfa495a
    EGL: fix the ANativeWindow size/fmt override
    
    This change fixes how the Android EGL layer overrides the size and
    format of an ANativeWindow in eglCreateWindowSurface.  The new behavior
    is to leave the size untouched when overriding the format.  The previous
    behavior was to reset the ANativeWindow to use the default size set by
    the ANativeWindow implementation.
    
    It also adds two new 'perform' methods to the ANativeWindow interface:
    set_buffers_dimensions and set_buffers_format, and redefines the
    behavior of set_buffers_geometry to be the combination of these two new
    methods.
    
    Additionally, this change adds an error check for the return value of
    the new native_window_set_buffers_format call, which required adding a
    (stub) handler for to FramebufferNativeWindow.
    
    Change-Id: I805c7ccd8d4730dfb132d10d8bc3fb058a0b9df1
    eglTerminate() now actually frees up all active egl objects
    
    as specified by the EGL specification, terminated objects's
    handles become invalid, the objects themselves are destroyed
    when they're not current to some thread.
    
    Change-Id: Id3a4a5736a5bbc3926a9ae8385d43772edb88eeb
    refactor EGL source code
    
    no changes is functionality. split various objects into their own files.
    make egl_display objec's lock internal.
    EGL: Allow creating a SurfaceTexture EGLSurface.
    
    This change removes the check that disallowed the creation of an
    EGLSurface that would send frames to a SurfaceTexture.
    
    Change-Id: I44c6d5df503cc676a88144d72d39b414692ce4c9
    GLES2Dbg: use dump.gles2dbg file when fails to create socket
    
    setprop debug.egl.debug_forceUseFile 1: always use file
    setprop debug.egl.debug_maxFileSize <int MB>: exit when reached
    setprop debug.egl.debug_filePath <path>: may need to make the file
     writable first.
    setprop debug.egl.debug_port <unsigned short>
    setprop debug.egl.debug_proc <proc cmdline>: to match debuggee process
    
    Change-Id: I34ca1f3092f3abf17e2ded9d1689d0cdef6e07e8
    Signed-off-by: David Li <davidxli@google.com>
    GLES2Dbg: change GLES2_dbg to shared library
    
    Change-Id: I493e9bff431bd939f4e80e1e9c614dd557307fa2
    Signed-off-by: David Li <davidxli@google.com>
    Initialize reference counter for egl_display_t
    
    Add missing member initialization for reference counter, used to determine
    if a context is ready.
    
    Change-Id: I45f81177ac2851129681f827afe015b60b3cd73c
    egl: fixes for object refcounts
    
    eglMakeCurrent() would only deref the previous surfaces if the old and
    new contexts were the same.  eglTerminate() should not touch TLS.
    eglReleaseThread() needs to unbind the current context.
    
    Change-Id: I7f4c090a287ee1e29e4708ae10679fb9d7d8c8c5
    Related-Bug: 2964479
    Make objects collection a member of egl_display object
    
    Move EGL objects (contexts, surfaces, ...) collection from global
    static into EGL display object. Since EGL implementation currently
    supports only one display, this doesn't change current logic. This
    aims at preparing for next coming changes in eglTerminate() to
    support per-display cleanup.
    
    Bug: 4152714
    Change-Id: I5e424781b89c3c275f9922f943463d5f6b1f6bc6
    Check for initialized EGLDisplay when required by specification
    
    Check for initialized display, and set EGL error to EGL_NOT_INITIALIZED
    whenever it isn't, for all EGL functions taking an EGLDisplay as argument
    and requiring it to have been initialized.
    
    Bug: 3366011
    Change-Id: Ib1d8a3a207257995518f4430fe97f8c406c7fc13
    fix [4107131] nvidia driver call takes a very long time
    
    We were leaking all EGLSyncKHR objects, over time the list
    would grow and become very slow to operate on.
    
    Bug: 4107131
    Change-Id: I6c82daf49fe3189d04550781d64d57c30c95f552
    SurfaceTexture: disallow unsupported uses.
    
    This change makes the ANativeWindow_lock NDK function error out if it is
    passed an ANativeWindow with a concrete type that is not Surface.  It
    also makes eglCreateWindowSurface fail if it is passed a
    SurfaceTextureClient as its 'window' argument.
    
    Bug: 4087277
    Change-Id: Ie68c50c52d88f72d8a387f6c094908044c83a88c
    GLES2Debugger: Make command exchange async to improve performance.
    
    In message loop, use select to check for available commands from client,
     rather than always expecting commands in eglSwapBuffers.
    
    Change-Id: Ifc34dd77c2528c8b9c71f594e3eda4f93400cd2b
    Signed-off-by: David Li <davidxli@google.com>
    GLES2Debugger: Added DbgContext and vertex data capturing.
    
    Send VBO related commands to client, which tracks the state.
    Maintain index buffer content and vertex attrib pointer/buffer state on server.
    During glDrawArrays/Elements, send user memory data to client.
    
    Change-Id: Ia920e90479329b301ae4b5735e833eeb20293c94
    Signed-off-by: David Li <davidxli@google.com>
    Added screenshot after glDraw* option to GLES2 Debugger
    
    Also added timing mode option using utils/Timers.h.
    Factored out common code to reduce size.
    Improved Protobuf message.
    Uploads data from glBufferData and glBufferSubData.
    
    Change-Id: Iaae5e706235d942df81c7eada7223fb0b0583911
    Signed-off-by: David Li <davidxli@google.com>
    Initial commit of GLESv2 debugger server
    
    Use debug.egl.debug_proc property to match process cmdline.
    Binds to TCP:5039 and waits for client connection.
    Sends function call parameters, textures and shaders using Protobuf.
    Java Eclipse client plug-in is next.
    
    Change-Id: I183b755263663f87e86dde1ad12f527d0445fd57
    Signed-off-by: David Li <davidxli@google.com>
    egl: fixes for object refcounts
    
    eglMakeCurrent() would only deref the previous surfaces if the old and
    new contexts were the same.  eglTerminate() should not touch TLS.
    eglReleaseThread() needs to unbind the current context.
    
    Change-Id: I7f4c090a287ee1e29e4708ae10679fb9d7d8c8c5
    Related-Bug: 2964479
    Clean up use of HAVE_ANDROID_OS
    
    HAVE_ANDROID_OS was defined as "1" for targets, but never defined as "0"
    for non-targets. Changing them to #ifdef should be safe and matches
    all the other uses of HAVE_ANDROID_OS throughout the system.
    
    Change-Id: I82257325a8ae5e4e4371ddfc4dbf51cea8ea0abb
    Clear all EGL errors when entering EGL funcs.
    
    This changes the clearError function in the EGL wrapper layer to simply
    call eglGetError().  That should clear any pending errors from all the
    underlying EGL implementations, which is needed to correctly report the
    error for the most recently called EGL function.
    
    Change-Id: Iad19c69f0c5305e873f3c2f96d353280d31f7b61
    stubs
    
    Change-Id: I829039f3817a172e66eeb9df397e896a488a259d
    egl: clear error on function entry
    
    Clear the current thread error state on entry to API functions as
    mandated by the EGL 1.4 specification, section 3.1.  glGetError
    returns additional information about the "most recent EGL function".
    
    Change-Id: Ic24c64b39294ffc1a4e43fa72663e076b9d7decf
    egl: fix GetProcAddress for EGLimage extensions
    
    Return wrappers from GetProcAddress for glEGLImageTargetTexture2DOES
    and glEGLImageTargetRenderbufferStorageOES which unwrap the EGLimage
    handle before calling through to the implementation.
    
    Change-Id: I2f5b180ab3ccdb28a4f510a2bd8c2eee941a84df
    egl: expose EGLimage extensions
    
    Add EGL_KHR_gl_texture_cubemap_image and EGL_KHR_gl_renderbuffer_image
    to the static EGL extension string since these require no new APIs
    beyond what is already required.
    
    Change-Id: I2d1fde86b19bb9eee46b3b977f51784a17cfcc3c
    egl: fixes for object refcounts
    
    eglMakeCurrent() would only deref the previous surfaces if the old and
    new contexts were the same.  eglTerminate() should not touch TLS.
    eglReleaseThread() needs to unbind the current context.
    
    Change-Id: I213b8be77b1a23b5a8a6afaac60643662c8aa010
    fix [3258603] 'Quadrant' benchmark crashes inside eglQueryContext on GB/Crespo
    
    eglQueryContext(..., EGL_CONFIG_ID, ...) is dereferencing an uninitialized pointer
    due to a typo.
    
    Change-Id: I100addf3150f19cb6dfbce9987fb5239dd240878
    [3229973, 3247470, ...] set EGLNativeWindowSurface's format in EGL
    
    (there are multiple bugs this should fix)
    
    we now use the EGL_NATIVE_VISUAL_ID of a config to set
    the ANativeWindow's format from eglCreateWindowSurface(),
    this guarantees that the surface's format will match
    whatever EGLConfig the user chose.
    
    this should fix all current and future config/surface format
    mismatch and allow users to easily select 32-bits surfaces.
    
    Change-Id: I3835d0eb70c75eeecded3c3509a0a8207554c98b
    DO NOT MERGE. workaround [3177481] eglGetProcAddress() returns the wrong pointer for some GL extensions
    
    We just make sure eglGetProcAddress() will return NULL for
     glEGLImageTargetTexture2DOES
     glEGLImageTargetRenderbufferStorageOES
    
    which is better than returning the address of the wrong implementation.
    
    the correct fix is more involved.
    
    Change-Id: I585a1f40e564f862e5dd382224609ccd069cd3b5
    OpenGL tracing.
    
    Enable with:
    
    adb shell setprop debug.egl.trace 1
    
    Change-Id: Icfbc795f5260141510975228e72234e9aab56a85
    better fix for [3028370] GL get error should return a valid error if no context is bound.
    
    it turns out that we cannot return INVALID_OPERATION from glGetError() because the
    GL spec says that it must be called in a loop until it returns GL_NO_ERROR.
    
    now, we always return 0 from GL functions called from a thread with no
    context bound. This means that glGetError() will return NO_ERROR in this case,
    which is better than returning a random value (which could trap the app in a loop).
    
    if this happens in the main thread of a process, we LOG an error message once.
    
    Change-Id: Id59620e675a890286ef62a257c02b06e0fdcaf69
    fix [3028370] GL get error should return a valid error if no context is bound.
    
    glGetError() will now always return GL_INVALID_OPERATION if called from a thread
    with no GL context bound.
    
    Change-Id: I28ba458871db051bb4f5a26668a1fa123526869c
    fix typo EGL_NO_IMAGE_KHR -> EGL_NO_SYNC_KHR
    
    Change-Id: I38c87803e32030918f2deb06381eabce0faa870c
    fix small bug in EGL error management
    
    make sure to clear our EGL implementation's error when returning
    an error from an underlying implementation
    
    Change-Id: Ibce4726cef1f900e4c7f16002345d7a07f8cdf41
    Add support for KHR_fence_sync
    
    Change-Id: Ie2771b5869c9c8dcf5ecf9318e2ee6d4d1cd5cc9
    Fix a few typos in EGL wrapper
    
    Change-Id: I3b815ca6ec334ca12088f9721eece33df42b2e46
    Add KHR_gl_texture_2D_image extension string.
    cleanup EGL a bit. remove unused extension.
    
    Change-Id: I7758bc7d6dc2e70fc3590fe939ebf71fbcde7059
    cleanup EGL a bit. remove unused extension.
    
    Change-Id: Ia87120b076ab1bf7b28f06087878d8161fb46c88
    fix [2912927] Can't get NV_draw_path extension to work
    
    there was a problem with eglGetProcAddress() which would only work with
    GLES 1.x contexts.
    
    Change-Id: I4747671cbf7ed469bb471a377f1d6f36550d24df
    frameworks/base/opengl: Add NULL check
    
    Check for the validity of the attrs_list in eglChooseConfig before using
    it. This avoids a crash during tests in which the attributes are NULL.
    
    Change-Id: I1c0a46b505ae919e2454cfdce32f8dfc21ead247
    fix [2421247] implement eglGetProcAddress(), needed in the ndk
    
    Change-Id: I5027a27b43c0dd449a404024087853ca05bb8e4e
    Fix a bug that prevented the creation of EGL shared contexts.
    
    Change-Id: I6b0ec5ef86abdd4e9083067ba297107cfb094df3
    fix [2870926] Issue 9802: EGL wrapper has not been implemented correctly for eglQuerySurface().
    
    rework how our EGL wrapper manages EGLConfig:
    
    - we now store the EGLConfig with the EGLSurface and EGLContext
      so that we can have easy access to it from eglQueryContext
      and eglQuerySurface.
    
    - EGLConfig now are an index into a sorted table of egl_config_t,
      we use a binary search to retrieve our EGLConfig (the index) from
      the implementation's EGLConfig.
    
    - egl_config_t keeps track of the implementation's index,
      EGLConfig and CONFIG_ID as well as our CONFIG_ID.
    
    In many ways, this implementation is simpler and more robust, as it doesn't
    assume anything about the number of implementations nor what EGLConfig is
    made of (the previous code assumed EGLConfig didn't usem more than 24-bits).
    
    Change-Id: Id5abe923aacb6e1fd2b63bd8c15d7b04ae824922
    Fix a bug that prevented the creation of EGL shared contexts.
    
    Change-Id: I6b0ec5ef86abdd4e9083067ba297107cfb094df3
    fix a crasher in our EGL wrapper when attrib_list is NULL in eglChooseConfig
    
    the EGL specification states that this should be treated as though it was
    an empty list terminated with EGL_NONE.
    
    Change-Id: I294104370a86b5e5c34c7bcf15c5459eab464631
    small cleanup. gEGLImpl should have been static
    
    also added a ctor to initialized it in case we use it ont he stack
    one day.
    
    Change-Id: I2736b9bce3d8ba3b74fd029de4c18cca2cdbbf60
    Implement eglInitialize / eglTerminate reference counting
    
    Previously we imlpemented the standard semantics for
    eglInitialize / eglTerminate, which are that
    eglInitialize may be called any number of times,
    but the first call to eglTerminate will terminate
    the display.
    
    Now we follow reference-countins semantics, which
    means that eglTerminate will only terminate the
    display when the reference count returns to zero.
    
    This change allows EGL to be used by multiple
    independently written modules in the same process.
    
    (Otherwise there is no way for the independent
    modules to coordinate their use of the display.)
    fix [2189862] Race condition in eglIntialize and eglDestroy
    
    there is now a lock protext a perticular display. it's held during
    initialization and destruction.
    fix [2303866] eglMakeCurrent doesn't return all error messages described in the spec
    eclair snapshot
    fix[2222341] Soft reset while going back from camcorder settings
    
    add a way to convert a mapped "pushbuffer" buffer to a gralloc handle
    which then can be safely used by surfaceflinger, without including
    gralloc_priv.h
    return proper error code from eglCreateImageKHR
    fix [2187212] add support for GLESv2 dispatch based on TLS
    
    Instead of using a different function pointer table for ES 1.x and ES 2.x,
    we use a single one that is the union (sort|uniq) of both tables. Two
    instances of this table are initialized with pointers to GL ES 1.x and GL ES 2.x
    entry-points.
    When a context is created, we store its version number and when it is bound to a
    thread we set the approruiate table based on the stored version.
    
    This introduce no penalty while dispatching gl calls to the right API version.
    
    [Pending Dr No approval for MR1]
    fix a bug recently introduced where EGL couldn't be initialized again after it had been terminated once
    first step for fixing [2066786] EGL object lifetime management doesn't respect the EGL spec
    
    this change fixes the lifetime mgt of EGLSurface, EGLContext and EGLImageKHR in the EGL wrapper.
    EGLDisplay is still somewhat bogus and libagl's EGL is still incorrect.
    
    The idea of the change is that EGL objects are put in a list when created and removed when destroyed.
    Before each use, we first verify if the object is in the list and if so a reference is taken and kept
    for the scope of the whole EGL API being called, if not, an error is returned.
    
    Upon object destruction, the object is simply marked as "terminated" (this is not protected by a lock
    because it doesn't really matter). This flag is only used to deny access to the object by other APIs
    while it's still valid (for instance current or being used by another function in another thread).
    A reference is also removed and the object can then actually be destroyed when going out of scope.
    fix bug [2021677] egl driver unloaded after eglTerminate() is called
    
    refactored the code so that:
    - EGL APIs that can be called before or after eglInitialize() will work by loading the drivers first
    - make eglGetDisplay() a lot more efficient
    - make sure that EGL drivers are loaded in a thread-safe way
    - don't unload the drivers upon calling eglTerminate(), they're now never unloaded, since there is no safe way to do it (some thread could be running)
    - updated our EGL version to 1.4
    - return better error codes if errors happen during initialization
    Better error handling in EGL extensions
    log opengl-call-with-no-context only once per thread, instead of for each function call
    donut snapshot
    donut snapshot
    fix for [1969185] valgrind errors in new gl stuff
    Add eglGetRenderBufferANDROID() extension, which returns the current render buffer as an android_native_buffer_t*
    fix [1942438] eglGetCurrentSurface() returns bogus value
    fix [1942438] eglGetCurrentSurface() returns bogus value
    implement a real loader for EGL drivers
    
    we now look for a config file in /system/lib/egl/egl.cfg that describes the association of a display to a driver.
    these drivers are named: /system/lib/egl/lib{[EGL|GLESv1_CM|GLESv2] | GLES}_$TAG.so
    Added most of the support needed for GLES 2.x
    donut snapshot
    remove libEGL and libGLESv1_CM dependencies on libutils and libui
    should help fix the Simulator build.
    fix EGL extension string names
    created an new EGL extension called ANDROID_swap_rectangle
    
    ANDROID_swap_rectangle allows to specify the rectangle affected by eglSwapBuffers(), anything outside of this rectangle is unchanged. in particular EGL_BUFFER_DESTROYED only applies to that rectangle. This extension as well as EGL_BUFFER_PRESERVED allow major optimizations on surfaceflinger, which can redraw only the dirty area during compositing.
    
    However, ANDROID_swap_rectangle allows further optimizations in EGL by reducing the amount of copy-back needed. ANDROID_swap_rectangle is particularily important for software implementations.
    oops forgot to remove a LOGD when loading an opengl driver
    Make sure to map undefined OES functions to their non-OES counterpart if it exists.
    use gl.h to generate the *.in files. we are now supporting the full gl.h and glext.h apis.
    integrate some OpenGL ES changes back from master_gl in preparation of opening GLES to the NDK.
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    Automated import from //branches/master/...@142578,142578
    Automated import from //branches/donutburger/...@142484,142484
    Automated import from //branches/cupcake/...@142481,142481
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@132589
    auto import from //depot/cupcake/@137055
    auto import from //branches/cupcake/...@132276
    auto import from //branches/cupcake/...@130745
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    change how the userspace GLES drivers are named
    
    for single library:
      /vendor/lib/egl/GLES.so
    
    for multiple libraries:
      /vendor/lib/egl/EGL.so
      /vendor/lib/egl/GLESv1_CM.so
      /vendor/lib/egl/GLESv2.so
    
    EGL_BOARD_CONFIG as well as egl.cfg are not needed anymore.
    
    To facilitate the transition, the loader will also look
    for the older naming scheme.
    
    Bug: 8631636
    Change-Id: Id4b113468df29bae72b323f76598229914e1c7a1
    remove multiplexing of multiple EGL implementation
    
    from now on, the system can only have one EGL
    implementation. this means the software and h/w renderer
    cannot be used at the same time on a device. Of course, the
    h/w renderer is always prefered; in its absence we
    default to the software renderer.
    
    Change-Id: Ib579f58055dd0ce4c4a99144131efa11c16ca3d3
    support loading EGL libraries from /vendor/lib/egl as well as /system/lib/egl
    
    Change-Id: Idd9ca85ce3ba6c92234375071b53e5365e689062
    eclair snapshot
    fix [2187212] add support for GLESv2 dispatch based on TLS
    
    Instead of using a different function pointer table for ES 1.x and ES 2.x,
    we use a single one that is the union (sort|uniq) of both tables. Two
    instances of this table are initialized with pointers to GL ES 1.x and GL ES 2.x
    entry-points.
    When a context is created, we store its version number and when it is bound to a
    thread we set the approruiate table based on the stored version.
    
    This introduce no penalty while dispatching gl calls to the right API version.
    
    [Pending Dr No approval for MR1]
    implement a real loader for EGL drivers
    
    we now look for a config file in /system/lib/egl/egl.cfg that describes the association of a display to a driver.
    these drivers are named: /system/lib/egl/lib{[EGL|GLESv1_CM|GLESv2] | GLES}_$TAG.so
    Expose core EGL entry points to eglGetProcAddress
    
    Required behavior for EGL_KHR_get_all_proc_addresses.
    
    Change-Id: I1e6209ef3cb9f2fa6f22808b077c35139d4cb814
    Find non-extension GLES wrappers in eglGetProcAddress
    
    This allows apps to find OpenGL ES 3.0 functions using
    eglGetProcAddress() instead of dlopen/dlsym.
    
    Bug: 9681677
    Change-Id: I7ce6e1636bc47d6b0bf20a4e46bd67235714d129
    Find non-extension GLES wrappers in eglGetProcAddress
    
    This allows apps to find OpenGL ES 3.0 functions using
    eglGetProcAddress() instead of dlopen/dlsym.
    
    Bug: 9681677
    Change-Id: I7ce6e1636bc47d6b0bf20a4e46bd67235714d129
    fix local include paths
    
    Change-Id: Icb921fa796ec08612dbb2feb7e7161bcb0cf4a99
    EGLConfig is now not remaped to an internal EGLConfig
    
    this is possible now that we support only a single
    EGL implementation. this allows a large code simplification.
    
    Change-Id: I7a6b9db4c5d60f4407c6061e7a68729af63d5242
    remove multiplexing of multiple EGL implementation
    
    from now on, the system can only have one EGL
    implementation. this means the software and h/w renderer
    cannot be used at the same time on a device. Of course, the
    h/w renderer is always prefered; in its absence we
    default to the software renderer.
    
    Change-Id: Ib579f58055dd0ce4c4a99144131efa11c16ca3d3
    add support for GL_EXT_debug_marker
    
    This extension is always added to the GL_EXTENSIONS
    extension string for the current GL context, regardless
    of if it's supported by the h/w driver.
    
    The extension itself will be handled by GLES_trace (eventually),
    when GLES_trace is not enabled, it'll result to a no-op.
    
    If the h/w implementation has this extension, we'll call that version
    instead of our dummy version.
    
    Change-Id: Ie5dd3387c4d45cd5ed5f03b73bda6045620a96bc
    fix x86 build
    
    Change-Id: I03cfbfeaeb8b13842248856b14b4a23711036e10
    refactor EGL source code
    
    no changes is functionality. split various objects into their own files.
    make egl_display objec's lock internal.
    small cleanup. gEGLImpl should have been static
    
    also added a ctor to initialized it in case we use it ont he stack
    one day.
    
    Change-Id: I2736b9bce3d8ba3b74fd029de4c18cca2cdbbf60
    eclair snapshot
    fix [2187212] add support for GLESv2 dispatch based on TLS
    
    Instead of using a different function pointer table for ES 1.x and ES 2.x,
    we use a single one that is the union (sort|uniq) of both tables. Two
    instances of this table are initialized with pointers to GL ES 1.x and GL ES 2.x
    entry-points.
    When a context is created, we store its version number and when it is bound to a
    thread we set the approruiate table based on the stored version.
    
    This introduce no penalty while dispatching gl calls to the right API version.
    
    [Pending Dr No approval for MR1]
    fix bug [2021677] egl driver unloaded after eglTerminate() is called
    
    refactored the code so that:
    - EGL APIs that can be called before or after eglInitialize() will work by loading the drivers first
    - make eglGetDisplay() a lot more efficient
    - make sure that EGL drivers are loaded in a thread-safe way
    - don't unload the drivers upon calling eglTerminate(), they're now never unloaded, since there is no safe way to do it (some thread could be running)
    - updated our EGL version to 1.4
    - return better error codes if errors happen during initialization
    implement a real loader for EGL drivers
    
    we now look for a config file in /system/lib/egl/egl.cfg that describes the association of a display to a driver.
    these drivers are named: /system/lib/egl/lib{[EGL|GLESv1_CM|GLESv2] | GLES}_$TAG.so
    donut snapshot
    only export the GL entry-points, hide everything else.
    
    Conflicts:
    
            opengl/libagl/Android.mk
            opengl/libs/Android.mk
            opengl/libs/egl_impl.h
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Add ES3 support to libGLESv2 and tracing tools
    
    Since ES3 is backwards compatible with ES2, a new wrapper isn't
    necessary, and the Khronos implementation guidelines recommend
    supporting both versions with the same library.
    
    Change-Id: If9bb02be60ce01cc5fe25d1f40c4e7f37244ebf6
    Hibernate the EGL implementation when idle
    
    If the EGL implementation supports the EGL_IMG_hibernate_process
    extension, use it to hibernate (and hopefully release memory or other
    resources) when the process isn't actively using EGL or OpenGL ES. The
    idleness heuristic used in this change is:
    
    (a) Wake up when entering any EGL API call, and remain awake for the
        duration of the call.
    (b) Do not hibernate when any window surface exists; this means the
        application is very likely in the foreground.
    (c) Do not hibernate while any context is made current to a thread.
        The app may be using a client API without the EGL layer knowing,
        so it is not safe to hibernate.
    (d) Only check these conditions and attempt to hibernate after a
        window surface is destroyed or a thread's context is detached. By
        not attempting to hibernate at the end of every EGL call, we avoid
        some transient wakeups/hibernate cycles when the app is mostly idle,
        or is starting to become active but hasn't created its window
        surface yet.
    
    On a Galaxy Nexus, hibernating frees 1567 VM pages from the process.
    Both hibernating and waking can take anywhere from 30ms to over 100ms
    -- measurements have been very inconsistent.
    
    Change-Id: Ib555f5d9d069aefccca06e8173a89625b5f32d7e
    Increment/decrement a counter around EGL calls
    
    This is in preparation for a change that will hibernate the underlying
    EGL when idle. Instead of a bare egl_display_t*, get_display() now
    returns a egl_display_ptr, which acts like a smart pointer. The
    "wakecount" counter managed by the smart pointer isn't used for
    anything in this change. It will be used to make sure we don't
    hibernate when any thread is in an EGL call, without having to hold a
    mutex for the duration of the call.
    
    Change-Id: Iee52f3549a51162efc3800e1195d3f76bba2f2ce
    remove multiplexing of multiple EGL implementation
    
    from now on, the system can only have one EGL
    implementation. this means the software and h/w renderer
    cannot be used at the same time on a device. Of course, the
    h/w renderer is always prefered; in its absence we
    default to the software renderer.
    
    Change-Id: Ib579f58055dd0ce4c4a99144131efa11c16ca3d3
    add support for GL_EXT_debug_marker
    
    This extension is always added to the GL_EXTENSIONS
    extension string for the current GL context, regardless
    of if it's supported by the h/w driver.
    
    The extension itself will be handled by GLES_trace (eventually),
    when GLES_trace is not enabled, it'll result to a no-op.
    
    If the h/w implementation has this extension, we'll call that version
    instead of our dummy version.
    
    Change-Id: Ie5dd3387c4d45cd5ed5f03b73bda6045620a96bc
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    fix crash when validating an invalid EGL objects
    
    the code that validated EGL objects dereferenced the object
    to access its EGLDisplay -- needed for validation (!).
    This was wrong for two reasons, first we dereferenced the object
    before validating it (potentially leading to a crash), secondly
    we didn't validate that the object existed in the right EGLDisplay.
    
    We now use the EGLDisplay passed by the user API.
    
    Change-Id: I66f9e851d4f8507892a6b1fee3065f124c4e7138
    fix crash when validating an invalid EGL objects
    
    the code that validated EGL objects dereferenced the object
    to access its EGLDisplay -- needed for validation (!).
    This was wrong for two reasons, first we dereferenced the object
    before validating it (potentially leading to a crash), secondly
    we didn't validate that the object existed in the right EGLDisplay.
    
    We now use the EGLDisplay passed by the user API.
    
    Change-Id: I66f9e851d4f8507892a6b1fee3065f124c4e7138
    eglTerminate() now actually frees up all active egl objects
    
    as specified by the EGL specification, terminated objects's
    handles become invalid, the objects themselves are destroyed
    when they're not current to some thread.
    
    Change-Id: Id3a4a5736a5bbc3926a9ae8385d43772edb88eeb
    refactor EGL source code
    
    no changes is functionality. split various objects into their own files.
    make egl_display objec's lock internal.
    small cleanup. gEGLImpl should have been static
    
    also added a ctor to initialized it in case we use it ont he stack
    one day.
    
    Change-Id: I2736b9bce3d8ba3b74fd029de4c18cca2cdbbf60
    eclair snapshot
    fix [2187212] add support for GLESv2 dispatch based on TLS
    
    Instead of using a different function pointer table for ES 1.x and ES 2.x,
    we use a single one that is the union (sort|uniq) of both tables. Two
    instances of this table are initialized with pointers to GL ES 1.x and GL ES 2.x
    entry-points.
    When a context is created, we store its version number and when it is bound to a
    thread we set the approruiate table based on the stored version.
    
    This introduce no penalty while dispatching gl calls to the right API version.
    
    [Pending Dr No approval for MR1]
    fix bug [2021677] egl driver unloaded after eglTerminate() is called
    
    refactored the code so that:
    - EGL APIs that can be called before or after eglInitialize() will work by loading the drivers first
    - make eglGetDisplay() a lot more efficient
    - make sure that EGL drivers are loaded in a thread-safe way
    - don't unload the drivers upon calling eglTerminate(), they're now never unloaded, since there is no safe way to do it (some thread could be running)
    - updated our EGL version to 1.4
    - return better error codes if errors happen during initialization
    implement a real loader for EGL drivers
    
    we now look for a config file in /system/lib/egl/egl.cfg that describes the association of a display to a driver.
    these drivers are named: /system/lib/egl/lib{[EGL|GLESv1_CM|GLESv2] | GLES}_$TAG.so
    donut snapshot
    only export the GL entry-points, hide everything else.
    
    Conflicts:
    
            opengl/libagl/Android.mk
            opengl/libs/Android.mk
            opengl/libs/egl_impl.h
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    free EGL resources associated to a thread when it terminates
    
    destroyed but current-to-a-thread resources are only destroyed
    when they're made not-current; however, we were not destroying
    those when the thread itself terminated, causing these resources
    to be leaked forever.
    
    we now install a tls-key destructor that takes care of this
    by calling eglReleaseThread upon thread termination.
    
    Bug: 9209776
    Change-Id: I88298a34e3a27488eb81eab76717715569c7d57c
    fix local include paths
    
    Change-Id: Icb921fa796ec08612dbb2feb7e7161bcb0cf4a99
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    don't log EGL errors due to unimplemented proprietary extensions
    
    Change-Id: Icfc33d4f55d1e7fb49390ce0921ba37a438c9fc2
    fix x86 build
    
    Change-Id: I03cfbfeaeb8b13842248856b14b4a23711036e10
    refactor EGL source code
    
    no changes is functionality. split various objects into their own files.
    make egl_display objec's lock internal.
    free EGL resources associated to a thread when it terminates
    
    destroyed but current-to-a-thread resources are only destroyed
    when they're made not-current; however, we were not destroying
    those when the thread itself terminated, causing these resources
    to be leaked forever.
    
    we now install a tls-key destructor that takes care of this
    by calling eglReleaseThread upon thread termination.
    
    Bug: 9209776
    Change-Id: I88298a34e3a27488eb81eab76717715569c7d57c
    improved CallStack a bit
    
    - added a ctor that updates and dumps the stack immediately
    - added a "logtag" parameter to dump()
    
    Change-Id: Ie51c256071d282591752243bdb4f68cf9ff8829d
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    don't log EGL errors due to unimplemented proprietary extensions
    
    Change-Id: Icfc33d4f55d1e7fb49390ce0921ba37a438c9fc2
    add an option to EGL to dump stack traces on errors
    
    enable by setting debug.egl.callstack to 1
    
    Change-Id: I7fad9ce71b4c4c5ece97d4f9d139348eab742a3c
    refactor EGL source code
    
    no changes is functionality. split various objects into their own files.
    make egl_display objec's lock internal.
    Fix issue #7271589: Cannot set Ocean HD live wallpaper
    
    Change-Id: Id7662c503815293040c240232a6622bd6f6eab37
    Fix issue #7271589: Cannot set Ocean HD live wallpaper
    
    Change-Id: Id7662c503815293040c240232a6622bd6f6eab37
    Fix issue #7257947: Need to fix heap limits on Mako
    
    Change-Id: Id8014b19195b8740bccf000ab66c1b599ba3a1a0
    Configure GC free to be 8MB for devices with >512MB RAM.
    
    b/6606849
    
    Change-Id: Idad46032b4b5d309db0319caeb7a1dfc0550f9f7
    Dalvik heap size for a 10" xhdpi tablet.
    
    Change-Id: Ie47702cda764817e023464944cd6dc5352fc439e
    build: add device-type dalvik heap configs
    
    These have been moved from frameworks/base/build
    
    Change-Id: Ib0cdf82f4e2d61a1956baabf1fe636f46ddbc13a
    Signed-off-by: Dima Zavin <dima@android.com>
    OpenGL tracing.
    
    Enable with:
    
    adb shell setprop debug.egl.trace 1
    
    Change-Id: Icfbc795f5260141510975228e72234e9aab56a85
    eclair snapshot
    Added most of the support needed for GLES 2.x
    donut snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Configure GC free to be 8MB for devices with >512MB RAM.
    
    b/6606849
    
    Change-Id: Idad46032b4b5d309db0319caeb7a1dfc0550f9f7
    build: add device-type dalvik heap configs
    
    These have been moved from frameworks/base/build
    
    Change-Id: Ib0cdf82f4e2d61a1956baabf1fe636f46ddbc13a
    Signed-off-by: Dima Zavin <dima@android.com>
    fixup include paths
    
    - remove unneeded include deps
    - remove some hardcoded include paths
    
    Change-Id: Ifae0e2b2d738e0f94f8525c45be78f4227ce1673
    frameworks/base: remove LOCAL_PRELINK_MODULE
    
    Change-Id: I54dd62ebef47e7690afa5a858f3cad941b135481
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Hardware Composer new and refactored test cases
    
    Change-Id: Iabf46fc5d75891f917e06a257470a0e3f2bd3c95
    eclair snapshot
    keystore: exclude builds for simulator.
    keystore: switch to multi-user version.
    Add tests and misc fixes on keystore.
    
    * Refactor netkeystore.c to make client and server code testable.
    * Add a client test for setting new passwd and changing passwd.
    * Exclude "." and ".." from reset_keystore().
    * Change ServerCommand.executeCommand() to accept variable length of
      arguments and add convert() to marshalling the args to bytes.
    * Keystore.java is revised accordingly.
    donut snapshot
    Implement the generic mini-keystore for security.
    
    1. We will progressively migrate to this implementation.
    2. For richc to have a quick review on the keymgmt part.
    3. Add remove_key and make sure all functions are working.
    4. Add permission check for get operation.
    5. Return the retry count if unlock failed.
    6. Add the reset operation for keystore reset.
    7. Add the putfile shell command for putting the key value from file.
    8. Fix the boundary issue during parsing command.
    9. Use the ' ' as delimiter and reset the reply structure for each request.
    10. Add change password retry count check.
    11. Extract the read_marshal/write_marshal for certtool.h.
    12. Remove the old implementation.
    First version of the keystore service.
    
    The keystore service is protected by the user 'keystore'. Only keystore
    user/group can access the key content. All users are able to do the
    following commands from shell as well:
      listcerts
      listuserkeys
      installcert
      removecert
      installuserkey
      removeuserkey
    Configure GC free to be 8MB for devices with >512MB RAM.
    
    b/6606849
    
    Change-Id: Idad46032b4b5d309db0319caeb7a1dfc0550f9f7
    build: add device-type dalvik heap configs
    
    These have been moved from frameworks/base/build
    
    Change-Id: Ib0cdf82f4e2d61a1956baabf1fe636f46ddbc13a
    Signed-off-by: Dima Zavin <dima@android.com>
    fixup include paths
    
    - remove unneeded include deps
    - remove some hardcoded include paths
    
    Change-Id: Ifae0e2b2d738e0f94f8525c45be78f4227ce1673
    frameworks/base: remove LOCAL_PRELINK_MODULE
    
    Change-Id: I54dd62ebef47e7690afa5a858f3cad941b135481
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Hardware Composer new and refactored test cases
    
    Change-Id: Iabf46fc5d75891f917e06a257470a0e3f2bd3c95
    eclair snapshot
    keystore: exclude builds for simulator.
    keystore: switch to multi-user version.
    Add tests and misc fixes on keystore.
    
    * Refactor netkeystore.c to make client and server code testable.
    * Add a client test for setting new passwd and changing passwd.
    * Exclude "." and ".." from reset_keystore().
    * Change ServerCommand.executeCommand() to accept variable length of
      arguments and add convert() to marshalling the args to bytes.
    * Keystore.java is revised accordingly.
    donut snapshot
    Implement the generic mini-keystore for security.
    
    1. We will progressively migrate to this implementation.
    2. For richc to have a quick review on the keymgmt part.
    3. Add remove_key and make sure all functions are working.
    4. Add permission check for get operation.
    5. Return the retry count if unlock failed.
    6. Add the reset operation for keystore reset.
    7. Add the putfile shell command for putting the key value from file.
    8. Fix the boundary issue during parsing command.
    9. Use the ' ' as delimiter and reset the reply structure for each request.
    10. Add change password retry count check.
    11. Extract the read_marshal/write_marshal for certtool.h.
    12. Remove the old implementation.
    First version of the keystore service.
    
    The keystore service is protected by the user 'keystore'. Only keystore
    user/group can access the key content. All users are able to do the
    following commands from shell as well:
      listcerts
      listuserkeys
      installcert
      removecert
      installuserkey
      removeuserkey
    Add Dalvik heap definition for 7" xhdpi devices.
    
    Change-Id: I6a8e406ee98d3061d498bb2fbd1b97aa9e79b4b5
    Fix issue #7271589: Cannot set Ocean HD live wallpaper
    
    Change-Id: Id7662c503815293040c240232a6622bd6f6eab37
    Fix issue #7271589: Cannot set Ocean HD live wallpaper
    
    Change-Id: Id7662c503815293040c240232a6622bd6f6eab37
    Configure GC free to be 8MB for devices with >512MB RAM.
    
    b/6606849
    
    Change-Id: Idad46032b4b5d309db0319caeb7a1dfc0550f9f7
    Dalvik heap size for a 10" xhdpi tablet.
    
    Change-Id: Ie47702cda764817e023464944cd6dc5352fc439e
    build: add device-type dalvik heap configs
    
    These have been moved from frameworks/base/build
    
    Change-Id: Ib0cdf82f4e2d61a1956baabf1fe636f46ddbc13a
    Signed-off-by: Dima Zavin <dima@android.com>
    OpenGL tracing.
    
    Enable with:
    
    adb shell setprop debug.egl.trace 1
    
    Change-Id: Icfbc795f5260141510975228e72234e9aab56a85
    eclair snapshot
    Added most of the support needed for GLES 2.x
    donut snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Configure GC free to be 8MB for devices with >512MB RAM.
    
    b/6606849
    
    Change-Id: Idad46032b4b5d309db0319caeb7a1dfc0550f9f7
    build: add device-type dalvik heap configs
    
    These have been moved from frameworks/base/build
    
    Change-Id: Ib0cdf82f4e2d61a1956baabf1fe636f46ddbc13a
    Signed-off-by: Dima Zavin <dima@android.com>
    fixup include paths
    
    - remove unneeded include deps
    - remove some hardcoded include paths
    
    Change-Id: Ifae0e2b2d738e0f94f8525c45be78f4227ce1673
    frameworks/base: remove LOCAL_PRELINK_MODULE
    
    Change-Id: I54dd62ebef47e7690afa5a858f3cad941b135481
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Hardware Composer new and refactored test cases
    
    Change-Id: Iabf46fc5d75891f917e06a257470a0e3f2bd3c95
    eclair snapshot
    keystore: exclude builds for simulator.
    keystore: switch to multi-user version.
    Add tests and misc fixes on keystore.
    
    * Refactor netkeystore.c to make client and server code testable.
    * Add a client test for setting new passwd and changing passwd.
    * Exclude "." and ".." from reset_keystore().
    * Change ServerCommand.executeCommand() to accept variable length of
      arguments and add convert() to marshalling the args to bytes.
    * Keystore.java is revised accordingly.
    donut snapshot
    Implement the generic mini-keystore for security.
    
    1. We will progressively migrate to this implementation.
    2. For richc to have a quick review on the keymgmt part.
    3. Add remove_key and make sure all functions are working.
    4. Add permission check for get operation.
    5. Return the retry count if unlock failed.
    6. Add the reset operation for keystore reset.
    7. Add the putfile shell command for putting the key value from file.
    8. Fix the boundary issue during parsing command.
    9. Use the ' ' as delimiter and reset the reply structure for each request.
    10. Add change password retry count check.
    11. Extract the read_marshal/write_marshal for certtool.h.
    12. Remove the old implementation.
    First version of the keystore service.
    
    The keystore service is protected by the user 'keystore'. Only keystore
    user/group can access the key content. All users are able to do the
    following commands from shell as well:
      listcerts
      listuserkeys
      installcert
      removecert
      installuserkey
      removeuserkey
    Fix issue #7271589: Cannot set Ocean HD live wallpaper
    
    Change-Id: Id7662c503815293040c240232a6622bd6f6eab37
    Fix issue #7271589: Cannot set Ocean HD live wallpaper
    
    Change-Id: Id7662c503815293040c240232a6622bd6f6eab37
    Configure GC free to be 8MB for devices with >512MB RAM.
    
    b/6606849
    
    Change-Id: Idad46032b4b5d309db0319caeb7a1dfc0550f9f7
    Dalvik heap size for a 10" xhdpi tablet.
    
    Change-Id: Ie47702cda764817e023464944cd6dc5352fc439e
    build: add device-type dalvik heap configs
    
    These have been moved from frameworks/base/build
    
    Change-Id: Ib0cdf82f4e2d61a1956baabf1fe636f46ddbc13a
    Signed-off-by: Dima Zavin <dima@android.com>
    OpenGL tracing.
    
    Enable with:
    
    adb shell setprop debug.egl.trace 1
    
    Change-Id: Icfbc795f5260141510975228e72234e9aab56a85
    eclair snapshot
    Added most of the support needed for GLES 2.x
    donut snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Configure GC free to be 8MB for devices with >512MB RAM.
    
    b/6606849
    
    Change-Id: Idad46032b4b5d309db0319caeb7a1dfc0550f9f7
    I am having second thoughts about 512m for the large heap size.
    
    Let's go with 384 megs, half way between the large heap size on
    Xoom and 512.
    
    Change-Id: I4a7f2e5a8b2920b49fa53777725e24811145f5f2
    Add new Dalvik memory limit definition.
    
    This is for a 7in hdpi/tvdpi tablet with 1G of RAM.
    
    That sounds kind-of familiar.  I don't know.  Have I seen
    such a thing before?  Maybe.
    
    Bug: 6576049
    Change-Id: Iabc245692d5106feec9199eb2b5a3d06e27a9b83
    build: add device-type dalvik heap configs
    
    These have been moved from frameworks/base/build
    
    Change-Id: Ib0cdf82f4e2d61a1956baabf1fe636f46ddbc13a
    Signed-off-by: Dima Zavin <dima@android.com>
    OpenGL tracing.
    
    Enable with:
    
    adb shell setprop debug.egl.trace 1
    
    Change-Id: Icfbc795f5260141510975228e72234e9aab56a85
    eclair snapshot
    Added most of the support needed for GLES 2.x
    donut snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Fix issue #7257947: Need to fix heap limits on Mako
    
    Change-Id: Id8014b19195b8740bccf000ab66c1b599ba3a1a0
    Configure GC free to be 8MB for devices with >512MB RAM.
    
    b/6606849
    
    Change-Id: Idad46032b4b5d309db0319caeb7a1dfc0550f9f7
    build: add device-type dalvik heap configs
    
    These have been moved from frameworks/base/build
    
    Change-Id: Ib0cdf82f4e2d61a1956baabf1fe636f46ddbc13a
    Signed-off-by: Dima Zavin <dima@android.com>
    OpenGL tracing.
    
    Enable with:
    
    adb shell setprop debug.egl.trace 1
    
    Change-Id: Icfbc795f5260141510975228e72234e9aab56a85
    eclair snapshot
    Added most of the support needed for GLES 2.x
    donut snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    New keycode definitions for TV remotes.
    
    Keys which are necessary for supporting world-wide broadcast
    standard or used commonly for TV/STB remotes.
    
    Change-Id: I2721ceb7d956c87f1d4106b99f9d21947ae13d47
    Add Voice Assist key.
    
    Bug: 16292420
    Change-Id: I607fadc2edf673079bfd9f7406e6e45603474957
    Support VIRTUAL flag in keyboard layouts.
    
    This flag is used to provide haptic feedback for virtual hard keys.
    
    Bug: 14319563
    Change-Id: Ia0ca1acc8cfa00a42d1c04d279dfa59c6cc00f4d
    New keycode definitions for HDMI-CEC
    
    Following keys are added to be mapped to HDMI-CEC standard keys:
    
    KEYCODE_MEDIA_TOP_MENU
    KEYCODE_11
    KEYCODE_12
    KEYCODE_LAST_CHANNEL
    KEYCODE_TV_DATA_SERVICE
    
    Change-Id: Ie73cf4cd8355ced4753eb5bba0ea130b087dfc36
    Add KEYCODE_PAIRING.
    
    Used for initiating a peripheral pairing mode.
    
    Change-Id: I7e8439d27491ccc72d045cabf5751a35b9113aa7
    Move key attribute information out of native.
    
    Native doesn't ever actually care about the attributes of keys, so
    move all of it up into the managed layer and move all of the key
    names down so they're defined once.
    
    Change-Id: Ic8ded13ce050b2b98744735ff50d11e8d882d7d5
    x86_64: Align uint64_t/int64_t structure member to 8 bytes
    
    To make sure the stature which pass between 32/64bit process have
    same memory layout for 32/64bit.
    
    Signed-off-by: Fengwei Yin <fengwei.yin@intel.com>
    Co-Authored-by: Narayan Kamath <narayan@google.com> (Unit test only.)
    Change-Id: I1bc2d12cce41ec0bc484adcaf968f274bec75c12
    Change InputMessage.motion.pointerSize to a uint32_t.
    
    This ensures it's the same size in both 32 and 64 bit
    processes and also brings it in line with struct
    MotionEntry.
    
    (cherry-picked from bc6001b026069714177526eb1120b0011d6f2a51)
    
    Change-Id: I28e87050478920a54132efbbb8138076ebad1409
    Change InputMessage.motion.pointerSize to a uint32_t.
    
    This ensures it's the same size in both 32 and 64 bit
    processes and also brings it in line with struct
    MotionEntry.
    
    Change-Id: I66bb8b8d8664763e7dcbd489686051f563d5e1dc
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Bump axis limit
    
    Change-Id: I53d18646be2b884c5022f10c7c4ea8f6cda176c8
    x86_64: Align uint64_t/int64_t structure member to 8 bytes
    
    To make sure the stature which pass between 32/64bit process have
    same memory layout for 32/64bit.
    
    Signed-off-by: Fengwei Yin <fengwei.yin@intel.com>
    Co-Authored-by: Narayan Kamath <narayan@google.com> (Unit test only.)
    Change-Id: I1bc2d12cce41ec0bc484adcaf968f274bec75c12
    Move key attribute information out of native.
    
    Native doesn't ever actually care about the attributes of keys, so
    move all of it up into the managed layer and move all of the key
    names down so they're defined once.
    
    Change-Id: Ic8ded13ce050b2b98744735ff50d11e8d882d7d5
    Remove unnecessary policy flags.
    
    Bug: 13133142
    Change-Id: Ib6c63ebad25d84f78623b4a46ccf83953d235fe7
    Generate ACTION_CANCEL on joystick disconnect. DO NOT MERGE
    
    Bug: 11480300
    Change-Id: I5a4096970c9e588d134f05dd0eb3a9c91c836b2f
    Generate ACTION_CANCEL on joystick disconnect.
    
    Bug: 11480300
    Change-Id: I46706838eec0711c6bf345301e7b4ccbad83b063
    Add MAX_CONTROLLER_LEDS constant. DO NOT MERGE
    
    Change-Id: Ie6dbce926280c748f39e3c54d2ed4accbdcf9e59
    Parse LED mappings in keylayout files. DO NOT MERGE
    
    Change-Id: I2b34939cc0df256e6b872502ea93f2884b4c8334
    Add support for injecting events into ActivityContainers.
    
    Enhanced the input system to support concurrent dispatch of touch
    events on multiple displays which is required for this to work.
    
    Add method to apply offset to PointerCoords.
    
    Change-Id: I55fe4a9a8785ae5a2d3341d214fa3c5107f3963a
    Add method to apply offset to PointerCoords.  (DO NOT MERGE)
    
    Change-Id: I3dc2ba22b026e5b8e1c3d90f7366ec09a59ce6b6
    Add MAX_CONTROLLER_LEDS constant
    
    Change-Id: I5ec972338c50647049bb5a8279847d54a84d9f70
    Parse LED mappings in keylayout files
    
    Change-Id: I6bc3760341868015f054d9866e2616a312da94e0
    Completely remove skia dependency from libinput.
    
    Including the tests...
    
    Change-Id: I6ec8f1a5ae7e7514831d7e3b430b3b37b0841b92
    Fix PDK build.
    
    Quick hack to remove Skia dependency from libinput.
    
    Change-Id: Ibaf2e312236f5e3f7251fa903ce381456a77467c
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    b/12068020 add nonce to InputDeviceDescriptor. Do not merge
    
    This is a cherry-pick of https://googleplex-android-review.git.corp.google.com/#/c/401795/
    
    Adds a nonce field to allow generation of unique descriptors for
    input devices.
    
    Change-Id: Ie82bfb728bea95792b3b138dd3974f8b0aff63e0
    b/12068020 add nonce to InputDeviceDescriptor
    
    Adds a nonce field to allow generation of unique descriptors for
    input devices.
    
    Change-Id: I978b6c5e9edc9e0a6aa60f85cd8d4efc42ac2999
    Add controller numbers for gamepads / joysticks
    
    Change-Id: I5294aabbadb836a6a4c7ce76a670abcf50c1f885
    Add input device property for buttons under touchpads
    
    Bug: 8990644
    Change-Id: I6df5fb9e11199173d62523928082db428af55394
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Move key attribute information out of native.
    
    Native doesn't ever actually care about the attributes of keys, so
    move all of it up into the managed layer and move all of the key
    names down so they're defined once.
    
    Change-Id: Ic8ded13ce050b2b98744735ff50d11e8d882d7d5
    Parse LED mappings in keylayout files. DO NOT MERGE
    
    Change-Id: I2b34939cc0df256e6b872502ea93f2884b4c8334
    Parse LED mappings in keylayout files
    
    Change-Id: I6bc3760341868015f054d9866e2616a312da94e0
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Parse LED mappings in keylayout files. DO NOT MERGE
    
    Change-Id: I2b34939cc0df256e6b872502ea93f2884b4c8334
    Parse LED mappings in keylayout files
    
    Change-Id: I6bc3760341868015f054d9866e2616a312da94e0
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Have VirtualDisplays send SF resize messages when resizing
    
    Change-Id: I76d15b22099a659450ec875836c9bf2b6584838f
    Allow "opaque" flag to be updated. DO NOT MERGE
    
    Moves the "opaque layer" from Layer to Layer::State.  This allows
    it to be updated as part of a transaction.
    
    Bug 12387406
    
    Change-Id: I0a114ce6adf77cd12fb08f96e0691b76c475768d
    Allow "opaque" flag to be updated
    
    Moves the "opaque layer" from Layer to Layer::State.  This allows
    it to be updated as part of a transaction.
    
    Bug 12387406
    
    Change-Id: I0a114ce6adf77cd12fb08f96e0691b76c475768d
    get rid of ISurface
    
    ISurface was only used to get the IGraphicBufferProducer from
    a Layer. It's now replaced by a BBinder subclass / IBinder and
    is only used as a handle to the surface, to both refer to it
    and manage its life-time.
    
    Also cleaned-up a bit the ISurfaceComposer interface and
    "create layer" code path.
    
    Change-Id: I68d0e02d57b862cffb31d5168c3bc10cea0906eb
    get rid of Surface identity and token
    
    we use the IBinder instead.
    
    Change-Id: I4aa0b58869ba43f19980013620051e5a261b062d
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    display projection API now has a single function instead of 3
    
    Change-Id: I9bf46d372b77d547486d4bbe6f1953ec8c65e98f
    display states can't share the dirty flags
    
    Change-Id: Ifade9f2f1a0df9a36aede77a6cf5eee4be534f98
    make multi-display more real
    
    - displays are represented by a binder on the client side
    - c++ clients can now create and modify displays
    
    Change-Id: I203ea5b4beae0819d742ec5171c27568f4e8354b
    libgui includes refactoring
    
    Change-Id: I1d24ec17f5003ec2abab5f7472daaff4cc4cc2d3
    add a layerStack attribute to Layers.
    
    this attribute can be set through a regular transaction using
    SurfaceComposerClient (just like any other attribute, eg: position or size)
    
    Change-Id: I701a47c677ea6442ca713728a93335328cd2b172
    update SF binder protocol to support setting display attributes
    
    no change of functionality -- the old behavior is implemented
    on top of this new protocol.
    this new protocol will allow, eventually, to pass informations
    about displays and layer stacks.
    
    Change-Id: Ic6c2295e61ec8ecbc8ce01ab7664e35d928202fc
    Remove freeze(), unfreeze() and setFreezeTint().
    
    This is all dead code.
    
    Change-Id: I646673aac793a6ec45021c370a2450f0ea4fbcce
    SurfaceFlinger: add a crop to the layer state
    
    This change adds a crop rectangle specified in window coordinates to the layer
    state.  The all window pixels outside this crop rectangle are treated as though
    they were fully transparent.  This change also adds the plumbing necessary for
    WindowManager to set that crop.
    
    Change-Id: I582bc445dc8c97d4c943d4db8d582a6ef5a66081
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    fix Surface positions are not floats
    
    Added Surface.setPosition(float, float) which allows to set a surface's
    position in float.
    
    Bug: 5239859
    Change-Id: I903aef4ad5b5999142202fb8ea30fe216d805711
    SF transactions are now O(1) wrt IPC instead of O(N).
    
    Change-Id: I57669852cbf6aabae244ea86940a08a5a27ffc43
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    fix [2068105] implement queueBuffer/lockBuffer/dequeueBuffer properly
    
    Rewrote SurfaceFlinger's buffer management from the ground-up.
    The design now support an arbitrary number of buffers per surface, however the current implementation is limited to four. Currently only 2 buffers are used in practice.
    
    The main new feature is to be able to dequeue all buffers at once (very important when there are only two).
    
    A client can dequeue all buffers until there are none available, it can lock all buffers except the last one that is used for composition. The client will block then, until a new buffer is enqueued.
    
    The current implementation requires that buffers are locked in the same order they are dequeued and enqueued in the same order they are locked. Only one buffer can be locked at a time.
    
    eg. Allowed sequence:   DQ, DQ, LOCK, Q, LOCK, Q
    eg. Forbidden sequence: DQ, DQ, LOCK, LOCK, Q, Q
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    don't use compile-time configuration of libgui as much as possible
    
    We now detect at runtime which sync features to use, which
    allows us to remove a lot of the compile-time configuration
    options. There  is still one option though, to disable
    KHR_fence_sync on some devices (which are more efficient
    without it).
    
    - added a backdoor to get the vendor's EGL strings
    
    the new logic is:
    - use always ANDROID_native_fence_sync if available
    - fallback to KHR_fence_sync if available and not disabled
      by the compile-time option
    - use KHR_wait_sync if available and either of the above is
      enabled
    
    Change-Id: I9c4b49d9ff1151faf902cc93bd53ea5f205aaabf
    Move services/powermanager from frameworks/base to frameworks/native
    
    Move services/powermanager into frameworks/native so audioflinger can
    use it.  Note that this is not the same as a PowerManagerService,
    which is part of systemserver and handles turning the screen on and
    off, etc.  This is just a binder interface to allow taking wakelocks.
    
    Change-Id: I6b6a8b41cdbad17e826fda45aab5f059f22fc64e
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Watch for SurfaceFlinger death
    
    The ComposerService object wasn't watching for SurfaceFlinger
    restarts, which doesn't usually matter because the app framework
    restarts when SurfaceFlinger dies.  However, mediaserver continues
    to run, which means its ComposerService object was trying to use
    a dead handle, and playback of DRM movies was failing.
    
    This adds a DeathRecipient listener and some logic to re-establish
    the SurfaceFlinger connection.
    
    Bug 6645813
    
    Change-Id: I07581b881d3835601aa57d5358c8259d93bc4515
    get rid of the shared-memory control block
    
    Change-Id: If814060aca1d2ff2619d4adcd57296983d207f7f
    split ComposerService out of SurfaceComposerClient.h
    
    Change-Id: I1eb691f7ca263d5895d871ab675bb5826e0323c6
    unify SurfaceTexture and Surface
    
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    Add SurfaceTexture logging
    fix onFrameAvailable
    Add support for up to 32 buffers per Surface
    
    Bug: 3488016
    
    Change-Id: Ie5536ad77d42a4d0e8270e0fd87ecb73471bcbbc
    fix [3361121] hang in glClear() - device unresponsive, OTA fails (DO NOT MERGE)
    
    Generally we never want to lock a buffer for write access if it is at
    the "head" on the surfaceflinger side. The only exception (1) is when
    the buffer is not currently in use AND there is at least one queued
    buffer -- in which case, SurfaceFlinger will never use said buffer
    anymore, because on the next composition around, it will be able to
    retire the first queued buffer.
    
    The logic above relies on SurfaceFlinger always retiring
    and locking a buffer before composition -- unfortunately this
    didn't happen during a screenshot.
    
    This could leave us in a situation where a buffer is locked by the
    application for write, and used by SurfaceFlinger for texturing,
    causing a hang.
    
    Here, we fix this issue by never assuming the exception (1), it was
    intended as an optimization allowing ANativeWindow::lockBuffer() to
    return sooner and was justified when most of SF composition was
    done in software. The actual buffer locking is now ensured by
    gralloc. We could have handled screenshots in a similar way to
    a regular composition, but it could have caused glitches on screen,
    essentially, taking a screenshot could cause to skip a frame.
    
    now that we removed the notion of a "inUse" buffer in surfaceflinger
    a lot of code can be simplified / removed.
    
    noteworthy, the whole concept of "unlockClient" wrt. "compositionComplete"
    is also gone.
    clean-up unneeded code
    
    now that we removed the notion of a "inUse" buffer in surfaceflinger
    a lot of code can be simplified / removed.
    
    noteworthy, the whole concept of "unlockClient" wrt. "compositionComplete"
    is also gone.
    
    Change-Id: I210413d4c8c0998dae05c8620ebfc895d3e6233d
    Implement reducing the buffer count of a Surface.
    
    Change-Id: I7f979c60c06d654aa8265002836277434bc1a64f
    Bug: 3095167
    fix [2835280] Add support for cancelling buffers to ANativeWindow
    
    There is a new ANativeWindow::cancelBuffer() API that can be used to
    cancel any dequeued buffer, BEFORE it's been enqueued. The buffer is
    returned to the list of availlable buffers. dequeue and cancel are not
    mutually thread safe, they must be called from the same thread or
    external synchronization must be used.
    
    Change-Id: I86cc7985bace8b6a93ad2c75d2bef5c3c2cb4d61
    fix a race in SF buffer management
    
    also remove some unused code.
    
    Change-Id: Iae2c3309b7a08055f3e13a5b866c5c084993e352
    fix [2931513] Add support for setting the orientation of an ANativeWindow
    
    Also implement support for cropping.
    
    Change-Id: Iba5888dd242bf2feaac9e9ce26e404c1f404c280
    fix [2873058] Surface::dequeueBuffer blocks on last buffer, i.e. cannot dequeue all allocated buffers at once.
    
    this situation happened when the last buffer needed to be resized
    (or allocated, the first time). the assumption was that the buffer
    was in use by SF itself as the current buffer (obviously, this
    assumption made no sense when the buffer had never been allocated, btw).
    
    the system would wait until some other buffer became the "front" buffer.
    
    we fix this problem by entirely removing the requirement that the
    buffer being resized cannot be the front buffer. instead, we just
    allocate a new buffer and replace the front buffer by the new one.
    
    the downside is that this uses more memory (an extra buffer) for a
    brief amount of time while the old buffer is being reallocated and
    before it has actually been replaced.
    
    Change-Id: I022e4621209474ceb1c671b23deb4188eaaa7285
    allow re-targetting of surfaces
    
    Surfaces can now be parcelized and sent to remote
    processes. When a surface crosses a process
    boundary, it looses its connection with the
    current process and gets attached to the new one.
    
    Change-Id: I39c7b055bcd3ea1162ef2718d3d4b866bf7c81c0
    split surface management from surface's buffers management
    
    Change-Id: If3c5655d1231f8f0c49ba68f972b1b20c93b3f87
    more clean-up in preparation of bigger changes
    
    the most important change here is the renaming of
    ISurfaceFlingerClient to ISurfaceComposerClient
    
    Change-Id: I94e18b0417f50e06f21377446639c61f65f959b3
    fix [2712278] The preview buffer left some black borders in left and bottom edges
    
    we were incorrectly flagging push_buffer surfaces as invalid
    
    Change-Id: I4dfd4ffbbe8a71f7e23e835db8d71966416c29bb
    added the notion of fixed-size buffers
    
    the new native_window_set_buffers_geometry allows
    to specify a size and format for all buffers to be
    dequeued. the buffer will be scalled to the window's
    size.
    
    Change-Id: I2c378b85c88d29cdd827a5f319d5c704d79ba381
    fix a bug when reallocating a window's buffers is needed
    
    we need to mark the buffers that need to be reallocated,
    NOT the buffer's indices.
    
    Change-Id: I809e2e1b03b56c4d2ab983c25523dae99aa1da74
    added native_window_set_buffer_count()
    
    this method can be used to change the number of buffers
    associated to a native window. the default is two.
    
    Change-Id: I608b959e6b29d77f95edb23c31dc9b099a758f2f
    fix the threading issue for setBuffercount()
    
    this change introduces R/W locks in the right places.
    on the server-side, it guarantees that setBufferCount()
    is synchronized with "retire" and "resize".
    on the client-side, it guarantees that setBufferCount()
    is synchronized with "dequeue", "lockbuffer" and "queue"
    fix some bugs in SharedBufferStack::resize
    
    added buffers should now be labeled properly.
    
    Change-Id: I28aa753fbe89ab89134e7753575319478934c7fa
    SharedBufferStack now can grow up to 16 buffers.
    
    there is a new resize() api, which currently only allows growing.
    
    Change-Id: Ia37b81b73be466d2491ffed7f3a23cd8e113c6fe
    Add support for enqueuing buffers in arbitrary order
    
    Also added a very simple SharedBufferStack unit test.
    
    Change-Id: I253dbbe98a53c966b78d22d4d6dd59f8aefc8c40
    cleanup. waitForCondition() now uses polymorphsim instead of templtes
    
    the reason for the above change is that waitForCondition() had become
    large over time, mainly to handle error cases, using inlines to
    evaluate the condition doesn't buys us much anymore while it increases
    code size.
    
    Change-Id: I2595d850832628954b900ab8bb1796c863447bc7
    fix a race condition in undoDequeue(), where 'tail' could be computed incorrectly.
    
    in the undoDequeue() case, 'tail' was recalculated from 'available' and 'head'
    however there was a race between this and retireAndLock(), which could cause
    'tail' to be recalculated wrongly.
    
    the interesting thing though is that retireAndLock() shouldn't have any impact
    on the value of 'tail', which is client-side only attribute.
    we fix the race by saving the value of 'tail' before dequeue() and restore it
    in the case of undoDequeue(), since we know it doesn't depend on retireAndLock().
    
    Change-Id: I4bcc4d16b6bc4dd93717ee739c603040b18295a0
    added setCrop() to android_native_window_t
    
    hooked up the new method up to Surface.cpp
    the actual crop is not implemented in SF yet
    
    Change-Id: Ic6e313c98fd880f127a051a0ccc71808bd689751
    add support for up to 16 buffers per surface
    
    also increase the dirtyregion size from 1 to 6 rectangles.
    Overall we now need 27KiB process instead of 4KiB
    
    Change-Id: Iebda5565015158f49d9ca8dbcf55e6ad04855be3
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    fix [2170319] gmail bulk operation checkbox latency on passion
    
    This also fixes [2152536] ANR in browser
    
    When SF is enqueuing buffers faster than SF dequeues them.
    The update flag in SF is not counted and under some situations SF will only
    dequeue the first buffer. The state at this point is not technically
    corrupted, it's valid, but just delayed by one buffer.
    
    In the case of the Browser ANR, because the last enqueued buffer was delayed
    the resizing of the current buffer couldn't happen.
    
    The system would always fall back onto its feet if anything -else- in
    tried to draw, because the "late" buffer would be picked up then.
    fix [2152536] ANR in browser
    
    A window is created and the browser is about to render into it the
    very first time, at that point it does an IPC to SF to request a new
    buffer. Meanwhile, the window manager removes that window from the
    list and the shared memory block it uses is marked as invalid.
    However, at that point, another window is created and is given the
    same index (that just go freed), but a different identity and resets
    the "invalid" bit in the shared block. When we go back to the buffer
    allocation code, we're stuck because the surface we're allocating for
    is gone and we don't detect it's invalid because the invalid bit has
    been reset.
    
    It is not sufficient to check for the invalid bit, I should
    also check that identities match.
    Attempt to fix [2152536] ANR in browser
    
    The ANR is caused by SurfaceFlinger waiting for buffers of a removed surface to become availlable.
    When it is removed from the current list, a Surface is marked as NO_INIT, which causes SF to return
    immediately in the above case. For some reason, the surface here wasn't marked as NO_INIT.
    
    This change makes the code more robust by always (irregadless or errors) setting the NO_INIT status
    in all code paths where a surface is removed from the list.
    
    Additionaly added more information in the logs, should this happen again.
    add basic time stats for surfaces lock time
    make sure to update the tail pointer when undoing a dequeue
    fix [2112575] stuck on DequeueCondition for a surface that doesn't exist anymore
    
    this also fixes part of [2111536] Device is soft rebooted after ending the call through voice dialer
    make sure conditions will return when the status of a surface is not NO_ERROR
    fix [2068105] implement queueBuffer/lockBuffer/dequeueBuffer properly
    
    Rewrote SurfaceFlinger's buffer management from the ground-up.
    The design now support an arbitrary number of buffers per surface, however the current implementation is limited to four. Currently only 2 buffers are used in practice.
    
    The main new feature is to be able to dequeue all buffers at once (very important when there are only two).
    
    A client can dequeue all buffers until there are none available, it can lock all buffers except the last one that is used for composition. The client will block then, until a new buffer is enqueued.
    
    The current implementation requires that buffers are locked in the same order they are dequeued and enqueued in the same order they are locked. Only one buffer can be locked at a time.
    
    eg. Allowed sequence:   DQ, DQ, LOCK, Q, LOCK, Q
    eg. Forbidden sequence: DQ, DQ, LOCK, LOCK, Q, Q
    strengthen region validation
    
    Change-Id: I75ee7bc4dd7a2f5357ac8994a23bc8b8bfb6eb44
    fix Region const_iterator.
    
    - it returned an empty rect when the region was empty, instead
    of returning an empty list of rect.
    
    - also fixed an infinite loop when boolean_operation was given
    an empty list of rects
    
    Change-Id: I62225c7dcd2832025bb8f12e6cb3762f2a7b36cb
    eclair snapshot
    fix [2182249] [MR1] valgrind error in surface flinger
    add a virtual destructor to region_rasterizer, to be on the safe side
    Region now has its own implementation instead of relying on SkRegion, which allows us to break libui's dependency on libcorecg.
    Remove some #ifdef HAVE_ANDROID_OS that were needed for the simulator build
    
    Change-Id: I13d9f251f86c05ae5405f37adbf6b8e9660935ba
    Signed-off-by: Mike Lockwood <lockwood@android.com>
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libutils clean-up
    
    Change-Id: I6ff4cfc736751de2912c697f954e45e275f2d386
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Allow OMX pointer types to be forced to 32 bits
    
    Enabled by #define.  Is used for 64 bit compilation to
    force structs to use 32 bit pointer values for eventual
    IPC to 32 bit OMX codecs.
    
    May change later if we support 64 bit OMX codecs.
    
    Change-Id: I0d12f86774f6f7ce9c39c8abea5d51988a7eef11
    Signed-off-by: Andy Hung <hunga@google.com>
    AArch64: Correction to OMX_U32 and OMX_S32
    
    The types of OMX_U32 and OMX_S32 were appropriate to a 32-bit system
    but were not appropriate to a 64-bit system. They have been changed to
    make them portable between the two systems. With this change and a
    change to frameworks/av/media/libstagefright/foundation/AString.cpp,
    the android.media.cts.DecoderTest#testFlush CTS test passes.
    
    Change-Id: I8e16c7169f54599c23fea71585b531e48541c78a
    Signed-off-by: Marcus Oakland <marcus.oakland@arm.com>
    Copied some headers from /frameworks/base to /frameworks/native to support PDK effort
    
    o added some minor header include changes
    o related-to-bug: 6044887
    
    Change-Id: Ia8e7ba861c509a4fb688ab2ed1e81151a708861a
    AAC codec profile updates
    
    Add new fields to OMX_AUDIO_PARAM_AACPROFILETYPE for
    - SBR configuration
    - decoder max number of channels
    - decoder DRC parameters
    
    Bug 16740915
    
    Change-Id: Ib01822bc402fe9064c6c1c68b72c570cf72b7ecb
    HEVC Support
    Added HEVC enums and structures to OMX header files
    
    Change-Id: If4135c6df86df51098fc7a979543975ed70b0641
    Add VP8 encoder extra parameters structure to support
    configuring encoder key frame interval, number of
    temporal layers, type of temporal layer pattern
    and minimum and maximum quantization parameters.
    
    Bug: 11969958
    Change-Id: I561e03148a7c5d928b5bf350ad3631ae69871065
    Adding Opus related struct definitions to OMX_Index
    
    Adding Opus related structure and constant definitions to
    OMX_Index.h
    
    Change-Id: Iae0394c86900f0db322893ffce695f854624833a
    [DO NOT MERGE] Extend OpenMAX IL definitions to support AC3
    
    OpenMAX IL does not have generic support for AC3, but IL 1.1.2 and above
    supports component extension APIs, which enable us to add our own constants
    and definitions.
    
    Change-Id: Iecee4f8bb3112b0720ceae9192017e12d3fe97e3
    Extend OpenMAX IL definitions to support AC3
    
    OpenMAX IL does not have generic support for AC3, but IL 1.1.2 and above
    supports component extension APIs, which enable us to add our own constants
    and definitions.
    
    Change-Id: Iecee4f8bb3112b0720ceae9192017e12d3fe97e3
    Adds some OpenMAX 1.1.2 IL extension headers.
    
    Includes index and video extension headers
    in order to support vpx specific parameters
    and enable vpx encoder.
    
    Note that existing (seemingly modified) version
    of OMX_Video.h semantically conflicts with
    official OMX_VideoExt.h because former includes
    OMX_Video_CodingVPX as OMX_VIDEO_CODINGTYPE
    whereas official extension headers denote
    it as OMX_VIDEO_CodingVP8 within
    OMX_VIDEO_CODINGEXTTYPE.
    
    Change-Id: Ibab9663fcbc9c406a2cfb4bf79fe21e3b01a6e66
    Signed-off-by: Kunter Gultekin <kuntergultekin@google.com>
    add a parameter for PCM limiter enable
    
    Bug: 17470065
    Change-Id: I327115fc16e7afe2bf5870e123d63f9887161206
    AAC codec profile updates
    
    Add new fields to OMX_AUDIO_PARAM_AACPROFILETYPE for
    - SBR configuration
    - decoder max number of channels
    - decoder DRC parameters
    
    Bug 16740915
    
    Change-Id: Ib01822bc402fe9064c6c1c68b72c570cf72b7ecb
    Adding Opus related struct definitions to OMX_Index
    
    Adding Opus related structure and constant definitions to
    OMX_Index.h
    
    Change-Id: Iae0394c86900f0db322893ffce695f854624833a
    [DO NOT MERGE] Extend OpenMAX IL definitions to support AC3
    
    OpenMAX IL does not have generic support for AC3, but IL 1.1.2 and above
    supports component extension APIs, which enable us to add our own constants
    and definitions.
    
    Change-Id: Iecee4f8bb3112b0720ceae9192017e12d3fe97e3
    Extend OpenMAX IL definitions to support AC3
    
    OpenMAX IL does not have generic support for AC3, but IL 1.1.2 and above
    supports component extension APIs, which enable us to add our own constants
    and definitions.
    
    Change-Id: Iecee4f8bb3112b0720ceae9192017e12d3fe97e3
    OMX IL header additions for FLAC
    
    Bug 5525503
    
    Change-Id: I8d305d5351d3780f8ca933b8e602f2bf88e9ac78
    Copied some headers from /frameworks/base to /frameworks/native to support PDK effort
    
    o added some minor header include changes
    o related-to-bug: 6044887
    
    Change-Id: Ia8e7ba861c509a4fb688ab2ed1e81151a708861a
    OMX: add supporting methods for flexible YUV
    
    Bug: 10706245
    Change-Id: I2427930a34c468e49d3db7ba2865344f1fba2960
    Add support for OMX_QCOM_COLOR_FormatYUV420PackedSemiPlanar32m color format
    
    Change-Id: I9392eb961ec92d4d778573b7a142344e552c80d6
    Add new format constant
    
    Change-Id: I8a53c69c9e44450b7ee3d32750965d53265812bf
    Add vendor specific color format to OMX_IVCommon.h
    
    - Add Qualcomm specific color format to OMX_IVCommon.h
    
    Change-Id: I77a7196307d079348a50d7bb67c80cd2642a72df
    Copied some headers from /frameworks/base to /frameworks/native to support PDK effort
    
    o added some minor header include changes
    o related-to-bug: 6044887
    
    Change-Id: Ia8e7ba861c509a4fb688ab2ed1e81151a708861a
    fix compiler warning in OMX_VideoExt.h
    
    Bug: 11969958
    Change-Id: I6dbc1c5a56c5f8db0af931c9391299aaaf1b536a
    HEVC Support
    Added HEVC enums and structures to OMX header files
    
    Change-Id: If4135c6df86df51098fc7a979543975ed70b0641
    Add VP8 encoder extra parameters structure to support
    configuring encoder key frame interval, number of
    temporal layers, type of temporal layer pattern
    and minimum and maximum quantization parameters.
    
    Bug: 11969958
    Change-Id: I561e03148a7c5d928b5bf350ad3631ae69871065
    Add video extension OMX_VIDEO_CodingVP9 to support VP9 decoder.
    
    Change OMX_Video_CodingVPX to OMX_VIDEO_CodingVP8 in order
    to be consistant with official OMX_VideoExt.h and avoid the
    confusion with new extension OMX_VIDEO_CodingVP9.
    
    This change needs to be merged with changes in frameworks/av to
    avoid build break due to header change.
    
    Change-Id: Iaa2dbafa76dc24ad3cf52a9bf3dee312e3c64bfa
    Adds some OpenMAX 1.1.2 IL extension headers.
    
    Includes index and video extension headers
    in order to support vpx specific parameters
    and enable vpx encoder.
    
    Note that existing (seemingly modified) version
    of OMX_Video.h semantically conflicts with
    official OMX_VideoExt.h because former includes
    OMX_Video_CodingVPX as OMX_VIDEO_CODINGTYPE
    whereas official extension headers denote
    it as OMX_VIDEO_CodingVP8 within
    OMX_VIDEO_CODINGEXTTYPE.
    
    Change-Id: Ibab9663fcbc9c406a2cfb4bf79fe21e3b01a6e66
    Signed-off-by: Kunter Gultekin <kuntergultekin@google.com>
    add OMX_VIDEO_AVCLevel52 constant
    
    Bug: 17676461
    Change-Id: I120041e9b2ffe2a232a2419bcb5fe88cb49961cb
    add OMX_VIDEO_AVCLevel52 constant
    
    Bug: 17676461
    Change-Id: I120041e9b2ffe2a232a2419bcb5fe88cb49961cb
    HEVC Support
    Added HEVC enums and structures to OMX header files
    
    Change-Id: If4135c6df86df51098fc7a979543975ed70b0641
    Add video extension OMX_VIDEO_CodingVP9 to support VP9 decoder.
    
    Change OMX_Video_CodingVPX to OMX_VIDEO_CodingVP8 in order
    to be consistant with official OMX_VideoExt.h and avoid the
    confusion with new extension OMX_VIDEO_CodingVP9.
    
    This change needs to be merged with changes in frameworks/av to
    avoid build break due to header change.
    
    Change-Id: Iaa2dbafa76dc24ad3cf52a9bf3dee312e3c64bfa
    Copied some headers from /frameworks/base to /frameworks/native to support PDK effort
    
    o added some minor header include changes
    o related-to-bug: 6044887
    
    Change-Id: Ia8e7ba861c509a4fb688ab2ed1e81151a708861a
    Copied some headers from /frameworks/base to /frameworks/native to support PDK effort
    
    o added some minor header include changes
    o related-to-bug: 6044887
    
    Change-Id: Ia8e7ba861c509a4fb688ab2ed1e81151a708861a
    Copied some headers from /frameworks/base to /frameworks/native to support PDK effort
    
    o added some minor header include changes
    o related-to-bug: 6044887
    
    Change-Id: Ia8e7ba861c509a4fb688ab2ed1e81151a708861a
    Copied some headers from /frameworks/base to /frameworks/native to support PDK effort
    
    o added some minor header include changes
    o related-to-bug: 6044887
    
    Change-Id: Ia8e7ba861c509a4fb688ab2ed1e81151a708861a
    AAC codec profile updates
    
    Add new fields to OMX_AUDIO_PARAM_AACPROFILETYPE for
    - SBR configuration
    - decoder max number of channels
    - decoder DRC parameters
    
    Bug 16740915
    
    Change-Id: Ib01822bc402fe9064c6c1c68b72c570cf72b7ecb
    OMX IL header additions for FLAC
    
    Bug 5525503
    
    Change-Id: I8d305d5351d3780f8ca933b8e602f2bf88e9ac78
    Define OMX_AUDIO_AACObjectELD
    
    Change-Id: Icfbcbddb46fc0bf185e00b193462bc9e035c222b
    Copied some headers from /frameworks/base to /frameworks/native to support PDK effort
    
    o added some minor header include changes
    o related-to-bug: 6044887
    
    Change-Id: Ia8e7ba861c509a4fb688ab2ed1e81151a708861a
    Copied some headers from /frameworks/base to /frameworks/native to support PDK effort
    
    o added some minor header include changes
    o related-to-bug: 6044887
    
    Change-Id: Ia8e7ba861c509a4fb688ab2ed1e81151a708861a
    Copied some headers from /frameworks/base to /frameworks/native to support PDK effort
    
    o added some minor header include changes
    o related-to-bug: 6044887
    
    Change-Id: Ia8e7ba861c509a4fb688ab2ed1e81151a708861a
    HDCP: add getCaps to query HDCP module capabilities
    
    This is used now to query whether HDCP module supports encryption
    from a native buffer output from the encoder.
    
    Bug: 10609422
    
    Change-Id: Ib7fa14e7f4de1da90b46eaa174a7a05ec9dacbdc
    HDCP: add enums for HDCP module capabilities
    
    This change adds the enums for HDCP caps. An interface getCaps()
    will be added later for querying whether HDCP module supports
    encryption from a native buffer output from the encoder.
    
    Bug: 10609422
    
    Change-Id: Ib7fa14e7f4de1da90b46eaa174a7a05ec9dacbdc
    wifi-display: add support for metadata mode on encoder output
    
    Bug: 8968123
    
    Change-Id: I3d2b567d4908f5f49c0694589920babe1f6752cd
    Extend the HDCP API to also allow for a _decryption_ module, the counterpart
    
    to what we previously defined exclusively.
    
    Change-Id: I774d3cd7146da77675dcb90e33c9552cb7b10ac6
    frameworks/native: Amend HDCP API
    
    - Allow caller to set the observer and cookie.
    - Add more notifications that the HDCPModule can send to its Observer.
    
    Change-Id: I8bf9cc02a029cd38bbd25d9f0a634452173f4d26
    Signed-off-by: Deva Ramasubramanian <dramasub@codeaurora.org>
    initial checkin of a preliminary HDCP API for vendors to implement.
    
    Change-Id: If98277efdec1bc8f1e9f4af1ca73324e4c3d469b
    Tunneled Video Playback support
    
     Added native_window_set_sideband_stream() method to Surface.[h|cpp]
     Added ConfigureVideoTunnelModeParams OMX configuration structure to
     HardwareAPI.h
    
    Bug: 16132368
    Change-Id: I28fa1b9dbe858d93e353e0991098cad45c626bd9
    OMX: add supporting methods for flexible YUV
    
    Bug: 10706245
    Change-Id: I2427930a34c468e49d3db7ba2865344f1fba2960
    media/hardware/HardwareAPI.h: Added PrepareForAdaptivePlaybackParams
    
    This is the param struct used by stagefright to notify codec that
    the playback may include resolution changes, so that it can prepare
    accordingly to avoid port reconfiguration.
    
    Change-Id: I64e53b7ebf74c4f9d07cc9fe0cd65be55f666afe
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Related-to-bug: 7093648
    Clarify some android-specific OMX extensions for native buffers.
    
    Clarify the use of enableAndroidNativeBuffers and
    storeMetaDataInBuffers extensions.
    
    Change-Id: Ia1ca4a262525de74f133619f92ef6ba8271a6f72
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Fix includes in HardwareAPI.h to be absolute and not relative
    
    (but using system header syntax)
    
    Change-Id: I504c5c5330ddd1e3b3d2fb4760b0235a4fda84d8
    media/hardware/HardwareAPI.h: Added metadata struct used by video decoder
    
    This is the metadata layout when used by the video decoder.
    
    Change-Id: I3497305ad23b3fc4e1e8eaaea7b0890bc1ffd5ad
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Bug: 7093648
    Add a way to configure an OMX encoder to emit SPS/PPS before IDR frames.
    
    Change-Id: I71ce254533c8e99bc54d199d8a9828397fe3d99d
    related-to-bug: 7245308
    Copied some headers from /frameworks/base to /frameworks/native to support PDK effort
    
    o added some minor header include changes
    o related-to-bug: 6044887
    
    Change-Id: Ia8e7ba861c509a4fb688ab2ed1e81151a708861a
    media: add kMetadataBufferTypeGraphicBuffer
    
    Bug: 17935149
    Change-Id: I1c26d1e83d8fa0a9ccdb25f6f3b19a86b1dc6f37
    Copy one more file to /frameworks/native
    
    o related-to-bug: 6044887
    
    Change-Id: I920c487089eb258ada87603134f2597db6fe14e9
    Add support for max res decode
    
    bug: 16034599
    Change-Id: Ia1de1457ca29fe1dd7e55f4bb45da45ea3f6e5b1
    Fix non-portable definition of CryptoPlugin::SubSample
    
    bug: 16016106
    Change-Id: I76514b2e7a28c86a0b0b311af575ca9dfc9471a9
    Merge from jb-dev for "sample video corruption in MediaCodec mode." DO NOT MERGE
    
    jb-dev commit: fa2b8f243eb048fb2b8e5a14356190f69eb31a36
    
    Change-Id: Ic2a28663d25e3007c95e15ecbb0d44b820045f85
    related-to-bug: 6732061
    Fixed sample video corrupted in MediaCodec mode.
    
    Change-Id: Ibe11a83199f3db1ba6266a1a9e11c7fc24ceb554
    related-to-bug: 6732061
    Allow the crypto plugin to specify error detail if it returns an error
    
    in the range ERROR_DRM_VENDOR_MIN..ERROR_DRM_VENDOR_MAX.
    
    Change-Id: Ic5d53e98cf6d98d92ad305d51f848e03d0bf3a84
    related-to-bug: 6365261
    New Crypto "HAL" API.
    
    Change-Id: I225cdfeffb7663a2d639a01cfe704aa12f9014b8
    related-to-bug: 6275919
    Remove all traces of long obsolete OMXComponentBase class.
    
    Change-Id: I749994fe1560363afc95beae45b66ea56a20caa8
    Copied some headers from /frameworks/base to /frameworks/native to support PDK effort
    
    o added some minor header include changes
    o related-to-bug: 6044887
    
    Change-Id: Ia8e7ba861c509a4fb688ab2ed1e81151a708861a
    Allow device to be unprovisioned
    
    bug: 12247651
    Change-Id: Ib0ec34da708b11a95da66c353d864bb87a6616c9
    Support CAST V2 Authentication in MediaDrm
    
    Update frameworks to enable support for CAST
    V2 Authentication in the DRM Plugin.
    
    Change-Id: Ic38f0e1484b1388dd87f4591c74984cb724d50e2
    related-to-bug: 12702350
    Add ability to test supported content types to MediaDrm
    
    bug: 10244066
    Change-Id: I6666d0dbfdc6e791deb9a82c918255af4fa19816
    Correct native API documentation related to MediaDrm offline use case
    
    These doc updates were made previously to the java API but some
    did not make it into the native API.
    
    Change-Id: I9b7bfcd77bc593685254baca1c148deb7e1f91c7
    related-to-bug: 8621588
    Implement async event callout from drm plugin to Java app
    
    Change-Id: I83a7757a7b83676ce1a9ffa6ff0a8e495e31b859
    MediaDrm API update
    
    Clarify offline usage of sessions and keys and implement
    implement CryptoSession to support additional crypto use
    cases.
    
    Change-Id: I418ffbb37e3036a2b5eea5a86ac88a5af1a9da07
    Updated MediaDrm API based on review input.
    
    Change-Id: I06716d2616bbe7efaea6cbf9ba7bf303dfae1650
    Move II420ColorConverter.h to /frameworks/native/include/media/editor
    
    o related-to-bug: 6044894
    
    Change-Id: Ib8f5406e32bd6c190d65e4a2e014f73e759d4415
    Improve the VSYNC api a bit.
    
    - add the ability to set the vsync delivery rate, when the rate is
    set to N>1 (ie: receive every N vsync), SF process' is woken up for
    all of vsync, but clients only see the every N events.
    
    - add the concept of one-shot vsync events, with a call-back
    to request the next one. currently the call-back is a binder IPC.
    
    Change-Id: I09f71df0b0ba0d88ed997645e2e2497d553c9a1b
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    new SensorService
    
    remove old sensor service and implement SensorManager
    on top of the new (native) SensorManger API.
    
    Change-Id: Iddb77d498755da3e11646473a44d651f12f40281
    first step at implementing the native sensor support
    
    in this commit:
    - implemented the C stub
    - implemented the binder interfaces involved
    - implemented most of the C++ client side
    
    missing:
    - SensorManager cannot connect to the SensorServer yet
    (because there is no SensorServer yet)
    
    Change-Id: I75010cbeef31c98d6fa62fd5d388dcef87c2636b
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    BufferQueue: Allow detaching/reattaching buffers
    
    Adds detachBuffer and attachBuffer calls to both the producer and
    consumer sides of BufferQueue. Buffers may be detached while dequeued
    by the producer or acquired by the consumer, and when attached, enter
    the dequeued and acquired states, respectively.
    
    Bug: 13173343
    Change-Id: Ic152692b0a94d99e0135b9bfa62747dab2a54220
    Split BufferQueue into core + producer + consumer
    
    Change-Id: Idc39f1e511d68ce4f02202d35425a419bc0bcd92
    Fix sockfd leakage in SensorService.
    
    i) Call removeFd() only if the fd in the BitTube has been
    previously added to the Looper. Use a flag to determine whether the fd
    has been previously added or not.
    ii) Increment mPendingFlushEventsToSend after holding a connectionLock.
    iii) Store the number of acks that are pending in SensorEventQueue
     and send them all at once.
    
    Bug: 17472228
    Change-Id: I1ec834fea1112a9cfbd9cddd2198438793698502
    SensorService fixes
    
      i) Significant Motion multiple clients fix. Make a copy of
      mActiveConnections vector before cleaning up SensorEventConnections
      when one-shot sensors trigger.
      ii) Maintain a mapping between flush_complete_events and
      SensorEventConnections to accurately map flush() API calls and
      corresponding flush_complete_events
      iii) Remove all references to 1_1 and 1_2 HALs.
      iv) Dynamically allocate sensor_event buffers in SensorService main
      threadLoop.
    
    Bug: 17412359
    Change-Id: If3c3986197660cafef2d2e0b4dc7582e229cf1c4
    SensorService flush fixes.
    
     i) Fix a possible race condition when adding a pending flush connection
     to mActiveSensors data structure.
     ii) Invalidate flush_complete_events as soon as they are consumed by a
     connection so that they are not used by other connections which are
     registered for the same sensor.
    
    Change-Id: I1491bea8c2081c4aab1feacc60add13b7aa26bb7
    SensorService fixes.
    
       1) Flush should only be received by the app calling flush(). Maintain
          a queue of all flush() calls and send flush_complete events in that
          order.
       2) Log warnings for older HALs. Remove batch() calls with DRY_RUN flag.
       3) Reallocate event cache when more sensors register and the desired
          maxCacheSize increases. Clear NEEDS_ACK flag in the buffer whenever
          there is a write() failure.
       4) More dump information. Add wake-up flag, maxDelay and timestamps for
          sensor events.
    
    Bug: 16874778
    Change-Id: I195646191059fd31f75f2f07886c0f98bf9b509a
    Enable wakeup sensors.
    
    SensorService should hold a wakelock till the app reads events from a wakeup sensor. Currently drivers hold a wakelock with a
    timeout while delivering events from a wake up sensor like Significant Motion. This hack can be removed now.
    
    Bug: 9774884
    Change-Id: If3b5acb99c9cf0cd29012fcfa9d6b04c74133d01
    Change API from flush(handle) to flush(). Call flush on all active sensors in the given SensorEventConnection.
    
    Change-Id: I4ef2bec80406c517903ab9782dc9eaf3fa8b7f36
    Change API from flush(handle) to flush(). Call flush on all active sensors in the given SensorEventConnection.
    
    Change-Id: I4ef2bec80406c517903ab9782dc9eaf3fa8b7f36
    fix a few problems with BitTube
    
    BitTube used to send objects one at a time and didn't
    handle errors properly.
    
    We now send all the objects in one call, which means they
    have to be read as a single batch as well. This changes the
    BitTube API.
    
    Update SensorService to the new API.
    
    Also added an API to set the size of the send buffer.
    
    Bug: 10641596
    Change-Id: I77c70d35e351fdba0416fae4b7ca3b1d56272251
    Sensor batching. Changes to the native code.
    
    Bug: 10109508
    Change-Id: I7333f3aac76125a8226a4c99c901fb904588df04
    use a socketpair instead of a pipe in BitTube
    
    Bug: 6252830
    Change-Id: Ia7a7b08409517214136261c05569dc5959a597ab
    Rename SensorChannel to BitTube
    Replace epoll() with poll() and rename PollLoop to Looper.
    
    As part of this change, consolidated and cleaned up the Looper API so
    that there are fewer distinctions between the NDK and non-NDK declarations
    (no need for two callback types, etc.).
    
    Removed the dependence on specific constants from sys/poll.h such as
    POLLIN.  Instead looper.h defines events like LOOPER_EVENT_INPUT for
    the events that it supports.  That should help make any future
    under-the-hood implementation changes easier.
    
    Fixed a couple of compiler warnings along the way.
    
    Change-Id: I449a7ec780bf061bdd325452f823673e2b39b6ae
    Added SensorManager.getMinDelay()
    
    Exposed the new "min delay" sensor property through native and
    java sensor apis. This allows the caller to know what is the
    maximum rate at which a sensor can return events, or, if a sensor
    works in "update" mode (events returned only when the value changes).
    
    Also augmented SensorManager.regusterSensorEvent() so that it can
    accept a value in microsecond in addition to the 4 constants already
    defined.
    
    Change-Id: If425e9979892666df8c989d7de3c362230fa19e0
    propagate sensor event rate properly
    
    Change-Id: I32e67d30e4295285a6827956cc8161b2025d70bc
    new SensorService
    
    remove old sensor service and implement SensorManager
    on top of the new (native) SensorManger API.
    
    Change-Id: Iddb77d498755da3e11646473a44d651f12f40281
    first step at implementing the native sensor support
    
    in this commit:
    - implemented the C stub
    - implemented the binder interfaces involved
    - implemented most of the C++ client side
    
    missing:
    - SensorManager cannot connect to the SensorServer yet
    (because there is no SensorServer yet)
    
    Change-Id: I75010cbeef31c98d6fa62fd5d388dcef87c2636b
    make struct Event layout consistent on 32/64-bit
    
    To make struct Event have consistent memory layout between x86
    and x86_64, force nsecs_t timestamp align to 64bit because it's
    not true for x86.
    
    Change-Id: I49eaddd89e10d595cf6a5130f9762b5388c96625
    Signed-off-by: Fengwei Yin <fengwei.yin@intel.com>
    Display events now always carry the display id they happened on
    
    Change-Id: I12de1d883c23927722bc3a71b782f0079de4e831
    We now report hotplug events to the framework
    
    Change-Id: I2d6b7787d39e5929485a551e4982498c5053c211
    use a socketpair instead of a pipe in BitTube
    
    Bug: 6252830
    Change-Id: Ia7a7b08409517214136261c05569dc5959a597ab
    separate transactions from updates
    
    with this changes, SF transactions are handled as soon as possible
    but do not trigger updates. the update is delayed until the next
    vsync.
    
    this allows us to work much better without requiring triple-buffering.
    
    Change-Id: I1fa10794d0cf742129f0877698b7b1e1f2ec7401
    fix an issue with vsync event delivery
    
    vsync events were sometimes delivered to connected
    client who didn't request them. this happened if
    another client requested the delivery and that client
    was first in the client list.
    
    also fix the vsync test which didn't request any events as
    well as DisplayEventReveiver documentation which was misleading
    about the necessity to request vsync events.
    
    Change-Id: Ie990fda3f337f8f0042745c4b2cde67936c45686
    Improve the VSYNC api a bit.
    
    - add the ability to set the vsync delivery rate, when the rate is
    set to N>1 (ie: receive every N vsync), SF process' is woken up for
    all of vsync, but clients only see the every N events.
    
    - add the concept of one-shot vsync events, with a call-back
    to request the next one. currently the call-back is a binder IPC.
    
    Change-Id: I09f71df0b0ba0d88ed997645e2e2497d553c9a1b
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    BufferItemConsumer: Use IGBC instead of BQ
    
    Change-Id: Id1756ac62954ba412f2c23c5fa6e5d760c299347
    gui: Remove BufferQueue::MIN_UNDEQUEUED_BUFFERS
    
    Change-Id: I7c0cc36046dbbdb9c0e85acfe5027293d1131275
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    always pass the BufferQueue explicitely to consumers
    
    Change-Id: I883b0a7b19d8e722f9ab714ba6f49e658b02ca86
    Pay attention to buffer timestamps
    
    When acquiring a buffer, SurfaceFlinger now computes the expected
    presentation time and passes it to the BufferQueue acquireBuffer()
    method.  If it's not yet time to display the buffer, acquireBuffer()
    returns PRESENT_LATER instead of a buffer.
    
    The current implementation of the expected-present-time computation
    uses approximations and guesswork.
    
    Bug 7900302
    
    Change-Id: If9345611c5983a11a811935aaf27d6388a5036f1
    BufferItemConsumer: add functions to set default buffer format/size
    
    Bug: 8629088
    Change-Id: I06f2e26a70d6dbcfcd70b08b4461e8e401f6e83f
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    Add BufferItemConsumer, a simple BufferQueue consumer.
    
    BufferItemConsumer allows for acquiring BufferQueue's BufferItems,
    which contain all the data and metadata the BufferQueue has for a
    given graphics buffer.
    
    This consumer is useful when direct access to the native buffer_handles
    is needed by the client.
    
    Also includes a minor cleanup of CpuConsumer's use of 'virtual'.
    
    Bug: 6243944
    Change-Id: If7dc4192b15ac499555f1eda42a85140f2434795
    surfaceflinger: add getDisplayStats() method
    
    This is used by media service to schedule video frames at the
    proper time, based on precise vsync timings.
    
    Bug: 14659809
    Change-Id: I1a90603f3dc09dca9aa4f90a3aa845fab56e0a5e
    Add rotation to surfaceflingers screen cap.
    
    + This is needed so that activity manager does not
      have to do cpu side rotations when capturing recents
      thumbnails.
    
    Change-Id: If998008e675ad01305db8399fd643cf4608b7025
    surfaceflinger: Replace blank/unblank with setPowerMode
    
    We replace the blank/unblank calls in surfaceFlinger with a more generic
    setPowerMode() routine.
    
    Some displays support different power modes (for example, with reduced
    color palettes). Depending on the use case we should be able to toggle
    these modes, so as to achieve incremental power savings.
    
    Initially, three power modes will be supported:
    - HWC_POWER_MODE_OFF
    - HWC_POWER_MODE_DOZE
    - HWC_POWER_MODE_NORMAL
    
    HWC_POWER_MODE_OFF will correspond to blanking the display, while
    HWC_POWER_MODE_NORMAL will correspond to unblanking. HWC_POWER_MODE_DOZE
    will put the display into a low power setting, if it is supported in
    hardware.
    
    If such a low power mode is not supported, it should be treated as a
    call to set the mode to HWC_POWER_MODE_NORMAL.
    
    As a consequence of adding the mPowerMode field, the mScreenAcquired is
    no longer required, and thus references to it are removed and replaced
    equivalent references to mPowerMode.
    
    We also add the glue code to connect the services invocation of setting
    a power mode and the HAL implementation in HWComposer.
    
    Bug: 13472578
    Change-Id: I431595ecf16d2f2c94259272db3dd42f29636204
    Signed-off-by: Prashant Malani <pmalani@google.com>
    SurfaceFlinger: Add sourceCrop to screenshot
    
    Adds a sourceCrop Rect parameter to screenshot commands, which allows
    clients to capture only a portion of the screen instead of the whole
    screen.
    
    Bug: 15137922
    Change-Id: I629447573cd34ffb96334cde7ba02490b9ea06d8
    Enable changing display configuration
    
    This allows querying and switching display device configurations
    through the ISurfaceComposer/SurfaceComposerClient interface.
    
    Bug: 14320401
    Change-Id: I8c22165698950e5da32204c1c4da92122f91a715
    Adding render stats APIs to UiAutomation (framework native).
    
    bug:12927198
    
    Change-Id: Ibb1c07f7d89e11281e5c1f27f412a29ac6f9c4ab
    Allow disabling layer rotation during screenshots
    
    Add the ability to ignore layers' transformation matrices during
    screenshot capture, which will allow the window manager to capture
    unrotated images for recents during the device rotation animation.
    
    Bug: 11805195
    Change-Id: I854d87bc84ca06ef9a054a454af1c080ee66fbb8
    Add ISurfaceComposer::destroyDisplay
    
    Bug: 10191053
    Change-Id: Ia89286f95421344a60ffedaaca5825c4e3cd7f9e
    remove support for glReadPixels screenshot path
    
    this was only needed on some chipset we're not
    supporting in KLP.
    
    Change-Id: I2e8fc07f135030bd61d2e241a8e426f1a4316425
    rework how we take screenshots for a CPU consumer
    
    We're not using IMemoryHeap as a transport anymore,
    instead we're providing a CpuConsumer and use the
    IGraphicBufferProducer version of the screenshot API.
    
    However, some GPU drivers don't support properly
    a GPU to CPU path, to work around this, we use a
    temporary BufferQueue on the server side for the
    GL rendering, and we use glReadPixels into the
    CpuConsumer (we're now using a CPU to CPU path
    which is always supported).
    
    Currently this "wrapping" is always performed,
    but it can be bypassed on devices that support
    the GPU to CPU path.
    
    This also addresses a DoS attack vector on
    SurfaceFlinger, where an application could
    consume all of SF's filedescriptors by creating
    a lot of screenshots in a row.
    
    Bug: 8390553
    
    Change-Id: I9e81514c2a7711b9bb393f74305be7d2abe08f1c
    don't allow screenshots without the READ_FRAMEBUFFER permission
    
    the recent screenshot rework allowed the older screenshot
    interface to work without that permission
    
    Change-Id: I6c4743f4591c81106e3b823d55a055f7b4907de1
    rework screenshot API and implementation
    
    - SurfaceFlinger now supports to take a screenshot
      directly into an IGraphicBufferProducer
    
    - reimplement the IMemoryHeap screenshot on top
      of the above
    
    - reimplement LayerScreenshot such that its
      BufferQueue is directly used as the destination
      of the screenshot. LayerScreenshot is now a thin
      wrapper around Layer
    
    Bug: 6940974
    
    Change-Id: I69a2096b44b91acbb99eba16f83a9c78d94e0d10
    Add some comments.
    
    Also, minor tweak to SurfaceTextureLayer.
    
    Change-Id: If616d5ee4e8226dd0e16c5dbb0e0f80db553110e
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    SurfaceFlinger: add support for secure displays
    
    This change adds support for displays that are not allowed to display surfaces
    with the eSecure flag set.  All non-virtual displays are considered secure,
    while virtual displays have their secure-ness specified at creation time.
    
    Bug: 7368436
    Change-Id: I81ad535d2d1e5a7ff78269017e85b111f0098500
    SurfaceFlinger: add animation transactions
    
    This change adds a transaction flag for WindowManager to indicate that a
    transaction is being used to animate windows around the screen.  SurfaceFlinger
    will not allow more than one of these transactions to be outstanding at a time
    to prevent the animation "frames" from being dropped.
    
    Bug: 7353840
    Change-Id: I6488a6e0e1ed13d27356d2203c9dc766dc6b1759
    SurfaceFlinger: add animation transactions
    
    This change adds a transaction flag for WindowManager to indicate that a
    transaction is being used to animate windows around the screen.  SurfaceFlinger
    will not allow more than one of these transactions to be outstanding at a time
    to prevent the animation "frames" from being dropped.
    
    Bug: 7353840
    Change-Id: I6488a6e0e1ed13d27356d2203c9dc766dc6b1759
    Pass display arg to blank/unblank
    
    This allows us to blank and unblank displays other than the built-in
    display (e.g. HDMI).
    
    Bug: 7240511
    Change-Id: I89ea13f9e497be74c3e1231d0c62fb558e93e0f8
    Plumb display name into SurfaceFlinger
    
    The Surface createDisplay() call takes a display name for debugging.
    This change carries it through SurfaceFlinger and displays it in
    the "dumpsys SurfaceFlinger" output.
    
    Bug 7058158
    
    Change-Id: I79f3474a8656ff1beb7b478e0dbf2c5de666118a
    Forward compatibility patch.
    
    Change-Id: I8e8af0c6035aaac5e5097f1cfb198250475627ee
    Banish DisplayID from the SurfaceFlinger API.
    
    Use only display tokens in the API to refer to new displays.
    
    Don't require the caller to specify the display when creating
    a surface (since in general a surface could be shown on
    any display).
    
    This is intended to be a minimum change just to update the API.
    Note that SurfaceFlinger still uses DisplayID in a few places
    internally that might cause some features not to work properly
    when there are multiple displays (LayerScreenshot, for example).
    
    Change-Id: I3d91eec2da406eefd97bcd53655d403ad865a7e6
    make multi-display more real
    
    - displays are represented by a binder on the client side
    - c++ clients can now create and modify displays
    
    Change-Id: I203ea5b4beae0819d742ec5171c27568f4e8354b
    libgui includes refactoring
    
    Change-Id: I1d24ec17f5003ec2abab5f7472daaff4cc4cc2d3
    screen-off animation won't be handled by SF anymore
    
    Change-Id: Idc41386804ae7d7eb981c36e1bc55c270870c8d0
    get rid of the shared-memory control block
    
    Change-Id: If814060aca1d2ff2619d4adcd57296983d207f7f
    add a layerStack attribute to Layers.
    
    this attribute can be set through a regular transaction using
    SurfaceComposerClient (just like any other attribute, eg: position or size)
    
    Change-Id: I701a47c677ea6442ca713728a93335328cd2b172
    update SF binder protocol to support setting display attributes
    
    no change of functionality -- the old behavior is implemented
    on top of this new protocol.
    this new protocol will allow, eventually, to pass informations
    about displays and layer stacks.
    
    Change-Id: Ic6c2295e61ec8ecbc8ce01ab7664e35d928202fc
    Remove unused layer flags.
    
    Change-Id: Ia85365f18770a9a2c0a0e30ae56b6c2226d41be6
    Remove freeze(), unfreeze() and setFreezeTint().
    
    This is all dead code.
    
    Change-Id: I646673aac793a6ec45021c370a2450f0ea4fbcce
    First prototype atttempting to support an external display
    
    both API and implementation will change, this is just a prototype
    intended to show feasability.
    
    SurfaceFlinger is passed an ISurfaceTexture through a new
    callback, it is in turn used to create an EGLSurface which
    surfaceflinger will draw into in addition to the main screen.
    
    Change-Id: Id0bbb0b854bb7bae44d57246a90b65d4567f9a21
    surfaceflinger: replace early suspend with binder call from PowerManager
    
    SurfaceFlinger will no longer directly synchronize with early suspend.
    Instead, PowerManagerService will synchronize with SurfaceFlinger to
    ensure that a black frame has been drawn on the display, and then
    trigger all early suspend handlers.
    
    Change-Id: I07acdd628440d23fdb69db94319ec5d65d3f4919
    SurfaceFlinger: add a crop to the layer state
    
    This change adds a crop rectangle specified in window coordinates to the layer
    state.  The all window pixels outside this crop rectangle are treated as though
    they were fully transparent.  This change also adds the plumbing necessary for
    WindowManager to set that crop.
    
    Change-Id: I582bc445dc8c97d4c943d4db8d582a6ef5a66081
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    Fix build.
    
    Revert "Add support for sending VSYNC events to the framework"
    
    This reverts commit f3918c5bd4bc9f02f74da42995564150ca2dd382.
    
    Change-Id: I998e3e1aa3fa310829ae973b64fe11b01f6f468f
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: If4126023fc9c067e56087ec7d16a8fd542ce1794
    Add a LayerScreenshot
    
    A LayerScreenshot is a special type of layer that contains a screenshot of
    the screen acquired when its created. It works just like LayerDim.
    
    Make sure to call compositionComplete() after rendering into a FBO.
    
    Bug: 5446982, 5467587, 5466259
    Change-Id: I5d8a1b4c327f9973d950cd4f4c0bca7f62825cd4
    Revert "Add a LayerScreenshot"
    
    This reverts commit d6809f40cf61203573ec5dbc437f695cd132cc18.
    SurfaceFlinger: Remove display freezing code
    
    This change removes the dead code from SurfaceFlinger that resulted from
    disabling support for freezing the display.
    
    Change-Id: I4e5ff00c94b4c7a79af2f65c9850c135210068ed
    SurfaceFlinger: make sync transactions explicit
    
    This change enables a layer or orientation update transaction sent to
    SurfaceFlinger to explicitly request a synchronous transaction.
    
    Change-Id: I97cbba610c13679849f66114b216fa6dbf12f2a9
    Add a LayerScreenshot
    
    A LayerScreenshot is a special type of layer that contains a screenshot of
    the screen acquired when its created. It works just like LayerDim.
    
    Bug: 5446982
    Change-Id: I7814aff2380e7e146937f2b641907be2a30c76cc
    SurfaceFlinger: update orientation via transactions
    
    This change merges the ISurfaceComposer::setOrientation functionality
    into ISurfaceComposer::setTransactionState.  It enables the window
    manager to atomically update both the display orientation and the
    position and size of the windows in a single transaction with
    SurfaceFlinger.
    
    Bug: 5439574
    Change-Id: I18a8ccc564d7d760ef8afb2d015ccdb7a7963900
    Handle orientation changes more systematically.
    Bug: 4981385
    
    Simplify the orientation changing code path in the
    WindowManager.  Instead of the policy calling setRotation()
    when the sensor determined orientation changes, it calls
    updateRotation(), which figures everything out.  For the most
    part, the rotation actually passed to setRotation() was
    more or less ignored and just added confusion, particularly
    when handling deferred orientation changes.
    
    Ensure that 180 degree rotations are disallowed even when
    the application specifies SCREEN_ORIENTATION_SENSOR_*.
    These rotations are only enabled when docked upside-down for
    some reason or when the application specifies
    SCREEN_ORIENTATION_FULL_SENSOR.
    
    Ensure that special modes like HDMI connected, lid switch,
    dock and rotation lock all cause the sensor to be ignored
    even when the application asks for sensor-based orientation
    changes.  The sensor is not relevant in these modes because
    some external factor (or the user) is determining the
    preferred rotation.
    
    Currently, applications can still override the preferred
    rotation even when there are special modes in play that
    might say otherwise.  We could tweak this so that some
    special modes trump application choices completely
    (resulting in a letter-boxed application, perhaps).
    I tested this sort of tweak (not included in the patch)
    and it seems to work fine, including transitions between
    applications with varying orientation.
    
    Delete dead code related to animFlags.
    
    Handle pausing/resuming orientation changes more precisely.
    Ensure that a deferred orientation change is performed when
    a drag completes, even if endDragLw() is not called because the
    drag was aborted before the drop happened.  We pause
    the orientation change in register() and resume in unregister()
    because those methods appear to always be called as needed.
    
    Change-Id: If0a31de3d057251e581fdee64819f2b19e676e9a
    SurfaceTexture: fix queues-to-composer
    
    This change fixes the NATIVE_WINDOW_QUEUES_TO_WINDOW_COMPOSER query of
    Surface and SurfaceTextureClient.  Surface now uses the inherited
    SurfaceTextureClient implementation of this query.  SurfaceTextureClient
    now queries SurfaceFlinger to determine whether buffers that are queued
    to its ISurfaceTexture will be sent to SurfaceFlinger (as opposed to
    some other process).
    
    Change-Id: Iff187e72f30d454229f07f896b438198978270a8
    SurfaceTexture: fix queues-to-composer
    
    This change fixes the NATIVE_WINDOW_QUEUES_TO_WINDOW_COMPOSER query of
    Surface and SurfaceTextureClient.  Surface now uses the inherited
    SurfaceTextureClient implementation of this query.  SurfaceTextureClient
    now queries SurfaceFlinger to determine whether buffers that are queued
    to its ISurfaceTexture will be sent to SurfaceFlinger (as opposed to
    some other process).
    
    Change-Id: Iff187e72f30d454229f07f896b438198978270a8
    SF transactions are now O(1) wrt IPC instead of O(N).
    
    Change-Id: I57669852cbf6aabae244ea86940a08a5a27ffc43
    unify SurfaceTexture and Surface
    
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    Add SurfaceTexture logging
    fix onFrameAvailable
    ANativeWindow: add queues-to-window-composer check.
    
    This change adds a new 'method' to the ANativeWindow interface to check
    whether buffers queued to the window will be sent directly to the system
    window compositor.
    
    Change-Id: I4d4b199e328c110b68b250029aea650f03c8724d
    Bug: 3495535
    Protected surface API
    
    To be used by DRM framework, implemented by display HAL
    
    Change-Id: I054a07a94f4d5dbe792f3a597e2e49a100d90eb2
    Fix remote GraphicBuffer allocation in SurfaceFlinger.
    
    This change fixes a horrible hack that I did to allow application
    processes to create GraphicBuffer objects by making a binder call to
    SurfaceFlinger.  This change introduces a new binder interface
    specifically for doing this, and does it in such a way that
    SurfaceFlinger will maintain a reference to the buffers until the app is
    done with them.
    
    Change-Id: Icb240397c6c206d7f69124c1497a829f051cb49b
    Add the ISurfaceComposer::createGraphicBuffer IPC.
    
    This change adds a new binder method to the ISurfaceComposer interface.
    This IPC is intended to allow SurfaceFlinger clients to allocate gralloc
    buffers using SurfaceFlinger as a proxy to gralloc.
    
    Change-Id: Ide9fc283aec5da6268ba62cfed0c3319a50b640d
    [3258939] Need snapshot to limit which layers are included
    
    Change-Id: Id7351a0e3f53dde99b291cffba553d89fd4d7ca9
    remove support for PUSH_BUFFER surfaces and overlays
    
    the same functionality is now supported through
    the h/w composer HAL, and YUV support in the GPU.
    
    Change-Id: I8146605449954b8e8fd7f78810b7d873c2d8f5bf
    addresses parts of 3096779 and 3097475
    
    3097475: Animation setting should control the screen on animation
    3096779: CRT power-on animation can briefly show the top app instead of lockscreen
    
    There is now a parameter that controls wether the ON and/or OFF animation are
    performed. we also always clear the screen to black on power off, to make
    sure it won't briefly appear on power on.
    HOWEVER, 3096779 is not 100% fixed in the case where we're doing the animation
    because there is a race, where SF doesn't wait (b/c it doesn't know) for the
    framework to have redrawn the lockscreen.
    
    Change-Id: Ie0f02c9225fcdf24b1e8907e268eb7da2c5b0a03
    implement part of [3094280] New animation for screen on and screen off
    add support for screen on animation
    
    Change-Id: If50cf52ae04b95b42da7d74cf7fa96d5cb54d238
    turn off the electron beam
    
    Change-Id: I335fb6719f1d5a3f1c6f37a046fd1c2c4ed2bbc6
    Always create OpenGL accelerated windows in RGBA 8888.
    
    Bug #3081600
    
    The OpenGL renderer in libhwui uses a single EGL context per process and
    thus create it with an RGBA 8888 EGL configuration. To ensure that all
    windows are compatible with this configuration, this change modifies
    the window manager and SurfaceFlinger.
    
    The window manager now checks the window's flags and if the window is
    hardware accelerated, it forces the window's pixel format to be
    translucent when creating the surface. The window itself is still
    marked as opaque if we know that the window will be opaque on screen.
    This keeps existing optimizations in place.
    
    Similarly in SurfaceFlinger, a translucent Surface can now be created
    with the Surface.OPAQUE flag, indicating SurfaceFlinger that the surface
    does not require blending, despite its RGBA 8888 configuration.
    
    Change-Id: Ic747b6b12564ba064412d842117880fcc199eb7c
    refactored screenshot code
    
    the core screenshot function now can capture the screen at any lower resolution
    performing bilinear filtering.
    
    we also now have some client code to interface with the screenshot service.
    
    it's now possible to request a screenshot at a lower resolution.
    
    Change-Id: I33689bba98507ab928d0898b21596d0d2fe4b953
    refactored screenshot code
    
    the core screenshot function now can capture the screen at any lower resolution
    performing bilinear filtering.
    
    we also now have some client code to interface with the screenshot service.
    
    it's now possible to request a screenshot at a lower resolution.
    
    Change-Id: I5a3b0e431421800e3aad601d9af8f94adffbc71f
    add support for [1974164] Be able to take a screen shot on the device
    
    screenshots are taken using ISurfaceComposer::captureScreen() which returns
    the size of the screenshot and an IMemoryHeap containing the data.
    screenshots have limitations:
    - they will always fail if a secure window is up on screen
    - require GL_OES_framebuffer_object extension
    - in some situation, video planes won't been captured
    
    Change-Id: I741c68a2d2984fb139039301c3349e6780e2cd58
    split surface management from surface's buffers management
    
    Change-Id: If3c5655d1231f8f0c49ba68f972b1b20c93b3f87
    more clean-up in preparation of bigger changes
    
    the most important change here is the renaming of
    ISurfaceFlingerClient to ISurfaceComposerClient
    
    Change-Id: I94e18b0417f50e06f21377446639c61f65f959b3
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    Surface::GPU and Surface::HARDWARE are now deprecated; they will be set automatically if needed.
    
    this also ripples into the window manager API by making some constant there deprecated as well.
    get rid of references to MemoryDealer in SurfaceFlinger
    fix a bunch of problems with destroying surfaces.
    
    now, all destruction path, go through the purgatory which is emptied when ~ISurface is called, but we also make sure to remove the surface from the current list from there (in case a client forgot to request the destruction explicitely).
    move libbinder's header files under includes/binder
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    AI 143320: am: CL 143171 am: CL 142873 fix [1732012] Only show screen rotation animation when triggered by sensor
      Original author: mathias
      Merged from: //branches/cupcake/...
      Original author: android-build
      Merged from: //branches/donutburger/...
    
    Automated import of CL 143320
    AI 143171: am: CL 142873 fix [1732012] Only show screen rotation animation when triggered by sensor
      Original author: mathias
      Merged from: //branches/cupcake/...
    
    Automated import of CL 143171
    Automated import from //branches/cupcake/...@142873,142873
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    Binderize the consumer side of BufferQueue
    
    While currently untested, this should allow to move the
    BuffereQueue in the consumer process and have everything
    work as usual.
    
    Bug: 9265647
    
    Change-Id: I9ca8f099f7c65b9a27b7e7a3643b46d1b58eacfc
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    Pay attention to buffer timestamps
    
    When acquiring a buffer, SurfaceFlinger now computes the expected
    presentation time and passes it to the BufferQueue acquireBuffer()
    method.  If it's not yet time to display the buffer, acquireBuffer()
    returns PRESENT_LATER instead of a buffer.
    
    The current implementation of the expected-present-time computation
    uses approximations and guesswork.
    
    Bug 7900302
    
    Change-Id: If9345611c5983a11a811935aaf27d6388a5036f1
    BufferQueue: track buffer-queue by instance vs. by reference
    
    Instead of representing the buffer-queue as a vector of buffer
    indices, represent them as a vector of BufferItems (copies).
    This allows modifying the buffer slots independent of the queued
    buffers.
    
    As part of this change, BufferSlot properties that are only
    been relevant in the buffer-queue have been removed.
    
    Also, invalid scalingMode in queueBuffer now returns an error.
    
    ConsumerBase has also changed to allow reuse of the same
    buffer slots by different buffers.
    
    Change-Id: If2a698fa142b67c69ad41b8eaca6e127eb3ef75b
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Related-to-bug: 7093648
    clean-up/simplify all dump() APIs
    
    remove the scratch buffer parameter and use
    String8::appendFormat() instead.
    
    Change-Id: Ib96c91617c8e7292de87433d15cf6232b7d591b0
    libgui: fix an EGLImage leak
    
    This moves the call to ConsumerBase::abandon from the ConsumerBase dtor to
    ConsumerBase::onLastStrongRef.  The abandon call relies on virtual methods to
    perform the clean-up, so calling it from the ConsumerBase dtor after the
    derived classes dtors ran was skipping some of the clean-up.  The
    onLastStrongRef method should get called just before the most derived class's
    dtor gets called.
    
    Bug: 8349135
    Change-Id: I836946826927cc1ed69c049049f525f92b17a269
    Minor cleanups/fixes before virtual display refactoring
    
    None of these should change behavior, except for removing some
    incorrect log messages when using a virtual display.
    
    - HWComposer::getAndResetReleaseFenceFd() checks the HWC version, so
      no need to do that in the DisplayDevice::onSwapBuffersCompleted().
      However, it should check that mFramebufferSurface is not NULL like
      it is for virtual displays.
    - Comment that FramebufferSurface::dump() overrides the non-virtual
      ConsumerBase::dump(), and fix it so the right thing happens
      regardless of the static type of the pointer/reference the callee
      has. FramebufferSurface::dump() could be removed right now, but I'd
      need to bring it back in a later change.
    - Use the right enum for validating display type ids.
    - Don't try to send hotplug events for virtual displays.
    - Mark virtual displays as connected so HWComposer::prepare() doesn't
      think something is wrong when it gets a non-NULL layer list.
    - Remove unused FramebufferSurface methods.
    
    Bug: 8384764
    Change-Id: Id28a2f9be86b45f4bb7915fdf7752157035f4294
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    Change ConsumerBase's FrameAvailableListener to be a weak pointer
    
    This prevents strong reference cycles when the listener implementation also
    holds a strong pointer to the ConsumerBase
    
    Bug: 7425644
    Change-Id: I1514b13a32b18d421c902dddebec0765a989c55c
    Fix race condition in ConsumerBase::addReleaseFence()
    
    This needs the ConsumerBase mutex locked, but wasn't locking it. Two
    of the four places that called it already held the lock so were fine.
    Now addReleaseFence() takes the lock itself, and I added
    addReleaseFenceLocked() for the two already-locked callers, since in
    one of them dropping the lock would be inconvenient.
    
    Bug: 7289269
    Change-Id: I7a5628adb516f8eec782aa6c14128202f96d7b0a
    libgui: move fence handling into ConsumerBase
    
    This change moves some common fence handling code into the base class for
    BufferQueue consumer classes.  It also makes the ConsumerBase class initialize
    a buffer slot's fence with the acquire fence every time a buffer is acquired.
    
    Change-Id: I0bd88bc269e919653b659bfb3ebfb04dd61692a0
    SurfaceTexture: inherit from ConsumerBase (try 2)
    
    This change makes SurfaceTexture inherit from ConsumerBase.  It removes all of
    the functionality from SurfaceTexture that is now provided by the base class.
    This includes fixes for two bugs that were found after checking this change in
    the first time and then reverting it.
    
    Change-Id: Ie2d9f4f27cfef26fdac341de3152e842b01a58d2
    Revert "SurfaceTexture: inherit from ConsumerBase"
    
    This reverts commit ed059a8d754770c3cf28b78dba30f7a6ba475dbe
    
    Change-Id: I72542c2595771a40c2c88251e0d6eb54e305b99b
    Revert "SurfaceTexture: inherit from ConsumerBase"
    
    This reverts commit ed059a8d754770c3cf28b78dba30f7a6ba475dbe
    
    Change-Id: I72542c2595771a40c2c88251e0d6eb54e305b99b
    SurfaceTexture: inherit from ConsumerBase
    
    This change makes SurfaceTexture inherit from ConsumerBase.  It removes all of
    the functionality from SurfaceTexture that is now provided by the base class.
    
    Change-Id: I4a881df42810a14ee32d4ef7c8772a8f2510f4c7
    surfaceflinger: refactor FrambufferSurface
    
    This change refactors the FramebufferSurface class to inherit from the new
    ConsumerBase class.
    
    Bug: 6620200
    Change-Id: I46ec942ddb019658e3c5e79465548b171b2261f2
    Remove deprecated BufferQueue constructor
    
    Finally remove the BufferQueue constructor itself. From now on, all
    BufferQueues must be created through the createBufferQueue method.
    
    Bug: 13415624
    Change-Id: I192bf9430265bab761dcd59db1f02c9d0ac4feed
    BufferQueue: Increase max slots from 32 to 64
    
    Increases NUM_BUFFER_SLOTS from 32 to 64 and changes the mask
    returned by IGBC::getReleasedBuffers from 32 to 64 bits.
    
    Bug: 13174352
    Change-Id: Ie8ef0853916cfb91f83881c7241886bb1950f01a
    BufferQueueProducer: add detachNextBuffer
    
    Adds a new method, IGBP::detachNextBuffer, that effectively does
    dequeue + request + detach in a single call, but does not need to
    know anything about the dequeued buffer, and will not block on
    dequeue. This is mostly for the upcoming StreamSplitter to use in
    its onBufferReleased callback.
    
    Change-Id: Ie88a69de109003acebaa486a5b44c8a455726550
    BufferQueue: Remove Bn version of create*
    
    It turns out that there's no reason to have both I* and Bn* versions
    of the createBufferQueue method, so I removed the Bn* version.
    
    Change-Id: I66aeb09e10458ae540ddf1f38d2d0154ea8f315b
    BufferQueue: Add producer buffer-released callback
    
    Add a callback to the producer side, onBufferReleased, which will be
    called every time the consumer releases a buffer back to the
    BufferQueue. This will enable a buffer stream splitter to work
    autonomously without having to block on dequeueBuffer.
    
    The binder object used for the callback replaces the generic IBinder
    token that was passed into IGraphicBufferProducer::connect to detect
    the death of the producer. If a producer does not wish to listen for
    buffer release events, it can pass in an instance of the
    DummyProducerListener class defined in IProducerListener.h, if it even
    cares about death events (BufferQueue doesn't enforce the token being
    non-NULL, though perhaps we should).
    
    Change-Id: I23935760673524abeafea2b58dccc3583b368710
    BufferQueue: Allow returning interfaces as I*/Bn*
    
    This adds a second createBufferQueue method that returns
    sp<IGraphicBuffer*> interfaces instead of sp<BnGraphicBuffer*>, since
    most clients don't actually need the Binderized versions (but some
    might).
    
    Change-Id: Iaf4f719c96ddb6f704afc75cf52be22588173e32
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    BufferQueue: Allow detaching/reattaching buffers
    
    Adds detachBuffer and attachBuffer calls to both the producer and
    consumer sides of BufferQueue. Buffers may be detached while dequeued
    by the producer or acquired by the consumer, and when attached, enter
    the dequeued and acquired states, respectively.
    
    Bug: 13173343
    Change-Id: Ic152692b0a94d99e0135b9bfa62747dab2a54220
    Change BufferQueue into producer/consumer wrapper
    
    Now that BufferQueue has been split into core + producer + consumer,
    rewrite BufferQueue to be a thin layer over a producer and consumer
    interface. Eventually, this layer will be deprecated in favor of
    only using either the producer or consumer interface, as applicable.
    
    Change-Id: I340ae5f5b633b244fb594615ff52ba50b9e2f7e4
    gui: Add tests for IGraphicBufferProducer
    
    * Basic tests only. Needs more complicated queue/dequeue tests.
    * Also needs consumer-side tests to really be thorough.
    
    Change-Id: I1099dd56d65b6e9dfa15377726d6054ce657c0ca
    gui: Remove BufferQueue::MIN_UNDEQUEUED_BUFFERS
    
    Change-Id: I7c0cc36046dbbdb9c0e85acfe5027293d1131275
    gui: Update header docs for IGraphicBufferConsumer/Producer/BufferQueue
    
    Also fix compiler warnings for libgui
    
    Change-Id: I0ee38d9ad5eaa82d55bf812d291da8c433581cef
    Make sure do disconnect from a BQ when its client dies.
    
    Bug: 5679534
    
    Change-Id: If447e8673df83fe0b1d6210641e0a48522501a53
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    Binderize the consumer side of BufferQueue
    
    While currently untested, this should allow to move the
    BuffereQueue in the consumer process and have everything
    work as usual.
    
    Bug: 9265647
    
    Change-Id: I9ca8f099f7c65b9a27b7e7a3643b46d1b58eacfc
    single buffer mode for BufferQueue
    
    Bug: 9891035
    Change-Id: Id1ab5f911a6dc4c1d8235e65775b3d3635231ad4
    Make ANW.setSwapInterval(0) work again
    
    we can now queue/dequeue a buffer in asynchrnous mode by using the
    async parameter to these calls. async mode is only specified
    with those calls (it is not modal anymore).
    
    as a consequence it can only be specified when the buffer count
    is not overidden, as error is returned otherwise.
    
    Change-Id: Ic63f4f96f671cb9d65c4cecbcc192615e09a8b6b
    BuffferQueue disconnect is now always asynchrnous
    
    we tag queued buffers with the "bufferqueue cannot block" flag
    and use that bit to discard a buffer in the queue by new ones
    comming in. this allows us to remove the buffer queue drain in
    disconnect while maintaining the right behaviour if it gets
    connected again (since each buffer remembers how it was enqueued).
    
    Change-Id: I1e703d363a687b70b19ba49cef32213116e8bd3f
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    Pay attention to buffer timestamps
    
    When acquiring a buffer, SurfaceFlinger now computes the expected
    presentation time and passes it to the BufferQueue acquireBuffer()
    method.  If it's not yet time to display the buffer, acquireBuffer()
    returns PRESENT_LATER instead of a buffer.
    
    The current implementation of the expected-present-time computation
    uses approximations and guesswork.
    
    Bug 7900302
    
    Change-Id: If9345611c5983a11a811935aaf27d6388a5036f1
    BufferQueue: remove freeAllBuffersExceptHeadLocked()
    
    Now that we are having separate buffer-instances for the buffer-
    queue, we can free all buffers; we don't have to keep the head
    alive.
    
    Change-Id: I023e9161a2501d99333f8868ce438afa914ec50f
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Related-to-bug: 7093648
    BufferQueue: track buffer-queue by instance vs. by reference
    
    Instead of representing the buffer-queue as a vector of buffer
    indices, represent them as a vector of BufferItems (copies).
    This allows modifying the buffer slots independent of the queued
    buffers.
    
    As part of this change, BufferSlot properties that are only
    been relevant in the buffer-queue have been removed.
    
    Also, invalid scalingMode in queueBuffer now returns an error.
    
    ConsumerBase has also changed to allow reuse of the same
    buffer slots by different buffers.
    
    Change-Id: If2a698fa142b67c69ad41b8eaca6e127eb3ef75b
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Related-to-bug: 7093648
    clean-up/simplify all dump() APIs
    
    remove the scratch buffer parameter and use
    String8::appendFormat() instead.
    
    Change-Id: Ib96c91617c8e7292de87433d15cf6232b7d591b0
    Updated comments
    
    Updated many comments.  Added one minor error check.
    
    Change-Id: Ib935dd99d417bada91d2e198008a50dd94269316
    Fix argument types in IGraphicBufferProducer methods
    
    Bug: 8384764
    Change-Id: I7a3f1e1a0584a70af04f9eafef900505389d2202
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    Refactor SurfaceTexture a bit.
    
    Rearranges updateTexImage() so that the SurfaceFlinger-specific
    behavior is in a new SurfaceFlingerConsumer subclass.
    
    SurfaceTexture behavior should not be altered.  Instead of
    acquire-bind-release we now do acquire-release-bind, but since
    it's all done with the lock held there shouldn't be any
    externally-visible change.
    
    Change-Id: Ia566e4727945e2cfb9359fc6d2a8f8af64d7b7b7
    Fix transform hints
    
    The hints were being set a little too late, so the pre-rotation stuff
    wasn't quite working.
    
    Bug 7054997
    
    Change-Id: Id8d5c626db7a76f768ba762a145b315878ee08e6
    BufferQueue: add a setMaxAcquiredBufferCount check
    
    This change adds a check to verify the validity of the value passed to
    setMaxAcquiredBufferCount.
    
    Change-Id: I39730557aa58261e678bd6e4fce11bab78e98362
    BufferQueue: use max acquired buffer count
    
    This change makes BufferQueue derive the min undequeued buffer count from a max
    acquired buffer count that is set by the consumer.  This value may be set at
    any time that a producer is not connected to the BufferQueue rather than at
    BufferQueue construction time.
    
    Change-Id: Icf9f1d91ec612a079968ba0a4621deffe48f4e22
    BufferQueue: simplify max buffer count handling
    
    This change reworks how the maximum buffer count is computed.
    
    Change-Id: I7d3745814b9bd6f6f447f86bfea8eb7729914ebf
    BufferQueue: clean up buffer counting
    
    This change is a clean up of some of the handling of the maximum number of
    buffers that are allowed at once.  It mostly renames a few member variables and
    methods, but it includes a couple small refactorings.
    
    Change-Id: I9959310f563d09583548d4291e1050a7bbc7d87d
    surfaceflinger: refactor FrambufferSurface
    
    This change refactors the FramebufferSurface class to inherit from the new
    ConsumerBase class.
    
    Bug: 6620200
    Change-Id: I46ec942ddb019658e3c5e79465548b171b2261f2
    Return fence from acquireBuffer
    
    Change-Id: Iab22054c1dc4fd84affab3cc5bbdcd5a1e689666
    Pass fences with buffers from SurfaceTextureClient
    
    Change-Id: I09b49433788d01e8b2b3684bb4d0112be29538d3
    Pass fences from BufferQueue to SurfaceTextureClient
    
    ISurfaceTexture::dequeueBuffer now returns the buffer's fence for the
    client to wait on. For BufferQueue, this means passing it through
    Binder so it can be returned to the SurfaceTextureClient. Now
    SurfaceTextureClient is responsible for waiting on the fence in
    dequeueBuffer instead of BufferQueue: one step closer to the goal.
    
    Change-Id: I677ae758bcd23acee2d784b8cec11b32cccc196d
    Transfer HWC release fences to BufferQueue
    
    After a HWC set, each SurfaceFlinger Layer retrieves the release fence
    HWC returned and gives it to the layer's SurfaceTexture. The
    SurfaceTexture accumulates the fences into a merged fence until the
    next updateTexImage, then passes the merged fence to the BufferQueue
    in releaseBuffer.
    
    In a follow-on change, BufferQueue will return the fence along with
    the buffer slot in dequeueBuffer. For now, dequeueBuffer waits for the
    fence to signal before returning.
    
    The releaseFence default value for BufferQueue::releaseBuffer() is
    temporary to avoid transient build breaks with a multi-project
    checkin. It'll disappear in the next change.
    
    Change-Id: Iaa9a0d5775235585d9cbf453d3a64623d08013d9
    Implement SurfaceFlinger's ANW on top of BufferQueue
    
    SF now has its own implementation of ANW for the
    framebuffer and it uses BufferQueue. FramebufferNativeWindow
    is now only used by stand-alone apps.
    
    Change-Id: Iddeb24087df62bd92b0f78e391dda9b97ddc859c
    Add a BufferQueue CPU consumer.
    
    Aimed for use cases where gralloc buffers need to be consumed by CPU
    users, such as camera image data streams.
    
    The CpuConsumer is a synchronous queue, which exposes raw pointers to
    the underlying graphics buffers to applications. Multiple buffers may
    be acquired at once, up to the limit set at time of construction.
    
    Change-Id: If1d99f12471438e95a69696e40685948778055fd
    libgui: Add support for post-xform crops.
    
    This change adds support for specifying a crop rectangle to a
    SurfaceTextureClient that is in post-transformed coordinate space.
    
    Change-Id: I247901de343e71b32850f7ae3bac62dfa612ad3d
    Bug: 6299171
    libgui: Add plumbing for active rectangle
    
    This change adds the plumbing to SurfaceTextureClient, BufferQueue, and
    SurfaceTexture to get the active rectangle passed to the ANativeWindow to
    the buffer consumer.
    
    Change-Id: I35da0889b266327ebb079b6a7136fa3e2e8b00e6
    update the binder protocol for connect to match that of queueBuffer
    
    indeed, connect and queueBuffer return the same data, so it's
    easier to have them use the same protocol.
    
    Change-Id: I4f9fa3be0a80c9ab0a7a4039b282ae843aab02e1
    use in/out structures for queueBuffer() IPC
    
    Change-Id: Ie125df2444b62a9a2200586a717dca268852afc9
    BufferQueue returns proper code on acquire
    
    Also removed unnecessary debug messages from
    SurfaceTextureClient.
    
    Change-Id: I291897a44170142f9d42a007b008823fad4683e0
    BufferQueue no longer hardcodes buffer counts
    
    BufferQueue is now more flexible as it can be used
    by SurfaceMediaSource in addition to SurfaceTexture.
    
    Change-Id: I4222be8918d63372c44fcd412d9ad241c6a3eeb9
    Fixed disconnect bug in SurfaceTexture
    
    BufferQueue's disconnect could race with updateTexImage
    where invalid buffers could be released.  Additionally
    fixed similar bug with setBufferCount.  Tests were added
    to stress the disconnect mechanism.
    
    Change-Id: I9afa4c64f3e025984e8a9e8d924852a71d044716
    reduce IPC with BufferQueue
    
    collapse setCrop, setTransform and setScalingMode to queueBuffer()
    this ends up simplifying things quite a bit and reducing the numnber
    of IPC needed per frame.
    
    Change-Id: I3a13c07603abe4e76b8251e6380b107fde22e6d9
    Added a DummyConsumer for use with BufferQueue.
    
    The DummyConsumer is a consumer that can connect to BufferQueue
    that does nothing.  It is required as BufferQueue checks
    if a consumer is connected.  Also fixes a bug where SurfaceTexture
    was reusing old texture slots.
    
    Bug: 6172739
    Change-Id: I5e7a118dd4d07807ba4c763200242b5ee7d3412b
    libgui: add BQ consumer buffer free notifications
    
    This change adds a new callback for BufferQueue consumers to be notified
    when the BufferQueue frees some or all of its buffers.  This is needed
    to retain SurfaceTexture behavior where all buffers would be freed when
    the producer disconnects.  This change also modifies the
    SurfaceTextureGLToGLTest.EglDestroySurfaceUnrefsBuffers test to catch
    when the buffers are not freed.
    
    The implementation is a little complicated because it needs to avoid
    circular sp<> references across what will be a binder interface (so wp<>
    can't be used directly).  It also needs to avoid the possibility of
    locking the BufferQueue and consumer (e.g. SurfaceTexture) mutexes in
    the wrong order.
    
    This change also includes a few additional fixes and test cleanups.
    
    Change-Id: I27b77d0af15cb4b135f4b63573f634f5f0da2182
    SurfaceTexture: Fully refactored from BufferQueue
    
    SurfaceTexture and BufferQueue are separate objects.
    
    Change-Id: I230bc0ae6f78d0f9b2b5df902f40ab443ed5a055
    Removed dependecies between BufferQueue and SurfaceTexture
    
    Refactored SurfaceTexture and BufferQueue such that share
    no protected members.  Created an consumer facing interface
    for BufferQueue in preparation of connecting SurfaceTexture
    and BufferQueue through a binder.
    
    Change-Id: I938e63e085128148c58d0e26c7213b30145c109f
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    Revert "Removed dependecies between BufferQueue and SurfaceTexture"
    
    This reverts commit a631399f71dbc7659d2f241968f85d337726ae61
    Removed dependecies between BufferQueue and SurfaceTexture
    
    Refactored SurfaceTexture and BufferQueue such that share
    no protected members.  Created an consumer facing interface
    for BufferQueue in preparation of connecting SurfaceTexture
    and BufferQueue through a binder.
    
    Change-Id: Iff55e740e36a7f70c9f7a17ee7a5af38e3d21f0f
    Refactored query function from SurfaceTexture into BufferQueue
    
    Change-Id: Id1cb6cc38d01edb4fcfcad867c5a7693bdcc3ab1
    Refactored ISurfaceTexture calls from SurfaceTexture into BufferQueue.
    
    Change-Id: I514f6b802f6b49c9ae27bed37bf0b9d23da03c9a
    SurfaceTexture: add EGL_KHR_fence_sync option
    
    This change adds a compile-time option for SurfaceTexture to use the
    EGL_KHR_fence_sync extension to synchronize access to Gralloc buffers.
    
    Bug: 5122031
    Change-Id: I7e973a358631fff5308acf377581b811911fe790
    EGL: default to swap interval 1
    
    This change explicitly sets swap interval 1 on the window when an
    EGLSurface is created to render to it.
    
    Change-Id: I91eb29dbee3ae4a55076b921f084d503fbe94e03
    SurfaceTexture: Fix to return the oldest of free buffers to Client on Dequeue call
    
    Surface Texture dequeue logic is modified to return the oldest of the
    free buffers to Client on dequeue call.
    
    Currently dequeue method is returning the first buffer index which is free.
    The parsing is done in ascending order of the buffer slot indices.
    This leads to returning the buffer which has been just queued to composer,
    and hence display, and this defeats the purpose of having minimum dequeue count
    as 2 in asynchrnouse mode.
    
    This is fixed by checking all the free slots and returning the oldest buffer.
    
    Change-Id: Ibbac10593c3994c278c601af0480b171635ecdd4
    Signed-off-by: Sunita Nadampalli <sunitan@ti.com>
    Define, document, and test the behavior of very large SurfaceTextures
    
    updateTexImage() now throws a runtime exception when its native
    counterpart fails
    
    Bug: 5506633
    
    Change-Id: I151a6f685d465966e7df4df624412ab2da62e95f
    Compiling issue fix since SurfTex header changed.
    
    Change-Id: I7790626d287d4b44cd9d9fc9f902237b6d059678
    SurfaceTexture: parameterize the texture target
    
    This change adds a hack to allow Android Browser to use a SurfaceTexture
    to stream RGBA images to a GL_TEXTURE_2D texture object.
    
    Change-Id: Idb90064d5d4b920959ef3be7451362ac5012460e
    SurfaceTexture: add name support
    
    This change adds support for setting a string that can be used to
    identify a SurfaceTexture object in log messages.
    
    Change-Id: Ib4ee085f36c8830dc964c05ef1654f5a55dfcd60
    Added interface to SurfaceTexture needed by WebKit.
    
    bug: 5239378
    Change-Id: I2d84c95c481515621d2b24a36bc213f4ea5d721a
    don't return the current buffer from dequeueBuffer
    
    we were not reseting mCurrentTexture in some situations
    which in turn caused dequeueBuffers() return a
    "FREE" buffer that was also current.
    Very often it was harmless, but it created a race with
    updateTexImage() which could cause the following
    queueBuffers() to fail.
    
    Bug: 5156325
    Change-Id: If15a31dc869117543d220d6e5562c57116cbabdb
    Add missing include
    
    Change-Id: I00181029e80a2ba75320550c14e950fadbab8a64
    added stub for getting buffer from surface texture
    
    Change-Id: If61153cacdd8027848f40f8d9035f7c4aead0a98
    fix a crasher in SurfaceTexture::updateTexImage()
    
    we now make sure to drain the buffer queue on disconnect.
    this happens only when in synchrnous mode. in async mode
    we clear all buffers except the head of the queue.
    
    for extra safety we also catch the null pointer
    in updateTexImage (which should  never happen) and return
    an error.
    
    Bug: 5111008
    
    Change-Id: I5174a6ecbb0de641c6510ef56a611cbb4e9e1f59
    rework dequeueBuffer()'s main loop.
    
    this simplifies the code a bit and also makes sure
    we reevaluate mAbandoned and mConnectedApi each time
    we come back from waiting on mDequeueCondition
    
    Change-Id: I1f8538b62ad321b51ed79d953b700036daba796d
    error out when SurfaceTexture APIs are called while not connected
    
    - also log a warning when freeAllBuffers is called with a non empty buffer queue
    - rename freeAllBuffers to freeAllBuffersLocked
    
    Change-Id: Idb71fdcf233b9ccae62d5a2a7c3c4bad2501d877
    return correct value from query after connecting a surface
    
    the first time a surface was connected, the values returned
    by query NATIVE_WINDOW_DEFAULT_{WIDTH|HEIGHT} and
    NATIVE_WINDOW_TRANSFORM_HINT were wrong until a call
    to queueBuffer was performed.
    
    Bug: 5137366, 5121607
    Change-Id: I7ac6b5b0daa876638f6bed7c20f286a6e6d984f6
    Fix a compiling error when trying to use setBufferCount
    
    Change-Id: I1aefaf7ec111340a584e0beeeea60b845e16bb1f
    Adding an optional param to the SurfaceTexture constructor.
    
    Change-Id: I0fdbccf483a16af8039b85c0562f19a34ebce536
    SurfaceTexture: enable RGB external textures
    
    This change removes support for conditionally using the GL_TEXTURE_2D
    target for SurfaceTexture textures with RGB buffers.  It also enables
    and fixes the RGB-based SurfaceTexture tests.
    
    Change-Id: I9a251a981cf66af6b048b2e4c3fe7231e4774f4d
    SurfaceTexture: add the abandon method.
    
    This change adds the 'abandon' method to the SurfaceTexture C++ class.
    This method may be used to put the SurfaceTexture in an abandoned state,
    causing all ISurfaceTexture methods to fail.
    
    Change-Id: Ibd261f7b73f44e2bec36a8508bf92113cfb7cf95
    SurfaceTexture: fix a comment
    
    Change-Id: I799532f77f8fbb6b8ee6888fdd8852b6f28e8c33
    implement: "Add an ANativeWindow API for SurfaceFlinger to suggest an optimal buffer orientation"
    
    Bug: 4487161
    Change-Id: I883f34efe542c2a566d04966f873374f40c50092
    Add set_scaling_mode() to ANativeWindow.
    
    This allows to specify the scaling mode independently from
    the buffer size.
    
    Change-Id: Iaa2baa660445531a97d3fac192e580f4929c5d3b
    SurfaceTexture: make (dis)connect into an IPC
    
    This change makes the ANativeWindow connect and disconnect calls result
    in an IPC to the SurfaceTexture object.  This will allow us to prevent
    multiple simultaneous connections from different processes.
    
    Change-Id: Id9aa1003b1335b96ca6bd4a1f5a67aa433d42efb
    Minor fix in SurfaceTexture
    
    Change-Id: Ic859715becf3e6d5107bd8beb8c577034d00ec52
    SurfaceTexture: change onFrameAvailable behavior
    
    This change alters the conditions under which the onFrameAvailable
    callback gets called by the C++ SurfaceTexture class.  The new behavior
    is to call the callback whenever a frame gets queued that will be
    visible to the buffer consumer.  This means that buffers queued in
    synchronous mode always trigger the callback, as those buffers will
    remain pending until they are consumed.  Buffers queued in asynchronous
    mode will only trigger the callback if there was not previously an
    unconsumed buffer pending.
    
    The new behavior means that a consumer should perform a draw operation
    exactly once for every onFrameAvailable call that it recieves.  This
    change also modifies SurfaceFlinger and the SurfaceTexture JNI to
    support of the new behavior.
    
    Change-Id: I8b2c6e00961d3d58b11c6af50b555b6e4c5f5b40
    Tweak for forward-compatibility
    
    Change-Id: Ic5e4d949c1c80a2ebdc2ec802c35b5d3d7f9661d
    Add allowSynchronousMode to SurfaceTexture constructor.
    
    Change-Id: I54f30a3c16bbe6b813f3bcd1d389da5627531304
    Tweaks for forward-compatibility
    
    Change-Id: Iec525edc186e78d5d865f82dd5b1f56263c22e86
    SurfaceTexture: fix up a comment.
    
    Change-Id: I044e44e17319e08af657a7ec9fa39100876fe862
    SurfaceTexture: fix a getTransformMatrix crash.
    
    This change moves the computation of the transform matrix out of
    getTransformMatrix and instead performs the computation when
    updateTexImage gets called.  This is needed in order for
    getTransformMatrix to succeed even if the buffers have been freed (e.g.
    by changing the buffer count) because the computation depends upon the
    properties of the current GraphicBuffer.
    
    Change-Id: Ied541ab8747b7ad604f862717135f9a16a816be9
    Bug: 4490420
    SurfaceTexture: clean up some comments, tests, etc.
    
    This change fixes up some stale comments, member variable names, log
    messages and disables a failing test.
    
    Change-Id: Ic1d3344b18066cf710e4a42838b2417c6b1f2f6c
    fix onFrameAvailable
    
    Change-Id: I391fe9f6684ac9fd4f91416ce18b583f7087d966
    Add SurfaceTexture logging
    
    Change-Id: If1b74be5230813fb76429935d88b9d4a7c41700c
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    
    Change-Id: I8382e346ddaa2c4c8ff56ac3ffd7f0109572f188
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    
    Change-Id: Ic94cbab092953243a0746e04bbe1b2eb0cc930ef
    unify SurfaceTexture and Surface
    
    Change-Id: I49da2f5d8408e4cd7e148cfb777bb4ff68cd8f37
    Fix a bug where setgeometry couldn't be undone
    
    This change the binder protocol between SurfaceTextureClient
    and SurfaceTexture. dequeueBuffer() now takes the requested
    parameters for the buffer. SurfaceTexture decides if the
    buffer needs to be reallocated and does the allocation
    if needed. In that case it returns BUFFER_NEEDS_REALLOCATION
    to tell SurfaceTextureClient that it needs to call
    requestBuffer (which all parameters have been removed) to
    acquire a pointer to the buffer.
    
    dequeueBuffer and requestBuffer could be folded into a single
    IPC call, but we chose to optimize the case where buffers are
    not created and avoid some complexity in the marshalling code.
    
    Change-Id: I097a7f6f40a3491e10f3f3742eab33999286c304
    changes to SurfaceTexture needed for unification with SF
    
    - implement connect/disconnect
    - implement missing query
    - handle texture_2d in addition to texture_external_oes
    
    Change-Id: I971a70821f00f22b01f5337de4a7d451177fec4d
    Fix a GraphicBuffer leak in SurfaceTexture
    
    This leak was intentional, it was there to deal with the fact that
    some gralloc implementations don't track buffer handles with
    file-descriptors so buffers needed to stay alive until there were
    registered, which is not guaranteed by binder transactions.
    
    In this new implementation, we use a small BBinder holding a
    reference to the buffer, which with tuck into the parcel. This forces
    the reference to stay alive until the parcel is destroyed, which
    is guaranteed (by construction) to happen after the buffer is
    registered.
    
    this allows the public facing API to not expose the previous hack.
    
    Change-Id: I1dd6cd83679a2b7457ad628169e2851acc027143
    SurfaceTexture can now force the client to request a buffer
    
    SurfaceTexture now has the concept of default size a new method,
    setDefaultBufferSize() to set it. When the default size is
    changed, dequeueBuffer() will return a value telling the
    client that it must ask for a new buffer.
    
    The above only applies if the client has not
    overriden the buffer size with setGeometry.
    
    Change-Id: I520dc40363054b7e37fdb67d6a2e7bce70326e81
    Updated JBQ's original SurfaceTexture stubs to make webkit MR1 buildable
    
    Change-Id: If1c1610efcc0e0bc6de88c75712baed91624b1a7
    Add support for timestamps into SurfaceTexture.
    
    API addition: The timestamps are represented as nanoseconds from some
    arbitrary time point. Like the SurfaceTexture transform matrix, the
    timestamp retrieved by getTimestamp is for the last frame sent to the
    GL texture using updateTexImage().
    
    Camera HAL change: Expect vendors to set these timestamps using
    native_window_set_buffers_timestamp().  For now, they are
    autogenerated by SurfaceTextureClient if set_buffers_timestamp() is
    never called, but such timing is likely not accurate enough to pass a
    CTS test.
    
    bug:3300707
    
    Change-Id: Ife131a0c2a826ac27342e11b8a6c42ff49e1bea7
    Add the MIN_UNDEQUEUED_BUFFERS query to ANW.
    
    This change adds a new query to ANativeWindow for getting the minimum
    number of buffers that must be left un-dequeued during the steady-state
    operation of the ANativeWindow.
    
    Change-Id: Ie8c461fc26b02ecde02ddb4f95bf763662cf1551
    Related-Bug: 3356050
    stubs
    
    Change-Id: I6bc0b8e9d4412a0b60c6226fbd2b7a6d15aceb22
    Pass the IGraphicBufferAlloc to SurfaceTextureClient.
    
    This change passes a reference to the IGraphicBufferAlloc binder object
    to SurfaceTextureClient objects.  When STC objects are created they
    query their associated ISurfaceTexture object for the
    IGraphicBufferAlloc that the SurfaceTexture uses to allocate buffers.
    Having the SurfaceTextureClient hold this reference prevents the
    GraphicBufferAlloc in SurfaceFlinger from freeing the allocated buffers
    before the SurfaceTextureClient is done with them.
    
    Change-Id: Ib8e30e8b37fdd60438cbb4cb7e9174d0ba6d661c
    related-bug: 3362519
    stubs
    
    Change-Id: I829039f3817a172e66eeb9df397e896a488a259d
    added BinderService<> template to help creating native binder services
    
    Change-Id: Id980899d2647b56479f8a27c89eaa949f9209dfe
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    SensorService performance improvements.
    
      i) Send ack for wake_up sensors on the socket connection instead of using Binder RPC.
      ii) Cache events per connection in case there are write failures. Compute cache size
          from FIFO counts of sensors.
     iii) Send FlushCompleteEvent only for apps that explicitly called flush().
    
    Change-Id: I018969736b7794b1b930529586f2294a03ee8667
    Enable wakeup sensors.
    
    SensorService should hold a wakelock till the app reads events from a wakeup sensor. Currently drivers hold a wakelock with a
    timeout while delivering events from a wake up sensor like Significant Motion. This hack can be removed now.
    
    Bug: 9774884
    Change-Id: If3b5acb99c9cf0cd29012fcfa9d6b04c74133d01
    Change API from flush(handle) to flush(). Call flush on all active sensors in the given SensorEventConnection.
    
    Change-Id: I4ef2bec80406c517903ab9782dc9eaf3fa8b7f36
    Change API from flush(handle) to flush(). Call flush on all active sensors in the given SensorEventConnection.
    
    Change-Id: I4ef2bec80406c517903ab9782dc9eaf3fa8b7f36
    Sensor batching. Changes to the native code.
    
    Bug: 10109508
    Change-Id: I7333f3aac76125a8226a4c99c901fb904588df04
    Rename SensorChannel to BitTube
    first step at implementing the native sensor support
    
    in this commit:
    - implemented the C stub
    - implemented the binder interfaces involved
    - implemented most of the C++ client side
    
    missing:
    - SensorManager cannot connect to the SensorServer yet
    (because there is no SensorServer yet)
    
    Change-Id: I75010cbeef31c98d6fa62fd5d388dcef87c2636b
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    BufferQueue: Add producer buffer-released callback
    
    Add a callback to the producer side, onBufferReleased, which will be
    called every time the consumer releases a buffer back to the
    BufferQueue. This will enable a buffer stream splitter to work
    autonomously without having to block on dequeueBuffer.
    
    The binder object used for the callback replaces the generic IBinder
    token that was passed into IGraphicBufferProducer::connect to detect
    the death of the producer. If a producer does not wish to listen for
    buffer release events, it can pass in an instance of the
    DummyProducerListener class defined in IProducerListener.h, if it even
    cares about death events (BufferQueue doesn't enforce the token being
    non-NULL, though perhaps we should).
    
    Change-Id: I23935760673524abeafea2b58dccc3583b368710
    Tunneled Video Playback support
    
     Added native_window_set_sideband_stream() method to Surface.[h|cpp]
     Added ConfigureVideoTunnelModeParams OMX configuration structure to
     HardwareAPI.h
    
    Bug: 16132368
    Change-Id: I28fa1b9dbe858d93e353e0991098cad45c626bd9
    Add sticky transform to surfaceflinger.
    
    Bug: 15116722
    
    - Adds a sticky transform field that can be set from a
      SurfaceFlinger client Surface.  This transform is
      added to any transform applied to the Surface.
    
    Change-Id: Idaa4311dfd027b2d2b8ea5e2c6cba2da5779d753
    BufferQueue: Add allocateBuffers method
    
    This adds an allocateBuffers method to BufferQueue, which instructs
    it to allocate up to the maximum number of buffers allowed by the
    current configuration. The goal is that this method can be called
    ahead of render time, which will prevent dequeueBuffers from blocking
    in allocation and inducing jank.
    
    This interface is also plumbed up to the native Surface (and, in
    another change, up to the Java Surface and ThreadedRenderer).
    
    Bug: 11792166
    Change-Id: I4aa96b4351ea1c95ed5db228ca3ef98303229c74
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    Make ANW.setSwapInterval(0) work again
    
    we can now queue/dequeue a buffer in asynchrnous mode by using the
    async parameter to these calls. async mode is only specified
    with those calls (it is not modal anymore).
    
    as a consequence it can only be specified when the buffer count
    is not overidden, as error is returned otherwise.
    
    Change-Id: Ic63f4f96f671cb9d65c4cecbcc192615e09a8b6b
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    Surface can now be created only from an IGraphicBufferProducer
    
    it can't write itself to a parcel, nor can it be created from a
    parcel.
    
    Change-Id: I69165d5c54d6024b3e546e80d8b57e3dedda7893
    Tweaks for forward compatibility
    
    Change-Id: I136fcbbc14072ee5f5281d09445f28d083ed3ce1
    get rid of Surface::getISurfaceTexture()
    
    this was there just for legacy reasons.
    
    Change-Id: I0a48d6e04d7efa65033f9f10c91bba557f16ae8b
    fix build: SurfaceTextureClient to Surface rename
    
    Change-Id: I0041e6f49bc637bc52161c83f0bd44101246f480
    fix build: SurfaceTextureClient to Surface rename
    
    Change-Id: I54d68241f1080eef640aefe71f33912ad79345ef
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: Ibed34175ae273608393aaa5f0a7df207dc40d709
    remove access ANDROID_VIEW_SURFACE_JNI_ID
    
    Change-Id: I0ef474ed9be2cd26fa520ef871ffcf21a25e4994
    get rid of Surface identity and token
    
    we use the IBinder instead.
    
    Change-Id: I4aa0b58869ba43f19980013620051e5a261b062d
    Add some comments.
    
    Also, minor tweak to SurfaceTextureLayer.
    
    Change-Id: If616d5ee4e8226dd0e16c5dbb0e0f80db553110e
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    Added some comments
    
    Added a quick intro section at the top of the class.  Also noted
    the proposed new name for the class.
    
    Change-Id: I3f79663527544aa4e910db0e5a1374b54d16ba2f
    Remove unused "layer" argument from show().
    
    Change-Id: I8944a9f4a27c330b11e5e837c69b88c8f84145ba
    Banish DisplayID from the SurfaceFlinger API.
    
    Use only display tokens in the API to refer to new displays.
    
    Don't require the caller to specify the display when creating
    a surface (since in general a surface could be shown on
    any display).
    
    This is intended to be a minimum change just to update the API.
    Note that SurfaceFlinger still uses DisplayID in a few places
    internally that might cause some features not to work properly
    when there are multiple displays (LayerScreenshot, for example).
    
    Change-Id: I3d91eec2da406eefd97bcd53655d403ad865a7e6
    Remove freeze(), unfreeze() and setFreezeTint().
    
    This is all dead code.
    
    Change-Id: I646673aac793a6ec45021c370a2450f0ea4fbcce
    SurfaceFlinger: add a crop to the layer state
    
    This change adds a crop rectangle specified in window coordinates to the layer
    state.  The all window pixels outside this crop rectangle are treated as though
    they were fully transparent.  This change also adds the plumbing necessary for
    WindowManager to set that crop.
    
    Change-Id: I582bc445dc8c97d4c943d4db8d582a6ef5a66081
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    remove dependency on android_native{s_priv|buffer}.h
    
    Change-Id: Ie4b95f7061c240f37c504414259f92d72c4ffc89
    Add support for creating a Surface from a a SurfaceTexture.
    
    The Surface is already using SurfaceTexture internally and it is parcelable. This
    is intended to replace and phase out ParcelSurfaceTexture in favor of creating a
    new Surface.java object from an existing SurfaceTexture.
    
    Change-Id: I8e2dd86614523da6abed6403e1d705a68fa19fdf
    clean-up. get rid ofunused code and members in Surface[Control].cpp
    
    Change-Id: Ia7790ae28af2c2ac99eae01c2c5044ace4a490a4
    move lock/unlock implementaion outside of Surface into SurfaceTextureClient
    
    This makes ANativeWindow_lock/ANativeWindow_unlockAndPost work
    with ANativeWindows implemented by Surface and SurfaceTextureClient.
    
    Also, Surface now inherits directly from SurfaceTextureClient.
    
    Bug: 5003724
    Change-Id: I9f285877c7bae9a262e9a7af91c2bae78804b2ef
    Add method to create a ParcelSurfaceTexture from android.view.Surface.
    
    Change-Id: I05e343ab7e327478f60322af9373574b70c148f5
    unify SurfaceTexture and Surface
    
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    Add SurfaceTexture logging
    fix onFrameAvailable
    frameworks/base: android_native_buffer_t -> ANativeWindowBuffer
    
    Change-Id: Idc2eabaa805bb6d308ebb315872623f28d428417
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    frameworks/base: make the ANativeWindow query() method const
    
    query() does not modify the object's data, so it needs to be a const method
    
    Change-Id: I67c40a3c865461e6f1cc2193fd2d74286ff6ac8f
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    remove more unused references to ISurface
    
    Change-Id: I2201f1ca2bb8f203a081d94a0134f798778dfbef
    Add support for timestamps into SurfaceTexture.
    
    API addition: The timestamps are represented as nanoseconds from some
    arbitrary time point. Like the SurfaceTexture transform matrix, the
    timestamp retrieved by getTimestamp is for the last frame sent to the
    GL texture using updateTexImage().
    
    Camera HAL change: Expect vendors to set these timestamps using
    native_window_set_buffers_timestamp().  For now, they are
    autogenerated by SurfaceTextureClient if set_buffers_timestamp() is
    never called, but such timing is likely not accurate enough to pass a
    CTS test.
    
    bug:3300707
    
    Change-Id: Ife131a0c2a826ac27342e11b8a6c42ff49e1bea7
    Add the MIN_UNDEQUEUED_BUFFERS query to ANW.
    
    This change adds a new query to ANativeWindow for getting the minimum
    number of buffers that must be left un-dequeued during the steady-state
    operation of the ANativeWindow.
    
    Change-Id: Ie8c461fc26b02ecde02ddb4f95bf763662cf1551
    Related-Bug: 3356050
    minor clean-up. SurfaceFlinger doesn't need libpixelflinger.so. (DO NOT MERGE)
    
    Change-Id: I1ddbbbec4fa5b2521ef3787bc28efe1bc90d0060
    integrate videoeditor preview player.
    
    Change-Id: I83084f494605c8e6f4d198afa8c36f9e29579667
    Fix error reporting in Surface::cancelBuffer()
    
    when we validate the surface there, most errors are in fact allowed
    because it is legal to cancel a buffer after a surface has been
    destroyed (for instance). in that case make sure to not log
    error messages as they are very confusing.
    
    Change-Id: Iecdfbaf6d9ee5da54d56cd7ea7a0d430c30934b0
    minor clean-up. SurfaceFlinger doesn't need libpixelflinger.so.
    
    Change-Id: I3bdca74351c8e480a05084bc412a96c5f685221d
    fix [2835280] Add support for cancelling buffers to ANativeWindow
    
    There is a new ANativeWindow::cancelBuffer() API that can be used to
    cancel any dequeued buffer, BEFORE it's been enqueued. The buffer is
    returned to the list of availlable buffers. dequeue and cancel are not
    mutually thread safe, they must be called from the same thread or
    external synchronization must be used.
    
    Change-Id: I86cc7985bace8b6a93ad2c75d2bef5c3c2cb4d61
    fix [2931513] Add support for setting the orientation of an ANativeWindow
    
    Also implement support for cropping.
    
    Change-Id: Iba5888dd242bf2feaac9e9ce26e404c1f404c280
    Change the framework to use the new camera preview path.
    
    This change makes the camera HAL interface take an ANativeWindow interface from
    which all the camera preview buffers will be allocated.  The framework code
    running in application processes now passes a Surface object rather than an
    ISurface to the camera server via Binder when setting the preview surface.  The
    camera server then forwards that Surface object (which implements the
    ANativeWindow interface) to the camera HAL, which uses it to communicate with
    SurfaceFlinger to allocate the camera preview buffers.
    
    Change-Id: Ie438f721559cd7de5e4f848a26d96360dda07b5f
    Squashed commit of the following:
    
    commit 35cc68814a9537c31fde146e171e7b0bbdfe211e
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Aug 16 08:48:42 2010 -0700
    
        Only enable support for yuv to yuv conversion on passion, where it's available, use the slower yuv->rgb565 path everywhere else.
    
    commit d8ac5a8814103e60d11d2acf61997fc31a1dc58d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 13 13:56:44 2010 -0700
    
        The software renderer takes over all rendering, converting from yuv to yuv if possible and rgb565 otherwise.
    
    commit 684972074b74318bdcb826ed9b5b0864d2d2e273
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 13 09:34:35 2010 -0700
    
        A first shot at supporting the new rendering APIs.
    
    Change-Id: Iea9b32856da46950501f1a700f616b5feac710fd
    Re-use existing Surface objects when reading them from parcels.
    
    This change adds a process-global cache of previously deserialized Surface
    objects so that if a Surface object wrapping the same ISurface gets received
    again the same Surface can be used.  This is important because the 'tail'
    pointer in the SharedBufferClient is stored only on the client side, and needs
    to be the same for all the Surface objects wrapping an ISurface instance.  This
    solves the problem by making there only be one Surface object wrapping an
    ISurface per process.
    
    Change-Id: I4bf0b8787885c56277622fca053022d2bb638902
    Introduce official public NativeWindow type.
    
    Not yet hooked up to anything in the NDK, but requires renaming
    the existing android_native_window_t type everywhere.
    
    Change-Id: Iffee6ea39c93b8b34e20fb69e4d2c7c837e5ea2e
    allow re-targetting of surfaces
    
    Surfaces can now be parcelized and sent to remote
    processes. When a surface crosses a process
    boundary, it looses its connection with the
    current process and gets attached to the new one.
    
    Change-Id: I39c7b055bcd3ea1162ef2718d3d4b866bf7c81c0
    optimize Surface.readFromParcel()
    
    this is called for each relayout() and used to create a full Surface (cpp)
    which in turn did some heavy work (including an IPC with surfaceflinger),
    most of the time to destroy it immediatelly when the returned surface
    (the one in the parcel) was the same.
    
    we now more intelligentely read from the parcel and construct the new
    object only if needed.
    
    Change-Id: Idfd40d9ac96ffc6d4ae5fd99bcc0773e131e2267
    split surface management from surface's buffers management
    
    Change-Id: If3c5655d1231f8f0c49ba68f972b1b20c93b3f87
    more clean-up in preparation of bigger changes
    
    the most important change here is the renaming of
    ISurfaceFlingerClient to ISurfaceComposerClient
    
    Change-Id: I94e18b0417f50e06f21377446639c61f65f959b3
    more clean-up of Surfaceflinger's client management
    
    SurfaceComposerClient now only exist on the WindowManager side,
    the client side uses the new SurfaceClient class, which only
    exposes what a client needs.
    
    also instead of keeping mappings from IBinder to SurfaceComposerClients
    we have a SurfaceClient per Surface (referring to the same IBinder), this
    is made possible by the fact that SurfaceClient is very light.
    
    Change-Id: I6a1f7015424f07871632a25ed6a502c55abfcfa6
    fix [2712278] The preview buffer left some black borders in left and bottom edges
    
    we were incorrectly flagging push_buffer surfaces as invalid
    
    Change-Id: I4dfd4ffbbe8a71f7e23e835db8d71966416c29bb
    added the notion of fixed-size buffers
    
    the new native_window_set_buffers_geometry allows
    to specify a size and format for all buffers to be
    dequeued. the buffer will be scalled to the window's
    size.
    
    Change-Id: I2c378b85c88d29cdd827a5f319d5c704d79ba381
    added native_window_set_buffer_count()
    
    this method can be used to change the number of buffers
    associated to a native window. the default is two.
    
    Change-Id: I608b959e6b29d77f95edb23c31dc9b099a758f2f
    SharedBufferStack now can grow up to 16 buffers.
    
    there is a new resize() api, which currently only allows growing.
    
    Change-Id: Ia37b81b73be466d2491ffed7f3a23cd8e113c6fe
    cleanup. waitForCondition() now uses polymorphsim instead of templtes
    
    the reason for the above change is that waitForCondition() had become
    large over time, mainly to handle error cases, using inlines to
    evaluate the condition doesn't buys us much anymore while it increases
    code size.
    
    Change-Id: I2595d850832628954b900ab8bb1796c863447bc7
    better fix for [2420565] Surface.lockCanvas() updates the dirty region too often
    
    Change-Id: I83438b40effd21538f1c74396dc665254b9d5ab6
    added setCrop() to android_native_window_t
    
    hooked up the new method up to Surface.cpp
    the actual crop is not implemented in SF yet
    
    Change-Id: Ic6e313c98fd880f127a051a0ccc71808bd689751
    don't hardcode "mSurface" throughout our source code
    
    this is used in a few places to get access to the android.view.Surface
    native surface. use a macro instead. Also rename the field to mNativeSurface.
    
    Change-Id: I1c6dea14abd6b8b1392c7f97b304115999355094
    implement connect/disconnect in our native_window_t implementations
    
    the framebuffer implementation doesn't do anything special with this
    but the surfaceflinger implementation makes sure the surface is not used
    by two APIs simultaneously.
    
    Change-Id: Id4ca8ef7093d68846abc2ac814327cc40a64b66b
    split libsurfaceflinger_client and libcamera_client out of libui
    android-2.1_r1 snapshot
    fix some aspects of [2258746] native crash in launcher2
    
    Surface::validate() could sometimes dereference a null pointer before checking it wasn't null.
    This will prevent the application to crash when given bad parameters or used incorrectly.
    However, the bug above probably has another cause.
    eclair snapshot
    fix [2167050] glTexImage2D code path buggy in SurfaceFlinger
    
    When EGLImage extension is not available, SurfaceFlinger will fallback to using
    glTexImage2D and glTexSubImage2D instead, which requires 50% more memory and an
    extra copy. However this code path has never been exercised and had some bugs
    which this patch fix.
    
    Mainly the scale factor wasn't computed right when falling back on glDrawElements.
    We also fallback to this mode of operation if a buffer doesn't have the adequate
    usage bits for EGLImage usage.
    
    This changes only code that is currently not executed. Some refactoring was needed to
    keep the change clean. This doesn't change anything functionaly.
    fix [2122448] android_native_window_t::setUsage() only reallocates the first buffer
    
    Take 2. We needed to check that the usage flags are "good enough" as opposed to "the same".
    
    This reverts commit 8f17a762fe9e9f31e4e86cb60ff2bfb6b10fdee6.
    Revert "fix [2122448] android_native_window_t::setUsage() only reallocates the first buffer"
    
    This reverts commit 486aa963b63e20b7910e1004cebb4f0afabbd80f.
    fix [2122448] android_native_window_t::setUsage() only reallocates the first buffer
    fix [2068105] implement queueBuffer/lockBuffer/dequeueBuffer properly
    
    Rewrote SurfaceFlinger's buffer management from the ground-up.
    The design now support an arbitrary number of buffers per surface, however the current implementation is limited to four. Currently only 2 buffers are used in practice.
    
    The main new feature is to be able to dequeue all buffers at once (very important when there are only two).
    
    A client can dequeue all buffers until there are none available, it can lock all buffers except the last one that is used for composition. The client will block then, until a new buffer is enqueued.
    
    The current implementation requires that buffers are locked in the same order they are dequeued and enqueued in the same order they are locked. Only one buffer can be locked at a time.
    
    eg. Allowed sequence:   DQ, DQ, LOCK, Q, LOCK, Q
    eg. Forbidden sequence: DQ, DQ, LOCK, LOCK, Q, Q
    make sure to update a surface's usage bits when it changes, instead of only the first time.
    
    also fixed a few locking issues in Surface and commented how each member is protected.
    second take, hopefully this time it doesn't break one of the builds: "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    Revert "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    
    This reverts commit 8b76a0ac6fbf07254629ed1ea86af014d5abe050.
    SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything.
    
    This change makes SurfaceHolder.setType(GPU) obsolete (it's now ignored).
    Added an API to android_native_window_t to allow extending the functionality without ever breaking binary compatibility. This is used to implement the new set_usage() API. This API needs to be called by software renderers because the default is to use usage flags suitable for h/w.
    Expose a variation of the createRenderer API that works on a plain Surface.
    The IOMX interface now instantiates IOMXRenderers to hide the details of hardware accelerated blitting.
    fixed some issues with the software renderer when surfaces are made current.
    
    there was several issues:
    - when a surface was made non-current, the last frame wasn't shown and the buffer could stay locked
    - when a surface was made current the 2nd time, it would not dequeue a new buffer
    
    now, queue/dequeue are done when the surface is made current.
    
    for this to work, a new query() hook had to be added on android_native_window_t, it allows to retrieve some attributes of a window (currently only width and height).
    move opengl/include/EGL/android_natives.h to include/ui/egl/android_natives.h and don't include it from egl.h
    
    the android_native_ types are just forward declared in egl.h
    get rid of android_native_buffer_t::getHandle() and replace it with an handle field
    
    this abstraction was not necessary. things are easier now.
    removed the "bits" attribute from android_native_buffer_t.
    
    "bits" can never be trusted now that we need to call lock() on the handle to get the virtual address of the buffer.
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    cleanup, remove unused fields. Also make sure that we don't systematically allocate a Surface in Surface.java if only a SurfaceControl is needed (Common case).
    more splitting of Surface/SurfaceControl. Surface.java is now implemented in terms of Surface and SurfaceControl.
    
    The WindowManager side of Surface.java holds a SurfaceControl, while the client-side holds a Surface. When the client is in the system process, Surface.java holds both (which is a problem we'll try to fix later).
    split Surface.cpp into Surface and SurfaceControl
    
    SurfaceControl is used for controling the geometry of the surface (for the WM), while Surface is used to access the buffers (for SF's clients).
    SurfaceFlingerClient now uses the SurfaceID instead of Surface*.
    
    Currently Surface still has the SurfaceControl API and is implemented by calling into SurfaceControl.
    fix some issues with Surface's lifetime management.
    
    To deal with Java's lack of destructors and delayed garbage collection, we used to duplicate Surface.cpp objects in some case; this caused some issues because Surface is supposed to be reference-counted and unique.
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    BufferQueue: Increase max slots from 32 to 64
    
    Increases NUM_BUFFER_SLOTS from 32 to 64 and changes the mask
    returned by IGBC::getReleasedBuffers from 32 to 64 bits.
    
    Bug: 13174352
    Change-Id: Ie8ef0853916cfb91f83881c7241886bb1950f01a
    BufferQueue: Add StreamSplitter
    
    Adds a StreamSplitter class, that takes one IGraphicBufferConsumer
    interface and multiple IGraphicBufferProducer interfaces and
    implements a one-to-many broadcast of GraphicBuffers (while managing
    fences correctly).
    
    Change-Id: I38ecdf3e311ac521bc781c30dde0cc382a4376a3
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    BufferQueue: Allow detaching/reattaching buffers
    
    Adds detachBuffer and attachBuffer calls to both the producer and
    consumer sides of BufferQueue. Buffers may be detached while dequeued
    by the producer or acquired by the consumer, and when attached, enter
    the dequeued and acquired states, respectively.
    
    Bug: 13173343
    Change-Id: Ic152692b0a94d99e0135b9bfa62747dab2a54220
    gui: Update header docs for IGraphicBufferConsumer/Producer/BufferQueue
    
    Also fix compiler warnings for libgui
    
    Change-Id: I0ee38d9ad5eaa82d55bf812d291da8c433581cef
    fix camera API 2.0 orientation
    
    we add a flag to ANativeWindow::setBufferTransform that means
    "apply the inverse rotation of the display this buffer is displayed
    onto to".
    
    Bug: 10804238
    Change-Id: Id2447676271950463e8dbcef1b95935c5c3f32b2
    Re-enable frame dropping for non-auto timestamps
    
    This change adds an entire field to note whether the timestamp was
    auto-generated by Surface or supplied by the application.
    
    The value is used when deciding whether or not to drop frames based
    on buffer presentation timestamps.  If a desired presentation time
    was set explicitly, BufferQueue will use that value to decide if a
    frame should be dropped.  If the timestamp was generated by Surface
    at the time the buffer was queued, the timestamp is ignored.
    
    Bug 10151804
    
    Change-Id: Ibd571a7578351063b813cbdad2ddbeed70655ba5
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    Binderize the consumer side of BufferQueue
    
    While currently untested, this should allow to move the
    BuffereQueue in the consumer process and have everything
    work as usual.
    
    Bug: 9265647
    
    Change-Id: I9ca8f099f7c65b9a27b7e7a3643b46d1b58eacfc
    Show build config in dumpsys SurfaceFlinger
    
    This adds a line to the "dumpsys SurfaceFlinger" output that shows
    build-time configuration values.
    
    Example:
     Build configuration: [sf HAS_CONTEXT_PRIORITY] [libui] \
      [libgui USE_FENCE_SYNC]
    
    Bug 7206633
    
    Change-Id: Ibe1856b459d34a4be6ee83a4ebfd2807e6cc68a0
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    Remove frameworks/base/im since these stuff are only used by IM app
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add sticky transform to surfaceflinger.
    
    Bug: 15116722
    
    - Adds a sticky transform field that can be set from a
      SurfaceFlinger client Surface.  This transform is
      added to any transform applied to the Surface.
    
    Change-Id: Idaa4311dfd027b2d2b8ea5e2c6cba2da5779d753
    BufferQueue: Add allocateBuffers method
    
    This adds an allocateBuffers method to BufferQueue, which instructs
    it to allocate up to the maximum number of buffers allowed by the
    current configuration. The goal is that this method can be called
    ahead of render time, which will prevent dequeueBuffers from blocking
    in allocation and inducing jank.
    
    This interface is also plumbed up to the native Surface (and, in
    another change, up to the Java Surface and ThreadedRenderer).
    
    Bug: 11792166
    Change-Id: I4aa96b4351ea1c95ed5db228ca3ef98303229c74
    BufferQueueProducer: add detachNextBuffer
    
    Adds a new method, IGBP::detachNextBuffer, that effectively does
    dequeue + request + detach in a single call, but does not need to
    know anything about the dequeued buffer, and will not block on
    dequeue. This is mostly for the upcoming StreamSplitter to use in
    its onBufferReleased callback.
    
    Change-Id: Ie88a69de109003acebaa486a5b44c8a455726550
    BufferQueue: Add producer buffer-released callback
    
    Add a callback to the producer side, onBufferReleased, which will be
    called every time the consumer releases a buffer back to the
    BufferQueue. This will enable a buffer stream splitter to work
    autonomously without having to block on dequeueBuffer.
    
    The binder object used for the callback replaces the generic IBinder
    token that was passed into IGraphicBufferProducer::connect to detect
    the death of the producer. If a producer does not wish to listen for
    buffer release events, it can pass in an instance of the
    DummyProducerListener class defined in IProducerListener.h, if it even
    cares about death events (BufferQueue doesn't enforce the token being
    non-NULL, though perhaps we should).
    
    Change-Id: I23935760673524abeafea2b58dccc3583b368710
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    BufferQueue: Allow detaching/reattaching buffers
    
    Adds detachBuffer and attachBuffer calls to both the producer and
    consumer sides of BufferQueue. Buffers may be detached while dequeued
    by the producer or acquired by the consumer, and when attached, enter
    the dequeued and acquired states, respectively.
    
    Bug: 13173343
    Change-Id: Ic152692b0a94d99e0135b9bfa62747dab2a54220
    gui: Add tests for IGraphicBufferProducer
    
    * Basic tests only. Needs more complicated queue/dequeue tests.
    * Also needs consumer-side tests to really be thorough.
    
    Change-Id: I1099dd56d65b6e9dfa15377726d6054ce657c0ca
    gui: Update header docs for IGraphicBufferConsumer/Producer/BufferQueue
    
    Also fix compiler warnings for libgui
    
    Change-Id: I0ee38d9ad5eaa82d55bf812d291da8c433581cef
    Make sure do disconnect from a BQ when its client dies.
    
    Bug: 5679534
    
    Change-Id: If447e8673df83fe0b1d6210641e0a48522501a53
    Re-enable frame dropping for non-auto timestamps
    
    This change adds an entire field to note whether the timestamp was
    auto-generated by Surface or supplied by the application.
    
    The value is used when deciding whether or not to drop frames based
    on buffer presentation timestamps.  If a desired presentation time
    was set explicitly, BufferQueue will use that value to decide if a
    frame should be dropped.  If the timestamp was generated by Surface
    at the time the buffer was queued, the timestamp is ignored.
    
    Bug 10151804
    
    Change-Id: Ibd571a7578351063b813cbdad2ddbeed70655ba5
    Make Flattenable not virtual
    
    Fallout from the Flattenable change, update all its uses.
    
    Additionnaly, fix/tighten size checks when (un)flatten()ing
    things.
    
    Removed the assumption by some flattenables (e.g.: Fence)
    that the size passed to them would be exact (it can
    and will be larger in some cases)
    
    The code in Parcel is a bit complicated so that we don't
    have to expose the full implementation (and also to
    keep the code smallish).
    
    Change-Id: I0bf1c8aca2a3128491b4f45510bc46667e566dde
    Make ANW.setSwapInterval(0) work again
    
    we can now queue/dequeue a buffer in asynchrnous mode by using the
    async parameter to these calls. async mode is only specified
    with those calls (it is not modal anymore).
    
    as a consequence it can only be specified when the buffer count
    is not overidden, as error is returned otherwise.
    
    Change-Id: Ic63f4f96f671cb9d65c4cecbcc192615e09a8b6b
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    Fix argument types in IGraphicBufferProducer methods
    
    Bug: 8384764
    Change-Id: I7a3f1e1a0584a70af04f9eafef900505389d2202
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: Ibed34175ae273608393aaa5f0a7df207dc40d709
    Minor tweaks.
    
    Change-Id: I9f82f574112141b6aa074c42303056cd52d5c478
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    Added some comments
    
    Added a quick intro section at the top of the class.  Also noted
    the proposed new name for the class.
    
    Change-Id: I3f79663527544aa4e910db0e5a1374b54d16ba2f
    libgui: add BufferQueue test infrastructure
    
    This change adds some infrastructure for testing the BufferQueue class.  It
    also includes a test that tests the new check in BufferQueue::acquireBuffer
    that prevents the consumer from acquiring more than one buffer beyond the max
    acquired buffer count that was set.
    
    Change-Id: I38554ad3f9a53d2ddeba7ef0deee35ec2e2f9775
    Pass fences with buffers from SurfaceTextureClient
    
    Change-Id: I09b49433788d01e8b2b3684bb4d0112be29538d3
    Pass fences from BufferQueue to SurfaceTextureClient
    
    ISurfaceTexture::dequeueBuffer now returns the buffer's fence for the
    client to wait on. For BufferQueue, this means passing it through
    Binder so it can be returned to the SurfaceTextureClient. Now
    SurfaceTextureClient is responsible for waiting on the fence in
    dequeueBuffer instead of BufferQueue: one step closer to the goal.
    
    Change-Id: I677ae758bcd23acee2d784b8cec11b32cccc196d
    libgui: Add support for post-xform crops.
    
    This change adds support for specifying a crop rectangle to a
    SurfaceTextureClient that is in post-transformed coordinate space.
    
    Change-Id: I247901de343e71b32850f7ae3bac62dfa612ad3d
    Bug: 6299171
    libgui: Add plumbing for active rectangle
    
    This change adds the plumbing to SurfaceTextureClient, BufferQueue, and
    SurfaceTexture to get the active rectangle passed to the ANativeWindow to
    the buffer consumer.
    
    Change-Id: I35da0889b266327ebb079b6a7136fa3e2e8b00e6
    add a way to query whether an ANativeWindow consumer is running ahead of the producer
    
    Change-Id: Ibccfa1feb56db2ab11f0c0934ce2d570a2b65ae2
    update the binder protocol for connect to match that of queueBuffer
    
    indeed, connect and queueBuffer return the same data, so it's
    easier to have them use the same protocol.
    
    Change-Id: I4f9fa3be0a80c9ab0a7a4039b282ae843aab02e1
    use in/out structures for queueBuffer() IPC
    
    Change-Id: Ie125df2444b62a9a2200586a717dca268852afc9
    reduce IPC with BufferQueue
    
    collapse setCrop, setTransform and setScalingMode to queueBuffer()
    this ends up simplifying things quite a bit and reducing the numnber
    of IPC needed per frame.
    
    Change-Id: I3a13c07603abe4e76b8251e6380b107fde22e6d9
    return correct value from query after connecting a surface
    
    the first time a surface was connected, the values returned
    by query NATIVE_WINDOW_DEFAULT_{WIDTH|HEIGHT} and
    NATIVE_WINDOW_TRANSFORM_HINT were wrong until a call
    to queueBuffer was performed.
    
    Bug: 5137366, 5121607
    Change-Id: I7ac6b5b0daa876638f6bed7c20f286a6e6d984f6
    SurfaceTexture: add the abandon method.
    
    This change adds the 'abandon' method to the SurfaceTexture C++ class.
    This method may be used to put the SurfaceTexture in an abandoned state,
    causing all ISurfaceTexture methods to fail.
    
    Change-Id: Ibd261f7b73f44e2bec36a8508bf92113cfb7cf95
    SurfaceTexture: remove getAllocator
    
    This change removes the SurfaceTexture::getAllocator method, as it's no
    longer needed.  Proper refcounting of the Gralloc buffers is now handled
    by the IGraphicBufferAlloc binder marshalling code.
    
    Change-Id: I5cffa6ebfc1bc5828fb7ce0e0a5b2f55cd8479da
    clean-up. get rid ofunused code and members in Surface[Control].cpp
    
    Change-Id: Ia7790ae28af2c2ac99eae01c2c5044ace4a490a4
    implement: "Add an ANativeWindow API for SurfaceFlinger to suggest an optimal buffer orientation"
    
    Bug: 4487161
    Change-Id: I883f34efe542c2a566d04966f873374f40c50092
    Add set_scaling_mode() to ANativeWindow.
    
    This allows to specify the scaling mode independently from
    the buffer size.
    
    Change-Id: Iaa2baa660445531a97d3fac192e580f4929c5d3b
    SurfaceTexture: make (dis)connect into an IPC
    
    This change makes the ANativeWindow connect and disconnect calls result
    in an IPC to the SurfaceTexture object.  This will allow us to prevent
    multiple simultaneous connections from different processes.
    
    Change-Id: Id9aa1003b1335b96ca6bd4a1f5a67aa433d42efb
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    
    Change-Id: I8382e346ddaa2c4c8ff56ac3ffd7f0109572f188
    unify SurfaceTexture and Surface
    
    Change-Id: I49da2f5d8408e4cd7e148cfb777bb4ff68cd8f37
    Fix a bug where setgeometry couldn't be undone
    
    This change the binder protocol between SurfaceTextureClient
    and SurfaceTexture. dequeueBuffer() now takes the requested
    parameters for the buffer. SurfaceTexture decides if the
    buffer needs to be reallocated and does the allocation
    if needed. In that case it returns BUFFER_NEEDS_REALLOCATION
    to tell SurfaceTextureClient that it needs to call
    requestBuffer (which all parameters have been removed) to
    acquire a pointer to the buffer.
    
    dequeueBuffer and requestBuffer could be folded into a single
    IPC call, but we chose to optimize the case where buffers are
    not created and avoid some complexity in the marshalling code.
    
    Change-Id: I097a7f6f40a3491e10f3f3742eab33999286c304
    SurfaceTexture can now force the client to request a buffer
    
    SurfaceTexture now has the concept of default size a new method,
    setDefaultBufferSize() to set it. When the default size is
    changed, dequeueBuffer() will return a value telling the
    client that it must ask for a new buffer.
    
    The above only applies if the client has not
    overriden the buffer size with setGeometry.
    
    Change-Id: I520dc40363054b7e37fdb67d6a2e7bce70326e81
    Add support for timestamps into SurfaceTexture.
    
    API addition: The timestamps are represented as nanoseconds from some
    arbitrary time point. Like the SurfaceTexture transform matrix, the
    timestamp retrieved by getTimestamp is for the last frame sent to the
    GL texture using updateTexImage().
    
    Camera HAL change: Expect vendors to set these timestamps using
    native_window_set_buffers_timestamp().  For now, they are
    autogenerated by SurfaceTextureClient if set_buffers_timestamp() is
    never called, but such timing is likely not accurate enough to pass a
    CTS test.
    
    bug:3300707
    
    Change-Id: Ife131a0c2a826ac27342e11b8a6c42ff49e1bea7
    Pass the IGraphicBufferAlloc to SurfaceTextureClient.
    
    This change passes a reference to the IGraphicBufferAlloc binder object
    to SurfaceTextureClient objects.  When STC objects are created they
    query their associated ISurfaceTexture object for the
    IGraphicBufferAlloc that the SurfaceTexture uses to allocate buffers.
    Having the SurfaceTextureClient hold this reference prevents the
    GraphicBufferAlloc in SurfaceFlinger from freeing the allocated buffers
    before the SurfaceTextureClient is done with them.
    
    Change-Id: Ib8e30e8b37fdd60438cbb4cb7e9174d0ba6d661c
    related-bug: 3362519
    Add the SurfaceTexture C++ implementation.
    
    This change adds the C++ implementation of SurfaceTexture and related
    classes. The goal of this is for a SurfaceTexture to be passed to
    camera service or Stagefright in place of a Surface to allow camera
    preview or decoded video frames to be streamed to an OpenGL ES texture
    that an application can use.
    
    Change-Id: I55c83a7017f1ecb81c9c9e3252cbd118b914296c
    new SensorService
    
    remove old sensor service and implement SensorManager
    on top of the new (native) SensorManger API.
    
    Change-Id: Iddb77d498755da3e11646473a44d651f12f40281
    first step at implementing the native sensor support
    
    in this commit:
    - implemented the C stub
    - implemented the binder interfaces involved
    - implemented most of the C++ client side
    
    missing:
    - SensorManager cannot connect to the SensorServer yet
    (because there is no SensorServer yet)
    
    Change-Id: I75010cbeef31c98d6fa62fd5d388dcef87c2636b
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    BufferQueue: Increase max slots from 32 to 64
    
    Increases NUM_BUFFER_SLOTS from 32 to 64 and changes the mask
    returned by IGBC::getReleasedBuffers from 32 to 64 bits.
    
    Bug: 13174352
    Change-Id: Ie8ef0853916cfb91f83881c7241886bb1950f01a
    Change BufferQueue into producer/consumer wrapper
    
    Now that BufferQueue has been split into core + producer + consumer,
    rewrite BufferQueue to be a thin layer over a producer and consumer
    interface. Eventually, this layer will be deprecated in favor of
    only using either the producer or consumer interface, as applicable.
    
    Change-Id: I340ae5f5b633b244fb594615ff52ba50b9e2f7e4
    libgui: Split SurfaceTexture tests into more files
    
    Extract the many different test fixtures and suites in SurfaceTexture_test.cpp
    into separate files. No real functional changes, just tweaking headers to keep
    things building (and adding a few copyright headers I forgot last time).
    
    Change-Id: Id801bd5d617f0cc61d22508fb9b71b41694bdecf
    fix SF buffer cropping
    
    When a buffer had a crop (meaning its content is scaled to the window size)
    and a window crop was defined, the resulting crop couldn't be expressed
    properly because h/w composer's API was limited to integers, since
    this is fixed in h/w composer 1.3, we take adventage of this to
    make sure we get the correct crop.
    
    this bug could result in the buffer being scaled by an incorrect ratio and
    be slightly offset; moreover, it would produce different results from the
    GL code path, which is always correct.
    
    Change-Id: I8e20e00b6e26177d14f4ab4d2cd581e26c818892
    add libsurfaceflinger_ddmconnection for PDK build
    
    - the library is dlopened from libsurfaceflinger
    - the library built only when libnativehelper exists
    
    Bug: 7089510
    Change-Id: Ib3ea1029d7e8f6e055f4b759d0bf68f5123fa8a1
    as a debug option SrufaceFlinger can now connect to DDMS
    
    this is disabled by default. To enable:
      setprop debug.sf.ddms 1
    
    this debug option requires to restart SurfaceFlinger
    
    Change-Id: Ic2f8050b29911b55bcd21721648b6978700c277d
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    Remove frameworks/base/im since these stuff are only used by IM app
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    return an error code with gralloc buffer allocation failures
    
    Change-Id: I471e5d37ea7a42fc8a0f93446ee3b4229da37807
    unify SurfaceTexture and Surface
    
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    Add SurfaceTexture logging
    fix onFrameAvailable
    Fix a GraphicBuffer leak in SurfaceTexture
    
    This leak was intentional, it was there to deal with the fact that
    some gralloc implementations don't track buffer handles with
    file-descriptors so buffers needed to stay alive until there were
    registered, which is not guaranteed by binder transactions.
    
    In this new implementation, we use a small BBinder holding a
    reference to the buffer, which with tuck into the parcel. This forces
    the reference to stay alive until the parcel is destroyed, which
    is guaranteed (by construction) to happen after the buffer is
    registered.
    
    this allows the public facing API to not expose the previous hack.
    
    Change-Id: I1dd6cd83679a2b7457ad628169e2851acc027143
    Fix remote GraphicBuffer allocation in SurfaceFlinger.
    
    This change fixes a horrible hack that I did to allow application
    processes to create GraphicBuffer objects by making a binder call to
    SurfaceFlinger.  This change introduces a new binder interface
    specifically for doing this, and does it in such a way that
    SurfaceFlinger will maintain a reference to the buffers until the app is
    done with them.
    
    Change-Id: Icb240397c6c206d7f69124c1497a829f051cb49b
    new SensorService
    
    remove old sensor service and implement SensorManager
    on top of the new (native) SensorManger API.
    
    Change-Id: Iddb77d498755da3e11646473a44d651f12f40281
    first step at implementing the native sensor support
    
    in this commit:
    - implemented the C stub
    - implemented the binder interfaces involved
    - implemented most of the C++ client side
    
    missing:
    - SensorManager cannot connect to the SensorServer yet
    (because there is no SensorServer yet)
    
    Change-Id: I75010cbeef31c98d6fa62fd5d388dcef87c2636b
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add sticky transform to surfaceflinger.
    
    Bug: 15116722
    
    - Adds a sticky transform field that can be set from a
      SurfaceFlinger client Surface.  This transform is
      added to any transform applied to the Surface.
    
    Change-Id: Idaa4311dfd027b2d2b8ea5e2c6cba2da5779d753
    BufferQueue: Add allocateBuffers method
    
    This adds an allocateBuffers method to BufferQueue, which instructs
    it to allocate up to the maximum number of buffers allowed by the
    current configuration. The goal is that this method can be called
    ahead of render time, which will prevent dequeueBuffers from blocking
    in allocation and inducing jank.
    
    This interface is also plumbed up to the native Surface (and, in
    another change, up to the Java Surface and ThreadedRenderer).
    
    Bug: 11792166
    Change-Id: I4aa96b4351ea1c95ed5db228ca3ef98303229c74
    BufferQueueProducer: add detachNextBuffer
    
    Adds a new method, IGBP::detachNextBuffer, that effectively does
    dequeue + request + detach in a single call, but does not need to
    know anything about the dequeued buffer, and will not block on
    dequeue. This is mostly for the upcoming StreamSplitter to use in
    its onBufferReleased callback.
    
    Change-Id: Ie88a69de109003acebaa486a5b44c8a455726550
    BufferQueue: Add producer buffer-released callback
    
    Add a callback to the producer side, onBufferReleased, which will be
    called every time the consumer releases a buffer back to the
    BufferQueue. This will enable a buffer stream splitter to work
    autonomously without having to block on dequeueBuffer.
    
    The binder object used for the callback replaces the generic IBinder
    token that was passed into IGraphicBufferProducer::connect to detect
    the death of the producer. If a producer does not wish to listen for
    buffer release events, it can pass in an instance of the
    DummyProducerListener class defined in IProducerListener.h, if it even
    cares about death events (BufferQueue doesn't enforce the token being
    non-NULL, though perhaps we should).
    
    Change-Id: I23935760673524abeafea2b58dccc3583b368710
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    BufferQueue: Allow detaching/reattaching buffers
    
    Adds detachBuffer and attachBuffer calls to both the producer and
    consumer sides of BufferQueue. Buffers may be detached while dequeued
    by the producer or acquired by the consumer, and when attached, enter
    the dequeued and acquired states, respectively.
    
    Bug: 13173343
    Change-Id: Ic152692b0a94d99e0135b9bfa62747dab2a54220
    Change BufferQueue into producer/consumer wrapper
    
    Now that BufferQueue has been split into core + producer + consumer,
    rewrite BufferQueue to be a thin layer over a producer and consumer
    interface. Eventually, this layer will be deprecated in favor of
    only using either the producer or consumer interface, as applicable.
    
    Change-Id: I340ae5f5b633b244fb594615ff52ba50b9e2f7e4
    Split BufferQueue into core + producer + consumer
    
    Change-Id: Idc39f1e511d68ce4f02202d35425a419bc0bcd92
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    Binderize the consumer side of BufferQueue
    
    While currently untested, this should allow to move the
    BuffereQueue in the consumer process and have everything
    work as usual.
    
    Bug: 9265647
    
    Change-Id: I9ca8f099f7c65b9a27b7e7a3643b46d1b58eacfc
    Update ScreenshotClient to take advantage of rotation in surfaceflinger's screencap api
    
    Change-Id: I836649d9d5cd5958ce34e47f26f4a36d2d05d24c
    Have VirtualDisplays send SF resize messages when resizing
    
    Change-Id: I76d15b22099a659450ec875836c9bf2b6584838f
    surfaceflinger: Replace blank/unblank with setPowerMode
    
    We replace the blank/unblank calls in surfaceFlinger with a more generic
    setPowerMode() routine.
    
    Some displays support different power modes (for example, with reduced
    color palettes). Depending on the use case we should be able to toggle
    these modes, so as to achieve incremental power savings.
    
    Initially, three power modes will be supported:
    - HWC_POWER_MODE_OFF
    - HWC_POWER_MODE_DOZE
    - HWC_POWER_MODE_NORMAL
    
    HWC_POWER_MODE_OFF will correspond to blanking the display, while
    HWC_POWER_MODE_NORMAL will correspond to unblanking. HWC_POWER_MODE_DOZE
    will put the display into a low power setting, if it is supported in
    hardware.
    
    If such a low power mode is not supported, it should be treated as a
    call to set the mode to HWC_POWER_MODE_NORMAL.
    
    As a consequence of adding the mPowerMode field, the mScreenAcquired is
    no longer required, and thus references to it are removed and replaced
    equivalent references to mPowerMode.
    
    We also add the glue code to connect the services invocation of setting
    a power mode and the HAL implementation in HWComposer.
    
    Bug: 13472578
    Change-Id: I431595ecf16d2f2c94259272db3dd42f29636204
    Signed-off-by: Prashant Malani <pmalani@google.com>
    SurfaceFlinger: Add sourceCrop to screenshot
    
    Adds a sourceCrop Rect parameter to screenshot commands, which allows
    clients to capture only a portion of the screen instead of the whole
    screen.
    
    Bug: 15137922
    Change-Id: I629447573cd34ffb96334cde7ba02490b9ea06d8
    Enable changing display configuration
    
    This allows querying and switching display device configurations
    through the ISurfaceComposer/SurfaceComposerClient interface.
    
    Bug: 14320401
    Change-Id: I8c22165698950e5da32204c1c4da92122f91a715
    Adding render stats APIs to UiAutomation (framework native).
    
    bug:12927198
    
    Change-Id: Ibb1c07f7d89e11281e5c1f27f412a29ac6f9c4ab
    Remove deprecated BufferQueue constructor
    
    Bug: 13415624
    Change-Id: I52f58a4d22296d9fc3cdbd4ad53eb10a785db3ce
    Allow disabling layer rotation during screenshots
    
    Add the ability to ignore layers' transformation matrices during
    screenshot capture, which will allow the window manager to capture
    unrotated images for recents during the device rotation animation.
    
    Bug: 11805195
    Change-Id: I854d87bc84ca06ef9a054a454af1c080ee66fbb8
    Add ISurfaceComposer::destroyDisplay
    
    Bug: 10191053
    Change-Id: Ia89286f95421344a60ffedaaca5825c4e3cd7f9e
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    make sure to unlock the screenshot's buffer on destruction
    
    this fixes a memory leak on various devices
    
    Bug: 8475134
    Change-Id: I25924674c803a0cb22371a95c60664c36acb0340
    rework how we take screenshots for a CPU consumer
    
    We're not using IMemoryHeap as a transport anymore,
    instead we're providing a CpuConsumer and use the
    IGraphicBufferProducer version of the screenshot API.
    
    However, some GPU drivers don't support properly
    a GPU to CPU path, to work around this, we use a
    temporary BufferQueue on the server side for the
    GL rendering, and we use glReadPixels into the
    CpuConsumer (we're now using a CPU to CPU path
    which is always supported).
    
    Currently this "wrapping" is always performed,
    but it can be bypassed on devices that support
    the GPU to CPU path.
    
    This also addresses a DoS attack vector on
    SurfaceFlinger, where an application could
    consume all of SF's filedescriptors by creating
    a lot of screenshots in a row.
    
    Bug: 8390553
    
    Change-Id: I9e81514c2a7711b9bb393f74305be7d2abe08f1c
    rework screenshot API and implementation
    
    - SurfaceFlinger now supports to take a screenshot
      directly into an IGraphicBufferProducer
    
    - reimplement the IMemoryHeap screenshot on top
      of the above
    
    - reimplement LayerScreenshot such that its
      BufferQueue is directly used as the destination
      of the screenshot. LayerScreenshot is now a thin
      wrapper around Layer
    
    Bug: 6940974
    
    Change-Id: I69a2096b44b91acbb99eba16f83a9c78d94e0d10
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: Ibed34175ae273608393aaa5f0a7df207dc40d709
    remove access ANDROID_VIEW_SURFACE_JNI_ID
    
    Change-Id: I0ef474ed9be2cd26fa520ef871ffcf21a25e4994
    get rid of Surface identity and token
    
    we use the IBinder instead.
    
    Change-Id: I4aa0b58869ba43f19980013620051e5a261b062d
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    SurfaceFlinger: add support for secure displays
    
    This change adds support for displays that are not allowed to display surfaces
    with the eSecure flag set.  All non-virtual displays are considered secure,
    while virtual displays have their secure-ness specified at creation time.
    
    Bug: 7368436
    Change-Id: I81ad535d2d1e5a7ff78269017e85b111f0098500
    SurfaceFlinger: add animation transactions
    
    This change adds a transaction flag for WindowManager to indicate that a
    transaction is being used to animate windows around the screen.  SurfaceFlinger
    will not allow more than one of these transactions to be outstanding at a time
    to prevent the animation "frames" from being dropped.
    
    Bug: 7353840
    Change-Id: I6488a6e0e1ed13d27356d2203c9dc766dc6b1759
    SurfaceFlinger: add animation transactions
    
    This change adds a transaction flag for WindowManager to indicate that a
    transaction is being used to animate windows around the screen.  SurfaceFlinger
    will not allow more than one of these transactions to be outstanding at a time
    to prevent the animation "frames" from being dropped.
    
    Bug: 7353840
    Change-Id: I6488a6e0e1ed13d27356d2203c9dc766dc6b1759
    Add blankDisplay/unblankDisplay to SurfaceComposerClient.
    
    Bug: 7309812
    Change-Id: Ia401d642094a46c62f0d26c65da1d11341e203a1
    Revert "Compatibility work around for bad graphics driver dependency."
    
    This reverts commit a50b51c03aca449920fc8581a738032a7bce7150
    
    Change-Id: Ibdcd776a7f241dbb2475403ea04f939249774c41
    Revert "Compatibility work around for bad graphics driver dependency."
    
    This reverts commit a50b51c03aca449920fc8581a738032a7bce7150
    
    Change-Id: Ibdcd776a7f241dbb2475403ea04f939249774c41
    Plumb display name into SurfaceFlinger
    
    The Surface createDisplay() call takes a display name for debugging.
    This change carries it through SurfaceFlinger and displays it in
    the "dumpsys SurfaceFlinger" output.
    
    Bug 7058158
    
    Change-Id: I79f3474a8656ff1beb7b478e0dbf2c5de666118a
    display projection API now has a single function instead of 3
    
    Change-Id: I9bf46d372b77d547486d4bbe6f1953ec8c65e98f
    Revert "A vendor ril depends on a native screen shot code."
    
    This reverts commit 9b5782baf0a8a2d7afc7129453beb5df7abe7650.
    
    A new ril for toro, hack no longer needed.
    A vendor ril depends on a native screen shot code.
    
    Add a temporary shim until the vendor fixes the ril.
    
    Bug: 7073467
    Change-Id: Ia95a58bd90677c03406c988d1c29ae785f8662f2
    A vendor ril depends on a native screen shot code.
    
    Add a temporary shim until the vendor fixes the ril.
    
    Bug: 7073467
    Change-Id: Ia95a58bd90677c03406c988d1c29ae785f8662f2
    Compatibility work around for bad graphics driver dependency.
    
    This is a compatibility shim for one product whose drivers
    are depending on SurfaceComposerClient::getDisplayInfo(
    int, DisplayInfo*) when it really shouldn't.
    
    Revert this patch when the problem has been resolved.
    
    Bug: 7065398
    Change-Id: I6542691b81fd1b1e1d79500a62e82d40a3d51db7
    Forward compatibility patch.
    
    Change-Id: I8e8af0c6035aaac5e5097f1cfb198250475627ee
    Remove unused "layer" argument from show().
    
    Change-Id: I8944a9f4a27c330b11e5e837c69b88c8f84145ba
    Banish DisplayID from the SurfaceFlinger API.
    
    Use only display tokens in the API to refer to new displays.
    
    Don't require the caller to specify the display when creating
    a surface (since in general a surface could be shown on
    any display).
    
    This is intended to be a minimum change just to update the API.
    Note that SurfaceFlinger still uses DisplayID in a few places
    internally that might cause some features not to work properly
    when there are multiple displays (LayerScreenshot, for example).
    
    Change-Id: I3d91eec2da406eefd97bcd53655d403ad865a7e6
    make multi-display more real
    
    - displays are represented by a binder on the client side
    - c++ clients can now create and modify displays
    
    Change-Id: I203ea5b4beae0819d742ec5171c27568f4e8354b
    get rid of the shared-memory control block
    
    Change-Id: If814060aca1d2ff2619d4adcd57296983d207f7f
    add a layerStack attribute to Layers.
    
    this attribute can be set through a regular transaction using
    SurfaceComposerClient (just like any other attribute, eg: position or size)
    
    Change-Id: I701a47c677ea6442ca713728a93335328cd2b172
    Remove freeze(), unfreeze() and setFreezeTint().
    
    This is all dead code.
    
    Change-Id: I646673aac793a6ec45021c370a2450f0ea4fbcce
    Remove freezeDisplay(), which is no-op.
    
    Change-Id: I2b70249a1545636fd6d98b58057b22f9529cad21
    SurfaceFlinger: add a crop to the layer state
    
    This change adds a crop rectangle specified in window coordinates to the layer
    state.  The all window pixels outside this crop rectangle are treated as though
    they were fully transparent.  This change also adds the plumbing necessary for
    WindowManager to set that crop.
    
    Change-Id: I582bc445dc8c97d4c943d4db8d582a6ef5a66081
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    split ComposerService out of SurfaceComposerClient.h
    
    Change-Id: I1eb691f7ca263d5895d871ab675bb5826e0323c6
    SurfaceFlinger: make sync transactions explicit
    
    This change enables a layer or orientation update transaction sent to
    SurfaceFlinger to explicitly request a synchronous transaction.
    
    Change-Id: I97cbba610c13679849f66114b216fa6dbf12f2a9
    SurfaceFlinger: update orientation via transactions
    
    This change merges the ISurfaceComposer::setOrientation functionality
    into ISurfaceComposer::setTransactionState.  It enables the window
    manager to atomically update both the display orientation and the
    position and size of the windows in a single transaction with
    SurfaceFlinger.
    
    Bug: 5439574
    Change-Id: I18a8ccc564d7d760ef8afb2d015ccdb7a7963900
    fix Surface positions are not floats
    
    Added Surface.setPosition(float, float) which allows to set a surface's
    position in float.
    
    Bug: 5239859
    Change-Id: I903aef4ad5b5999142202fb8ea30fe216d805711
    SF transactions are now O(1) wrt IPC instead of O(N).
    
    Change-Id: I57669852cbf6aabae244ea86940a08a5a27ffc43
    unify SurfaceTexture and Surface
    
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    Add SurfaceTexture logging
    fix onFrameAvailable
    Get rid of the "pid" parameter from createSurface
    
    Change-Id: I28635e3f803e6abe965d79998e305f54a202465d
    [3258939] Need snapshot to limit which layers are included
    
    Change-Id: Id7351a0e3f53dde99b291cffba553d89fd4d7ca9
    refactored screenshot code
    
    the core screenshot function now can capture the screen at any lower resolution
    performing bilinear filtering.
    
    we also now have some client code to interface with the screenshot service.
    
    it's now possible to request a screenshot at a lower resolution.
    
    Change-Id: I33689bba98507ab928d0898b21596d0d2fe4b953
    refactored screenshot code
    
    the core screenshot function now can capture the screen at any lower resolution
    performing bilinear filtering.
    
    we also now have some client code to interface with the screenshot service.
    
    it's now possible to request a screenshot at a lower resolution.
    
    Change-Id: I5a3b0e431421800e3aad601d9af8f94adffbc71f
    split surface management from surface's buffers management
    
    Change-Id: If3c5655d1231f8f0c49ba68f972b1b20c93b3f87
    more clean-up in preparation of bigger changes
    
    the most important change here is the renaming of
    ISurfaceFlingerClient to ISurfaceComposerClient
    
    Change-Id: I94e18b0417f50e06f21377446639c61f65f959b3
    more clean-up of Surfaceflinger's client management
    
    SurfaceComposerClient now only exist on the WindowManager side,
    the client side uses the new SurfaceClient class, which only
    exposes what a client needs.
    
    also instead of keeping mappings from IBinder to SurfaceComposerClients
    we have a SurfaceClient per Surface (referring to the same IBinder), this
    is made possible by the fact that SurfaceClient is very light.
    
    Change-Id: I6a1f7015424f07871632a25ed6a502c55abfcfa6
    fix [2712278] The preview buffer left some black borders in left and bottom edges
    
    we were incorrectly flagging push_buffer surfaces as invalid
    
    Change-Id: I4dfd4ffbbe8a71f7e23e835db8d71966416c29bb
    Added a name to Surface created by SurfaceFlinger
    
    Updated the window manager to use this new facility.
    Surfaces name are now printed by "dumpsys".
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    fix [2170319] gmail bulk operation checkbox latency on passion
    
    This also fixes [2152536] ANR in browser
    
    When SF is enqueuing buffers faster than SF dequeues them.
    The update flag in SF is not counted and under some situations SF will only
    dequeue the first buffer. The state at this point is not technically
    corrupted, it's valid, but just delayed by one buffer.
    
    In the case of the Browser ANR, because the last enqueued buffer was delayed
    the resizing of the current buffer couldn't happen.
    
    The system would always fall back onto its feet if anything -else- in
    tried to draw, because the "late" buffer would be picked up then.
    fix [2132563] stuck in boot animation (framebuffer_device_open: Failed to create flip chain)
    fix [2068105] implement queueBuffer/lockBuffer/dequeueBuffer properly
    
    Rewrote SurfaceFlinger's buffer management from the ground-up.
    The design now support an arbitrary number of buffers per surface, however the current implementation is limited to four. Currently only 2 buffers are used in practice.
    
    The main new feature is to be able to dequeue all buffers at once (very important when there are only two).
    
    A client can dequeue all buffers until there are none available, it can lock all buffers except the last one that is used for composition. The client will block then, until a new buffer is enqueued.
    
    The current implementation requires that buffers are locked in the same order they are dequeued and enqueued in the same order they are locked. Only one buffer can be locked at a time.
    
    eg. Allowed sequence:   DQ, DQ, LOCK, Q, LOCK, Q
    eg. Forbidden sequence: DQ, DQ, LOCK, LOCK, Q, Q
    get rid of references to MemoryDealer in SurfaceFlinger
    more splitting of Surface/SurfaceControl. Surface.java is now implemented in terms of Surface and SurfaceControl.
    
    The WindowManager side of Surface.java holds a SurfaceControl, while the client-side holds a Surface. When the client is in the system process, Surface.java holds both (which is a problem we'll try to fix later).
    split Surface.cpp into Surface and SurfaceControl
    
    SurfaceControl is used for controling the geometry of the surface (for the WM), while Surface is used to access the buffers (for SF's clients).
    SurfaceFlingerClient now uses the SurfaceID instead of Surface*.
    
    Currently Surface still has the SurfaceControl API and is implemented by calling into SurfaceControl.
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    AI 143320: am: CL 143171 am: CL 142873 fix [1732012] Only show screen rotation animation when triggered by sensor
      Original author: mathias
      Merged from: //branches/cupcake/...
      Original author: android-build
      Merged from: //branches/donutburger/...
    
    Automated import of CL 143320
    AI 143171: am: CL 142873 fix [1732012] Only show screen rotation animation when triggered by sensor
      Original author: mathias
      Merged from: //branches/cupcake/...
    
    Automated import of CL 143171
    Automated import from //branches/cupcake/...@142873,142873
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Initial Contribution
    Turn on support for async cursor update in surfaceflinger.
    
    If available, surfaceflinger will use the hwc setCursorPositionAsync()
    api to change the position of supported cursor layers outside of
    the usual prepare/set loop.
    
    Change-Id: Ib3fc5c0c390b3489ddbba202379840a1d2748917
    Adding render stats APIs to UiAutomation (framework native).
    
    bug:12927198
    
    Change-Id: Ibb1c07f7d89e11281e5c1f27f412a29ac6f9c4ab
    Revert "Implement video plane layer"
    
    This reverts commit f837c93a1b392dbc4f7099d0c4fb723e32ca438e.
    
    Change-Id: I6a1aa9ad0aca023267dc53d19c950b1535123ca7
    Implement video plane layer
    
    Binding with video source will follow.
    
    Change-Id: Ic14e9757f5b61f4055cbeda47c1bafae0a621abb
    get rid of ISurface
    
    ISurface was only used to get the IGraphicBufferProducer from
    a Layer. It's now replaced by a BBinder subclass / IBinder and
    is only used as a handle to the surface, to both refer to it
    and manage its life-time.
    
    Also cleaned-up a bit the ISurfaceComposer interface and
    "create layer" code path.
    
    Change-Id: I68d0e02d57b862cffb31d5168c3bc10cea0906eb
    Remove support for ScreenshotLayer
    
    Change-Id: I5b571a4cf3faa77d2c4aca916fa4bd00a1065bb9
    get rid of Surface identity and token
    
    we use the IBinder instead.
    
    Change-Id: I4aa0b58869ba43f19980013620051e5a261b062d
    Eradicate DisplayID.
    
    DisplayDevices are now keyed of the wp<IBinder> the client uses.
    DisplayID has now become DisplayType which is just used to identify
    physical displays (as opposed to virtual displays such as wifi displays).
    
    Change-Id: I0c5968f2c902dcd699a7e0afacf833ff070c12ea
    Banish DisplayID from the SurfaceFlinger API.
    
    Use only display tokens in the API to refer to new displays.
    
    Don't require the caller to specify the display when creating
    a surface (since in general a surface could be shown on
    any display).
    
    This is intended to be a minimum change just to update the API.
    Note that SurfaceFlinger still uses DisplayID in a few places
    internally that might cause some features not to work properly
    when there are multiple displays (LayerScreenshot, for example).
    
    Change-Id: I3d91eec2da406eefd97bcd53655d403ad865a7e6
    libgui includes refactoring
    
    Change-Id: I1d24ec17f5003ec2abab5f7472daaff4cc4cc2d3
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    clean-up. get rid ofunused code and members in Surface[Control].cpp
    
    Change-Id: Ia7790ae28af2c2ac99eae01c2c5044ace4a490a4
    SF transactions are now O(1) wrt IPC instead of O(N).
    
    Change-Id: I57669852cbf6aabae244ea86940a08a5a27ffc43
    unify SurfaceTexture and Surface
    
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    Add SurfaceTexture logging
    fix onFrameAvailable
    Get rid of the "pid" parameter from createSurface
    
    Change-Id: I28635e3f803e6abe965d79998e305f54a202465d
    split surface management from surface's buffers management
    
    Change-Id: If3c5655d1231f8f0c49ba68f972b1b20c93b3f87
    more clean-up in preparation of bigger changes
    
    the most important change here is the renaming of
    ISurfaceFlingerClient to ISurfaceComposerClient
    
    Change-Id: I94e18b0417f50e06f21377446639c61f65f959b3
    added setCrop() to android_native_window_t
    
    hooked up the new method up to Surface.cpp
    the actual crop is not implemented in SF yet
    
    Change-Id: Ic6e313c98fd880f127a051a0ccc71808bd689751
    Added a name to Surface created by SurfaceFlinger
    
    Updated the window manager to use this new facility.
    Surfaces name are now printed by "dumpsys".
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    fix a bug that caused the PixelFormat viewed by Surface to be wrong.
    
    what happened is that the efective pixel format is calculated by SF but Surface nevew had access to it directly.
    in particular this caused query(FORMAT) to return the requested format instead of the effective format.
    get rid of references to MemoryDealer in SurfaceFlinger
    move libbinder's header files under includes/binder
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    SensorManager reconnects to sensor service when the later dies
    
    if system process ever restarted, processes using a SensorManager
    would loose the ability to use it, resulting to a crash.
    we now listen for sensor service death and reconnected if necessary.
    
    Bug: 5445240
    Change-Id: Ia47f8b26cdcecb729fa22bf11d55e10fcaef8cfc
    new SensorService
    
    remove old sensor service and implement SensorManager
    on top of the new (native) SensorManger API.
    
    Change-Id: Iddb77d498755da3e11646473a44d651f12f40281
    first step at implementing the native sensor support
    
    in this commit:
    - implemented the C stub
    - implemented the binder interfaces involved
    - implemented most of the C++ client side
    
    missing:
    - SensorManager cannot connect to the SensorServer yet
    (because there is no SensorServer yet)
    
    Change-Id: I75010cbeef31c98d6fa62fd5d388dcef87c2636b
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    BufferQueue: release mutex while allocating. DO NOT MERGE
    
    BufferQueueProducer::allocateBuffers used to keep the BufferQueueCore
    mutex while doing the buffer allocation, which would cause the consumer
    (which also needs the mutex) to block if the allocation takes a long
    time.
    Instead, release the mutex while doing the allocation, and grab it again
    before filling the slots. Keep a bool state and a condvar to prevent
    other producers from trying to allocate the slots while the mutex is
    released.
    
    Bug: 11792166
    
    Change-Id: I4ab1319995ef892be2beba892f1fdbf50ce0416d
    (cherry picked from commit ea96044470a29133321c681080870b9d31f81a19)
    BufferQueue: Add producer buffer-released callback
    
    Add a callback to the producer side, onBufferReleased, which will be
    called every time the consumer releases a buffer back to the
    BufferQueue. This will enable a buffer stream splitter to work
    autonomously without having to block on dequeueBuffer.
    
    The binder object used for the callback replaces the generic IBinder
    token that was passed into IGraphicBufferProducer::connect to detect
    the death of the producer. If a producer does not wish to listen for
    buffer release events, it can pass in an instance of the
    DummyProducerListener class defined in IProducerListener.h, if it even
    cares about death events (BufferQueue doesn't enforce the token being
    non-NULL, though perhaps we should).
    
    Change-Id: I23935760673524abeafea2b58dccc3583b368710
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    Change BufferQueue into producer/consumer wrapper
    
    Now that BufferQueue has been split into core + producer + consumer,
    rewrite BufferQueue to be a thin layer over a producer and consumer
    interface. Eventually, this layer will be deprecated in favor of
    only using either the producer or consumer interface, as applicable.
    
    Change-Id: I340ae5f5b633b244fb594615ff52ba50b9e2f7e4
    Split BufferQueue into core + producer + consumer
    
    Change-Id: Idc39f1e511d68ce4f02202d35425a419bc0bcd92
    BufferQueue: Increase max slots from 32 to 64
    
    Increases NUM_BUFFER_SLOTS from 32 to 64 and changes the mask
    returned by IGBC::getReleasedBuffers from 32 to 64 bits.
    
    Bug: 13174352
    Change-Id: Ie8ef0853916cfb91f83881c7241886bb1950f01a
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    BufferQueue: Allow detaching/reattaching buffers
    
    Adds detachBuffer and attachBuffer calls to both the producer and
    consumer sides of BufferQueue. Buffers may be detached while dequeued
    by the producer or acquired by the consumer, and when attached, enter
    the dequeued and acquired states, respectively.
    
    Bug: 13173343
    Change-Id: Ic152692b0a94d99e0135b9bfa62747dab2a54220
    Change BufferQueue into producer/consumer wrapper
    
    Now that BufferQueue has been split into core + producer + consumer,
    rewrite BufferQueue to be a thin layer over a producer and consumer
    interface. Eventually, this layer will be deprecated in favor of
    only using either the producer or consumer interface, as applicable.
    
    Change-Id: I340ae5f5b633b244fb594615ff52ba50b9e2f7e4
    Split BufferQueue into core + producer + consumer
    
    Change-Id: Idc39f1e511d68ce4f02202d35425a419bc0bcd92
    Adding render stats APIs to UiAutomation (framework native).
    
    bug:12927198
    
    Change-Id: Ibb1c07f7d89e11281e5c1f27f412a29ac6f9c4ab
    Revert "Revert "Change SurfaceControl setPosition to take floats""
    
    This reverts commit bbb57f3331c7182399ed82e9c4f93a965677dde3
    
    Change-Id: Ib8f039f530d6b8175b5205c6c0008b135d4001a2
    get rid of ISurface
    
    ISurface was only used to get the IGraphicBufferProducer from
    a Layer. It's now replaced by a BBinder subclass / IBinder and
    is only used as a handle to the surface, to both refer to it
    and manage its life-time.
    
    Also cleaned-up a bit the ISurfaceComposer interface and
    "create layer" code path.
    
    Change-Id: I68d0e02d57b862cffb31d5168c3bc10cea0906eb
    Revert "Change SurfaceControl setPosition to take floats"
    
    Temporary, to fix weekend build, until we get Nvidia code drop.
    
    This reverts commit 9a867a8798fa6ea21f6341db31e38ea64fde6c83
    
    DO NOT MERGE
    
    Change-Id: I7b5dbc4db46ef3d97dc8598057d5487d6971178b
    Revert "Change SurfaceControl setPosition to take floats"
    
    Temporary, to fix weekend build, until we get Nvidia code drop.
    
    This reverts commit 9a867a8798fa6ea21f6341db31e38ea64fde6c83
    
    DO NOT MERGE
    
    Change-Id: I7b5dbc4db46ef3d97dc8598057d5487d6971178b
    Revert "Change SurfaceControl setPosition to take floats"
    
    Temporary, to fix weekend build, until we get Nvidia code drop.
    
    This reverts commit 9a867a8798fa6ea21f6341db31e38ea64fde6c83
    
    Change-Id: I7b5dbc4db46ef3d97dc8598057d5487d6971178b
    Change SurfaceControl setPosition to take floats
    
    Bug: 8153162
    Change-Id: If3c4b7a3e124ace25999eb9a569dc9a806a1fbc2
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: Ibed34175ae273608393aaa5f0a7df207dc40d709
    remove access ANDROID_VIEW_SURFACE_JNI_ID
    
    Change-Id: I0ef474ed9be2cd26fa520ef871ffcf21a25e4994
    get rid of Surface identity and token
    
    we use the IBinder instead.
    
    Change-Id: I4aa0b58869ba43f19980013620051e5a261b062d
    Add some comments.
    
    Also, minor tweak to SurfaceTextureLayer.
    
    Change-Id: If616d5ee4e8226dd0e16c5dbb0e0f80db553110e
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    Added some comments
    
    Added a quick intro section at the top of the class.  Also noted
    the proposed new name for the class.
    
    Change-Id: I3f79663527544aa4e910db0e5a1374b54d16ba2f
    Remove unused "layer" argument from show().
    
    Change-Id: I8944a9f4a27c330b11e5e837c69b88c8f84145ba
    Banish DisplayID from the SurfaceFlinger API.
    
    Use only display tokens in the API to refer to new displays.
    
    Don't require the caller to specify the display when creating
    a surface (since in general a surface could be shown on
    any display).
    
    This is intended to be a minimum change just to update the API.
    Note that SurfaceFlinger still uses DisplayID in a few places
    internally that might cause some features not to work properly
    when there are multiple displays (LayerScreenshot, for example).
    
    Change-Id: I3d91eec2da406eefd97bcd53655d403ad865a7e6
    Remove freeze(), unfreeze() and setFreezeTint().
    
    This is all dead code.
    
    Change-Id: I646673aac793a6ec45021c370a2450f0ea4fbcce
    SurfaceFlinger: add a crop to the layer state
    
    This change adds a crop rectangle specified in window coordinates to the layer
    state.  The all window pixels outside this crop rectangle are treated as though
    they were fully transparent.  This change also adds the plumbing necessary for
    WindowManager to set that crop.
    
    Change-Id: I582bc445dc8c97d4c943d4db8d582a6ef5a66081
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    remove dependency on android_native{s_priv|buffer}.h
    
    Change-Id: Ie4b95f7061c240f37c504414259f92d72c4ffc89
    Add support for creating a Surface from a a SurfaceTexture.
    
    The Surface is already using SurfaceTexture internally and it is parcelable. This
    is intended to replace and phase out ParcelSurfaceTexture in favor of creating a
    new Surface.java object from an existing SurfaceTexture.
    
    Change-Id: I8e2dd86614523da6abed6403e1d705a68fa19fdf
    clean-up. get rid ofunused code and members in Surface[Control].cpp
    
    Change-Id: Ia7790ae28af2c2ac99eae01c2c5044ace4a490a4
    move lock/unlock implementaion outside of Surface into SurfaceTextureClient
    
    This makes ANativeWindow_lock/ANativeWindow_unlockAndPost work
    with ANativeWindows implemented by Surface and SurfaceTextureClient.
    
    Also, Surface now inherits directly from SurfaceTextureClient.
    
    Bug: 5003724
    Change-Id: I9f285877c7bae9a262e9a7af91c2bae78804b2ef
    Add method to create a ParcelSurfaceTexture from android.view.Surface.
    
    Change-Id: I05e343ab7e327478f60322af9373574b70c148f5
    unify SurfaceTexture and Surface
    
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    Add SurfaceTexture logging
    fix onFrameAvailable
    frameworks/base: android_native_buffer_t -> ANativeWindowBuffer
    
    Change-Id: Idc2eabaa805bb6d308ebb315872623f28d428417
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    frameworks/base: make the ANativeWindow query() method const
    
    query() does not modify the object's data, so it needs to be a const method
    
    Change-Id: I67c40a3c865461e6f1cc2193fd2d74286ff6ac8f
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    remove more unused references to ISurface
    
    Change-Id: I2201f1ca2bb8f203a081d94a0134f798778dfbef
    Add support for timestamps into SurfaceTexture.
    
    API addition: The timestamps are represented as nanoseconds from some
    arbitrary time point. Like the SurfaceTexture transform matrix, the
    timestamp retrieved by getTimestamp is for the last frame sent to the
    GL texture using updateTexImage().
    
    Camera HAL change: Expect vendors to set these timestamps using
    native_window_set_buffers_timestamp().  For now, they are
    autogenerated by SurfaceTextureClient if set_buffers_timestamp() is
    never called, but such timing is likely not accurate enough to pass a
    CTS test.
    
    bug:3300707
    
    Change-Id: Ife131a0c2a826ac27342e11b8a6c42ff49e1bea7
    Add the MIN_UNDEQUEUED_BUFFERS query to ANW.
    
    This change adds a new query to ANativeWindow for getting the minimum
    number of buffers that must be left un-dequeued during the steady-state
    operation of the ANativeWindow.
    
    Change-Id: Ie8c461fc26b02ecde02ddb4f95bf763662cf1551
    Related-Bug: 3356050
    minor clean-up. SurfaceFlinger doesn't need libpixelflinger.so. (DO NOT MERGE)
    
    Change-Id: I1ddbbbec4fa5b2521ef3787bc28efe1bc90d0060
    integrate videoeditor preview player.
    
    Change-Id: I83084f494605c8e6f4d198afa8c36f9e29579667
    Fix error reporting in Surface::cancelBuffer()
    
    when we validate the surface there, most errors are in fact allowed
    because it is legal to cancel a buffer after a surface has been
    destroyed (for instance). in that case make sure to not log
    error messages as they are very confusing.
    
    Change-Id: Iecdfbaf6d9ee5da54d56cd7ea7a0d430c30934b0
    minor clean-up. SurfaceFlinger doesn't need libpixelflinger.so.
    
    Change-Id: I3bdca74351c8e480a05084bc412a96c5f685221d
    fix [2835280] Add support for cancelling buffers to ANativeWindow
    
    There is a new ANativeWindow::cancelBuffer() API that can be used to
    cancel any dequeued buffer, BEFORE it's been enqueued. The buffer is
    returned to the list of availlable buffers. dequeue and cancel are not
    mutually thread safe, they must be called from the same thread or
    external synchronization must be used.
    
    Change-Id: I86cc7985bace8b6a93ad2c75d2bef5c3c2cb4d61
    fix [2931513] Add support for setting the orientation of an ANativeWindow
    
    Also implement support for cropping.
    
    Change-Id: Iba5888dd242bf2feaac9e9ce26e404c1f404c280
    Change the framework to use the new camera preview path.
    
    This change makes the camera HAL interface take an ANativeWindow interface from
    which all the camera preview buffers will be allocated.  The framework code
    running in application processes now passes a Surface object rather than an
    ISurface to the camera server via Binder when setting the preview surface.  The
    camera server then forwards that Surface object (which implements the
    ANativeWindow interface) to the camera HAL, which uses it to communicate with
    SurfaceFlinger to allocate the camera preview buffers.
    
    Change-Id: Ie438f721559cd7de5e4f848a26d96360dda07b5f
    Squashed commit of the following:
    
    commit 35cc68814a9537c31fde146e171e7b0bbdfe211e
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Aug 16 08:48:42 2010 -0700
    
        Only enable support for yuv to yuv conversion on passion, where it's available, use the slower yuv->rgb565 path everywhere else.
    
    commit d8ac5a8814103e60d11d2acf61997fc31a1dc58d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 13 13:56:44 2010 -0700
    
        The software renderer takes over all rendering, converting from yuv to yuv if possible and rgb565 otherwise.
    
    commit 684972074b74318bdcb826ed9b5b0864d2d2e273
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 13 09:34:35 2010 -0700
    
        A first shot at supporting the new rendering APIs.
    
    Change-Id: Iea9b32856da46950501f1a700f616b5feac710fd
    Re-use existing Surface objects when reading them from parcels.
    
    This change adds a process-global cache of previously deserialized Surface
    objects so that if a Surface object wrapping the same ISurface gets received
    again the same Surface can be used.  This is important because the 'tail'
    pointer in the SharedBufferClient is stored only on the client side, and needs
    to be the same for all the Surface objects wrapping an ISurface instance.  This
    solves the problem by making there only be one Surface object wrapping an
    ISurface per process.
    
    Change-Id: I4bf0b8787885c56277622fca053022d2bb638902
    Introduce official public NativeWindow type.
    
    Not yet hooked up to anything in the NDK, but requires renaming
    the existing android_native_window_t type everywhere.
    
    Change-Id: Iffee6ea39c93b8b34e20fb69e4d2c7c837e5ea2e
    allow re-targetting of surfaces
    
    Surfaces can now be parcelized and sent to remote
    processes. When a surface crosses a process
    boundary, it looses its connection with the
    current process and gets attached to the new one.
    
    Change-Id: I39c7b055bcd3ea1162ef2718d3d4b866bf7c81c0
    optimize Surface.readFromParcel()
    
    this is called for each relayout() and used to create a full Surface (cpp)
    which in turn did some heavy work (including an IPC with surfaceflinger),
    most of the time to destroy it immediatelly when the returned surface
    (the one in the parcel) was the same.
    
    we now more intelligentely read from the parcel and construct the new
    object only if needed.
    
    Change-Id: Idfd40d9ac96ffc6d4ae5fd99bcc0773e131e2267
    split surface management from surface's buffers management
    
    Change-Id: If3c5655d1231f8f0c49ba68f972b1b20c93b3f87
    more clean-up in preparation of bigger changes
    
    the most important change here is the renaming of
    ISurfaceFlingerClient to ISurfaceComposerClient
    
    Change-Id: I94e18b0417f50e06f21377446639c61f65f959b3
    more clean-up of Surfaceflinger's client management
    
    SurfaceComposerClient now only exist on the WindowManager side,
    the client side uses the new SurfaceClient class, which only
    exposes what a client needs.
    
    also instead of keeping mappings from IBinder to SurfaceComposerClients
    we have a SurfaceClient per Surface (referring to the same IBinder), this
    is made possible by the fact that SurfaceClient is very light.
    
    Change-Id: I6a1f7015424f07871632a25ed6a502c55abfcfa6
    fix [2712278] The preview buffer left some black borders in left and bottom edges
    
    we were incorrectly flagging push_buffer surfaces as invalid
    
    Change-Id: I4dfd4ffbbe8a71f7e23e835db8d71966416c29bb
    added the notion of fixed-size buffers
    
    the new native_window_set_buffers_geometry allows
    to specify a size and format for all buffers to be
    dequeued. the buffer will be scalled to the window's
    size.
    
    Change-Id: I2c378b85c88d29cdd827a5f319d5c704d79ba381
    added native_window_set_buffer_count()
    
    this method can be used to change the number of buffers
    associated to a native window. the default is two.
    
    Change-Id: I608b959e6b29d77f95edb23c31dc9b099a758f2f
    SharedBufferStack now can grow up to 16 buffers.
    
    there is a new resize() api, which currently only allows growing.
    
    Change-Id: Ia37b81b73be466d2491ffed7f3a23cd8e113c6fe
    cleanup. waitForCondition() now uses polymorphsim instead of templtes
    
    the reason for the above change is that waitForCondition() had become
    large over time, mainly to handle error cases, using inlines to
    evaluate the condition doesn't buys us much anymore while it increases
    code size.
    
    Change-Id: I2595d850832628954b900ab8bb1796c863447bc7
    better fix for [2420565] Surface.lockCanvas() updates the dirty region too often
    
    Change-Id: I83438b40effd21538f1c74396dc665254b9d5ab6
    added setCrop() to android_native_window_t
    
    hooked up the new method up to Surface.cpp
    the actual crop is not implemented in SF yet
    
    Change-Id: Ic6e313c98fd880f127a051a0ccc71808bd689751
    don't hardcode "mSurface" throughout our source code
    
    this is used in a few places to get access to the android.view.Surface
    native surface. use a macro instead. Also rename the field to mNativeSurface.
    
    Change-Id: I1c6dea14abd6b8b1392c7f97b304115999355094
    implement connect/disconnect in our native_window_t implementations
    
    the framebuffer implementation doesn't do anything special with this
    but the surfaceflinger implementation makes sure the surface is not used
    by two APIs simultaneously.
    
    Change-Id: Id4ca8ef7093d68846abc2ac814327cc40a64b66b
    split libsurfaceflinger_client and libcamera_client out of libui
    android-2.1_r1 snapshot
    fix some aspects of [2258746] native crash in launcher2
    
    Surface::validate() could sometimes dereference a null pointer before checking it wasn't null.
    This will prevent the application to crash when given bad parameters or used incorrectly.
    However, the bug above probably has another cause.
    eclair snapshot
    fix [2167050] glTexImage2D code path buggy in SurfaceFlinger
    
    When EGLImage extension is not available, SurfaceFlinger will fallback to using
    glTexImage2D and glTexSubImage2D instead, which requires 50% more memory and an
    extra copy. However this code path has never been exercised and had some bugs
    which this patch fix.
    
    Mainly the scale factor wasn't computed right when falling back on glDrawElements.
    We also fallback to this mode of operation if a buffer doesn't have the adequate
    usage bits for EGLImage usage.
    
    This changes only code that is currently not executed. Some refactoring was needed to
    keep the change clean. This doesn't change anything functionaly.
    fix [2122448] android_native_window_t::setUsage() only reallocates the first buffer
    
    Take 2. We needed to check that the usage flags are "good enough" as opposed to "the same".
    
    This reverts commit 8f17a762fe9e9f31e4e86cb60ff2bfb6b10fdee6.
    Revert "fix [2122448] android_native_window_t::setUsage() only reallocates the first buffer"
    
    This reverts commit 486aa963b63e20b7910e1004cebb4f0afabbd80f.
    fix [2122448] android_native_window_t::setUsage() only reallocates the first buffer
    fix [2068105] implement queueBuffer/lockBuffer/dequeueBuffer properly
    
    Rewrote SurfaceFlinger's buffer management from the ground-up.
    The design now support an arbitrary number of buffers per surface, however the current implementation is limited to four. Currently only 2 buffers are used in practice.
    
    The main new feature is to be able to dequeue all buffers at once (very important when there are only two).
    
    A client can dequeue all buffers until there are none available, it can lock all buffers except the last one that is used for composition. The client will block then, until a new buffer is enqueued.
    
    The current implementation requires that buffers are locked in the same order they are dequeued and enqueued in the same order they are locked. Only one buffer can be locked at a time.
    
    eg. Allowed sequence:   DQ, DQ, LOCK, Q, LOCK, Q
    eg. Forbidden sequence: DQ, DQ, LOCK, LOCK, Q, Q
    make sure to update a surface's usage bits when it changes, instead of only the first time.
    
    also fixed a few locking issues in Surface and commented how each member is protected.
    second take, hopefully this time it doesn't break one of the builds: "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    Revert "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    
    This reverts commit 8b76a0ac6fbf07254629ed1ea86af014d5abe050.
    SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything.
    
    This change makes SurfaceHolder.setType(GPU) obsolete (it's now ignored).
    Added an API to android_native_window_t to allow extending the functionality without ever breaking binary compatibility. This is used to implement the new set_usage() API. This API needs to be called by software renderers because the default is to use usage flags suitable for h/w.
    Expose a variation of the createRenderer API that works on a plain Surface.
    The IOMX interface now instantiates IOMXRenderers to hide the details of hardware accelerated blitting.
    fixed some issues with the software renderer when surfaces are made current.
    
    there was several issues:
    - when a surface was made non-current, the last frame wasn't shown and the buffer could stay locked
    - when a surface was made current the 2nd time, it would not dequeue a new buffer
    
    now, queue/dequeue are done when the surface is made current.
    
    for this to work, a new query() hook had to be added on android_native_window_t, it allows to retrieve some attributes of a window (currently only width and height).
    move opengl/include/EGL/android_natives.h to include/ui/egl/android_natives.h and don't include it from egl.h
    
    the android_native_ types are just forward declared in egl.h
    get rid of android_native_buffer_t::getHandle() and replace it with an handle field
    
    this abstraction was not necessary. things are easier now.
    removed the "bits" attribute from android_native_buffer_t.
    
    "bits" can never be trusted now that we need to call lock() on the handle to get the virtual address of the buffer.
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    cleanup, remove unused fields. Also make sure that we don't systematically allocate a Surface in Surface.java if only a SurfaceControl is needed (Common case).
    more splitting of Surface/SurfaceControl. Surface.java is now implemented in terms of Surface and SurfaceControl.
    
    The WindowManager side of Surface.java holds a SurfaceControl, while the client-side holds a Surface. When the client is in the system process, Surface.java holds both (which is a problem we'll try to fix later).
    split Surface.cpp into Surface and SurfaceControl
    
    SurfaceControl is used for controling the geometry of the surface (for the WM), while Surface is used to access the buffers (for SF's clients).
    SurfaceFlingerClient now uses the SurfaceID instead of Surface*.
    
    Currently Surface still has the SurfaceControl API and is implemented by calling into SurfaceControl.
    fix some issues with Surface's lifetime management.
    
    To deal with Java's lack of destructors and delayed garbage collection, we used to duplicate Surface.cpp objects in some case; this caused some issues because Surface is supposed to be reference-counted and unique.
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Surface reportingMode for Sensors.
    
    Change-Id: Iac8dd3408c90eb7d285a2e8043131fab3a7e58fa
    Surface maxDelay and isWakeUpSensor flag in Sensor.java.
    
    Change-Id: Idd1e9045190beeca87b086b272e8cbf0bed05bae
    Enable wakeup sensors.
    
    SensorService should hold a wakelock till the app reads events from a wakeup sensor. Currently drivers hold a wakelock with a
    timeout while delivering events from a wake up sensor like Significant Motion. This hack can be removed now.
    
    Bug: 9774884
    Change-Id: If3b5acb99c9cf0cd29012fcfa9d6b04c74133d01
    Add stringType and requiredPermission to sensors, effectively adding permission checking for sensors
    
    This reverts commit 4369a4ebd5ae7567e7075bc82830b83178099ed5.
    
    Change-Id: Ifa8619cc6873470a07a987763d818d78d4232610
    Revert "Add stringType and requiredPermission to sensors, effectively adding permission checking for sensors"
    
    This reverts commit c57a019e117117c5a76c772970b26cd0f5db8c6a.
    
    Change-Id: I3540565bc3e56a32cf3b176a29216cf68bb763b2
    (cherry picked from commit 4369a4ebd5ae7567e7075bc82830b83178099ed5)
    Revert "Add stringType and requiredPermission to sensors, effectively adding permission checking for sensors"
    
    This reverts commit c57a019e117117c5a76c772970b26cd0f5db8c6a.
    
    Change-Id: I3540565bc3e56a32cf3b176a29216cf68bb763b2
    Add stringType and requiredPermission to sensors, effectively adding permission checking for sensors
    
    Change-Id: If0f3dbdb5d2e9378e1fed4614baee4e750d0c850
    Sensor batching. Changes to the native code.
    
    Bug: 10109508
    Change-Id: I7333f3aac76125a8226a4c99c901fb904588df04
    Make Flattenable not virtual
    
    Fallout from the Flattenable change, update all its uses.
    
    Additionnaly, fix/tighten size checks when (un)flatten()ing
    things.
    
    Removed the assumption by some flattenables (e.g.: Fence)
    that the size passed to them would be exact (it can
    and will be larger in some cases)
    
    The code in Parcel is a bit complicated so that we don't
    have to expose the full implementation (and also to
    keep the code smallish).
    
    Change-Id: I0bf1c8aca2a3128491b4f45510bc46667e566dde
    improve [un]marshalling of non-binder objects
    
    this change introduces a new class LightFlattenable<> which is
    a protocol to flatten simple objects that don't require
    binders or file descriptors; the benefit of this protocol is that
    it doesn't require the objects to have a virtual table and give us
    a consitant way of doing this.
    
    we also introduce an implementation of this protocol for
    POD structures, LightFlattenablePod<>.
    
    Parcel has been update to handle this protocol automatically.
    
    Sensor, Rect, Point and Region now use this new protocol.
    
    Change-Id: Icb3ce7fa1d785249eb666f39c2129f2fc143ea4a
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    Added SensorManager.getMinDelay()
    
    Exposed the new "min delay" sensor property through native and
    java sensor apis. This allows the caller to know what is the
    maximum rate at which a sensor can return events, or, if a sensor
    works in "update" mode (events returned only when the value changes).
    
    Also augmented SensorManager.regusterSensorEvent() so that it can
    accept a value in microsecond in addition to the 4 constants already
    defined.
    
    Change-Id: If425e9979892666df8c989d7de3c362230fa19e0
    new SensorService
    
    remove old sensor service and implement SensorManager
    on top of the new (native) SensorManger API.
    
    Change-Id: Iddb77d498755da3e11646473a44d651f12f40281
    first step at implementing the native sensor support
    
    in this commit:
    - implemented the C stub
    - implemented the binder interfaces involved
    - implemented most of the C++ client side
    
    missing:
    - SensorManager cannot connect to the SensorServer yet
    (because there is no SensorServer yet)
    
    Change-Id: I75010cbeef31c98d6fa62fd5d388dcef87c2636b
    gui: CpuConsumer::lockNextBuffer change return code when too many bufs acquired
    
    - Return NOT_ENOUGH_DATA instead of INVALID_OPERATION when too many
      buffers have already been locked.
    - INVALID_OPERATION is nominally used when something irrecoverable happens,
      but in this case the client just needs to call unlockBuffer to go back into a
      good state.
    
    Bug: 10333400
    Change-Id: I3a034d77de85741429f832a90eedd670afa1dc94
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    always pass the BufferQueue explicitely to consumers
    
    Change-Id: I883b0a7b19d8e722f9ab714ba6f49e658b02ca86
    CpuConsumer: Add set buffer size and format functions.
    
    Add setDefaultBufferSize() and setDefaultBufferFormat(). ImageReader JNI need
    them.
    
    Bug: 9254294
    Change-Id: I7d2464d43b0ca73fbb834ed22cecbfbb30eef60c
    CpuConsumer: Remove CpuConsumer JNI ID.
    
    Not used anywhere, and it is pretty confusing to have it here.
    
    Bug: 9254294
    Change-Id: I12b761532918b546a0f56c74ccf81b2c119ccd66
    Add support for HAL_PIXEL_FORMAT_YCbCr_420_888
    
    - Add fields to CpuConsumer::LockedBuffer for new information
    - New lock methods for GraphicBuffer and GraphicBufferMapper for
      the format
    
    Bug: 8734880
    Change-Id: If31f82c62d64b6942cf4cc6e5715585c03273f12
    CpuConsumer: Properly track acquired buffers
    
    CpuConsumer cannot simply assume a slot's buffer is the same buffer
    between acquire and release, and therefore it could be possible for
    the same slot to get used for a second acquired buffer, if there's a
    producer disconnect in between. This would cause a problem when the
    first buffer is released by the consumer.
    
    Instead, use an independent list of acquired buffers to properly track
    their state.
    
    Bug: 8291751
    Change-Id: I0241ad8704e53d47318c7179b13daed8181b1fab
    CpuConsumer: Add optional asynchronous mode
    
    Bug: 8290146
    Bug: 8291751
    
    Change-Id: I9c8ac4bff38b0411e987a204e540d018dba6d0b4
    CpuConsumer: Don't unlock buffers on producer disconnect
    
    Bug: 8291751
    
    Change-Id: I062a3d34b41183d07fb6b9109cdb6bf0c0c75672
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    Add BufferItemConsumer, a simple BufferQueue consumer.
    
    BufferItemConsumer allows for acquiring BufferQueue's BufferItems,
    which contain all the data and metadata the BufferQueue has for a
    given graphics buffer.
    
    This consumer is useful when direct access to the native buffer_handles
    is needed by the client.
    
    Also includes a minor cleanup of CpuConsumer's use of 'virtual'.
    
    Bug: 6243944
    Change-Id: If7dc4192b15ac499555f1eda42a85140f2434795
    CpuConsumer: inherit from ConsumerBase
    
    Change-Id: I55178b1d673ffa0fbc6e63ef47642c64d4d03228
    Add a BufferQueue CPU consumer.
    
    Aimed for use cases where gralloc buffers need to be consumed by CPU
    users, such as camera image data streams.
    
    The CpuConsumer is a synchronous queue, which exposes raw pointers to
    the underlying graphics buffers to applications. Multiple buffers may
    be acquired at once, up to the limit set at time of construction.
    
    Change-Id: If1d99f12471438e95a69696e40685948778055fd
    SensorService performance improvements.
    
      i) Send ack for wake_up sensors on the socket connection instead of using Binder RPC.
      ii) Cache events per connection in case there are write failures. Compute cache size
          from FIFO counts of sensors.
     iii) Send FlushCompleteEvent only for apps that explicitly called flush().
    
    Change-Id: I018969736b7794b1b930529586f2294a03ee8667
    fix a few problems with BitTube
    
    BitTube used to send objects one at a time and didn't
    handle errors properly.
    
    We now send all the objects in one call, which means they
    have to be read as a single batch as well. This changes the
    BitTube API.
    
    Update SensorService to the new API.
    
    Also added an API to set the size of the send buffer.
    
    Bug: 10641596
    Change-Id: I77c70d35e351fdba0416fae4b7ca3b1d56272251
    use a socketpair instead of a pipe in BitTube
    
    Bug: 6252830
    Change-Id: Ia7a7b08409517214136261c05569dc5959a597ab
    Rename SensorChannel to BitTube
    first step at implementing the native sensor support
    
    in this commit:
    - implemented the C stub
    - implemented the binder interfaces involved
    - implemented most of the C++ client side
    
    missing:
    - SensorManager cannot connect to the SensorServer yet
    (because there is no SensorServer yet)
    
    Change-Id: I75010cbeef31c98d6fa62fd5d388dcef87c2636b
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    SurfaceFlinger: Move GraphicBufferAlloc to libgui
    
    This change moves the GraphicBufferAlloc class from SurfaceFlinger to libgui.
    
    Change-Id: Idf31d2004efa2651b60590733f73c4a7b831e8a9
    GraphicBufferAlloc class was declared twice
    
    this was confusing because the one in FramebufferSurface
    wasn't in fact being used
    
    Change-Id: Ied45aec20d804cfbe52440f9b2f2852a85c757cf
    don't actuate vsync hint when not needed
    
    Change-Id: I61c43dd76041816ab8cbe9aeaa55c11c1479ed03
    set vsync power hint
    
    Change-Id: I28c2faf9ff584df3e74392712971cbcf75eb9e98
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    GLConsumer: Fix eglTerminate/eglInit edge case.
    
    If a display is terminated and then initialized, we can't detect
    this using the display itself (it has the same value), but all
    EglImages still become invalid for the display. This patch detects
    this during image binding and forces creation of a new EglImage.
    
    Bug: 10430249
    Change-Id: I75101c50962f21263dca3ec6e241a2e5a3c23dad
    GLProducer: Reference count images rather than buffers.
    
    In most cases, EGLImages can be created one-to-one with graphic
    buffers in slots, but that was difficult due to some special
    cases:
    - ReleaseTexImage binds a custom 'unslotted' debug image.
    - When all slots are freed, we still need to hang on to one.
    
    These cases were handled by keeping an additional reference to
    the 'current' buffer (mCurrentTextureBuf), but we would create
    new images since we can't reference count them in the same way.
    This patch uses the same semantics, except that it reference
    counts the image (an EglImage wrapper class) rather than just
    buffer. The wrapper class also detects the cases when we need
    a new EGLImage, and only creates them in those rare cases.
    
    Change-Id: I2915761dbe49d2a9bda1f59e60f857543634636b
    GLConsumer: Allow creation in detached mode
    
    Adds a constructor that doesn't require a GLES texture name and sets
    up the GLConsumer in detached mode.
    
    Bug: 15616428
    Change-Id: Idc9ea2e59baa24bbd959da9fffe0fb71c0aa9818
    GLConsumer: Stop using default constructor params
    
    Removes the dependency on default constructor parameters for
    GLConsumer so that a different constructor prototype can safely be
    added.
    
    Change-Id: I0da924bbd4c141edbf305598c1be8bc575654680
    GLConsumer: start using EGL_ANDROID_image_crop
    
    This change makes GLConsumer use the EGL_ANDROID_image_crop extension when
    available on a device.  The crop rectangle is passed to the EGL driver when
    creating EGLImages, allowing the crop to be performed by the driver rather than
    using the texture transform matrix.
    
    Bug: 10897141
    Change-Id: I63e9a5d5c85067376abc420e3639154468346311
    GLConsumer: Add query for current frame number.
    
    Surface the underlying frame number of the current texture.
    
    Bug: 10830400
    Change-Id: Ide3a7da12ea0aac54588beb6bf00dbfe2cd37653
    GLConsumer: Add query for current frame number.
    
    Surface the underlying frame number of the current texture.
    
    Bug: 10830400
    Change-Id: Ide3a7da12ea0aac54588beb6bf00dbfe2cd37653
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    make sure GLConsumer::releaseTexImage() works after detachFromContext()
    
    Change-Id: I27e0bc57e927d47b2b98113ee37b5396bcc72019
    make GLConsumer's debug texture static
    
    this is so that we don't burn a gralloc handle and a bit
    of memory per GLConsumer.
    
    Change-Id: I30c3e7ec45d7f1b5426aca8e06c7716870877706
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    single buffer mode for BufferQueue
    
    Bug: 9891035
    Change-Id: Id1ab5f911a6dc4c1d8235e65775b3d3635231ad4
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    Tweaks for forward compatibility
    
    Change-Id: Id6a96521b3fd5bd2a034fe89cfa4d3a179a66328
    always pass the BufferQueue explicitely to consumers
    
    Change-Id: I883b0a7b19d8e722f9ab714ba6f49e658b02ca86
    Pay attention to buffer timestamps
    
    When acquiring a buffer, SurfaceFlinger now computes the expected
    presentation time and passes it to the BufferQueue acquireBuffer()
    method.  If it's not yet time to display the buffer, acquireBuffer()
    returns PRESENT_LATER instead of a buffer.
    
    The current implementation of the expected-present-time computation
    uses approximations and guesswork.
    
    Bug 7900302
    
    Change-Id: If9345611c5983a11a811935aaf27d6388a5036f1
    BufferQueue: track buffer-queue by instance vs. by reference
    
    Instead of representing the buffer-queue as a vector of buffer
    indices, represent them as a vector of BufferItems (copies).
    This allows modifying the buffer slots independent of the queued
    buffers.
    
    As part of this change, BufferSlot properties that are only
    been relevant in the buffer-queue have been removed.
    
    Also, invalid scalingMode in queueBuffer now returns an error.
    
    ConsumerBase has also changed to allow reuse of the same
    buffer slots by different buffers.
    
    Change-Id: If2a698fa142b67c69ad41b8eaca6e127eb3ef75b
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Related-to-bug: 7093648
    clean-up/simplify all dump() APIs
    
    remove the scratch buffer parameter and use
    String8::appendFormat() instead.
    
    Change-Id: Ib96c91617c8e7292de87433d15cf6232b7d591b0
    fix uninitialized variables in GLConsumer
    
    mDefaultWidth, mDefaultHeight and mCurrentScallingMode are now
    initialized to the same default value that BufferQueue uses.
    
    Change-Id: I0d4da2022b06419d12745716d8ddbd48c8869953
    don't use compile-time configuration of libgui as much as possible
    
    We now detect at runtime which sync features to use, which
    allows us to remove a lot of the compile-time configuration
    options. There  is still one option though, to disable
    KHR_fence_sync on some devices (which are more efficient
    without it).
    
    - added a backdoor to get the vendor's EGL strings
    
    the new logic is:
    - use always ANDROID_native_fence_sync if available
    - fallback to KHR_fence_sync if available and not disabled
      by the compile-time option
    - use KHR_wait_sync if available and either of the above is
      enabled
    
    Change-Id: I9c4b49d9ff1151faf902cc93bd53ea5f205aaabf
    Pass sp<Fence>s around instead of file descriptors
    
    Change-Id: Iac70584a2207940730e8f803a543e4e9a4000c47
    Tweaks for forward compatibility
    
    Change-Id: I136fcbbc14072ee5f5281d09445f28d083ed3ce1
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    Added some comments
    
    Added a quick intro section at the top of the class.  Also noted
    the proposed new name for the class.
    
    Change-Id: I3f79663527544aa4e910db0e5a1374b54d16ba2f
    Avoid unnecessary texture bind
    
    In SurfaceFlingerConsumer, check to see if native fence sync is
    enabled.  If so, defer the texture binding step to Layer::onDraw.
    
    Change-Id: I7d4034a31c0143207eea2509dfa13ef3820f9b8c
    Refactor SurfaceTexture a bit.
    
    Rearranges updateTexImage() so that the SurfaceFlinger-specific
    behavior is in a new SurfaceFlingerConsumer subclass.
    
    SurfaceTexture behavior should not be altered.  Instead of
    acquire-bind-release we now do acquire-release-bind, but since
    it's all done with the lock held there shouldn't be any
    externally-visible change.
    
    Change-Id: Ia566e4727945e2cfb9359fc6d2a8f8af64d7b7b7
    Change ConsumerBase's FrameAvailableListener to be a weak pointer
    
    This prevents strong reference cycles when the listener implementation also
    holds a strong pointer to the ConsumerBase
    
    Bug: 7425644
    Change-Id: I1514b13a32b18d421c902dddebec0765a989c55c
    fix a crasher in SurfaceTexture's setFilteringEnabled
    
    bug: 7211067
    Change-Id: Id8658a8df429d76c20ab9112858b38e52343dc9c
    SurfaceTexture: default to doing GL sync
    
    This change makes updateTexImage default to performing the necessary
    synchronization and adds an argument for SurfaceFlinger to disable that
    synchronization so that it can be performed lazily.
    
    Change-Id: I7c20923cc786634126fbf7021c9d2541aa77be5d
    Bug: 6991805
    SurfaceTexture: use eglWaitSync
    
    This change adds a compile-option to use eglWaitSyncANDROID to ensure that
    texturing operations that access the current buffer of a SurfaceTexture do not
    occur until the buffer is completely written.  It also moves this
    synchronization into a new SurfaceTexture method called doGLFenceWait and
    changes SurfaceFlinger's Layer class to use that method rather than performing
    its own wait on the fence.
    
    Change-Id: I70afa88086ca7ff49a80e3cd03d423767db7cb88
    libgui: move fence handling into ConsumerBase
    
    This change moves some common fence handling code into the base class for
    BufferQueue consumer classes.  It also makes the ConsumerBase class initialize
    a buffer slot's fence with the acquire fence every time a buffer is acquired.
    
    Change-Id: I0bd88bc269e919653b659bfb3ebfb04dd61692a0
    BufferQueue: clean up buffer counting
    
    This change is a clean up of some of the handling of the maximum number of
    buffers that are allowed at once.  It mostly renames a few member variables and
    methods, but it includes a couple small refactorings.
    
    Change-Id: I9959310f563d09583548d4291e1050a7bbc7d87d
    SurfaceTexture: inherit from ConsumerBase (try 2)
    
    This change makes SurfaceTexture inherit from ConsumerBase.  It removes all of
    the functionality from SurfaceTexture that is now provided by the base class.
    This includes fixes for two bugs that were found after checking this change in
    the first time and then reverting it.
    
    Change-Id: Ie2d9f4f27cfef26fdac341de3152e842b01a58d2
    Revert "SurfaceTexture: inherit from ConsumerBase"
    
    This reverts commit ed059a8d754770c3cf28b78dba30f7a6ba475dbe
    
    Change-Id: I72542c2595771a40c2c88251e0d6eb54e305b99b
    Revert "SurfaceTexture: inherit from ConsumerBase"
    
    This reverts commit ed059a8d754770c3cf28b78dba30f7a6ba475dbe
    
    Change-Id: I72542c2595771a40c2c88251e0d6eb54e305b99b
    Revert "SurfaceTexture: call ConsumerBase::freeBufferLocked"
    
    This reverts commit f8d33c652b930abbfb0722f3a2928cbc2ea71078
    
    Change-Id: I1ff2e1cc85824a8fac1051f573d2931db81af511
    SurfaceTexture: call ConsumerBase::freeBufferLocked
    
    This change fixes SurfaceTexture::freeBufferLocked so that it calls the base
    class implementation.
    
    Change-Id: I45d76fb2eb02c1fa6e4e917823ead83e2086bd15
    SurfaceTexture: inherit from ConsumerBase
    
    This change makes SurfaceTexture inherit from ConsumerBase.  It removes all of
    the functionality from SurfaceTexture that is now provided by the base class.
    
    Change-Id: I4a881df42810a14ee32d4ef7c8772a8f2510f4c7
    Pass fence to HWC on first use of buffer
    
    Also do a CPU-wait on the fence before using it for GL composition.
    
    Change-Id: I0f645a42a44803276cae11b904e5a26d65871562
    Transfer HWC release fences to BufferQueue
    
    After a HWC set, each SurfaceFlinger Layer retrieves the release fence
    HWC returned and gives it to the layer's SurfaceTexture. The
    SurfaceTexture accumulates the fences into a merged fence until the
    next updateTexImage, then passes the merged fence to the BufferQueue
    in releaseBuffer.
    
    In a follow-on change, BufferQueue will return the fence along with
    the buffer slot in dequeueBuffer. For now, dequeueBuffer waits for the
    fence to signal before returning.
    
    The releaseFence default value for BufferQueue::releaseBuffer() is
    temporary to avoid transient build breaks with a multi-project
    checkin. It'll disappear in the next change.
    
    Change-Id: Iaa9a0d5775235585d9cbf453d3a64623d08013d9
    add the ability to reject buffers in SurfaceTexture::updateTexImage
    
    SurfaceFlinger is using this new feature to reject buffers that
    don't have the right size.
    
    Bug: 6498869
    Change-Id: I8a7250a47db6c082a357b703feb3b9d0fc8d3443
    SurfaceTexture: improve texture matrix computation
    
    This change reduces the shrinking of the crop rectangle in some cases.  It adds
    a way to inform the SurfaceTexture that its texture will be used without
    bilinear interpolation, and uses knowledge of the pixel format to avoid
    shrinking unecessarily.
    
    Change-Id: I72365f39f74ecb7fcc51b4cf42f2d0fa97727212
    libgui: Add support for post-xform crops.
    
    This change adds support for specifying a crop rectangle to a
    SurfaceTextureClient that is in post-transformed coordinate space.
    
    Change-Id: I247901de343e71b32850f7ae3bac62dfa612ad3d
    Bug: 6299171
    libgui: Add plumbing for active rectangle
    
    This change adds the plumbing to SurfaceTextureClient, BufferQueue, and
    SurfaceTexture to get the active rectangle passed to the ANativeWindow to
    the buffer consumer.
    
    Change-Id: I35da0889b266327ebb079b6a7136fa3e2e8b00e6
    remove SurfaceTexture::connect()
    
    use BufferQueue::connect() instead
    
    Change-Id: I04aab7cf11304bf962cde38470747f3b19ddba42
    Remove fixed USAGE_HW_TEXTURE flag from BufferQueue.
    
    USAGE_HW_TEXTURE applies to SurfaceTexture, not to all uses of
    BufferQueue. Refactor accordingly.
    
    Change-Id: Ic7add5e1f2bbec3d3e796ba7f15eaa0633945d8f
    Enabled cropping support in SurfaceTexture
    
    SurfaceTexture will modify the crop rect so it matches
    the desired output aspect ratio when the scaling
    mode is NATIVE_WINDOW_SCALING_MODE_CROP.  Added a test
    for this new scaling mode.
    
    Change-Id: I60f24dcbc294b65cd10a393d9e27d40f07d27bb6
    Fixed disconnect bug in SurfaceTexture
    
    BufferQueue's disconnect could race with updateTexImage
    where invalid buffers could be released.  Additionally
    fixed similar bug with setBufferCount.  Tests were added
    to stress the disconnect mechanism.
    
    Change-Id: I9afa4c64f3e025984e8a9e8d924852a71d044716
    SurfaceTexture: add context attach & detach
    
    This change adds the detachFromContext and attachToContext methods to
    SurfaceTexture.  These methods allow the SurfaceTexture to switch from
    one consumer GLES context to another.  This change also includes a few
    cleanups to the error return codes in updateTexImage.
    
    Change-Id: I0df1eb599aa7b6f58f07431f242f8f09269559ed
    libgui: have ST::updateTexImage check the GL ctx
    
    This change adds a check to SurfaceTexture::updateTexImage to verify
    that the current GL context is the same as the one that was used for
    previous updateTexImage calls.
    
    Change-Id: If02d2f787bcfdb528046dc9ddf6665f8a90e1bf4
    libgui: add BQ consumer buffer free notifications
    
    This change adds a new callback for BufferQueue consumers to be notified
    when the BufferQueue frees some or all of its buffers.  This is needed
    to retain SurfaceTexture behavior where all buffers would be freed when
    the producer disconnects.  This change also modifies the
    SurfaceTextureGLToGLTest.EglDestroySurfaceUnrefsBuffers test to catch
    when the buffers are not freed.
    
    The implementation is a little complicated because it needs to avoid
    circular sp<> references across what will be a binder interface (so wp<>
    can't be used directly).  It also needs to avoid the possibility of
    locking the BufferQueue and consumer (e.g. SurfaceTexture) mutexes in
    the wrong order.
    
    This change also includes a few additional fixes and test cleanups.
    
    Change-Id: I27b77d0af15cb4b135f4b63573f634f5f0da2182
    SurfaceTexture: Fully refactored from BufferQueue
    
    SurfaceTexture and BufferQueue are separate objects.
    
    Change-Id: I230bc0ae6f78d0f9b2b5df902f40ab443ed5a055
    Removed dependecies between BufferQueue and SurfaceTexture
    
    Refactored SurfaceTexture and BufferQueue such that share
    no protected members.  Created an consumer facing interface
    for BufferQueue in preparation of connecting SurfaceTexture
    and BufferQueue through a binder.
    
    Change-Id: I938e63e085128148c58d0e26c7213b30145c109f
    Revert "Removed dependecies between BufferQueue and SurfaceTexture"
    
    This reverts commit a631399f71dbc7659d2f241968f85d337726ae61
    Removed dependecies between BufferQueue and SurfaceTexture
    
    Refactored SurfaceTexture and BufferQueue such that share
    no protected members.  Created an consumer facing interface
    for BufferQueue in preparation of connecting SurfaceTexture
    and BufferQueue through a binder.
    
    Change-Id: Iff55e740e36a7f70c9f7a17ee7a5af38e3d21f0f
    Refactored query function from SurfaceTexture into BufferQueue
    
    Change-Id: Id1cb6cc38d01edb4fcfcad867c5a7693bdcc3ab1
    Refactored ISurfaceTexture calls from SurfaceTexture into BufferQueue.
    
    Change-Id: I514f6b802f6b49c9ae27bed37bf0b9d23da03c9a
    SurfaceTexture: add EGL_KHR_fence_sync option
    
    This change adds a compile-time option for SurfaceTexture to use the
    EGL_KHR_fence_sync extension to synchronize access to Gralloc buffers.
    
    Bug: 5122031
    Change-Id: I7e973a358631fff5308acf377581b811911fe790
    EGL: default to swap interval 1
    
    This change explicitly sets swap interval 1 on the window when an
    EGLSurface is created to render to it.
    
    Change-Id: I91eb29dbee3ae4a55076b921f084d503fbe94e03
    SurfaceTexture: Fix to return the oldest of free buffers to Client on Dequeue call
    
    Surface Texture dequeue logic is modified to return the oldest of the
    free buffers to Client on dequeue call.
    
    Currently dequeue method is returning the first buffer index which is free.
    The parsing is done in ascending order of the buffer slot indices.
    This leads to returning the buffer which has been just queued to composer,
    and hence display, and this defeats the purpose of having minimum dequeue count
    as 2 in asynchrnouse mode.
    
    This is fixed by checking all the free slots and returning the oldest buffer.
    
    Change-Id: Ibbac10593c3994c278c601af0480b171635ecdd4
    Signed-off-by: Sunita Nadampalli <sunitan@ti.com>
    Define, document, and test the behavior of very large SurfaceTextures
    
    updateTexImage() now throws a runtime exception when its native
    counterpart fails
    
    Bug: 5506633
    
    Change-Id: I151a6f685d465966e7df4df624412ab2da62e95f
    Compiling issue fix since SurfTex header changed.
    
    Change-Id: I7790626d287d4b44cd9d9fc9f902237b6d059678
    SurfaceTexture: parameterize the texture target
    
    This change adds a hack to allow Android Browser to use a SurfaceTexture
    to stream RGBA images to a GL_TEXTURE_2D texture object.
    
    Change-Id: Idb90064d5d4b920959ef3be7451362ac5012460e
    SurfaceTexture: add name support
    
    This change adds support for setting a string that can be used to
    identify a SurfaceTexture object in log messages.
    
    Change-Id: Ib4ee085f36c8830dc964c05ef1654f5a55dfcd60
    Added interface to SurfaceTexture needed by WebKit.
    
    bug: 5239378
    Change-Id: I2d84c95c481515621d2b24a36bc213f4ea5d721a
    don't return the current buffer from dequeueBuffer
    
    we were not reseting mCurrentTexture in some situations
    which in turn caused dequeueBuffers() return a
    "FREE" buffer that was also current.
    Very often it was harmless, but it created a race with
    updateTexImage() which could cause the following
    queueBuffers() to fail.
    
    Bug: 5156325
    Change-Id: If15a31dc869117543d220d6e5562c57116cbabdb
    Add missing include
    
    Change-Id: I00181029e80a2ba75320550c14e950fadbab8a64
    added stub for getting buffer from surface texture
    
    Change-Id: If61153cacdd8027848f40f8d9035f7c4aead0a98
    fix a crasher in SurfaceTexture::updateTexImage()
    
    we now make sure to drain the buffer queue on disconnect.
    this happens only when in synchrnous mode. in async mode
    we clear all buffers except the head of the queue.
    
    for extra safety we also catch the null pointer
    in updateTexImage (which should  never happen) and return
    an error.
    
    Bug: 5111008
    
    Change-Id: I5174a6ecbb0de641c6510ef56a611cbb4e9e1f59
    rework dequeueBuffer()'s main loop.
    
    this simplifies the code a bit and also makes sure
    we reevaluate mAbandoned and mConnectedApi each time
    we come back from waiting on mDequeueCondition
    
    Change-Id: I1f8538b62ad321b51ed79d953b700036daba796d
    error out when SurfaceTexture APIs are called while not connected
    
    - also log a warning when freeAllBuffers is called with a non empty buffer queue
    - rename freeAllBuffers to freeAllBuffersLocked
    
    Change-Id: Idb71fdcf233b9ccae62d5a2a7c3c4bad2501d877
    return correct value from query after connecting a surface
    
    the first time a surface was connected, the values returned
    by query NATIVE_WINDOW_DEFAULT_{WIDTH|HEIGHT} and
    NATIVE_WINDOW_TRANSFORM_HINT were wrong until a call
    to queueBuffer was performed.
    
    Bug: 5137366, 5121607
    Change-Id: I7ac6b5b0daa876638f6bed7c20f286a6e6d984f6
    Fix a compiling error when trying to use setBufferCount
    
    Change-Id: I1aefaf7ec111340a584e0beeeea60b845e16bb1f
    Adding an optional param to the SurfaceTexture constructor.
    
    Change-Id: I0fdbccf483a16af8039b85c0562f19a34ebce536
    SurfaceTexture: enable RGB external textures
    
    This change removes support for conditionally using the GL_TEXTURE_2D
    target for SurfaceTexture textures with RGB buffers.  It also enables
    and fixes the RGB-based SurfaceTexture tests.
    
    Change-Id: I9a251a981cf66af6b048b2e4c3fe7231e4774f4d
    SurfaceTexture: add the abandon method.
    
    This change adds the 'abandon' method to the SurfaceTexture C++ class.
    This method may be used to put the SurfaceTexture in an abandoned state,
    causing all ISurfaceTexture methods to fail.
    
    Change-Id: Ibd261f7b73f44e2bec36a8508bf92113cfb7cf95
    SurfaceTexture: fix a comment
    
    Change-Id: I799532f77f8fbb6b8ee6888fdd8852b6f28e8c33
    implement: "Add an ANativeWindow API for SurfaceFlinger to suggest an optimal buffer orientation"
    
    Bug: 4487161
    Change-Id: I883f34efe542c2a566d04966f873374f40c50092
    Add set_scaling_mode() to ANativeWindow.
    
    This allows to specify the scaling mode independently from
    the buffer size.
    
    Change-Id: Iaa2baa660445531a97d3fac192e580f4929c5d3b
    SurfaceTexture: make (dis)connect into an IPC
    
    This change makes the ANativeWindow connect and disconnect calls result
    in an IPC to the SurfaceTexture object.  This will allow us to prevent
    multiple simultaneous connections from different processes.
    
    Change-Id: Id9aa1003b1335b96ca6bd4a1f5a67aa433d42efb
    Minor fix in SurfaceTexture
    
    Change-Id: Ic859715becf3e6d5107bd8beb8c577034d00ec52
    SurfaceTexture: change onFrameAvailable behavior
    
    This change alters the conditions under which the onFrameAvailable
    callback gets called by the C++ SurfaceTexture class.  The new behavior
    is to call the callback whenever a frame gets queued that will be
    visible to the buffer consumer.  This means that buffers queued in
    synchronous mode always trigger the callback, as those buffers will
    remain pending until they are consumed.  Buffers queued in asynchronous
    mode will only trigger the callback if there was not previously an
    unconsumed buffer pending.
    
    The new behavior means that a consumer should perform a draw operation
    exactly once for every onFrameAvailable call that it recieves.  This
    change also modifies SurfaceFlinger and the SurfaceTexture JNI to
    support of the new behavior.
    
    Change-Id: I8b2c6e00961d3d58b11c6af50b555b6e4c5f5b40
    Tweak for forward-compatibility
    
    Change-Id: Ic5e4d949c1c80a2ebdc2ec802c35b5d3d7f9661d
    Add allowSynchronousMode to SurfaceTexture constructor.
    
    Change-Id: I54f30a3c16bbe6b813f3bcd1d389da5627531304
    Tweaks for forward-compatibility
    
    Change-Id: Iec525edc186e78d5d865f82dd5b1f56263c22e86
    SurfaceTexture: fix up a comment.
    
    Change-Id: I044e44e17319e08af657a7ec9fa39100876fe862
    SurfaceTexture: fix a getTransformMatrix crash.
    
    This change moves the computation of the transform matrix out of
    getTransformMatrix and instead performs the computation when
    updateTexImage gets called.  This is needed in order for
    getTransformMatrix to succeed even if the buffers have been freed (e.g.
    by changing the buffer count) because the computation depends upon the
    properties of the current GraphicBuffer.
    
    Change-Id: Ied541ab8747b7ad604f862717135f9a16a816be9
    Bug: 4490420
    SurfaceTexture: clean up some comments, tests, etc.
    
    This change fixes up some stale comments, member variable names, log
    messages and disables a failing test.
    
    Change-Id: Ic1d3344b18066cf710e4a42838b2417c6b1f2f6c
    fix onFrameAvailable
    
    Change-Id: I391fe9f6684ac9fd4f91416ce18b583f7087d966
    Add SurfaceTexture logging
    
    Change-Id: If1b74be5230813fb76429935d88b9d4a7c41700c
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    
    Change-Id: I8382e346ddaa2c4c8ff56ac3ffd7f0109572f188
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    
    Change-Id: Ic94cbab092953243a0746e04bbe1b2eb0cc930ef
    unify SurfaceTexture and Surface
    
    Change-Id: I49da2f5d8408e4cd7e148cfb777bb4ff68cd8f37
    Fix a bug where setgeometry couldn't be undone
    
    This change the binder protocol between SurfaceTextureClient
    and SurfaceTexture. dequeueBuffer() now takes the requested
    parameters for the buffer. SurfaceTexture decides if the
    buffer needs to be reallocated and does the allocation
    if needed. In that case it returns BUFFER_NEEDS_REALLOCATION
    to tell SurfaceTextureClient that it needs to call
    requestBuffer (which all parameters have been removed) to
    acquire a pointer to the buffer.
    
    dequeueBuffer and requestBuffer could be folded into a single
    IPC call, but we chose to optimize the case where buffers are
    not created and avoid some complexity in the marshalling code.
    
    Change-Id: I097a7f6f40a3491e10f3f3742eab33999286c304
    changes to SurfaceTexture needed for unification with SF
    
    - implement connect/disconnect
    - implement missing query
    - handle texture_2d in addition to texture_external_oes
    
    Change-Id: I971a70821f00f22b01f5337de4a7d451177fec4d
    Fix a GraphicBuffer leak in SurfaceTexture
    
    This leak was intentional, it was there to deal with the fact that
    some gralloc implementations don't track buffer handles with
    file-descriptors so buffers needed to stay alive until there were
    registered, which is not guaranteed by binder transactions.
    
    In this new implementation, we use a small BBinder holding a
    reference to the buffer, which with tuck into the parcel. This forces
    the reference to stay alive until the parcel is destroyed, which
    is guaranteed (by construction) to happen after the buffer is
    registered.
    
    this allows the public facing API to not expose the previous hack.
    
    Change-Id: I1dd6cd83679a2b7457ad628169e2851acc027143
    SurfaceTexture can now force the client to request a buffer
    
    SurfaceTexture now has the concept of default size a new method,
    setDefaultBufferSize() to set it. When the default size is
    changed, dequeueBuffer() will return a value telling the
    client that it must ask for a new buffer.
    
    The above only applies if the client has not
    overriden the buffer size with setGeometry.
    
    Change-Id: I520dc40363054b7e37fdb67d6a2e7bce70326e81
    Updated JBQ's original SurfaceTexture stubs to make webkit MR1 buildable
    
    Change-Id: If1c1610efcc0e0bc6de88c75712baed91624b1a7
    Add support for timestamps into SurfaceTexture.
    
    API addition: The timestamps are represented as nanoseconds from some
    arbitrary time point. Like the SurfaceTexture transform matrix, the
    timestamp retrieved by getTimestamp is for the last frame sent to the
    GL texture using updateTexImage().
    
    Camera HAL change: Expect vendors to set these timestamps using
    native_window_set_buffers_timestamp().  For now, they are
    autogenerated by SurfaceTextureClient if set_buffers_timestamp() is
    never called, but such timing is likely not accurate enough to pass a
    CTS test.
    
    bug:3300707
    
    Change-Id: Ife131a0c2a826ac27342e11b8a6c42ff49e1bea7
    Add the MIN_UNDEQUEUED_BUFFERS query to ANW.
    
    This change adds a new query to ANativeWindow for getting the minimum
    number of buffers that must be left un-dequeued during the steady-state
    operation of the ANativeWindow.
    
    Change-Id: Ie8c461fc26b02ecde02ddb4f95bf763662cf1551
    Related-Bug: 3356050
    stubs
    
    Change-Id: I6bc0b8e9d4412a0b60c6226fbd2b7a6d15aceb22
    Pass the IGraphicBufferAlloc to SurfaceTextureClient.
    
    This change passes a reference to the IGraphicBufferAlloc binder object
    to SurfaceTextureClient objects.  When STC objects are created they
    query their associated ISurfaceTexture object for the
    IGraphicBufferAlloc that the SurfaceTexture uses to allocate buffers.
    Having the SurfaceTextureClient hold this reference prevents the
    GraphicBufferAlloc in SurfaceFlinger from freeing the allocated buffers
    before the SurfaceTextureClient is done with them.
    
    Change-Id: Ib8e30e8b37fdd60438cbb4cb7e9174d0ba6d661c
    related-bug: 3362519
    stubs
    
    Change-Id: I829039f3817a172e66eeb9df397e896a488a259d
    added BinderService<> template to help creating native binder services
    
    Change-Id: Id980899d2647b56479f8a27c89eaa949f9209dfe
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Split BufferQueue into core + producer + consumer
    
    Change-Id: Idc39f1e511d68ce4f02202d35425a419bc0bcd92
    BufferQueue: Add StreamSplitter
    
    Adds a StreamSplitter class, that takes one IGraphicBufferConsumer
    interface and multiple IGraphicBufferProducer interfaces and
    implements a one-to-many broadcast of GraphicBuffers (while managing
    fences correctly).
    
    Change-Id: I38ecdf3e311ac521bc781c30dde0cc382a4376a3
    add libbatteryservice
    
    IBatteryPropertiesListener is used by clients such as BatteryService to
    receive notifications of changed battery/power status (from healthd).
    
    IBatteryPropertiesRegistrar manages registrations of
    IBatteryPropertiesListener clients.
    
    Add BatteryService native header with defines from BatteryManager, and
    class BatteryProperties to pass battery/power status around.
    
    Change-Id: I44e2736e503b586794097b7b9d31d07fefd9b15a
    don't use compile-time configuration of libgui as much as possible
    
    We now detect at runtime which sync features to use, which
    allows us to remove a lot of the compile-time configuration
    options. There  is still one option though, to disable
    KHR_fence_sync on some devices (which are more efficient
    without it).
    
    - added a backdoor to get the vendor's EGL strings
    
    the new logic is:
    - use always ANDROID_native_fence_sync if available
    - fallback to KHR_fence_sync if available and not disabled
      by the compile-time option
    - use KHR_wait_sync if available and either of the above is
      enabled
    
    Change-Id: I9c4b49d9ff1151faf902cc93bd53ea5f205aaabf
    Move services/powermanager from frameworks/base to frameworks/native
    
    Move services/powermanager into frameworks/native so audioflinger can
    use it.  Note that this is not the same as a PowerManagerService,
    which is part of systemserver and handles turning the screen on and
    off, etc.  This is just a binder interface to allow taking wakelocks.
    
    Change-Id: I6b6a8b41cdbad17e826fda45aab5f059f22fc64e
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    BatteryProperty: Add property ENERGY_COUNTER and 64-bit integer properties
    
    Also fixup comments to match recent changes in BatteryManager.
    
    Change-Id: I6f40924f9e66d564ad1175f9650e2bfd2ad39a3a
    batteryservice: Add battery capacity
    
    Change-Id: I6879ec9ec931cbea82aa550b3b227e744255bfd4
    batteryservice: remove now unused struct BatteryExtraProperties
    
    Change-Id: Ibbb1eba95a800d2198e7524149ce38beb13dd7c9
    batteryservice: remove BatteryProperties fields not sent to BatteryService
    
    Change-Id: I1116ebf0e21117fd37df7bfc41cb8ebaf9361faa
    batteryservice: Add BatteryExtraProperties
    
    Change-Id: I050a4da14dd723a1d563b25a9e997db769fece3e
    libbatteryservice: Add average current property
    
    Change-Id: I519c2fb9f7cec21d9f87e73fa96b2f58a7ab27a5
    libbatteryservice: add interface to read individual battery properties
    
    Change-Id: I089eb6348053a8a9c8bca59e57ed97b4af14825a
    batteryservice: add battery current now and charge counter data
    
    Change-Id: I4b3ea25342d4a03a8e38bfee2ef3b1ce54f82582
    add libbatteryservice
    
    IBatteryPropertiesListener is used by clients such as BatteryService to
    receive notifications of changed battery/power status (from healthd).
    
    IBatteryPropertiesRegistrar manages registrations of
    IBatteryPropertiesListener clients.
    
    Add BatteryService native header with defines from BatteryManager, and
    class BatteryProperties to pass battery/power status around.
    
    Change-Id: I44e2736e503b586794097b7b9d31d07fefd9b15a
    libbatteryservice: add interface to read individual battery properties
    
    Change-Id: I089eb6348053a8a9c8bca59e57ed97b4af14825a
    add libbatteryservice
    
    IBatteryPropertiesListener is used by clients such as BatteryService to
    receive notifications of changed battery/power status (from healthd).
    
    IBatteryPropertiesRegistrar manages registrations of
    IBatteryPropertiesListener clients.
    
    Add BatteryService native header with defines from BatteryManager, and
    class BatteryProperties to pass battery/power status around.
    
    Change-Id: I44e2736e503b586794097b7b9d31d07fefd9b15a
    More changes to fix PDK build:
    
    move screencap back to frameworks/base
    move libdiskusage over from frameworks/base
    
    Change-Id: I8415716634a4cb5b0fae15ef15ff21ee0a08906a
    glestrace: Framework for GLES tracing library
    
    This patch provides a framework for tracing GLES 1.0 and 2.0
    functions. It is missing a lot of features, but here are the
    things it accomplishes:
    
    - Stop building the glesv2dbg library, and build the
        glestrace library instead.
    - Replace the hooks for glesv2dbg with the ones for glestrace.
    - Add the basics for the trace library. Currently, this
        traces all GL functions, but not all required data is
        sent for all the functions.  As a result, it will not
        be possible to reconstruct the entire GL state on the
        host side.
    
    The files gltrace.pb.* and gltrace_api.* are both generated
    using the tools/genapi.py script.
    
    Change-Id: Id60a468f7278657f008bc6ea1df01f9bdfecfdd3
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    Remove frameworks/base/im since these stuff are only used by IM app
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    FramebufferNativeWindow.h is obsolete
    
    This adds a deprecation #warning to the header.
    
    Change-Id: Ia32f16e491cb01d435ec8846dda3d9a7d1a9cfc5
    libs/ui: Add support for triple framebuffers
    
    Change-Id: I90dd38deeeda9a3785b87286cc7d252c6f948750
    Update ANativeWindow clients for sync
    
    This change updates the uses of ANativeWindow to use the new ANW functions that
    accept and return Sync HAL fence file descriptors.
    
    Change-Id: I3ca648b6ac33f7360e86754f924aa072f95242f6
    remove dependency on android_native{s_priv|buffer}.h
    
    Change-Id: Ie4b95f7061c240f37c504414259f92d72c4ffc89
    frameworks/base: android_native_buffer_t -> ANativeWindowBuffer
    
    Change-Id: Idc2eabaa805bb6d308ebb315872623f28d428417
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    frameworks/base: make the ANativeWindow query() method const
    
    query() does not modify the object's data, so it needs to be a const method
    
    Change-Id: I67c40a3c865461e6f1cc2193fd2d74286ff6ac8f
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    surfaceflinger: add support for gralloc dump hooks
    
    Change-Id: Ib6f539ed0132b70d040d653c03d52cc04249ac3c
    Framebuffer: Support variable number of framebuffers in the UI
    
    This change defines a macro NUM_FRAME_BUFFERS to set
    the desired number of framebuffers to be used by the UI,
    instead of hard-coding 2 framebuffers.
    
    Aditional logic has been  added to handle the initialization
    and destruction of NUM_FRAME_BUFFERS buffers.
    
    Change-Id: I3a4bfec3e0f453432f2ffebf084c00f574d3be46
    Signed-off-by: Rodrigo Obregon <robregon@ti.com>
    Add logging of various important graphics events
    
    There are 16 events logged in the event log:
    SF_APP_DEQUEUE_BEFORE
    SF_APP_DEQUEUE_AFTER
    SF_APP_LOCK_BEFORE
    SF_APP_LOCK_AFTER
    SF_APP_QUEUE
    
    SF_REPAINT
    SF_COMPOSITION_COMPLETE
    SF_UNLOCK_CLIENTS
    SF_SWAP_BUFFERS
    SF_REPAINT_DONE
    
    SF_FB_POST_BEFORE
    SF_FB_POST_AFTER
    SF_FB_DEQUEUE_BEFORE
    SF_FB_DEQUEUE_AFTER
    SF_FB_LOCK_BEFORE
    SF_FB_LOCK_AFTER
    
    all events log the buffer conserned and a timestamp in microseconds.
    
    by default the logging is not enabled, to turn it on:
    adb shell service call SurfaceFlinger 1006 i31 1
    adb shell setprop debug.graphic_log 1
    
    The effect is immediate in SurfaceFlinger, but applications need to be
    restarted.
    
    Change-Id: Ifc2e31f7aed072d9a7dede20ff2ce59231edbec1
    Introduce official public NativeWindow type.
    
    Not yet hooked up to anything in the NDK, but requires renaming
    the existing android_native_window_t type everywhere.
    
    Change-Id: Iffee6ea39c93b8b34e20fb69e4d2c7c837e5ea2e
    eclair snapshot
    Android side of the fix for [2121211] Sholes has stutter during animations
    
    a new method, compostionComplete() is added to the framebuffer hal, it is used by surfaceflinger to signal the driver that the composition is complete, BEFORE it releases its client. This gives a chance to the driver to
    second take, hopefully this time it doesn't break one of the builds: "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    Revert "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    
    This reverts commit 8b76a0ac6fbf07254629ed1ea86af014d5abe050.
    SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything.
    
    This change makes SurfaceHolder.setType(GPU) obsolete (it's now ignored).
    Added an API to android_native_window_t to allow extending the functionality without ever breaking binary compatibility. This is used to implement the new set_usage() API. This API needs to be called by software renderers because the default is to use usage flags suitable for h/w.
    fixed some issues with the software renderer when surfaces are made current.
    
    there was several issues:
    - when a surface was made non-current, the last frame wasn't shown and the buffer could stay locked
    - when a surface was made current the 2nd time, it would not dequeue a new buffer
    
    now, queue/dequeue are done when the surface is made current.
    
    for this to work, a new query() hook had to be added on android_native_window_t, it allows to retrieve some attributes of a window (currently only width and height).
    make use of new eglGetRenderBufferANDROID extension to clean-up a bit a few hacks added recently
    hack copybit back in for video playback on msm7k. we have h/w accelerated video again
    add support for update-on-demand in SurfaceFlinger
    move opengl/include/EGL/android_natives.h to include/ui/egl/android_natives.h and don't include it from egl.h
    
    the android_native_ types are just forward declared in egl.h
    get rid of android_native_buffer_t::getHandle() and replace it with an handle field
    
    this abstraction was not necessary. things are easier now.
    minor clean-up in FramebufferNativeWindow
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Initial Contribution
    remove dependency on android_native{s_priv|buffer}.h
    
    Change-Id: Ie4b95f7061c240f37c504414259f92d72c4ffc89
    frameworks/base: move ANativeWindow/android_native_buffer_t out
    
    These definitions have been moved to system/core.
    
    Change-Id: I021b6b5f2fd72d538b5ccdcb33860ebd3004d9ad
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    frameworks/base: make the ANativeWindow query() method const
    
    query() does not modify the object's data, so it needs to be a const method
    
    Change-Id: I67c40a3c865461e6f1cc2193fd2d74286ff6ac8f
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Revert "retire android_native_window_t"
    
    this type is still used by partner's source trees.
    we will get rid of it in next release's timeframe.
    
    This reverts commit 7b49b976277cb3538242151e7dbd24681ddec73e.
    retire android_native_window_t
    
    Change-Id: I232c526168e1a93977d1c2d0fa74c8937cdeb23b
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Add support for timestamps into SurfaceTexture.
    
    API addition: The timestamps are represented as nanoseconds from some
    arbitrary time point. Like the SurfaceTexture transform matrix, the
    timestamp retrieved by getTimestamp is for the last frame sent to the
    GL texture using updateTexImage().
    
    Camera HAL change: Expect vendors to set these timestamps using
    native_window_set_buffers_timestamp().  For now, they are
    autogenerated by SurfaceTextureClient if set_buffers_timestamp() is
    never called, but such timing is likely not accurate enough to pass a
    CTS test.
    
    bug:3300707
    
    Change-Id: Ife131a0c2a826ac27342e11b8a6c42ff49e1bea7
    ANativeWindow: add query for the concrete type.
    
    This change adds a query to the ANativeWindow interface for getting the
    concrete type of the ANativeWindow.
    
    Bug: 4086509
    Change-Id: I64aa86d72fbca3b52a98e1fc35608737781a3178
    ANativeWindow: add query for the concrete type.
    
    This change adds a query to the ANativeWindow interface for getting the
    concrete type of the ANativeWindow.
    
    Bug: 4086509
    Change-Id: I64aa86d72fbca3b52a98e1fc35608737781a3178
    ANativeWindow: add queues-to-window-composer check.
    
    This change adds a new 'method' to the ANativeWindow interface to check
    whether buffers queued to the window will be sent directly to the system
    window compositor.
    
    Change-Id: I4d4b199e328c110b68b250029aea650f03c8724d
    Bug: 3495535
    Add the MIN_UNDEQUEUED_BUFFERS query to ANW.
    
    This change adds a new query to ANativeWindow for getting the minimum
    number of buffers that must be left un-dequeued during the steady-state
    operation of the ANativeWindow.
    
    Change-Id: Ie8c461fc26b02ecde02ddb4f95bf763662cf1551
    Related-Bug: 3356050
    Reset ANativeWindow crop on buffer geometry changes.
    
    This changes the ANativeWindow API and the two implementations to reset
    the window's crop rectangle to be uncropped when the window's buffer
    geometry is changed.
    
    Bug: 3359604
    Change-Id: I64283dc8382ae687787ec0bebe6a5d5b4a0dcd6b
    fix [2835280] Add support for cancelling buffers to ANativeWindow
    
    There is a new ANativeWindow::cancelBuffer() API that can be used to
    cancel any dequeued buffer, BEFORE it's been enqueued. The buffer is
    returned to the list of availlable buffers. dequeue and cancel are not
    mutually thread safe, they must be called from the same thread or
    external synchronization must be used.
    
    Change-Id: I86cc7985bace8b6a93ad2c75d2bef5c3c2cb4d61
    fix [2931513] Add support for setting the orientation of an ANativeWindow
    
    Also implement support for cropping.
    
    Change-Id: Iba5888dd242bf2feaac9e9ce26e404c1f404c280
    Introduce official public NativeWindow type.
    
    Not yet hooked up to anything in the NDK, but requires renaming
    the existing android_native_window_t type everywhere.
    
    Change-Id: Iffee6ea39c93b8b34e20fb69e4d2c7c837e5ea2e
    added the notion of fixed-size buffers
    
    the new native_window_set_buffers_geometry allows
    to specify a size and format for all buffers to be
    dequeued. the buffer will be scalled to the window's
    size.
    
    Change-Id: I2c378b85c88d29cdd827a5f319d5c704d79ba381
    added native_window_set_buffer_count()
    
    this method can be used to change the number of buffers
    associated to a native window. the default is two.
    
    Change-Id: I608b959e6b29d77f95edb23c31dc9b099a758f2f
    Add incStrong and decStrong methods to android_native_{window,buffer}_t.
    
    This change adds the methods necessary to use sp<> to handle refcounting
    android_native_window_t and android_native_buffer_t.  The new methods forward
    the refcounting operations to the corresponding android_native_base_t
    functions.
    
    Change-Id: I7de8e262728e439bc1efdf69374a2a9f6f432ced
    added setCrop() to android_native_window_t
    
    hooked up the new method up to Surface.cpp
    the actual crop is not implemented in SF yet
    
    Change-Id: Ic6e313c98fd880f127a051a0ccc71808bd689751
    Add a new connect/disconnect API to android_native_window_t
    
    it's used to keep track of which API owns the surface.
    
    Change-Id: I1021c5905c020efc3c428e561b38189377168b22
    eclair snapshot
    really be more friendly with C
    be more friendly with C
    ui: make native_window_set_usage be a static inline
    
    Signed-off-by: Dima Zavin <dima@android.com>
    second take, hopefully this time it doesn't break one of the builds: "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    Revert "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    
    This reverts commit 8b76a0ac6fbf07254629ed1ea86af014d5abe050.
    SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything.
    
    This change makes SurfaceHolder.setType(GPU) obsolete (it's now ignored).
    Added an API to android_native_window_t to allow extending the functionality without ever breaking binary compatibility. This is used to implement the new set_usage() API. This API needs to be called by software renderers because the default is to use usage flags suitable for h/w.
    added NATIVE_WINDOW_FORMAT attribute to android_native_window_t
    fixed some issues with the software renderer when surfaces are made current.
    
    there was several issues:
    - when a surface was made non-current, the last frame wasn't shown and the buffer could stay locked
    - when a surface was made current the 2nd time, it would not dequeue a new buffer
    
    now, queue/dequeue are done when the surface is made current.
    
    for this to work, a new query() hook had to be added on android_native_window_t, it allows to retrieve some attributes of a window (currently only width and height).
    get rid off unneeded flags
    move android_native_buffer_t declaration into its own private/ui/android_native_priv.h header, since user code should never have access to it.
    move opengl/include/EGL/android_natives.h to include/ui/egl/android_natives.h and don't include it from egl.h
    
    the android_native_ types are just forward declared in egl.h
    get rid of android_native_buffer_t::getHandle() and replace it with an handle field
    
    this abstraction was not necessary. things are easier now.
    removed the "bits" attribute from android_native_buffer_t.
    
    "bits" can never be trusted now that we need to call lock() on the handle to get the virtual address of the buffer.
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    fix camera API 2.0 orientation
    
    we add a flag to ANativeWindow::setBufferTransform that means
    "apply the inverse rotation of the display this buffer is displayed
    onto to".
    
    Bug: 10804238
    Change-Id: Id2447676271950463e8dbcef1b95935c5c3f32b2
    improve mat44 implementation
    
    this will make it easier to create matrices of different sizes
    
    Change-Id: I2c1771ba0823c42d737762e2dfc2cd47eb302767
    vector and matrix classes for graphics use
    
    - this implements vec2, vec3, vec4, which are float vectors
    of size 2, 3 and 4 respectively.
    
    the code allows easy instantiation of vectors of a different
    type via the tvec{2|3|4}<T> template classes.
    
    - this also implements mat4 which is a float 4x4 matrix. the
    tmat44<T> template class allows easy instantiation of a
    4x4 matrix of a different value_type.
    
    The vector types have some minimal support for the
    glsl style swizzled access; for instance:
    
      vec4 u;
      vec3 v = u.xyz;
    
    only .x, .xy, .xyz and their .stpq / .rgba equivalent are
    supported.
    
    most operators are supported on both vector and matrices:
    arithmetic, unary, compound assignment and comparison
    (bit-wise operators NOT supported).
    
    - operations available on vectors include:
    dot, length, distance, normalize and cross
    
    - operations available on matrices include:
    transpose, inverse, trace
    
    - and a few utilities to create matrices:
    ortho, frustum, lookAt
    
    Change-Id: I64add89ae90fa78d3f2f59985b63495575378635
    improve mat44 implementation
    
    this will make it easier to create matrices of different sizes
    
    Change-Id: I2c1771ba0823c42d737762e2dfc2cd47eb302767
    vector and matrix classes for graphics use
    
    - this implements vec2, vec3, vec4, which are float vectors
    of size 2, 3 and 4 respectively.
    
    the code allows easy instantiation of vectors of a different
    type via the tvec{2|3|4}<T> template classes.
    
    - this also implements mat4 which is a float 4x4 matrix. the
    tmat44<T> template class allows easy instantiation of a
    4x4 matrix of a different value_type.
    
    The vector types have some minimal support for the
    glsl style swizzled access; for instance:
    
      vec4 u;
      vec3 v = u.xyz;
    
    only .x, .xy, .xyz and their .stpq / .rgba equivalent are
    supported.
    
    most operators are supported on both vector and matrices:
    arithmetic, unary, compound assignment and comparison
    (bit-wise operators NOT supported).
    
    - operations available on vectors include:
    dot, length, distance, normalize and cross
    
    - operations available on matrices include:
    transpose, inverse, trace
    
    - and a few utilities to create matrices:
    ortho, frustum, lookAt
    
    Change-Id: I64add89ae90fa78d3f2f59985b63495575378635
    Turn on support for async cursor update in surfaceflinger.
    
    If available, surfaceflinger will use the hwc setCursorPositionAsync()
    api to change the position of supported cursor layers outside of
    the usual prepare/set loop.
    
    Change-Id: Ib3fc5c0c390b3489ddbba202379840a1d2748917
    Use asynchronous lock/unlock API
    
    The gralloc API now provides a way for using lock/unlock with the Android
    explicit synchronisation concept. This changes updates the GraphicBuffer class
    to also expose this functionality, and updates the Surface class to make use of
    in line with the dequeueBuffer/queueBuffer mechanism.
    
    This new behaviour is dependent on GRALLOC_MODULE_API_VERSION_0_3. If the local
    gralloc module does not support this then the existing synchronous lock/unlock
    mechanism will be used.
    
    Change-Id: I8c3fd9592e0c5400ac9be84450f55a77cc0bbdc5
    Revert "Use asynchronous lock/unlock API"
    
    This reverts commit 378ef07760eda717367d9429428c42d54d54d9a7.
    
    Change-Id: I1de5ab973b5383633e75924fe90ac3ca8216c36a
    Use asynchronous lock/unlock API
    
    The gralloc API now provides a way for using lock/unlock with the Android
    explicit synchronisation concept. This changes updates the GraphicBuffer class
    to also expose this functionality, and updates the Surface class to make use of
    in line with the dequeueBuffer/queueBuffer mechanism.
    
    This new behaviour is dependent on GRALLOC_MODULE_API_VERSION_0_3. If the local
    gralloc module does not support this then the existing synchronous lock/unlock
    mechanism will be used.
    
    Change-Id: I77daa1beb197b63b1c2f281b8414ac4ae4b5b03c
    Add unique ID to GraphicBuffer
    
    Adds a globally-unique ID (PID + sequence number) to every
    GraphicBuffer, which will remain the same while crossing Binder,
    even if the underlying handles change.
    
    Change-Id: Ib11330a4c5e99621b82204e0adb31b9a88658426
    remove unused code form GraphicBuffer
    
    Change-Id: I0dd67f1f93f654331e8f17b55730931dbc695ca7
    Make Flattenable not virtual
    
    Fallout from the Flattenable change, update all its uses.
    
    Additionnaly, fix/tighten size checks when (un)flatten()ing
    things.
    
    Removed the assumption by some flattenables (e.g.: Fence)
    that the size passed to them would be exact (it can
    and will be larger in some cases)
    
    The code in Parcel is a bit complicated so that we don't
    have to expose the full implementation (and also to
    keep the code smallish).
    
    Change-Id: I0bf1c8aca2a3128491b4f45510bc46667e566dde
    Add support for HAL_PIXEL_FORMAT_YCbCr_420_888
    
    - Add fields to CpuConsumer::LockedBuffer for new information
    - New lock methods for GraphicBuffer and GraphicBufferMapper for
      the format
    
    Bug: 8734880
    Change-Id: If31f82c62d64b6942cf4cc6e5715585c03273f12
    Make GraphicBuffer a RefBase
    
    - this gives us access to RefBase's refcounting debugging
    - it doesn't cost much because GraphicBuffer already has a vtable
    
    Change-Id: I7f696e421fea14b14bfaeb83880689b83e96af4d
    GraphicBuffer.h: Remove redundant friend class declaration causing warnings
    
    Change-Id: I8a4b0e0b4d0a1cf472de820553c31f2d42044543
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: Ibed34175ae273608393aaa5f0a7df207dc40d709
    remove dependency on android_native{s_priv|buffer}.h
    
    Change-Id: Ie4b95f7061c240f37c504414259f92d72c4ffc89
    SurfaceMediaSource: use the vid enc usage bit
    
    This change makes SurfaceMediaSource add the VIDEO_ENC usage bit when
    allocating its GraphicBuffers rather than the HW_TEXTURE bit.
    
    Change-Id: Ie20e225c894fdbc31cad6bb82b3b64c7e98074eb
    SurfaceFlinger: use the HWC gralloc usage bit
    
    This change makes SurfaceFlinger always use the
    GRALLOC_USAGE_HW_COMPOSER usage bit when allocating buffers that may be
    passed to the HWComposer.
    
    Change-Id: I70362a8ede2b359fb2046853f85149d597465817
    Tweaks for forward-compatibility
    
    Change-Id: Iec525edc186e78d5d865f82dd5b1f56263c22e86
    frameworks/base: android_native_buffer_t -> ANativeWindowBuffer
    
    Change-Id: Idc2eabaa805bb6d308ebb315872623f28d428417
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Protected surface API
    
    To be used by DRM framework, implemented by display HAL
    
    Change-Id: I054a07a94f4d5dbe792f3a597e2e49a100d90eb2
    Add the SurfaceTexture C++ implementation.
    
    This change adds the C++ implementation of SurfaceTexture and related
    classes. The goal of this is for a SurfaceTexture to be passed to
    camera service or Stagefright in place of a Surface to allow camera
    preview or decoded video frames to be streamed to an OpenGL ES texture
    that an application can use.
    
    Change-Id: I55c83a7017f1ecb81c9c9e3252cbd118b914296c
    [3171580] Add transform field to native buffers. (DO NOT MERGE)
    
    This field indicate how the content of the buffer
    needs to be transformed.
    
    Change-Id: Ide3e980a90599e931406135693231276626adbbb
    [3171580] don't automatically log GraphicBuffer allocation failures
    
    some of these failures are not fatal and even expected in some cases
    so they should not emit a dump in the log in those cases.
    
    Change-Id: Idcfa252e3bfa9d74e27fe4ad8f8623aa01aa9c5e
    Move binder magic from the Surface class to GraphicBuffer.
    
    - Register buffers with Gralloc when unflattening a GraphicBuffer (rather than
    doing it in the Surface class).
    - Add support for a GraphicBuffer that wraps an android_native_window_t*.
    
    Change-Id: I029ac086111bbac800e5ca37eb505f558b718cd8
    split surface management from surface's buffers management
    
    Change-Id: If3c5655d1231f8f0c49ba68f972b1b20c93b3f87
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    fix[2228133] pixelflinger ignores the "vertical stride" leading to artifacts when playing back video
    
    we lost the concept of vertical stride when moving video playback to EGLImage.
    Here we bring it back in a somewhat hacky-way that will work only for the
    softgl/mdp backend.
        fix [2143798] Need to figure out how to do video
    
        Use EGLImageKHR instead of copybit directly.
        We now have the basis to use streaming YUV textures (well, in fact
        we already are). When/if we use the GPU instead of the MDP we'll
        need to make sure it supports the appropriate YUV format.
    
        Also make sure we compile if EGL_ANDROID_image_native_buffer is not supported
    fix [2167050] glTexImage2D code path buggy in SurfaceFlinger
    
    When EGLImage extension is not available, SurfaceFlinger will fallback to using
    glTexImage2D and glTexSubImage2D instead, which requires 50% more memory and an
    extra copy. However this code path has never been exercised and had some bugs
    which this patch fix.
    
    Mainly the scale factor wasn't computed right when falling back on glDrawElements.
    We also fallback to this mode of operation if a buffer doesn't have the adequate
    usage bits for EGLImage usage.
    
    This changes only code that is currently not executed. Some refactoring was needed to
    keep the change clean. This doesn't change anything functionaly.
    [1/2] GraphicBufferMapper: Add MT6589-specific methods
    
    Change-Id: I23af90e532fb5f9496337fb7ddcb3ecc11fb78b4
    Use asynchronous lock/unlock API
    
    The gralloc API now provides a way for using lock/unlock with the Android
    explicit synchronisation concept. This changes updates the GraphicBuffer class
    to also expose this functionality, and updates the Surface class to make use of
    in line with the dequeueBuffer/queueBuffer mechanism.
    
    This new behaviour is dependent on GRALLOC_MODULE_API_VERSION_0_3. If the local
    gralloc module does not support this then the existing synchronous lock/unlock
    mechanism will be used.
    
    Change-Id: I8c3fd9592e0c5400ac9be84450f55a77cc0bbdc5
    Revert "Use asynchronous lock/unlock API"
    
    This reverts commit 378ef07760eda717367d9429428c42d54d54d9a7.
    
    Change-Id: I1de5ab973b5383633e75924fe90ac3ca8216c36a
    Use asynchronous lock/unlock API
    
    The gralloc API now provides a way for using lock/unlock with the Android
    explicit synchronisation concept. This changes updates the GraphicBuffer class
    to also expose this functionality, and updates the Surface class to make use of
    in line with the dequeueBuffer/queueBuffer mechanism.
    
    This new behaviour is dependent on GRALLOC_MODULE_API_VERSION_0_3. If the local
    gralloc module does not support this then the existing synchronous lock/unlock
    mechanism will be used.
    
    Change-Id: I77daa1beb197b63b1c2f281b8414ac4ae4b5b03c
    Add support for HAL_PIXEL_FORMAT_YCbCr_420_888
    
    - Add fields to CpuConsumer::LockedBuffer for new information
    - New lock methods for GraphicBuffer and GraphicBufferMapper for
      the format
    
    Bug: 8734880
    Change-Id: If31f82c62d64b6942cf4cc6e5715585c03273f12
    eclair snapshot
    fix [2068105] implement queueBuffer/lockBuffer/dequeueBuffer properly
    
    Rewrote SurfaceFlinger's buffer management from the ground-up.
    The design now support an arbitrary number of buffers per surface, however the current implementation is limited to four. Currently only 2 buffers are used in practice.
    
    The main new feature is to be able to dequeue all buffers at once (very important when there are only two).
    
    A client can dequeue all buffers until there are none available, it can lock all buffers except the last one that is used for composition. The client will block then, until a new buffer is enqueued.
    
    The current implementation requires that buffers are locked in the same order they are dequeued and enqueued in the same order they are locked. Only one buffer can be locked at a time.
    
    eg. Allowed sequence:   DQ, DQ, LOCK, Q, LOCK, Q
    eg. Forbidden sequence: DQ, DQ, LOCK, LOCK, Q, Q
    fix a memory corruption where a SF Client could be used after it's been destroyed
    implement dimming with a texture on msm7k so it uses copybit
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    surfaceflinger: add getDisplayStats() method
    
    This is used by media service to schedule video frames at the
    proper time, based on precise vsync timings.
    
    Bug: 14659809
    Change-Id: I1a90603f3dc09dca9aa4f90a3aa845fab56e0a5e
    opengl: Add GLES31 and GLES31Ext class templates
    
    Bug: 15028495
    Change-Id: I276d04f029d441e092428fad72f09ca15e1d233a
    dumpstate: switch to HAL static libraries
    
    Change-Id: I865a0b4b4a84a2d54a239e7b09874287f0c1ad56
    move services executables sources in their respective src folder
    
    Change-Id: Ic65434a26c7fed1699abf0851fec6faa40e09c0c
    Add skeleton of input flinger.
    
    Change-Id: I7f25080e446d4d3d9de9b18fe432a09bc751e0d9
    frameworks_native: Add back PixelFormatInfo
    
    Change-Id: Ie6ee04bd4711ac412f291c0f5db2b32db74c5da0
    libgui: Add a test for SRGB surfaces
    
    Add SRGBTest.RenderToSRGBSurface, which validates that passing the
    SRGB colorspace attributes to eglCreateWindowSurface actually
    results in an SRGB surface by comparing the output values to those
    of a standard RGB surface.
    
    Change-Id: I3d5fef8070ed8fa2357ddd1c5fcc849ae3fbd12a
    get rid of HAL pixelformats 5551 and 4444
    
    Change-Id: I39409103144c1ba09078c4ddc323a58987fb09ea
    get rid of PixelFormatInfo and simplify things
    
    Change-Id: I025a362cc12d5b9b794fac14be500e25aab65396
    get rid of PIXEL_FORMAT_A_8
    
    Change-Id: I4e409a69c01b95b48f20112084dd927e2d043407
    deprecate L_8, LA_88 and RGB_332 in sdk
    
    re-add support for pixelformats L_8, LA_88 and RGB_332 in libui
    for backward compatibility.
    
    This may or may not fix 6058926
    
    Bug: 6049685
    Change-Id: Ic1b8b4cc994522f7fe664da64c0ef76b98bc6d53
    remove libui's dependency on libpixelflinger
    
    this also remove support for unused pixelformats.
    
    Change-Id: I2c759a6d2daa740f3786ed62095def8047ae933d
    Adding SurfaceEncoder for encoding FilterFrames
    
    Adding SurfaceEncoder which can be used to encode
    custom frame data. In a sense, it is reverse
    of what SurfaceTexture does.
    
    SurfaceEncoder takes in frames from a native window and
    passes them to an encoder, thus acting like a MediaSource.
    It uses GRAlloc buffers underneath for passing data.
    The client side sets the geometry, format in the beginning,
    which cannot be changed while the recording is going on.
    
    Currently, there is no common pixel format that both
    GRAlloc and HAL understand.
    Also, the encoder cannot encode using the data from the GRAlloc
    buffers.
    
    The SurfaceEncoder_test examines mainly the buffer passage
    since true encoding cannot be done at this point.
    SimpleDummyRecorder 'reads' the frames in the same thread
    as the start(), whereas DummyRecorder 'reads' in a separate
    thread much like the MPEG4Writer. The test with DummyRecorder
    is much closer to the real encoding implementation.
    
    Related to bug id: 4529323
    
    Change-Id: I58ec19a150f8fe4d6195196dc44f55002b46c7c8
    fix a bug I introduced recently where YUV formats would crash the system
    get rid off the YUV formats at the libui layer
    eclair snapshot
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    take the "transparent region" into account for blending
    
    until now it was only used to discard a layer entirely.
    we're now reducing the size of the layer if it is still
    visible, if possible.
    
    this works for instance when a surfaceView is used and
    only the menu bar is displayed over it.
    
    Change-Id: I3f5527c5cd1e69ecc968272c8948f1513ada8c55
    reformat Rect.{cpp|h}
    
    Change-Id: I45b1f6646541a1abacce1e70df00a770e47b820e
    improve [un]marshalling of non-binder objects
    
    this change introduces a new class LightFlattenable<> which is
    a protocol to flatten simple objects that don't require
    binders or file descriptors; the benefit of this protocol is that
    it doesn't require the objects to have a virtual table and give us
    a consitant way of doing this.
    
    we also introduce an implementation of this protocol for
    POD structures, LightFlattenablePod<>.
    
    Parcel has been update to handle this protocol automatically.
    
    Sensor, Rect, Point and Region now use this new protocol.
    
    Change-Id: Icb3ce7fa1d785249eb666f39c2129f2fc143ea4a
    minor Rect.h cleanup
    
    add getBounds(), getWidth(), getHeight(), width() and height()
    are kept for backward compatibility.
    
    Change-Id: I83837abf17dc2f8bded1beff73430e8c7d9bbdb3
    SurfaceFlinger: add a crop to the layer state
    
    This change adds a crop rectangle specified in window coordinates to the layer
    state.  The all window pixels outside this crop rectangle are treated as though
    they were fully transparent.  This change also adds the plumbing necessary for
    WindowManager to set that crop.
    
    Change-Id: I582bc445dc8c97d4c943d4db8d582a6ef5a66081
    libui: add the Rect::transform method
    
    This change adds a method to Rect to transform a rectangle by a graphics HAL
    transform.
    
    Change-Id: Ic0d0988e731bdb5662faee41a5927b1242891658
    Bug: 6299171
    fix the float Rect in OpenGLRenderer to handle NANs
    
    - we want functions like isEmpty() to return true if NANs are
    involved in the Rect
    
    - also clean-up the intersect familly of calls
    
    - minor cleanup in the int32_t Rect as well
    
    These played a role in http://b/5331198.
    
    Bug: 5331198
    
    Change-Id: I5369725ab482e4b83da9f1bd4cee5256e5de75b2
    Add ANativeWindow API for directly drawing to the surface bits.
    
    Also other cleanup and fixes:
    
    - We now properly set the default window format to 565.
    - New APIs to set the window format and flags from native code.
    - Tweaked glue for simpler handling of the "destroy" message.
    - Um, other stuff.
    
    Change-Id: Id7790a21a2fa9a19b91854d225324a7c1e7c6ade
    eclair snapshot
    donut snapshot
    oops forgot these changes in the previous merge. fixes build
    minor clean-up to Rect and Point.
    
    - return "const" objects for overloaded operators to disallow constructs like: (a+b) = c;
    - don't return references to non-static members, it's not always safe.
    - Point.cpp was empty, so get rid of it
    Region now has its own implementation instead of relying on SkRegion, which allows us to break libui's dependency on libcorecg.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add contains point method to Region
    
    Change-Id: I553433ff7ac39f14ffca8278960d2abc95b4dd63
    Make Flattenable not virtual
    
    Fallout from the Flattenable change, update all its uses.
    
    Additionnaly, fix/tighten size checks when (un)flatten()ing
    things.
    
    Removed the assumption by some flattenables (e.g.: Fence)
    that the size passed to them would be exact (it can
    and will be larger in some cases)
    
    The code in Parcel is a bit complicated so that we don't
    have to expose the full implementation (and also to
    keep the code smallish).
    
    Change-Id: I0bf1c8aca2a3128491b4f45510bc46667e566dde
    latch transparent region hint only when we get a new frame
    
    since the transparent region hint really depends on the
    content of the window containing the SurfaceView
    (it's calculated by the view hierarchy based on
    overlapping views), it makes sense to latch it only when
    the content of the window (the app) changes.
    
    This should help fixing drawing artifacts when changing the
    layout of a window containing a SurfaceView.
    
    Bug: 8511430
    Change-Id: Ic3aa668495293cb4d82a2cd7dcf3b6a337287678
    Add createTJunctionFreeRegion
    
    T-junction free regions are useful for rendering regions with various
    geometric transformations, and the Region's span-ordered, sorted rect
    list supports T-junction free storage without modification.
    
    This approach creates a T-junction free region by splitting each
    rectangle that is part of a vertical T-junction. This approach is two
    pass (up and down) so that divisions can trickle up/down to other
    adjacent spans.
    
    Change-Id: Ifcf5e6fe0034c96b00ef09a4433b2b0fce8f4300
    strengthen region validation
    
    Change-Id: I75ee7bc4dd7a2f5357ac8994a23bc8b8bfb6eb44
    Add a way to retrieve a Region as a SharedBuffer
    
    Change-Id: Ia53cb905fbc88f899521658545f990fb9217b1e1
    change how we store Region data internally
    
    We used to keep the bounds of the region as a
    separate rectangle. Instead we now store it as the last
    element of the Vector<> of Rects.
    
    This has the benefit of being slightly more efficient when
    copying regions and reduces the overhead of small regions,
    but more importantly will allow us to export the underlaying
    SharedBuffer (eventually).
    
    Change-Id: I80790e4fb1a09a747a5616000cfef852ac4ce9e9
    improve [un]marshalling of non-binder objects
    
    this change introduces a new class LightFlattenable<> which is
    a protocol to flatten simple objects that don't require
    binders or file descriptors; the benefit of this protocol is that
    it doesn't require the objects to have a virtual table and give us
    a consitant way of doing this.
    
    we also introduce an implementation of this protocol for
    POD structures, LightFlattenablePod<>.
    
    Parcel has been update to handle this protocol automatically.
    
    Sensor, Rect, Point and Region now use this new protocol.
    
    Change-Id: Icb3ce7fa1d785249eb666f39c2129f2fc143ea4a
    Preliminary support for clipRect(Rect, Op)
    
    This adds basic support for clip regions. It is currently disabled at compile
    time. Enabling clip regions will require setting up a stencil buffer.
    
    Change-Id: I638616a972276e38737f8ac0633692c3845eaa74
    get rid of dependency on copybit HAL module
    
    Change-Id: Ia608099a2426c11a91d33063ba53c93e1eccb428
    Remove a dependency of Region (libui) on Parcel (libbinder).
    eclair snapshot
    Region::makeBoundsSelf() efficiently turns a region to its bounds
    return bounds Rect by value
    make sure the Region code disallows constructs like "(a+b)=c;", which is somewhat meaningless.
    move libbinder's header files under includes/binder
    Region now has its own implementation instead of relying on SkRegion, which allows us to break libui's dependency on libcorecg.
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    improve [un]marshalling of non-binder objects
    
    this change introduces a new class LightFlattenable<> which is
    a protocol to flatten simple objects that don't require
    binders or file descriptors; the benefit of this protocol is that
    it doesn't require the objects to have a virtual table and give us
    a consitant way of doing this.
    
    we also introduce an implementation of this protocol for
    POD structures, LightFlattenablePod<>.
    
    Parcel has been update to handle this protocol automatically.
    
    Sensor, Rect, Point and Region now use this new protocol.
    
    Change-Id: Icb3ce7fa1d785249eb666f39c2129f2fc143ea4a
    donut snapshot
    minor clean-up to Rect and Point.
    
    - return "const" objects for overloaded operators to disallow constructs like: (a+b) = c;
    - don't return references to non-static members, it's not always safe.
    - Point.cpp was empty, so get rid of it
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Show build config in dumpsys SurfaceFlinger
    
    This adds a line to the "dumpsys SurfaceFlinger" output that shows
    build-time configuration values.
    
    Example:
     Build configuration: [sf HAS_CONTEXT_PRIORITY] [libui] \
      [libgui USE_FENCE_SYNC]
    
    Bug 7206633
    
    Change-Id: Ibe1856b459d34a4be6ee83a4ebfd2807e6cc68a0
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    Remove frameworks/base/im since these stuff are only used by IM app
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    frameworks_native: Add back PixelFormatInfo
    
    Change-Id: Ie6ee04bd4711ac412f291c0f5db2b32db74c5da0
    Add two new display info fields
    
    This adds SurfaceFlinger's app VSYNC offset and buffer deadline
    values to DisplayInfo.
    
    Bug 14612039
    
    Change-Id: Ie0ab21d388fe2764f2b6f71bd1cefa33dc861a73
    Enable changing display configuration
    
    This allows querying and switching display device configurations
    through the ISurfaceComposer/SurfaceComposerClient interface.
    
    Bug: 14320401
    Change-Id: I8c22165698950e5da32204c1c4da92122f91a715
    get rid of PixelFormatInfo and simplify things
    
    Change-Id: I025a362cc12d5b9b794fac14be500e25aab65396
    SurfaceFlinger: add support for secure displays
    
    This change adds support for displays that are not allowed to display surfaces
    with the eSecure flag set.  All non-virtual displays are considered secure,
    while virtual displays have their secure-ness specified at creation time.
    
    Bug: 7368436
    Change-Id: I81ad535d2d1e5a7ff78269017e85b111f0098500
    get rid of the shared-memory control block
    
    Change-Id: If814060aca1d2ff2619d4adcd57296983d207f7f
    Mouse pointer integration.
    
    Added support for loading the pointer icon from a resource.
    
    Moved the system server related bits of the input manager out
    of libui and into libinput since they do not need to be linked into
    applications.
    
    Change-Id: Iec11e0725b3add2b905c51f8ea2c3b4b0d1a2d67
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Make Flattenable not virtual
    
    Fallout from the Flattenable change, update all its uses.
    
    Additionnaly, fix/tighten size checks when (un)flatten()ing
    things.
    
    Removed the assumption by some flattenables (e.g.: Fence)
    that the size passed to them would be exact (it can
    and will be larger in some cases)
    
    The code in Parcel is a bit complicated so that we don't
    have to expose the full implementation (and also to
    keep the code smallish).
    
    Change-Id: I0bf1c8aca2a3128491b4f45510bc46667e566dde
    make the warning timout of Fence::waitForever() implicit and longer
    
    - timeout is now 3 seconds instead of 1
    - simplifies the API a bit
    - allows us to change/tweak this timeout globaly
    
    Bug: 8988871
    
    Change-Id: I8d3c6ec43a372f602fb3f29856710339f86c0ec9
    SurfaceFlinger: refactor frame time tracking
    
    This change moves the frame time history tracking code out of Layer and into a
    new class called FrameTracker.  It also changes the tracking to use signal
    timestamps from fences when available for more accurate results.
    
    Change-Id: I323c5f075c58bf86ce363b52af885ad0f6365f2b
    Fence didn't manager sync_wait error codes properly
    
    error codes are returned in errno, this caused ::waitForwever()
    to only wait for 1 second and return improper error code (-1).
    
    needed to help debugging 7316632
    
    Bug: 7316632
    Change-Id: Ie144f614a88393393972a3a770c6b4b0581f961a
    Add Fence::waitForever which logs a warning timeout, and use it
    
    Bug: 7217641
    Change-Id: If0c1a613ead307c4045a47824174bf40c72bc7d7
    ui/Fence: change the TIMEOUT_NEVER value to -1
    
    Change-Id: I3ef0a4c06f80990b53a8bf2eda6edbfcbefd0f34
    Pass fences with buffers from SurfaceTextureClient
    
    Change-Id: I09b49433788d01e8b2b3684bb4d0112be29538d3
    Return fence to client in dequeuBuffer
    
    Change-Id: Ic19750793ad993f0e85391f3cabd743ba565d4c9
    Transfer HWC release fences to BufferQueue
    
    After a HWC set, each SurfaceFlinger Layer retrieves the release fence
    HWC returned and gives it to the layer's SurfaceTexture. The
    SurfaceTexture accumulates the fences into a merged fence until the
    next updateTexImage, then passes the merged fence to the BufferQueue
    in releaseBuffer.
    
    In a follow-on change, BufferQueue will return the fence along with
    the buffer slot in dequeueBuffer. For now, dequeueBuffer waits for the
    fence to signal before returning.
    
    The releaseFence default value for BufferQueue::releaseBuffer() is
    temporary to avoid transient build breaks with a multi-project
    checkin. It'll disappear in the next change.
    
    Change-Id: Iaa9a0d5775235585d9cbf453d3a64623d08013d9
    libui: add the Fence class
    
    This change adds the Fence class to libui for to wrap the libsync
    functionality.
    
    Change-Id: I93a31baeee608b93c14da807a32013dabf783f84
    Fix undefined behavior (not returning a value from a function with return).
    
    Bug: 17379740
    
    This function was missing a return statement, even though it declares a return
    type. This is undefined behavior, which clang miscompiled into just falling
    through to a later function in some cases. Adding the return statement
    fixes the undefined behavior (and probably fixes a bug too).
    
    Change-Id: I05c03b6473b831769dc4fa8b5ba43fb4249f7626
    improve mat44 implementation
    
    this will make it easier to create matrices of different sizes
    
    Change-Id: I2c1771ba0823c42d737762e2dfc2cd47eb302767
    vector and matrix classes for graphics use
    
    - this implements vec2, vec3, vec4, which are float vectors
    of size 2, 3 and 4 respectively.
    
    the code allows easy instantiation of vectors of a different
    type via the tvec{2|3|4}<T> template classes.
    
    - this also implements mat4 which is a float 4x4 matrix. the
    tmat44<T> template class allows easy instantiation of a
    4x4 matrix of a different value_type.
    
    The vector types have some minimal support for the
    glsl style swizzled access; for instance:
    
      vec4 u;
      vec3 v = u.xyz;
    
    only .x, .xy, .xyz and their .stpq / .rgba equivalent are
    supported.
    
    most operators are supported on both vector and matrices:
    arithmetic, unary, compound assignment and comparison
    (bit-wise operators NOT supported).
    
    - operations available on vectors include:
    dot, length, distance, normalize and cross
    
    - operations available on matrices include:
    transpose, inverse, trace
    
    - and a few utilities to create matrices:
    ortho, frustum, lookAt
    
    Change-Id: I64add89ae90fa78d3f2f59985b63495575378635
    Adding render stats APIs to UiAutomation (framework native).
    
    bug:12927198
    
    Change-Id: Ibb1c07f7d89e11281e5c1f27f412a29ac6f9c4ab
    improve mat44 implementation
    
    this will make it easier to create matrices of different sizes
    
    Change-Id: I2c1771ba0823c42d737762e2dfc2cd47eb302767
    vector and matrix classes for graphics use
    
    - this implements vec2, vec3, vec4, which are float vectors
    of size 2, 3 and 4 respectively.
    
    the code allows easy instantiation of vectors of a different
    type via the tvec{2|3|4}<T> template classes.
    
    - this also implements mat4 which is a float 4x4 matrix. the
    tmat44<T> template class allows easy instantiation of a
    4x4 matrix of a different value_type.
    
    The vector types have some minimal support for the
    glsl style swizzled access; for instance:
    
      vec4 u;
      vec3 v = u.xyz;
    
    only .x, .xy, .xyz and their .stpq / .rgba equivalent are
    supported.
    
    most operators are supported on both vector and matrices:
    arithmetic, unary, compound assignment and comparison
    (bit-wise operators NOT supported).
    
    - operations available on vectors include:
    dot, length, distance, normalize and cross
    
    - operations available on matrices include:
    transpose, inverse, trace
    
    - and a few utilities to create matrices:
    ortho, frustum, lookAt
    
    Change-Id: I64add89ae90fa78d3f2f59985b63495575378635
    DO NOT MERGE GraphicBufferAllocator: make frees async
    
    This change makes GraphicBufferAllocator::free queue a job to another thread to
    perform the actual free operation.  This prevents potentially slow free
    operations from blocking rendering.
    
    Bug: 7675940
    Change-Id: Id61099d66bb4c3949d04184e0d7f192ac18076b4
    [3171580] don't automatically log GraphicBuffer allocation failures
    
    some of these failures are not fatal and even expected in some cases
    so they should not emit a dump in the log in those cases.
    
    Change-Id: Idcfa252e3bfa9d74e27fe4ad8f8623aa01aa9c5e
    when a zero dimension buffer is allocated, turn the allocation into
    a 1x1 buffer instead of Nx1 (or 1xN)
    
    Change-Id: I27eeb15e83e13002dd9405f4e52b54f7dffc0fe7
    fix [2545826] calling into gralloc with external lock held
    
    Change-Id: I2d0e017382404c684c768a0dd0423d574213f10a
    eclair snapshot
    fix [2167050] glTexImage2D code path buggy in SurfaceFlinger
    
    When EGLImage extension is not available, SurfaceFlinger will fallback to using
    glTexImage2D and glTexSubImage2D instead, which requires 50% more memory and an
    extra copy. However this code path has never been exercised and had some bugs
    which this patch fix.
    
    Mainly the scale factor wasn't computed right when falling back on glDrawElements.
    We also fallback to this mode of operation if a buffer doesn't have the adequate
    usage bits for EGLImage usage.
    
    This changes only code that is currently not executed. Some refactoring was needed to
    keep the change clean. This doesn't change anything functionaly.
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    improve mat44 implementation
    
    this will make it easier to create matrices of different sizes
    
    Change-Id: I2c1771ba0823c42d737762e2dfc2cd47eb302767
    vector and matrix classes for graphics use
    
    - this implements vec2, vec3, vec4, which are float vectors
    of size 2, 3 and 4 respectively.
    
    the code allows easy instantiation of vectors of a different
    type via the tvec{2|3|4}<T> template classes.
    
    - this also implements mat4 which is a float 4x4 matrix. the
    tmat44<T> template class allows easy instantiation of a
    4x4 matrix of a different value_type.
    
    The vector types have some minimal support for the
    glsl style swizzled access; for instance:
    
      vec4 u;
      vec3 v = u.xyz;
    
    only .x, .xy, .xyz and their .stpq / .rgba equivalent are
    supported.
    
    most operators are supported on both vector and matrices:
    arithmetic, unary, compound assignment and comparison
    (bit-wise operators NOT supported).
    
    - operations available on vectors include:
    dot, length, distance, normalize and cross
    
    - operations available on matrices include:
    transpose, inverse, trace
    
    - and a few utilities to create matrices:
    ortho, frustum, lookAt
    
    Change-Id: I64add89ae90fa78d3f2f59985b63495575378635
    improve mat44 implementation
    
    this will make it easier to create matrices of different sizes
    
    Change-Id: I2c1771ba0823c42d737762e2dfc2cd47eb302767
    vector and matrix classes for graphics use
    
    - this implements vec2, vec3, vec4, which are float vectors
    of size 2, 3 and 4 respectively.
    
    the code allows easy instantiation of vectors of a different
    type via the tvec{2|3|4}<T> template classes.
    
    - this also implements mat4 which is a float 4x4 matrix. the
    tmat44<T> template class allows easy instantiation of a
    4x4 matrix of a different value_type.
    
    The vector types have some minimal support for the
    glsl style swizzled access; for instance:
    
      vec4 u;
      vec3 v = u.xyz;
    
    only .x, .xy, .xyz and their .stpq / .rgba equivalent are
    supported.
    
    most operators are supported on both vector and matrices:
    arithmetic, unary, compound assignment and comparison
    (bit-wise operators NOT supported).
    
    - operations available on vectors include:
    dot, length, distance, normalize and cross
    
    - operations available on matrices include:
    transpose, inverse, trace
    
    - and a few utilities to create matrices:
    ortho, frustum, lookAt
    
    Change-Id: I64add89ae90fa78d3f2f59985b63495575378635
    split-up Client.h out of SurfaceFlinger.h
    
    Change-Id: I1993bf23e417163749d886283563a93d50b361b4
    PermissionCache caches permission checks
    
    This is intended to absorb the cost of the IPC
    to the permission controller.
    Cached permission checks cost about 3us, while
    full blown ones are two orders of magnitude slower.
    
    CAVEAT: PermissionCache can only handle system
    permissions safely for now, because the cache is
    not purged upon global permission changes.
    
    Change-Id: I8b8a5e71e191e3c01e8f792f253c379190eee62e
    Some hardening of isolated processes by restricting access to services.
    
    Services now must explicitly opt in to being accessed by isolated
    processes.  Currently only the activity manager and surface flinger
    allow this.  Activity manager is needed so that we can actually
    bring up the process; SurfaceFlinger is needed to be able to get the
    display information for creating the Configuration.  The SurfaceFlinger
    should be safe because the app doesn't have access to the window
    manager so can't actually get a surface to do anything with.
    
    The activity manager now protects most of its entry points against
    isolated processes.
    
    Change-Id: I0dad8cb2c873575c4c7659c3c2a7eda8e98f46b0
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Allow META* macros outside of the framework
    
    The META* macros are useful outside of the framework
    for other systems implementing Binder interfaces, but
    they depend upon the android namespace. This includes
    the appropriate namespace operations, which should be
    sane even in that android namespace.
    
    Change-Id: If600156c65191f51f487d0ee301d9f9f532b263d
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libbinder: include sys/uio.h instead of cutils/uio.h
    
    libbinder is only built for the target, where bionic will provide
    uio, so it does not need to include the libcutils wrapper around
    uio for windows.
    
    Change-Id: Ifc2dd353bf7ed51bf08ec0ae91c43b12830f94ba
    libutils clean-up
    
    Change-Id: I6ff4cfc736751de2912c697f954e45e275f2d386
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Remove Parcel::writeIntPtr.
    
    All uses of this API have been removed. It should
    never have been made public in the first place.
    
    bug: 15424960
    Change-Id: Id07d24ec95b2b393e6da138a7e8a9a4ecebeca94
    Remove Parcel::writeIntPtr.
    
    All uses of this API have been removed. It should
    never have been made public in the first place.
    
    bug: 15424960
    
    (cherry picked from commit 7da40c0a84dd89e92201448dd5ed3387dc94df2b)
    
    Change-Id: I8d89f62dbdaee7149ef908e0c97417b85e0c48a2
    Add support for writing byte arrays to parcels
    
    b/13418320
    
    Cherrypicked from f0190bff38b6c29abbfc4a877442f71fc3d7dad8
    https://googleplex-android-review.git.corp.google.com/#/c/433320/
    
    Change-Id: I2285df9e9d3dc8a6a54055b13b352b81660bf45d
    Add support for writing byte arrays to parcels
    
    b/13418320
    
    Change-Id: I2285df9e9d3dc8a6a54055b13b352b81660bf45d
    Binder: Use 64 bit pointers in 32 processes if selected by the target
    
    Uses new kernel header where void * has been replaced by binder_uintptr_t
    
    Change-Id: Icfc67c2a279269f700343bd9246fd7cb94efe2c1
    Binder: Make binder portable
    
    Changes include
    - Binder attempts to cast pointers to a int datatype
      which is not sufficient on a 64-bit platform.
    
    - This patch introduces new read/write functions into
      Parcel that allow pointers to be written using the
      uintptr_t datatype for compile-time data type size
      selection.
    
    -  Change access specifier for the methods above.
    
    -  Binder uses the 64bit android_atomic_release_cas64
       (aka cmpxchg)
    
    Change-Id: I595280541e0ba1d19c94b2ca2127bf9d96efabf1
    Signed-off-by: Matthew Leach <matthew.leach@arm.com>
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    Native counterpart of new power manager method
    
    Cherrypicked from master.
    
    b/9464621
    
    Change-Id: I54c0ed50a57ac870da91db8589a73a2c792dbd8d
    Native counterpart of new power manager method
    
    Change-Id: I54c0ed50a57ac870da91db8589a73a2c792dbd8d
    Add support for sending and receiving ParcelFileDescriptors from native Binder code
    
    Change-Id: I7f308e28ebac0755628e19c9b4d0d7399341b435
    Make Flattenable not virtual
    
    Fallout from the Flattenable change, update all its uses.
    
    Additionnaly, fix/tighten size checks when (un)flatten()ing
    things.
    
    Removed the assumption by some flattenables (e.g.: Fence)
    that the size passed to them would be exact (it can
    and will be larger in some cases)
    
    The code in Parcel is a bit complicated so that we don't
    have to expose the full implementation (and also to
    keep the code smallish).
    
    Change-Id: I0bf1c8aca2a3128491b4f45510bc46667e566dde
    make sure Parcel handles 0-sized LightFlatenables
    
    Change-Id: Ib30a1c0228f8a938abaa0c7c8a6ba32ffd971121
    improve [un]marshalling of non-binder objects
    
    this change introduces a new class LightFlattenable<> which is
    a protocol to flatten simple objects that don't require
    binders or file descriptors; the benefit of this protocol is that
    it doesn't require the objects to have a virtual table and give us
    a consitant way of doing this.
    
    we also introduce an implementation of this protocol for
    POD structures, LightFlattenablePod<>.
    
    Parcel has been update to handle this protocol automatically.
    
    Sensor, Rect, Point and Region now use this new protocol.
    
    Change-Id: Icb3ce7fa1d785249eb666f39c2129f2fc143ea4a
    Fix a leak in Parcel::writeBlob.
    
    Was mistakenly assuming that Parcel::writeFileDescriptor took
    ownership of the fd that was passed in.  It does not!
    Added some comments and a default parameter to allow the caller
    to specify whether it wishes the Parcel to take ownership.
    
    Bug: 5563374
    Change-Id: I5a12f51d582bf246ce90133cce7690bb9bca93f6
    Fix a leak in Parcel::writeBlob.
    
    Was mistakenly assuming that Parcel::writeFileDescriptor took
    ownership of the fd that was passed in.  It does not!
    Added some comments and a default parameter to allow the caller
    to specify whether it wishes the Parcel to take ownership.
    
    Bug: 5563374
    Change-Id: I5a12f51d582bf246ce90133cce7690bb9bca93f6
    Fix handling of "allow fds" state.
    
    Didn't take into account nesting of bundles.  Boo.
    
    Change-Id: Ic8cf21ad8d6f4938a3e105128624c9d162310d01
    Transfer large bitmaps using ashmem.
    Bug: 5224703
    
    Change-Id: If385a66adf4c6179a0bb49c0e6d09a9567e23808
    Add mechanism for Parcel to not allow FDs to be written to it.
    
    This is to help implement issue #5224703.
    
    Change-Id: I026a5890495537d15b57fe61227a640aac806d46
    Revert "Transfer large bitmaps using ashmem. Bug: 5224703"
    
    This reverts commit 56c58f66b97d22fe7e7de1f7d9548bcbe1973029
    
    This CL was causing the browser to crash when adding bookmarks, visiting the bookmarks page, and sharing pages (see bug http://b/issue?id=5369231
    Revert "Transfer large bitmaps using ashmem. Bug: 5224703"
    
    This reverts commit 56c58f66b97d22fe7e7de1f7d9548bcbe1973029
    
    This CL was causing the browser to crash when adding bookmarks, visiting the bookmarks page, and sharing pages (see bug http://b/issue?id=5369231
    Transfer large bitmaps using ashmem.
    Bug: 5224703
    
    Change-Id: Ic7481dd9f173986f085a8bbdcc59bbe9830d7a44
    Parcel::appendFrom({const } Parcel *parcel, size_t, size_t)
    
    As far as I can tell "parcel" isn't actually modified by the implementation.
    
    Change-Id: Ib806eefdc13c97b932773e1dc9ca3a4aad4422b2
    Replace several IPCThreadState::get() lookups with one.
    
    Also, make StrictMode's ThreadLocal final.
    
    Change-Id: I08d400ed254fa67bb7a3dae1227f205a54c00df0
    More StrictMode work, keeping Binder & BlockGuard's thread-locals in-sync.
    
    Change-Id: Ia67cabcc17a73a0f15907ffea683d06bc41b90e5
    Add Parcel::readExceptionCode() and Parcel::writeNoException()
    
    Add native Parcel methods analogous to the Java versions.
    
    Currently, these don't do much, but upcoming StrictMode work changes
    the RPC calling conventions in some cases, so it's important that
    everybody uses these consistently, rather than having a lot of code
    trying to parse RPC responses out of Parcels themselves.
    
    As a summary, the current convention that Java Binder services use is
    to prepend the reply Parcel with an int32 signaling the exception
    status:
    
         0: no exception
         -1: Security exception
         -2: Bad Parcelable
         -3: ...
         -4: ...
         -5: ...
    
    ... followed by Parceled String if the exception code is non-zero.
    
    With an upcoming change, it'll be the case that a response Parcel can,
    non-exceptionally return rich data in the header, and also return data
    to the caller.  The important thing to note in this new case is that
    the first int32 in the reply parcel *will not be zero*, so anybody
    manually checking for it with reply.readInt32() will get false
    negative failures.
    
    Short summary: If you're calling into a Java service and manually
    checking the exception status with reply.readInt32(), change it to
    reply.readExceptionCode().
    
    Change-Id: I23f9a0e53a8cfbbd9759242cfde16723641afe04
    Start of work on passing around StrictMode policy over Binder calls.
    
    This is (intendend to be) a no-op change.
    
    At this stage, Binder RPCs just have an additional uint32 passed around
    in the header, right before the interface name.  But nothing is actually
    done with them yet.  That value should right now always be 0.
    
    This now boots and seems to work.
    
    Change-Id: I135b7c84f07575e6b9717fef2424d301a450df7b
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    donut snapshot
    bring the native_handle stuff back from master_gl
    move libbinder's header files under includes/binder
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@127101
    Initial Contribution
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Follow framework change to track started ops by proc.
    
    Change-Id: Ibbce3bf6556f45751c74bab045b46377e56bff9b
    Fixes to native app ops services
    
    Bug: 8181262
    Change-Id: I3d3f20453f6c6f2756c988363c5b5453ef309cb6
    App ops: new native access API.
    
    This is to help implementation of bug #8181262 and maybe
    bug #8181261
    
    Note the current code has not yet been tested; it is only
    known to compile at this point.
    
    Change-Id: I489674c96d0d3fc0ddacc92611931a19a9ee5230
    MemoryHeapBase: Save and binderize the offset
    
    The offset that is used in the creation of the MemoryHeapBase must be saved, so
    that it can be used to recreate the Heap when an IMemory object is passed
    across process boundary through the binder.
    
    Change-Id: Ie618fb5c0718e6711f55ed9235616fd801e648dc
    Signed-off-by: Anu Sundararajan <sanuradha@ti.com>
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    fix [2599939] "cannot play video" after open/close a video player a dozen of times
    
    get rid off the MAP_ONCE flag is MemoryHeapBase (as well as it's functionality),
    this feature should not be used anymore.
    
    the software renderer was incorrectly using the default ctor which set MAP_ONCE,
    causing the leak. the software renderer itself is incorrectly used while coming
    back from sleep.
    
    Change-Id: I123621f8d140550b864f352bbcd8a5729db12b57
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    add noteResetVideo/Audio to IBatteryStats
    
    Bug: 12979595
    Change-Id: Ida474e539a3af0a85ec157a66bbf986430c8020e
    update battery status for audio/video
    
    Bug: 12979595
    
    Change-Id: Ic8e8d625becc6d1050f840ad63b7423f388eeba3
    Cleanup Binder interface between sensorservice and BatteryStats
    
    Change-Id: Ia507160a2534059afe93849c8efc8407a046b50e
    App ops: new native access API.
    
    This is to help implementation of bug #8181262 and maybe
    bug #8181261
    
    Note the current code has not yet been tested; it is only
    known to compile at this point.
    
    Change-Id: I489674c96d0d3fc0ddacc92611931a19a9ee5230
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Binder: Use 64 bit pointers in 32 processes if selected by the target
    
    Uses new kernel header where void * has been replaced by binder_uintptr_t
    
    Change-Id: Icfc67c2a279269f700343bd9246fd7cb94efe2c1
    Make getCallingUid/Pid const.
    
    Change-Id: I1853b21eaa45d85274189dfd72f73fec48d0d6b7
    binder: add polling / single-threaded operation
    
    This is currently safe to do only for processes that disallow any binder
    threads to be created: setThreadPoolMaxThreadCount(0).
    
    Change-Id: I8a27f3cf26f4d51edb7f222af487ac256cbcab65
    No longer need "original calling uid".
    
    Change-Id: Ifc4a89dd088609a5a8553f6ac6553174e09e8222
    Multi-user - 1st major checkin
    
    Switching activity stacks
    Cache ContentProvider per user
    Long-press power to switch users (on phone)
    
    Added ServiceMap for separating services by user
    Launch PendingIntents on the correct user's uid
    Fix task switching from Recents list
    AppWidgetService is mostly working.
    
    Commands added to pm and am to allow creating and switching profiles.
    
    Change-Id: I15810e8cfbe50a04bd3323a7ef5a8ff4230870ed
    Framework-side support for Dalvik "isSensitiveThread" hook.
    
    Used in lock contention stats.
    
    Bug: 3226270
    Change-Id: Ie6f58d130a29079a59bdefad40b80304d9bc3623
    Don't propagate StrictMode over one-way Binder calls.
    
    This was causing stack stitching problems where a one-way call with
    violations followed by a two-way call without violations was getting
    the previous one-way call's violation stack stitched on to the second
    caller's stack.
    
    The solution is a little more indirect than I would've liked
    (preserving the binder's onTransact flags until enforceInterface) but
    was seemingly necessary to work without changing the AIDL compiler.
    It should also be sufficiently cheap, since no new calls to
    thread-local IPCThreadState lookups were required.  The additional
    work is just same-thread getter/setters on the existing
    IPCThreadState.
    
    Change-Id: I4b6db1d445c56e868e6d0d7be3ba6849f4ef23ae
    Start of work on passing around StrictMode policy over Binder calls.
    
    This is (intendend to be) a no-op change.
    
    At this stage, Binder RPCs just have an additional uint32 passed around
    in the header, right before the interface name.  But nothing is actually
    done with them yet.  That value should right now always be 0.
    
    This now boots and seems to work.
    
    Change-Id: I135b7c84f07575e6b9717fef2424d301a450df7b
    Propagate background scheduling class across processes.
    
    This is a very simply implementation: upon receiving an IPC, if the handling
    thread is at a background priority (the driver will have taken care of
    propagating this from the calling thread), then stick it in to the background
    scheduling group.  Plus an API to turn this off for the process, which is
    used by the system process.
    
    This also pulls some of the code for managing scheduling classes out of
    the Process JNI wrappers and in to some convenience methods in thread.h.
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Fixes to native app ops services
    
    Bug: 8181262
    Change-Id: I3d3f20453f6c6f2756c988363c5b5453ef309cb6
    App ops: new native access API.
    
    This is to help implementation of bug #8181262 and maybe
    bug #8181261
    
    Note the current code has not yet been tested; it is only
    known to compile at this point.
    
    Change-Id: I489674c96d0d3fc0ddacc92611931a19a9ee5230
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Bring back overloading to print String8/16.
    
    Change-Id: Iecab20db2b8574d5f1e6fdefdc2c8d4ce6c37121
    libutils clean-up
    
    Change-Id: I6ff4cfc736751de2912c697f954e45e275f2d386
    eclair snapshot
    some work to try to reduce the code size of some native libraries
    
    - make sure that all binder Bn classes define a ctor and dtor in their respective library.
      This avoids duplication of the ctor/dtor in libraries where these objects are instantiated.
      This is also cleaner, should we want these ctor/dtor to do something one day.
    
    - same change as above for some Bp classes and various other non-binder classes
    
    - moved the definition of CHECK_INTERFACE() in IInterface.h instead of having it everywhere.
    
    - improved the CHECK_INTERFACE() macro so it calls a single method in Parcel, instead of inlining its code everywhere
    
    - IBinder::getInterfaceDescriptor() now returns a "const String16&" instead of String16, which saves calls to String16 and ~String16
    
    - implemented a cache for BpBinder::getInterfaceDescriptor(), since this does an IPC. HOWEVER, this method never seems to be called.
      The cache makes BpBinder bigger, so we need to figure out if we need this method at all.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Remove obsolete comment
    
    Change-Id: I8b040e4b2e968fd0754e15dcf9f899fbfe210b6e
    Add callback hack to find out when to reload system properties.
    
    Every IBinder object can accept a new transaction to tell it that
    it might want to reload system properties, and in the process
    anyone can register a callback to be executed when this happens.
    
    Use this to reload the trace property.
    
    This is very much ONLY for debugging.
    
    Change-Id: I55c67c46f8f3fa9073bef0dfaab4577ed1d47eb4
    Binder linkage no longer depends on JNI objrefs as persistent tokens
    
    There are two areas that have changed to eliminate the assumption that
    local jobject references are both canonical and persistent:
    
    1. JavaBBinderHolder no longer holds onto and reuses it parent object
    reference per se.  Since the underlying JavaBBinder object holds a
    real global ref, this was redundant anyway.  Now, for purposes of its
    transient need to perform JNI operations, it simply uses the current
    jobject ref(s) passed during method invocation, and no longer attempts
    to hold these refs beyond the scope of a single invocation.
    
    2. Binder obituaries no longer assume that a jobject reference to a
    recipient will always compare == as a 32-bit value with any future
    reference to the same object.  The implementation now asks Dalvik
    whether object references match.
    
    This amended patch fixes the earlier bug around races between
    remote binder death cleanup and local explicit unregistration of
    VM-side death recipients.
    
    Bug 2090115
    
    Change-Id: I70bd788a80ea953632b1f466f385ab6b78ef2913
    Revert "Binder linkage no longer depends on JNI objrefs as persistent tokens"
    
    This reverts commit c2d55dd89743c8a38deb809f3cdf1ad2d1dbac2b.
    Revert "Binder linkage no longer depends on JNI objrefs as persistent tokens"
    
    This reverts commit c2d55dd89743c8a38deb809f3cdf1ad2d1dbac2b.
    Binder linkage no longer depends on JNI objrefs as persistent tokens
    
    There are two areas that have changed to eliminate the assumption that
    local jobject references are both canonical and persistent:
    
    1. JavaBBinderHolder no longer holds onto and reuses it parent object
    reference per se.  Since the underlying JavaBBinder object holds a
    real global ref, this was redundant anyway.  Now, for purposes of its
    transient need to perform JNI operations, it simply uses the current
    jobject ref(s) passed during method invocation, and no longer attempts
    to hold these refs beyond the scope of a single invocation.
    
    2. Binder obituaries no longer assume that a jobject reference to a
    recipient will always compare == as a 32-bit value with any future
    reference to the same object.  The implementation now asks Dalvik
    whether object references match.
    
    Bug 2090115
    
    Change-Id: If62edd554d0a9fbb2d2977b0cbf8ad7cc8e2e68d
    Propagate background scheduling class across processes.
    
    This is a very simply implementation: upon receiving an IPC, if the handling
    thread is at a background priority (the driver will have taken care of
    propagating this from the calling thread), then stick it in to the background
    scheduling group.  Plus an API to turn this off for the process, which is
    used by the system process.
    
    This also pulls some of the code for managing scheduling classes out of
    the Process JNI wrappers and in to some convenience methods in thread.h.
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Remove global variables from ProcessState.
    
    These weren't really being used and they make it
    very hard to reason about who looks at command line
    arguments.
    
    Processes started via app_process (this includes all
    zygote forks and the system_server) can get information
    about command line arguments from the AndroidRuntime
    class, which is available via a call to
    AndroidRuntime::getRuntime.
    
    bug: 13647418
    
    Change-Id: I6f92680c3619a68c6d4b0995db4cdc9adc788e36
    rename binder services main thread to Binder_*
    
    When a binder service's main thread joins the thread pool
    it retains its name (whatever the exec name was), which is
    very confusing in systrace.
    
    we now rename that thread just like its friends in the
    thread pool.
    
    Change-Id: Ibb3b6ff07304b247cfc6fb1694e72350c579513e
    add set thread count
    
    Change-Id: I70f02908d8362a465eb8a2a24356f6989847f7ba
    Eliminate single-process mode.
    Bug: 5010576
    
    Change-Id: Id450dc83efed4897d1e4ff451530fed14457aace
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Allow creation of heaps that are read-only to partner
    
    Change-Id: I3c2b3d9b1671da4b9d9c58dce27e291d30703b03
    Simplify the MemoryDealer implementation
    
    At some point the implementation became complicated because of
    SurfaceFlinger's special needs, since we are now relying on gralloc
    we can go back to much simpler MemoryDealer.
    
    Removed HeapInterface and AllocatorInterface, since those don't need
    to be paramterized anymore. Merged SimpleMemory and Allocation.
    Made SimplisticAllocator non virtual.
    
    Removed MemoryDealer flags (READ_ONLY, PAGE_ALIGNED)
    
    Removed a lot of unneeded code.
    eclair snapshot
    move libbinder's header files under includes/binder
    a brand new MessageQueue for SurfaceFlinger.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    make all libsurfaceflinger and libsensorservice symbols's visibility hidden
    
    we only export the main entry-point.
    this saves about 150KB.
    
    Change-Id: I55eb2b6705386fdfa43860deb62f9cdd2a0982aa
    rename binder services main thread to Binder_*
    
    When a binder service's main thread joins the thread pool
    it retains its name (whatever the exec name was), which is
    very confusing in systrace.
    
    we now rename that thread just like its friends in the
    thread pool.
    
    Change-Id: Ibb3b6ff07304b247cfc6fb1694e72350c579513e
    SF doesn't need more than a few binder threads
    
    Change-Id: Ic4659fb81f9990cc7caf84a496a8ae659a1d16a9
    Some hardening of isolated processes by restricting access to services.
    
    Services now must explicitly opt in to being accessed by isolated
    processes.  Currently only the activity manager and surface flinger
    allow this.  Activity manager is needed so that we can actually
    bring up the process; SurfaceFlinger is needed to be able to get the
    display information for creating the Configuration.  The SurfaceFlinger
    should be safe because the app doesn't have access to the window
    manager so can't actually get a surface to do anything with.
    
    The activity manager now protects most of its entry points against
    isolated processes.
    
    Change-Id: I0dad8cb2c873575c4c7659c3c2a7eda8e98f46b0
    added BinderService<> template to help creating native binder services
    
    Change-Id: Id980899d2647b56479f8a27c89eaa949f9209dfe
    libutils clean-up
    
    Change-Id: I6ff4cfc736751de2912c697f954e45e275f2d386
    eclair snapshot
    Support for marshalling pointers / intptr_t in Parcel.
    
    Some refactoring to eliminate code duplication in Parcel implementation.
    cleanup Debug.h a bit
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Revert "Revert "Revert "Revert "Remove incorrect android_atomic_...64 use.""""
    
    After fixing b/16874785.
    
    This reverts commit f010a05c7e9a23b6083294aff4a8183ab01f686e.
    
    Original comment, which actually describes the effect of this:
    
    Change the mExtras field in Binder.h to be a stdatomic.h atomic
    value, and replace references to it with proper stdatomic.h calls.
    This removes one of a small number of remaining 64 bit
    android_atomic references.  It also replaces the erroneously
    non-atomic read accesses to mExtras.
    
    It would be better if this used the C++11 <atomic> facility,
    but we don't quite have that yet.
    
    Fixes
    
    Bug:16513433
    
    Change-Id: I1645ca5d6f60595bf5d388913665ce4b8780b26d
    (cherry picked from commit 3effababf2980d029339522fdc914bdeb913d99b)
    Make static versions of libutils and libbinder.
    
    Fix some small static-initialization-order issues (and a static-
    initializers-missing issue) that result from doing so.  The static
    libraries don't actually get used for anything real at the moment --
    they're used for perf tests of bug 2660235.
    
    Bug: 2660235
    Change-Id: Iee2f38f79cc93b395e8d0a5a144ed92461f5ada0
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Revert "Add a compatibility symbol for the MemoryBase constructor."
    
    Cherry pick from AOSP to fix the build.
    See https://android-review.googlesource.com/#/c/53690/
    
    This reverts commit 7f974ff2f317ffbf9256579109f000ec876c3037
    
    Change-Id: I1b123f446d0ff41e11ff81d4ef5f1472b59cac93
    Revert "Add a compatibility symbol for the MemoryBase constructor."
    
    This reverts commit 7f974ff2f317ffbf9256579109f000ec876c3037
    
    Change-Id: I28ebfc5ac88bd025471b613aa7958d23749e6991
    Add a compatibility symbol for the MemoryBase constructor.
    
    Third-party libraries are currently trying to use the
    MemoryBase constructor but failing because we fixed the
    definition of ssize_t. This is a stop-gap for users of
    this private API until we can get them fixed.
    
    Bug: 8253769
    Change-Id: I8a19770f3252d88ee87023fde625cc6289924b0d
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    App ops: new native access API.
    
    This is to help implementation of bug #8181262 and maybe
    bug #8181261
    
    Note the current code has not yet been tested; it is only
    known to compile at this point.
    
    Change-Id: I489674c96d0d3fc0ddacc92611931a19a9ee5230
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    fix a crasher when running out of memory
    
    MemoryHeapBase::getBase() returns MAP_FAILED in case or
    OOM, not null which is what SF was checking against.
    
    This addresses one of the issues of bug 7230543.
    
    Bug: 7230543
    Change-Id: I763a88f64a2f9ff75eb139cfbaf9a1a9746c5577
    MemoryHeapBase: Save and binderize the offset
    
    The offset that is used in the creation of the MemoryHeapBase must be saved, so
    that it can be used to recreate the Heap when an IMemory object is passed
    across process boundary through the binder.
    
    Change-Id: Ie618fb5c0718e6711f55ed9235616fd801e648dc
    Signed-off-by: Anu Sundararajan <sanuradha@ti.com>
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    fix [2599939] "cannot play video" after open/close a video player a dozen of times
    
    get rid off the MAP_ONCE flag is MemoryHeapBase (as well as it's functionality),
    this feature should not be used anymore.
    
    the software renderer was incorrectly using the default ctor which set MAP_ONCE,
    causing the leak. the software renderer itself is incorrectly used while coming
    back from sleep.
    
    Change-Id: I123621f8d140550b864f352bbcd8a5729db12b57
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    Make IPowerManager native conform to .aidl for oneway
    
    But provide a temporary escape hatch for AudioFlinger.
    This oneway option will be removed as soon as possible.
    
    Bug: 16408906
    Change-Id: I20d6da1969ae05b96e72795463470eb4c1f8fbdc
    PowerManager: add powerHint binder method
    
    Change-Id: Ide1d50bb1580698b25296fbfc1cc63c3b21a00bc
    Native counterpart of new power manager method
    
    Cherrypicked from master.
    
    b/9464621
    
    Change-Id: I54c0ed50a57ac870da91db8589a73a2c792dbd8d
    Native counterpart of new power manager method
    
    Change-Id: I54c0ed50a57ac870da91db8589a73a2c792dbd8d
    Allow blaming a single uid for work done
    
    This lets audioflinger assign blame for wakelocks to a single uid.
    Currently this is only used for recording wakelocks.
    b/10985160
    
    Change-Id: Idc9adb22c29030010ac690d4cb95e7e7ea6b91e6
    Power manager now takes calling package name arg.
    
    Change-Id: Iae57b8eb7abe4e66f0d2645db8cdf57acf7dcd3e
    Move services/powermanager from frameworks/base to frameworks/native
    
    Move services/powermanager into frameworks/native so audioflinger can
    use it.  Note that this is not the same as a PowerManagerService,
    which is part of systemserver and handles turning the screen on and
    off, etc.  This is just a binder interface to allow taking wakelocks.
    
    Change-Id: I6b6a8b41cdbad17e826fda45aab5f059f22fc64e
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Try 2.
    
    Change-Id: I5f571fe86eb570885ae994e1f0552fb558930346
    Move services/powermanager from frameworks/base to frameworks/native
    
    Move services/powermanager into frameworks/native so audioflinger can
    use it.  Note that this is not the same as a PowerManagerService,
    which is part of systemserver and handles turning the screen on and
    off, etc.  This is just a binder interface to allow taking wakelocks.
    
    Change-Id: I6b6a8b41cdbad17e826fda45aab5f059f22fc64e
    as a debug option SrufaceFlinger can now connect to DDMS
    
    this is disabled by default. To enable:
      setprop debug.sf.ddms 1
    
    this debug option requires to restart SurfaceFlinger
    
    Change-Id: Ic2f8050b29911b55bcd21721648b6978700c277d
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    Remove frameworks/base/im since these stuff are only used by IM app
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Sensor related changes for NDK.
    
       i) ASensorManager_getDefaultSensor returns a wake-up/non wake-up sensor
          depending on the type.
       ii) Add ASensor_isWakeUpSensor and ASensorManager_getDefaultSensorEx
           methods.
    Bug : 16399898
    Change-Id: I1a86fb8d9de23039fdf41679d1487e1cd761a9d0
    Surface reportingMode for Sensors.
    
    Change-Id: Iac8dd3408c90eb7d285a2e8043131fab3a7e58fa
    Remove getRequiredPermission from NDK.
    
    Bug: 15089664
    Change-Id: Ic967adde89f30261c75fca67c09d14d35bd1cdb3
    (cherry picked from commit 1236710bccd8f5870c0281e24a899c3d58f708e6)
    Add heart rate to ASensorEvent
    
    Change-Id: Ic82838b17a575de93d499e44a454bb382f17678f
    Remove getRequiredPermission from NDK.
    
    Change-Id: Ic967adde89f30261c75fca67c09d14d35bd1cdb3
    Enable wakeup sensors.
    
    SensorService should hold a wakelock till the app reads events from a wakeup sensor. Currently drivers hold a wakelock with a
    timeout while delivering events from a wake up sensor like Significant Motion. This hack can be removed now.
    
    Bug: 9774884
    Change-Id: If3b5acb99c9cf0cd29012fcfa9d6b04c74133d01
    Add stringType and requiredPermission to sensors, effectively adding permission checking for sensors
    
    This reverts commit 4369a4ebd5ae7567e7075bc82830b83178099ed5.
    
    Change-Id: Ifa8619cc6873470a07a987763d818d78d4232610
    Revert "Add stringType and requiredPermission to sensors, effectively adding permission checking for sensors"
    
    This reverts commit c57a019e117117c5a76c772970b26cd0f5db8c6a.
    
    Change-Id: I3540565bc3e56a32cf3b176a29216cf68bb763b2
    (cherry picked from commit 4369a4ebd5ae7567e7075bc82830b83178099ed5)
    Revert "Add stringType and requiredPermission to sensors, effectively adding permission checking for sensors"
    
    This reverts commit c57a019e117117c5a76c772970b26cd0f5db8c6a.
    
    Change-Id: I3540565bc3e56a32cf3b176a29216cf68bb763b2
    Add stringType and requiredPermission to sensors, effectively adding permission checking for sensors
    
    Change-Id: If0f3dbdb5d2e9378e1fed4614baee4e750d0c850
    Sensor batching. Changes to the native code.
    
    Bug: 10109508
    Change-Id: I7333f3aac76125a8226a4c99c901fb904588df04
    improve sensorservice's dumpsys
    
    it now displays the reported trigger mode properly, as well as
    the number and type of the last received data
    
    Change-Id: I2ff64b32ab71f1332bc2e09671c8c02bb9550490
    simplify some unnecessary complex code
    
    getSensorType() ran in O(n) instead of O(1). fix that.
    
    Change-Id: Idcf29e46fc34db32604a0d8e5a9156486783b74f
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    Remove some #ifdef HAVE_ANDROID_OS that were needed for the simulator build
    
    Change-Id: I13d9f251f86c05ae5405f37adbf6b8e9660935ba
    Signed-off-by: Mike Lockwood <lockwood@android.com>
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    Fixed apparent copy/paste mistake
    Bug: 11634373
    
    Change-Id: I9b0ac4d3b4a9a2999b2013abd39465a062ec51ea
    Fix AMotionEvent_getHistorical* to take const AInputEvent* motion_event
    
    See b.android.com/55873
    
    Change-Id: I92c549e1a595662d4df8fa0e47675ccb2b8814fd
    Add TOUCH_NAVIGATION input source
    
    Change-Id: Id76e2e85246269ba7b16bb9635e41593b45cac1c
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    Fix build
    
    Change-Id: Ie011cbf74a08f760ccd93ca37fa2b437b7063462
    Revert "Fix typo"
    
    This reverts commit c118edfc1ab9a608537ebc2f2ec936216f15a36c
    
    Need to go together with https://android-review.googlesource.com/#/c/48117/
    
    Change-Id: Ib413be1035cfb1d18cc9cf4099694a308dadf8f5
    Fix typo
    
    Changed ANDROID_BITMAP_RESUT_SUCCESS -> ANDROID_BITMAP_RESULT_SUCCESS
    
    Change-Id: I4e15e946107ea6f3d0955f72e97894512743c6ca
    Fix typo
    
    Changed ANDROID_BITMAP_RESUT_SUCCESS -> ANDROID_BITMAP_RESULT_SUCCESS
    
    Change-Id: I4e15e946107ea6f3d0955f72e97894512743c6ca
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    Remove some #ifdef HAVE_ANDROID_OS that were needed for the simulator build
    
    Change-Id: I13d9f251f86c05ae5405f37adbf6b8e9660935ba
    Signed-off-by: Mike Lockwood <lockwood@android.com>
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    Remove some #ifdef HAVE_ANDROID_OS that were needed for the simulator build
    
    Change-Id: I13d9f251f86c05ae5405f37adbf6b8e9660935ba
    Signed-off-by: Mike Lockwood <lockwood@android.com>
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Track Looper decoupling from ALooper
    
    Change-Id: I612f0de7002e24948a4cbbea7b416b4fbb3929aa
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    New keycode definitions for TV remotes.
    
    Keys which are necessary for supporting world-wide broadcast
    standard or used commonly for TV/STB remotes.
    
    Change-Id: I2721ceb7d956c87f1d4106b99f9d21947ae13d47
    Add Voice Assist key.
    
    Bug: 16292420
    Change-Id: I607fadc2edf673079bfd9f7406e6e45603474957
    New keycode definitions for HDMI-CEC
    
    Following keys are added to be mapped to HDMI-CEC standard keys:
    
    KEYCODE_MEDIA_TOP_MENU
    KEYCODE_11
    KEYCODE_12
    KEYCODE_LAST_CHANNEL
    KEYCODE_TV_DATA_SERVICE
    
    Change-Id: Ie73cf4cd8355ced4753eb5bba0ea130b087dfc36
    Add KEYCODE_PAIRING.
    
    Used for initiating a peripheral pairing mode.
    
    Change-Id: I7e8439d27491ccc72d045cabf5751a35b9113aa7
    Declare KEYCODE_SLEEP and KEYCODE_WAKEUP.
    
    Bug: 12938999
    Change-Id: I544661b3887332998d703b7b2df9e56c23ab48c4
    Add a keycode to switch audio tracks (2/2)
    
    A key to switch audio tracks is general on media devices like blu-ray.
    
    Bug: 9728155
    Change-Id: I13ebbc64321f3cf10370f9a605f3d94ea0d16d6d
    Add keycodes for brightness up/down
    
    Change-Id: I8ed56b510c46f372df0fc71e1735c72058efc677
    Add ASSIST keycode.
    
    Bug: 6594275
    Change-Id: I032b055207d16bfff93ee8a350c0dc52b9102926
    Add Japanese specific key codes
    
    These keys are specific to Japanese hardware keyboard which can be
    used by input method.
    
    Patch ported from AOSP, with the addition of KANA.
    
    Change-Id: I1474f0eb8971ed5d632822b1f9825c426f4817eb
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    Add native flag to reflect new density type
    
    Bug:17007265
    Change-Id: If0129c4ad222fe28628d6f7cd8ee78fc6424e177
    Add ACONFIGURATION_UI_MODE_TYPE_WATCH to configuation enum.
    
    Bug:13395758
    Change-Id: Iecdae299bfd030f86145d02fa7860374b5a40a74
    Add a symbol to represent MNC=0
    
    Bug: 7170488
    Change-Id: Icfd39fd0c739216e89446252ea0e7ceba6f002c6
    Implement issue #6646859: 4K!!!!  4K!!!!  4K!!!!
    
    Change-Id: I1bb630c58d0d41446b726de1b9d2c3875fcbbceb
    Add support for "-rtl" in resources
    
    Change-Id: I0aaf10caf7b6a6d9e76b67dcabf01e4267b407bb
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    move ndk headers to frameworks/native
    
    Change-Id: Ib740333753818ff8f8230ed009211b447e30cbee
    Add SELinux checks when adding a service.
    
    Add a MAC check to the svc_can_register function in
    service_manager. The types are defined in
    external/sepolicy/service.te and the mapping from service
    names is defined in external/sepolicy/service_contexts.
    Currently uses the property context backend to parse the
    contexts file.
    
    Bug: 12909011
    Change-Id: I5d90a614263c60571c7c70c2882e6fa929911ca5
    Use 64 bit binder interface if TARGET_USES_64_BIT_BINDER _or_ TARGET_IS_64_BIT is set.
    
    Change-Id: I46a29939fa29ec9421ab6dff3285502f69a31745
    Add BINDER_IPC_32BIT to CFLAGS unless TARGET_USES_64_BIT_BINDER is true
    
    Change-Id: I96c643123b0314c361b7f48a18d5c22c660d4ff5
    ServiceManager: Fix Android.mk
    
    This patch fixes Android.mk and enables building bctest as an optional
    module without any extra hacks.
    
    Change-Id: Icaf8bf9452776db2ea4a2ba75f3abf05b4e2cdab
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    Add MAC for remaining service_manager functionality.
    
    Add SELinux MAC for the list and find functionality
    to service_manager. By default the list action uses
    the service_manager_type attribute as its target
    object.
    
    (cherry picked from commit c67e6307cadb1f2cd876907c42d39b8374b93acd)
    
    Change-Id: Iaf14b21346822a6b544091a0f4a9949117934b9a
    service_manager: check binder passed lengths
    
    1) Pass length through to str8 function.
    2) Fix implicit function definition warning.
    3) Check for NULL from bio_get_string16 functions.
    
    Bug: 15886919
    Bug: 15888753
    
    (cherry picked from commit 7d42a3c31ba78a418f9bdde0e0ab951469f321b5)
    
    Change-Id: I1f826b88826561ea126d811c087ba30623141511
    Remove inline access control in service_manager.
    
    Remove the hardcoded tuples of UIDs and the services that
    each is allowed to register. We will rely only on permissions
    from SELinux.
    
    Change-Id: I1c44555a6e274814282398865b30ee938f40dabb
    Add SELinux checks when adding a service.
    
    Add a MAC check to the svc_can_register function in
    service_manager. The types are defined in
    external/sepolicy/service.te and the mapping from service
    names is defined in external/sepolicy/service_contexts.
    Currently uses the property context backend to parse the
    contexts file.
    
    Bug: 12909011
    Change-Id: I5d90a614263c60571c7c70c2882e6fa929911ca5
    Merge kwd to master
    
    Change-Id: Idb607c0aa32f80fe4fe1539aedea7a221e9e7f04
    add sound trigger native service
    
    Change-Id: I5d6fe1ecacca3a941317f841009322bafdf6adcd
    DO NOT MERGE Allow "telecomm" service to be registered with the phone UID.
    
    Change-Id: I9180797451dcb2e9029b20bed47f5d5cb8cddb9f
    (cherry picked from commit 3fb4de7193e582f9429f34ad0325e85ae514ece2)
    Allow "telecomm" service to be registered with the phone UID.
    
    Change-Id: I9180797451dcb2e9029b20bed47f5d5cb8cddb9f
    ServiceManager: Implement PING_TRANSACTION
    
    Stop printing "invalid id " to stderr every time a process tries to
    connect to the servicemanager.
    
    Change-Id: Ib0e5a0375bfa2dec2c2f9cd668bd5dda46ed6588
    ServiceManager: Fix the binder interface
    
    This patch adds support for binder transactions on 64bit systems
    without breaking the existing 32bit ABI. It has been tested on
    the Android emulator and ARMv8 Model.
    
    Most of the changes in this patch just follow the binder ABI.
    
    Change-Id: I8c37b847ea65008d56554d34d4696fe3d22f7533
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    ServiceManager: Store handles in uint32_t instead of void *
    
    This patch corrects the types used for storing handles.
    
    Change-Id: If9c10782345f1de9e12b4b3fd6be9e02e6b568cd
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    ServiceManager: Generic Fixes
    
    This patch fixes some of the ServiceManager issues. The following patches
    of the series add fixes to the ABI.
    
    Change-Id: Ib479234c8704e12592f1b149ddec67881bc50230
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    ServiceManager: Add extra error handling
    
    This patch extends the error handling. It also adds a check for a matching
    binder version - kernel/userspace.
    
    Change-Id: I43a262934b38c5711536aaa42754fed1ef04b39e
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    ServiceManager: Make use of kernel exported structures
    
    This patch switches ServiceManager to use the structures exported in the
    kernel headers rather then redefining its own.
    
    struct binder_txn is replaced with struct binder_transaction_data and struct
    binder_object with struct flat_binder_object, both defined in the binder driver
    header <linux/binder.h>.
    
    Change-Id: I3b3e97918173ea35a289e184774ae06193192da3
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    Add support for "input" service running as user AID_INPUT
    
    Change-Id: I8b6700c25ea2264fb3e1c16e18df281eb67b931f
    servicemanager: Add support for "audio" service running as  AID_AUDIO user
    
    Change-Id: Ia41f1edd05f233ac5ce43c34eb8ab3ab76ffa194
    Add media.log service
    
    Change-Id: Ic17752fff30676fe692c80260ff68284543385dd
    Switch keystore to binder
    
    Change-Id: Ie15781de079e8ecc9616cab9a5e392f5c814d9d8
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    ServiceManager: Implement PING_TRANSACTION
    
    Stop printing "invalid id " to stderr every time a process tries to
    connect to the servicemanager.
    
    Change-Id: Ib0e5a0375bfa2dec2c2f9cd668bd5dda46ed6588
    ServiceManager: Use 32/64 bit types from new binder header
    
    Change-Id: I1bd7c38ed9f43125cf9c63aa533434ee7ca06f80
    ServiceManager: Store handles in uint32_t instead of void *
    
    This patch corrects the types used for storing handles.
    
    Change-Id: If9c10782345f1de9e12b4b3fd6be9e02e6b568cd
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    ServiceManager: Generic Fixes
    
    This patch fixes some of the ServiceManager issues. The following patches
    of the series add fixes to the ABI.
    
    Change-Id: Ib479234c8704e12592f1b149ddec67881bc50230
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    ServiceManager: Make use of kernel exported structures
    
    This patch switches ServiceManager to use the structures exported in the
    kernel headers rather then redefining its own.
    
    struct binder_txn is replaced with struct binder_transaction_data and struct
    binder_object with struct flat_binder_object, both defined in the binder driver
    header <linux/binder.h>.
    
    Change-Id: I3b3e97918173ea35a289e184774ae06193192da3
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    ServiceManager: Fix the binder interface
    
    This patch adds support for binder transactions on 64bit systems
    without breaking the existing 32bit ABI. It has been tested on
    the Android emulator and ARMv8 Model.
    
    Most of the changes in this patch just follow the binder ABI.
    
    Change-Id: I8c37b847ea65008d56554d34d4696fe3d22f7533
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    ServiceManager: Store handles in uint32_t instead of void *
    
    This patch corrects the types used for storing handles.
    
    Change-Id: If9c10782345f1de9e12b4b3fd6be9e02e6b568cd
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    ServiceManager: Add extra error handling
    
    This patch extends the error handling. It also adds a check for a matching
    binder version - kernel/userspace.
    
    Change-Id: I43a262934b38c5711536aaa42754fed1ef04b39e
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    ServiceManager: Use 32/64 bit types from new binder header
    
    Change-Id: I1bd7c38ed9f43125cf9c63aa533434ee7ca06f80
    ServiceManager: Fix the binder interface
    
    This patch adds support for binder transactions on 64bit systems
    without breaking the existing 32bit ABI. It has been tested on
    the Android emulator and ARMv8 Model.
    
    Most of the changes in this patch just follow the binder ABI.
    
    Change-Id: I8c37b847ea65008d56554d34d4696fe3d22f7533
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    ServiceManager: Store handles in uint32_t instead of void *
    
    This patch corrects the types used for storing handles.
    
    Change-Id: If9c10782345f1de9e12b4b3fd6be9e02e6b568cd
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    ServiceManager: Generic Fixes
    
    This patch fixes some of the ServiceManager issues. The following patches
    of the series add fixes to the ABI.
    
    Change-Id: Ib479234c8704e12592f1b149ddec67881bc50230
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    ServiceManager: Add extra error handling
    
    This patch extends the error handling. It also adds a check for a matching
    binder version - kernel/userspace.
    
    Change-Id: I43a262934b38c5711536aaa42754fed1ef04b39e
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    ServiceManager: Make use of kernel exported structures
    
    This patch switches ServiceManager to use the structures exported in the
    kernel headers rather then redefining its own.
    
    struct binder_txn is replaced with struct binder_transaction_data and struct
    binder_object with struct flat_binder_object, both defined in the binder driver
    header <linux/binder.h>.
    
    Change-Id: I3b3e97918173ea35a289e184774ae06193192da3
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    Add liblog
    
    Bug: 8580410
    Change-Id: I2ca4fa00dde0b574df3619134836bcb9315bd506
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    Fix issue #7257947: Need to fix heap limits on Mako
    
    Change-Id: Id8014b19195b8740bccf000ab66c1b599ba3a1a0
    Configure GC free to be 8MB for devices with >512MB RAM.
    
    b/6606849
    
    Change-Id: Idad46032b4b5d309db0319caeb7a1dfc0550f9f7
    build: add device-type dalvik heap configs
    
    These have been moved from frameworks/base/build
    
    Change-Id: Ib0cdf82f4e2d61a1956baabf1fe636f46ddbc13a
    Signed-off-by: Dima Zavin <dima@android.com>
    OpenGL tracing.
    
    Enable with:
    
    adb shell setprop debug.egl.trace 1
    
    Change-Id: Icfbc795f5260141510975228e72234e9aab56a85
    eclair snapshot
    Added most of the support needed for GLES 2.x
    donut snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Include the VPN server IP address in the VPN state file.
    
    This will be used by LegacyVpnRunner to create a throw route
    pointing at it.
    
    Bug: 17462989
    Change-Id: I3ebf0cec726dd12b2c57ba5d66775f8c02b25b70
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    dumpstate: switch to HAL static libraries
    
    Change-Id: I865a0b4b4a84a2d54a239e7b09874287f0c1ad56
    Add liblog
    
    Bug: 8580410
    Change-Id: I2ca4fa00dde0b574df3619134836bcb9315bd506
    dumpstate: Add SELinux restorecon call.
    
    Set the security context on the directory used
    to dump Dalvik and native stack traces.
    
    Change-Id: Iba13783f10e850485ce1a8d4aa5792d55085eb22
    Signed-off-by: Robert Craig <rpcraig@tycho.ncsc.mil>
    Include stack traces for certain native processes in bugreport.
    
    Bug: 6615693
    Change-Id: I64c3b3ce0bba62d9c332a795f7d979fb753dc27b
    move dumpstate and dumpsys from frameworks/base to frameworks/native
    
    Change-Id: I8a5318022ce5cd3e7c8055f21fe5da74639aa6c0
    Add dumping of tombstones to dumpstate.
    
    Dump only those tombstones modified within the last half an hour.
    
    Change-Id: I8ce836b2e19eba7a9c0c31a4f312f9a382526da7
    Dump all the correct routing tables.
    
    The list of tables is maintained in /data/misc/net/rt_tables by netd.
    
    Change-Id: I55475c08c5e43bcf61af916210e680c47480ac32
    Dump system settings for all users
    
    Change-Id: Ic832b19fe698da1984876b2949c3f26990ae5076
    dumpstate: dump all threads in show_wchan
    
    for_each_pid only finds processes and not their threads.  Add
    for_each_tid and call it for show_wchan so we can see where all
    threads are blocked in the kernel.
    
    Change-Id: Iffb59f7c2933cecf51cdd358a36e19932c2f24c7
    Include stack traces for certain native processes in bugreport.
    
    Bug: 6615693
    Change-Id: I64c3b3ce0bba62d9c332a795f7d979fb753dc27b
    move dumpstate and dumpsys from frameworks/base to frameworks/native
    
    Change-Id: I8a5318022ce5cd3e7c8055f21fe5da74639aa6c0
    Accept socket connection before tracing.
    
    Sometimes dumping threads takes a long time and bugreport times
    out. This change will cause us to accept the bugreport socket connection
    before dumping threads and should avoid the failed to connect to dumpstate
    service problems we've seen.
    
    Bug: 17758374
    Change-Id: I80afa0353cf1c340873f481a8d1d7faffff54120
    Make dumpstate vibrate immediately.
    
    Previously, the vibration was not performed until after stacks
    were gathered which takes a long time.  Moved the vibration
    to happen earlier so we provide better user feedback for the
    three-button salute when collecting a bug report.
    
    Deleted some dead code for playing begin/end sounds.
    
    Improved the timing measurement code to help track down why
    bug reports are so slow.  (They take over a minute now which
    can cause us to lose valuable diagnostic information.)
    
    Bug: 17474152
    Change-Id: Iac73f7993d7dc85196aad96f459b22fd4a710f94
    Fix deadlock when killing adb bugreport
    
    Leave default signal handler (terminate) for parent process,
    add SIG_IGN as signal handler for children and let them
    go down when the parent gets SIGPIPE.
    
    Bug: 17109154
    Change-Id: Id33db3e97a32f289eb2a9a1a0ca8acbe3dcd285d
    Improve network connectivity dumping.
    
    1. Explicitly dump IP addresses.
    
       Currently, some IP addresses are dumped using netcfg, but that
       only dumps the first IPv4 address on each interface. Instead,
       call ip -4 addr and ip -6 addr explicitly to dump all IPv4 and
       IPv6 addresses on the system.
    
    2. Disable dumping /proc/net/{ipv6,}route, because:
    
     - We already dump all IPv4 and IPv6 routes in the tables that
       we use.
     - /proc/net/route is confusing because it only includes routes
       in the main table, which are all but unused. It's also in
       unreadable host-byte-order hex.
     - /proc/net/ipv6_route is confusing because it includes routes
       from all tables but does not say what table they are in.
    
    3. Instead of dumping the contents of /proc/net/arp , use
       "ip -4 neigh show" and "ip -6 neigh show" to dump the
       neighbour caches for both IPv4 and IPv6.
    
    Bug: 16663736
    Change-Id: Id3e509b877ab7b00eb2399b6a9868b12245da2f0
    Add dumping of tombstones to dumpstate.
    
    Dump only those tombstones modified within the last half an hour.
    
    Change-Id: I8ce836b2e19eba7a9c0c31a4f312f9a382526da7
    Always #include <sys/...>, not <linux/...>.
    
    (cherry picked from commit 1e4ee9afd2de12af98dbf476b73e2d43f605384c)
    
    Change-Id: Ie005774484f98bb33c8f867cddb778ac04a1d4ea
    dump bluedroid kernel status do not merge
    
    Change-Id: I4617f770088f86ceda2caf58bd1fdae81b3e31df
    (cherry picked from commit ed3b9a09771a79b62fd4a5943d3845e7ceee6a34)
    Dump all the correct routing tables.
    
    The list of tables is maintained in /data/misc/net/rt_tables by netd.
    
    Change-Id: I55475c08c5e43bcf61af916210e680c47480ac32
    Dump system settings for all users
    
    Change-Id: Ic832b19fe698da1984876b2949c3f26990ae5076
    dumpstate: dump console-ramoops instead of last_kmsg if present
    
    Change-Id: I41a922b33f0b6b4e8e150a92e46032501a165e33
    Fix issue #10422349: Limit/change the battery history data in batterystats
    
    Use new compact option to include history when dumping battery stats.
    
    Change-Id: I3833a88db76d8791bd5c2e8f6ff414af65472a42
    dumpstate: Fix wifi list of networks dump
    
    Bug: 9056601
    
    Change-Id: Ia0adb67afdf3d478033d0ee34bbb95e621e2fe51
    Signed-off-by: Dmitry Shmidt <dimitrysh@google.com>
    dumpstate: switch to HAL static libraries
    
    Change-Id: I865a0b4b4a84a2d54a239e7b09874287f0c1ad56
    dumpstate: remove libutils dependency
    
    Change-Id: I9745f389402c01b90877612e060ac996eba99964
    dumpstate: Show SELinux process labels
    
    Change-Id: Ie19586a3b733bd4420f6b20b5d253d42c2f165ea
    Fix cmd line arguments for usagestats.
    
    Change-Id: I9a1436aa1d1665924ba62a568bb4b66d67ae2814
    Update to follow procstats options changes.
    
    Change-Id: I6f016c944cfcd01bbbcf3cf37bc7ff05482f0012
    Update to use --include-committed for procstats.
    
    Change-Id: I5ce737b624c5617c94054d6bedebca754fbf16a9
    Add checkin dumps to bug reports.
    
    This is a duplicate of the associated human-readable dumps
    of these services, but much better for automated parsing.
    
    Change-Id: I902b768b03aeac1472f03f96913f9b8ada5dba9c
    Exit dumpstate on SIGPIPE to avoid cascading child crashes
    
    When dumpstate ignores SIGPIPE it can lead to a cascade of tombstones /
    coredumps since many of its children don't handle or ignore it.  It's
    best to just exit dumpstate once the pipe is broken.
    
    Change-Id: Ic0c57ecf4171f0c0a07837e51c41cb1876e1350c
    Bugreport broadcasts are only useful to owners.
    
    Bug: 8415156
    Change-Id: Ia73969262abe9f715f038dad934651d7e5d65c87
    Move screenshots near beginning of dumpstate.
    
    Bug: 8420215
    Change-Id: I6adffd1182ed8f99b8d11d43785a4eb4a388ceb5
    Increase screenshot timeout.
    
    Devices with large displays take longer than 5 seconds to write.
    
    Change-Id: If74bc4a3cec366ae28eca549bce28ef212e47d8f
    Support broadcast when dumpstate finishes.
    
    Add flag that sends BUGREPORT_FINISHED broadcast when dumpstate
    is finished, including the resulting filesystem paths.  Also reduces
    directory creation to 0770.
    
    Bug: 7005318
    Change-Id: Id4c6b699a56f8acd859b7ab73368500e1a8f3c67
    dumpstate: use correct header file.
    
    Change-Id: I006d7a219ce6309259f271beff6011cc266f1a61
    Remove obsolte 'su' from 'ping' call (to work on user build)
    
    Change-Id: I2d391bbd39fc591eef33b9c9e4b4cdbda29e41e7
    Signed-off-by: Dmitry Shmidt <dimitrysh@google.com>
    Do not use su to run the df command in bugreports
    
    User builds do not have su, so when the bugreport attempts to report
    disk free space, the command fails and nothing is reported.  However,
    the df command does not need to be run as root to report free space,
    so just run the command directly.
    
    Change-Id: Ic7deb696f293e772ddf28eacfe16e4250af9a9f3
    bugreport: Add /proc/interrupts dump
    
    Bug: 7301178
    
    Change-Id: Ifad3b981ac904d4637d69dfc223d5bb2c9d80bda
    Signed-off-by: Dmitry Shmidt <dimitrysh@google.com>
    bugreport: Add wlan FW counters dump for bcmdhd
    
    Bug: 7494877
    
    Change-Id: I4d24dbcf7596777ec02ab1312c2ab996ba7688f1
    Signed-off-by: Dmitry Shmidt <dimitrysh@google.com>
    dumpstate: dump all threads in show_wchan
    
    for_each_pid only finds processes and not their threads.  Add
    for_each_tid and call it for show_wchan so we can see where all
    threads are blocked in the kernel.
    
    Change-Id: Iffb59f7c2933cecf51cdd358a36e19932c2f24c7
    dumpstate: add kernel memory fragmentation unusable index
    
    Dump /d/extfrag/unusable_index in bugreports.  It shows the
    percentage of memory in each zone that is not available for
    allocations for each order.
    
    Change-Id: I2af6680cb609887ea7b3d6107d1aa88bd0206b52
    Include Global table in bugreports.
    
    Bug: 7257648
    Change-Id: I84c7230fd115cf9d7269bc5367026b52cbcc86ac
    Allow disable of dumpstate vibrate
    
    Change-Id: I747b757f4b5e2d6a472b7b2a19f8c1ca8a4b7fdd
    add /d/sync to dumpstate
    
    Change-Id: I24f8f3e0420c2198ae3981fc067fb660898655e8
    Include stack traces for certain native processes in bugreport.
    
    Bug: 6615693
    Change-Id: I64c3b3ce0bba62d9c332a795f7d979fb753dc27b
    dumpstate: handle old style "adb bugreport"
    
    When "adb bugreport" was run on previous adb releases, it
    called "adb shell dumpstate". In later versions of Android,
    this was changed to "adb shell bugreport", which starts
    the dumpstate service.
    
    Modify the dumpstate command so that it calls bugreport
    when it's not running as root. This allows both
    "adb shell dumpstate" and "adb shell bugreport" to have
    the exact same output.
    
    Bug: 6391938
    Change-Id: Ia32bb9ebc579db3bee7caa0fe66dc3f124d60a12
    dumpstate: Add kernel wakeup sources info
    
    Change-Id: I0f95afd6815c1403d8400a18ef3cd19d936d4601
    Dump packages.xml as root.
    
    Bug: 6501151
    Change-Id: Ied638bdbe9ed6fbf749a44de8ac1f9d4167829c1
    dumpstate: collect xtables based iface stats, update iptables info.
    
    The newer kernels now have /proc/net/xt_qtaguid/iface_stat_fmt.
    Add the extra iptables output and remove ip6tables for nat which doesn't
    exist.
    
    Change-Id: I819c707b337a707ca0acd87d9ab38cd68ca0f36c
    Ignore SIGPIPE is some of the tools used via bugreport
    
     adb bugreport > b & sleep 5; kill $?
    will show that a bunch of tools will SIGPIPE when trying to output data
    which is normal.
    We don't have a way on linux (bsd yes), to set NOSIGPIPE on the file desc
    passed down via fork/exec.
    
    Bug: 6447319
    Change-Id: I25b30a823addcff89d252f162d0a07035d4fdd3f
    Add sdcard_r group to dumpstate.
    
    Bug: 6321962
    Change-Id: I318cd88493396f3d8adb5d4d0fc7a12ee40ba737
    Add sdcard_r group to dumpstate.
    
    Bug: 6321962
    Change-Id: I318cd88493396f3d8adb5d4d0fc7a12ee40ba737
    move dumpstate and dumpsys from frameworks/base to frameworks/native
    
    Change-Id: I8a5318022ce5cd3e7c8055f21fe5da74639aa6c0
    Make dumpstate vibrate immediately.
    
    Previously, the vibration was not performed until after stacks
    were gathered which takes a long time.  Moved the vibration
    to happen earlier so we provide better user feedback for the
    three-button salute when collecting a bug report.
    
    Deleted some dead code for playing begin/end sounds.
    
    Improved the timing measurement code to help track down why
    bug reports are so slow.  (They take over a minute now which
    can cause us to lose valuable diagnostic information.)
    
    Bug: 17474152
    Change-Id: Iac73f7993d7dc85196aad96f459b22fd4a710f94
    Use time() instead of clock() for timeouts.
    
    The clock() function returns the processor time used by the process. This
    is not a good timeout mechanism since the code is suspended most of the
    time waiting for the forked process to finish. Replace with the time()
    function.
    
    Bug: 17154069
    Change-Id: Ib383329f9db269445d71a100553b08e71fddda3f
    Fix deadlock when killing adb bugreport
    
    Leave default signal handler (terminate) for parent process,
    add SIG_IGN as signal handler for children and let them
    go down when the parent gets SIGPIPE.
    
    Bug: 17109154
    Change-Id: Id33db3e97a32f289eb2a9a1a0ca8acbe3dcd285d
    Add dumping of tombstones to dumpstate.
    
    Dump only those tombstones modified within the last half an hour.
    
    Change-Id: I8ce836b2e19eba7a9c0c31a4f312f9a382526da7
    dumpstate: fix dumping traces for vm processes on 64-bit
    
    dumpstate was not dumping any stack traces for vm processes because
    it was failing the string compare for /system/bin/app_process.
    64-bit devices use app_process32 and app_process64 instead of
    app_process, and zygote64 alongside zygote.  Change the string
    matching to be prefix matching.
    
    (cherry picked from commit 8eb25d552b07ffa799b7b61ad46d0109e7512741)
    
    Change-Id: I6b1568161fae278f0e6107990e5b750cf0ca902b
    Dump all the correct routing tables.
    
    The list of tables is maintained in /data/misc/net/rt_tables by netd.
    
    Change-Id: I55475c08c5e43bcf61af916210e680c47480ac32
    dumpstate: increase poll timeout waiting for SIGQUIT logging
    
    Increased the maximum time dumpstate will wait for SIGQUIT process
    to finish dumping its thread stacks to the logfile to 5 seconds.
    
    Bug: 14057177
    Change-Id: I0b43004512855d202f2fe0ea7b0e934e77a3a070
    Convert all selinux_android_restorecon and _setfilecon calls to new API.
    
    libselinux selinux_android_restorecon API is changing to the more
    general interface with flags and dropping the older variants.
    
    Also get rid of the old, no longer used selinux_android_setfilecon API
    and rename selinux_android_setfilecon2 to it as it is the only API in use.
    
    Change-Id: I1e71ec398ccdc24cac4ec76f1b858d0f680f4925
    Signed-off-by: Stephen Smalley <sds@tycho.nsa.gov>
    Dump system settings for all users
    
    Change-Id: Ic832b19fe698da1984876b2949c3f26990ae5076
    dumpstate: Add SELinux restorecon call.
    
    Set the security context on the directory used
    to dump Dalvik and native stack traces.
    
    Change-Id: Iba13783f10e850485ce1a8d4aa5792d55085eb22
    Signed-off-by: Robert Craig <rpcraig@tycho.ncsc.mil>
    Support broadcast when dumpstate finishes.
    
    Add flag that sends BUGREPORT_FINISHED broadcast when dumpstate
    is finished, including the resulting filesystem paths.  Also reduces
    directory creation to 0770.
    
    Bug: 7005318
    Change-Id: Id4c6b699a56f8acd859b7ab73368500e1a8f3c67
    Ensure dumpstate children die
    
    Use prctl(PR_SET_PDEATHSIG, SIGKILL) in each forked child to ensure
    it dies when dumpstate dies.
    
    This is important for two cases:
    - dumpstate runs a timer for each child process.  On expiration, it
      sends SIGTERM to kill the process.  Sometimes SIGTERM isn't enough
      to kill a hung process, so the child lives on.
    - When dumpstate is killed by the user before completing, outstanding
      children continue to run and generate output.
    
    Change-Id: I96e0dc918c26d56c9fee53611980ba2edd238712
    dumpstate: fix incorrectly zeroed array
    
    Change-Id: I55a916568baf66629b02a6d80fce34b84ffb3a34
    dumpstate: dump all threads in show_wchan
    
    for_each_pid only finds processes and not their threads.  Add
    for_each_tid and call it for show_wchan so we can see where all
    threads are blocked in the kernel.
    
    Change-Id: Iffb59f7c2933cecf51cdd358a36e19932c2f24c7
    Use a named constant rather than a magic number.
    
    Change-Id: I86e8c91c6f5628df3eec38faf28598cc8cef2ea3
    Add stack dump from drmserver process to bugreports
    
    This would be helpful tracking down ANR issues in drmserver
    
    o related-to-bug: 7132419
    
    Change-Id: I7eceaa0c29af26bd0092110be6bddf8f4c063545
    Include stack traces for certain native processes in bugreport.
    
    Bug: 6615693
    Change-Id: I64c3b3ce0bba62d9c332a795f7d979fb753dc27b
    Ensure that /data/anr/traces.txt is world-writable
    
    The umask changed for init. We have to force /data/anr to be world
    readble and /data/anr/traces.txt to be world writable so dalvik
    processes can write to it.
    
    Hopefully this is a short term change while we investigate tightening
    up these permissions.
    
    Bug: 6300296
    Change-Id: Iacb4c9f1bc69d2ac679697f9cf9a52694f888489
    dumpstate: don't follow symlinks when creating /data/anr/traces.txt
    
    Make Android more robust against symlink attacks when /data/anr
    is world-writable.
    
    Bug: 5614000
    Change-Id: I9a7e4c4ec9aa4300ac30a968db0dcd276f364ab6
    Ensure that /data/anr/traces.txt is world-writable
    
    The umask changed for init. We have to force /data/anr to be world
    readble and /data/anr/traces.txt to be world writable so dalvik
    processes can write to it.
    
    Hopefully this is a short term change while we investigate tightening
    up these permissions.
    
    Bug: 6300296
    Change-Id: Iacb4c9f1bc69d2ac679697f9cf9a52694f888489
    move dumpstate and dumpsys from frameworks/base to frameworks/native
    
    Change-Id: I8a5318022ce5cd3e7c8055f21fe5da74639aa6c0
    dumpstate: switch to HAL static libraries
    
    Change-Id: I865a0b4b4a84a2d54a239e7b09874287f0c1ad56
    move services executables sources in their respective src folder
    
    Change-Id: Ic65434a26c7fed1699abf0851fec6faa40e09c0c
    Add skeleton of input flinger.
    
    Change-Id: I7f25080e446d4d3d9de9b18fe432a09bc751e0d9
    Add dual mode to flatland
    
    Change-Id: I3544e12c9c911cfdd73fa20d038068c9eccb4161
    Build the benchmark test to /data/local/tmp/ for automated test
    
    Change-Id: I27a5ee24636ff9752a35dbab793821f6b7a79221
    (cherry picked from commit b7925f1364b56708e072884a5ae9dba2d32b58e6)
    Build the benchmark test to /data/local/tmp/ for automated test
    
    Change-Id: I27a5ee24636ff9752a35dbab793821f6b7a79221
    flatland: add a GPU hardware benchmark
    
    This change adds a GPU benchmark named 'flatland' that is intended to measure
    GPU performance of UI rendering and compositing scenarios at a fixed a clock
    frequency.  This initial version includes only window compositing scenarios.
    
    Change-Id: I5577863aa3be5c6da8b49cb5d53cc49dec2f7081
    GLConsumer: Stop using default constructor params
    
    Removes the dependency on default constructor parameters for
    GLConsumer so that a different constructor prototype can safely be
    added.
    
    Change-Id: I0da924bbd4c141edbf305598c1be8bc575654680
    Remove deprecated BufferQueue constructor
    
    Bug: 13415624
    Change-Id: I1c17833511b5961af5a9bbb9cc3d627ce558d424
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    fix build. optional test broke.
    
    Change-Id: I0ed5e2cd4c8945ee95673ed0eec5820d9def5097
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    always pass the BufferQueue explicitely to consumers
    
    Change-Id: I883b0a7b19d8e722f9ab714ba6f49e658b02ca86
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: Ibed34175ae273608393aaa5f0a7df207dc40d709
    flatland: remove an unneeded #include
    
    Change-Id: I50831d4efd543664ff7df7aaef35d842aebf1bd6
    flatland: add a GPU hardware benchmark
    
    This change adds a GPU benchmark named 'flatland' that is intended to measure
    GPU performance of UI rendering and compositing scenarios at a fixed a clock
    frequency.  This initial version includes only window compositing scenarios.
    
    Change-Id: I5577863aa3be5c6da8b49cb5d53cc49dec2f7081
    fix build: SurfaceTextureClient to Surface rename
    
    Change-Id: Ibcf98337940f9195bcff7b5e8bddb6e912e65163
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: Ibed34175ae273608393aaa5f0a7df207dc40d709
    flatland: add a GPU hardware benchmark
    
    This change adds a GPU benchmark named 'flatland' that is intended to measure
    GPU performance of UI rendering and compositing scenarios at a fixed a clock
    frequency.  This initial version includes only window compositing scenarios.
    
    Change-Id: I5577863aa3be5c6da8b49cb5d53cc49dec2f7081
    flatland: add a GPU hardware benchmark
    
    This change adds a GPU benchmark named 'flatland' that is intended to measure
    GPU performance of UI rendering and compositing scenarios at a fixed a clock
    frequency.  This initial version includes only window compositing scenarios.
    
    Change-Id: I5577863aa3be5c6da8b49cb5d53cc49dec2f7081
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    fix incorrect aspect ratio label
    
    2048x1536 was labeled as 3:2 when it is 4:3.
    
    Change-Id: I981af139ba3d1c6f111772aeaccf95c679999370
    flatland: add 1920x1200 to 16:10 resolutions
    
    Change-Id: Ie7540c1ca4ec2c7ea8a307ce118d35479cdf499c
    flatland: add 3:2 tests
    
    Change-Id: I90496207fbf972c9a8e6baa2188a7732a282f879
    fix build: SurfaceTextureClient to Surface rename
    
    Change-Id: Ibcf98337940f9195bcff7b5e8bddb6e912e65163
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: Ibed34175ae273608393aaa5f0a7df207dc40d709
    flatland: add a GPU hardware benchmark
    
    This change adds a GPU benchmark named 'flatland' that is intended to measure
    GPU performance of UI rendering and compositing scenarios at a fixed a clock
    frequency.  This initial version includes only window compositing scenarios.
    
    Change-Id: I5577863aa3be5c6da8b49cb5d53cc49dec2f7081
    flatland: add a GPU hardware benchmark
    
    This change adds a GPU benchmark named 'flatland' that is intended to measure
    GPU performance of UI rendering and compositing scenarios at a fixed a clock
    frequency.  This initial version includes only window compositing scenarios.
    
    Change-Id: I5577863aa3be5c6da8b49cb5d53cc49dec2f7081
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    fix build. optional test broke.
    
    Change-Id: I0ed5e2cd4c8945ee95673ed0eec5820d9def5097
    flatland: add a GPU hardware benchmark
    
    This change adds a GPU benchmark named 'flatland' that is intended to measure
    GPU performance of UI rendering and compositing scenarios at a fixed a clock
    frequency.  This initial version includes only window compositing scenarios.
    
    Change-Id: I5577863aa3be5c6da8b49cb5d53cc49dec2f7081
    flatland: add a GPU hardware benchmark
    
    This change adds a GPU benchmark named 'flatland' that is intended to measure
    GPU performance of UI rendering and compositing scenarios at a fixed a clock
    frequency.  This initial version includes only window compositing scenarios.
    
    Change-Id: I5577863aa3be5c6da8b49cb5d53cc49dec2f7081
    Migrate CA certificates to all users
    
    Copies the /data/misc/keychain/cacert-* directories to all users on
    the device, whereas previously they were simply copied to user 0.
    
    This is a shallow copy so anything that wasn't supposed to be there
    will disappear.
    
    Bug: 17811821
    Change-Id: Iae5909ab8d5efdb83c9c8fdf0e10ab7060d022cc
    Add new system APK locations.
    
    Add /system/priv-app and /oem/app paths to system paths.  Also allow
    rmdex on system apps, and quietly ignore when it was already removed.
    
    Also relax logging when clearing code cache, since it's optional.
    
    Bug: 17205122
    Change-Id: I4fc4d0f63a3596937c4defbd64e1f8a1c563f02d
    Remove obsolete prunedexcache
    
    Bug: 16875245
    
    (cherry picked from commit 5f727f86942a188354c028356f1167794fdc8655)
    
    Change-Id: I06e14c405aa4af295795982c1d236be3cb00e893
    Add vm_safe_mode to dexopt.
    
    The flag enforces interpret-only flag for dex2oat.
    
    Bug: 12457423
    Change-Id: Ifdafcc1afa32996577fa44c5682eeb58c79772ac
    Make system use patchoat to relocate during runtime.
    
    Make installd understand a patchoat directive and carry it out.
    
    Bug: 15358152
    
    (cherry picked from commit 7365a10689df23334d245b211ce272502ad20669)
    
    Change-Id: Id84a15e626ddde63876914068d3d9aa037abc65b
    Fix implicit declaration of function 'prctl' in installd.
    
    (cherry picked from commit ec535c5ba515f58791aa5044ba116d35a10a188e)
    
    Change-Id: I3da977d85ce544b23ff00934fdbd201d683e9210
    Offer to delete code cache directories.
    
    Bug: 16187224
    Change-Id: Ia860b051a34ffdfb4f6e0ea19f90cb73509c4eee
    Exclude subdirectories when pruning the dex cache.
    
    This requires a companion package manager change to prune
    each instruction specific dex cache individually.
    
    bug: 15677279
    
    Change-Id: I5891981512bde20e49bff65b1842c28886f2b177
    Rename 'mkuser' command to 'mkuserconfig'
    
    Brings the name more in line with what it actually does.
    
    Change-Id: I0adb14deb1a035abdbe51714356bd0c94ccf04c5
    Add an installd command to prune dex files.
    
    This is a straightforward port of logic from
    PackageManagerService#pruneDexFiles.
    
    bug: 14407732
    
    Change-Id: I892cff027ddcbb1a4fb37a7af5ecf1697049a188
    Migrate keychain directories to /data/misc/user/0
    
    With new CA certificates being stored in /data/misc/user/<userid>/
    existing ones need to be moved into the same place.
    
    After this update only the owner user will have custom trusted CAs; all
    other users will revert to the default set.
    
    Change-Id: I14a4cd6048685902ad5dd3b53494b03fadc41c04
    Add installd command to create /data/misc user dir
    
    New command 'mkuser <id>' sets up a user directory in /data/misc/user/,
    readable by all apps within that user and writeable by the local system
    process.
    
    Change-Id: I5ddde8c4a80f606e723bb41aa64581a0720842d5
    Add instruction-set arguments to installd commands.
    
    The instruction-set is used to construct the dalvik cache
    path and is also passed down to dex2oat.
    
    (cherry picked from commit 791781bfb8cdcdf90e32968159603e2fe5098d94)
    
    Change-Id: I43396b16f6eaecacf0fb7d052526fc5a239167ac
    Add instruction-set arguments to installd commands.
    
    The instruction-set is used to construct the dalvik cache
    path and is also passed down to dex2oat.
    
    Change-Id: Ie480841b3e917dabe23ad4d5f4a0b08990500a51
    Modify installd's restorecon function.
    
    Changes above with PMS and below with libselinux
    have resulted in a few changes to the restorecon data
    api. This change is needed in order to support the new
    way to issue a recursive restorecon of certain
    /data/data directories.
    
    The restorecondata function has also been modified to
    find all users on the device for a given package name
    (argument to the function) and to issue a separate
    recursive restorecon call for each.
    
    Change-Id: Ie440cba2c96f0907458086348197e1506d31c1b6
    Signed-off-by: rpcraig <rpcraig@tycho.ncsc.mil>
    Send libselinux logging to logcat.
    
    Otherwise we can't readily see log messages from libselinux calls
    made by installd.
    
    Change-Id: I319b30c181470468fe19dd5fbe9251ef03f1163b
    Signed-off-by: Stephen Smalley <sds@tycho.nsa.gov>
    Extend installd to support SELinux restorecon function.
    
    Implement new restorecondata function which will allow
    the relabeling of /data/data and /data/user directories.
    This is needed in the case of certain OTAs. Not every
    boot will apply this relabeling however. Consult change
    I77bf2a0c4c34b1feef6fdf4d6c3bd92dbf32f4a1 for
    clarification on this issue.
    
    Change-Id: I05e8b438950ddb908e46c9168ea6ee601e6d674f
    Signed-off-by: rpcraig <rpcraig@tycho.ncsc.mil>
    ART profiler
    
    Add args to the installd commands for profiler usage.
    Make installd create the profile files and allow apps
    to write to them.
    
    The profile files are in /data/dalvik-cache/profiles.  This
    central location is needed due to permissions issues with
    dex2oat reading from an app's data directory.  The solution
    is to put the profile file in a directory owned by the
    install user and make the file writeable by the shared group
    id of for the app.  The app can read and write to these files
    only in the profiles directory.  The 'system' user also needs
    to be able to read the files in order to determine the amount
    of change to the file over time.
    
    Bug: 12877748
    Change-Id: I9b8e59e3bd7df8a1bf60fa7ffd376a24ba0eb42f
    
    Conflicts:
            cmds/installd/commands.c
    Convert all selinux_android_restorecon and _setfilecon calls to new API.
    
    libselinux selinux_android_restorecon API is changing to the more
    general interface with flags and dropping the older variants.
    
    Also get rid of the old, no longer used selinux_android_setfilecon API
    and rename selinux_android_setfilecon2 to it as it is the only API in use.
    
    Change-Id: I1e71ec398ccdc24cac4ec76f1b858d0f680f4925
    Signed-off-by: Stephen Smalley <sds@tycho.nsa.gov>
    Runtime resource overlay, iteration 2
    
    Support any number of overlay packages. Support any target package.
    
    UPDATED PACKAGE MATCHING
    ------------------------
    In Runtime resource overlay, iteration 1, only a single overlay package
    was considered. Package matching was based on file paths:
    /vendor/overlay/system/framework-res.apk corresponded to
    /system/framework-res.apk. Introduce a more flexible matching scheme
    where any package is an overlay package if its manifest includes
    
        <overlay targetPackage="com.target.package"/>
    
    For security reasons, an overlay package must fulfill certain criteria
    to take effect: see below.
    
    THE IDMAP TOOL AND IDMAP FILES
    ------------------------------
    Idmap files are created by the 'idmap' binary; idmap files must be
    present when loading packages. For the Android system, Zygote calls
    'idmap' as part of the resource pre-loading. For application packages,
    'idmap' is invoked via 'installd' during package installation (similar
    to 'dexopt').
    
    UPDATED FLOW
    ------------
    The following is an outline of the start-up sequences for the Android
    system and Android apps. Steps marked with '+' are introduced by this
    commit.
    
    Zygote initialization
       Initial AssetManager object created
    +    idmap --scan creates idmaps for overlays targeting 'android', \
               stores list of overlays in /data/resource-cache/overlays.list
       AssetManager caches framework-res.apk
    +  AssetManager caches overlay packages listed in overlays.list
    
    Android boot
       New AssetManager's ResTable acquired
         AssetManager re-uses cached framework-res.apk
    +    AssetManager re-uses cached 'android' overlays (if any)
    
    App boot
       ActivityThread prepares AssetManager to load app.apk
    +  ActivityThread prepares AssetManager to load app overlays (if any)
       New AssetManager's ResTable acquired as per Android boot
    
    SECURITY
    --------
    Overlay packages are required to be pre-loaded (in /vendor/overlay).
    These packages are trusted by definition. A future iteration of runtime
    resource overlay may add support for downloaded overlays, which would
    likely require target and overlay signatures match for the overlay to
    be trusted.
    
    LOOKUP PRIORITY
    ---------------
    During resource lookup, packages are sequentially queried to provide a
    best match, given the constraints of the current configuration. If any
    package provide a better match than what has been found so far, it
    replaces the previous match. The target package is always queried last.
    
    When loading a package with more than one overlay, the order in which
    the overlays are added become significant if several packages overlay
    the same resource.
    
    Had downloaded overlays been supported, the install time could have been
    used to determine the load order. Regardless, for pre-installed
    overlays, the install time is randomly determined by the order in which
    the Package Manager locates the packages during initial boot. To support
    a well-defined order, pre-installed overlay packages are expected to
    define an additional 'priority' attribute in their <overlay> tags:
    
        <overlay targetPackage="com.target.package" priority="1234"/>
    
    Pre-installed overlays are loaded in order of their priority attributes,
    sorted in ascending order.
    
    Assigning the same priority to several overlays targeting the same base
    package leads to undefined behaviour. It is the responsibility of the
    vendor to avoid this.
    
    The following example shows the ResTable and PackageGroups after loading
    an application and two overlays. The resource lookup framework will
    query the packages in the order C, B, A.
    
            +------+------+-     -+------+------+
            | 0x01 |      |  ...  |      | 0x7f |
            +------+------+-     -+------+------+
                |                           |
            "android"                Target package A
                                            |
                           Pre-installed overlay B (priority 1)
                                            |
                           Pre-installed overlay C (priority 2)
    
    Change-Id: If49c963149369b1957f7d2303b3dd27f669ed24e
    restorecon /data/media when re-creating it for multi-user upgrade.
    
    Change-Id: I112c61863f2104d1962697c54cff25106e9b48a0
    Signed-off-by: Stephen Smalley <sds@tycho.nsa.gov>
    Proper security labeling of multi-user data directories.
    
    Add seinfo paramater to appropriate make directory
    functions. This allows proper labeling for multi-user
    scenarios.
    
    Change-Id: Iaba7c40645bc7b6cc823d613da0c3782acf6ddd5
    Signed-off-by: rpcraig <rpcraig@tycho.ncsc.mil>
    Handle policy reloads within installd rather than restarting it.
    
    Restarting installd upon policy reloads has reportedly caused
    stability problems for some users.  Stop restarting installd
    and instead handle policy reloads within it.
    
    Change-Id: I697a736d8e414cfc6cfa131ed7b97c7f7694d022
    Signed-off-by: Stephen Smalley <sds@tycho.nsa.gov>
    Change legacy "persona" references to userid_t.
    
    Offers stronger typing with no functional change.
    
    Change-Id: I09f0262470feec5cfdf26658f998c20550af84d4
    Moving dex2oat installd patches from frameworks/base
    
    (cherry picked from commit 3fa3a652ba9a7c5b23b6f2bc7c1851d4e23e430f)
    
    Change-Id: I2f9bb66e1b0463bef41805f2d220160880121813
    Fix issue #8768456: Settings > App Info under reports...
    
    ...app storage size for apps w/ .so files
    
    The lib directories are tagged with the apk install number,
    so must be explicitly passed down to installd.
    
    Change-Id: Iae8815afd6ba964f5b2ed86a0d04a91827391ed6
    Add seinfo parsing to PackageManagerService.
    
    This patch set allows the PMS to parse the
    mac_permissions.xml file which contains the
    seinfo values. Each package that is installed
    on the device will be assigned an seinfo value
    based on policy. This seinfo value will help label
    the app process and data directory.  Modifications
    include adjustments to ApplicationInfo.java
    to store the seinfo tag per package as well as
    adjustments to installd to communicate the seinfo
    tag to libselinux.
    
    Change-Id: I61ad1ea12fb6a9a6d0b108ec163bc4bf4c954b58
    Signed-off-by: rpcraig <rpcraig@tycho.ncsc.mil>
    installd: use correct header file.
    
    This is a port of https://android-review.googlesource.com/52540 ,
    which doesn't apply cleanly to master.
    
    Change-Id: I2824bb7afd4e343b5dc8bed9f24002ec1dcbf07f
    Revert "App home directories are now 0700 for targetSdkVersion > 17"
    
    This reverts commit 7f5c84a0b25706746a92ad1233cbbb8923eda54d.
    
    Bug: 7966399
    Bug: 7208882
    Change-Id: I9fb13cf06c0f6605f3d992525346b14fe3259c66
    Revert "App home directories are now 0700 for targetSdkVersion > 17"
    
    This reverts commit 7f5c84a0b25706746a92ad1233cbbb8923eda54d.
    
    Bug: 7966399
    Bug: 7208882
    Change-Id: I9fb13cf06c0f6605f3d992525346b14fe3259c66
    App home directories are now 0700 for targetSdkVersion > 17
    
    Have installd set an app's home directory permissions to
    0700 if the app has targetSdkVersion > 17.
    
    Bug: 7208882
    Change-Id: Iaa4fc42fec69bc1abdfae53704d6264dd6fa965f
    remove unused code.
    
    Change-Id: Iacc8b2664a0e404dfa554f223a44126c41581ae4
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    Make dex2oat heap size product configurable [frameworks/native]
    
    Bug: 15919420
    Change-Id: I0e629ff4f7541f0dde7380e0dbc8dab1c13df7bd
    Add liblog
    
    Bug: 8580410
    Change-Id: I2ca4fa00dde0b574df3619134836bcb9315bd506
    Revert "App home directories are now 0700 for targetSdkVersion > 17"
    
    This reverts commit 7f5c84a0b25706746a92ad1233cbbb8923eda54d.
    
    Bug: 7966399
    Bug: 7208882
    Change-Id: I9fb13cf06c0f6605f3d992525346b14fe3259c66
    Revert "App home directories are now 0700 for targetSdkVersion > 17"
    
    This reverts commit 7f5c84a0b25706746a92ad1233cbbb8923eda54d.
    
    Bug: 7966399
    Bug: 7208882
    Change-Id: I9fb13cf06c0f6605f3d992525346b14fe3259c66
    App home directories are now 0700 for targetSdkVersion > 17
    
    Have installd set an app's home directory permissions to
    0700 if the app has targetSdkVersion > 17.
    
    Bug: 7208882
    Change-Id: Iaa4fc42fec69bc1abdfae53704d6264dd6fa965f
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    Add new system APK locations.
    
    Add /system/priv-app and /oem/app paths to system paths.  Also allow
    rmdex on system apps, and quietly ignore when it was already removed.
    
    Also relax logging when clearing code cache, since it's optional.
    
    Bug: 17205122
    Change-Id: I4fc4d0f63a3596937c4defbd64e1f8a1c563f02d
    Remove obsolete prunedexcache
    
    Bug: 16875245
    
    (cherry picked from commit 5f727f86942a188354c028356f1167794fdc8655)
    
    Change-Id: I06e14c405aa4af295795982c1d236be3cb00e893
    Make clear data stricter.
    
    It should nuke everything under the data directory.  PMS will come
    around and generate the lib symlink after we're finished.
    
    Bug: 16739202
    Change-Id: Ib70af2e1450e3bed6781fb497b9cc67e1e594c49
    Set compiler filter flag to true when vmSafeMode is present.
    
    Bug: 12457423
    Change-Id: I33345c5cce76681d8a6592ebae8c9f96a9f0f8bd
    Add vm_safe_mode to dexopt.
    
    The flag enforces interpret-only flag for dex2oat.
    
    Bug: 12457423
    Change-Id: Ifdafcc1afa32996577fa44c5682eeb58c79772ac
    Pass isa features flag to dex2oat.
    
    Bug: 16716262
    Change-Id: Ifbc3a1520bc177aa87855edb60c36346f24c77cd
    Disable verification based on vold.decrypt. [frameworks/native]
    
    Bug: 15165413
    Change-Id: Ie70bf4e1348b7b8b2454cf9b498b272416d61c34
    Use set_sched_policy to put dexopt operations in SP_BACKGROUND cgroup
    
    Bug: 15927194
    
    (cherry picked from commit 0378aaf257aee92539d30543914a50c4481c6a18)
    
    Change-Id: I462b5ac256c4d091ed4023cf4b97dd6a4abcaa5f
    Use set_sched_policy to put dexopt operations in SP_BACKGROUND cgroup
    
    Bug: 15927194
    
    (cherry picked from commit 0378aaf257aee92539d30543914a50c4481c6a18)
    
    Change-Id: I462b5ac256c4d091ed4023cf4b97dd6a4abcaa5f
    Disable compilation based on vold.decrypt. [frameworks/native]
    
    Bug: 15165413
    
    (cherry picked from commit 538998f204d1e542e235de9e7ce18ef4dc68c9cc)
    
    Change-Id: Idae36efa1cb3fb99b51fa0a79b6bb037981d1c71
    Move from dalvik.vm.image-dex2oat-flags to dalvik.vm.dex2oat-filter [frameworks/native]
    
    This will allow us to conditionally change the compiler-filter based on other properties.
    
    Bug: 15165413
    
    (cherry picked from commit cf51ba1360ee13459830a0502b0d454d0145544f)
    
    Change-Id: I6613c9710878d56ed8c121e0caded76a64430f76
    Make system use patchoat to relocate during runtime.
    
    Make installd understand a patchoat directive and carry it out.
    
    Bug: 15358152
    
    (cherry picked from commit 7365a10689df23334d245b211ce272502ad20669)
    
    Change-Id: Id84a15e626ddde63876914068d3d9aa037abc65b
    Offer to delete code cache directories.
    
    Bug: 16187224
    Change-Id: Ia860b051a34ffdfb4f6e0ea19f90cb73509c4eee
    Make dex2oat heap size product configurable [frameworks/native]
    
    Bug: 15919420
    Change-Id: I0e629ff4f7541f0dde7380e0dbc8dab1c13df7bd
    Use current max product dalvik.vm.heapsize as default dex2oat heap size
    
    Bug: 15919420
    Change-Id: I7ea3bbfe787026f272e50690ab3b84f894600191
    Use current max product dalvik.vm.heapsize as default dex2oat heap size
    
    Bug: 15919420
    
    (cherry picked from commit 3aa138617b42b87069dbac0b441bd14dca2d8609)
    
    Change-Id: I569ba111c6163e94dd1b09b21ef374f05d263e72
    Exclude subdirectories when pruning the dex cache.
    
    This requires a companion package manager change to prune
    each instruction specific dex cache individually.
    
    bug: 15677279
    
    Change-Id: I5891981512bde20e49bff65b1842c28886f2b177
    Fix obsolete argument name
    
    Change-Id: I8030f055ee49dc86d4592f36791edddfc0d60a31
    Rename 'mkuser' command to 'mkuserconfig'
    
    Brings the name more in line with what it actually does.
    
    Change-Id: I0adb14deb1a035abdbe51714356bd0c94ccf04c5
    Add an installd command to prune dex files.
    
    This is a straightforward port of logic from
    PackageManagerService#pruneDexFiles.
    
    bug: 14407732
    
    Change-Id: I892cff027ddcbb1a4fb37a7af5ecf1697049a188
    Pass --top-k-profile-threshold to dex2oat if available.
    
    Also, don't pass --profile-file if the file is empty.
    Bug: 12877748
    
    Change-Id: I587d198e64da709930e2cea50a87fed1525281e5
    Don't always add profile-file option to dex2oat
    
    Add profile-file option to dex2oat only if the profiler is active and
    the file exists.
    
    Bug: 12877748
    Bug: 15275634
    Change-Id: Icef76514c912c88311ed108f2be7a6329131f741
    Add installd command to create /data/misc user dir
    
    New command 'mkuser <id>' sets up a user directory in /data/misc/user/,
    readable by all apps within that user and writeable by the local system
    process.
    
    Change-Id: I5ddde8c4a80f606e723bb41aa64581a0720842d5
    Move to dalvik.vm.lib.2 to force default to libart
    
    Bug: 14298175
    
    (cherry picked from commit c4ac3124ffb51f13bb4206e9f8452a3712eb09cb)
    
    Change-Id: I97cc3ff7a269e671b315afa8673dae43d1f86bf1
    Move to dalvik.vm.lib.2 to force default to libart
    
    Bug: 14298175
    Change-Id: Id3892a32848fb22fbf4c2861218b51f68e830b34
    Ensure that app lib symlinks are correctly labeled when created.
    
    At present, the app lib symlinks are created before setting
    the package directory security context, and therefore default
    to system_data_file.  Upon a later restorecon_recursive,
    they are relabeled to the same type as the package directory,
    e.g. app_data_file.  Avoid this inconsistency by setting the
    package directory security context before creating the symlink
    so that it inherits the same security context.
    
    Change-Id: I1ee6ccd8a2aa63a4d2efda67f313c97932235911
    Signed-off-by: Stephen Smalley <sds@tycho.nsa.gov>
    Add instruction-set arguments to installd commands.
    
    The instruction-set is used to construct the dalvik cache
    path and is also passed down to dex2oat.
    
    (cherry picked from commit 791781bfb8cdcdf90e32968159603e2fe5098d94)
    
    Change-Id: I43396b16f6eaecacf0fb7d052526fc5a239167ac
    Add instruction-set arguments to installd commands.
    
    The instruction-set is used to construct the dalvik cache
    path and is also passed down to dex2oat.
    
    Change-Id: Ie480841b3e917dabe23ad4d5f4a0b08990500a51
    Fix incorrect odex path handling
    
    It's wrong to just concatenate the apk_path and .odex.
    The bug prevents the prebuilt odex being used since Kitkat.
    
    The patch is copied from the code of JellyBean.
    
    Change-Id: I0ce8a877e3df8ae1ab9a0e3aeeef2d5253efc223
    Modify installd's restorecon function.
    
    Changes above with PMS and below with libselinux
    have resulted in a few changes to the restorecon data
    api. This change is needed in order to support the new
    way to issue a recursive restorecon of certain
    /data/data directories.
    
    The restorecondata function has also been modified to
    find all users on the device for a given package name
    (argument to the function) and to issue a separate
    recursive restorecon call for each.
    
    Change-Id: Ie440cba2c96f0907458086348197e1506d31c1b6
    Signed-off-by: rpcraig <rpcraig@tycho.ncsc.mil>
    Extend installd to support SELinux restorecon function.
    
    Implement new restorecondata function which will allow
    the relabeling of /data/data and /data/user directories.
    This is needed in the case of certain OTAs. Not every
    boot will apply this relabeling however. Consult change
    I77bf2a0c4c34b1feef6fdf4d6c3bd92dbf32f4a1 for
    clarification on this issue.
    
    Change-Id: I05e8b438950ddb908e46c9168ea6ee601e6d674f
    Signed-off-by: rpcraig <rpcraig@tycho.ncsc.mil>
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    Fix parameter ordering for installd's dex2oat execl.
    
    Change-Id: Ibd6fd46c6ec3137874f9a3d5eea134bc804e039a
    ART profiler
    
    Add args to the installd commands for profiler usage.
    Make installd create the profile files and allow apps
    to write to them.
    
    The profile files are in /data/dalvik-cache/profiles.  This
    central location is needed due to permissions issues with
    dex2oat reading from an app's data directory.  The solution
    is to put the profile file in a directory owned by the
    install user and make the file writeable by the shared group
    id of for the app.  The app can read and write to these files
    only in the profiles directory.  The 'system' user also needs
    to be able to read the files in order to determine the amount
    of change to the file over time.
    
    Bug: 12877748
    Change-Id: I9b8e59e3bd7df8a1bf60fa7ffd376a24ba0eb42f
    
    Conflicts:
            cmds/installd/commands.c
    Don't pass in empty arg to dex2oat.
    
    We would occassionally pass in an empty arg "" instead of a NULL.
    This caused problems since dex2oat isn't made to handle empty args.
    
    (cherry picked from commit f53dbfeda39c290ed67b0682d559a80cb42ceb79)
    
    Change-Id: Ia2d60b895391bf83b5d250c20ddb8a4917d347a6
    Don't pass in empty arg to dex2oat.
    
    We would occassionally pass in an empty arg "" instead of a NULL.
    This caused problems since dex2oat isn't made to handle empty args.
    
    Change-Id: Ibb1aed64a4aa17459b2a75a5a2abcf13c7fa8ac7
    Add dalvik.vm.dex2oat-flags to mimic dalvik.vm.dexopt-flags
    
    Change-Id: Ic048ed654ea0ae38c9684e5fa5b14742b6b83305
    Convert all selinux_android_restorecon and _setfilecon calls to new API.
    
    libselinux selinux_android_restorecon API is changing to the more
    general interface with flags and dropping the older variants.
    
    Also get rid of the old, no longer used selinux_android_setfilecon API
    and rename selinux_android_setfilecon2 to it as it is the only API in use.
    
    Change-Id: I1e71ec398ccdc24cac4ec76f1b858d0f680f4925
    Signed-off-by: Stephen Smalley <sds@tycho.nsa.gov>
    Runtime resource overlay, iteration 2
    
    Support any number of overlay packages. Support any target package.
    
    UPDATED PACKAGE MATCHING
    ------------------------
    In Runtime resource overlay, iteration 1, only a single overlay package
    was considered. Package matching was based on file paths:
    /vendor/overlay/system/framework-res.apk corresponded to
    /system/framework-res.apk. Introduce a more flexible matching scheme
    where any package is an overlay package if its manifest includes
    
        <overlay targetPackage="com.target.package"/>
    
    For security reasons, an overlay package must fulfill certain criteria
    to take effect: see below.
    
    THE IDMAP TOOL AND IDMAP FILES
    ------------------------------
    Idmap files are created by the 'idmap' binary; idmap files must be
    present when loading packages. For the Android system, Zygote calls
    'idmap' as part of the resource pre-loading. For application packages,
    'idmap' is invoked via 'installd' during package installation (similar
    to 'dexopt').
    
    UPDATED FLOW
    ------------
    The following is an outline of the start-up sequences for the Android
    system and Android apps. Steps marked with '+' are introduced by this
    commit.
    
    Zygote initialization
       Initial AssetManager object created
    +    idmap --scan creates idmaps for overlays targeting 'android', \
               stores list of overlays in /data/resource-cache/overlays.list
       AssetManager caches framework-res.apk
    +  AssetManager caches overlay packages listed in overlays.list
    
    Android boot
       New AssetManager's ResTable acquired
         AssetManager re-uses cached framework-res.apk
    +    AssetManager re-uses cached 'android' overlays (if any)
    
    App boot
       ActivityThread prepares AssetManager to load app.apk
    +  ActivityThread prepares AssetManager to load app overlays (if any)
       New AssetManager's ResTable acquired as per Android boot
    
    SECURITY
    --------
    Overlay packages are required to be pre-loaded (in /vendor/overlay).
    These packages are trusted by definition. A future iteration of runtime
    resource overlay may add support for downloaded overlays, which would
    likely require target and overlay signatures match for the overlay to
    be trusted.
    
    LOOKUP PRIORITY
    ---------------
    During resource lookup, packages are sequentially queried to provide a
    best match, given the constraints of the current configuration. If any
    package provide a better match than what has been found so far, it
    replaces the previous match. The target package is always queried last.
    
    When loading a package with more than one overlay, the order in which
    the overlays are added become significant if several packages overlay
    the same resource.
    
    Had downloaded overlays been supported, the install time could have been
    used to determine the load order. Regardless, for pre-installed
    overlays, the install time is randomly determined by the order in which
    the Package Manager locates the packages during initial boot. To support
    a well-defined order, pre-installed overlay packages are expected to
    define an additional 'priority' attribute in their <overlay> tags:
    
        <overlay targetPackage="com.target.package" priority="1234"/>
    
    Pre-installed overlays are loaded in order of their priority attributes,
    sorted in ascending order.
    
    Assigning the same priority to several overlays targeting the same base
    package leads to undefined behaviour. It is the responsibility of the
    vendor to avoid this.
    
    The following example shows the ResTable and PackageGroups after loading
    an application and two overlays. The resource lookup framework will
    query the packages in the order C, B, A.
    
            +------+------+-     -+------+------+
            | 0x01 |      |  ...  |      | 0x7f |
            +------+------+-     -+------+------+
                |                           |
            "android"                Target package A
                                            |
                           Pre-installed overlay B (priority 1)
                                            |
                           Pre-installed overlay C (priority 2)
    
    Change-Id: If49c963149369b1957f7d2303b3dd27f669ed24e
    frameworks/native: Rename persist.sys.dalvik.vm.lib to allow new default
    
    Bug: 12798969
    
    (cherry picked from commit 0c05d3aca6d63625513d5f42706e81c2d7834fd9)
    
    Change-Id: I3db785c3f8a3d242d7a0127ed5bec9ecca67f52c
    frameworks/native: Rename persist.sys.dalvik.vm.lib to allow new default
    
    Bug: 12798969
    Change-Id: I6b40317eceb3d89b0acff88238a9a9ab423c4d78
    frameworks/native: Rename persist.sys.dalvik.vm.lib to allow new default
    
    Bug: 12798969
    Change-Id: I6b40317eceb3d89b0acff88238a9a9ab423c4d78
    Proper security labeling of multi-user data directories.
    
    Add seinfo paramater to appropriate make directory
    functions. This allows proper labeling for multi-user
    scenarios.
    
    Change-Id: Iaba7c40645bc7b6cc823d613da0c3782acf6ddd5
    Signed-off-by: rpcraig <rpcraig@tycho.ncsc.mil>
    Change legacy "persona" references to userid_t.
    
    Offers stronger typing with no functional change.
    
    Change-Id: I09f0262470feec5cfdf26658f998c20550af84d4
    Renaming dalvik.vm.lib to persist.sys.dalvik.vm.lib
    
    Change-Id: If31695e04bb813eb75b2fdd00e5d70ced4fbb0e9
    Moving dex2oat installd patches from frameworks/base
    
    (cherry picked from commit 3fa3a652ba9a7c5b23b6f2bc7c1851d4e23e430f)
    
    Change-Id: I2f9bb66e1b0463bef41805f2d220160880121813
    Fix issue #8768456: Settings > App Info under reports...
    
    ...app storage size for apps w/ .so files
    
    The lib directories are tagged with the apk install number,
    so must be explicitly passed down to installd.
    
    Change-Id: Iae8815afd6ba964f5b2ed86a0d04a91827391ed6
    Add seinfo parsing to PackageManagerService.
    
    This patch set allows the PMS to parse the
    mac_permissions.xml file which contains the
    seinfo values. Each package that is installed
    on the device will be assigned an seinfo value
    based on policy. This seinfo value will help label
    the app process and data directory.  Modifications
    include adjustments to ApplicationInfo.java
    to store the seinfo tag per package as well as
    adjustments to installd to communicate the seinfo
    tag to libselinux.
    
    Change-Id: I61ad1ea12fb6a9a6d0b108ec163bc4bf4c954b58
    Signed-off-by: rpcraig <rpcraig@tycho.ncsc.mil>
    installd: use correct header file.
    
    This is a port of https://android-review.googlesource.com/52540 ,
    which doesn't apply cleanly to master.
    
    Change-Id: I2824bb7afd4e343b5dc8bed9f24002ec1dcbf07f
    Revert "App home directories are now 0700 for targetSdkVersion > 17"
    
    This reverts commit 7f5c84a0b25706746a92ad1233cbbb8923eda54d.
    
    Bug: 7966399
    Bug: 7208882
    Change-Id: I9fb13cf06c0f6605f3d992525346b14fe3259c66
    Revert "App home directories are now 0700 for targetSdkVersion > 17"
    
    This reverts commit 7f5c84a0b25706746a92ad1233cbbb8923eda54d.
    
    Bug: 7966399
    Bug: 7208882
    Change-Id: I9fb13cf06c0f6605f3d992525346b14fe3259c66
    App home directories are now 0700 for targetSdkVersion > 17
    
    Have installd set an app's home directory permissions to
    0700 if the app has targetSdkVersion > 17.
    
    Bug: 7208882
    Change-Id: Iaa4fc42fec69bc1abdfae53704d6264dd6fa965f
    remove unused code.
    
    Change-Id: Iacc8b2664a0e404dfa554f223a44126c41581ae4
    Bug fix on installd with SELinux enabled kernel.
    
    setfilecon is not required on libsymlinks when target
    doesn't exist. A bootloop is caused without this
    change.
    
    Change-Id: Ia895d9063f42885a3db6e8ca30cee5dceb8c1bac
    Signed-off-by: rpcraig <rpcraig@tycho.ncsc.mil>
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    Migrate CA certificates to all users
    
    Copies the /data/misc/keychain/cacert-* directories to all users on
    the device, whereas previously they were simply copied to user 0.
    
    This is a shallow copy so anything that wasn't supposed to be there
    will disappear.
    
    Bug: 17811821
    Change-Id: Iae5909ab8d5efdb83c9c8fdf0e10ab7060d022cc
    Add new system APK locations.
    
    Add /system/priv-app and /oem/app paths to system paths.  Also allow
    rmdex on system apps, and quietly ignore when it was already removed.
    
    Also relax logging when clearing code cache, since it's optional.
    
    Bug: 17205122
    Change-Id: I4fc4d0f63a3596937c4defbd64e1f8a1c563f02d
    Fix validation of system paths in installd.
    
    System apps are now installed under their own directory
    (system_app_dir/app_dir/app.apk). The new path doesn't pass installd
    validation because of obsolete checks which verify that the path does
    not contain subdirectories past the system_app_dir.
    
    The CL fixes the validation to accept at most on subdirectory.
    
    Bug: 17109858
    Change-Id: I13abb52c0016610ff436f6a26bb6b3b85dc4dfb0
    Allow apk path to contain one subdirectory.
    
    In the current directory layout this prevented rm_dex and move_dex
    commands to validate the apk path and thus cleaning up resources.
    
    Bug: 16888084
    Change-Id: Iba579d075a9c6d7de047e7ffef95441498257086
    installd: change profile files to 0660
    
    Profiling information leaks data about how people interact
    with apps, so we don't want the data to be available
    to other apps. Only the app and system_server need access.
    
    Don't create the /data/dalvik-cache/profiles directory. init.rc
    does it for us now.
    
    Change-Id: Ic1b44009faa30d704855e97631006c4b990a4ad3
    Add an installd command to prune dex files.
    
    This is a straightforward port of logic from
    PackageManagerService#pruneDexFiles.
    
    bug: 14407732
    
    Change-Id: I892cff027ddcbb1a4fb37a7af5ecf1697049a188
    Add installd command to create /data/misc user dir
    
    New command 'mkuser <id>' sets up a user directory in /data/misc/user/,
    readable by all apps within that user and writeable by the local system
    process.
    
    Change-Id: I5ddde8c4a80f606e723bb41aa64581a0720842d5
    restorecon the profile directory.
    
    This is required so that it will be assigned the correct SELinux
    security context on first creation by installd.
    
    Bug: 13927667
    Change-Id: I4857d031f9e7e60d48b8c72fcb22a81b3a2ebaaa
    Signed-off-by: Stephen Smalley <sds@tycho.nsa.gov>
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    ART profiler
    
    Add args to the installd commands for profiler usage.
    Make installd create the profile files and allow apps
    to write to them.
    
    The profile files are in /data/dalvik-cache/profiles.  This
    central location is needed due to permissions issues with
    dex2oat reading from an app's data directory.  The solution
    is to put the profile file in a directory owned by the
    install user and make the file writeable by the shared group
    id of for the app.  The app can read and write to these files
    only in the profiles directory.  The 'system' user also needs
    to be able to read the files in order to determine the amount
    of change to the file over time.
    
    Bug: 12877748
    Change-Id: I9b8e59e3bd7df8a1bf60fa7ffd376a24ba0eb42f
    
    Conflicts:
            cmds/installd/commands.c
    Change legacy "persona" references to userid_t.
    
    Offers stronger typing with no functional change.
    
    Change-Id: I09f0262470feec5cfdf26658f998c20550af84d4
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    Migrate CA certificates to all users
    
    Copies the /data/misc/keychain/cacert-* directories to all users on
    the device, whereas previously they were simply copied to user 0.
    
    This is a shallow copy so anything that wasn't supposed to be there
    will disappear.
    
    Bug: 17811821
    Change-Id: Iae5909ab8d5efdb83c9c8fdf0e10ab7060d022cc
    Add new system APK locations.
    
    Add /system/priv-app and /oem/app paths to system paths.  Also allow
    rmdex on system apps, and quietly ignore when it was already removed.
    
    Also relax logging when clearing code cache, since it's optional.
    
    Bug: 17205122
    Change-Id: I4fc4d0f63a3596937c4defbd64e1f8a1c563f02d
    Remove obsolete prunedexcache
    
    Bug: 16875245
    
    (cherry picked from commit 5f727f86942a188354c028356f1167794fdc8655)
    
    Change-Id: I06e14c405aa4af295795982c1d236be3cb00e893
    Add vm_safe_mode to dexopt.
    
    The flag enforces interpret-only flag for dex2oat.
    
    Bug: 12457423
    Change-Id: Ifdafcc1afa32996577fa44c5682eeb58c79772ac
    Make system use patchoat to relocate during runtime.
    
    Make installd understand a patchoat directive and carry it out.
    
    Bug: 15358152
    
    (cherry picked from commit 7365a10689df23334d245b211ce272502ad20669)
    
    Change-Id: Id84a15e626ddde63876914068d3d9aa037abc65b
    Offer to delete code cache directories.
    
    Bug: 16187224
    Change-Id: Ia860b051a34ffdfb4f6e0ea19f90cb73509c4eee
    Exclude subdirectories when pruning the dex cache.
    
    This requires a companion package manager change to prune
    each instruction specific dex cache individually.
    
    bug: 15677279
    
    Change-Id: I5891981512bde20e49bff65b1842c28886f2b177
    Rename 'mkuser' command to 'mkuserconfig'
    
    Brings the name more in line with what it actually does.
    
    Change-Id: I0adb14deb1a035abdbe51714356bd0c94ccf04c5
    Add an installd command to prune dex files.
    
    This is a straightforward port of logic from
    PackageManagerService#pruneDexFiles.
    
    bug: 14407732
    
    Change-Id: I892cff027ddcbb1a4fb37a7af5ecf1697049a188
    Add installd command to create /data/misc user dir
    
    New command 'mkuser <id>' sets up a user directory in /data/misc/user/,
    readable by all apps within that user and writeable by the local system
    process.
    
    Change-Id: I5ddde8c4a80f606e723bb41aa64581a0720842d5
    Add instruction-set arguments to installd commands.
    
    The instruction-set is used to construct the dalvik cache
    path and is also passed down to dex2oat.
    
    (cherry picked from commit 791781bfb8cdcdf90e32968159603e2fe5098d94)
    
    Change-Id: I43396b16f6eaecacf0fb7d052526fc5a239167ac
    Add instruction-set arguments to installd commands.
    
    The instruction-set is used to construct the dalvik cache
    path and is also passed down to dex2oat.
    
    Change-Id: Ie480841b3e917dabe23ad4d5f4a0b08990500a51
    Extend installd to support SELinux restorecon function.
    
    Implement new restorecondata function which will allow
    the relabeling of /data/data and /data/user directories.
    This is needed in the case of certain OTAs. Not every
    boot will apply this relabeling however. Consult change
    I77bf2a0c4c34b1feef6fdf4d6c3bd92dbf32f4a1 for
    clarification on this issue.
    
    Change-Id: I05e8b438950ddb908e46c9168ea6ee601e6d674f
    Signed-off-by: rpcraig <rpcraig@tycho.ncsc.mil>
    ART profiler
    
    Add args to the installd commands for profiler usage.
    Make installd create the profile files and allow apps
    to write to them.
    
    The profile files are in /data/dalvik-cache/profiles.  This
    central location is needed due to permissions issues with
    dex2oat reading from an app's data directory.  The solution
    is to put the profile file in a directory owned by the
    install user and make the file writeable by the shared group
    id of for the app.  The app can read and write to these files
    only in the profiles directory.  The 'system' user also needs
    to be able to read the files in order to determine the amount
    of change to the file over time.
    
    Bug: 12877748
    Change-Id: I9b8e59e3bd7df8a1bf60fa7ffd376a24ba0eb42f
    
    Conflicts:
            cmds/installd/commands.c
    Runtime resource overlay, iteration 2
    
    Support any number of overlay packages. Support any target package.
    
    UPDATED PACKAGE MATCHING
    ------------------------
    In Runtime resource overlay, iteration 1, only a single overlay package
    was considered. Package matching was based on file paths:
    /vendor/overlay/system/framework-res.apk corresponded to
    /system/framework-res.apk. Introduce a more flexible matching scheme
    where any package is an overlay package if its manifest includes
    
        <overlay targetPackage="com.target.package"/>
    
    For security reasons, an overlay package must fulfill certain criteria
    to take effect: see below.
    
    THE IDMAP TOOL AND IDMAP FILES
    ------------------------------
    Idmap files are created by the 'idmap' binary; idmap files must be
    present when loading packages. For the Android system, Zygote calls
    'idmap' as part of the resource pre-loading. For application packages,
    'idmap' is invoked via 'installd' during package installation (similar
    to 'dexopt').
    
    UPDATED FLOW
    ------------
    The following is an outline of the start-up sequences for the Android
    system and Android apps. Steps marked with '+' are introduced by this
    commit.
    
    Zygote initialization
       Initial AssetManager object created
    +    idmap --scan creates idmaps for overlays targeting 'android', \
               stores list of overlays in /data/resource-cache/overlays.list
       AssetManager caches framework-res.apk
    +  AssetManager caches overlay packages listed in overlays.list
    
    Android boot
       New AssetManager's ResTable acquired
         AssetManager re-uses cached framework-res.apk
    +    AssetManager re-uses cached 'android' overlays (if any)
    
    App boot
       ActivityThread prepares AssetManager to load app.apk
    +  ActivityThread prepares AssetManager to load app overlays (if any)
       New AssetManager's ResTable acquired as per Android boot
    
    SECURITY
    --------
    Overlay packages are required to be pre-loaded (in /vendor/overlay).
    These packages are trusted by definition. A future iteration of runtime
    resource overlay may add support for downloaded overlays, which would
    likely require target and overlay signatures match for the overlay to
    be trusted.
    
    LOOKUP PRIORITY
    ---------------
    During resource lookup, packages are sequentially queried to provide a
    best match, given the constraints of the current configuration. If any
    package provide a better match than what has been found so far, it
    replaces the previous match. The target package is always queried last.
    
    When loading a package with more than one overlay, the order in which
    the overlays are added become significant if several packages overlay
    the same resource.
    
    Had downloaded overlays been supported, the install time could have been
    used to determine the load order. Regardless, for pre-installed
    overlays, the install time is randomly determined by the order in which
    the Package Manager locates the packages during initial boot. To support
    a well-defined order, pre-installed overlay packages are expected to
    define an additional 'priority' attribute in their <overlay> tags:
    
        <overlay targetPackage="com.target.package" priority="1234"/>
    
    Pre-installed overlays are loaded in order of their priority attributes,
    sorted in ascending order.
    
    Assigning the same priority to several overlays targeting the same base
    package leads to undefined behaviour. It is the responsibility of the
    vendor to avoid this.
    
    The following example shows the ResTable and PackageGroups after loading
    an application and two overlays. The resource lookup framework will
    query the packages in the order C, B, A.
    
            +------+------+-     -+------+------+
            | 0x01 |      |  ...  |      | 0x7f |
            +------+------+-     -+------+------+
                |                           |
            "android"                Target package A
                                            |
                           Pre-installed overlay B (priority 1)
                                            |
                           Pre-installed overlay C (priority 2)
    
    Change-Id: If49c963149369b1957f7d2303b3dd27f669ed24e
    Proper security labeling of multi-user data directories.
    
    Add seinfo paramater to appropriate make directory
    functions. This allows proper labeling for multi-user
    scenarios.
    
    Change-Id: Iaba7c40645bc7b6cc823d613da0c3782acf6ddd5
    Signed-off-by: rpcraig <rpcraig@tycho.ncsc.mil>
    Change legacy "persona" references to userid_t.
    
    Offers stronger typing with no functional change.
    
    Change-Id: I09f0262470feec5cfdf26658f998c20550af84d4
    Fix issue #8768456: Settings > App Info under reports...
    
    ...app storage size for apps w/ .so files
    
    The lib directories are tagged with the apk install number,
    so must be explicitly passed down to installd.
    
    Change-Id: Iae8815afd6ba964f5b2ed86a0d04a91827391ed6
    Add seinfo parsing to PackageManagerService.
    
    This patch set allows the PMS to parse the
    mac_permissions.xml file which contains the
    seinfo values. Each package that is installed
    on the device will be assigned an seinfo value
    based on policy. This seinfo value will help label
    the app process and data directory.  Modifications
    include adjustments to ApplicationInfo.java
    to store the seinfo tag per package as well as
    adjustments to installd to communicate the seinfo
    tag to libselinux.
    
    Change-Id: I61ad1ea12fb6a9a6d0b108ec163bc4bf4c954b58
    Signed-off-by: rpcraig <rpcraig@tycho.ncsc.mil>
    Revert "App home directories are now 0700 for targetSdkVersion > 17"
    
    This reverts commit 7f5c84a0b25706746a92ad1233cbbb8923eda54d.
    
    Bug: 7966399
    Bug: 7208882
    Change-Id: I9fb13cf06c0f6605f3d992525346b14fe3259c66
    Revert "App home directories are now 0700 for targetSdkVersion > 17"
    
    This reverts commit 7f5c84a0b25706746a92ad1233cbbb8923eda54d.
    
    Bug: 7966399
    Bug: 7208882
    Change-Id: I9fb13cf06c0f6605f3d992525346b14fe3259c66
    App home directories are now 0700 for targetSdkVersion > 17
    
    Have installd set an app's home directory permissions to
    0700 if the app has targetSdkVersion > 17.
    
    Bug: 7208882
    Change-Id: Iaa4fc42fec69bc1abdfae53704d6264dd6fa965f
    remove unused code.
    
    Change-Id: Iacc8b2664a0e404dfa554f223a44126c41581ae4
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    Correcting include path in installd test project's Android.mk
    
     installd project has moved from frameworks/base to frameworks/native
     and so its test project's c_include path defined in Android.mk
     has to match the change.
    
    Change-Id: I597125ff659f51edbd9fc95371790e2d567c78be
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    Update tests for new build target
    
    Change-Id: Ia1740d1b2c0b611c4559c5c846b12fb5c3e81b07
    fix a corruption in Vector<> when adding new items
    
    would happen when vectors are copied and new items is
    added in both vectors. we didn't duplicate the underlying
    storage when adding items in vectors.
    
    Bug: 6515797
    Change-Id: If544c07d96c05821e088d7f2c9b5736f7e306c31
    frameworks/native: move Zip* from libandroidfw to libutils
    
    ZipUtils is needed by build/tools, move it from libandroidfw
    (frameworks/base) to libutils (frameworks/native).
    
    Change-Id: Ib8c41134ccdec6d6aa8d49860f8dddef49a24783
    frameworks/base refactoring
    
    create the new libandroidfw from parts of libui and libutils
    
    Change-Id: I1584995616fff5d527a2aba63921b682a6194d58
    Add a basic hashtable data structure, with tests!
    
    The basic hashtable is intended to be used to support a variety
    of different datastructures such as map, set, multimap,
    multiset, linkedmap, generationcache, etc.
    
    Consequently its interface is fairly primitive.
    
    The basic hashtable supports copy-on-write style functionality
    using SharedBuffer.
    
    The change introduces a simple generic function in TypeHelpers for
    specifying hash functions.  The idea is to add template
    specializations of hash_type<T> next to the relevant data structures
    such as String8, String16, sp<T>, etc.
    
    Change-Id: I2c479229e9d4527b4fbfe3b8b04776a2fd32c973
    Move extract native libraries to JNI code
    
    The built-in ZipFile class was quite a long time to find an unpack
    libraries. Move everything to using the libutils ZipFileRO class that
    goes quite a bit faster. Initial measurements are 6 times faster than
    the Java code.
    
    Also, read files off the disk and compare their CRC against the APK's
    CRC to see if we need to write the new file to disk. This also cuts down
    the bootup time by up to a second per APK that has native files.
    
    Change-Id: Ic464a7969a17368fb6a6b81d026888c4136c7603
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    libutils: add a binary blob cache implementation.
    
    This change adds an implementation of a cache that stores key/value
    pairs of unstructured binary blobs.
    
    Change-Id: Idd01fdabedfa3aed6d359a6efb0592967af52651
    Split UTF functions from String8/16
    
    Split out all the UTF-8/16/32 handling code from String8/16 to its own
    file to allow better reuse of code.
    
    Change-Id: If9ce63920edc75472c38da4adce0d13cda9ad2f7
    Replace epoll() with poll() and rename PollLoop to Looper.
    
    As part of this change, consolidated and cleaned up the Looper API so
    that there are fewer distinctions between the NDK and non-NDK declarations
    (no need for two callback types, etc.).
    
    Removed the dependence on specific constants from sys/poll.h such as
    POLLIN.  Instead looper.h defines events like LOOPER_EVENT_INPUT for
    the events that it supports.  That should help make any future
    under-the-hood implementation changes easier.
    
    Fixed a couple of compiler warnings along the way.
    
    Change-Id: I449a7ec780bf061bdd325452f823673e2b39b6ae
    Fix String8::operator+
    
    The LHS was ignored when using:
      String8 + String8
      String8 + (const char*)
    
    Add unit tests for above.
    
    Bug: 2898473
    Change-Id: Ic8fe7be668b665c36aaaa3fc3c3ffdfff0fbba25
    Don't build framework tests for simulator target.
    
    Change-Id: I70f29c7eb307e4f3ec5702f4eb9d97b4342e2f36
    Add OBB file helper class
    
    ObbFile is a binary blob that will be used in packaging large files
    with smaller APKs.
    
    Change-Id: Ib1594346cfa2f49113de6565af77c24efbd89d63
    Support for multiple tests
    
    The build system enforces some invariants that were being ignored
    before.
    
    Change-Id: Ie7675042af7f961a507386c13b2a0b592b591af8
    Native input dispatch rewrite work in progress.
    
    The old dispatch mechanism has been left in place and continues to
    be used by default for now.  To enable native input dispatch,
    edit the ENABLE_NATIVE_DISPATCH constant in WindowManagerPolicy.
    
    Includes part of the new input event NDK API.  Some details TBD.
    
    To wire up input dispatch, as the ViewRoot adds a window to the
    window session it receives an InputChannel object as an output
    argument.  The InputChannel encapsulates the file descriptors for a
    shared memory region and two pipe end-points.  The ViewRoot then
    provides the InputChannel to the InputQueue.  Behind the
    scenes, InputQueue simply attaches handlers to the native PollLoop object
    that underlies the MessageQueue.  This way MessageQueue doesn't need
    to know anything about input dispatch per-se, it just exposes (in native
    code) a PollLoop that other components can use to monitor file descriptor
    state changes.
    
    There can be zero or more targets for any given input event.  Each
    input target is specified by its input channel and some parameters
    including flags, an X/Y coordinate offset, and the dispatch timeout.
    An input target can request either synchronous dispatch (for foreground apps)
    or asynchronous dispatch (fire-and-forget for wallpapers and "outside"
    targets).  Currently, finding the appropriate input targets for an event
    requires a call back into the WindowManagerServer from native code.
    In the future this will be refactored to avoid most of these callbacks
    except as required to handle pending focus transitions.
    
    End-to-end event dispatch mostly works!
    
    To do: event injection, rate limiting, ANRs, testing, optimization, etc.
    
    Change-Id: I8c36b2b9e0a2d27392040ecda0f51b636456de25
    Fix validation of system paths in installd.
    
    System apps are now installed under their own directory
    (system_app_dir/app_dir/app.apk). The new path doesn't pass installd
    validation because of obsolete checks which verify that the path does
    not contain subdirectories past the system_app_dir.
    
    The CL fixes the validation to accept at most on subdirectory.
    
    Bug: 17109858
    Change-Id: I13abb52c0016610ff436f6a26bb6b3b85dc4dfb0
    Allow apk path to contain one subdirectory.
    
    In the current directory layout this prevented rm_dex and move_dex
    commands to validate the apk path and thus cleaning up resources.
    
    Bug: 16888084
    Change-Id: Iba579d075a9c6d7de047e7ffef95441498257086
    Change legacy "persona" references to userid_t.
    
    Offers stronger typing with no functional change.
    
    Change-Id: I09f0262470feec5cfdf26658f998c20550af84d4
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    Add liblog
    
    Bug: 8580410
    Change-Id: I2ca4fa00dde0b574df3619134836bcb9315bd506
    move dumpstate and dumpsys from frameworks/base to frameworks/native
    
    Change-Id: I8a5318022ce5cd3e7c8055f21fe5da74639aa6c0
    merge libsurfaceflinger_client into libgui
    
    this is the first step in unifying surfacetexture and surface.
    for this reason the header files were not moved, as most of them
    will eventually go away.
    
    NOTE: currently we keep libsurfaceflinger_client.so as an empty
    library to workaround prebuilt binaries wrongly linking against
    it.
    
    Change-Id: I130f0de2428e8579033dc41394d093f4e1431a00
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    move dumpstate and dumpsys from frameworks/base to frameworks/native
    
    Change-Id: I8a5318022ce5cd3e7c8055f21fe5da74639aa6c0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    move dumpstate and dumpsys from frameworks/base to frameworks/native
    
    Change-Id: I8a5318022ce5cd3e7c8055f21fe5da74639aa6c0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    add dumpsys -l to list available services
    
    - for people with poor memory like me :)
    
    Change-Id: I60160ca333ac4864bb8328f164cc2e9eba3660fc
    libutils clean-up
    
    Change-Id: I6ff4cfc736751de2912c697f954e45e275f2d386
    Ignore SIGPIPE is some of the tools used via bugreport
    
     adb bugreport > b & sleep 5; kill $?
    will show that a bunch of tools will SIGPIPE when trying to output data
    which is normal.
    We don't have a way on linux (bsd yes), to set NOSIGPIPE on the file desc
    passed down via fork/exec.
    
    Bug: 6447319
    Change-Id: I25b30a823addcff89d252f162d0a07035d4fdd3f
    move dumpstate and dumpsys from frameworks/base to frameworks/native
    
    Change-Id: I8a5318022ce5cd3e7c8055f21fe5da74639aa6c0
    atrace: clean up tracing option enabling
    
    This change switches atrace to use a table-driven approach to enabling and
    disabling options.  It unifies how framework and kernel tracing are enabled,
    and causes userland tracing options to be picked up by currently running
    processes.
    
    Change-Id: Iba2a3012ca0a67c4defdd076bce597db26e9f539
    atrace: enable running on user builds
    
    This change allows atrace to be run on a user build, where it is not run as
    root.  Some command line options still require root, and atrace will refuse to
    run if those options are specified when run as non-root.
    
    Bug: 6513400
    Change-Id: I29984cb8a7c3ad80ba5fa6b031ed8ff81acabacf
    Add disk I/O tracing.
    
    Bug: 6488845
    Change-Id: I93acb726f35b114fb1ea7297da4456826f805b7b
    atrace: add support for zlib compression
    
    This change adds the -z command line flag to atrace to enable support for
    compressing the trace with zlib as it's printed to stdout.
    
    Change-Id: I45301c63a4d1d388152244fec3c9e05e554598e8
    atrace: include the binary in debug builds
    
    This change makes the atrace module tag 'debug' so that the binary is
    included in all debug builds.
    
    Change-Id: I1fdb87be0461daf686e52ded04b37b9a122edea3
    Add the atrace utility.
    
    This change adds a new system binary to help with capturing and dumping
    kernel traces.
    
    Change-Id: If2fc074480f822588a4c171312dc4c04fd305356
    Add the atrace utility.
    
    This change adds a new system binary to help with capturing and dumping
    kernel traces.
    
    Change-Id: If2fc074480f822588a4c171312dc4c04fd305356
    atrace: avoid unnecessary writes to trace_clock
    
    Writing to trace_clock erases the trace buffer, even if the value
    hasn't changed.  This prevents use of --async_start and --async_dump
    to leave background tracing running and dump after an even that
    needs debugging, because --async_dump writes to trace_clock and
    resets the buffer before it can read it.
    
    Read and parse the current value from trace_clock before writing,
    and skip the write if the value isn't changing.
    
    Change-Id: Ia2ec5bb654fb0bd179771b511ff261731ba47dca
    atrace: add memory reclaim tracing
    
    Add "memreclaim" to trace direct reclaim, shrink slab cycles, and
    kswapd waking up and sleeping.
    
    Change-Id: I4cfb313820a3a9aa5a9d07a39c42db41c24304a6
    atrace: Add IRQ events
    
    Add "irq" to trace irq and softirq events.
    
    Change-Id: I45356c2912a1fa130667ada7b21e9fb54ddcfba5
    Add trace tag for power management.
    
    Also added a couple of other existing missing tags in atrace.
    
    Bug: 17004602
    Change-Id: I6f697a2a15922bd4695acfa203d45eaae40cd00e
    Modified atrace.cpp to recognize ATRACE_TAG_BIONIC.
    
    Bug: 15116468
    Change-Id: I621532fb53b8317f5a513edfbeb0c50c265342fc
    atrace: Add f2fs sync and ext4 write tracepoints.
    
    Change-Id: I76fa32f7d80aaeafc26494d9018b7a004e7dc3d2
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    Add support for mmc trace events
    
    Change-Id: I1d9f2a85e50f8e30d418fb97c01ce7b0fbb680bd
    Add RenderScript category for atrace.
    
    Change-Id: I069a301329f4a579c7b2716fa52c3f4a0ae0062b
    atrace: add the 'dalvik' trace category
    
    Bug: 8856374
    Change-Id: Ie7759328333d21d8123ce9d4f1a177cae5ede51e
    Add new resources trace.
    
    Change-Id: Iab8c1ef51f491e818fb4bab0ba7a042f0d9bec9a
    atrace: add support for app tracing
    
    This change adds support for the -a command line argument to atrace.  This
    argument sets the comma separated list of application names (i.e.
    /proc/self/cmdline values) for which to enable application-level tracing.
    
    Change-Id: I812d57c4cdc581943247229413f09b7e1adc10d0
    atrace: fix tracing on user builds
    
    Change-Id: Idef15d514f0bd1e117362c6a06a2ea24314feb7f
    atrace: use creat instead of truncate
    
    Change-Id: Ie25c704f33c419c0c542249ae2841393862df0ab
    atrace: add support for tracing kernel functions
    
    This change adds support for tracing specific kernel function calls using the
    function_graph tracer.  It adds a '-k' option to atrace that accepts a comma
    separated list of kernel function names for which tracing will be enabled.
    
    Change-Id: I872b2f1d474b8ebb904053853fc8cf8c0a98089c
    atrace: add the webview category
    
    Change-Id: Iefb552cd275bb5784903e8bf328890ecd233e45b
    atrace: add HAL tag
    
    Change-Id: Idfd4f2075e8cd82833ef06d4487423c62b59fe11
    atrace: fix the help string
    
    Change-Id: I19f0093d65d64e669ad71c600c103f4080bfa2c2
    atrace: clean up tracing option enabling
    
    This change switches atrace to use a table-driven approach to enabling and
    disabling options.  It unifies how framework and kernel tracing are enabled,
    and causes userland tracing options to be picked up by currently running
    processes.
    
    Change-Id: Iba2a3012ca0a67c4defdd076bce597db26e9f539
    Fix build
    
    Change-Id: Ibb398f36a7569af3480e24145da4317bf5b86998
    add asynchronous tracing
    
    Change-Id: I5b8660cd4d2af2ad7c6b2548c9572d3527882d6d
    atrace: add sync trace support
    
    Change-Id: I2cd2f1a1e51f6e3d1ebbde4d5442be68a218b33d
    Add -n and -S options for 'nohup', offline traces
    
    Change-Id: Ieef12b36b8519ff689ab5a81447b1b9bf4806171
    atrace: make clock & bus bw tracing optional
    
    This change makes enabling clock tracing and bus bandwidth tracing depend on
    whether the device's kernel supports these features.  If it's not supported it
    will be skipped.
    
    Change-Id: I51d57299693635b0ecebb75de5dccd5b62d47be3
    atrace: add clock rate and bus utilization
    
    Change-Id: I4e1764b51225436fc2b3d61454ee822f511a1a7d
    atrace: enable running on user builds
    
    This change allows atrace to be run on a user build, where it is not run as
    root.  Some command line options still require root, and atrace will refuse to
    run if those options are specified when run as non-root.
    
    Bug: 6513400
    Change-Id: I29984cb8a7c3ad80ba5fa6b031ed8ff81acabacf
    Add disk I/O tracing.
    
    Bug: 6488845
    Change-Id: I93acb726f35b114fb1ea7297da4456826f805b7b
    atrace: add support for tracing CPU idle events
    
    This change adds the -i command line flag to atrace to enable tracing CPU idle
    kernel events.
    
    Change-Id: I4a2c8619224c0f50c7fd7c61c7b24fa2211f656c
    atrace: add support for zlib compression
    
    This change adds the -z command line flag to atrace to enable support for
    compressing the trace with zlib as it's printed to stdout.
    
    Change-Id: I45301c63a4d1d388152244fec3c9e05e554598e8
    atrace: make cpu freq governor tracing optional
    
    This change allows atrace to run on kernels that do not have CPU frequency
    interactive governor tracing enabled in the kernel.
    
    Change-Id: Ibfde751da7b6cc9a55794355093a37feb28f5e52
    atrace: add some more command line options
    
    This change adds two command line optiosn:
      -b for setting the trace buffer size
      -f for enabling tracing of the CPU frequency
      -l for enabling tracing of the CPU load
    
    Change-Id: Id99851a4c4eba5cfed218f29081e072bbe492133
    Add the atrace utility.
    
    This change adds a new system binary to help with capturing and dumping
    kernel traces.
    
    Change-Id: If2fc074480f822588a4c171312dc4c04fd305356
    Add the atrace utility.
    
    This change adds a new system binary to help with capturing and dumping
    kernel traces.
    
    Change-Id: If2fc074480f822588a4c171312dc4c04fd305356
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    move dumpstate and dumpsys from frameworks/base to frameworks/native
    
    Change-Id: I8a5318022ce5cd3e7c8055f21fe5da74639aa6c0
    merge libsurfaceflinger_client into libgui
    
    this is the first step in unifying surfacetexture and surface.
    for this reason the header files were not moved, as most of them
    will eventually go away.
    
    NOTE: currently we keep libsurfaceflinger_client.so as an empty
    library to workaround prebuilt binaries wrongly linking against
    it.
    
    Change-Id: I130f0de2428e8579033dc41394d093f4e1431a00
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libutils clean-up
    
    Change-Id: I6ff4cfc736751de2912c697f954e45e275f2d386
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    move dumpstate and dumpsys from frameworks/base to frameworks/native
    
    Change-Id: I8a5318022ce5cd3e7c8055f21fe5da74639aa6c0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    move dumpstate and dumpsys from frameworks/base to frameworks/native
    
    Change-Id: I8a5318022ce5cd3e7c8055f21fe5da74639aa6c0
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add a note about emulated sdcard in rawbu usage dump
    
    Change-Id: I95af9175235a18716d63a863b482a323392e4fa2
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    releax wait timeout on start of dumpstate service
    
    Bug: 12181612
    Change-Id: If7ae97de1e42890dac37d036ead669ccda65e688
    releax wait timeout on start of dumpstate service
    
    Bug: 12181612
    Change-Id: If7ae97de1e42890dac37d036ead669ccda65e688
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    Add android.hardware.camera.any feature to camera permissions.
    
    Bug: 6847310
    Change-Id: I9283932a7c211cd08b3b9fe6a93d8f219e6c9767
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add system feature for ConnectionService API support (2/3)
    
    Bug: 17445268
    
    Change-Id: Ib96e50e2558d2744f74419fd022f3f20d578a2de
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Adding PackageManager feature strings for stepcounter and stepdetector.
    
    Change-Id: I75ec21900fdc3ea80b61ec12c851a0c5ce9c44e8
    Add hardware feature android.hardware.bluetooth.le xml file
    
    The feature is used to differ platforms that support bluetooth low
    engery radio
    bug 8369273
    
    Change-Id: I8714b6b03a4e5692d4573ea7c156b002b7ee42dd
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add ethernet feature xml.
    
    BUG: 15143878
    Change-Id: I15dbac6a7e73a94960e76669120792724fbd8acb
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Adding PackageManager feature strings for stepcounter and stepdetector.
    
    Change-Id: I75ec21900fdc3ea80b61ec12c851a0c5ce9c44e8
    Add hardware feature android.hardware.bluetooth.le xml file
    
    The feature is used to differ platforms that support bluetooth low
    engery radio
    bug 8369273
    
    Change-Id: I8714b6b03a4e5692d4573ea7c156b002b7ee42dd
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add HDMI-CEC feature xml.
    
    Change-Id: I51af146550cd72564e89874c867c181326d15f2c
    Add ethernet feature xml.
    
    BUG: 15143878
    Change-Id: I15dbac6a7e73a94960e76669120792724fbd8acb
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add feature flags for verified boot and securely remove users.
    
    Bug: 17405636
    Change-Id: I06c0319f7903787910c52d65025b0d77d9e0575f
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add android.hardware.camera.any feature to camera permissions.
    
    Bug: 6847310
    Change-Id: I9283932a7c211cd08b3b9fe6a93d8f219e6c9767
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Adding a portrait and landscape file
    
    - Some wearable devices do not support landscape
    - CTS tests were expecting some behavior which would not work since
      it was not able to switch from portrait to landscape.
    - Creating 2 files and then each of the devices will include that
      particular feature that it supports.
    
    Change-Id: If0e3151e23264a49f4964e1c643b33a90b78c114
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add system feature for ConnectionService API support (2/3)
    
    Bug: 17445268
    
    Change-Id: Ib96e50e2558d2744f74419fd022f3f20d578a2de
    Fix typo for android.hardware.audio.output feature in handheld device config
    
    Bug: 15318046
    Change-Id: I6437a2e87a909a8ef4ce6fcdc56ff06c5599a15a
    Rename managed_profiles feature to managed_users
    
    Bug: 17392243
    Change-Id: Ib60d1563ecdda9a979196ef51e849be2f9e9f841
    Add feature android.hardware.audio.output xml file
    
    Bug: 15318046
    Change-Id: I49f0881752493ac0bad238b43ce7e1e147119528
    API Review: Update managed profiles feature flag.
    
    Feature flag renamed to FEATURE_MANAGED_PROFILES
    
    Bug: 15025371
    
    Change-Id: I999fd9484398da3266c7655d83e4266c2b76cf3a
    (cherry picked from commit 17e4e6b62b12cc7f11c07f737f9290e2ecfc6cc4)
    API Review: Update managed profiles feature flag.
    
    Feature flag renamed to FEATURE_MANAGED_PROFILES
    
    Bug: 15025371
    
    Change-Id: I999fd9484398da3266c7655d83e4266c2b76cf3a
    Add feature for voice recognition software.
    
    Change-Id: Ie11c6f9b7eb466f17e9ce145b582ffe7d2475cbd
    Add android.software.managedprofiles feature flag.
    
    Change-Id: I743bfddd2244b50fcf7386a2b8a21c7da2805cf6
    Remove accessibility as an optional feature
    
    Bug:13439904
    Change-Id: Icc6b84d05a24cbfdaa121929e7c7c77c0f7eed17
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Enable FEATURE_DEVICE_ADMIN for handheld devices
    
    Bug: 9520957
    Change-Id: I9c09dc726509db9e6d9ba4700255c74528b9f9fa
    Implement #8323587, #8323342, #8323590: new features.
    
    8323587: Add feature for supporting app widgets
    8323342: Add feature for replacing the home screen
    8323590: Add feature for supporting input methods
    
    The app widget service looks for the app widget feature
    and refuses to work if it doesn't exist.  I didn't do
    this for the input method service because some devices
    will probably want to still make use of that mechanism
    without supporting third party input methods.
    
    Change-Id: Ia358ccc6059d43f163d74810c7cbe9568a67ede9
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add feature flags for verified boot and securely remove users.
    
    Bug: 17405636
    Change-Id: I06c0319f7903787910c52d65025b0d77d9e0575f
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    DO NOT MERGE: Removing android prefix for ECG feature
    
    Bug: 17272904
    
    Change-Id: Ia476bd8853e098600b681bb769536774596b9345
    Adding an ECG hardware feature
    
    Change-Id: I368772d4cd6b2713fb5180bedc91bf2b5bc015b4
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add android.hardware.camera.any feature to camera permissions.
    
    Bug: 6847310
    Change-Id: I9283932a7c211cd08b3b9fe6a93d8f219e6c9767
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add android.hardware.camera.any feature to camera permissions.
    
    Bug: 6847310
    Change-Id: I9283932a7c211cd08b3b9fe6a93d8f219e6c9767
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add feature android.hardware.consumerir xml file
    
    Bug: 10676690
    Change-Id: I2cc62b9c97a71588c43ff96ca38d470976bde9b0
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    DO NOT MERGE: Add standard android.hardware.camera.external permission file.
    
    Any device that lists the android.hardware.camera.external feature
    must also list android.hardware.camera.any feature.
    
    Change-Id: I7accd27501e66e99a8addaeed890df709208fd13
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add FEATURE_GAMEPAD.
    
    This allows micro-consoles or other devices to signify that there's a
    game controller in the box, even if the user hasn't connected it.
    
    Change-Id: I93cfba8bd1376aa5d1ec772a5b643b974eaa36c5
    Adding Feature for HRM
    
    Change-Id: Iaec58df9c27753ce2c39c6bbe3735f1894684cb5
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Adding a portrait and landscape file
    
    - Some wearable devices do not support landscape
    - CTS tests were expecting some behavior which would not work since
      it was not able to switch from portrait to landscape.
    - Creating 2 files and then each of the devices will include that
      particular feature that it supports.
    
    Change-Id: If0e3151e23264a49f4964e1c643b33a90b78c114
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    add com.android.nfc_extras to native/ for pdk.
    
    Change-Id: Ife40ac33241878814f5d9e027e43cd176c57fb56
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Move com.nxp.mifare to frameworks/native.
    
    Change-Id: I4dbec41cbf062334af8d66780859736f0ee5dab3
    add com.android.nfc_extras to native/ for pdk.
    
    Change-Id: Ife40ac33241878814f5d9e027e43cd176c57fb56
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add feature android.hardware.audio.output xml file
    
    Bug: 15318046
    Change-Id: I49f0881752493ac0bad238b43ce7e1e147119528
    Add ethernet feature xml.
    
    BUG: 15143878
    Change-Id: I15dbac6a7e73a94960e76669120792724fbd8acb
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add android.software.live_tv feature
    
    Bug: 17284986
    Change-Id: I777d045f61a50f7ea473cb26bb509123c440587a
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add hardware feature android.hardware.bluetooth.le xml file
    
    The feature is used to differ platforms that support bluetooth low
    engery radio
    bug 8369273
    
    Change-Id: I8714b6b03a4e5692d4573ea7c156b002b7ee42dd
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add android.software.webview software feature.
    
    Some devices may ship without a working WebView implementation. This
    system feature will be present on devices that support a
    functional WebView.
    
    Bug: 13438487
    Change-Id: I1f72756196661dca01614e124895522b60e52493
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add feature for voice recognition software.
    
    Change-Id: Ie11c6f9b7eb466f17e9ce145b582ffe7d2475cbd
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Adding Feature for HRM
    
    Change-Id: Iaec58df9c27753ce2c39c6bbe3735f1894684cb5
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Update comment to use correct GPS file for wearable.
    
    Change-Id: I91c4363dbcc6cada8d6e9599d1b15e77febee0e5
    Add feature android.hardware.audio.output xml file
    
    Bug: 15318046
    Change-Id: I49f0881752493ac0bad238b43ce7e1e147119528
    Adding a portrait and landscape file
    
    - Some wearable devices do not support landscape
    - CTS tests were expecting some behavior which would not work since
      it was not able to switch from portrait to landscape.
    - Creating 2 files and then each of the devices will include that
      particular feature that it supports.
    
    Change-Id: If0e3151e23264a49f4964e1c643b33a90b78c114
    Remove some features from wearables
    
    It was incorrectly assumed that these devices must require
    a device admin, camera, and network location.
    
    Change-Id: I51942ece6c0b9f824bfc3ee82917a2496ae81788
    Add device admin to wearables for API8 Compat
    
    Bug:13386441
    Change-Id: I8814976db791bb1f2e60b6a9fc49afdd5f360414
    Remove accessibility as an optional feature
    
    Bug:13439904
    Change-Id: Icc6b84d05a24cbfdaa121929e7c7c77c0f7eed17
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Enable FEATURE_DEVICE_ADMIN for handheld devices
    
    Bug: 9520957
    Change-Id: I9c09dc726509db9e6d9ba4700255c74528b9f9fa
    Implement #8323587, #8323342, #8323590: new features.
    
    8323587: Add feature for supporting app widgets
    8323342: Add feature for replacing the home screen
    8323590: Add feature for supporting input methods
    
    The app widget service looks for the app widget feature
    and refuses to work if it doesn't exist.  I didn't do
    this for the input method service because some devices
    will probably want to still make use of that mechanism
    without supporting third party input methods.
    
    Change-Id: Ia358ccc6059d43f163d74810c7cbe9568a67ede9
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add OpenGL ES AEP feature xml.
    
    Bug: 15593761
    Change-Id: Ia961c64c5bf33da752518921c570c7f6dafe724e
    API Review: Update managed profiles feature flag.
    
    Feature flag renamed to FEATURE_MANAGED_PROFILES
    
    Bug: 15025371
    
    Change-Id: I999fd9484398da3266c7655d83e4266c2b76cf3a
    (cherry picked from commit 17e4e6b62b12cc7f11c07f737f9290e2ecfc6cc4)
    API Review: Update managed profiles feature flag.
    
    Feature flag renamed to FEATURE_MANAGED_PROFILES
    
    Bug: 15025371
    
    Change-Id: I999fd9484398da3266c7655d83e4266c2b76cf3a
    Add android.software.managedprofiles feature flag.
    
    Change-Id: I743bfddd2244b50fcf7386a2b8a21c7da2805cf6
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add XML files for new camera2 hardware features
    
    Bug: 15415688
    Change-Id: I1ea9f65b03c4fa06a5004f9d1d485935742001c8
    DO NOT MERGE: Add standard android.hardware.camera.external permission file.
    
    Any device that lists the android.hardware.camera.external feature
    must also list android.hardware.camera.any feature.
    
    Change-Id: I7accd27501e66e99a8addaeed890df709208fd13
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add NFC host-based card emulation feature.
    
    Change-Id: I699817731cdaf7139daeb10d4e24e376ba66fc8e
    Add hardware feature android.hardware.bluetooth.le xml file
    
    The feature is used to differ platforms that support bluetooth low
    engery radio
    bug 8369273
    
    Change-Id: I8714b6b03a4e5692d4573ea7c156b002b7ee42dd
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Rename managed_profiles feature to managed_users
    
    Bug: 17392243
    Change-Id: Ib60d1563ecdda9a979196ef51e849be2f9e9f841
    Add feature android.hardware.audio.output xml file
    
    Bug: 15318046
    Change-Id: I49f0881752493ac0bad238b43ce7e1e147119528
    API Review: Update managed profiles feature flag.
    
    Feature flag renamed to FEATURE_MANAGED_PROFILES
    
    Bug: 15025371
    
    Change-Id: I999fd9484398da3266c7655d83e4266c2b76cf3a
    (cherry picked from commit 17e4e6b62b12cc7f11c07f737f9290e2ecfc6cc4)
    API Review: Update managed profiles feature flag.
    
    Feature flag renamed to FEATURE_MANAGED_PROFILES
    
    Bug: 15025371
    
    Change-Id: I999fd9484398da3266c7655d83e4266c2b76cf3a
    Add feature for voice recognition software.
    
    Change-Id: Ie11c6f9b7eb466f17e9ce145b582ffe7d2475cbd
    Add android.software.managedprofiles feature flag.
    
    Change-Id: I743bfddd2244b50fcf7386a2b8a21c7da2805cf6
    Remove accessibility as an optional feature
    
    Bug:13439904
    Change-Id: Icc6b84d05a24cbfdaa121929e7c7c77c0f7eed17
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Enable FEATURE_DEVICE_ADMIN for handheld devices
    
    Bug: 9520957
    Change-Id: I9c09dc726509db9e6d9ba4700255c74528b9f9fa
    Implement #8323587, #8323342, #8323590: new features.
    
    8323587: Add feature for supporting app widgets
    8323342: Add feature for replacing the home screen
    8323590: Add feature for supporting input methods
    
    The app widget service looks for the app widget feature
    and refuses to work if it doesn't exist.  I didn't do
    this for the input method service because some devices
    will probably want to still make use of that mechanism
    without supporting third party input methods.
    
    Change-Id: Ia358ccc6059d43f163d74810c7cbe9568a67ede9
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add XML files for new camera2 hardware features
    
    Bug: 15415688
    Change-Id: I1ea9f65b03c4fa06a5004f9d1d485935742001c8
    DO NOT MERGE: Add standard android.hardware.camera.external permission file.
    
    Any device that lists the android.hardware.camera.external feature
    must also list android.hardware.camera.any feature.
    
    Change-Id: I7accd27501e66e99a8addaeed890df709208fd13
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Rename managed_profiles feature to managed_users
    
    Bug: 17392243
    Change-Id: Ib60d1563ecdda9a979196ef51e849be2f9e9f841
    API Review: Update managed profiles feature flag.
    
    Feature flag renamed to FEATURE_MANAGED_PROFILES
    
    Bug: 15025371
    
    Change-Id: I999fd9484398da3266c7655d83e4266c2b76cf3a
    (cherry picked from commit 17e4e6b62b12cc7f11c07f737f9290e2ecfc6cc4)
    API Review: Update managed profiles feature flag.
    
    Feature flag renamed to FEATURE_MANAGED_PROFILES
    
    Bug: 15025371
    
    Change-Id: I999fd9484398da3266c7655d83e4266c2b76cf3a
    Add android.software.managedprofiles feature flag.
    
    Change-Id: I743bfddd2244b50fcf7386a2b8a21c7da2805cf6
    Add new software features
    
    Wearable devices are much more stripped down than
    handheld and tablet devices. There are system
    services that must not be present on wearable
    devices. Those services have their own feature
    xml files that get copied to the system image
    as needed. They are included by default in the
    handheld and tablet core feature files in order
    to maintain previous behavior.
    
    Wearable devices should always copy the
    data/etc/wearable_core_hardware.xml file and
    whatever other files that represent required
    services (eg. data/etc/android.software.print.xml).
    
    Change-Id: I410442d45854fe54cba1131ce488a5a459ac580a
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move hardware feature definitions
    
    Move the hardware feature xml files from frameworks/base/data/etc
    to frameworks/native/data/etc.
    
    Change-Id: I0c572237b78f233d58627801896c0a81215531e8
    Add a simple OpenGL ES 2.0 test program that displays a camera preview stream.
    
    Uses a SurfaceTexture feeding into a OpenGL ES2 GLSurfaceView. Also
    uses accelerometer data and SurfaceTexture-provided timestamps for a
    simple physics simulation which moves the camera preview oval in
    response to device movement.
    
    Change-Id: I275a0c6a4e25829d617e635b25e70e2a9c8455cb
    Fix another set of out-of-date headers.
    
    This time in XML files.
    
    Change-Id: Iebe36810c3a2d7a6ff354f43808b1b8649b85637
    eclair snapshot
    donut snapshot
    Manually merge 129, 174, and 233 from donut
    
    This adds a static OpenGL ES API.
    
    Here are the three commit messages for the original changes:
    
    Clean up trivial Eclipse warnings and fix whitespace.
    
    Added @Override to overridden methods.
    Removed unused imports.
    Converted tabs to spaces.
    Removed \r characters from end-of-lines.
    Add .gitignore file to ignore the .class files that are
    generated when the "gen" script is run.
    
    This is the 2nd commit message:
    
    Improve glgen
    
    + gen script is really a bash script rather than a sh script,
      so declare that to be true. (For example, it uses pushd,
      which is a part of bash, but not a part of sh. Not sure
      how this worked until now. Possibly gen was only run in
      environments where /bin/sh was really bash.
    
    + Check the results of the java compile of the code generator,
      and abort the script if the compile fails.
    
    + Turn on the bash shell option that guards against using
      uninitialized variables in the script.
    
    + Remove the generated class files.
    
    Refactor JniCodeEmitter into two classes: a general-purpose
    JniCodeEmitter and a specific Jsr239CodeEmitter. The hope is
    to use JniCodeEmitter as a base for emitting static OpenGL ES
    bindings.
    
    This is the 3rd commit message:
    
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    Add an Android-specific static OpenGL ES 1.1 Java API.
    
    This change adds four new public classes that expose a static OpenGL ES 1.1 API:
    
            android.opengl.GLES10
            android.opengl.GLES10Ext
            android.opengl.GLES11
            android.opengl.GLES11Ext
    
    Benefits:
    
     + The static API is slightly faster (1% to 4%) than the existing Interface based JSR239 API.
     + The static API is similar to the C API, which should make it easier to import C-based
       example code.
     + The static API provides a clear path for adding new OpenGL ES 1.1 extensions
       and OpenGL ES 2.0 APIs, neither of which currently have a JSR standard.
    
    Example:
    
      import static android.opengl.GLES10.*;
    
      ...
    
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    Note that it is possible to mix-and-match calls to both the static and JSR239 APIs.
    This works because neither API maintains state. They both call through to the same underlying
    C OpenGL ES APIs.
    
    Implementation details:
    
    This change enhances the "glgen" "gen" script to generate both the original JSR239 and
    new static OpenGL ES APIs. The contents of the generated JSR239 classes remained the same as before,
    so there is no need to check in new versions of the generated JSR239 classes.
    
    As part of this work the gen script was updated to be somewhat more robust, and to
    work with git instead of perforce. The script prints out commands to git add the generated files,
    but leaves it up to the script runner to actually execute those commands.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    move services executables sources in their respective src folder
    
    Change-Id: Ic65434a26c7fed1699abf0851fec6faa40e09c0c
    make all libsurfaceflinger and libsensorservice symbols's visibility hidden
    
    we only export the main entry-point.
    this saves about 150KB.
    
    Change-Id: I55eb2b6705386fdfa43860deb62f9cdd2a0982aa
    Sensor changes.
    
    1. Some sensors can wake up the AP. Add wakelocks.
    2. Handle backward compatibility for rotation vector
       heading accuracy.
    3. Cleanup auto disabled sensors.
    4. Fix race condition between enable and dispatch.
    
    Change-Id: I39dddf12e208d83cd288201986ee994312555820
    Add liblog
    
    Bug: 8580410
    Change-Id: I2ca4fa00dde0b574df3619134836bcb9315bd506
    improve sensor battery usage tracking
    
    until now we were tracking when a sensors was
    physically enabled or disabled and we were reporting
    that to the BattaryService.
    
    this wasn incorrect because we could have several different
    apps enabling the same sensor, so the accounting by the
    battery service would be incorrect in that case (depending
    on the order in which these apps disabled said sensor).
    
    BatteryService tracks sensors per uid, however SensorService
    does this per binder connection, so we could have several
    binder connections for the same uid, to solve this we keep
    a list of sensor/uid -> count, which is the bulk of this
    change.
    
    Bug: 6661604
    Change-Id: I561c198c42ba1736a8671bdacda4c76d72b9dd6f
    Remove the simulator target from all makefiles. Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    use quaternions instead of MRPs
    
    also use correct time propagation equation
    disable the fused sensors when gyro is not present since
    they were unusable in practice.
    
    Change-Id: Iad797425784e67dc6c5690e97c71c583418cc5b5
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    frameworks/base: remove LOCAL_PRELINK_MODULE
    
    Change-Id: I54dd62ebef47e7690afa5a858f3cad941b135481
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Add support for virtual sensors.
    
    Rework sensorservice to allow "virtual sensors", that is
    sensors that report a synthetized value based on real sensors.
    
    the main change to sensorservice is around managing which real
    sensor need to be activated and which rate to use.
    
    The logic for all this has been moved into SensorDevice, which
    essentially wraps the sensor HAL but adds two features to it:
    - it keeps track of which sensors need to be activated
    - it keeps track of what rate needs to be used
    
    For this purpose an "identity" is associated with each real sensor
    activation, so we can track them.
    
    On start-up we check for gravity, linear-acceleration and
    rotation-vector sensors, if they're not present in the HAL, we
    synthetize them in sensor-service.
    
    Change-Id: I841db2c1b37ef127ed571efa21732ecc5adf1800
    new SensorService
    
    remove old sensor service and implement SensorManager
    on top of the new (native) SensorManger API.
    
    Change-Id: Iddb77d498755da3e11646473a44d651f12f40281
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    Fix for AOSP fusion sensors not handling multiple clients correctly.
    
    Bug: 10786801
    Change-Id: I7b938bc583a303a30237c3d93b5accbf64cc90b5
    various fixes to the sensorservice
    
    1) "google" sensors are now reporting AOSP as the vendor string
    2) don't expose the system's sensor fusion if the HAL provides it
    3) use uncalibrated gyro if availble for the system's sensor fusion
    
    Change-Id: I25140436cdb29d55e39fd6fbbf8c44a410a83d5c
    use quaternions instead of MRPs
    
    also use correct time propagation equation
    disable the fused sensors when gyro is not present since
    they were unusable in practice.
    
    Change-Id: Iad797425784e67dc6c5690e97c71c583418cc5b5
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    use quaternions instead of MRPs
    
    also use correct time propagation equation
    disable the fused sensors when gyro is not present since
    they were unusable in practice.
    
    Change-Id: Iad797425784e67dc6c5690e97c71c583418cc5b5
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    fix [3369027] Sensor.TYPE_ROTATION_VECTOR is unstable and returns NaNs when running slowly
    
    The cut-off frequency of the lowpass filter was too high
    for the sampling rate used by DELAY_NORMAL.
    
    Now we use the same filters used for the gravity vector
    (cascaded biquad at 1.5 Hz)
    
    Change-Id: I319dc4f449a3abd553d61b196a9ddcf7782f912d
    fix [3237242] sensormanager sensor active count gets out of sync
    
    whether a physical sensor needed to be active or not was managed by
    a simpe reference counter; unfortunatelly nothing prevented it to
    get out of sync if a sensor was disabled more than once.
    
    sensorservice already maintainted a list of all the "clients"
    connected to a physical sensor; we now use that list to determine if
    a sensor should be enabled. This can never be "out-of-sync" since
    this is the only data structure linking a sensor to a user of that
    sensor.
    
    also removed the isEnabled() method, which was never used and
    implemented wrongly (since it didn't take into account that a sensor
    could be disabled for a client but not of another).
    
    Change-Id: I789affb877728ca957e99f7ba749def37c4db1c7
    Add support for virtual sensors.
    
    Rework sensorservice to allow "virtual sensors", that is
    sensors that report a synthetized value based on real sensors.
    
    the main change to sensorservice is around managing which real
    sensor need to be activated and which rate to use.
    
    The logic for all this has been moved into SensorDevice, which
    essentially wraps the sensor HAL but adds two features to it:
    - it keeps track of which sensors need to be activated
    - it keeps track of what rate needs to be used
    
    For this purpose an "identity" is associated with each real sensor
    activation, so we can track them.
    
    On start-up we check for gravity, linear-acceleration and
    rotation-vector sensors, if they're not present in the HAL, we
    synthetize them in sensor-service.
    
    Change-Id: I841db2c1b37ef127ed571efa21732ecc5adf1800
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    use quaternions instead of MRPs
    
    also use correct time propagation equation
    disable the fused sensors when gyro is not present since
    they were unusable in practice.
    
    Change-Id: Iad797425784e67dc6c5690e97c71c583418cc5b5
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    Sensor batching. Changes to the native code.
    
    Bug: 10109508
    Change-Id: I7333f3aac76125a8226a4c99c901fb904588df04
    fix a dead-lock in sensorservice
    
    sensorservice would deadlock if for some reason
    a sensor failed to enable.
    
    simplifed the code a bit, and made it behave a little
    closer to mr1.1 -- I couldn't convince myself that
    some changes in how locks were used were correct.
    
    Bug: 9794362
    Change-Id: I6110f5dbb67e543f1c71d127de2299232badb36a
    Fix activation issue with auto disabled sensors.
    
    Auto disabled sensors get auto disabled after trigger.
    An activation after this wasn't working because the
    state was not being reset.
    
    b/8609561
    
    Change-Id: If72c9f27345e91671d7ad0a7a066f6dc3d255b78
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    fix [3237242] sensormanager sensor active count gets out of sync
    
    whether a physical sensor needed to be active or not was managed by
    a simpe reference counter; unfortunatelly nothing prevented it to
    get out of sync if a sensor was disabled more than once.
    
    sensorservice already maintainted a list of all the "clients"
    connected to a physical sensor; we now use that list to determine if
    a sensor should be enabled. This can never be "out-of-sync" since
    this is the only data structure linking a sensor to a user of that
    sensor.
    
    also removed the isEnabled() method, which was never used and
    implemented wrongly (since it didn't take into account that a sensor
    could be disabled for a client but not of another).
    
    Change-Id: I789affb877728ca957e99f7ba749def37c4db1c7
    Add support for virtual sensors.
    
    Rework sensorservice to allow "virtual sensors", that is
    sensors that report a synthetized value based on real sensors.
    
    the main change to sensorservice is around managing which real
    sensor need to be activated and which rate to use.
    
    The logic for all this has been moved into SensorDevice, which
    essentially wraps the sensor HAL but adds two features to it:
    - it keeps track of which sensors need to be activated
    - it keeps track of what rate needs to be used
    
    For this purpose an "identity" is associated with each real sensor
    activation, so we can track them.
    
    On start-up we check for gravity, linear-acceleration and
    rotation-vector sensors, if they're not present in the HAL, we
    synthetize them in sensor-service.
    
    Change-Id: I841db2c1b37ef127ed571efa21732ecc5adf1800
    revert parts of dc5b63e40, which made gyro drift estimation unstable
    
        initialize the system covariance matrix with non-zero
        values for the gyro-bias part. this improves the initial
        bias estimation speed significantly.
    
    the initial covariance matrix should be small because the drift
    changes slowly. the real problem is that we're not starting with
    a good estimate of the drift, which this algorithm relies on.
    
    so with this revert, it'll take a while for the drift to be estimated
    but it won't be unstable.
    
    Change-Id: Id5584bc114a2390d507643b2451b2650c1b90721
    Revert "improve sensor fusion" -- DO NOT MERGE
    
    This reverts commit bdf277355dcd647bd5d27b38fc107243a2247a02.
    This reverts commit dc5b63e40ee697324d39fe105d6f12c2bb031fc6.
    
    it might be responsible for a regression that makes the
    rotation vector spin.
    
    Bug: 7267330
    Change-Id: Ifb10e933537e70c1d85a7ba73a7e3ae59002fe62
    improve sensor fusion
    
    we now use a better quaternion propagation equation
    this is especially beneficial for lower gyroscope rates
    
    Change-Id: Ifbf273c8a092a8849ca4fe4b9bca30787e924018
    add some comments
    
    Change-Id: Ia2e2c9531715fc2bd5b51c4dc58389e01abfe7e6
    small improvement to sensor fusion
    
    1) there was a typo when computing the system covariance
    a term in dT^3 was ommitted; the impact was was very limited
    because of how small this term is.
    
    2) initialize the system covariance matrix with non-zero
    values for the gyro-bias part. this improves the initial
    bias estimation speed significantly.
    
    3) added comments here and there
    
    Change-Id: I4328c9cca73e089889d5e74b9fda99d7831762dc
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF) DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    improve sensorservice dumpsys
    
    Change-Id: I8b53d5cab884c3aca16d95df5fbf288368d52e8b
    Fix a few style issues and remove LOG spam
    
    Change-Id: I6b6f75373f4ac28f98dea6a6f1c2567a6aa02243
    More error checks to avoid div by zero.
    
    Change-Id: I18e5b72d02bf5420c14334d3a03f18fa40572d31
    Fix occasional fusion divergence by detecting it and resetting the fusion.
    
    Change-Id: I51186e12fb9b2316e3671e3908174f4495df89a0
    cleanup Kalman filter parameters, add/fix comments/units
    
    Change-Id: Iedcae7164af8f7ea0e048ea7c72d0f35d16d739f
    use quaternions instead of MRPs
    
    also use correct time propagation equation
    disable the fused sensors when gyro is not present since
    they were unusable in practice.
    
    Change-Id: Iad797425784e67dc6c5690e97c71c583418cc5b5
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    Surface maxDelay and isWakeUpSensor flag in Sensor.java.
    
    Change-Id: Idd1e9045190beeca87b086b272e8cbf0bed05bae
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    Sensor batching. Changes to the native code.
    
    Bug: 10109508
    Change-Id: I7333f3aac76125a8226a4c99c901fb904588df04
    fix a dead-lock in sensorservice
    
    sensorservice would deadlock if for some reason
    a sensor failed to enable.
    
    simplifed the code a bit, and made it behave a little
    closer to mr1.1 -- I couldn't convince myself that
    some changes in how locks were used were correct.
    
    Bug: 9794362
    Change-Id: I6110f5dbb67e543f1c71d127de2299232badb36a
    Fix activation issue with auto disabled sensors.
    
    Auto disabled sensors get auto disabled after trigger.
    An activation after this wasn't working because the
    state was not being reset.
    
    b/8609561
    
    Change-Id: If72c9f27345e91671d7ad0a7a066f6dc3d255b78
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF) DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: Ib08fe86d23db91ee153e9f91a99a35c42b9208ea
    fix [3237242] sensormanager sensor active count gets out of sync
    
    whether a physical sensor needed to be active or not was managed by
    a simpe reference counter; unfortunatelly nothing prevented it to
    get out of sync if a sensor was disabled more than once.
    
    sensorservice already maintainted a list of all the "clients"
    connected to a physical sensor; we now use that list to determine if
    a sensor should be enabled. This can never be "out-of-sync" since
    this is the only data structure linking a sensor to a user of that
    sensor.
    
    also removed the isEnabled() method, which was never used and
    implemented wrongly (since it didn't take into account that a sensor
    could be disabled for a client but not of another).
    
    Change-Id: I789affb877728ca957e99f7ba749def37c4db1c7
    Add support for virtual sensors.
    
    Rework sensorservice to allow "virtual sensors", that is
    sensors that report a synthetized value based on real sensors.
    
    the main change to sensorservice is around managing which real
    sensor need to be activated and which rate to use.
    
    The logic for all this has been moved into SensorDevice, which
    essentially wraps the sensor HAL but adds two features to it:
    - it keeps track of which sensors need to be activated
    - it keeps track of what rate needs to be used
    
    For this purpose an "identity" is associated with each real sensor
    activation, so we can track them.
    
    On start-up we check for gravity, linear-acceleration and
    rotation-vector sensors, if they're not present in the HAL, we
    synthetize them in sensor-service.
    
    Change-Id: I841db2c1b37ef127ed571efa21732ecc5adf1800
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    move services executables sources in their respective src folder
    
    Change-Id: Ic65434a26c7fed1699abf0851fec6faa40e09c0c
    Fix for AOSP fusion sensors not handling multiple clients correctly.
    
    Bug: 10786801
    Change-Id: I7b938bc583a303a30237c3d93b5accbf64cc90b5
    various fixes to the sensorservice
    
    1) "google" sensors are now reporting AOSP as the vendor string
    2) don't expose the system's sensor fusion if the HAL provides it
    3) use uncalibrated gyro if availble for the system's sensor fusion
    
    Change-Id: I25140436cdb29d55e39fd6fbbf8c44a410a83d5c
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    fix [3237242] sensormanager sensor active count gets out of sync
    
    whether a physical sensor needed to be active or not was managed by
    a simpe reference counter; unfortunatelly nothing prevented it to
    get out of sync if a sensor was disabled more than once.
    
    sensorservice already maintainted a list of all the "clients"
    connected to a physical sensor; we now use that list to determine if
    a sensor should be enabled. This can never be "out-of-sync" since
    this is the only data structure linking a sensor to a user of that
    sensor.
    
    also removed the isEnabled() method, which was never used and
    implemented wrongly (since it didn't take into account that a sensor
    could be disabled for a client but not of another).
    
    Change-Id: I789affb877728ca957e99f7ba749def37c4db1c7
    Add support for virtual sensors.
    
    Rework sensorservice to allow "virtual sensors", that is
    sensors that report a synthetized value based on real sensors.
    
    the main change to sensorservice is around managing which real
    sensor need to be activated and which rate to use.
    
    The logic for all this has been moved into SensorDevice, which
    essentially wraps the sensor HAL but adds two features to it:
    - it keeps track of which sensors need to be activated
    - it keeps track of what rate needs to be used
    
    For this purpose an "identity" is associated with each real sensor
    activation, so we can track them.
    
    On start-up we check for gravity, linear-acceleration and
    rotation-vector sensors, if they're not present in the HAL, we
    synthetize them in sensor-service.
    
    Change-Id: I841db2c1b37ef127ed571efa21732ecc5adf1800
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    fix [3237242] sensormanager sensor active count gets out of sync
    
    whether a physical sensor needed to be active or not was managed by
    a simpe reference counter; unfortunatelly nothing prevented it to
    get out of sync if a sensor was disabled more than once.
    
    sensorservice already maintainted a list of all the "clients"
    connected to a physical sensor; we now use that list to determine if
    a sensor should be enabled. This can never be "out-of-sync" since
    this is the only data structure linking a sensor to a user of that
    sensor.
    
    also removed the isEnabled() method, which was never used and
    implemented wrongly (since it didn't take into account that a sensor
    could be disabled for a client but not of another).
    
    Change-Id: I789affb877728ca957e99f7ba749def37c4db1c7
    Add support for virtual sensors.
    
    Rework sensorservice to allow "virtual sensors", that is
    sensors that report a synthetized value based on real sensors.
    
    the main change to sensorservice is around managing which real
    sensor need to be activated and which rate to use.
    
    The logic for all this has been moved into SensorDevice, which
    essentially wraps the sensor HAL but adds two features to it:
    - it keeps track of which sensors need to be activated
    - it keeps track of what rate needs to be used
    
    For this purpose an "identity" is associated with each real sensor
    activation, so we can track them.
    
    On start-up we check for gravity, linear-acceleration and
    rotation-vector sensors, if they're not present in the HAL, we
    synthetize them in sensor-service.
    
    Change-Id: I841db2c1b37ef127ed571efa21732ecc5adf1800
    new SensorService
    
    remove old sensor service and implement SensorManager
    on top of the new (native) SensorManger API.
    
    Change-Id: Iddb77d498755da3e11646473a44d651f12f40281
    first step at implementing the native sensor support
    
    in this commit:
    - implemented the C stub
    - implemented the binder interfaces involved
    - implemented most of the C++ client side
    
    missing:
    - SensorManager cannot connect to the SensorServer yet
    (because there is no SensorServer yet)
    
    Change-Id: I75010cbeef31c98d6fa62fd5d388dcef87c2636b
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Sensor batching. Changes to the native code.
    
    Bug: 10109508
    Change-Id: I7333f3aac76125a8226a4c99c901fb904588df04
    fix a dead-lock in sensorservice
    
    sensorservice would deadlock if for some reason
    a sensor failed to enable.
    
    simplifed the code a bit, and made it behave a little
    closer to mr1.1 -- I couldn't convince myself that
    some changes in how locks were used were correct.
    
    Bug: 9794362
    Change-Id: I6110f5dbb67e543f1c71d127de2299232badb36a
    improve sensorservice's dumpsys
    
    it now displays the reported trigger mode properly, as well as
    the number and type of the last received data
    
    Change-Id: I2ff64b32ab71f1332bc2e09671c8c02bb9550490
    Fix activation issue with auto disabled sensors.
    
    Auto disabled sensors get auto disabled after trigger.
    An activation after this wasn't working because the
    state was not being reset.
    
    b/8609561
    
    Change-Id: If72c9f27345e91671d7ad0a7a066f6dc3d255b78
    Sensor changes.
    
    1. Some sensors can wake up the AP. Add wakelocks.
    2. Handle backward compatibility for rotation vector
       heading accuracy.
    3. Cleanup auto disabled sensors.
    4. Fix race condition between enable and dispatch.
    
    Change-Id: I39dddf12e208d83cd288201986ee994312555820
    improve sensorservice dumpsys
    
    Change-Id: I8b53d5cab884c3aca16d95df5fbf288368d52e8b
    fix [3237242] sensormanager sensor active count gets out of sync
    
    whether a physical sensor needed to be active or not was managed by
    a simpe reference counter; unfortunatelly nothing prevented it to
    get out of sync if a sensor was disabled more than once.
    
    sensorservice already maintainted a list of all the "clients"
    connected to a physical sensor; we now use that list to determine if
    a sensor should be enabled. This can never be "out-of-sync" since
    this is the only data structure linking a sensor to a user of that
    sensor.
    
    also removed the isEnabled() method, which was never used and
    implemented wrongly (since it didn't take into account that a sensor
    could be disabled for a client but not of another).
    
    Change-Id: I789affb877728ca957e99f7ba749def37c4db1c7
    Add support for virtual sensors.
    
    Rework sensorservice to allow "virtual sensors", that is
    sensors that report a synthetized value based on real sensors.
    
    the main change to sensorservice is around managing which real
    sensor need to be activated and which rate to use.
    
    The logic for all this has been moved into SensorDevice, which
    essentially wraps the sensor HAL but adds two features to it:
    - it keeps track of which sensors need to be activated
    - it keeps track of what rate needs to be used
    
    For this purpose an "identity" is associated with each real sensor
    activation, so we can track them.
    
    On start-up we check for gravity, linear-acceleration and
    rotation-vector sensors, if they're not present in the HAL, we
    synthetize them in sensor-service.
    
    Change-Id: I841db2c1b37ef127ed571efa21732ecc5adf1800
    Fix occasional fusion divergence by detecting it and resetting the fusion.
    
    Change-Id: I51186e12fb9b2316e3671e3908174f4495df89a0
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    Cleanup Binder interface between sensorservice and BatteryStats
    
    Change-Id: Ia507160a2534059afe93849c8efc8407a046b50e
    improve sensor battery usage tracking
    
    until now we were tracking when a sensors was
    physically enabled or disabled and we were reporting
    that to the BattaryService.
    
    this wasn incorrect because we could have several different
    apps enabling the same sensor, so the accounting by the
    battery service would be incorrect in that case (depending
    on the order in which these apps disabled said sensor).
    
    BatteryService tracks sensors per uid, however SensorService
    does this per binder connection, so we could have several
    binder connections for the same uid, to solve this we keep
    a list of sensor/uid -> count, which is the bulk of this
    change.
    
    Bug: 6661604
    Change-Id: I561c198c42ba1736a8671bdacda4c76d72b9dd6f
    Fix sockfd leakage in SensorService.
    
    i) Call removeFd() only if the fd in the BitTube has been
    previously added to the Looper. Use a flag to determine whether the fd
    has been previously added or not.
    ii) Increment mPendingFlushEventsToSend after holding a connectionLock.
    iii) Store the number of acks that are pending in SensorEventQueue
     and send them all at once.
    
    Bug: 17472228
    Change-Id: I1ec834fea1112a9cfbd9cddd2198438793698502
    SensorService fixes.
    
       i) Initialize sensor_event.flags to zero or wake_up flag before sending dropped flush_complete_events. This will avoid unnecessary acks.
    Currently it is not set to anything which may result in garbage values for flags field.
       ii) Change the dump format of SensorEventConnection.
       iii) Add const to method signatures wherever applicable.
    
    Bug id: https://b2.corp.google.com/issues/17498626
    
    Change-Id: Ia736ffb01c366540aab73cdcf596ce852c052593
    SensorService fixes
    
      i) Significant Motion multiple clients fix. Make a copy of
      mActiveConnections vector before cleaning up SensorEventConnections
      when one-shot sensors trigger.
      ii) Maintain a mapping between flush_complete_events and
      SensorEventConnections to accurately map flush() API calls and
      corresponding flush_complete_events
      iii) Remove all references to 1_1 and 1_2 HALs.
      iv) Dynamically allocate sensor_event buffers in SensorService main
      threadLoop.
    
    Bug: 17412359
    Change-Id: If3c3986197660cafef2d2e0b4dc7582e229cf1c4
    SensorService flush fixes.
    
     i) Fix a possible race condition when adding a pending flush connection
     to mActiveSensors data structure.
     ii) Invalidate flush_complete_events as soon as they are consumed by a
     connection so that they are not used by other connections which are
     registered for the same sensor.
    
    Change-Id: I1491bea8c2081c4aab1feacc60add13b7aa26bb7
    SensorService fixes
    
         1) Limit maxEventsToWrite depending on the size of the socket
         buffer allocated (Fix for write failure on manta).
         2) Do not call flush() if the sensor is not activated (OEM issue).
    
    Change-Id: I81ea78dbdef3a3773af505ca1c9a5e39492c0b48
    SensorService fixes.
    
       i) Add more debug stats (acks needed, acks received)
      ii) Comment out write failure message.
    
    Change-Id: Iac892a66530849a2dd023d6f5628cd070a79537d
    SensorService fixes.
    
       1) Flush should only be received by the app calling flush(). Maintain
          a queue of all flush() calls and send flush_complete events in that
          order.
       2) Log warnings for older HALs. Remove batch() calls with DRY_RUN flag.
       3) Reallocate event cache when more sensors register and the desired
          maxCacheSize increases. Clear NEEDS_ACK flag in the buffer whenever
          there is a write() failure.
       4) More dump information. Add wake-up flag, maxDelay and timestamps for
          sensor events.
    
    Bug: 16874778
    Change-Id: I195646191059fd31f75f2f07886c0f98bf9b509a
    SensorService performance improvements.
    
      i) Send ack for wake_up sensors on the socket connection instead of using Binder RPC.
      ii) Cache events per connection in case there are write failures. Compute cache size
          from FIFO counts of sensors.
     iii) Send FlushCompleteEvent only for apps that explicitly called flush().
    
    Change-Id: I018969736b7794b1b930529586f2294a03ee8667
    Enable wakeup sensors.
    
    SensorService should hold a wakelock till the app reads events from a wakeup sensor. Currently drivers hold a wakelock with a
    timeout while delivering events from a wake up sensor like Significant Motion. This hack can be removed now.
    
    Bug: 9774884
    Change-Id: If3b5acb99c9cf0cd29012fcfa9d6b04c74133d01
    Add stringType and requiredPermission to sensors, effectively adding permission checking for sensors
    
    This reverts commit 4369a4ebd5ae7567e7075bc82830b83178099ed5.
    
    Change-Id: Ifa8619cc6873470a07a987763d818d78d4232610
    Revert "Add stringType and requiredPermission to sensors, effectively adding permission checking for sensors"
    
    This reverts commit c57a019e117117c5a76c772970b26cd0f5db8c6a.
    
    Change-Id: I3540565bc3e56a32cf3b176a29216cf68bb763b2
    (cherry picked from commit 4369a4ebd5ae7567e7075bc82830b83178099ed5)
    Revert "Add stringType and requiredPermission to sensors, effectively adding permission checking for sensors"
    
    This reverts commit c57a019e117117c5a76c772970b26cd0f5db8c6a.
    
    Change-Id: I3540565bc3e56a32cf3b176a29216cf68bb763b2
    Add stringType and requiredPermission to sensors, effectively adding permission checking for sensors
    
    Change-Id: If0f3dbdb5d2e9378e1fed4614baee4e750d0c850
    Ignore flush complete events when recording last value for a sensor.
    
    Bug: 11822806
    Change-Id: I1402d6684ed71ed413aef6a7be3aad945b331ec2
    Bug fixes for SensorService
    
    i) Emulate Flush for AOSP Fusion Sesnsors on newer HALs that support batching.
    ii) Early return if there are no events for the current SensorEventConnection.
    
    Bug: 11325707, 11376538
    
    Change-Id: Idb856302463649a99d3d5d0c965bb06ba06b8e1d
    SensorService Flush API bug fix.
    
    SensorService is dead locking itself when flush is called on older devices which don't support batching. mConnectionLock is acquired twice.
    
    Change-Id: I5c25585bfb2b396df4b05826a9cba1da7997a3ee
    Change API from flush(handle) to flush(). Call flush on all active sensors in the given SensorEventConnection.
    
    Change-Id: I4ef2bec80406c517903ab9782dc9eaf3fa8b7f36
    Change API from flush(handle) to flush(). Call flush on all active sensors in the given SensorEventConnection.
    
    Change-Id: I4ef2bec80406c517903ab9782dc9eaf3fa8b7f36
    Sensor Batching Bug fixes.
    
    i) SensorService dropping events. Increase SOCKET_BUFFER_SIZE in BitTube ctor.
    ii) Call flush before every activate.
    iii) Emulate flush for older devices. Add a trivial flush complete event when flush is called.
    
    Bug: 10641596
    Change-Id: I30d0f3948e830457143f16e157b6ad81908687ce
    Sensor batching. Changes to the native code.
    
    Bug: 10109508
    Change-Id: I7333f3aac76125a8226a4c99c901fb904588df04
    fix a dead-lock in sensorservice
    
    sensorservice would deadlock if for some reason
    a sensor failed to enable.
    
    simplifed the code a bit, and made it behave a little
    closer to mr1.1 -- I couldn't convince myself that
    some changes in how locks were used were correct.
    
    Bug: 9794362
    Change-Id: I6110f5dbb67e543f1c71d127de2299232badb36a
    simplify some unnecessary complex code
    
    getSensorType() ran in O(n) instead of O(1). fix that.
    
    Change-Id: Idcf29e46fc34db32604a0d8e5a9156486783b74f
    various fixes to the sensorservice
    
    1) "google" sensors are now reporting AOSP as the vendor string
    2) don't expose the system's sensor fusion if the HAL provides it
    3) use uncalibrated gyro if availble for the system's sensor fusion
    
    Change-Id: I25140436cdb29d55e39fd6fbbf8c44a410a83d5c
    make all libsurfaceflinger and libsensorservice symbols's visibility hidden
    
    we only export the main entry-point.
    this saves about 150KB.
    
    Change-Id: I55eb2b6705386fdfa43860deb62f9cdd2a0982aa
    Sensor changes.
    
    1. Some sensors can wake up the AP. Add wakelocks.
    2. Handle backward compatibility for rotation vector
       heading accuracy.
    3. Cleanup auto disabled sensors.
    4. Fix race condition between enable and dispatch.
    
    Change-Id: I39dddf12e208d83cd288201986ee994312555820
    track UID with connections
    
    Change-Id: Id4865f3cd27a95acdbbfdff1f2bb4123f312a13b
    add a way to enable debugging sensors at runtime
    
    if debug.sensors is true, extra debugging
    sensors are enabled and HAL provided sensor fusion
    is disabled
    
    Change-Id: I9b093424edb8c5363d1337237cdf6abe4ab266f9
    Rename SensorChannel to BitTube
    PermissionCache caches permission checks
    
    This is intended to absorb the cost of the IPC
    to the permission controller.
    Cached permission checks cost about 3us, while
    full blown ones are two orders of magnitude slower.
    
    CAVEAT: PermissionCache can only handle system
    permissions safely for now, because the cache is
    not purged upon global permission changes.
    
    Change-Id: I8b8a5e71e191e3c01e8f792f253c379190eee62e
    improve orientation sensor with gyro data
    
    when we do our own sensor fusion, we also export an
    improved orientation sensor and hide the HAL sensor.
    The fused orientation sensor is much more precise, fast
    and smooth.
    
    Change-Id: I0ea843b47ad9d12f6b22cce51f8629852d423126
    Fix a few issues with sensors reference-counting
    fix [3421350] Killing a game that uses the accelerometer renders the device unable to sleep
    
    when an app dies, make sure to disable all sensors that process
    is connected to, regardless of wether this was the LAST connection
    to this sensor.
    
    Change-Id: I9c72b1792eee03815304674d5c2f25b5270e4748
    Add support for virtual sensors.
    
    Rework sensorservice to allow "virtual sensors", that is
    sensors that report a synthetized value based on real sensors.
    
    the main change to sensorservice is around managing which real
    sensor need to be activated and which rate to use.
    
    The logic for all this has been moved into SensorDevice, which
    essentially wraps the sensor HAL but adds two features to it:
    - it keeps track of which sensors need to be activated
    - it keeps track of what rate needs to be used
    
    For this purpose an "identity" is associated with each real sensor
    activation, so we can track them.
    
    On start-up we check for gravity, linear-acceleration and
    rotation-vector sensors, if they're not present in the HAL, we
    synthetize them in sensor-service.
    
    Change-Id: I841db2c1b37ef127ed571efa21732ecc5adf1800
    Fix a race condition in sensormanager
    
    the per-connection state assumed the main sensorservice
    lock was held during access. This is however not true while
    pre-processing the events just before sending them to clients.
    Therefore, there was a small window during which this state
    could be modified while being used.
    
    we now have an internal lock that protects this state.
    
    Change-Id: I594680f20f09d6a4f1f38f093a1d3f650dcef1be
    record the last event received regardless of having clients or not
    
    We only recorded the last received event (which is needed when a sensor
    is activated on a connection) when there was some connection active.
    This should fix an issue where sometimes the light sensor doesn't
    return an event whent activated.
    
    we also didn't need to hold the main lock while dispatching events
    to clients.
    
    Change-Id: I6c6386c040051ce205e3c0516c678e0603fa45e1
    improve sensorservice dumpsys and increase the max sensor rate to 1 ms (1000Hz)
    
    the increased maximum rate is needed for proper gyro integration, current gyro
    parts can sample at up to 800Hz
    
    Change-Id: Ide75f6d5bc7a0fdafeb2dafd72db39e7afb9e794
    SensorService handles last known state properly
    
    SensorService now correctly sends the last known
    state of a sensor as soon as a new connection is made.
    This fixes the issue where, for instance, an application
    could wait a long time before getting the light or proximity
    sensor initial state.
    
    Change-Id: Ic41392f3626e26c4f15746c7e17c7ecd44bbb10b
    filter sensor event by connection
    
    we now don't send events down to a connection that has not
    registered for this event.
    
    Change-Id: I3fe507974d3e99293749bfec2ef871e8a0ee9600
    propagate sensor event rate properly to the sensor HAL
    
    Change-Id: I1abe4c0fcce423caab79208353fded4d57398227
    SensorService doesn't crash if correct HAL is not present
    
    Change-Id: I83700b1a1b43390f5830e1056572bfb16e58e8e4
    Better dumpsys logs
    
    Change-Id: Iae65a8547ee5815cc4c3b74d2c9ef17bed7f565d
    new SensorService
    
    remove old sensor service and implement SensorManager
    on top of the new (native) SensorManger API.
    
    Change-Id: Iddb77d498755da3e11646473a44d651f12f40281
    Bug fix for SensorFusion data rate.
    
    SensorFusion is always returning data at the slowest possible sampling rate (5 Hz). batch() is getting called twice, first time with the requested rate and second time with the slowest rate (which overwrites the requested rate). Fix batch call in SensorFusion::activate()
    
    Bug: 12064319
    Change-Id: If62f3e514233f69810336fd22b136b4395b667d3
    (cherry picked from commit 88509090387eeb400771a786171866710cca230c)
    Bug fix for SensorFusion data rate.
    
    SensorFusion is always returning data at the slowest possible sampling rate (5 Hz). batch() is getting called twice, first time with the requested rate and second time with the slowest rate (which overwrites the requested rate). Fix batch call in SensorFusion::activate()
    
    Bug: 12064319
    Change-Id: If62f3e514233f69810336fd22b136b4395b667d3
    Bug fix for SensorFusion data rate.
    
    SensorFusion is always returning data at the slowest possible sampling rate (5 Hz). batch() is getting called twice, first time with the requested rate and second time with the slowest rate (which overwrites the requested rate). Fix batch call in SensorFusion::activate()
    
    Bug: 12064319
    Change-Id: If62f3e514233f69810336fd22b136b4395b667d3
    Sensor batching. Changes to the native code.
    
    Bug: 10109508
    Change-Id: I7333f3aac76125a8226a4c99c901fb904588df04
    improve sensorservice's dumpsys
    
    it now displays the reported trigger mode properly, as well as
    the number and type of the last received data
    
    Change-Id: I2ff64b32ab71f1332bc2e09671c8c02bb9550490
    use gyro timestamp directly in fusion
    
    we used to estimate the gyro rate and deduce the period from that
    but it turns out this is causing problems.
    
    Bug: 5192288
    Change-Id: I8ca826d0e11e488587bcaa1720de99e92b82f191
    use quaternions instead of MRPs
    
    also use correct time propagation equation
    disable the fused sensors when gyro is not present since
    they were unusable in practice.
    
    Change-Id: Iad797425784e67dc6c5690e97c71c583418cc5b5
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    fix [3237242] sensormanager sensor active count gets out of sync
    
    whether a physical sensor needed to be active or not was managed by
    a simpe reference counter; unfortunatelly nothing prevented it to
    get out of sync if a sensor was disabled more than once.
    
    sensorservice already maintainted a list of all the "clients"
    connected to a physical sensor; we now use that list to determine if
    a sensor should be enabled. This can never be "out-of-sync" since
    this is the only data structure linking a sensor to a user of that
    sensor.
    
    also removed the isEnabled() method, which was never used and
    implemented wrongly (since it didn't take into account that a sensor
    could be disabled for a client but not of another).
    
    Change-Id: I789affb877728ca957e99f7ba749def37c4db1c7
    Add support for virtual sensors.
    
    Rework sensorservice to allow "virtual sensors", that is
    sensors that report a synthetized value based on real sensors.
    
    the main change to sensorservice is around managing which real
    sensor need to be activated and which rate to use.
    
    The logic for all this has been moved into SensorDevice, which
    essentially wraps the sensor HAL but adds two features to it:
    - it keeps track of which sensors need to be activated
    - it keeps track of what rate needs to be used
    
    For this purpose an "identity" is associated with each real sensor
    activation, so we can track them.
    
    On start-up we check for gravity, linear-acceleration and
    rotation-vector sensors, if they're not present in the HAL, we
    synthetize them in sensor-service.
    
    Change-Id: I841db2c1b37ef127ed571efa21732ecc5adf1800
    new SensorService
    
    remove old sensor service and implement SensorManager
    on top of the new (native) SensorManger API.
    
    Change-Id: Iddb77d498755da3e11646473a44d651f12f40281
    first step at implementing the native sensor support
    
    in this commit:
    - implemented the C stub
    - implemented the binder interfaces involved
    - implemented most of the C++ client side
    
    missing:
    - SensorManager cannot connect to the SensorServer yet
    (because there is no SensorServer yet)
    
    Change-Id: I75010cbeef31c98d6fa62fd5d388dcef87c2636b
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    SensorService fixes.
    
       1) Flush should only be received by the app calling flush(). Maintain
          a queue of all flush() calls and send flush_complete events in that
          order.
       2) Log warnings for older HALs. Remove batch() calls with DRY_RUN flag.
       3) Reallocate event cache when more sensors register and the desired
          maxCacheSize increases. Clear NEEDS_ACK flag in the buffer whenever
          there is a write() failure.
       4) More dump information. Add wake-up flag, maxDelay and timestamps for
          sensor events.
    
    Bug: 16874778
    Change-Id: I195646191059fd31f75f2f07886c0f98bf9b509a
    sensorservice: 64-bit compile issues
    
    Change-Id: Ied7b779f39e71d041791729f7355b052b63903c5
    Enable wakeup sensors.
    
    SensorService should hold a wakelock till the app reads events from a wakeup sensor. Currently drivers hold a wakelock with a
    timeout while delivering events from a wake up sensor like Significant Motion. This hack can be removed now.
    
    Bug: 9774884
    Change-Id: If3b5acb99c9cf0cd29012fcfa9d6b04c74133d01
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    Sensor batching. Changes to the native code.
    
    Bug: 10109508
    Change-Id: I7333f3aac76125a8226a4c99c901fb904588df04
    fix a dead-lock in sensorservice
    
    sensorservice would deadlock if for some reason
    a sensor failed to enable.
    
    simplifed the code a bit, and made it behave a little
    closer to mr1.1 -- I couldn't convince myself that
    some changes in how locks were used were correct.
    
    Bug: 9794362
    Change-Id: I6110f5dbb67e543f1c71d127de2299232badb36a
    improve sensorservice's dumpsys
    
    it now displays the reported trigger mode properly, as well as
    the number and type of the last received data
    
    Change-Id: I2ff64b32ab71f1332bc2e09671c8c02bb9550490
    Fix activation issue with auto disabled sensors.
    
    Auto disabled sensors get auto disabled after trigger.
    An activation after this wasn't working because the
    state was not being reset.
    
    b/8609561
    
    Change-Id: If72c9f27345e91671d7ad0a7a066f6dc3d255b78
    Sensor changes.
    
    1. Some sensors can wake up the AP. Add wakelocks.
    2. Handle backward compatibility for rotation vector
       heading accuracy.
    3. Cleanup auto disabled sensors.
    4. Fix race condition between enable and dispatch.
    
    Change-Id: I39dddf12e208d83cd288201986ee994312555820
    improve sensor battery usage tracking
    
    until now we were tracking when a sensors was
    physically enabled or disabled and we were reporting
    that to the BattaryService.
    
    this wasn incorrect because we could have several different
    apps enabling the same sensor, so the accounting by the
    battery service would be incorrect in that case (depending
    on the order in which these apps disabled said sensor).
    
    BatteryService tracks sensors per uid, however SensorService
    does this per binder connection, so we could have several
    binder connections for the same uid, to solve this we keep
    a list of sensor/uid -> count, which is the bulk of this
    change.
    
    Bug: 6661604
    Change-Id: I561c198c42ba1736a8671bdacda4c76d72b9dd6f
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF) DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF) DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    handle EINTR when calling sensor HAL's poll function
    
    some sensor HALs don't handle EINTR, make sure to catch it in the
    sensorservice.
    
    also if we ever encounter an error that we can't handle, we abort
    which will restart us (or the whole system process if we're running
    in it)
    
    Bug: 5511741
    Change-Id: I7051882b06980f778736b53d6cd021a99b5ca8d2
    improve sensorservice dumpsys
    
    Change-Id: I8b53d5cab884c3aca16d95df5fbf288368d52e8b
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    Fix a few issues with sensors reference-counting
    fix [3237242] sensormanager sensor active count gets out of sync
    
    whether a physical sensor needed to be active or not was managed by
    a simpe reference counter; unfortunatelly nothing prevented it to
    get out of sync if a sensor was disabled more than once.
    
    sensorservice already maintainted a list of all the "clients"
    connected to a physical sensor; we now use that list to determine if
    a sensor should be enabled. This can never be "out-of-sync" since
    this is the only data structure linking a sensor to a user of that
    sensor.
    
    also removed the isEnabled() method, which was never used and
    implemented wrongly (since it didn't take into account that a sensor
    could be disabled for a client but not of another).
    
    Change-Id: I789affb877728ca957e99f7ba749def37c4db1c7
    Add support for virtual sensors.
    
    Rework sensorservice to allow "virtual sensors", that is
    sensors that report a synthetized value based on real sensors.
    
    the main change to sensorservice is around managing which real
    sensor need to be activated and which rate to use.
    
    The logic for all this has been moved into SensorDevice, which
    essentially wraps the sensor HAL but adds two features to it:
    - it keeps track of which sensors need to be activated
    - it keeps track of what rate needs to be used
    
    For this purpose an "identity" is associated with each real sensor
    activation, so we can track them.
    
    On start-up we check for gravity, linear-acceleration and
    rotation-vector sensors, if they're not present in the HAL, we
    synthetize them in sensor-service.
    
    Change-Id: I841db2c1b37ef127ed571efa21732ecc5adf1800
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    Fix for AOSP fusion sensors not handling multiple clients correctly.
    
    Bug: 10786801
    Change-Id: I7b938bc583a303a30237c3d93b5accbf64cc90b5
    various fixes to the sensorservice
    
    1) "google" sensors are now reporting AOSP as the vendor string
    2) don't expose the system's sensor fusion if the HAL provides it
    3) use uncalibrated gyro if availble for the system's sensor fusion
    
    Change-Id: I25140436cdb29d55e39fd6fbbf8c44a410a83d5c
    use quaternions instead of MRPs
    
    also use correct time propagation equation
    disable the fused sensors when gyro is not present since
    they were unusable in practice.
    
    Change-Id: Iad797425784e67dc6c5690e97c71c583418cc5b5
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    use quaternions instead of MRPs
    
    also use correct time propagation equation
    disable the fused sensors when gyro is not present since
    they were unusable in practice.
    
    Change-Id: Iad797425784e67dc6c5690e97c71c583418cc5b5
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    fix [3237242] sensormanager sensor active count gets out of sync
    
    whether a physical sensor needed to be active or not was managed by
    a simpe reference counter; unfortunatelly nothing prevented it to
    get out of sync if a sensor was disabled more than once.
    
    sensorservice already maintainted a list of all the "clients"
    connected to a physical sensor; we now use that list to determine if
    a sensor should be enabled. This can never be "out-of-sync" since
    this is the only data structure linking a sensor to a user of that
    sensor.
    
    also removed the isEnabled() method, which was never used and
    implemented wrongly (since it didn't take into account that a sensor
    could be disabled for a client but not of another).
    
    Change-Id: I789affb877728ca957e99f7ba749def37c4db1c7
    Uses 4-th order low-pass for extracting gravity.
    
    Most accelerometers have 8-bits accuracy so we beed to
    reject 48dB in thestop-band, which requires a 4-th order
    filter at the cut-off frequency we're using.
    
    Change-Id: Ic00421d38d751641f86b1f3ad7663e6b44a91198
    Add support for virtual sensors.
    
    Rework sensorservice to allow "virtual sensors", that is
    sensors that report a synthetized value based on real sensors.
    
    the main change to sensorservice is around managing which real
    sensor need to be activated and which rate to use.
    
    The logic for all this has been moved into SensorDevice, which
    essentially wraps the sensor HAL but adds two features to it:
    - it keeps track of which sensors need to be activated
    - it keeps track of what rate needs to be used
    
    For this purpose an "identity" is associated with each real sensor
    activation, so we can track them.
    
    On start-up we check for gravity, linear-acceleration and
    rotation-vector sensors, if they're not present in the HAL, we
    synthetize them in sensor-service.
    
    Change-Id: I841db2c1b37ef127ed571efa21732ecc5adf1800
    new SensorService
    
    remove old sensor service and implement SensorManager
    on top of the new (native) SensorManger API.
    
    Change-Id: Iddb77d498755da3e11646473a44d651f12f40281
    first step at implementing the native sensor support
    
    in this commit:
    - implemented the C stub
    - implemented the binder interfaces involved
    - implemented most of the C++ client side
    
    missing:
    - SensorManager cannot connect to the SensorServer yet
    (because there is no SensorServer yet)
    
    Change-Id: I75010cbeef31c98d6fa62fd5d388dcef87c2636b
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    Fix for AOSP fusion sensors not handling multiple clients correctly.
    
    Bug: 10786801
    Change-Id: I7b938bc583a303a30237c3d93b5accbf64cc90b5
    various fixes to the sensorservice
    
    1) "google" sensors are now reporting AOSP as the vendor string
    2) don't expose the system's sensor fusion if the HAL provides it
    3) use uncalibrated gyro if availble for the system's sensor fusion
    
    Change-Id: I25140436cdb29d55e39fd6fbbf8c44a410a83d5c
    use quaternions instead of MRPs
    
    also use correct time propagation equation
    disable the fused sensors when gyro is not present since
    they were unusable in practice.
    
    Change-Id: Iad797425784e67dc6c5690e97c71c583418cc5b5
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    fix [3369027] Sensor.TYPE_ROTATION_VECTOR is unstable and returns NaNs when running slowly
    
    The cut-off frequency of the lowpass filter was too high
    for the sampling rate used by DELAY_NORMAL.
    
    Now we use the same filters used for the gravity vector
    (cascaded biquad at 1.5 Hz)
    
    Change-Id: I319dc4f449a3abd553d61b196a9ddcf7782f912d
    fix [3237242] sensormanager sensor active count gets out of sync
    
    whether a physical sensor needed to be active or not was managed by
    a simpe reference counter; unfortunatelly nothing prevented it to
    get out of sync if a sensor was disabled more than once.
    
    sensorservice already maintainted a list of all the "clients"
    connected to a physical sensor; we now use that list to determine if
    a sensor should be enabled. This can never be "out-of-sync" since
    this is the only data structure linking a sensor to a user of that
    sensor.
    
    also removed the isEnabled() method, which was never used and
    implemented wrongly (since it didn't take into account that a sensor
    could be disabled for a client but not of another).
    
    Change-Id: I789affb877728ca957e99f7ba749def37c4db1c7
    allow rotation-vector to have 4 components
    
    - upadte documentation for rotation vector
    - update method dealing with rotation vector to deal with 4 components
    - virtual rotation-vector sensor reports all four components
    - improve SensorManager documentation layout
    
    Whent he 4-th component of the rotation-vector is present, we can save
    a square-root when computing the quaternion or rotation matrix from it.
    
    Change-Id: Ia84d278dd5f0909fab1c5ba050f8df2679e2c7c8
    don't attempt to normalize the rotation vector
    
    indeed, by construction of the rotation matrix, it is
    guaranteed to have a length of 1.
    
    moreover, the normalization code was missing a square-root,
    fortunatelly, since the length is 1, this didn't cause any
    damage (since sqrt(1) = 1).
    
    Change-Id: I9facd668caaf5bb3bfccb139ab872f2bb2066365
    Add support for virtual sensors.
    
    Rework sensorservice to allow "virtual sensors", that is
    sensors that report a synthetized value based on real sensors.
    
    the main change to sensorservice is around managing which real
    sensor need to be activated and which rate to use.
    
    The logic for all this has been moved into SensorDevice, which
    essentially wraps the sensor HAL but adds two features to it:
    - it keeps track of which sensors need to be activated
    - it keeps track of what rate needs to be used
    
    For this purpose an "identity" is associated with each real sensor
    activation, so we can track them.
    
    On start-up we check for gravity, linear-acceleration and
    rotation-vector sensors, if they're not present in the HAL, we
    synthetize them in sensor-service.
    
    Change-Id: I841db2c1b37ef127ed571efa21732ecc5adf1800
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    fix [3237242] sensormanager sensor active count gets out of sync
    
    whether a physical sensor needed to be active or not was managed by
    a simpe reference counter; unfortunatelly nothing prevented it to
    get out of sync if a sensor was disabled more than once.
    
    sensorservice already maintainted a list of all the "clients"
    connected to a physical sensor; we now use that list to determine if
    a sensor should be enabled. This can never be "out-of-sync" since
    this is the only data structure linking a sensor to a user of that
    sensor.
    
    also removed the isEnabled() method, which was never used and
    implemented wrongly (since it didn't take into account that a sensor
    could be disabled for a client but not of another).
    
    Change-Id: I789affb877728ca957e99f7ba749def37c4db1c7
    Add support for virtual sensors.
    
    Rework sensorservice to allow "virtual sensors", that is
    sensors that report a synthetized value based on real sensors.
    
    the main change to sensorservice is around managing which real
    sensor need to be activated and which rate to use.
    
    The logic for all this has been moved into SensorDevice, which
    essentially wraps the sensor HAL but adds two features to it:
    - it keeps track of which sensors need to be activated
    - it keeps track of what rate needs to be used
    
    For this purpose an "identity" is associated with each real sensor
    activation, so we can track them.
    
    On start-up we check for gravity, linear-acceleration and
    rotation-vector sensors, if they're not present in the HAL, we
    synthetize them in sensor-service.
    
    Change-Id: I841db2c1b37ef127ed571efa21732ecc5adf1800
    new SensorService
    
    remove old sensor service and implement SensorManager
    on top of the new (native) SensorManger API.
    
    Change-Id: Iddb77d498755da3e11646473a44d651f12f40281
    first step at implementing the native sensor support
    
    in this commit:
    - implemented the C stub
    - implemented the binder interfaces involved
    - implemented most of the C++ client side
    
    missing:
    - SensorManager cannot connect to the SensorServer yet
    (because there is no SensorServer yet)
    
    Change-Id: I75010cbeef31c98d6fa62fd5d388dcef87c2636b
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Cleanup Binder interface between sensorservice and BatteryStats
    
    Change-Id: Ia507160a2534059afe93849c8efc8407a046b50e
    Fix issue #9860494: Waiting for service batteryinfo...
    
    I changed the name of the service, this needs to follow.
    
    Change-Id: Id8e346cee9d75cfe142cd43f6aea43302878b6dc
    improve sensor battery usage tracking
    
    until now we were tracking when a sensors was
    physically enabled or disabled and we were reporting
    that to the BattaryService.
    
    this wasn incorrect because we could have several different
    apps enabling the same sensor, so the accounting by the
    battery service would be incorrect in that case (depending
    on the order in which these apps disabled said sensor).
    
    BatteryService tracks sensors per uid, however SensorService
    does this per binder connection, so we could have several
    binder connections for the same uid, to solve this we keep
    a list of sensor/uid -> count, which is the bulk of this
    change.
    
    Bug: 6661604
    Change-Id: I561c198c42ba1736a8671bdacda4c76d72b9dd6f
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    Fix for AOSP fusion sensors not handling multiple clients correctly.
    
    Bug: 10786801
    Change-Id: I7b938bc583a303a30237c3d93b5accbf64cc90b5
    various fixes to the sensorservice
    
    1) "google" sensors are now reporting AOSP as the vendor string
    2) don't expose the system's sensor fusion if the HAL provides it
    3) use uncalibrated gyro if availble for the system's sensor fusion
    
    Change-Id: I25140436cdb29d55e39fd6fbbf8c44a410a83d5c
    use quaternions instead of MRPs
    
    also use correct time propagation equation
    disable the fused sensors when gyro is not present since
    they were unusable in practice.
    
    Change-Id: Iad797425784e67dc6c5690e97c71c583418cc5b5
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    fix [3237242] sensormanager sensor active count gets out of sync
    
    whether a physical sensor needed to be active or not was managed by
    a simpe reference counter; unfortunatelly nothing prevented it to
    get out of sync if a sensor was disabled more than once.
    
    sensorservice already maintainted a list of all the "clients"
    connected to a physical sensor; we now use that list to determine if
    a sensor should be enabled. This can never be "out-of-sync" since
    this is the only data structure linking a sensor to a user of that
    sensor.
    
    also removed the isEnabled() method, which was never used and
    implemented wrongly (since it didn't take into account that a sensor
    could be disabled for a client but not of another).
    
    Change-Id: I789affb877728ca957e99f7ba749def37c4db1c7
    Uses 4-th order low-pass for extracting gravity.
    
    Most accelerometers have 8-bits accuracy so we beed to
    reject 48dB in thestop-band, which requires a 4-th order
    filter at the cut-off frequency we're using.
    
    Change-Id: Ic00421d38d751641f86b1f3ad7663e6b44a91198
    Add support for virtual sensors.
    
    Rework sensorservice to allow "virtual sensors", that is
    sensors that report a synthetized value based on real sensors.
    
    the main change to sensorservice is around managing which real
    sensor need to be activated and which rate to use.
    
    The logic for all this has been moved into SensorDevice, which
    essentially wraps the sensor HAL but adds two features to it:
    - it keeps track of which sensors need to be activated
    - it keeps track of what rate needs to be used
    
    For this purpose an "identity" is associated with each real sensor
    activation, so we can track them.
    
    On start-up we check for gravity, linear-acceleration and
    rotation-vector sensors, if they're not present in the HAL, we
    synthetize them in sensor-service.
    
    Change-Id: I841db2c1b37ef127ed571efa21732ecc5adf1800
    Add version number to SensorService dump output.
    
    Change-Id: I64f9482ade523ec3fafe14bff14db7196e32413f
    Change ordering of memory allocation and calling Thread::run().
    
    In some cases this is causing a crash as device.poll is called with
    NULL.
    
    Bug: 17896339
    Change-Id: Id431599f2c661338c355c7081b6602f8449a9198
    Fix sockfd leakage in SensorService.
    
    i) Call removeFd() only if the fd in the BitTube has been
    previously added to the Looper. Use a flag to determine whether the fd
    has been previously added or not.
    ii) Increment mPendingFlushEventsToSend after holding a connectionLock.
    iii) Store the number of acks that are pending in SensorEventQueue
     and send them all at once.
    
    Bug: 17472228
    Change-Id: I1ec834fea1112a9cfbd9cddd2198438793698502
    Fix a possible SensorService deadlock.
    
     If the destructor of SensorEventConnection gets called when the main
     sendEvents loop of SensorService is executing it may result in a deadlock.
     The loop promotes each connection to a strong_pointer, calls sendEvents
     and cleans up the connection if necessary. It is possible that the sp's
     destructor may delete SensorEventConnection which will call the dtor
     ~SensorEventConnection(). This dtor again needs SensorService mLock to
     execute which may result in a deadlock.
    
    Bug: 17617897
    Change-Id: I76c244dbe85fadb591c0bd1a9a5eb01d93f56505
    Revert "Fix sockfd leakage in SensorService. Remove sockfd from Looper  when the connection is removed from mActiveConnections."
    
    This reverts commit 5105960d49bfa86efeeea8f87c87aa96b5771c37.
    
    Change-Id: I4d39ded2e50ef8a8e0aac27e438876203385a1f0
    Revert "Fix sockfd leakage in SensorService. Remove sockfd from Looper  when the connection is removed from mActiveConnections."
    
    This reverts commit 5105960d49bfa86efeeea8f87c87aa96b5771c37.
    
    Change-Id: I4d39ded2e50ef8a8e0aac27e438876203385a1f0
    Fix sockfd leakage in SensorService. Remove sockfd from Looper
    when the connection is removed from mActiveConnections.
    
    Bug: 17472228
    Change-Id: Iaabe0968bd2104ef961ff5e8659bf91712e2e1db
    SensorService fixes.
    
       i) Initialize sensor_event.flags to zero or wake_up flag before sending dropped flush_complete_events. This will avoid unnecessary acks.
    Currently it is not set to anything which may result in garbage values for flags field.
       ii) Change the dump format of SensorEventConnection.
       iii) Add const to method signatures wherever applicable.
    
    Bug id: https://b2.corp.google.com/issues/17498626
    
    Change-Id: Ia736ffb01c366540aab73cdcf596ce852c052593
    SensorService fixes
    
      i) Significant Motion multiple clients fix. Make a copy of
      mActiveConnections vector before cleaning up SensorEventConnections
      when one-shot sensors trigger.
      ii) Maintain a mapping between flush_complete_events and
      SensorEventConnections to accurately map flush() API calls and
      corresponding flush_complete_events
      iii) Remove all references to 1_1 and 1_2 HALs.
      iv) Dynamically allocate sensor_event buffers in SensorService main
      threadLoop.
    
    Bug: 17412359
    Change-Id: If3c3986197660cafef2d2e0b4dc7582e229cf1c4
    SensorService flush fixes.
    
     i) Fix a possible race condition when adding a pending flush connection
     to mActiveSensors data structure.
     ii) Invalidate flush_complete_events as soon as they are consumed by a
     connection so that they are not used by other connections which are
     registered for the same sensor.
    
    Change-Id: I1491bea8c2081c4aab1feacc60add13b7aa26bb7
    SensorService fixes
    
         1) Limit maxEventsToWrite depending on the size of the socket
         buffer allocated (Fix for write failure on manta).
         2) Do not call flush() if the sensor is not activated (OEM issue).
    
    Change-Id: I81ea78dbdef3a3773af505ca1c9a5e39492c0b48
    SensorService fixes.
    
       i) Add more debug stats (acks needed, acks received)
      ii) Comment out write failure message.
    
    Change-Id: Iac892a66530849a2dd023d6f5628cd070a79537d
    SensorService fixes.
    
       1) Flush should only be received by the app calling flush(). Maintain
          a queue of all flush() calls and send flush_complete events in that
          order.
       2) Log warnings for older HALs. Remove batch() calls with DRY_RUN flag.
       3) Reallocate event cache when more sensors register and the desired
          maxCacheSize increases. Clear NEEDS_ACK flag in the buffer whenever
          there is a write() failure.
       4) More dump information. Add wake-up flag, maxDelay and timestamps for
          sensor events.
    
    Bug: 16874778
    Change-Id: I195646191059fd31f75f2f07886c0f98bf9b509a
    SensorService performance improvements.
    
      i) Send ack for wake_up sensors on the socket connection instead of using Binder RPC.
      ii) Cache events per connection in case there are write failures. Compute cache size
          from FIFO counts of sensors.
     iii) Send FlushCompleteEvent only for apps that explicitly called flush().
    
    Change-Id: I018969736b7794b1b930529586f2294a03ee8667
    CW on L: Fix a SIGSEGV crash in sensor service.
    
    This is to fix b/16189080.
    
    BUG: 16189080
    Change-Id: I78d44e82f797c0808891acde609040c46745a0bb
    sensorservice: 64-bit compile issues
    
    Change-Id: Ied7b779f39e71d041791729f7355b052b63903c5
    Surface reportingMode for Sensors.
    
    Change-Id: Iac8dd3408c90eb7d285a2e8043131fab3a7e58fa
    Surface maxDelay and isWakeUpSensor flag in Sensor.java.
    
    Change-Id: Idd1e9045190beeca87b086b272e8cbf0bed05bae
    Enable wakeup sensors.
    
    SensorService should hold a wakelock till the app reads events from a wakeup sensor. Currently drivers hold a wakelock with a
    timeout while delivering events from a wake up sensor like Significant Motion. This hack can be removed now.
    
    Bug: 9774884
    Change-Id: If3b5acb99c9cf0cd29012fcfa9d6b04c74133d01
    Add stringType and requiredPermission to sensors, effectively adding permission checking for sensors
    
    This reverts commit 4369a4ebd5ae7567e7075bc82830b83178099ed5.
    
    Change-Id: Ifa8619cc6873470a07a987763d818d78d4232610
    Revert "Add stringType and requiredPermission to sensors, effectively adding permission checking for sensors"
    
    This reverts commit c57a019e117117c5a76c772970b26cd0f5db8c6a.
    
    Change-Id: I3540565bc3e56a32cf3b176a29216cf68bb763b2
    (cherry picked from commit 4369a4ebd5ae7567e7075bc82830b83178099ed5)
    Revert "Add stringType and requiredPermission to sensors, effectively adding permission checking for sensors"
    
    This reverts commit c57a019e117117c5a76c772970b26cd0f5db8c6a.
    
    Change-Id: I3540565bc3e56a32cf3b176a29216cf68bb763b2
    Add stringType and requiredPermission to sensors, effectively adding permission checking for sensors
    
    Change-Id: If0f3dbdb5d2e9378e1fed4614baee4e750d0c850
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    Ignore flush complete events when recording last value for a sensor.
    
    Bug: 11822806
    Change-Id: I1402d6684ed71ed413aef6a7be3aad945b331ec2
    Add uid to sensorservice's dump of active connections
    
    Change-Id: I1c365157bcd28a93635dbde4a8d91c79750e03ae
    Bug fixes for SensorService
    
    i) Emulate Flush for AOSP Fusion Sesnsors on newer HALs that support batching.
    ii) Early return if there are no events for the current SensorEventConnection.
    
    Bug: 11325707, 11376538
    
    Change-Id: Idb856302463649a99d3d5d0c965bb06ba06b8e1d
    SensorService Flush API bug fix.
    
    SensorService is dead locking itself when flush is called on older devices which don't support batching. mConnectionLock is acquired twice.
    
    Change-Id: I5c25585bfb2b396df4b05826a9cba1da7997a3ee
    Change API from flush(handle) to flush(). Call flush on all active sensors in the given SensorEventConnection.
    
    Change-Id: I4ef2bec80406c517903ab9782dc9eaf3fa8b7f36
    Change API from flush(handle) to flush(). Call flush on all active sensors in the given SensorEventConnection.
    
    Change-Id: I4ef2bec80406c517903ab9782dc9eaf3fa8b7f36
    Sensor Batching Bug fixes.
    
    i) SensorService dropping events. Increase SOCKET_BUFFER_SIZE in BitTube ctor.
    ii) Call flush before every activate.
    iii) Emulate flush for older devices. Add a trivial flush complete event when flush is called.
    
    Bug: 10641596
    Change-Id: I30d0f3948e830457143f16e157b6ad81908687ce
    fix a few problems with BitTube
    
    BitTube used to send objects one at a time and didn't
    handle errors properly.
    
    We now send all the objects in one call, which means they
    have to be read as a single batch as well. This changes the
    BitTube API.
    
    Update SensorService to the new API.
    
    Also added an API to set the size of the send buffer.
    
    Bug: 10641596
    Change-Id: I77c70d35e351fdba0416fae4b7ca3b1d56272251
    Sensor batching. Changes to the native code.
    
    Bug: 10109508
    Change-Id: I7333f3aac76125a8226a4c99c901fb904588df04
    fix a dead-lock in sensorservice
    
    sensorservice would deadlock if for some reason
    a sensor failed to enable.
    
    simplifed the code a bit, and made it behave a little
    closer to mr1.1 -- I couldn't convince myself that
    some changes in how locks were used were correct.
    
    Bug: 9794362
    Change-Id: I6110f5dbb67e543f1c71d127de2299232badb36a
    improve sensorservice's dumpsys
    
    it now displays the reported trigger mode properly, as well as
    the number and type of the last received data
    
    Change-Id: I2ff64b32ab71f1332bc2e09671c8c02bb9550490
    simplify some unnecessary complex code
    
    getSensorType() ran in O(n) instead of O(1). fix that.
    
    Change-Id: Idcf29e46fc34db32604a0d8e5a9156486783b74f
    various fixes to the sensorservice
    
    1) "google" sensors are now reporting AOSP as the vendor string
    2) don't expose the system's sensor fusion if the HAL provides it
    3) use uncalibrated gyro if availble for the system's sensor fusion
    
    Change-Id: I25140436cdb29d55e39fd6fbbf8c44a410a83d5c
    Fix activation issue with auto disabled sensors.
    
    Auto disabled sensors get auto disabled after trigger.
    An activation after this wasn't working because the
    state was not being reset.
    
    b/8609561
    
    Change-Id: If72c9f27345e91671d7ad0a7a066f6dc3d255b78
    Sensor changes.
    
    1. Some sensors can wake up the AP. Add wakelocks.
    2. Handle backward compatibility for rotation vector
       heading accuracy.
    3. Cleanup auto disabled sensors.
    4. Fix race condition between enable and dispatch.
    
    Change-Id: I39dddf12e208d83cd288201986ee994312555820
    improve sensor battery usage tracking
    
    until now we were tracking when a sensors was
    physically enabled or disabled and we were reporting
    that to the BattaryService.
    
    this wasn incorrect because we could have several different
    apps enabling the same sensor, so the accounting by the
    battery service would be incorrect in that case (depending
    on the order in which these apps disabled said sensor).
    
    BatteryService tracks sensors per uid, however SensorService
    does this per binder connection, so we could have several
    binder connections for the same uid, to solve this we keep
    a list of sensor/uid -> count, which is the bulk of this
    change.
    
    Bug: 6661604
    Change-Id: I561c198c42ba1736a8671bdacda4c76d72b9dd6f
    track UID with connections
    
    Change-Id: Id4865f3cd27a95acdbbfdff1f2bb4123f312a13b
    fix a typo in SensorService
    
    It shouldn't have caused much harm though.
    Also log a warning when enabling a sensor
    for a connection that is already enabled.
    
    Change-Id: Ia4a052381e79183cd4cb1bedc7ba08e5228d7a38
    add a way to enable debugging sensors at runtime
    
    if debug.sensors is true, extra debugging
    sensors are enabled and HAL provided sensor fusion
    is disabled
    
    Change-Id: I9b093424edb8c5363d1337237cdf6abe4ab266f9
    fix a potential buffer overflow in sensorservice
    
    Bug: 6580560
    Change-Id: Icf6cafbca09174515a964a7cd69d8cc589ad52de
    Fix a stack corruption in sensorservice
    
    Bug: 6576732
    Change-Id: If0f2fb0d0c35b932fb77cd262e676042145b28f9
    fix a typo causing sensor event to be sorted in reverse chronological order
    
    Change-Id: I041c64616d88ed1abb5efc90ed9eb0d9baeb4832
    usea socketpair instead of a pipe in BitTube
    
    Bug: 6252830
    Change-Id: I363cc7e9f73a5b7d8bbccee312c6d8938c84e99a
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF) DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF) DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF) DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    handle EINTR when calling sensor HAL's poll function
    
    some sensor HALs don't handle EINTR, make sure to catch it in the
    sensorservice.
    
    also if we ever encounter an error that we can't handle, we abort
    which will restart us (or the whole system process if we're running
    in it)
    
    Bug: 5511741
    Change-Id: I7051882b06980f778736b53d6cd021a99b5ca8d2
    SensorService now always clamps the requested rate
    
    Requested rate will be clamped to the minimum rate and then
    to 1ms. Previously we would return an error if a lower
    rate was asked. The SensorManager documentation wording
    allows this change.
    
    We do this to get more consistancy between all the sensor
    drivers / HALs
    
    Change-Id: I199f76486fb76ccbb11e7280460a03726c767e84
    fix an issue where SensorService could request an invalid sensor delay
    
    When the app requests "fastest", the java layer encodes this as a
    delay of 0. SensorService was passing this unchanged to the HAL.
    However the HAL is required to reject delays lower that the
    advertised lower delay.
    
    Change-Id: I92be77acd3af62ffeb49e4b31e24ddcd203510e2
    Rename SensorChannel to BitTube
    silence sensorservice when it's dropping events
    
    Change-Id: Ib05862e545aa780821aa605e45ab189f530494b7
    sensorservice: be more robust when there are no sensor h/w
    
    Bug: 5030108
    Change-Id: I45b85b3c492b9268cb0ae44d2e5fc8c708b6e66e
    PermissionCache caches permission checks
    
    This is intended to absorb the cost of the IPC
    to the permission controller.
    Cached permission checks cost about 3us, while
    full blown ones are two orders of magnitude slower.
    
    CAVEAT: PermissionCache can only handle system
    permissions safely for now, because the cache is
    not purged upon global permission changes.
    
    Change-Id: I8b8a5e71e191e3c01e8f792f253c379190eee62e
    improve orientation sensor with gyro data
    
    when we do our own sensor fusion, we also export an
    improved orientation sensor and hide the HAL sensor.
    The fused orientation sensor is much more precise, fast
    and smooth.
    
    Change-Id: I0ea843b47ad9d12f6b22cce51f8629852d423126
    use quaternions instead of MRPs
    
    also use correct time propagation equation
    disable the fused sensors when gyro is not present since
    they were unusable in practice.
    
    Change-Id: Iad797425784e67dc6c5690e97c71c583418cc5b5
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    Fix a few issues with sensors reference-counting
    Fix a crasher in SensorService
    
    SensorService main thread wasn't java-enabled. however, in
    some situations we end-up calling into the BatteryService from
    that thread which causes a crash.
    
    Change-Id: Iffba90e4c4b743dba84d62f1342001a9db31916d
    fix [4025681] continuous sensors should not try to send an event as soon as they're activated
    
    Make sure to send an event down only for sensors that report a value only on data
    change. Other sensors, will naturally send an event when the next event is available.
    
    Bug: 4025681
    Change-Id: I6d444deda388b6bc9a33e3371e09d390f1566ec5
    fix [3421350] Killing a game that uses the accelerometer renders the device unable to sleep
    
    when an app dies, make sure to disable all sensors that process
    is connected to, regardless of wether this was the LAST connection
    to this sensor.
    
    Change-Id: I9c72b1792eee03815304674d5c2f25b5270e4748
    Add support for virtual sensors.
    
    Rework sensorservice to allow "virtual sensors", that is
    sensors that report a synthetized value based on real sensors.
    
    the main change to sensorservice is around managing which real
    sensor need to be activated and which rate to use.
    
    The logic for all this has been moved into SensorDevice, which
    essentially wraps the sensor HAL but adds two features to it:
    - it keeps track of which sensors need to be activated
    - it keeps track of what rate needs to be used
    
    For this purpose an "identity" is associated with each real sensor
    activation, so we can track them.
    
    On start-up we check for gravity, linear-acceleration and
    rotation-vector sensors, if they're not present in the HAL, we
    synthetize them in sensor-service.
    
    Change-Id: I841db2c1b37ef127ed571efa21732ecc5adf1800
    Fix a race condition in sensormanager
    
    the per-connection state assumed the main sensorservice
    lock was held during access. This is however not true while
    pre-processing the events just before sending them to clients.
    Therefore, there was a small window during which this state
    could be modified while being used.
    
    we now have an internal lock that protects this state.
    
    Change-Id: I594680f20f09d6a4f1f38f093a1d3f650dcef1be
    record the last event received regardless of having clients or not
    
    We only recorded the last received event (which is needed when a sensor
    is activated on a connection) when there was some connection active.
    This should fix an issue where sometimes the light sensor doesn't
    return an event whent activated.
    
    we also didn't need to hold the main lock while dispatching events
    to clients.
    
    Change-Id: I6c6386c040051ce205e3c0516c678e0603fa45e1
    improve sensorservice dumpsys and increase the max sensor rate to 1 ms (1000Hz)
    
    the increased maximum rate is needed for proper gyro integration, current gyro
    parts can sample at up to 800Hz
    
    Change-Id: Ide75f6d5bc7a0fdafeb2dafd72db39e7afb9e794
    Replace epoll() with poll() and rename PollLoop to Looper.
    
    As part of this change, consolidated and cleaned up the Looper API so
    that there are fewer distinctions between the NDK and non-NDK declarations
    (no need for two callback types, etc.).
    
    Removed the dependence on specific constants from sys/poll.h such as
    POLLIN.  Instead looper.h defines events like LOOPER_EVENT_INPUT for
    the events that it supports.  That should help make any future
    under-the-hood implementation changes easier.
    
    Fixed a couple of compiler warnings along the way.
    
    Change-Id: I449a7ec780bf061bdd325452f823673e2b39b6ae
    Report sensor events to BatteryStats service
    
    Change-Id: I9b83aa709887aa658bc474391573f2d45b6c4eb2
    SensorService handles last known state properly
    
    SensorService now correctly sends the last known
    state of a sensor as soon as a new connection is made.
    This fixes the issue where, for instance, an application
    could wait a long time before getting the light or proximity
    sensor initial state.
    
    Change-Id: Ic41392f3626e26c4f15746c7e17c7ecd44bbb10b
    filter sensor event by connection
    
    we now don't send events down to a connection that has not
    registered for this event.
    
    Change-Id: I3fe507974d3e99293749bfec2ef871e8a0ee9600
    propagate sensor event rate properly to the sensor HAL
    
    Change-Id: I1abe4c0fcce423caab79208353fded4d57398227
    propagate sensor event rate properly
    
    Change-Id: I32e67d30e4295285a6827956cc8161b2025d70bc
    SensorService doesn't crash if correct HAL is not present
    
    Change-Id: I83700b1a1b43390f5830e1056572bfb16e58e8e4
    Better dumpsys logs
    
    Change-Id: Iae65a8547ee5815cc4c3b74d2c9ef17bed7f565d
    Added partial support for repporting sensor activity to IBatteryStats
    
    Change-Id: I2af319d89e49b0f2349ec9d8b0fccac80e9bc047
    new SensorService
    
    remove old sensor service and implement SensorManager
    on top of the new (native) SensorManger API.
    
    Change-Id: Iddb77d498755da3e11646473a44d651f12f40281
    More error checks to avoid div by zero.
    
    Change-Id: I18e5b72d02bf5420c14334d3a03f18fa40572d31
    use quaternions instead of MRPs
    
    also use correct time propagation equation
    disable the fused sensors when gyro is not present since
    they were unusable in practice.
    
    Change-Id: Iad797425784e67dc6c5690e97c71c583418cc5b5
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    Bug fix for SensorFusion data rate.
    
    SensorFusion is always returning data at the slowest possible sampling rate (5 Hz). batch() is getting called twice, first time with the requested rate and second time with the slowest rate (which overwrites the requested rate). Fix batch call in SensorFusion::activate()
    
    Bug: 12064319
    Change-Id: If62f3e514233f69810336fd22b136b4395b667d3
    (cherry picked from commit 88509090387eeb400771a786171866710cca230c)
    Bug fix for SensorFusion data rate.
    
    SensorFusion is always returning data at the slowest possible sampling rate (5 Hz). batch() is getting called twice, first time with the requested rate and second time with the slowest rate (which overwrites the requested rate). Fix batch call in SensorFusion::activate()
    
    Bug: 12064319
    Change-Id: If62f3e514233f69810336fd22b136b4395b667d3
    Bug fix for SensorFusion data rate.
    
    SensorFusion is always returning data at the slowest possible sampling rate (5 Hz). batch() is getting called twice, first time with the requested rate and second time with the slowest rate (which overwrites the requested rate). Fix batch call in SensorFusion::activate()
    
    Bug: 12064319
    Change-Id: If62f3e514233f69810336fd22b136b4395b667d3
    Fix for AOSP fusion sensors not handling multiple clients correctly.
    
    Bug: 10786801
    Change-Id: I7b938bc583a303a30237c3d93b5accbf64cc90b5
    Sensor batching. Changes to the native code.
    
    Bug: 10109508
    Change-Id: I7333f3aac76125a8226a4c99c901fb904588df04
    improve sensorservice's dumpsys
    
    it now displays the reported trigger mode properly, as well as
    the number and type of the last received data
    
    Change-Id: I2ff64b32ab71f1332bc2e09671c8c02bb9550490
    use gyro timestamp directly in fusion
    
    we used to estimate the gyro rate and deduce the period from that
    but it turns out this is causing problems.
    
    Bug: 5192288
    Change-Id: I8ca826d0e11e488587bcaa1720de99e92b82f191
    various fixes to the sensorservice
    
    1) "google" sensors are now reporting AOSP as the vendor string
    2) don't expose the system's sensor fusion if the HAL provides it
    3) use uncalibrated gyro if availble for the system's sensor fusion
    
    Change-Id: I25140436cdb29d55e39fd6fbbf8c44a410a83d5c
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF) DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    sensorservice: be more robust when there are no sensor h/w
    
    Bug: 5030108
    Change-Id: I45b85b3c492b9268cb0ae44d2e5fc8c708b6e66e
    use quaternions instead of MRPs
    
    also use correct time propagation equation
    disable the fused sensors when gyro is not present since
    they were unusable in practice.
    
    Change-Id: Iad797425784e67dc6c5690e97c71c583418cc5b5
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    Fix occasional fusion divergence by detecting it and resetting the fusion.
    
    Change-Id: I51186e12fb9b2316e3671e3908174f4495df89a0
    use quaternions instead of MRPs
    
    also use correct time propagation equation
    disable the fused sensors when gyro is not present since
    they were unusable in practice.
    
    Change-Id: Iad797425784e67dc6c5690e97c71c583418cc5b5
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    new SensorService
    
    remove old sensor service and implement SensorManager
    on top of the new (native) SensorManger API.
    
    Change-Id: Iddb77d498755da3e11646473a44d651f12f40281
    eclair snapshot
    update most gl tests to use EGLUtils
    donut snapshot
    Remove opengl tests from tests build
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Code drop from //branches/cupcake/...@124589
    improve sensorservice_test output
    
    Change-Id: I6248b6f1f001fedec1bddcddfcd2b381d9bb4bf4
    have the sensorsevice test print the delay of the first received event
    
    Change-Id: I89d63122574c3f8790f00512c76d59b463acf18f
    improve sensorservice dumpsys and increase the max sensor rate to 1 ms (1000Hz)
    
    the increased maximum rate is needed for proper gyro integration, current gyro
    parts can sample at up to 800Hz
    
    Change-Id: Ide75f6d5bc7a0fdafeb2dafd72db39e7afb9e794
    Replace epoll() with poll() and rename PollLoop to Looper.
    
    As part of this change, consolidated and cleaned up the Looper API so
    that there are fewer distinctions between the NDK and non-NDK declarations
    (no need for two callback types, etc.).
    
    Removed the dependence on specific constants from sys/poll.h such as
    POLLIN.  Instead looper.h defines events like LOOPER_EVENT_INPUT for
    the events that it supports.  That should help make any future
    under-the-hood implementation changes easier.
    
    Fixed a couple of compiler warnings along the way.
    
    Change-Id: I449a7ec780bf061bdd325452f823673e2b39b6ae
    new SensorService
    
    remove old sensor service and implement SensorManager
    on top of the new (native) SensorManger API.
    
    Change-Id: Iddb77d498755da3e11646473a44d651f12f40281
    fix an issue with vsync event delivery
    
    vsync events were sometimes delivered to connected
    client who didn't request them. this happened if
    another client requested the delivery and that client
    was first in the client list.
    
    also fix the vsync test which didn't request any events as
    well as DisplayEventReveiver documentation which was misleading
    about the necessity to request vsync events.
    
    Change-Id: Ie990fda3f337f8f0042745c4b2cde67936c45686
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    Add error for format and make sure setActiveConfig fails with an invalid mode.
    
    Change-Id: Iacdb5cbad125787f96c64c88d432fc541c4cad1a
    Compile libsurfaceflinger with Clang and -std=c++11 [DO NOT MERGE]
    
    This is necessary to use C11/C++11 stdlib atomics, which the next
    change will do. This change also fixes a couple bits of syntax that
    both GCC and Clang refuse to compile in -std=c++11 mode.
    
    Change-Id: Ia14d9d6b537a3bb106c23e19a277e48be180754c
    surfaceflinger: Make all sources depend on Android.mk
    
    This forces all SurfaceFlinger sources to be recompiled when the
    Makefile changes; that's overkill sometimes but makes sure everything
    gets recompiled when compile options (or similar) changes.
    
    Change-Id: I2b3c3090fc1c35078e13c77fbb1a78d447c39158
    SurfaceFlinger: send VSYNC power hints to IPowerManager
    
    VSYNC power hints are now sent via binder to IPowerManager.
    SurfaceFlinger no longer loads a second copy of the PowerHAL.
    VSYNC power hints are sent in batches and not on per frame basis.
    
    Change-Id: Ia5a839ab3c857cffae7089f810b4315d4ed23fcf
    Enable support RGBX_8888 for omap3
    
    Bug: 14995811
    Change-Id: Iaeb5a5ad0e3bcf215613f24f2570ae0d8267c016
    Revert "SurfaceFlinger: send VSYNC power hints to IPowerManager"
    
    This reverts commit d469a1c3285b974cf2637517cc25727da8f82668.
    SurfaceFlinger: send VSYNC power hints to IPowerManager
    
    VSYNC power hints are now sent via binder to IPowerManager.
    SurfaceFlinger no longer loads a second copy of the PowerHAL.
    VSYNC power hints are sent in batches and not on per frame basis.
    
    Change-Id: Icc2eee5df56135bd24dc244a84e7c12dd5511fec
    Remove deprecated BufferQueue constructor
    
    Bug: 13415624
    Change-Id: I9fe15e45daa7351f1db34ee75bfee6f19cb347d3
    Revert "Implement video plane layer"
    
    This reverts commit f837c93a1b392dbc4f7099d0c4fb723e32ca438e.
    
    Change-Id: I6a1aa9ad0aca023267dc53d19c950b1535123ca7
    Implement video plane layer
    
    Binding with video source will follow.
    
    Change-Id: Ic14e9757f5b61f4055cbeda47c1bafae0a621abb
    surfaceflinger: add BoardConfig.mk variable to force 32-bit
    
    Individual devices may need to force surfaceflinger to compile for
    32-bit if they don't have 64-bit GL libraries.
    
    Change-Id: I3703b2f8e36e90cf125d9ed5e6318c3506861948
    Fix handling of undefined TARGET_FORCE_HWC_FOR_VIRTUAL_DISPLAYS
    
    related to b/8316155 - Implement HWComposer 1.3 w/ virtual display support
    Change-Id: I2dc8d65a74174aa833cc491264f97f1f2df49307
    Add a boardconfig to force HWC composition of virtual displays
    
    When this boardconfig is defined, even when all virtual display
    composition is done by GLES, the HWC will be forced to copy from the
    GLES framebuffer to the output buffer. On some hardware this allows
    HWC to do format conversions that would otherwise have to be done by
    the consumer, with worse power and/or performance.
    
    Bug: 8316155
    Change-Id: If980ecc589f138cef063eafa757f7f748196713e
    SurfaceFlinger: give SF its own vsync phase
    
    This change allows SurfaceFlinger to run at a different vsync phase offset from
    that used by external listeners.
    
    Bug: 11175503
    Change-Id: I561c53a5659fa6dc1e3e4ae30340f3c1a6adceb4
    SurfaceFlinger: Add EventControlThread
    
    This change adds a new thread for calling HWComposer's eventControl
    asynchronously.  The DispSync-based vsync approach ends up enabling and
    disabling HWComposer's vsync callbacks at arbitrary times, and some HWComposer
    implementations do not have these calls optimized.
    
    Bug: 11175503
    Change-Id: I719be82bd200b391c61d40863b991c7b59acdfd6
    SurfaceFlinger: SW-based vsync events
    
    This change adds the DispSync class, which models the hardware vsync event
    times to allow vsync event callbacks to be done at an arbitrary phase offset
    from the hardware vsync.  This can be used to reduce the minimum latency from
    Choreographer wake-up to on-screen image presentation.
    
    Bug: 10624956
    Change-Id: I8c7a54ceacaa4d709726ed97b0dcae4093a7bdcf
    color blindness enhancement
    
    This is an attempt at improving the experience of
    users with color vision impairement.
    
    At this time this feature can only be enabled for
    debugging:
    
      adb shell service call SurfaceFlinger 1014 i32 PARAM
    
      with PARAM:
       0 : disabled
       1 : protanomaly/protanopia simulation
       2 : deuteranomaly/deuteranopia simulation
       3 : tritanopia/tritanomaly simulation
      11, 12, 13: same as above w/ attempted correction/enhancement
    
    The enhancement algorithm tries to spread the "error"
    such that tones that would otherwise appear similar can be
    distinguished.
    
    Bug: 9465644
    
    Change-Id: I860f7eed0cb81f54ef9cf24ad78155b6395ade48
    make sure SF initialization is ran at target priority and correct thread group
    
    SF can spawn threads (indirectly) during initialization
    and we want those to be spawned at URGENT_DISPLAY_PRIORITY
    (in theory they should set their own, but some code lives
    in vendor libraries and doesn't).
    
    Bug: 10430209
    Change-Id: I5b3a8f979297de287614c8eafd8267bef1176e4b
    SurfaceFlinger now runs in the process's main thread
    
    it used to spawn its own thread and return the main thread
    to the binder thread pool -- this was confusing the naming
    of things in the kernel.
    
    Bug: 10331839
    
    Change-Id: I2d13a6d73409a38109300fcbe6a04b4c41cb5d00
    Encapsulate textures into their own Texture class
    
    the main reason for doing this is so that we can have
    access to informations about a texture (like its dimension)
    close to where we generate and use shaders in ES 2.0.
    Previously, there wasn't any way to get to a texture's size
    from a RenderEngine implementation.
    
    Bug: 8679321
    
    Change-Id: I388b338a70d07e3e8177dde248710ea1e4c82dff
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    move services executables sources in their respective src folder
    
    Change-Id: Ic65434a26c7fed1699abf0851fec6faa40e09c0c
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    Refactor SF. Move all GL operations in their own class.
    
    this is the first step to add support for GLES 2.x, this
    change breaks the dependency of SF on GLES 1.x by moving
    all operation into their own class.
    
    Bug: 8679321
    
    Change-Id: I0d2741eca2cefe67dfd9cf837cac10c4d126928b
    Basic binary event-log helpers
    
    EventLog can be used from SurfaceFlinger to log jank
    statistics events to the binary event log.
    
    Change-Id: If0fbbe7d7111f10957697166d37fd0c3418109bb
    make all libsurfaceflinger and libsensorservice symbols's visibility hidden
    
    we only export the main entry-point.
    this saves about 150KB.
    
    Change-Id: I55eb2b6705386fdfa43860deb62f9cdd2a0982aa
    Remove experimental HWC virtual display support
    
    Bug: 8384764
    Change-Id: I97b52ed83ad85466bd91cb9291308994048568a1
    Add liblog
    
    Bug: 8580410
    Change-Id: I2ca4fa00dde0b574df3619134836bcb9315bd506
    Add BufferQueueInterposer and use it for virtual displays
    
    BufferQueueInterposer allows a client to tap into a
    IGraphicBufferProducer-based buffer queue, and modify buffers as they
    pass from producer to consumer. VirtualDisplaySurface uses this to
    layer HWC composition on top of GLES composition before passing the
    buffer to the virtual display consumer.
    
    Bug: 8384764
    Change-Id: I61ae54f3d90de6a35f4f02bb5e64e7cc88e1cb83
    Add DisplaySurface abstraction
    
    DisplayDevice now has a DisplaySurface instead of using
    FramebufferSurface directly. FramebufferSurface implements
    DisplaySurface, and so does the new VirtualDisplaySurface class.
    DisplayDevice now always has a surface, not just for virtual displays.
    
    In this change VirtualDisplaySurface is just a stub; buffers still go
    directly from GLES to the final consumer.
    
    Bug: 8384764
    Change-Id: I57cb668edbc6c37bfebda90b9222d435bf589f37
    Get rid of LayerBase.
    
    The functionality of LayerBase and Layer is folded
    into Layer. There wasn't a need for this abstraction
    anymore.
    
    Change-Id: I66511c08cc3d89009ba4deabf47e26cd4cfeaefb
    Remove support for ScreenshotLayer
    
    Change-Id: I5b571a4cf3faa77d2c4aca916fa4bd00a1065bb9
    SurfaceFlinger: Move GraphicBufferAlloc to libgui
    
    This change moves the GraphicBufferAlloc class from SurfaceFlinger to libgui.
    
    Change-Id: Idf31d2004efa2651b60590733f73c4a7b831e8a9
    Refactor SurfaceTexture a bit.
    
    Rearranges updateTexImage() so that the SurfaceFlinger-specific
    behavior is in a new SurfaceFlingerConsumer subclass.
    
    SurfaceTexture behavior should not be altered.  Instead of
    acquire-bind-release we now do acquire-release-bind, but since
    it's all done with the lock held there shouldn't be any
    externally-visible change.
    
    Change-Id: Ia566e4727945e2cfb9359fc6d2a8f8af64d7b7b7
    SurfaceFlinger: refactor frame time tracking
    
    This change moves the frame time history tracking code out of Layer and into a
    new class called FrameTracker.  It also changes the tracking to use signal
    timestamps from fences when available for more accurate results.
    
    Change-Id: I323c5f075c58bf86ce363b52af885ad0f6365f2b
    SurfaceFlinger: make the num FBs a board config
    
    Bug: 7283132
    Change-Id: I38116f39fc18212f2daab94bbfc3daaf89439fc4
    fix SurfaceFlinger DDMS debugging
    
    DdmHandleAppName.setAppName() signature changed which broke
    this debugging feature.
    
    Needed for debugging b\7267680
    
    Change-Id: I4482bf5a441e91bef89d1ddea9a4152333be7f88
    GraphicBufferAlloc class was declared twice
    
    this was confusing because the one in FramebufferSurface
    wasn't in fact being used
    
    Change-Id: Ied45aec20d804cfbe52440f9b2f2852a85c757cf
    add libsurfaceflinger_ddmconnection for PDK build
    
    - the library is dlopened from libsurfaceflinger
    - the library built only when libnativehelper exists
    
    Bug: 7089510
    Change-Id: Ib3ea1029d7e8f6e055f4b759d0bf68f5123fa8a1
    break SF dependencies on libdvm and libandroid_runtime
    
    these libraries are only needed for debugging and are now
    linked at runtime if needed.
    
    Change-Id: I03f138523c6de166a1e2700d4454d4a854aee145
    cleanups in preparation of bigger changes
    
    - fix typo drawForSreenshot misspelled
    - get rid of DisplayDeviceBase
    - removed unused or unneeded code
    - always pass a DisplayDevice to Layer methods that are called
      on a per-display basis (to make it clear that this could be
      called more than once per composition).
    
    Change-Id: Id948b7e09fe5c06db0e42d40d6ed75dd095c7f44
    rename DisplayHardware to DisplayDevice
    
    Change-Id: I3f7250cd914e0da4f9ec2c9403587bbe12f3cc62
    get rid of GraphicPlane
    
    its functionality is now folded into DisplayHardware
    there will be more changes in that area.
    fix typo in makefile LOCAL_CFLAGS was spelled LOCAL_CLFAGS
    
    Change-Id: I58b96d28f608ce16fcad5ed0efb887e582779e03
    split-up Client.h out of SurfaceFlinger.h
    
    Change-Id: I1993bf23e417163749d886283563a93d50b361b4
    Implement SurfaceFlinger's ANW on top of BufferQueue
    
    SF now has its own implementation of ANW for the
    framebuffer and it uses BufferQueue. FramebufferNativeWindow
    is now only used by stand-alone apps.
    
    Change-Id: Iddeb24087df62bd92b0f78e391dda9b97ddc859c
    set vsync power hint
    
    Change-Id: I28c2faf9ff584df3e74392712971cbcf75eb9e98
    triple buffering is now controled by BoardConfig and enabled by default
    
    use TARGET_DISABLE_TRIPLE_BUFFERING := true to disable
    triple buffering.
    
    Change-Id: I9875d6ddefd23c1af9e51e7ee7dec1bacd1e6799
    SurfaceFlinger now uses the new VSYNC HAL API.
    
    If h/w composer doesn't support vsync (version < 0.3) we
    "fake" it with a timer.
    
    Change-Id: I1e3be79f43c9631d1293ad7d6cf52f9bfc42d65b
    refactor / simplify EventThread
    
    Change-Id: I3981c6fba93b7b985174b2a7045e24db2c0b4428
    surfaceflinger: disable ddms debugging on pdk builds
    
    DDMS debugging depends on non-pdk apis, disable it when a pdk
    build is selected.
    
    Change-Id: I6376b5c4cf49f2c51f35f8d567f7c6d18daf893f
    fixup include paths
    
    - remove unneeded include deps
    - remove some hardcoded include paths
    
    Change-Id: Ifae0e2b2d738e0f94f8525c45be78f4227ce1673
    ui freeze workaround: reenable triple buffering mode
    
    we're seeing UI freezes when window updates and
    composition are separated. for now we workaround this
    by always doing a composition after window updates on
    vsync. triple buffering is reenabled for performance.
    
    Change-Id: I693d705000b7452489bb0b4918fbeadb9879315c
    separate transactions from updates
    
    with this changes, SF transactions are handled as soon as possible
    but do not trigger updates. the update is delayed until the next
    vsync.
    
    this allows us to work much better without requiring triple-buffering.
    
    Change-Id: I1fa10794d0cf742129f0877698b7b1e1f2ec7401
    Nexus S now reports the proper frame-rate
    
    don't hardcode it.
    
    Change-Id: I4b37f37a9809cac937e6334c988b3185af2ebe22
    SF now synchronizes to VSYNC
    
    Change-Id: Ic5e4f2ea9927ce133eef9499c03161325e9d02c5
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    Fix build.
    
    Revert "Add support for sending VSYNC events to the framework"
    
    This reverts commit f3918c5bd4bc9f02f74da42995564150ca2dd382.
    
    Change-Id: I998e3e1aa3fa310829ae973b64fe11b01f6f468f
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: If4126023fc9c067e56087ec7d16a8fd542ce1794
    temporarily hardcode Nexus S refresh rate
    
    Change-Id: Id8465f679b96636041b4b891d0b358c387d456c3
    remove hack that hardcoded the refresh rate
    
    Change-Id: Ibdd40b337c547e80ef8541856015f1380c8d58ed
    Actually 59 fps DO NOT MERGE
    
    Change-Id: Ic70dbba81c054eaaf21f71b10e329ebf1424d4a2
    Back to 59fps
    
    Change-Id: I8d89e5e27f1abc5a2e36cb832eb4db2ca83c2cc6
    Set the WM refresh rate to 60 Hz for tuna devices only DO
    NOT MERGE
    
    This approach is TEMPORARY until we can do this properly.
    
    Change-Id: I81a8f852df501b2faccffdae7cac954855a6c98f
    workaround to set the WM refresh rate to 48 Hz for tuna devices only
    
    this is TEMPORARY until we can do this properly.
    
    Bug: 5572464
    Change-Id: I6537706d636a83a4a50e2900d6b829dd89b6f245
    Add a LayerScreenshot
    
    A LayerScreenshot is a special type of layer that contains a screenshot of
    the screen acquired when its created. It works just like LayerDim.
    
    Make sure to call compositionComplete() after rendering into a FBO.
    
    Bug: 5446982, 5467587, 5466259
    Change-Id: I5d8a1b4c327f9973d950cd4f4c0bca7f62825cd4
    Revert "Add a LayerScreenshot"
    
    This reverts commit d6809f40cf61203573ec5dbc437f695cd132cc18.
    Add a LayerScreenshot
    
    A LayerScreenshot is a special type of layer that contains a screenshot of
    the screen acquired when its created. It works just like LayerDim.
    
    Bug: 5446982
    Change-Id: I7814aff2380e7e146937f2b641907be2a30c76cc
    enable EGL_IMG_context_priority for the omap4 platform
    
    Bug: 5311015
    Change-Id: Icaad3d1c963d382ac0a4b9121fe20d3408846c2b
    as a debug option SrufaceFlinger can now connect to DDMS
    
    this is disabled by default. To enable:
      setprop debug.sf.ddms 1
    
    this debug option requires to restart SurfaceFlinger
    
    Change-Id: Ic2f8050b29911b55bcd21721648b6978700c277d
    SurfaceFlinger: use async mode for video & cam
    
    This change makes SurfaceFlinger's SurfaceTexture objects default to
    async mode whenever a camera or video decoder connects.  This behavior
    can be disabled by #defining NEVER_DEFAULT_TO_ASYNC_MODE.
    
    Change-Id: I8965951d1775915da180e4af298dd7af3afafecc
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    unify SurfaceTexture and Surface
    
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    Add SurfaceTexture logging
    fix onFrameAvailable
    merge libsurfaceflinger_client into libgui
    
    this is the first step in unifying surfacetexture and surface.
    for this reason the header files were not moved, as most of them
    will eventually go away.
    
    NOTE: currently we keep libsurfaceflinger_client.so as an empty
    library to workaround prebuilt binaries wrongly linking against
    it.
    
    Change-Id: I130f0de2428e8579033dc41394d093f4e1431a00
    minor clean-up. SurfaceFlinger doesn't need libpixelflinger.so. (DO NOT MERGE)
    
    Change-Id: I1ddbbbec4fa5b2521ef3787bc28efe1bc90d0060
    disable the bypass mode. DO NOT MERGE.
    
    SF bypass mode triggers a bug in the display controller that
    case cause the device to freeze.
    
    Change-Id: If29b4d5132f463d13831b082b904c235f15a19fb
    minor clean-up. SurfaceFlinger doesn't need libpixelflinger.so.
    
    Change-Id: I3bdca74351c8e480a05084bc412a96c5f685221d
    More clean-up. Get rid off the "blur" effect in SurfaceFlinger
    
    For multiple reason, this effect is not maintainable and was never
    used due to its abysmal performance. it'll be resurected when it can be
    implemented efficiently.
    
    Change-Id: Id4222c9b86c629275cdec18873ef07be8723b6d2
    remove support for PUSH_BUFFER surfaces and overlays
    
    the same functionality is now supported through
    the h/w composer HAL, and YUV support in the GPU.
    
    Change-Id: I8146605449954b8e8fd7f78810b7d873c2d8f5bf
    [3171580] SurfaceFlinger Bypass mode. (DO NOT MERGE)
    
    This is a poor's man precursor to the h/w composer HAL.
    Basically we detect when a window is full screen and in
    that case we bypass surfaceflinger's composition step, which
    yields to much improved performance.
    
    Change-Id: Ie03796ae81a1c951949b771c9323044b980cb347
    Use the context_priority extension when present.
    
    Change-Id: I12eadf1e32d576de5d811fba44afa73263e13eef
    Squashed commit of the following:
    
    commit 35cc68814a9537c31fde146e171e7b0bbdfe211e
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Aug 16 08:48:42 2010 -0700
    
        Only enable support for yuv to yuv conversion on passion, where it's available, use the slower yuv->rgb565 path everywhere else.
    
    commit d8ac5a8814103e60d11d2acf61997fc31a1dc58d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 13 13:56:44 2010 -0700
    
        The software renderer takes over all rendering, converting from yuv to yuv if possible and rgb565 otherwise.
    
    commit 684972074b74318bdcb826ed9b5b0864d2d2e273
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 13 09:34:35 2010 -0700
    
        A first shot at supporting the new rendering APIs.
    
    Change-Id: Iea9b32856da46950501f1a700f616b5feac710fd
    revert hwcomposer HAL changes. DO NOT MERGE.
    
    This reverts commit:
    94364b91a2894bf037b8beb027132fbb812e1434
    f8e705dea48f77f1c2532fdbadd4997dd1851af0
    b59beb5ca68d0228f60dda60d85e2d0226b33215
    e0d5f5bcf5a8b26f4ad75f549cbf380b2c9faf20
    call into hwcomposer HAL when present
    
    Change-Id: I70f31c69a9436a43860e78977442863ecba6d27b
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    fix live wallpapers on Droid
    
    On omap3 h/w we force opaque formats to RGB_565 instead of RGBX_8888
    because the GL driver doesn't support it. RGBX_8888 is always remapped
    to RGBA_8888.
    
    Change-Id: I0bfabeb98c8d3a399079e6797cf2a0ee95915324
    remove a hack that was used only used on h/w we no longer support.
    
    this should fix the opal build.
    
    Change-Id: I43d7633696fea5be6bc834293a832d22f6bdfc61
    Revert "Revert "fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger""
    
    This reverts commit 330dd304a471d260a73e342a240921c03c825f99.
    Revert "fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger"
    
    This reverts commit 081bc5c47d8a980e6eafa70ddafcd89981586391.
    Revert "am 256fc043: am 081bc5c4: fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger"
    
    This reverts commit e02dec8c4cbab17d09983af1328308b8aa61ef85, reversing
    changes made to 6d7a052fb04b251c517d0a9049b8d5d7408ce8c0.
    
    Bug: 2798567
    fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger
    
    Make sure to not use GL_TEXTURE_EXTERNAL when it's not supported
    by the GL. The error was harmless, but annoying.
    
    Change-Id: I571a9a9b05d35da51420950a6a6e95629067efd0
    clean-up client management.
    
    simplified things a lot, the biggest change is that the concept
    of "ClientID" is now gone, instead we simply use references.
    
    Change-Id: Icbc57f80865884aa5f35ad0d0a0db26f19f9f7ce
    Refactor some code in surfaceflinger in preparation of upcoming changes
    
    the new TextureMagager class now handle texture creation and upload
    as well as EGL image creation and binding to GraphicBuffers. This is
    used indirectly by Layer and directly by LayerBuffer
    
    the new BufferManager class handles the set of buffers used for a
    Layer (Surface), it abstracts how many buffer there is as well as
    the use of EGLimage vs. regular texture ops (glTexImage2D).
    
    Change-Id: I2da1ddcf27758e6731400f6cc4e20bef35c0a39a
    remove a dependency of surfaceflinger on libskia
    
    libskia was only used for a small part of SkTransform. We now implement
    Transform is surfaceflinger directly.
    split libsurfaceflinger_client and libcamera_client out of libui
    android-2.1_r1 snapshot
    Revert "When using MDP, we needed to use a texture for diming."
    
    This reverts commit bf0c320afbf6bf2441916755ecb443b64afbe73f.
    When using MDP, we needed to use a texture for diming.
    fix [2262591] Junk on screen in ERD46
    
    since we're using the GPU for composition, don't use a texture for dimming,
    instead simply use an alpha-blended quad.
    
    also workaround what looks like a GL driver bug by calling glFinish() before
    glReadPixels().
    eclair snapshot
    fix [2167050] glTexImage2D code path buggy in SurfaceFlinger
    
    When EGLImage extension is not available, SurfaceFlinger will fallback to using
    glTexImage2D and glTexSubImage2D instead, which requires 50% more memory and an
    extra copy. However this code path has never been exercised and had some bugs
    which this patch fix.
    
    Mainly the scale factor wasn't computed right when falling back on glDrawElements.
    We also fallback to this mode of operation if a buffer doesn't have the adequate
    usage bits for EGLImage usage.
    
    This changes only code that is currently not executed. Some refactoring was needed to
    keep the change clean. This doesn't change anything functionaly.
    fix [2068105] implement queueBuffer/lockBuffer/dequeueBuffer properly
    
    Rewrote SurfaceFlinger's buffer management from the ground-up.
    The design now support an arbitrary number of buffers per surface, however the current implementation is limited to four. Currently only 2 buffers are used in practice.
    
    The main new feature is to be able to dequeue all buffers at once (very important when there are only two).
    
    A client can dequeue all buffers until there are none available, it can lock all buffers except the last one that is used for composition. The client will block then, until a new buffer is enqueued.
    
    The current implementation requires that buffers are locked in the same order they are dequeued and enqueued in the same order they are locked. Only one buffer can be locked at a time.
    
    eg. Allowed sequence:   DQ, DQ, LOCK, Q, LOCK, Q
    eg. Forbidden sequence: DQ, DQ, LOCK, LOCK, Q, Q
    enable HW acceleration for the Dim Surface on 8k devices
    donut snapshot
    donut snapshot
    first attempt to fix the sim
    fix [1967226] Donut orientation animation (dimming and blur) is slower than Cupcake
    rename libsgl/libcorecg to libskia
    don't need to link against libsgl
    copybit now uses a native_handle_t* instead of a fd/offset
    implement dimming with a texture on msm7k so it uses copybit
    split boot animation out of SurfaceFlinger
    
    Conflicts:
    
            data/etc/platform.xml
    checkpoint: split libutils into libutils + libbinder
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    a brand new MessageQueue for SurfaceFlinger.
    more splitting of Surface/SurfaceControl. Surface.java is now implemented in terms of Surface and SurfaceControl.
    
    The WindowManager side of Surface.java holds a SurfaceControl, while the client-side holds a Surface. When the client is in the system process, Surface.java holds both (which is a problem we'll try to fix later).
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    AI 143309: am: CL 143160 am: CL 142856 new-new-new-new rotation animation. it may still change one more time.
      Original author: mathias
      Merged from: //branches/cupcake/...
      Original author: android-build
      Merged from: //branches/donutburger/...
    
    Automated import of CL 143309
    AI 143160: am: CL 142856 new-new-new-new rotation animation. it may still change one more time.
      Original author: mathias
      Merged from: //branches/cupcake/...
    
    Automated import of CL 143160
    Automated import from //branches/cupcake/...@142856,142856
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@131421
    auto import from //branches/cupcake/...@130745
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    SurfaceFlinger: send VSYNC power hints to IPowerManager
    
    VSYNC power hints are now sent via binder to IPowerManager.
    SurfaceFlinger no longer loads a second copy of the PowerHAL.
    VSYNC power hints are sent in batches and not on per frame basis.
    
    Change-Id: Ia5a839ab3c857cffae7089f810b4315d4ed23fcf
    Revert "SurfaceFlinger: send VSYNC power hints to IPowerManager"
    
    This reverts commit d469a1c3285b974cf2637517cc25727da8f82668.
    SurfaceFlinger: send VSYNC power hints to IPowerManager
    
    VSYNC power hints are now sent via binder to IPowerManager.
    SurfaceFlinger no longer loads a second copy of the PowerHAL.
    VSYNC power hints are sent in batches and not on per frame basis.
    
    Change-Id: Icc2eee5df56135bd24dc244a84e7c12dd5511fec
    SurfaceFlinger: SW-based vsync events
    
    This change adds the DispSync class, which models the hardware vsync event
    times to allow vsync event callbacks to be done at an arbitrary phase offset
    from the hardware vsync.  This can be used to reduce the minimum latency from
    Choreographer wake-up to on-screen image presentation.
    
    Bug: 10624956
    Change-Id: I8c7a54ceacaa4d709726ed97b0dcae4093a7bdcf
    Use new HWC display type/count constants.
    
    Change-Id: I774d0c68906ac6dc69268f708c30a6b0868b8816
    SurfaceFlinger: EventThread: Fix Vsync array size.
    
    Vsync array size is specified as HWC_DISPLAY_TYPES_SUPPORTED whose
    value luckily happens to be 2. That enum is actually used for querying
    hwc for the number of displays supported.
    
    The implementation file EventThread.cpp correctly accesses the array
    upto HWC_NUM_DISPLAY_TYPES
    
    Change-Id: I36e3f0913e7d6fda7bbf4449c1fb32c7f18bb934
    Signed-off-by: Amara Venkata Mastan Manoj Kumar<manojavm@codeaurora.org>
    Signed-off-by: Saurabh Shah <saurshah@codeaurora.org>
    clean-up/simplify all dump() APIs
    
    remove the scratch buffer parameter and use
    String8::appendFormat() instead.
    
    Change-Id: Ib96c91617c8e7292de87433d15cf6232b7d591b0
    Display events now always carry the display id they happened on
    
    Change-Id: I12de1d883c23927722bc3a71b782f0079de4e831
    We now report hotplug events to the framework
    
    Change-Id: I2d6b7787d39e5929485a551e4982498c5053c211
    Minor tweaks
    
    A couple of minor cleanups I stumbled over while looking at other
    things.
    
    Change-Id: I385ecfe1afefd577afbc59d7ef1d98d868073651
    Eradicate DisplayID.
    
    DisplayDevices are now keyed of the wp<IBinder> the client uses.
    DisplayID has now become DisplayType which is just used to identify
    physical displays (as opposed to virtual displays such as wifi displays).
    
    Change-Id: I0c5968f2c902dcd699a7e0afacf833ff070c12ea
    simplify further vsync handling
    
    - we now clean-up "dead" connection in the main loop,
    this entirely avoid the problem with the side effects of
    releasing strong references. We now only hold on to strong
    reference for the connection we will signal.
    
    - also simplify how we build the list of "ready" connections, by
    only adding them to the list when we did receive a vsync event
    
    Change-Id: I2a84da431320a2af8e8a93e07622a1d258236f43
    fix various issues in SF's EventThread
    
    - one issues caused most timestamps to be reported as 0
    - on rare occasions an uninitialized variable could be used
    - vsync counts per connection were accessed unthreadsafely
    
    we now have 2 lists of connections in the main loop, one just
    keeps a list of strong refs to the connections because once
    we have a strong ref we're not allowed to release it while
    holding the lock.
    
    the 2nd list holds the connections that have a vsync event to
    be reported. all the calculations are made with the lock held.
    
    Change-Id: Iacfad3745b05df79d9ece3719bd4c34ddbfd5b83
    fix various issues in SF's EventThread
    
    - one issues caused most timestamps to be reported as 0
    - on rare occasions an uninitialized variable could be used
    - vsync counts per connection were accessed unthreadsafely
    
    we now have 2 lists of connections in the main loop, one just
    keeps a list of strong refs to the connections because once
    we have a strong ref we're not allowed to release it while
    holding the lock.
    
    the 2nd list holds the connections that have a vsync event to
    be reported. all the calculations are made with the lock held.
    
    Change-Id: Iacfad3745b05df79d9ece3719bd4c34ddbfd5b83
    Fix deadlock in SF.
    
    problem was that we were acquiring a strong reference
    on Connection object with a lock held, when those
    got out of scope (lock still held) their dtor
    could be called if all other refs had dropped,
    the dtor would acquire the lock again to
    remove the Connection from the main list. boom.
    
    we rearange the code so this doesn't happen.
    
    Bug: 6942208
    
    Change-Id: I0a0ebabce2842d29d60d645b64aac2f26640e59b
    rename DisplayHardware to DisplayDevice
    
    Change-Id: I3f7250cd914e0da4f9ec2c9403587bbe12f3cc62
    split HWComposer out of DisplayHardware
    
    we will only ever have a single instance of HWComposer, so
    it's now an attribute of SurfaceFlinger, instead of being part
    of DisplayHardware.
    
    DisplayHardware now just represents a "display" (it should be renamed).
    
    Change-Id: Iec191e57686868e1df6daa8b880a286c9fefde56
    SurfaceFlinger cleanup
    
    mostly refactored SurfaceFlinger.h, but also removed dead code.
    cleaned-up a few includes as well.
    
    Change-Id: Ib15f4ffe567912b61ee98aa076c6a283b72811b5
    get rid of GraphicPlane
    
    its functionality is now folded into DisplayHardware
    there will be more changes in that area.
    make sure to disable VSYNC while screen is off
    
    Change-Id: If1894c43b0a39a2851e1280a35ae77bccd6d9abd
    Added vsync debugging information in dumpsys log
    
    Change-Id: I20ef05a73d89caaf6a70dc9ca25ada6e6a1f6ff9
    SurfaceFlinger now uses the new VSYNC HAL API.
    
    If h/w composer doesn't support vsync (version < 0.3) we
    "fake" it with a timer.
    
    Change-Id: I1e3be79f43c9631d1293ad7d6cf52f9bfc42d65b
    refactor / simplify EventThread
    
    Change-Id: I3981c6fba93b7b985174b2a7045e24db2c0b4428
    SF now synchronizes to VSYNC
    
    Change-Id: Ic5e4f2ea9927ce133eef9499c03161325e9d02c5
    Improve the VSYNC api a bit.
    
    - add the ability to set the vsync delivery rate, when the rate is
    set to N>1 (ie: receive every N vsync), SF process' is woken up for
    all of vsync, but clients only see the every N events.
    
    - add the concept of one-shot vsync events, with a call-back
    to request the next one. currently the call-back is a binder IPC.
    
    Change-Id: I09f71df0b0ba0d88ed997645e2e2497d553c9a1b
    fix a deadlock when removing a DisplayEventConnection
    
    the deadlock would happen when the pipe became invalid and SF
    trying to remove the connection from its list.
    
    we know make sure to process events without holding a lock.
    
    Change-Id: I39927ed8824fc7811e16db3c7608a2ebc72d9642
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    SurfaceFlinger: send VSYNC power hints to IPowerManager
    
    VSYNC power hints are now sent via binder to IPowerManager.
    SurfaceFlinger no longer loads a second copy of the PowerHAL.
    VSYNC power hints are sent in batches and not on per frame basis.
    
    Change-Id: Ia5a839ab3c857cffae7089f810b4315d4ed23fcf
    Revert "SurfaceFlinger: send VSYNC power hints to IPowerManager"
    
    This reverts commit d469a1c3285b974cf2637517cc25727da8f82668.
    SurfaceFlinger: send VSYNC power hints to IPowerManager
    
    VSYNC power hints are now sent via binder to IPowerManager.
    SurfaceFlinger no longer loads a second copy of the PowerHAL.
    VSYNC power hints are sent in batches and not on per frame basis.
    
    Change-Id: Icc2eee5df56135bd24dc244a84e7c12dd5511fec
    SurfaceFlinger: fix 64-bit format string warnings
    
    Change-Id: Idacfbf0601743fba1c5de7632201a66a307a2710
    Signed-off-by: Greg Hackmann <ghackmann@google.com>
    SurfaceFlinger: SW-based vsync events
    
    This change adds the DispSync class, which models the hardware vsync event
    times to allow vsync event callbacks to be done at an arbitrary phase offset
    from the hardware vsync.  This can be used to reduce the minimum latency from
    Choreographer wake-up to on-screen image presentation.
    
    Bug: 10624956
    Change-Id: I8c7a54ceacaa4d709726ed97b0dcae4093a7bdcf
    Use new HWC display type/count constants.
    
    Change-Id: I774d0c68906ac6dc69268f708c30a6b0868b8816
    clean-up/simplify all dump() APIs
    
    remove the scratch buffer parameter and use
    String8::appendFormat() instead.
    
    Change-Id: Ib96c91617c8e7292de87433d15cf6232b7d591b0
    Minor cleanups/fixes before virtual display refactoring
    
    None of these should change behavior, except for removing some
    incorrect log messages when using a virtual display.
    
    - HWComposer::getAndResetReleaseFenceFd() checks the HWC version, so
      no need to do that in the DisplayDevice::onSwapBuffersCompleted().
      However, it should check that mFramebufferSurface is not NULL like
      it is for virtual displays.
    - Comment that FramebufferSurface::dump() overrides the non-virtual
      ConsumerBase::dump(), and fix it so the right thing happens
      regardless of the static type of the pointer/reference the callee
      has. FramebufferSurface::dump() could be removed right now, but I'd
      need to bring it back in a later change.
    - Use the right enum for validating display type ids.
    - Don't try to send hotplug events for virtual displays.
    - Mark virtual displays as connected so HWComposer::prepare() doesn't
      think something is wrong when it gets a non-NULL layer list.
    - Remove unused FramebufferSurface methods.
    
    Bug: 8384764
    Change-Id: Id28a2f9be86b45f4bb7915fdf7752157035f4294
    make sure we don't call into the HWC HAL when not needed
    
    when enabling/disabling vsync we now make sure to
    not call into the HAL if the state wouldn't change.
    
    Bug: 7274951
    
    Change-Id: Ie24a6d68888a51b577acf9c2a973d85437cbacaf
    make sure we don't call into the HWC HAL when not needed
    
    when enabling/disabling vsync we now make sure to
    not call into the HAL if the state wouldn't change.
    
    Bug: 7274951
    
    Change-Id: Ie24a6d68888a51b577acf9c2a973d85437cbacaf
    Display events now always carry the display id they happened on
    
    Change-Id: I12de1d883c23927722bc3a71b782f0079de4e831
    fix an issue where hotplug events were not dispatched
    
    Change-Id: I527eec77f338cd6f1a9021aa4c9d384dbddd6d2a
    We now report hotplug events to the framework
    
    Change-Id: I2d6b7787d39e5929485a551e4982498c5053c211
    Minor tweaks
    
    A couple of minor cleanups I stumbled over while looking at other
    things.
    
    Change-Id: I385ecfe1afefd577afbc59d7ef1d98d868073651
    Add timeout when waiting for HW vsync
    
    This way we don't get stuck if, say, the driver decides not
    to send us vsync events.
    
    Change-Id: I4af6358b3a1f304eaae5fd926ed3403fa1091827
    Eradicate DisplayID.
    
    DisplayDevices are now keyed of the wp<IBinder> the client uses.
    DisplayID has now become DisplayType which is just used to identify
    physical displays (as opposed to virtual displays such as wifi displays).
    
    Change-Id: I0c5968f2c902dcd699a7e0afacf833ff070c12ea
    simplify further vsync handling
    
    - we now clean-up "dead" connection in the main loop,
    this entirely avoid the problem with the side effects of
    releasing strong references. We now only hold on to strong
    reference for the connection we will signal.
    
    - also simplify how we build the list of "ready" connections, by
    only adding them to the list when we did receive a vsync event
    
    Change-Id: I2a84da431320a2af8e8a93e07622a1d258236f43
    fix various issues in SF's EventThread
    
    - one issues caused most timestamps to be reported as 0
    - on rare occasions an uninitialized variable could be used
    - vsync counts per connection were accessed unthreadsafely
    
    we now have 2 lists of connections in the main loop, one just
    keeps a list of strong refs to the connections because once
    we have a strong ref we're not allowed to release it while
    holding the lock.
    
    the 2nd list holds the connections that have a vsync event to
    be reported. all the calculations are made with the lock held.
    
    Change-Id: Iacfad3745b05df79d9ece3719bd4c34ddbfd5b83
    fix various issues in SF's EventThread
    
    - one issues caused most timestamps to be reported as 0
    - on rare occasions an uninitialized variable could be used
    - vsync counts per connection were accessed unthreadsafely
    
    we now have 2 lists of connections in the main loop, one just
    keeps a list of strong refs to the connections because once
    we have a strong ref we're not allowed to release it while
    holding the lock.
    
    the 2nd list holds the connections that have a vsync event to
    be reported. all the calculations are made with the lock held.
    
    Change-Id: Iacfad3745b05df79d9ece3719bd4c34ddbfd5b83
    Fix deadlock in SF.
    
    problem was that we were acquiring a strong reference
    on Connection object with a lock held, when those
    got out of scope (lock still held) their dtor
    could be called if all other refs had dropped,
    the dtor would acquire the lock again to
    remove the Connection from the main list. boom.
    
    we rearange the code so this doesn't happen.
    
    Bug: 6942208
    
    Change-Id: I0a0ebabce2842d29d60d645b64aac2f26640e59b
    rename DisplayHardware to DisplayDevice
    
    Change-Id: I3f7250cd914e0da4f9ec2c9403587bbe12f3cc62
    split HWComposer out of DisplayHardware
    
    we will only ever have a single instance of HWComposer, so
    it's now an attribute of SurfaceFlinger, instead of being part
    of DisplayHardware.
    
    DisplayHardware now just represents a "display" (it should be renamed).
    
    Change-Id: Iec191e57686868e1df6daa8b880a286c9fefde56
    SurfaceFlinger cleanup
    
    mostly refactored SurfaceFlinger.h, but also removed dead code.
    cleaned-up a few includes as well.
    
    Change-Id: Ib15f4ffe567912b61ee98aa076c6a283b72811b5
    get rid of GraphicPlane
    
    its functionality is now folded into DisplayHardware
    there will be more changes in that area.
    SF could get stuck waiting for vsync when turning the screen off
    
    When turning the screen off we could have 2 waiters on the
    vsync condition: The main vsync waiter as well as one in
    onScreenReleased(). We were only signaling the condition though,
    so it it would be possible to wake onScreenReleased() without waking
    the main vsync thread which would then be stuck in .wait().
    
    We fix this by just using broadcast() when receiving a vsync event.
    
    We also add a broadcast() to signal when the state of
    mUseSoftwareVSync changes.  This is important particularly for
    the transition from hardware to software vsync because the main
    vsync waiter might have observed mUseSoftwareVSync == false
    and decided to block indefinitely pending a hardware vsync
    signal that will never arrive.
    
    Removed a potentially deadlocking wait for a signal in
    onScreenReleased().  The function was trying to wait for the last
    vsync event from the hardware to be delivered to clients but there
    was no guarantee that another thread would signal it to wake up
    again afterwards.  (As far as I can tell, the only other other
    thread that might wake it up at this point would be a client
    application issuing a vsync request.)  We don't really need to wait
    here anyhow.  It's enough to set the mUseSoftwareVSync flag,
    wake up the thread loop and go.  If there was a pending vsync
    timestamp from the hardware, then the thread loop will grab
    it and use it then start software vsync on the next iteration.
    
    Bug: 6672102
    Change-Id: I7c6abc23bb021d1dfc94f101bd3ce18e3a81a73e
    SF could get stuck waiting for vsync when turning the screen off
    
    When turning the screen off we could have 2 waiters on the
    vsync condition: The main vsync waiter as well as one in
    onScreenReleased(). We were only signaling the condition though,
    so it it would be possible to wake onScreenReleased() without waking
    the main vsync thread which would then be stuck in .wait().
    
    We fix this by just using broadcast() when receiving a vsync event.
    
    We also add a broadcast() to signal when the state of
    mUseSoftwareVSync changes.  This is important particularly for
    the transition from hardware to software vsync because the main
    vsync waiter might have observed mUseSoftwareVSync == false
    and decided to block indefinitely pending a hardware vsync
    signal that will never arrive.
    
    Removed a potentially deadlocking wait for a signal in
    onScreenReleased().  The function was trying to wait for the last
    vsync event from the hardware to be delivered to clients but there
    was no guarantee that another thread would signal it to wake up
    again afterwards.  (As far as I can tell, the only other other
    thread that might wake it up at this point would be a client
    application issuing a vsync request.)  We don't really need to wait
    here anyhow.  It's enough to set the mUseSoftwareVSync flag,
    wake up the thread loop and go.  If there was a pending vsync
    timestamp from the hardware, then the thread loop will grab
    it and use it then start software vsync on the next iteration.
    
    Bug: 6672102
    Change-Id: I7c6abc23bb021d1dfc94f101bd3ce18e3a81a73e
    set vsync power hint
    
    Change-Id: I28c2faf9ff584df3e74392712971cbcf75eb9e98
    don't wake-up eventthread every 16ms if there are no vsync requests
    
    Bug: 6332534
    Change-Id: Idf79ad913770c6180969f6c95a9b125fff580231
    make sure to disable VSYNC while screen is off
    
    Change-Id: If1894c43b0a39a2851e1280a35ae77bccd6d9abd
    Added vsync debugging information in dumpsys log
    
    Change-Id: I20ef05a73d89caaf6a70dc9ca25ada6e6a1f6ff9
    VSYNC handling cleanup
    
    Change-Id: I1376bf864c4e03c11fb6d1333a8b7cfdda08c9e4
    avoid turning vsync off/on at each frame
    
    always keep vsync active for an extra frame before
    deciding if it should be turned off.
    
    Change-Id: I55b03265b7851b33a595e46a013f2ab55e66c964
    SurfaceFlinger now uses the new VSYNC HAL API.
    
    If h/w composer doesn't support vsync (version < 0.3) we
    "fake" it with a timer.
    
    Change-Id: I1e3be79f43c9631d1293ad7d6cf52f9bfc42d65b
    refactor / simplify EventThread
    
    Change-Id: I3981c6fba93b7b985174b2a7045e24db2c0b4428
    add more ATRACE
    
    Change-Id: I6cc5759fb0a05427680488fd12ae797e77644f3d
    fix an issue with vsync event delivery
    
    vsync events were sometimes delivered to connected
    client who didn't request them. this happened if
    another client requested the delivery and that client
    was first in the client list.
    
    also fix the vsync test which didn't request any events as
    well as DisplayEventReveiver documentation which was misleading
    about the necessity to request vsync events.
    
    Change-Id: Ie990fda3f337f8f0042745c4b2cde67936c45686
    SF now synchronizes to VSYNC
    
    Change-Id: Ic5e4f2ea9927ce133eef9499c03161325e9d02c5
    improve SurfaceFlinger dumpsys
    
    It is now possible to say:
    
    dumpsys SurfaceFlinger --latency
    
    to print latency information about all windows
    
    dumpsys SurfaceFlinger --latency window-name
    
    to print the latency stats of the specified window
    
    for instance: dumpsys SurfaceFlinger --latency SurfaceView
    
    The data consists of one line containing global stats, followed by
    128 lines of tab separated timestamps in nanosecond.
    
    The first line currently contains the refresh period in nanosecond.
    Each 128 following line contains 3 timestamps, of respectively
    the app draw time, the vsync timestamp just prior the call to set and
    the timestamp of the call to set.
    
    Change-Id: Ib6b6da1d7e2e6ba49c282bdbc0b56a7dc203343a
    fix a bug with vsync management
    
    this bug was introduced recently. we were signaling *all* clients
    regardless of the vsync rate.
    
    Change-Id: I2ae8a6c820a390f602382596ba75e8ed737fb2ef
    Fix an issue with VSYNC
    
    one-shot VSYNC listeners could miss a VSYNC event if
    scheduled while in waitForVsync().
    
    Change-Id: I720485784aecfea6cc7a23c77081d7af3c9c71db
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: Ib08fe86d23db91ee153e9f91a99a35c42b9208ea
    Improve the VSYNC api a bit.
    
    - add the ability to set the vsync delivery rate, when the rate is
    set to N>1 (ie: receive every N vsync), SF process' is woken up for
    all of vsync, but clients only see the every N events.
    
    - add the concept of one-shot vsync events, with a call-back
    to request the next one. currently the call-back is a binder IPC.
    
    Change-Id: I09f71df0b0ba0d88ed997645e2e2497d553c9a1b
    fix a deadlock when removing a DisplayEventConnection
    
    the deadlock would happen when the pipe became invalid and SF
    trying to remove the connection from its list.
    
    we know make sure to process events without holding a lock.
    
    Change-Id: I39927ed8824fc7811e16db3c7608a2ebc72d9642
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    Adding render stats APIs to UiAutomation (framework native).
    
    bug:12927198
    
    Change-Id: Ibb1c07f7d89e11281e5c1f27f412a29ac6f9c4ab
    SurfaceFlinger now runs in the process's main thread
    
    it used to spawn its own thread and return the main thread
    to the binder thread pool -- this was confusing the naming
    of things in the kernel.
    
    Bug: 10331839
    
    Change-Id: I2d13a6d73409a38109300fcbe6a04b4c41cb5d00
    get rid of ISurface
    
    ISurface was only used to get the IGraphicBufferProducer from
    a Layer. It's now replaced by a BBinder subclass / IBinder and
    is only used as a handle to the surface, to both refer to it
    and manage its life-time.
    
    Also cleaned-up a bit the ISurfaceComposer interface and
    "create layer" code path.
    
    Change-Id: I68d0e02d57b862cffb31d5168c3bc10cea0906eb
    Get rid of LayerBase.
    
    The functionality of LayerBase and Layer is folded
    into Layer. There wasn't a need for this abstraction
    anymore.
    
    Change-Id: I66511c08cc3d89009ba4deabf47e26cd4cfeaefb
    fold LayerBaseClient into LayerBase
    
    Change-Id: Ic745136522df59c42f0885fd969e75ea55d09f01
    get rid of Surface identity and token
    
    we use the IBinder instead.
    
    Change-Id: I4aa0b58869ba43f19980013620051e5a261b062d
    Eradicate DisplayID.
    
    DisplayDevices are now keyed of the wp<IBinder> the client uses.
    DisplayID has now become DisplayType which is just used to identify
    physical displays (as opposed to virtual displays such as wifi displays).
    
    Change-Id: I0c5968f2c902dcd699a7e0afacf833ff070c12ea
    Banish DisplayID from the SurfaceFlinger API.
    
    Use only display tokens in the API to refer to new displays.
    
    Don't require the caller to specify the display when creating
    a surface (since in general a surface could be shown on
    any display).
    
    This is intended to be a minimum change just to update the API.
    Note that SurfaceFlinger still uses DisplayID in a few places
    internally that might cause some features not to work properly
    when there are multiple displays (LayerScreenshot, for example).
    
    Change-Id: I3d91eec2da406eefd97bcd53655d403ad865a7e6
    SurfaceFlinger cleanup
    
    mostly refactored SurfaceFlinger.h, but also removed dead code.
    cleaned-up a few includes as well.
    
    Change-Id: Ib15f4ffe567912b61ee98aa076c6a283b72811b5
    split-up Client.h out of SurfaceFlinger.h
    
    Change-Id: I1993bf23e417163749d886283563a93d50b361b4
    surfaceflinger: don't close fence fds after passing to queueBuffer
    
    ANativeWindow::queueBuffer takes ownership of the fence fd passed to
    it, and will close it before returning. SurfaceFlinger's screenshot
    code was also closing the syncFd it passed to queueBuffer. Most of the
    time this meant the second close() silently failed, but in a rare race
    condition the file descriptor could be reused between the two
    close()s.
    
    Bug: 17946343
    Change-Id: Ib74fcb1dce52cc21328059c99b7c4c76f41aa3a5
    When eglMakeCurrent fails we need to fix the egl state.
    
    Bug: 16676660
    
    Change-Id: Ie7bee9c78378b9e9206060444319e6ee35e1ab74
    surfaceflinger: add getDisplayStats() method
    
    This is used by media service to schedule video frames at the
    proper time, based on precise vsync timings.
    
    Bug: 14659809
    Change-Id: I1a90603f3dc09dca9aa4f90a3aa845fab56e0a5e
    Add rotation to surfaceflingers screen cap.
    
    + This is needed so that activity manager does not
      have to do cpu side rotations when capturing recents
      thumbnails.
    
    Change-Id: If998008e675ad01305db8399fd643cf4608b7025
    surfaceflinger: skip composition for empty frames
    
    By not committing the results of composition for empty frames, we
    avoid spitting out series of black frames for virtual displays that
    don't have visible layers. We still draw one black frame when going
    from having layers to not having any. In particular, this avoids
    having a series of empty frames due to re-compositing the primary
    display in the period between creating the virtual display and adding
    layers to it.
    
    Bug: 16786752
    Change-Id: I7e9b2ed2e407d8d49c7af736b447d4c6181b0ad8
    Take advantage of sync points during screen cap.
    
    Do not wait for the screen capture to complete within surface flinger,
    instead pass a sync point back with the captured gralloc buffer.
    
    Change-Id: I7137c0e0fc710688d1d61f189159418fb27ea263
    Add error for format and make sure setActiveConfig fails with an invalid mode.
    
    Change-Id: Iacdb5cbad125787f96c64c88d432fc541c4cad1a
    Allow for resizing of Virtual Displays.
    
    Modify SurfaceFlinger to use VirtualDisplaySurface in all cases when a virtual
    display is used. Add functionality in VirtualDisplaySurface to resize the
    buffers aquired in the QueueBufferOutput. Add transaction support in
    SurfaceFlinger for resize. Add the modification of the size in DisplayDevice.
    
    Change-Id: Iae7e3556dc06fd18d470adbbd76f7255f6e6dd6b
    Tested: None
    SurfaceFlinger: Prevent deadlock by updating an atomic layer set.
    
    Bug: 12934849
    
    Change-Id: I9dede7316f1e967de4140bd731ac810115ea302f
    Build fix for size_t on 64bit.
    
    Change-Id: Ic16895b30d78ba8a635b709adbae31a590501b20
    Modified SurfaceFlinger to implment setActiveConfig and getActiveConfig.
    
    This can be used to change the current display mode of the device.
    
    Change-Id: Icdc3fb58389b861dc77b68102083da6f7a96eccb
    Tested: None
    (cherry picked from commit 2651fa94635a96d653038fb389a0dd827338f8d3)
    Turn on support for async cursor update in surfaceflinger.
    
    If available, surfaceflinger will use the hwc setCursorPositionAsync()
    api to change the position of supported cursor layers outside of
    the usual prepare/set loop.
    
    Change-Id: Ib3fc5c0c390b3489ddbba202379840a1d2748917
    Improve memory coherence management in screenshot code [DO NOT MERGE]
    
    The existing code worked in practice, but wasn't quite correct in
    theory and relied on implementation details of other code. It's still
    somewhat unusual and subtle, but now is correct-in-theory (I believe)
    and a little better documented.
    
    Bug: 16044767
    Change-Id: I22b01d6640f0b7beca7cbfc74981795a3218b064
    (cherry picked from commit c61576794e75898a829eac52fc524c8e907b4b02)
    Compile libsurfaceflinger with Clang and -std=c++11 [DO NOT MERGE]
    
    This is necessary to use C11/C++11 stdlib atomics, which the next
    change will do. This change also fixes a couple bits of syntax that
    both GCC and Clang refuse to compile in -std=c++11 mode.
    
    Change-Id: Ia14d9d6b537a3bb106c23e19a277e48be180754c
    Add two new display info fields
    
    This adds SurfaceFlinger's app VSYNC offset and buffer deadline
    values to DisplayInfo.
    
    Bug 14612039
    
    Change-Id: Ie0ab21d388fe2764f2b6f71bd1cefa33dc861a73
    SurfaceFlinger: Fix rect out-of-bounds checks
    
    Rects' right and bottom edges are treated as exclusive, so when
    checking against maximum width and height, we should use > instead
    of >=.
    
    Change-Id: Ifcdf6813c13fcab1a55f16c21064e765e93d49f0
    Enable support RGBX_8888 for omap3
    
    Bug: 14995811
    Change-Id: Iaeb5a5ad0e3bcf215613f24f2570ae0d8267c016
    Replace "lower power mode" experiment
    
    This replaces the previous low-power mode experiment, which
    discarded refresh events, with a new experiment that alters
    the refresh period.
    
    (see also I2849e5ea335c0d2509fea1c315392bce7f20451d )
    
    The feature is enabled by specifying a nonzero value for the
    "refresh skip count", which indicates the number of periods
    to skip.  For example, the command:
    
      adb shell service call SurfaceFlinger 1016 i32 1
    
    sets a skip count of '1', yielding a 30Hz refresh rate on a device
    with a 60Hz display.  Changing the last value to '2' would set the
    refresh to 20Hz.  '0' returns to the default behavior.
    
    Bug 15523257
    
    Change-Id: I00039c22a55750e74035644c63800e4bee1c774a
    DO NOT MERGE - Replace "lower power mode" experiment
    
    This replaces the previous low-power mode experiment, which
    discarded refresh events, with a new experiment that alters
    the refresh period.
    
    (see also I2849e5ea335c0d2509fea1c315392bce7f20451d )
    
    The feature is enabled by specifying a nonzero value for the
    "refresh skip count", which indicates the number of periods
    to skip.  For example, the command:
    
      adb shell service call SurfaceFlinger 1016 i32 1
    
    sets a skip count of '1', yielding a 30Hz refresh rate on a device
    with a 60Hz display.  Changing the last value to '2' would set the
    refresh to 20Hz.  '0' returns to the default behavior.
    
    Bug 15523257
    
    (cherry-pick from master I00039c22a55750e74035644c63800e4bee1c774a)
    
    Change-Id: I9ef5539fa7da953dd97f88e7fa39be0dc20b6889
    DO NOT MERGE - Disable DispSync resync when not needed
    
    If app and SF events aren't using phase offsets, we don't need
    to maintain the DispSync model.  We just turn hardware VSYNC on
    whenever something wants to draw.  This avoids some edge cases
    where we were doing too much resync work.
    
    Also, updated the systrace output.  The "VsyncOn" line was a
    combination of SF and app event threads, and would occasionally
    be very weird.  Removed VsyncOn, renamed VSYNC to VSYNC-app,
    and added VSYNC-sf.
    
    Also, added more details to the --dispsync dumpsys output.
    
    Also, renamed global constants to not look like local variables.
    
    Bug 15516453
    
    (cherry-pick from master I0da10b72f0d9a7b7eb5202d87cc18967f698adbd)
    
    Change-Id: I7d6fa96f1df48f0b3abcc4b39c5dcfee88199eb6
    Disable DispSync resync when not needed
    
    If app and SF events aren't using phase offsets, we don't need
    to maintain the DispSync model.  We just turn hardware VSYNC on
    whenever something wants to draw.  This avoids some edge cases
    where we were doing too much resync work.
    
    Also, updated the systrace output.  The "VsyncOn" line was a
    combination of SF and app event threads, and would occasionally
    be very weird.  Removed VsyncOn, renamed VSYNC to VSYNC-app,
    and added VSYNC-sf.
    
    Also, added more details to the --dispsync dumpsys output.
    
    Also, renamed global constants to not look like local variables.
    
    Bug 15516453
    
    Change-Id: I0da10b72f0d9a7b7eb5202d87cc18967f698adbd
    surfaceflinger: Replace blank/unblank with setPowerMode
    
    We replace the blank/unblank calls in surfaceFlinger with a more generic
    setPowerMode() routine.
    
    Some displays support different power modes (for example, with reduced
    color palettes). Depending on the use case we should be able to toggle
    these modes, so as to achieve incremental power savings.
    
    Initially, three power modes will be supported:
    - HWC_POWER_MODE_OFF
    - HWC_POWER_MODE_DOZE
    - HWC_POWER_MODE_NORMAL
    
    HWC_POWER_MODE_OFF will correspond to blanking the display, while
    HWC_POWER_MODE_NORMAL will correspond to unblanking. HWC_POWER_MODE_DOZE
    will put the display into a low power setting, if it is supported in
    hardware.
    
    If such a low power mode is not supported, it should be treated as a
    call to set the mode to HWC_POWER_MODE_NORMAL.
    
    As a consequence of adding the mPowerMode field, the mScreenAcquired is
    no longer required, and thus references to it are removed and replaced
    equivalent references to mPowerMode.
    
    We also add the glue code to connect the services invocation of setting
    a power mode and the HAL implementation in HWComposer.
    
    Bug: 13472578
    Change-Id: I431595ecf16d2f2c94259272db3dd42f29636204
    Signed-off-by: Prashant Malani <pmalani@google.com>
    SurfaceFlinger: Add sourceCrop to screenshot
    
    Adds a sourceCrop Rect parameter to screenshot commands, which allows
    clients to capture only a portion of the screen instead of the whole
    screen.
    
    Bug: 15137922
    Change-Id: I629447573cd34ffb96334cde7ba02490b9ea06d8
    DO NOT MERGE Add "dumpsys SurfaceFlinger --dispsync"
    
    Dumps the current DispSync state.
    
    Bug 14651879
    
    (this is a near-cherrypick of Ide4e6dbd58b117bc1a6b97b57d10cd92ec86dc84)
    
    Change-Id: I6e6c8452ede5c2d5098db1b884d28226e77d9a03
    Add "dumpsys SurfaceFlinger --dispsync"
    
    Dumps the current DispSync state.
    
    Bug 14651879
    
    Change-Id: Ide4e6dbd58b117bc1a6b97b57d10cd92ec86dc84
    Enable changing display configuration
    
    This allows querying and switching display device configurations
    through the ISurfaceComposer/SurfaceComposerClient interface.
    
    Bug: 14320401
    Change-Id: I8c22165698950e5da32204c1c4da92122f91a715
    Improve SurfaceFlinger PTS estimation
    
    Get the next refresh time from DispSync instead of guessing based
    on the current time.
    
    Change-Id: I8dc72a3217bfd4e9b4c905034194d1a298cad69a
    SurfaceFlinger: Adds the functionality to reduce refresh rate to half of
    the default.
    
    Feature added for the low power mode.
    
    Change-Id: I2849e5ea335c0d2509fea1c315392bce7f20451d
    Signed-off-by: Ruchi Kandoi <kandoiruchi@google.com>
    Fix virtual display nesting
    
    This fixes the cycling rendering loop caused by nesting virtual
    displays by preventing them from recomposing if their contents
    haven't changed.
    
    (cherry-pick from master I600365c0fd5d3ad93e04295d26cf9de177ffc79b)
    
    Bug: 12101046
    Change-Id: I6182993d53537781aedb522f97a50f06eed8b80f
    Adding render stats APIs to UiAutomation (framework native).
    
    bug:12927198
    
    Change-Id: Ibb1c07f7d89e11281e5c1f27f412a29ac6f9c4ab
    GraphicProducerWrapper may return false transact status
    
    GraphicProducerWrapper(GPW) changed how the methods of
    BpGraphicBufferProducer(BpGBP) are executed.
    First, "fake" BpGBP is created. Its remote is GPW. The GPW has
    wrapped the real BpGBP.
    All the method calls to the fake BpGPB will be intercepted by
    the GPW inside it when the methods run into remote()->transact().
    Then the GPW will invoke the transact() of the real BpGBP. And
    Everything runs well except that the GPW forgets to store the
    transact status and always return NO_ERROR to the fake BpGBP.
    
    It would be disastrous if the binder call of the IGBP failed and
    the out parameter "reply" of transact() was in unkown state.
    E.g. the queueBuffer() in the fake BpGBP will try to operate on
    the "reply". This will crash the SurfaceFlinger.
    
    Change-Id: I01b31f64e1fc92804da3f16c1fb1420dcfb3b855
    Signed-off-by: bdeng3X <bingx.deng@intel.com>
    Signed-off-by: Guobin Zhang <guobin.zhang@intel.com>
    Remove deprecated BufferQueue constructor
    
    Bug: 13415624
    Change-Id: I9fe15e45daa7351f1db34ee75bfee6f19cb347d3
    Revert "Implement video plane layer"
    
    This reverts commit f837c93a1b392dbc4f7099d0c4fb723e32ca438e.
    
    Change-Id: I6a1aa9ad0aca023267dc53d19c950b1535123ca7
    SurfaceFlinger: fix 64-bit format string warnings
    
    Change-Id: Idacfbf0601743fba1c5de7632201a66a307a2710
    Signed-off-by: Greg Hackmann <ghackmann@google.com>
    Implement video plane layer
    
    Binding with video source will follow.
    
    Change-Id: Ic14e9757f5b61f4055cbeda47c1bafae0a621abb
    Allow "opaque" flag to be updated. DO NOT MERGE
    
    Moves the "opaque layer" from Layer to Layer::State.  This allows
    it to be updated as part of a transaction.
    
    Bug 12387406
    
    Change-Id: I0a114ce6adf77cd12fb08f96e0691b76c475768d
    Allow disabling layer rotation during screenshots
    
    Add the ability to ignore layers' transformation matrices during
    screenshot capture, which will allow the window manager to capture
    unrotated images for recents during the device rotation animation.
    
    Bug: 11805195
    Change-Id: I854d87bc84ca06ef9a054a454af1c080ee66fbb8
    Fix virtual display nesting
    
    This fixes the cycling rendering loop caused by nesting virtual
    displays by preventing them from recomposing if their contents
    haven't changed.
    
    Bug: 12101046
    Change-Id: I600365c0fd5d3ad93e04295d26cf9de177ffc79b
    Allow "opaque" flag to be updated
    
    Moves the "opaque layer" from Layer to Layer::State.  This allows
    it to be updated as part of a transaction.
    
    Bug 12387406
    
    Change-Id: I0a114ce6adf77cd12fb08f96e0691b76c475768d
    Implement per-display EGLConfig and configless EGLContext
    
    Bug: 12230666
    Change-Id: Icca608b108cbdcab9cf01a9236d8cdbda000a836
    Signed-off-by: Jesse Hall <jessehall@google.com>
    Move EGLConfig selection to RenderEngine
    
    Bug: 12230666
    Change-Id: I8d1111a7e0fd9d9e2525e6a80da8ce46d7dd085d
    Signed-off-by: Jesse Hall <jessehall@google.com>
    SurfaceFlinger: give SF its own vsync phase
    
    This change allows SurfaceFlinger to run at a different vsync phase offset from
    that used by external listeners.
    
    Bug: 11175503
    Change-Id: I561c53a5659fa6dc1e3e4ae30340f3c1a6adceb4
    SurfaceFlinger: Add EventControlThread
    
    This change adds a new thread for calling HWComposer's eventControl
    asynchronously.  The DispSync-based vsync approach ends up enabling and
    disabling HWComposer's vsync callbacks at arbitrary times, and some HWComposer
    implementations do not have these calls optimized.
    
    Bug: 11175503
    Change-Id: I719be82bd200b391c61d40863b991c7b59acdfd6
    Disable hardware vsync when blanking the screen
    
    Bug: 11220224
    Change-Id: I99d0a42e1a6bb0aaf89706f6d100e9ef2a5deaa4
    Fix blank / partial screenshots
    
    The screen capture code wasn't waiting for the render to finish,
    so sometimes you'd see an empty or partial image.
    
    Bug 11131777
    
    Change-Id: Ic64087322ce3bb15bb5f4fb1eb07579880fe6197
    Fix blank / partial screenshots
    
    The screen capture code wasn't waiting for the render to finish,
    so sometimes you'd see an empty or partial image.
    
    Bug 11131777
    
    Change-Id: Ic64087322ce3bb15bb5f4fb1eb07579880fe6197
    SurfaceFlinger: SW-based vsync events
    
    This change adds the DispSync class, which models the hardware vsync event
    times to allow vsync event callbacks to be done at an arbitrary phase offset
    from the hardware vsync.  This can be used to reduce the minimum latency from
    Choreographer wake-up to on-screen image presentation.
    
    Bug: 10624956
    Change-Id: I8c7a54ceacaa4d709726ed97b0dcae4093a7bdcf
    Simplify color adjustment using homogeneous coordinates
    
    Change-Id: Ie31abacb134c29d82a6041fa7d521f68a1a273af
    only clear FB when asked for the opaque layer
    
    a layer need to be considered NOT opaque if it has a
    plane-alpha.
    
    Bug: 10846930
    Change-Id: Ibd8981b63ede4560c7096bacc4cff46a7eb2a8bb
    Treat composition frames with no layers as using GLES composition
    
    When there are no window layers for a display, SurfaceFlinger clears
    the undefined region using GLES. Some of the places that check for
    GLES composition weren't considering this special case, in particular:
    
    - We were skipping the eglSwapBuffers() on these frames.
    - We were putting VirtualDisplaySurface in HWC-only composition mode.
    
    This change centralizes the logic for this special case.
    
    Bug: 10957068
    Change-Id: I2deaf2ed101e8ea76708862a6bb67751b6078794
    only clear FB when asked for the opaque layer
    
    a layer need to be considered NOT opaque if it has a
    plane-alpha.
    
    Bug: 10846930
    Change-Id: Ibd8981b63ede4560c7096bacc4cff46a7eb2a8bb
    Treat composition frames with no layers as using GLES composition
    
    When there are no window layers for a display, SurfaceFlinger clears
    the undefined region using GLES. Some of the places that check for
    GLES composition weren't considering this special case, in particular:
    
    - We were skipping the eglSwapBuffers() on these frames.
    - We were putting VirtualDisplaySurface in HWC-only composition mode.
    
    This change centralizes the logic for this special case.
    
    Bug: 10957068
    Change-Id: I2deaf2ed101e8ea76708862a6bb67751b6078794
    Fix two EGLConfig selection bugs
    
    This fixes two bugs introduced by
      Change-Id: Ia8cc084c02a0e3de910def024da8a08d02bbd89d
    
    (a) There is no invalid EGLConfig value, in particular zero is valid.
        Checking return values of eglGetConfigs and eglChooseConfig is the
        only way to determine success.
    (b) The "simple" EGLConfig query used as the emulator fallback should
        not include EGL_RECORDABLE; the emulator doesn't have it.
    
    Bug: 10935622
    Change-Id: Ib798a24e7cf06a679811c46eaa45d39174a715ec
    Fix two EGLConfig selection bugs
    
    This fixes two bugs introduced by
      Change-Id: Ia8cc084c02a0e3de910def024da8a08d02bbd89d
    
    (a) There is no invalid EGLConfig value, in particular zero is valid.
        Checking return values of eglGetConfigs and eglChooseConfig is the
        only way to determine success.
    (b) The "simple" EGLConfig query used as the emulator fallback should
        not include EGL_RECORDABLE; the emulator doesn't have it.
    
    Bug: 10935622
    Change-Id: Ib798a24e7cf06a679811c46eaa45d39174a715ec
    fix crashers with wifi/virtual displays
    
    Bug: 10647742
    Change-Id: I4b8ed9da52ef95af3a3b3a04b98514a3776a674d
    fix crashers with wifi/virtual displays
    
    Bug: 10647742
    Change-Id: I4b8ed9da52ef95af3a3b3a04b98514a3776a674d
    reinstate black-screenshot debugging code
    
    turned off by default.
    
    Bug: 10809349
    Change-Id: I3e6b8c7860e6b0e122b8f07de4020967cd1f005c
    Fix GLES context version selection
    
    Explicitly selects an ES 2.0 config first, then an ES 1.x config,
    before attempting the fallback path for the emulator.
    
    Bug: 10820214
    Change-Id: Ia8cc084c02a0e3de910def024da8a08d02bbd89d
    Stop using default value for Surface producerControlledByApp parameter
    
    Bug: 10785749
    Change-Id: Ifbf9340e5eabe621a69e990ec3e05ac51f8db66a
    Add API for pushing color transforms to SurfaceFlinger
    
    BUG: 9057596
    Change-Id: Iea0953366eac875b7968897a75472c25a137edb5
    color blindness enhancement
    
    This is an attempt at improving the experience of
    users with color vision impairement.
    
    At this time this feature can only be enabled for
    debugging:
    
      adb shell service call SurfaceFlinger 1014 i32 PARAM
    
      with PARAM:
       0 : disabled
       1 : protanomaly/protanopia simulation
       2 : deuteranomaly/deuteranopia simulation
       3 : tritanopia/tritanomaly simulation
      11, 12, 13: same as above w/ attempted correction/enhancement
    
    The enhancement algorithm tries to spread the "error"
    such that tones that would otherwise appear similar can be
    distinguished.
    
    Bug: 9465644
    
    Change-Id: I860f7eed0cb81f54ef9cf24ad78155b6395ade48
    reset the gl viewport at each frame for each display
    
    Bug: 10097128, 9506003
    Change-Id: Ie0403a631e339a9134216224f3366f46ece58b53
    make sure SF initialization is ran at target priority and correct thread group
    
    SF can spawn threads (indirectly) during initialization
    and we want those to be spawned at URGENT_DISPLAY_PRIORITY
    (in theory they should set their own, but some code lives
    in vendor libraries and doesn't).
    
    Bug: 10430209
    Change-Id: I5b3a8f979297de287614c8eafd8267bef1176e4b
    screenshot layers wouldn't work in some cases
    
    specifically when the display size and the screenshot window
    size didn't match, the buffer would be rejected.
    We simply fix this by setting the scalling mode to
    "SCALE_TO_WINDOW".
    
    Bug: 9992306
    Change-Id: Ib821767899af330bb70d3cbbfa7d41b02794a075
    Provide HWC prepare with a valid output buffer
    
    We weren't dequeing and setting the output buffer until just before
    set(). This didn't allow HWC to make decisions in prepare() based on
    the output buffer format, dimensions, etc.
    
    Now we dequeue the output buffer at the beginning of the composition
    loop and provide it to HWC in prepare. In GLES-only rendering, we may
    have to cancel the buffer and acquire a new one if GLES requests a
    buffer with properties different than the one we already dequeued.
    
    Bug: 10365313
    Change-Id: I96b4b0a851920e4334ef05080d58097d46467ab8
    SurfaceFlinger now runs in the process's main thread
    
    it used to spawn its own thread and return the main thread
    to the binder thread pool -- this was confusing the naming
    of things in the kernel.
    
    Bug: 10331839
    
    Change-Id: I2d13a6d73409a38109300fcbe6a04b4c41cb5d00
    Use new HWC display type/count constants.
    
    Change-Id: I774d0c68906ac6dc69268f708c30a6b0868b8816
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    allow "system" screenshots even when the secure flag is set
    
    we need too allow this case so that things like the rotation
    animation can work.
    with this change we only permit these screenshot if the
    destination is SurfaceFlinger itself.
    
    Bug: 10235036
    Change-Id: I66fea5391e52b0d7f17f25827572b236f2d9eb71
    make sure we have a context when creating the 1st surface
    
    also add an option to dump the stack trace when
    calling a GL function without a context.
    
    Change-Id: I57b72bb8c322ac4253c3077bf150621bd9863b69
    Add ISurfaceComposer::destroyDisplay
    
    Bug: 10191053
    Change-Id: Ia89286f95421344a60ffedaaca5825c4e3cd7f9e
    remove support for glReadPixels screenshot path
    
    this was only needed on some chipset we're not
    supporting in KLP.
    
    Change-Id: I2e8fc07f135030bd61d2e241a8e426f1a4316425
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    fix a possible deadlock when removing a layer and destroying a client
    
    generally the last reference to a Layer is released in commitTransaction()
    with mStateLock held. Layer itself only holds weak references to Client,
    however, ~Layer() briefly promotes this weak reference -- during that time
    the all other strong references to that Client go away, ~Layer is left with
    the last one... then hell breaks loose as ~Client is called, which in turn
    needs to acquire mStateLock.
    
    We fix this by holding a temporary copy of the drawing state during
    the transaction so that the side-effects of copying the current
    state into the drawing state are seen only after mStateLock has
    been released.
    
    Bug: 9106453
    Change-Id: Ic5348ac12283500ead87286a37565e8da35f1db2
    SurfaceFlinger: Set the result of binderized screencapture
    
    A recent change to screencapture to have the call to
    IGraphicBufferProducer happen on the incoming binder
    thread didn't set the result so the result was always
    returned as NO_ERROR.
    
    This made screencap fail on some devices (e.g. Wolfie)
    which relies on some kind of fallback mechanism to
    generate the screencap but the fallback mechanism
    doesn't get triggered because the error isn't returned.
    
    Bug: 9989385
    
    Change-Id: I2aee91ea1034869fcbb0f49b9a0087c3cff43bbe
    Signed-off-by: Mike J. Chen <mjchen@google.com>
    get rid of PixelFormatInfo and simplify things
    
    Change-Id: I025a362cc12d5b9b794fac14be500e25aab65396
    surfaceflinger: add frame duration logging
    
    Change-Id: Ib414a45e7e191f23a2726cbbbeb606e9ce68a3b5
    Rewrite VirtualDisplaySurface
    
    The previous implementation assumed that the HWC could read and write
    the same buffer on frames that involved both GLES and HWC composition.
    It turns out some hardware can't do this. The new implementation
    maintains a scratch buffer pool to use on these mixed frames, but on
    GLES-only or HWC-only frames still does composition directly into the
    output buffer.
    
    Bug: 8384764
    Change-Id: I7a3addb34fad9bfcbdabbb8b635083e10223df69
    fix a bug where surfaceflinger and system_server could deadlock
    
        because surfaceflinger handles screenshot in a different
        thread from the binder thread that requested it and because
        the IGraphicBufferProducer is a synchronous interface
        calling back into the system server; it is possible for
        the latter to run out of binder threads (b/c it holds
        a lock while calling into SF).
    
        The solution is to make sure all calls on IGraphicBufferProducer
        happen on the incoming binder thread. We achieve this by creating
        a IGBP wrapper which is given to the screenshot code.
    
        Bug: 8734824
    
    Change-Id: I2be85660d9dc65d239d68f6d3ab3c973c13b34cc
    Debug code for detecting all black pixels screenshots
    
    Bug: 9120292
    Change-Id: If60db32524db973bb1f905ba3cb415c2a1cd7e71
    Refactor SF. Move all GL operations in their own class.
    
    this is the first step to add support for GLES 2.x, this
    change breaks the dependency of SF on GLES 1.x by moving
    all operation into their own class.
    
    Bug: 8679321
    
    Change-Id: I0d2741eca2cefe67dfd9cf837cac10c4d126928b
    clean-up SurfaceFlinger a bit
    
    - most methods on Layer didn't need to be virtual
    - more consistency in naming drawing/current state
    
    Change-Id: Ieb7b4951b40fc673b807994ed21ae4aea7281068
    fix a possible deadlock when removing a layer and destroying a client
    
    generally the last reference to a Layer is released in commitTransaction()
    with mStateLock held. Layer itself only holds weak references to Client,
    however, ~Layer() briefly promotes this weak reference -- during that time
    the all other strong references to that Client go away, ~Layer is left with
    the last one... then hell breaks loose as ~Client is called, which in turn
    needs to acquire mStateLock.
    
    We fix this by holding a temporary copy of the drawing state during
    the transaction so that the side-effects of copying the current
    state into the drawing state are seen only after mStateLock has
    been released.
    
    Bug: 9106453
    Change-Id: Ic5348ac12283500ead87286a37565e8da35f1db2
    Prevent opaque windows from making framebuffer translucent
    
    To keep the code readable now that we have four different texenv
    configurations, this change separates the decisions about what
    configuration to use from the GL calls to set up the configuration.
    
    Bug: 8963244
    Change-Id: Ia07a306a7809ba8f93493d0160ccbd509e948581
    [DO NOT MERGE] fix a bug where surfaceflinger and system_server could deadlock
    
    because surfaceflinger handles screenshot in a different
    thread from the binder thread that requested it and because
    the IGraphicBufferProducer is a synchronous interface
    calling back into the system server; it is possible for
    the latter to run out of binder threads (b/c it holds
    a lock while calling into SF).
    
    The solution is to make sure all calls on IGraphicBufferProducer
    happen on the incoming binder thread. We achieve this by creating
    a IGBP wrapper which is given to the screenshot code.
    
    Bug: 8734824
    Change-Id: Ife2441c7322e51ecfb20e0df03dacf6bce49578e
    Abort surface composition if hw surface is invalid
    
    If an invalid display device is detected during surface composition
    (e.g., a simulated secondary display is removed), abort the
    composition.
    
    Change-Id: Ia6afb2e287882d8ae0614eb25463d3f85b687adf
    use a Framebuffer Object to render all screenshots
    
    this allows us to render into a buffer with a
    pixelformat of our own choice; this is much faster
    on all platform.
    
    Bug: 8582615
    Change-Id: I61298fc8e43fa6f92044c5123955cb5c7897dab7
    Add a --color option to dumpsys SurfaceFlinger
    
    colorize a bit the output of dumpsys SurfaceFlinger to
    make it easier to read. Right now it will bold the
    title of each section and use green for the name of
    each layer.
    
    Change-Id: I0d9f18d115401cb45109d244ef3a278481f68cc6
    clean-up/simplify all dump() APIs
    
    remove the scratch buffer parameter and use
    String8::appendFormat() instead.
    
    Change-Id: Ib96c91617c8e7292de87433d15cf6232b7d591b0
    allow dumpsys SurfaceFlinger in user builds from the shell user
    
    Bug: 8659013
    Change-Id: I1de43bb5808cb8c1103cfc73dca59ff70fc13f91
    Improve screenshot performance on some devices (DO NOT MERGE)
    
    this affects devices that need a glReadPixels(). We use
    a FBO instead of a GlConsumer as an intermediate render target, this
    saves 2 calls to eglMakeCurrent().
    
    On Galaxy Nexus this allows us to go from ~135ms to ~35ms for
    recent's screenshots.
    
    Bug: 8582615
    Change-Id: I6b25291ecc235f1927579bbb2db3c731e985c6e8
    Improve screenshot performance on some devices (DO NOT MERGE)
    
    this affects devices that need a glReadPixels(). We use
    a FBO instead of a GlConsumer as an intermediate render target, this
    saves 2 calls to eglMakeCurrent().
    
    On Galaxy Nexus this allows us to go from ~135ms to ~35ms for
    recent's screenshots.
    
    Bug: 8582615
    Change-Id: I6b25291ecc235f1927579bbb2db3c731e985c6e8
    DO NOT MERGE Make sure surfaces always have latest orientation info
    
    When the screen is turned off, the current stack is set to -1. This causes
    logic in iSurfaceFlinger's handleTransactionLocked() function to fail to
    match the current stack, and the latest orientation is not set into the
    layer. This causes BufferQueue, later, to potentially set an obsolete
    transformHint on a created surface (such as in the case with ImageWallpaper's
    Egl surface, in the bug below).
    
    The fix is to note this situation and use a default value for the DisplayDevice,
    which should have the current orientation information.
    
    Issue #8508397 ImageWallpaper sometimes rendered in wrong orientation causing a ~30-40% drop in graphics performance
    
    Change-Id: Ibae15d73b289a8343c67f4f6bb77fdf11dd95ee7
    fix another bug where screenshots could end-up all black
    
    SF transactions were always handled on VSYNC which allowed
    the screenshot to sneak-in between closing the transaction
    and vsync (before it's latched), resulting in a screenshot
    with the previous state.
    
    we now always force transactions to happen immediately
    before screenhots.
    
    Bug: 7552304
    Change-Id: I0afc86b7e8366173daff5b9988bbb4d2a0f43860
    Tell HWComposer the dimensions of virtual displays
    
    HWComposer queries the HWC for dimensions of physical displays, but
    can't do that for virtual displays. The dimensions are used to set the
    display frame of the framebuffer target layer passed to HWC, and
    implicitly the dimensions of the virtual display.
    
    Bug: 8316155
    Change-Id: I9cbd2530d2fa878f86128a1472def520b5d694a5
    latch transparent region hint only when we get a new frame
    
    since the transparent region hint really depends on the
    content of the window containing the SurfaceView
    (it's calculated by the view hierarchy based on
    overlapping views), it makes sense to latch it only when
    the content of the window (the app) changes.
    
    This should help fixing drawing artifacts when changing the
    layout of a window containing a SurfaceView.
    
    Bug: 8511430
    Change-Id: Ic3aa668495293cb4d82a2cd7dcf3b6a337287678
    don't use compile-time configuration of libgui as much as possible
    
    We now detect at runtime which sync features to use, which
    allows us to remove a lot of the compile-time configuration
    options. There  is still one option though, to disable
    KHR_fence_sync on some devices (which are more efficient
    without it).
    
    - added a backdoor to get the vendor's EGL strings
    
    the new logic is:
    - use always ANDROID_native_fence_sync if available
    - fallback to KHR_fence_sync if available and not disabled
      by the compile-time option
    - use KHR_wait_sync if available and either of the above is
      enabled
    
    Change-Id: I9c4b49d9ff1151faf902cc93bd53ea5f205aaabf
    Clean up HWC state when releasing a DisplayDevice
    
    DisplayDevices can be released when DisplayManager removes them from
    the display list, or (for virtual displays) when the surface is set to
    NULL. We were only cleaning up HWC resources associated with the
    display in the first case.
    
    Bug: 8384764
    Change-Id: Id3d226dd7178fbe6d0a2ac4e2660b864ee073de3
    Fix virtual displays for HWC<=1.1
    
    If we're using a HWC that doesn't support virtual displays, or we have
    more virtual displays than HWC supports concurrently, the
    VirtualDisplaySurface should simply be a passthrough from source
    (GLES) to sink.
    
    This change also tries to distinguish between display types and HWC
    display IDs a little better, though there's more to do here. Probably
    needs a higher-level rethink; it's too error-prone now.
    
    Bug: 8446838
    Change-Id: I708d2cf262ec30177042304f174ca5b8da701df1
    Fix dump when virtual display exists
    
    SurfaceFlinger::getLayerSortedByZForHwcDisplay only worked for builtin
    displays.
    
    Bug: 8384764
    Change-Id: I989275407fb2f06d166a6e70321c3211e27e562e
    make sure screenshot are in a format supported by Bitmap.java
    
    Change-Id: I0fb9cc4088f9c1fd27e6c017b0a7c5617adb4660
    fix a typo that broke all screenshots
    
    Bug: 8450197
    
    Change-Id: I5b986cc0ff9c5e689d06a51ba68ab537d03d1f3d
    only use glReadPixels() when needed when taking screenshots
    
    some drivers don't support this yet, so we use a system
    property to enable the glReadPixels "workaround" for them:
    
      ro.bq.gpu_to_cpu_unsupported=1
    
    Change-Id: I74d6a3a8f0cee8d5a507b72c760cf247e39195e0
    rework how we take screenshots for a CPU consumer
    
    We're not using IMemoryHeap as a transport anymore,
    instead we're providing a CpuConsumer and use the
    IGraphicBufferProducer version of the screenshot API.
    
    However, some GPU drivers don't support properly
    a GPU to CPU path, to work around this, we use a
    temporary BufferQueue on the server side for the
    GL rendering, and we use glReadPixels into the
    CpuConsumer (we're now using a CPU to CPU path
    which is always supported).
    
    Currently this "wrapping" is always performed,
    but it can be bypassed on devices that support
    the GPU to CPU path.
    
    This also addresses a DoS attack vector on
    SurfaceFlinger, where an application could
    consume all of SF's filedescriptors by creating
    a lot of screenshots in a row.
    
    Bug: 8390553
    
    Change-Id: I9e81514c2a7711b9bb393f74305be7d2abe08f1c
    Add DisplaySurface abstraction
    
    DisplayDevice now has a DisplaySurface instead of using
    FramebufferSurface directly. FramebufferSurface implements
    DisplaySurface, and so does the new VirtualDisplaySurface class.
    DisplayDevice now always has a surface, not just for virtual displays.
    
    In this change VirtualDisplaySurface is just a stub; buffers still go
    directly from GLES to the final consumer.
    
    Bug: 8384764
    Change-Id: I57cb668edbc6c37bfebda90b9222d435bf589f37
    Minor cleanups/fixes before virtual display refactoring
    
    None of these should change behavior, except for removing some
    incorrect log messages when using a virtual display.
    
    - HWComposer::getAndResetReleaseFenceFd() checks the HWC version, so
      no need to do that in the DisplayDevice::onSwapBuffersCompleted().
      However, it should check that mFramebufferSurface is not NULL like
      it is for virtual displays.
    - Comment that FramebufferSurface::dump() overrides the non-virtual
      ConsumerBase::dump(), and fix it so the right thing happens
      regardless of the static type of the pointer/reference the callee
      has. FramebufferSurface::dump() could be removed right now, but I'd
      need to bring it back in a later change.
    - Use the right enum for validating display type ids.
    - Don't try to send hotplug events for virtual displays.
    - Mark virtual displays as connected so HWComposer::prepare() doesn't
      think something is wrong when it gets a non-NULL layer list.
    - Remove unused FramebufferSurface methods.
    
    Bug: 8384764
    Change-Id: Id28a2f9be86b45f4bb7915fdf7752157035f4294
    don't allow screenshots without the READ_FRAMEBUFFER permission
    
    the recent screenshot rework allowed the older screenshot
    interface to work without that permission
    
    Change-Id: I6c4743f4591c81106e3b823d55a055f7b4907de1
    don't capture hidden layers in screenshots
    
    Bug: 8389956
    Change-Id: I9ed836395258732c743c6fd44092bd01020dde13
    get rid of purgatory and fix QueuesToWindowComposer query
    
    the purgatory list wasn't needed anymore; in fact it had no effect as
    buffer life-time management is now handled by the BufferQueue.
    
    For QueuesToWindowComposer we keep a list of wp<> on the IBinder
    for IGraphicBufferProducers we hand over to clients so we can
    easily check if an IGraphicBufferProducer is ours. We clean-up the
    list when our IGraphicBufferProducer are destroyed.
    
    Bug: 8349142
    Change-Id: I1aa06652ade8c72d0004a3f5e6c3d6e8a82fc2ae
    size IMemoryHeap properly for screenshots
    
    since we're using glReadPixels(), we only need to use
    the width (as opposed to the stride) of the source
    screenshot.
    
    Bug: 8374664
    Change-Id: I145c80f4fff5444df7c77c4f52e70a7203caddbd
    size IMemoryHeap properly for screenshots
    
    since we're using glReadPixels(), we only need to use
    the width (as opposed to the stride) of the source
    screenshot.
    
    Bug: 8374664
    Change-Id: I145c80f4fff5444df7c77c4f52e70a7203caddbd
    get rid of ISurface
    
    ISurface was only used to get the IGraphicBufferProducer from
    a Layer. It's now replaced by a BBinder subclass / IBinder and
    is only used as a handle to the surface, to both refer to it
    and manage its life-time.
    
    Also cleaned-up a bit the ISurfaceComposer interface and
    "create layer" code path.
    
    Change-Id: I68d0e02d57b862cffb31d5168c3bc10cea0906eb
    Fix missing recents screenshots
    
    We were using the "visible layer list" when taking screenshots,
    which doesn't work when a layer is behind other opaque layers
    and therefore hidden.
    
    We fix this by using the full layer list, filtered by the
    layerstack of the display we're looking at.
    
    Bug: 7552304
    Change-Id: I4b6f77e5511aea94f8d218975b6e22738e7e5d5b
    make sure to call compositionComplete after taking a screenshot
    
    older drivers which are doing implicit synchronization need this
    or they could deadlock.
    
    Bug: 8341885
    Change-Id: Icd980a6be16071678d6151e34725b3c1c547d7ee
    workaround to fix screenshot leak on N4
    
    Bug: 8322020
    
    Change-Id: Ie60af0eb431866b8d64b2674ae7bd8b5ee05f5d6
    Return NO_MEMORY when glReadPixels() fails.
    
    Change-Id: Ic66134ef457e8442ae9135e9ec50e3d02932a253
    Get rid of LayerBase.
    
    The functionality of LayerBase and Layer is folded
    into Layer. There wasn't a need for this abstraction
    anymore.
    
    Change-Id: I66511c08cc3d89009ba4deabf47e26cd4cfeaefb
    fold LayerBaseClient into LayerBase
    
    Change-Id: Ic745136522df59c42f0885fd969e75ea55d09f01
    Remove support for ScreenshotLayer
    
    Change-Id: I5b571a4cf3faa77d2c4aca916fa4bd00a1065bb9
    Return NO_MEMORY when glReadPixels() fails.
    
    Change-Id: Ic66134ef457e8442ae9135e9ec50e3d02932a253
    rework screenshot API and implementation
    
    - SurfaceFlinger now supports to take a screenshot
      directly into an IGraphicBufferProducer
    
    - reimplement the IMemoryHeap screenshot on top
      of the above
    
    - reimplement LayerScreenshot such that its
      BufferQueue is directly used as the destination
      of the screenshot. LayerScreenshot is now a thin
      wrapper around Layer
    
    Bug: 6940974
    
    Change-Id: I69a2096b44b91acbb99eba16f83a9c78d94e0d10
    Init displays to null layer stack
    
    When a display is added, initialize it to use an empty layer stack, so
    if it is somehow visible it will show black. It will be assigned the
    real layer stack -- along with a projection and other properties -- by
    window manager soon. Normally a display remains blanked until window
    manager has decided what to show on it, but for HDMI connected at boot
    that isn't currently the case.
    
    Bug: 7258935
    Change-Id: Ic9bb25f7a9b8d9d3772b097ab1d6fa03bc8780a1
    set correct crop rectangle in LayerBase::setCrop
    
    The crop always had left=top=0, because the crop position
    and the layer's transform were merged together in
    computeBounds() (which really used to compute the
    bounds in screen space, which we usually call the
    "frame" elsewhere in the code)
    
    Note: in practice this crop value is not used by
    hwc, because it's overridden in Layer::setGeometry(), which
    is why this bug was never apparent.
    
    Change-Id: I1ec6400a8fc8314408e4252708f43ea98c2fe64e
    Initialize DisplayData fences to NO_FENCE, not NULL
    
    Also fix another place that was checking for NULL fence rather than
    Fence::isValid().
    
    Bug 8283950
    
    Change-Id: Ie06db327eb416828d8dac139171d96d4470b2e35
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: Ibed34175ae273608393aaa5f0a7df207dc40d709
    get rid of Surface identity and token
    
    we use the IBinder instead.
    
    Change-Id: I4aa0b58869ba43f19980013620051e5a261b062d
    SurfaceFlinger: add win anim frame time tracking
    
    This change makes the 'dumpsys SurfaceFlinger --latency' command with no extra
    args dump the frame timestamp data for the most recent frames that
    SurfaceFlinger generated that included window animation transaction changes.
    
    Change-Id: I8bded1ea08a4cddefef0aa955401052bb9107c90
    Reduce C++11 warnings
    
    A few typecasts to fix "narrowing conversion" complaints.
    
    Change-Id: Ib2118079a2ca33959c748d03d8c6f1722d62e8fe
    Add some comments.
    
    Also, minor tweak to SurfaceTextureLayer.
    
    Change-Id: If616d5ee4e8226dd0e16c5dbb0e0f80db553110e
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    SurfaceFlinger: Move GraphicBufferAlloc to libgui
    
    This change moves the GraphicBufferAlloc class from SurfaceFlinger to libgui.
    
    Change-Id: Idf31d2004efa2651b60590733f73c4a7b831e8a9
    Create builtin display tokens on demand
    
    For hotpluggable builtin displays (currently just HDMI), create the
    display device IBinder token when the display is connected and destroy
    it when the display is disconnected. Previously we created the tokens
    at startup and never changed them. This made it so that when comparing
    current and drawing state, we couldn't tell whether a display had been
    disconnected and reconnected.
    
    Bug: 7491120
    Change-Id: I2ac82b864e10cb1cd0a308782d7e0ab9745c5d81
    make transform hint multi-display aware
    
    if a layer is not mirrored, we now use its display
    as the source for the transfrom hint calculation
    instead of always using the default (main) display.
    
    this change does two thing:
    1) we make updateTransformHint take a DisplayDevice
       as a parameter instead of hard-coding the
       main display.
    
    2) each time we do a transaction that could change
       the hint, we go through all layers and
       figure out which display should be used for their
       transform hint.
    
    Bug: 7599344
    Change-Id: I9b04a95e6c372dd770bacf81d8ef6f8e31b87b83
    Create builtin display tokens on demand
    
    For hotpluggable builtin displays (currently just HDMI), create the
    display device IBinder token when the display is connected and destroy
    it when the display is disconnected. Previously we created the tokens
    at startup and never changed them. This made it so that when comparing
    current and drawing state, we couldn't tell whether a display had been
    disconnected and reconnected.
    
    Bug: 7491120
    Change-Id: I23b77037dc0f548d549abf580339edd0e3c626e9
    fix transitions from hwc to GLES composition
    
    If we switched from HWC to GLES but the dirty region was empty
    (could happen if the dirty region is outside of the screen for instance), we
    need to force a full screen composition.
    
    In this change we ignore the dirty region for the purpose of
    rejecting the whole update and we rely on the fact that it will later
    be expanded to the whole screen. This was the least risky fix.
    
    Bug: 7467760, 7452931
    Change-Id: I2132f2f963b00a3ce7150adadb107b0367b3862e
    rework a bit how we scissor the display
    
    the scissor rect is now computed once by DisplayDevice
    and is combined with the "undefined" region so that
    the letter-boxed area of the screen get cleared in
    drawWormhole.
    
    Bug: 7149437
    Change-Id: Id2f30516a5786f32eace7f876ff32028f954f357
    partially implement external display clipping
    
    we perform external display clipping only on the GL
    side (ie: not done on the h/w composer side, which is
    harder and would be too risky). in practice this means
    that WFD will be clipped properly, while HDMI *may* or
    may not depending on how hwc is used.
    
    Bug: 7149437
    Change-Id: I92d4d04220db72b6ffb134c7fa7a93af569723a5
    partially implement external display clipping
    
    we perform external display clipping only on the GL
    side (ie: not done on the h/w composer side, which is
    harder and would be too risky). in practice this means
    that WFD will be clipped properly, while HDMI *may* or
    may not depending on how hwc is used.
    
    Bug: 7149437
    Change-Id: I92d4d04220db72b6ffb134c7fa7a93af569723a5
    prevent a client from crashing surfaceflinger
    
    a misbehaving or malicious client could cause SF to crash
    by providing a "fake" IInterface. we now check the
    IInterface we get is our own and local.
    
    Bug: 7278879
    Change-Id: Ia19d05902d4b2385c5a16416148378d4998833fd
    SurfaceFlinger: add support for secure displays
    
    This change adds support for displays that are not allowed to display surfaces
    with the eSecure flag set.  All non-virtual displays are considered secure,
    while virtual displays have their secure-ness specified at creation time.
    
    Bug: 7368436
    Change-Id: I81ad535d2d1e5a7ff78269017e85b111f0098500
    SurfaceFlinger: change the animation timeout
    
    This change changes the animation transaction timeout from 500us to 5s.
    
    Bug: 7362633
    Change-Id: I9bed8e74f726dae2daa398afc29babcea00d5b04
    SurfaceFlinger: add animation transactions
    
    This change adds a transaction flag for WindowManager to indicate that a
    transaction is being used to animate windows around the screen.  SurfaceFlinger
    will not allow more than one of these transactions to be outstanding at a time
    to prevent the animation "frames" from being dropped.
    
    Bug: 7353840
    Change-Id: I6488a6e0e1ed13d27356d2203c9dc766dc6b1759
    fix a corruption in blank/unblank
    
    we were holding a reference (ie: pointer) to a sp<DisplayDevice>
    while processing the message. Meanwhile the object itself could
    go away and we would end up accessing a dead object.
    
    the root cause of the problem is that we are accessing mDisplays[]
    in a few places outside of the main thread.
    
    Bug: 7352770
    Change-Id: I89e35dd85fb30e9a6383eca9a0bbc7028363876c
    SurfaceFlinger: add animation transactions
    
    This change adds a transaction flag for WindowManager to indicate that a
    transaction is being used to animate windows around the screen.  SurfaceFlinger
    will not allow more than one of these transactions to be outstanding at a time
    to prevent the animation "frames" from being dropped.
    
    Bug: 7353840
    Change-Id: I6488a6e0e1ed13d27356d2203c9dc766dc6b1759
    Fix HDMI unblank behavior
    
    Two issues:
    
    (1) We were announcing the hotplug event before we were ready to
    handle blank/unblank events, so we were losing the initial unblank
    that power manager sends us when HDMI is first plugged in.  This
    left the display blank until you toggled the device power off/on.
    
    (2) We were retaining fbTargetHandle for HDMI after the display was
    disconnected.  The value didn't get updated when HDMI was reconnected
    because the display was blank, so we didn't go through that code
    path.  So, when HDMI was re-connected, we passed stale data into
    the HWC.
    
    Bug 7323938
    
    Change-Id: I2335d24fd7b0f00bb23fc63aa7bcf44cb8857c73
    don't automatically unblank external displays
    
    this should be handled by the display-manager. we were doing
    that in SF because until recently we didn't have enough support
    in the HAL. however, this is now causing other problems when
    plugging hdmi while the screen is off for instance.
    
    Bug: 7150885
    Change-Id: I739b209056a765d38d05295cf202f67ee0f506ae
    fix dumpsys Layer name when using multiple displays
    
    Bug: 7288401
    Change-Id: I14beeef58fac5270cef3b611e18c163060efe6c3
    Stop using transparent region for computing visible regions (DO NOT MERGE)
    
    The transparent region hint is computed only from view layout
    locations, ignoring post-layout translation. If a SurfaceView is layed
    out with no other views above it, but a view is moved above it
    post-layout, that view's layout bounds would be subtracted from the
    window's transparent region instead of its drawing bounds. Prior to
    this change, the view would not be visible (except where its layout
    bounds and drawing bounds overlap).
    
    With this change, composition uses visible regions computed without
    regard to the transparent regions. However, if all of a layer's
    visible region is transparent, it will be removed from the list of
    layers to composite. This doesn't fix the root problem of incorrect
    transparent regions, and doesn't prevent bad composition in all cases.
    But it does avoid it for some existing apps, while still allowing the
    transparent region hint to save power in the important
    fullscreen-video-in-a-SurfaceView case.
    
    Change-Id: If2d929a10399b80401ef902abb232233a7f3d16d
    make sure we don't call into the HWC HAL when not needed
    
    when enabling/disabling vsync we now make sure to
    not call into the HAL if the state wouldn't change.
    
    Bug: 7274951
    
    Change-Id: Ie24a6d68888a51b577acf9c2a973d85437cbacaf
    Ignore display state changes for disconnected displays
    
    When a display is disconnected, removing it from SurfaceFlinger's
    display list is non-atomic with removing it from the Display Manager
    and any in-flight transactions. So SurfaceFlinger might get a display
    state change transaction for a display it has already forgotten about.
    Just ignore these.
    
    Bug: 7288082
    Change-Id: Ic27e55377f3db40fb34e3b1cd67e43297df117a2
    make sure we don't call into the HWC HAL when not needed
    
    when enabling/disabling vsync we now make sure to
    not call into the HAL if the state wouldn't change.
    
    Bug: 7274951
    
    Change-Id: Ie24a6d68888a51b577acf9c2a973d85437cbacaf
    Fix crashes after HDMI disconnect
    
    The display was being removed from SurfaceFlinger's list before we
    had a chance to reset HWComposer's layer list, so we were passing
    stale data into the hardware composer (which has its own per-display
    data).  This resulted in "invalid gralloc handle" complaints.
    We now clear the layer list immediately after removing the display.
    
    The display was being removed while its EGLSurface was still
    "current", resulting in "cancelBuffer: BufferQueue has been
    abandoned" complaints.  We now call makeCurrent on the primary
    display before removing the external display.
    
    Bug 7274254
    
    Change-Id: Ia59e3a61d7ec46488b96bf93ec5e4ed3488b70e4
    Fix crashes after HDMI disconnect
    
    The display was being removed from SurfaceFlinger's list before we
    had a chance to reset HWComposer's layer list, so we were passing
    stale data into the hardware composer (which has its own per-display
    data).  This resulted in "invalid gralloc handle" complaints.
    We now clear the layer list immediately after removing the display.
    
    The display was being removed while its EGLSurface was still
    "current", resulting in "cancelBuffer: BufferQueue has been
    abandoned" complaints.  We now call makeCurrent on the primary
    display before removing the external display.
    
    Bug 7274254
    
    Change-Id: Ia59e3a61d7ec46488b96bf93ec5e4ed3488b70e4
    save/restore viewport properly when taking screenshot
    
    Bug: 7241739
    Change-Id: Iba8b9ffc75ab47fbc56169e65da26d96850a9297
    reset GL viewport and project when caputring the screen
    
    Bug: 7241739
    Change-Id: I3bb5214b070384de9be2026647865c6c236a4331
    Pass display arg to blank/unblank
    
    This allows us to blank and unblank displays other than the built-in
    display (e.g. HDMI).
    
    Bug: 7240511
    Change-Id: I89ea13f9e497be74c3e1231d0c62fb558e93e0f8
    SurfaceFlinger: don't always set HWC_GEOM_CHGD
    
    This change fixes a bug in SurfaceFlinger that caused the HWC_GEOMETRY_CHANGED
    flag to be set every flip.
    
    Change-Id: I4f395a2883bcbb53b23b3d14941aff108739c9f0
    Bug: 7234237
    Stop using transparent region for computing visible regions
    
    The transparent region hint is computed only from view layout
    locations, ignoring post-layout translation. If a SurfaceView is layed
    out with no other views above it, but a view is moved above it
    post-layout, that view's layout bounds would be subtracted from the
    window's transparent region instead of its drawing bounds. Prior to
    this change, the view would not be visible (except where its layout
    bounds and drawing bounds overlap).
    
    With this change, composition uses visible regions computed without
    regard to the transparent regions. However, if all of a layer's
    visible region is transparent, it will be removed from the list of
    layers to composite. This doesn't fix the root problem of incorrect
    transparent regions, and doesn't prevent bad composition in all cases.
    But it does avoid it for some existing apps, whiel still allowing the
    transparent region hint to save power in the important
    fullscreen-video-in-a-SurfaceView case.
    
    Bug: 7179570
    Change-Id: I47cf939e12129b167afa344b8b036e8827103ac8
    add support for EGL_FRAMEBUFFER_TARGET_ANDROID
    
    we now try first with EGL_FRAMEBUFFER_TARGET_ANDROID, and
    pick the first config we find. Otherwise, we revert to
    the old algorithm.
    
    Bug: 7232584
    
    Change-Id: I8d5c5a4ce48420832c2e2828718a8f53325effb0
    fix a crasher when running out of memory
    
    MemoryHeapBase::getBase() returns MAP_FAILED in case or
    OOM, not null which is what SF was checking against.
    
    This addresses one of the issues of bug 7230543.
    
    Bug: 7230543
    Change-Id: I763a88f64a2f9ff75eb139cfbaf9a1a9746c5577
    When "show visible regions" is enabled we were missing a call to HWC
    
    Bug: 7204034
    Change-Id: I64dd78362fa75149513a7d9ff92dde175e9b4958
    Show build config in dumpsys SurfaceFlinger
    
    This adds a line to the "dumpsys SurfaceFlinger" output that shows
    build-time configuration values.
    
    Example:
     Build configuration: [sf HAS_CONTEXT_PRIORITY] [libui] \
      [libgui USE_FENCE_SYNC]
    
    Bug 7206633
    
    Change-Id: Ibe1856b459d34a4be6ee83a4ebfd2807e6cc68a0
    don't call eglMakeCurrent() before calling HWC commit() on HWC 1.1
    
    this call is not needed and misleading on HWC 1.1; it can also have
    a negative performance impact when multiple displays are used.
    
    Bug: 7124069
    Change-Id: I47cd25c9d6e69abcc9333b9ecd5044e8fb1919ec
    add/remove displays properly on hotplug events
    
    Bug: 7191563
    Change-Id: I8f0fbf3b29658c9479443141798e6f288a1f2d52
    return an error, as expected, when querying a disconnected display
    
    Change-Id: I405a3a7bb42b9bbd2ec7bfe09e60e1b7acf7389d
    we now correctly set-up connected screens during boot
    
    Change-Id: Ie8b1a3b97ad1821cc970e43abe96c8cec7135b66
    We now report hotplug events to the framework
    
    Change-Id: I2d6b7787d39e5929485a551e4982498c5053c211
    one more step toward HDMI support
    
    getDisplayInfo() now returns proper information for
    HWC managed displays.
    
    hotplug is sitll not supported; so this is not fully correct
    as the information returned will be bogus if the HDMI screen
    is not plugged in.
    
    Bug: 7191563
    Change-Id: If55d8e829fae0443571548155007f486cdf9bc9f
    GraphicBufferAlloc class was declared twice
    
    this was confusing because the one in FramebufferSurface
    wasn't in fact being used
    
    Change-Id: Ied45aec20d804cfbe52440f9b2f2852a85c757cf
    Allow 16-bit color EGLConfigs
    
    The emulator without GPU acceleration only supports 16-bit
    framebuffers.
    
    Bug: 7185810
    Change-Id: I883180367bf5b291d5e70427ab586d2e17868a96
    improve logging of external displays
    
    Change-Id: I041aebb7fc655aeca98bbf698d15e05d7c12cac9
    Plumb display name into SurfaceFlinger
    
    The Surface createDisplay() call takes a display name for debugging.
    This change carries it through SurfaceFlinger and displays it in
    the "dumpsys SurfaceFlinger" output.
    
    Bug 7058158
    
    Change-Id: I79f3474a8656ff1beb7b478e0dbf2c5de666118a
    add support hwc 1.1
    
    Bug: 7124069
    
    Change-Id: I53d705105c4ad8954d3f50ee4f4c8b7ec936b871
    refactor things a bit
    
    - decouple GL and main display initialization
    - ensure that each "supported" display has its own FramebufferSurface
    - onScreenAcquired/Released now takes a display
    
    Change-Id: If34a05f3dea40f6c79db77f4dde283a2580daac4
    Fix transform hints
    
    The hints were being set a little too late, so the pre-rotation stuff
    wasn't quite working.
    
    Bug 7054997
    
    Change-Id: Id8d5c626db7a76f768ba762a145b315878ee08e6
    Fix display projections when translated.
    
    There are two different translations to apply in the logical
    orientation, one before scaling and one after.
    So translate, scale, translate then rotate.
    
    Bug: 7139798
    Change-Id: I0726991cadb62988390e77503dbbaed54f07bfe3
    don't call hwc with non-empty layer lists for blanked displays
    
    we now make sure to take the blanked state of a display into
    account when we build its list of visible layers, this ensures
    that we won't call prepare/set with a non-empty list when the
    display is blanked.
    
    Possibly fixes 7075380, 7103553, 7130187, 7016215
    
    Bug: 7075380
    Change-Id: I9fdd2e73d1b7621eaeca3d4ac2ae60d9fb1b3631
    Reduce failure uncertainty
    
    This adds a trivial workaround for a one-shot boot time crash, plus
    an explicit check and abort for a failure condition that currently
    presents as a less obvious failure.
    
    Bug: 7145521, 7147557
    Change-Id: I548f6a9caa9f0bd5710aaecea0e1c6c7c8f2f281
    Reshuffle FramebufferSurface
    
    FramebufferSurface no longer speaks directly to the FB HAL.  Now
    everything goes through HWComposer (which may or may not be
    connected to a hardware composer).
    
    Added display index arg to some query methods.
    
    Change-Id: Id3e157d2d4e3555d33afbb703e518b6e92e2d6d5
    Ensure that viewport and frame are initialized.
    
    onInitializeDisplays() was posting a transaction with changes
    to the display projection.  Unfortunately, it only set the
    display orientation field and left viewport and frame
    uninitialized.
    
    The uninitialized values flowed downstream and found themselves
    baked into a bogus DisplayDevice mGlobalTransform.  That transform
    was then applied to some Rects which were turned into Regions
    that were them combined with other Regions.
    
    Under certain situations, the uninitialized data might have
    a largish value, resulting in the creation of Regions with
    components in excess of the Region max-value limit of 0x7ffffff
    (note that this is not INT_MAX).  Later when performing a
    binary operation using the Region, the Spanner would loop
    indefinitely trying to figure out how to stuff a humongous
    region inside of a max-value region.  Not content to try
    just once, the Spanner would continue trying again and
    again, pegging the CPU and hanging surface flinger during boot.
    
    Insanity soon followed.
    
    Bug: 7130713
    Change-Id: I0016f0c9662185be833474c212a1dd408096ae23
    Fix display projection.
    
    Change-Id: I0f253dc3759b99e05ff8344b0f513d8c289702e7
    minor cleanup
    
    Change-Id: Ied80e14878e92a506930f7a5a55adde8f260ec70
    display projection API now has a single function instead of 3
    
    Change-Id: I9bf46d372b77d547486d4bbe6f1953ec8c65e98f
    implement display viewport and frame
    
    note: viewport clipping is not implemented yet
    
    Change-Id: I7fde7c4de075d409d95c48bb20ba8ee017f6f00a
    add libsurfaceflinger_ddmconnection for PDK build
    
    - the library is dlopened from libsurfaceflinger
    - the library built only when libnativehelper exists
    
    Bug: 7089510
    Change-Id: Ib3ea1029d7e8f6e055f4b759d0bf68f5123fa8a1
    If there is no hwc, call eglSwapBuffers for the main display
    
    Bug: 7068568
    Change-Id: I6a0309613fe3619d065b9047af6c3fb32b510d97
    fix a crasher when setting a display to a null surface
    
    Bug: 7076303
    Change-Id: I843dd4ee4a603b8ad51bc1ad14e429db15050bec
    we were sometimes not setting fences properly
    
    this would happen when the composition was handled
    entirely in h/w composer, in this case, we would
    not set the fences for any involved layers.
    
    Bug: 7049373
    Change-Id: I1439dc156ce23c24041cdfbbebfe8ff4fdf790f8
    we were sometimes not setting fences properly
    
    this would happen when the composition was handled
    entirely in h/w composer, in this case, we would
    not set the fences for any involved layers.
    
    Bug: 7049373
    Change-Id: I1439dc156ce23c24041cdfbbebfe8ff4fdf790f8
    the layer list per display could contain non-visible layers
    
    this happened because we didn't check that the visible
    region was within the bounds of the display.
    
    Bug: 7064121
    Change-Id: I2e81850a3dc3d1474253520ad7f9e559c26d5a96
    we were not always clearing the screen properly
    
    Change-Id: I269dd866e965aebd9b3c4667095818202982f4a3
    Eradicate DisplayID.
    
    DisplayDevices are now keyed of the wp<IBinder> the client uses.
    DisplayID has now become DisplayType which is just used to identify
    physical displays (as opposed to virtual displays such as wifi displays).
    
    Change-Id: I0c5968f2c902dcd699a7e0afacf833ff070c12ea
    Banish DisplayID from the SurfaceFlinger API.
    
    Use only display tokens in the API to refer to new displays.
    
    Don't require the caller to specify the display when creating
    a surface (since in general a surface could be shown on
    any display).
    
    This is intended to be a minimum change just to update the API.
    Note that SurfaceFlinger still uses DisplayID in a few places
    internally that might cause some features not to work properly
    when there are multiple displays (LayerScreenshot, for example).
    
    Change-Id: I3d91eec2da406eefd97bcd53655d403ad865a7e6
    Added display initialization method
    
    The primary display device was being configured to "blank" by
    default, which prevented the boot animation from appearing
    (unless you got lucky with the hardware composer state).
    
    Bug 6975688
    
    Change-Id: I0fa52e9e719c6e997c5725a7baf15d9718461b78
    surfaceflinger: fix display id selection
    
    This change fixes display ID selection so that it never chooses negative
    numbers as display IDs.
    
    Change-Id: I5af1acc7b1270b371595e096b18e2a6ad250c7ba
    Revert "Added display initialization method"
    
    Something doesn't seem right (again).
    
    This reverts commit 53ade0853ca003c9e917b5e7d34e1b1338d7b87d.
    
    Change-Id: Id5786997ca9dd2a447363e8ac95213ea37468504
    Added display initialization method
    
    The primary display device was being configured to "blank" by
    default, which prevented the boot animation from appearing
    (unless you got lucky with the hardware composer state).
    
    Bug 6975688
    
    (This reverts an earlier revert.)
    HWComposer now has its own concept of display IDs
    
    HWComposer can now create IDs representing a display
    it can deal with. IDs MAIN and HDMI are reserved.
    SurfaceFlinger associate HWComposer IDs with a
    DisplayDevice and uses that when it talks to HWComposer.
    
    A DisplayDevice doesn't have to have a HWComposer ID,
    in that case it just can't use h/w composer composition.
    
    Change-Id: Iec3d7ac92e0c22bf975052ae2847402f58bade71
    Revert "Added display initialization method"
    
    This reverts commit 3f3956236aac97b6aa25fa89f0983d5e9d065fdb
    
    Change-Id: Ia2a15d9a5db88add6019edf9d955cef1f73d432d
    Revert "Added display initialization method"
    
    This reverts commit 3f3956236aac97b6aa25fa89f0983d5e9d065fdb
    
    Change-Id: Ia2a15d9a5db88add6019edf9d955cef1f73d432d
    Added display initialization method
    
    The primary display device was being configured to "blank" by
    default, which prevented the boot animation from appearing
    (unless you got lucky with the hardware composer state).
    
    Bug 6975688
    
    Change-Id: Idaa0d0b98ebb331a17d1b16774c6b05bfa1e8728
    refactor compositing code to avoid multiple eglMakeCurrent() calls
    
    when multiple displays are connected, we ended-up having to
    call eglMakeCurrent() twice per display due to a limitation
    in EGL. this fixes that.
    
    Change-Id: I11e4584df50f8c24bbecee74e37b28b3ee031d2f
    reimplement wifi display hack with new external display SF framework
    
    fix a few bugs with external displays
    
    - HWComposer doesn't really handle multiple displays yet
      so there is a lot of ugliness there
    
    - We also need to make sure that external displays are not
      blanked by default
    
    - due to some EGL limitations surfaces being swapped need
      to be current
    
    Change-Id: I82bff05b43bcebd8da863c7c76b4edbc3bc223a9
    display states can't share the dirty flags
    
    Change-Id: Ifade9f2f1a0df9a36aede77a6cf5eee4be534f98
    binder interfaces can't be compared directly
    
    we always need to compare their binder
    
    Change-Id: I70d554ebc5009fe81e87923235f91451f32e1a30
    we were mistakenly optimizing out SF's main transactions in some cases
    
    due to a typo, SF's main transaction was conditional to having a
    display transaction.
    
    more correct fix for 6970310
    
    Bug: 6970310
    Change-Id: Iafd8c4e02afa5db829cc1c65950cfcc74754c6af
    oopsie, missed a spot when fixing b/6970310
    
    Change-Id: Ia320fddc7cc4b0666a4fee678af710ecf5f83ff5
    we were mistakenly optimizing out SF's main transactions in some cases
    
    due to a typo, SF's main transaction was conditional to having a
    display transaction.
    
    more correct fix for 6970310
    
    Bug: 6970310
    Change-Id: Iafd8c4e02afa5db829cc1c65950cfcc74754c6af
    Fix layer removal transaction.
    
    Layers were not properly being removed because we were
    setting the wrong transaction type flag at the time of
    removal.
    
    When layers are removed, we must use eDisplayTransactionNeeded,
    not eTransactionNeeded, to ensure that the mLayersRemoved
    flag is checked and the appropriate cleanup occurs.
    
    Bug: 6970310
    Change-Id: Id4b2897a34d4ac00aa0f92349c0ec6db95c1aaf7
    Don't crash when recovering from WM death
    
    Bug: 6956162
    Change-Id: I27244b960c77187b4c4cd7297989c4c872e94a3a
    make sure to repaint the screen when unblank()ing
    
    Change-Id: I38e3a8e6bb31ef3d2f1fcaec7490cb92a4427db2
    xdpi / ydpi were reported as 0
    
    Bug: 6975723
    Change-Id: Ia7fa37ec11e2308804f5034959a37e508d292d31
    make multi-display more real
    
    - displays are represented by a binder on the client side
    - c++ clients can now create and modify displays
    
    Change-Id: I203ea5b4beae0819d742ec5171c27568f4e8354b
    screenshots could stop working after camera was used
    
    once a secure window is put on screen the display
    would retain its "secure" flag forever, preventing
    screenshots from being taken.
    
    Bug: 6933967
    Change-Id: I5be8355145ca7d580d84552311642f8fa912fe6a
    libgui includes refactoring
    
    Change-Id: I1d24ec17f5003ec2abab5f7472daaff4cc4cc2d3
    Add a display parameter to HWComposer where needed
    
    - also replace C casts with C++ casts
    - only the interface is changed, HWComposer still doesn't
      fully handle multiple displays
    
    Change-Id: I48eb89bff2edb76bf1d4d41f46802b9b2a7166a8
    now able to set the layer stack on a DisplayDevice
    
    Change-Id: Ia9691cf221b9444c243eb468d9e276a30e600b6b
    surfaceflinger: refactor FrambufferSurface
    
    This change refactors the FramebufferSurface class to inherit from the new
    ConsumerBase class.
    
    Bug: 6620200
    Change-Id: I46ec942ddb019658e3c5e79465548b171b2261f2
    turn DisplayDevice into a reference-counted object
    
    it's safer this way because this object owns an
    EGLSurface which cannot be easily reference-counted.
    
    it also gives us the ability to sub-class it, which
    we might want to do soon.
    
    Change-Id: I07358bb052dc5a13b4f2196b2c2b6e6e94c4bb4f
    remove a dependency of DisplayDevice on the refresh rate
    
    this remove a dependency (not all) on FramebufferSurface
    
    Change-Id: Ie07ce70760cdcedfb41b5b41bea8da45637bf474
    break SF dependencies on libdvm and libandroid_runtime
    
    these libraries are only needed for debugging and are now
    linked at runtime if needed.
    
    Change-Id: I03f138523c6de166a1e2700d4454d4a854aee145
    screen-off animation won't be handled by SF anymore
    
    Change-Id: Idc41386804ae7d7eb981c36e1bc55c270870c8d0
    We now have a real list of displays.
    
    displays can be dynamically added or removed, and the
    list is part of the SF's transaction.
    
    Change-Id: I4186ea39f1317c0e7c044f869004017738968fab
    don't filter when capturing a screenshot unless needed
    
    bug: 6919952
    Change-Id: Ia6fbe9bc7e533a64cfdd6ef7f0cd6b9f11feb947
    cleanups in preparation of bigger changes
    
    - fix typo drawForSreenshot misspelled
    - get rid of DisplayDeviceBase
    - removed unused or unneeded code
    - always pass a DisplayDevice to Layer methods that are called
      on a per-display basis (to make it clear that this could be
      called more than once per composition).
    
    Change-Id: Id948b7e09fe5c06db0e42d40d6ed75dd095c7f44
    rename DisplayHardware to DisplayDevice
    
    Change-Id: I3f7250cd914e0da4f9ec2c9403587bbe12f3cc62
    Layers are now sorted by layer-stack first, then by z-order
    
    Change-Id: I7a82929df5ba87b9d88cc5be87e1a233bc4628e9
    getting closer to final main composition loop
    
    Change-Id: Icd63782366ffd11d9ea00c925ae5783ed7440cdb
    get rid of global regions that should be tracked per display
    
    Change-Id: I3b871860cc29f1b2fdcc22b0c577a6eae65d9296
    Move eglSwapBuffers out of HWComposer
    
    Commit 8630320 moved the eglSwapBuffers fallback (for devices with no
    HWC implementation) from DisplayHardware to HWComposer. But HWComposer
    only knows about the framebuffer EGL display and surface handles if
    there is a HWC, so it was always passing bogus handles.
    
    This change moves the eglSwapBuffers fallback up to SurfaceFlinger,
    which has access to the framebuffer EGL handles.
    
    Bug: 6886613
    Change-Id: Iad3f5ff7c90ee48d7053999e6a4548d6794b6ebd
    get rid of the shared-memory control block
    
    Change-Id: If814060aca1d2ff2619d4adcd57296983d207f7f
    hopefully fixe a race condition in sf initialization
    
    if we received a vsync event during SF init, we could crash
    as not all objects were ready to go.
    
    Change-Id: Ie11b46e3eb1b37a709dd8757843d444f93dd0189
    split HWComposer out of DisplayHardware
    
    we will only ever have a single instance of HWComposer, so
    it's now an attribute of SurfaceFlinger, instead of being part
    of DisplayHardware.
    
    DisplayHardware now just represents a "display" (it should be renamed).
    
    Change-Id: Iec191e57686868e1df6daa8b880a286c9fefde56
    get rid of ro.sf.hwrotation, it's not used anymore
    
    Change-Id: I2ee469ac89ecd65d7187be5cab08b5cc18f67cbe
    add a layerStack attribute to Layers.
    
    this attribute can be set through a regular transaction using
    SurfaceComposerClient (just like any other attribute, eg: position or size)
    
    Change-Id: I701a47c677ea6442ca713728a93335328cd2b172
    update SF binder protocol to support setting display attributes
    
    no change of functionality -- the old behavior is implemented
    on top of this new protocol.
    this new protocol will allow, eventually, to pass informations
    about displays and layer stacks.
    
    Change-Id: Ic6c2295e61ec8ecbc8ce01ab7664e35d928202fc
    SurfaceFlinger cleanup
    
    mostly refactored SurfaceFlinger.h, but also removed dead code.
    cleaned-up a few includes as well.
    
    Change-Id: Ib15f4ffe567912b61ee98aa076c6a283b72811b5
    Increment iterator on early-out too
    
    Bug: 6860046
    Change-Id: I82f9e4062cb58d5479c9d8dc5f2f0770a1dcc605
    Handle empty HWC layer list when composing
    
    Bug: 6777877
    Change-Id: I71e9b948d04dda33d45cfa986d9c7e28328cf749
    factor EGL/GL and surface creation out of DisplayHardware
    
    Change-Id: Icd85a6a4caad06f056578008af3e21666fa8b1f4
    mVisibleLayersSortedByZ is now maintained per display
    
    Change-Id: Idcdb77eba1a3f99b3e4b2150128a82acaffcd2a8
    one more step towards multiple display support
    
    - remove dependency on cached state in validateVisibility
    - get rid of mVertices and mTransformedBounds
    - get rid of validateVisibility
    - get rid of unlockPageFlip
    - handleTransaction now returns a dirty region
    - computevisibileregion now uses window-manager space
    Only set acquire fences on overlay layers
    
    Change-Id: I08e8173f83580de5a4e43a0ba5ea03e5ec6e8782
    get rid of GraphicPlane
    
    its functionality is now folded into DisplayHardware
    there will be more changes in that area.
    First prototype atttempting to support an external display
    
    both API and implementation will change, this is just a prototype
    intended to show feasability.
    
    SurfaceFlinger is passed an ISurfaceTexture through a new
    callback, it is in turn used to create an EGLSurface which
    surfaceflinger will draw into in addition to the main screen.
    
    Change-Id: Id0bbb0b854bb7bae44d57246a90b65d4567f9a21
    Transfer HWC release fences to BufferQueue
    
    After a HWC set, each SurfaceFlinger Layer retrieves the release fence
    HWC returned and gives it to the layer's SurfaceTexture. The
    SurfaceTexture accumulates the fences into a merged fence until the
    next updateTexImage, then passes the merged fence to the BufferQueue
    in releaseBuffer.
    
    In a follow-on change, BufferQueue will return the fence along with
    the buffer slot in dequeueBuffer. For now, dequeueBuffer waits for the
    fence to signal before returning.
    
    The releaseFence default value for BufferQueue::releaseBuffer() is
    temporary to avoid transient build breaks with a multi-project
    checkin. It'll disappear in the next change.
    
    Change-Id: Iaa9a0d5775235585d9cbf453d3a64623d08013d9
    Exit boot animation cleanly.
    
    The desc.txt file can now mark parts as 'must finish cleanly' by using
    'c' as the part line prefix rather than 'p'.  If so indicated, if the
    bootanimation is asked to quit it will do so only after waiting to
    finish that part.
    
    I considered either making init.c service killing smarter or promoting
    bootanim to be a bindable service with a requestExit method.  However,
    these changes are probably too big/risky given our ship date.  So
    I used a property as a mailbox between SurfaceFlinger and bootanim.
    
    Bug: 6679877
    Change-Id: Id7dca22caa50b450fff25ca94f7242d971034f41
    fix typo in makefile LOCAL_CFLAGS was spelled LOCAL_CLFAGS
    
    Change-Id: I58b96d28f608ce16fcad5ed0efb887e582779e03
    split-up Client.h out of SurfaceFlinger.h
    
    Change-Id: I1993bf23e417163749d886283563a93d50b361b4
    refactor HWComposer to break dependency with the HAL headers
    
    HWComposer must abstract the HWC HAL entirely, so that the
    HAL can continue to evolve (and break binary compatibility)
    without breaking SurfaceFlinger. The HWC data structure had
    leaked outside of HWComposer, this is now fixed.
    
    We now have an abstract interface that provide all the
    needed functionality, HWCompose provides concrete
    implementations of it based on the the HWC version.
    
    Change-Id: I40c4676dc986b682ede5520a1c60efe64037b0bb
    surfaceflinger: replace early suspend with binder call from PowerManager
    
    SurfaceFlinger will no longer directly synchronize with early suspend.
    Instead, PowerManagerService will synchronize with SurfaceFlinger to
    ensure that a black frame has been drawn on the display, and then
    trigger all early suspend handlers.
    
    Change-Id: I07acdd628440d23fdb69db94319ec5d65d3f4919
    SurfaceFlinger: remove all GLES scissor calls.
    
    Bug: 6576505
    Change-Id: I494b7627f2e271a234706bf49a9490f8ac56c77a
    we need to wait for vsync when doing the screen-off animation
    
    Bug: 6511421
    Change-Id: I7a85a55e66a3a8d9937df575e98a5efec01a634f
    SurfaceFlinger: add a crop to the layer state
    
    This change adds a crop rectangle specified in window coordinates to the layer
    state.  The all window pixels outside this crop rectangle are treated as though
    they were fully transparent.  This change also adds the plumbing necessary for
    WindowManager to set that crop.
    
    Change-Id: I582bc445dc8c97d4c943d4db8d582a6ef5a66081
    SF needs to render even if we don't have a h/w composer
    
    Bug: 6350574, 6361055
    Change-Id: Iab92cc31bab4771fca63619c8e3105c759535f72
    make sure to clear the framebuffer when using overlays
    
    Bug: 6354761, 6353719
    Change-Id: I0739de3fee7c54c14b294ffd768b70ee1f541d9e
    don't attempt to clip layers anymore using glScissor
    
    this seems to hurt performance on some GPU. this change
    might negatively affect performance on other GPUs though, but
    probably in less time-sensitive cases. If this becomes a
    problem it might become necessary to pre-clip the geometry
    (so that we don't have to use glScissor).
    
    This improves the rotation animation quite a bit.
    
    Change-Id: I5dbe1286f7ad858ef2c1e1ad9a07ee3f26c0b1f3
    get rid off preserve backbuffer optimization in SF
    
    this optimization didn't improve performance and in fact
    seemed to hurt more than anything else. it also made
    things a lot more complex as it introduced edges cases
    when switching to/from h/w composer.
    
    Change-Id: Iaafc235e175f5740cd98bff914d706e02ab88bb8
    make sure to repaint the screen when screen turns on
    
    Bug: 6336168
    Change-Id: Ic6f11b6bf6c3d849f5cb6ac95961d10d7f88e4ec
    make sure to repaint the screen when screen turns on
    
    Bug: 6336168
    Change-Id: Ic6f11b6bf6c3d849f5cb6ac95961d10d7f88e4ec
    Revert "handle surfaces posts independently from composition"
    
    This reverts commit 562f4b2c1e555b853997113bb54b21303d642bc6.
    
    Change-Id: I96efe11c2f0494ed2d57fc580e49c598d913830e
    handle surfaces posts independently from composition
    
    surfaceflinger will now handle each surface post
    as soon as possible and handle the composition
    itself at VSYNC time as usual.
    
    Change-Id: I6b1ae33fd56062d86e5419ebab8def0ca5803fbf
    make sure to disable VSYNC while screen is off
    
    Change-Id: If1894c43b0a39a2851e1280a35ae77bccd6d9abd
    rework screen on/off code
    
    Change-Id: I13f71e850592a588bbd4805b1830c503bd4decb4
    refactor / simplify EventThread
    
    Change-Id: I3981c6fba93b7b985174b2a7045e24db2c0b4428
    better workaround for bug: 6020860
    
    this prevents the GPU from running when composition
    is fully handled by overlays. this should improve
    animations a bit.
    
    Change-Id: If4ae584b7a3976e6bdd36e318686ac3940b6b075
    surfaceflinger: disable ddms debugging on pdk builds
    
    DDMS debugging depends on non-pdk apis, disable it when a pdk
    build is selected.
    
    Change-Id: I6376b5c4cf49f2c51f35f8d567f7c6d18daf893f
    rewrite density calculation code so it's understandable
    
    Change-Id: I1016cd5fd75355abe4ab879d04f4849bd2dd4122
    SurfaceTexture: Fully refactored from BufferQueue
    
    SurfaceTexture and BufferQueue are separate objects.
    
    Change-Id: I230bc0ae6f78d0f9b2b5df902f40ab443ed5a055
    add ATRACE logs for screenshots
    
    Change-Id: Ie8146c4d7608159e9d28b7338f9109b8fcdf955f
    fix surfaceflinger's dumpsys
    
    Change-Id: I7b95c3e04f145003f9c0eef321a21f3f36dfe835
    add more ATRACE
    
    Change-Id: I6cc5759fb0a05427680488fd12ae797e77644f3d
    Add tracing to various graphics components.
    
    This change adds ATRACE call tracing to BufferQueue,
    SurfaceTextureClient, SurfaceTexture, SurfaceFlinger, Layer, and EGL.
    
    Change-Id: I9d75ed26f5a3f0d1af635da38289520134cfbbb7
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    deprecate L_8, LA_88 and RGB_332 in sdk
    
    re-add support for pixelformats L_8, LA_88 and RGB_332 in libui
    for backward compatibility.
    
    This may or may not fix 6058926
    
    Bug: 6049685
    Change-Id: Ic1b8b4cc994522f7fe664da64c0ef76b98bc6d53
    workaround for an issue where the screen would flicker sometimes
    
    bug: 6020860
    Change-Id: I97807db66b66c5f4dcbed0df79d5d257cfc7c0bd
    fix an issue in SF where we could miss some updates
    
    Change-Id: I7d350bc05d1596655baddff3deaebaba58c9bcc0
    Return information about whether overlays are disabled.
    
    Change-Id: I85ae42e9f28461f5142cc6b3c8e25ff3f195805a
    fix a crasher when starting SF with the screen off
    
    SF could end-up in an infinite crash-loop during startup if it
    was stopped while the screen was off. This happened because
    the thread that manages screen blanking was started before
    other important pieces of SF were initialized.
    
    Change-Id: I0dded11dbf2395fdd57b673859a7aa0fa9eb32b6
    ui freeze workaround: reenable triple buffering mode
    
    we're seeing UI freezes when window updates and
    composition are separated. for now we workaround this
    by always doing a composition after window updates on
    vsync. triple buffering is reenabled for performance.
    
    Change-Id: I693d705000b7452489bb0b4918fbeadb9879315c
    improve SF dumpsys
    fix UI freezes
    
    In some situations SF would mark a window as "has a pending update"
    but would never process that update because the window is not
    visible (fully transparent, hidden by another window, etc...), this
    window would then be "stuck" until some other window updated.
    
    Change-Id: Ifa18a9aef3a53f2593b473556702688ae62d9503
    attempt to fix an ANR in various apps
    
    recent changes in SF introduced a hang where some windows would
    stop being refreshed.
    This is an attemp to fix that.
    
    Change-Id: I6aa32ac0d6f1c0a6aea8f6195825dc4f4e6f93f9
    separate transactions from updates
    
    with this changes, SF transactions are handled as soon as possible
    but do not trigger updates. the update is delayed until the next
    vsync.
    
    this allows us to work much better without requiring triple-buffering.
    
    Change-Id: I1fa10794d0cf742129f0877698b7b1e1f2ec7401
    SF now synchronizes to VSYNC
    
    Change-Id: Ic5e4f2ea9927ce133eef9499c03161325e9d02c5
    remove unneeded code
    
    Change-Id: I07e2fca7274d2e12bf5b4aee0050794bdb97a8b3
    added a few more commands to SF's dumpsys
    
    --latency-clear [name]
    clears the latency data for the specified layer or for
    all layers if none is specified
    
    --list
    prints the list of all layers regardless of their visibility
    
    Change-Id: I7c07ae020f838c173b98ee50f3fb3e93da78acbb
    improve SurfaceFlinger dumpsys
    
    It is now possible to say:
    
    dumpsys SurfaceFlinger --latency
    
    to print latency information about all windows
    
    dumpsys SurfaceFlinger --latency window-name
    
    to print the latency stats of the specified window
    
    for instance: dumpsys SurfaceFlinger --latency SurfaceView
    
    The data consists of one line containing global stats, followed by
    128 lines of tab separated timestamps in nanosecond.
    
    The first line currently contains the refresh period in nanosecond.
    Each 128 following line contains 3 timestamps, of respectively
    the app draw time, the vsync timestamp just prior the call to set and
    the timestamp of the call to set.
    
    Change-Id: Ib6b6da1d7e2e6ba49c282bdbc0b56a7dc203343a
    hack up frame latency measurement
    
    Change-Id: I6d9a466a23285304f0e229a5649815636ab5d6af
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)
    
    Change-Id: I26f76452ac49e2890b14d133c065493d8df0fb4a
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Get AID_GRAPHICS from right place
    
    Change-Id: I97b1754dc7260fec083275c71a8f71ebfb2cefa8
    SurfaceFlinger: set wrap mode on screenshot texture
    
    Some implementations of NPOT, particular those derived from core
    GLES2, require the wrap mode to be CLAMP_TO_EDGE.  Set the required
    wrap mode for the screenshot texture so it passes the completeness
    check.
    
    Change-Id: I735016123e4acaf54b40d1435bd70281cef88a31
    remove dead/usnused code
    
    Change-Id: I6fa2bc6ee01790abd2c1533f043d61a5e5c8d26e
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Use the standard CC_LIKELY and CC_UNLIKELY macros
    
    Several source files privately defined macros LIKELY and UNLIKELY in terms
    of __builtin_expect. But <cutils/compiler.h> already has CC_LIKELY and
    CC_UNLIKELY which are intended for this purpose.  So rename the private
    uses to use the standard names.
    
    In addition, AudioFlinger was relying on the macro expanding to extra ( ).
    
    Change-Id: I2494e087a0c0cac0ac998335f5e9c8ad02955873
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: Ib08fe86d23db91ee153e9f91a99a35c42b9208ea
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Improve the VSYNC api a bit.
    
    - add the ability to set the vsync delivery rate, when the rate is
    set to N>1 (ie: receive every N vsync), SF process' is woken up for
    all of vsync, but clients only see the every N events.
    
    - add the concept of one-shot vsync events, with a call-back
    to request the next one. currently the call-back is a binder IPC.
    
    Change-Id: I09f71df0b0ba0d88ed997645e2e2497d553c9a1b
    SurfaceFlinger: fix layer removal race condition
    
    Layer::lockPageFlip() and layer::onRemove() could be called on
    different threads and race such that lockPageFlip() successfully
    called mSurfaceTexture->updateTexImage() but then gets NULL back from
    mSurfaceTexture->getCurrentBuffer(), leading to a crash.
    
    This change moves Layer::onRemove() calls to
    SurfaceFlinger::commitTransaction() so they happen after the Layer is
    done being drawn from and only happen on the main surfaceflinger
    thread.
    
    Change-Id: I4b550caadff4cc1878d7c3bca6129193fb0c713e
    add a way to access the version string of the h/w implementation of EGL
    
    we use a hidden egl extension. the version string is printed
    in SF's dumpsys log.
    
    Change-Id: I123eb4bde6de462bb2404c67b74d6d6219a48d6a
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    Fix build.
    
    Revert "Add support for sending VSYNC events to the framework"
    
    This reverts commit f3918c5bd4bc9f02f74da42995564150ca2dd382.
    
    Change-Id: I998e3e1aa3fa310829ae973b64fe11b01f6f468f
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: If4126023fc9c067e56087ec7d16a8fd542ce1794
    rewrite SF's message loop on top of Looper
    
    Change-Id: Ib56139f87a5c0b124e34da5c8151207219b2577b
    Fix an issue where we could wait for a non-existing transaction
    
    This fixes the issue:
    "Call not sent" dialog takes too long to dismiss after hitting OK"
    
    Note: the system would recover after a 5 second timeout.
    
    Bug: 5534520
    Change-Id: Ifa37e594b50581f498479a5858672441b3d7dd87
    Fix rotation displays frame N-1 briefly while rotating
    
    The ScreenShot layer is now created hidden. The screenshot itself
    is aquired during the transaction when the layer is made visible.
    This guarantees the screenshot and the layer happen atomically
    with respect to screen updates.
    
    Bug: 5534521
    Change-Id: Ida23e1f13d5716ec83b78a15712e0646d6cf8729
    fix Corrupted graphics while playing You Tube on orientation change
    
    Bug: 5432124
    Change-Id: If948b9797b1ec6fff80ca5ea94508abcaced9f31
    mDirtyRegion is single threaded, but could be accessed from a hwc thread
    
    We now have mInvalidateRegion which holds the region to invalidate, it
    can be set from any thread as long as mInvalidateLock is held. We use
    fine-grained locking here because mInvalidateRegion can be set from anywhere,
    in particular frmo HWC callbacks.
    
    Bug: 5466774
    Change-Id: Iafca20aa3f5b25a87755e65bde7b769aa8f997bc
    mDirtyRegion is single threaded, but could be accessed from a hwc thread
    
    We now have mInvalidateRegion which holds the region to invalidate, it
    can be set from any thread as long as mInvalidateLock is held. We use
    fine-grained locking here because mInvalidateRegion can be set from anywhere,
    in particular frmo HWC callbacks.
    
    Bug: 5466774
    Change-Id: Iafca20aa3f5b25a87755e65bde7b769aa8f997bc
    added dpi and refresh rate info in SF's dumpsys
    
    Change-Id: I2327248eb1993689367e3daeaccba74c172dfceb
    Add a LayerScreenshot
    
    A LayerScreenshot is a special type of layer that contains a screenshot of
    the screen acquired when its created. It works just like LayerDim.
    
    Make sure to call compositionComplete() after rendering into a FBO.
    
    Bug: 5446982, 5467587, 5466259
    Change-Id: I5d8a1b4c327f9973d950cd4f4c0bca7f62825cd4
    Don't call hwc set() if there is nothing new to do
    
    there was situations where SF's main loop would run (as if there was
    an invalidate), but the dirty region was empty (so no new buffers
    were retired). In this case we return early and don't swap, which
    would cause drawing artifacts.
    
    Bug: 5476838
    Change-Id: Id3b7bf4b7aabec7919c50d9278eb2165973a4c3d
    Make sure set GL state properly
    
    when taking a screenshot, in particular, we could end up
    with stale GL state when drawing LayerDim which resulted
    in incortect rendering.
    
    Bug: 5467587
    Change-Id: Id9fbed2843481d31063620f3662b364c7e3ac781
    Revert "Add a LayerScreenshot"
    
    This reverts commit d6809f40cf61203573ec5dbc437f695cd132cc18.
    we need to guarantee that h/w comp set() is called when a buffer has been retired
    
    removed a test that could violate this guarantee. note that we
    have no proof tha this ever happened, but consequences could be
    hard lock-ups.
    
    the code here was intended to track the region to update for displays
    that can do partial update. the logic discarded the update entirely
    if that region was empty. instead we just redraw the whole thing
    (note that we should never be there with an empty region and retired
    buffers though).
    
    Bug: 5466259
    
    Change-Id: I91ccab3b1a599e729e438eb833939e2236da6854
    SurfaceFlinger: Remove display freezing code
    
    This change removes the dead code from SurfaceFlinger that resulted from
    disabling support for freezing the display.
    
    Change-Id: I4e5ff00c94b4c7a79af2f65c9850c135210068ed
    SurfaceFlinger: make sync transactions explicit
    
    This change enables a layer or orientation update transaction sent to
    SurfaceFlinger to explicitly request a synchronous transaction.
    
    Change-Id: I97cbba610c13679849f66114b216fa6dbf12f2a9
    Add a LayerScreenshot
    
    A LayerScreenshot is a special type of layer that contains a screenshot of
    the screen acquired when its created. It works just like LayerDim.
    
    Bug: 5446982
    Change-Id: I7814aff2380e7e146937f2b641907be2a30c76cc
    SurfaceFlinger: update orientation via transactions
    
    This change merges the ISurfaceComposer::setOrientation functionality
    into ISurfaceComposer::setTransactionState.  It enables the window
    manager to atomically update both the display orientation and the
    position and size of the windows in a single transaction with
    SurfaceFlinger.
    
    Bug: 5439574
    Change-Id: I18a8ccc564d7d760ef8afb2d015ccdb7a7963900
    fix an issue where the screen could stay off
    
    this would happen when toggling on/off/on very fast, the screen
    could stay black (while the panel is on).
    
    Bug: 5429724
    Change-Id: Ic8aa6aff066e6267923c0d47ef65e314e7bb6d41
    Fix screen off animation when in landscape
    
    Change-Id: I4bc5b12d7a64a4bf8b9a851594be4d60b790d1ed
    SurfaceFlinger: screenshots w/ protected buffers
    
    This change modifies SurfaceFlinger's screenshot behavior when a layer
    with a protected buffer is visible.  The previous behavior was to simply
    fail the screenshot.  The new behavior is to render the screenshot using
    a placeholder texture where the protected buffer would have been.
    
    Change-Id: I5e50cb2f3b31b2ea81cfe291c9b4a42e9ee71874
    don't clear the framebuffer when the framebuffer is not used
    
    when areas of the FB are undefined (transparent windows on top of
    nothing), we clear those areas before composition.
    however, it makes no sense to do this when the FB is not in use
    (case where hwc handles all layers)
    
    Bug: 5360529
    Change-Id: I761a7d3664228ebbee0944aca8b0cc278fc94c9c
    don't clear the framebuffer when the framebuffer is not used
    
    when areas of the FB are undefined (transparent windows on top of
    nothing), we clear those areas before composition.
    however, it makes no sense to do this when the FB is not in use
    (case where hwc handles all layers)
    
    Bug: 5360529
    Change-Id: If51bb669307e8419bbe1f3a89d1c88e0ec1f216c
    Handle orientation changes more systematically.
    Bug: 4981385
    
    Simplify the orientation changing code path in the
    WindowManager.  Instead of the policy calling setRotation()
    when the sensor determined orientation changes, it calls
    updateRotation(), which figures everything out.  For the most
    part, the rotation actually passed to setRotation() was
    more or less ignored and just added confusion, particularly
    when handling deferred orientation changes.
    
    Ensure that 180 degree rotations are disallowed even when
    the application specifies SCREEN_ORIENTATION_SENSOR_*.
    These rotations are only enabled when docked upside-down for
    some reason or when the application specifies
    SCREEN_ORIENTATION_FULL_SENSOR.
    
    Ensure that special modes like HDMI connected, lid switch,
    dock and rotation lock all cause the sensor to be ignored
    even when the application asks for sensor-based orientation
    changes.  The sensor is not relevant in these modes because
    some external factor (or the user) is determining the
    preferred rotation.
    
    Currently, applications can still override the preferred
    rotation even when there are special modes in play that
    might say otherwise.  We could tweak this so that some
    special modes trump application choices completely
    (resulting in a letter-boxed application, perhaps).
    I tested this sort of tweak (not included in the patch)
    and it seems to work fine, including transitions between
    applications with varying orientation.
    
    Delete dead code related to animFlags.
    
    Handle pausing/resuming orientation changes more precisely.
    Ensure that a deferred orientation change is performed when
    a drag completes, even if endDragLw() is not called because the
    drag was aborted before the drop happened.  We pause
    the orientation change in register() and resume in unregister()
    because those methods appear to always be called as needed.
    
    Change-Id: If0a31de3d057251e581fdee64819f2b19e676e9a
    fix transition from full overlays to fb
    
    we need to clear the whole framebuffer in that situation because
    we can't trust the content of the FB when partial (fb preserving)
    updates are used.
    
    Bug: 5318492
    
    Change-Id: I3f0e01b0fb665a34e44d88ad9f0f54a5d990060b
    rename mInvalidRegion to mSwapRegion
    
    Change-Id: I946cbc782c0c84645843ea44c3d8b04a0a2fe658
    improve hwc dumpsys
    
    we now log the buffer's format
    
    Change-Id: I9d3ad8018e884240a153de3baefb6331cb014d0f
    fix transition from full overlays to fb
    
    we need to clear the whole framebuffer in that situation because
    we can't trust the content of the FB when partial (fb preserving)
    updates are used.
    
    Bug: 5318492
    
    Change-Id: I3f0e01b0fb665a34e44d88ad9f0f54a5d990060b
    rename mInvalidRegion to mSwapRegion
    
    Change-Id: I946cbc782c0c84645843ea44c3d8b04a0a2fe658
    improve hwc dumpsys
    
    we now log the buffer's format
    
    Change-Id: I9d3ad8018e884240a153de3baefb6331cb014d0f
    Fix another problem with refreshing the screen when switching to/from overlay
    
    the previous fix was incorrect. See comment in setupHardwareComposer for
    full explanations.
    
    Change-Id: Ib24a9af000b8f95cf7319f9272d34997064ceb6d
    Improve SF dumpsys output wrt HWC
    
    Change-Id: Ibdb7930fa3b521bfd3f44750ed98cfd75f9a01fe
    Fix an issue is SF that caused drawing artifacts when hwc changed mode
    
    we were not redrawing and/or clearing the FB properly when
    hwc moved a layer from/to FB to/from OVERLAY.
    
    In these cases we needed to expand the dirty region to include
    the layer that changed mode.
    
    Also split composeSurfaces() which was becoming quite large.
    
    Change-Id: Id6fa1acfc4ff694037fddf7efd037a4405732073
    fix a bug that caused the off animation to not show sometimes
    
    this happened when the overlays were in use, since the animation
    is rendered in the FB and the FB is not used.
    
    we now have a way to turn hwc off temporarily.
    
    Change-Id: I3385f0c25bb9cc91948e7b26e7cd31ed18c36ace
    fix a bug that caused the off animation to not show sometimes
    
    this happened when the overlays were in use, since the animation
    is rendered in the FB and the FB is not used.
    
    we now have a way to turn hwc off temporarily.
    
    Change-Id: I3385f0c25bb9cc91948e7b26e7cd31ed18c36ace
    Fix various flickering / artifacts
    
    these were due to the "preserve backbuffer" optimization
    interfering with hw composer. basically the screen needed
    to be redrawn in the areas that move from GL to
    overlay.
    
    Bug: 5245513
    Change-Id: I9bf75c4fe905f3ef62005e52108b94edae692304
    Fix various flickering / artifacts
    
    these were due to the "preserve backbuffer" optimization
    interfering with hw composer. basically the screen needed
    to be redrawn in the areas that move from GL to
    overlay.
    
    Bug: 5245513
    Change-Id: I9bf75c4fe905f3ef62005e52108b94edae692304
    Fix screenshots
    
    Change-Id: If904634e64b154bbe336d5789dd1209b8ae871fb
    Fix Recent thumbnails aren't taken when leaving an activity via notification
    
    When taking screenshots we need to use the full drawing state list
    instead of the visible list.
    
    Bug: 5186823
    Change-Id: I214ee0203aaf8e2c038e44581f7f1ae36edf08c5
    Add a debug option to turn the "transformation hint" off
    
    transformation hint is disabled with:
    
       adb shell service call SurfaceFlinger 1009 i32 1
    
    Change-Id: I9aafe6f280f88ce41569ed69a06dc522b10e3a88
    fix "show screen update" debug option.
    
    Change-Id: I7d8b24124768b5f7d59d3bb0b019e9baaa0dfc4f
    NOTE: from now on, this also disable the h/w composer
    SurfaceTexture: fix queues-to-composer
    
    This change fixes the NATIVE_WINDOW_QUEUES_TO_WINDOW_COMPOSER query of
    Surface and SurfaceTextureClient.  Surface now uses the inherited
    SurfaceTextureClient implementation of this query.  SurfaceTextureClient
    now queries SurfaceFlinger to determine whether buffers that are queued
    to its ISurfaceTexture will be sent to SurfaceFlinger (as opposed to
    some other process).
    
    Change-Id: Iff187e72f30d454229f07f896b438198978270a8
    SurfaceTexture: fix queues-to-composer
    
    This change fixes the NATIVE_WINDOW_QUEUES_TO_WINDOW_COMPOSER query of
    Surface and SurfaceTextureClient.  Surface now uses the inherited
    SurfaceTextureClient implementation of this query.  SurfaceTextureClient
    now queries SurfaceFlinger to determine whether buffers that are queued
    to its ISurfaceTexture will be sent to SurfaceFlinger (as opposed to
    some other process).
    
    Change-Id: Iff187e72f30d454229f07f896b438198978270a8
    as a debug option SrufaceFlinger can now connect to DDMS
    
    this is disabled by default. To enable:
      setprop debug.sf.ddms 1
    
    this debug option requires to restart SurfaceFlinger
    
    Change-Id: Ic2f8050b29911b55bcd21721648b6978700c277d
    SurfaceFlinger doesn't rely on having a custom RefBase destructor
    
    we just use a message to the main thread to
    destroy our GLES state.
    clean-up. get rid ofunused code and members in Surface[Control].cpp
    
    Change-Id: Ia7790ae28af2c2ac99eae01c2c5044ace4a490a4
    dump GLES strings in SF dumpsys log
    
    Change-Id: I438d511159b2bd915c84954f30574340017d4f47
    fix screen on/off animation (again)
    
    - surfaceflinger now uses the GL-convention of
      placing the origin in the left-bottom corner
    
    - map texture coordinates of the screen capture
      properly
    
    - add the ability to control the animation
      speed through a debug property
    
    Bug: 4989276
    
    Change-Id: Ifb3297bb578078b47146fff666c01f85417e0d6f
    don't kill surfaceflinger when system process dies
    
    Change-Id: I2d3ed87b590f9ccea3fa4af41d92911de070b315
    return an error code with gralloc buffer allocation failures
    
    Change-Id: I471e5d37ea7a42fc8a0f93446ee3b4229da37807
    fix screen on/off animation, which was flipped
    
    Bug: 4673549
    Change-Id: Ia9766754687b89c1ee24b2dbe918c11290ebe038
    SF transactions are now O(1) wrt IPC instead of O(N).
    
    Change-Id: I57669852cbf6aabae244ea86940a08a5a27ffc43
    PermissionCache caches permission checks
    
    This is intended to absorb the cost of the IPC
    to the permission controller.
    Cached permission checks cost about 3us, while
    full blown ones are two orders of magnitude slower.
    
    CAVEAT: PermissionCache can only handle system
    permissions safely for now, because the cache is
    not purged upon global permission changes.
    
    Change-Id: I8b8a5e71e191e3c01e8f792f253c379190eee62e
    Revert "merge various SF fixes from gingerbread to honeycomb-mr2" (DO NOT MERGE)
    
    Also revert all dependent changes:
    This reverts commit 8e18668d14adf601cbe5973030c310ec23d88461.
    This reverts commit 69b4587bfbb3e98f793959d9123340360fa233a2.
    This reverts commit a9c9a4baf24700e8817d47d8ea8da1742caea0b5.
    This reverts commit 2c0042b666a969091c931614f2fc0dce2f1cfac8.
    This reverts commit f6c8206735e7e078461e5f2aef6e1a1446fdd075.
    This reverts commit 24855c09173a6caaec7dcedd0c2d7ce15121d39b.
    
    Change-Id: I33e699640f3f59e42fa03c99a9a1b7af0d27d4d8
    revert surfaceflinger leak fix as it uncovered a crasher on xoom (DO NOT MERGE)
    
    This reverts commit 52a43990880b27808bcf562afcc4209d34728e6e.
    
    Change-Id: I1856a48f863b051395b8091ddfd1e01292fa1b1e
    Revert "revert surfaceflinger leak fix as it uncovered a crasher on xoom"
    
    This reverts commit af6edba59e250adbdfa5b3c3be134f70d8c38a16.
    
    Change-Id: I7793d3ca8a4d20a2b188364f47854328ab5f586d
    revert surfaceflinger leak fix as it uncovered a crasher on xoom
    
    Bug: 4600244
    Change-Id: Ia68ebf0f243a051ff6a21b3863e3e5d259bbf7ac
    unify SurfaceTexture and Surface
    
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    Add SurfaceTexture logging
    fix onFrameAvailable
    fix a surface leak introduced by a failed merge (DO NOT MERGE)
    
    Bug: 4558502
    Change-Id: Ibf889d03caa806c34603ad45f135b78c3851f55c
    merge various SF fixes from gingerbread to honeycomb-mr2 (DO NOT MERGE)
    
      Fix a race that could cause GL commands to be executed from the wrong thread.
      RefBase subclasses can now decide how they want to be destroyed.
      Fix a race in SurfaceFlinger that could cause layers to be leaked forever.
      Fix a race-condtion in SurfaceFlinger that could lead to a crash.
    
    initial cherry-pick:
    resolved conflicts for merge of b9783b49 to honeycomb-plus-aosp
    
    Change-Id: I2a335e03fff219e35c18a7b0089b3a11d636576f
    Fix a race that could cause GL commands to be executed from the wrong thread.
    
    Bug: 4483050
    Change-Id: I37f0f3156059c208c6168ee6131d0e267d823188
    Fix a race in SurfaceFlinger that could cause layers to be leaked forever.
    
    The transaction flags were atomically read-and-cleared to determine if
    a transaction was needed, in the later case, mStateLock was taken to
    keep the current state still during the transaction. This left a small
    window open, where a layer could be removed after the transaction flags
    were checked but before the transaction was started holding the lock.
    In that situation eTraversalNeeded would be set but only seen during the
    next transaction cycle; however, because we're handling this transaction
    (because of another flag) it will be commited, "loosing" the information
    about the layer being removed -- so when the next transaction cycle due
    to eTraversalNeeded starts, it won't notice that layers have been removed
    and won't populated the ditchedLayers array.
    
    Bug: 4483049
    
    Change-Id: Ibb5989312f871339928ee1aa3f9567770d72969b
    Fix a race-condtion in SurfaceFlinger that could lead to a crash.
    
    Client::mLayers could be accessed from different threads.
    On one side from Client::attachLayer() which is currently
    called from a binder thread; on the other side from
    Client::detachLayer() which is always called from the main
    thread.
    
    This could lead to a corruption of Client::mLayers.
    
    We fix this issue by adding an internal lock to Client.
    
    Bug: 4483046
    
    Change-Id: I5262bf1124d9a65ec6f8ffd8e367356fc33a7536
    Fix a race that could cause GL commands to be executed from the wrong thread.
    
    Change-Id: Ia3d407f7bf2f5553f46cfdade70b7b0badb35beb
    Fix a race in SurfaceFlinger that could cause layers to be leaked forever.
    
    The transaction flags were atomically read-and-cleared to determine if
    a transaction was needed, in the later case, mStateLock was taken to
    keep the current state still during the transaction. This left a small
    window open, where a layer could be removed after the transaction flags
    were checked but before the transaction was started holding the lock.
    In that situation eTraversalNeeded would be set but only seen during the
    next transaction cycle; however, because we're handling this transaction
    (because of another flag) it will be commited, "loosing" the information
    about the layer being removed -- so when the next transaction cycle due
    to eTraversalNeeded starts, it won't notice that layers have been removed
    and won't populated the ditchedLayers array.
    
    Change-Id: Iedea9e25fee8dd98a0c5bd5ad41a20fcadf75b47
    Fix a race-condtion in SurfaceFlinger that could lead to a crash.
    
    Client::mLayers could be accessed from different threads.
    On one side from Client::attachLayer() which is currently
    called from a binder thread; on the other side from
    Client::detachLayer() which is always called from the main
    thread.
    
    This could lead to a corruption of Client::mLayers.
    
    We fix this issue by adding an internal lock to Client.
    
    Change-Id: Ib1317d7750ed5030e6f577efe34b69fc10198bd3
    Get rid of the "pid" parameter from createSurface
    
    Change-Id: I28635e3f803e6abe965d79998e305f54a202465d
    Fix a GraphicBuffer leak in SurfaceTexture
    
    This leak was intentional, it was there to deal with the fact that
    some gralloc implementations don't track buffer handles with
    file-descriptors so buffers needed to stay alive until there were
    registered, which is not guaranteed by binder transactions.
    
    In this new implementation, we use a small BBinder holding a
    reference to the buffer, which with tuck into the parcel. This forces
    the reference to stay alive until the parcel is destroyed, which
    is guaranteed (by construction) to happen after the buffer is
    registered.
    
    this allows the public facing API to not expose the previous hack.
    
    Change-Id: I1dd6cd83679a2b7457ad628169e2851acc027143
    Fix some const-ness and comments
    
    mDrawingState doesn't need to be accessed by the
    mStateLock, because by definition it's only accessed
    from the main thread.
    
    Similarily, the list of layers in the drawing state
    cannot change (ie: is const).
    
    Change-Id: I2e5da7f4d8caee7af7802b432cd45cc81c7c08b0
    SurfaceFlinger: Respect the PROTECTED gralloc bit.
    
    This change makes SurfaceFlinger treat layers for which the active
    buffer has the GRALLOC_USAGE_PROTECTED bit set as if they have the
    'secure' flag set.
    
    Change-Id: Ic60b6513a63e4bb92ec6ce9fd12fd39b4ba5f674
    Bug: 4081304
    revert the surface purgatory list and dependent changes.
    
    6d0f6cb Revert "Fix [3513017] in lockscreen but showing empty launcher (live wallpaper) only"
    6154412 Revert "partially fix [3306150] HTML5 video with H/W acceleration blackout (DO NOT MERGE)"
    37c2a37 fix [3408713] Dialog window invisible sometimes
    
    It looks like there is a surface leak, it's unclear where it is.
    Without those reverts, this would cause a leak of the associated buffers
    which is far more problematic. this change might hide the surface leak.
    
    Bug: 4078032
    Change-Id: Iedcda3ffcdd2f69d41047b5c3134c1e867ff90d7
    ANativeWindow: add queues-to-window-composer check.
    
    This change adds a new 'method' to the ANativeWindow interface to check
    whether buffers queued to the window will be sent directly to the system
    window compositor.
    
    Change-Id: I4d4b199e328c110b68b250029aea650f03c8724d
    Bug: 3495535
    Fix [3513017] in lockscreen but showing empty launcher (live wallpaper) only
    
    37c2a37 fix [3408713] Dialog window invisible sometimes
    d35c666 fix [3385504] Surface flinger hang when adding dim surface
    1723b04 fix [3389263] OMX.Nvidia.h264.decode fails to shutdown
    1b0114f fix a surface leak in SurfaceFlinger
    
    Bug: 3513017
    
    Change-Id: Ia13ed8c9cdcb1f484e177cdcaff687e7c88a10c3
    remove some logs
    
    Change-Id: Ia476184048ee419e19330a56dc8e6553189f6a24
    Prevent SurfaceFlinger from using layer token 31.
    
    Bug: 2964479
    Change-Id: I81e948924bff35b8b300d409f2c09f3779bcdeec
    [3418265] apply layer transformations to the DimLayer.
    
    with this change DimLayers will behave just like any other layer,
    in particular they'll respect the layer transformations.
    
    Change-Id: Icb4a1275e8bca9e3deb5f57c9f9219aaa69f9877
    fix [3385504] Surface flinger hang when adding dim surface
    
    Change-Id: I8e0cda414bcad5854d2ca5dde8370bfd8b2e5ea4
    fix [3361121] hang in glClear() - device unresponsive, OTA fails (DO NOT MERGE)
    
    Generally we never want to lock a buffer for write access if it is at
    the "head" on the surfaceflinger side. The only exception (1) is when
    the buffer is not currently in use AND there is at least one queued
    buffer -- in which case, SurfaceFlinger will never use said buffer
    anymore, because on the next composition around, it will be able to
    retire the first queued buffer.
    
    The logic above relies on SurfaceFlinger always retiring
    and locking a buffer before composition -- unfortunately this
    didn't happen during a screenshot.
    
    This could leave us in a situation where a buffer is locked by the
    application for write, and used by SurfaceFlinger for texturing,
    causing a hang.
    
    Here, we fix this issue by never assuming the exception (1), it was
    intended as an optimization allowing ANativeWindow::lockBuffer() to
    return sooner and was justified when most of SF composition was
    done in software. The actual buffer locking is now ensured by
    gralloc. We could have handled screenshots in a similar way to
    a regular composition, but it could have caused glitches on screen,
    essentially, taking a screenshot could cause to skip a frame.
    
    now that we removed the notion of a "inUse" buffer in surfaceflinger
    a lot of code can be simplified / removed.
    
    noteworthy, the whole concept of "unlockClient" wrt. "compositionComplete"
    is also gone.
    partially fix [3306150] HTML5 video with H/W acceleration blackout (DO NOT MERGE)
    
    We used to guarantee that a layer in SurfaceFlinger would never be
    destroyed before all references (to its ISurface) on the client
    side would be released. At some point, this guarantee got
    relaxed to allow to free gralloc resources sooner. This last
    change was incorrect, because:
    - in implementations with reference-counting the gralloc resources
    wouldn't be released anyways, until all the mapping were gone
    - in implementations without ref counting, the client side
    would most likely crash or do something bad
    - it also caused the SharedBufferStack slot to be reallocated
    to another surface, which could be problematic if the client
    continued to use the surface after the window manager destroyed it.
    
    So, we essentially reinstate the guarantee that layers won't be
    destroyed until after all references to their ISurface are
    released.
    
    NOTE: This doesn't entirely fix 3306150 because there is another
    problem there where the Browser continues to use a surface after it
    has been destroyed.
    
    also improve SurfaceFlinger 'dumpsys' log
    
    list the purgatory, which shows windows that have been closed,
    but for which the client still has references.
    fix a small bug that caused screenshot to show garbage in some cases (DO NOT MERGE)
    
    we were not clearing the screen entirely, which caused garbage when
    the screen wasn't entirely covered by windows.
    
    Change-Id: Ia7aa13c36a8a314e0e8427d419b16b9aa2165ddf
    workaround [3201922] display not on: log full of gralloc errors (DO NOT MERGE)
    
    we make sure to call compositionComplete after everytime we do
    composition with the GPU (even for the screenshot case), which is
    where the buffer locks are released.
    
    Change-Id: I450430d1e4d1ee9ce1023970642378c42cdcfa4c
    tone down the log spew regarding taking screenshots.
    
    Change-Id: I673806bda23eba6aab25f7505b7e0170afc9920b
    clean-up unneeded code
    
    now that we removed the notion of a "inUse" buffer in surfaceflinger
    a lot of code can be simplified / removed.
    
    noteworthy, the whole concept of "unlockClient" wrt. "compositionComplete"
    is also gone.
    
    Change-Id: I210413d4c8c0998dae05c8620ebfc895d3e6233d
    improve SurfaceFlinger 'dumpsys' log
    
    list the purgatory, which shows windows that have been closed,
    but for which the client still has references.
    
    Change-Id: I5168bb88cb328d5d77d71d0871deb9190f493126
    fix [3369743] SurfaceFlinger reads hardware composer hints before calling hwc.prepare()
    
    Change-Id: If3277c7b9d4cb8ef20d1706155fac7b87e64fb20
    Add logs when taking a screenshot to help tracking issue 3361121
    
    Change-Id: I61d1e072ebe7061ee1d7255f6121b684e2923d1b
    partially fix [3306150] HTML5 video with H/W acceleration blackout
    
    We used to guarantee that a layer in SurfaceFlinger would never be
    destroyed before all references (to its ISurface) on the client
    side would be released. At some point, this guarantee got
    relaxed to allow to free gralloc resources sooner. This last
    change was incorrect, because:
    - in implementations with reference-counting the gralloc resources
    wouldn't be released anyways, until all the mapping were gone
    - in implementations without ref counting, the client side
    would most likely crash or do something bad
    - it also caused the SharedBufferStack slot to be reallocated
    to another surface, which could be problematic if the client
    continued to use the surface after the window manager destroyed it.
    
    So, we essentially reinstate the guarantee that layers won't be
    destroyed until after all references to their ISurface are
    released.
    
    NOTE: This doesn't entirely fix 3306150 because there is another
    problem there where the Browser continues to use a surface after it
    has been destroyed.
    
    Change-Id: I305c830dd722b30a6d53cbf3a9c714fd3cf7eb06
    fix [3312683] Camera mirroring problem after switching from back to front camera
    
    the crop as well as buffer orientation can change at every frame, when that happens
    we need to reset the hwc HAL (ie: set the GEOMETRY_CHANGED flag).
    currently we achieve this by taking the same code path than an actual geometry change
    which is a bit more heavy than necessary.
    
    Change-Id: I751f9ed1eeec0c27db7df2e77d5d17c6bcc17a24
    Fix remote GraphicBuffer allocation in SurfaceFlinger.
    
    This change fixes a horrible hack that I did to allow application
    processes to create GraphicBuffer objects by making a binder call to
    SurfaceFlinger.  This change introduces a new binder interface
    specifically for doing this, and does it in such a way that
    SurfaceFlinger will maintain a reference to the buffers until the app is
    done with them.
    
    Change-Id: Icb240397c6c206d7f69124c1497a829f051cb49b
    Add the ISurfaceComposer::createGraphicBuffer IPC.
    
    This change adds a new binder method to the ISurfaceComposer interface.
    This IPC is intended to allow SurfaceFlinger clients to allocate gralloc
    buffers using SurfaceFlinger as a proxy to gralloc.
    
    Change-Id: Ide9fc283aec5da6268ba62cfed0c3319a50b640d
    fix a small bug that caused screenshot to show garbage in some cases
    
    we were not clearing the screen entirely, which caused garbage when
    the screen wasn't entirely covered by windows.
    
    Change-Id: Ie9ab9b94eabfa6cafddf45bb14bc733bdc8d35c0
    workaround [3201922] display not on: log full of gralloc errors
    
    while we're waiting for the real fix in the gralloc/gpu driver,
    this workaround should resolve the issue.
    
    we make sure to call compositionComplete after everytime we do
    composition with the GPU (even for the screenshot case), which is
    where the buffer locks are released.
    
    Change-Id: I3cb5ad67d48c81a23100172bab77e86a70e29152
    fix debug.sf.showbackground
    
    Change-Id: Ie4eeca006ad6d8030900d8cb0029e4d1c22474fb
    [3258939] Need snapshot to limit which layers are included
    
    Change-Id: Id7351a0e3f53dde99b291cffba553d89fd4d7ca9
    More clean-up. Get rid off the "blur" effect in SurfaceFlinger
    
    For multiple reason, this effect is not maintainable and was never
    used due to its abysmal performance. it'll be resurected when it can be
    implemented efficiently.
    
    Change-Id: Id4222c9b86c629275cdec18873ef07be8723b6d2
    remove support for PUSH_BUFFER surfaces and overlays
    
    the same functionality is now supported through
    the h/w composer HAL, and YUV support in the GPU.
    
    Change-Id: I8146605449954b8e8fd7f78810b7d873c2d8f5bf
    surfaceflinger: add support for gralloc dump hooks
    
    Change-Id: Ib6f539ed0132b70d040d653c03d52cc04249ac3c
    [317580] fix issue where the screen wouldn't be rotated properly in bypass mode
    
    In some situations, the screen transformation would not be
    applied while in bypass mode.
    
    Change-Id: I3d6dd52e4c12b11aae97b54bf8e2322536eee37f
    [3171580] SurfaceFlinger Bypass mode. (DO NOT MERGE)
    
    This is a poor's man precursor to the h/w composer HAL.
    Basically we detect when a window is full screen and in
    that case we bypass surfaceflinger's composition step, which
    yields to much improved performance.
    
    Change-Id: Ie03796ae81a1c951949b771c9323044b980cb347
    Remove a problematic empty update optimization.
    
    This change removes an optimization from SurfaceFlinger that skipped
    composition when it got window updates that had an empty dirty region.
    This optimization caused problems because it would skip the hwcomposer
    set call, which could leave the window's previous frame buffer bound to
    an overlay plane.  When the application subsequently dequeued and tried
    to lock its next buffer (which would be the buffer currently bound to
    the overlay), the lock call would block until the next hwcomposer set
    call (which may never happen).
    
    Change-Id: I563b626a1d52c1f30eb82489eae0ceb4edc79936
    Bug: 3138752
    [3095807] screen takes a long time to turn on
    
    turn on animation is now ~200 ms (12 frames).
    
    Change-Id: I49ca9e8d0afa566349d360b3b6c88f0d55aa6e75
    addresses parts of 3096779 and 3097475
    
    3097475: Animation setting should control the screen on animation
    3096779: CRT power-on animation can briefly show the top app instead of lockscreen
    
    There is now a parameter that controls wether the ON and/or OFF animation are
    performed. we also always clear the screen to black on power off, to make
    sure it won't briefly appear on power on.
    HOWEVER, 3096779 is not 100% fixed in the case where we're doing the animation
    because there is a race, where SF doesn't wait (b/c it doesn't know) for the
    framework to have redrawn the lockscreen.
    
    Change-Id: Ie0f02c9225fcdf24b1e8907e268eb7da2c5b0a03
    fix [3095607] Gingerbread screen turn-on animation does not show the last frame
    
    always redraw the screen entirely after the power-on animation, because:
    - the animation may not run (ie: on the emu)
    - the animation may not contain the video planes
    - the interpolation may not be perfect and not land exactly on the last frame
    
    Change-Id: I9ba40f537b1e94464f8a3ed6f81e7c2f552df51d
    may fix 3097381 and 3097482. don't abort on/off if the animation fails
    
    now that sf handles more of the screen on/off state, we don't want to abort
    because/if the animation fails for some reason (which will be the case on the
    emulator).
    
    Change-Id: I239e0a39cf8aff3074647e82db92de4a0bf0e494
    implement part of [3094280] New animation for screen on and screen off
    add support for screen on animation
    
    Change-Id: If50cf52ae04b95b42da7d74cf7fa96d5cb54d238
    turn off the electron beam
    
    Change-Id: I335fb6719f1d5a3f1c6f37a046fd1c2c4ed2bbc6
    refactored screenshot code
    
    the core screenshot function now can capture the screen at any lower resolution
    performing bilinear filtering.
    
    we also now have some client code to interface with the screenshot service.
    
    it's now possible to request a screenshot at a lower resolution.
    
    Change-Id: I33689bba98507ab928d0898b21596d0d2fe4b953
    refactored screenshot code
    
    the core screenshot function now can capture the screen at any lower resolution
    performing bilinear filtering.
    
    we also now have some client code to interface with the screenshot service.
    
    it's now possible to request a screenshot at a lower resolution.
    
    Change-Id: I5a3b0e431421800e3aad601d9af8f94adffbc71f
    add support for [1974164] Be able to take a screen shot on the device
    
    screenshots are taken using ISurfaceComposer::captureScreen() which returns
    the size of the screenshot and an IMemoryHeap containing the data.
    screenshots have limitations:
    - they will always fail if a secure window is up on screen
    - require GL_OES_framebuffer_object extension
    - in some situation, video planes won't been captured
    
    Change-Id: I741c68a2d2984fb139039301c3349e6780e2cd58
    dump HWC state in dumpsys
    
    Change-Id: Ifbb38ca1ac9685776250e01c8d02021b35af72cf
    add a way to toggle the h/w composer at runtime
    
    to DISABLE the h/w composer:
      adb shell service call SurfaceFlinger 1008 i32 1
    
    to ENABLE the h/w composer:
      adb shell service call SurfaceFlinger 1008 i32 0
    
    the state is dumped in "dumpsys SurfaceFlinger"
    
    Change-Id: I23e2242d42c6e3fd5261a83332dd900b189e38ce
    surfaceflinger / GL extensions cleanup
    
    Add correct enumerants for OES_EGL_image_external to glext.h.
    SurfaceFlinger now checks for the correct extension name.
    
    Change-Id: I2ba2728a01fa2260bd086d2df4316c68f694a9b1
    Add logging of various important graphics events
    
    There are 16 events logged in the event log:
    SF_APP_DEQUEUE_BEFORE
    SF_APP_DEQUEUE_AFTER
    SF_APP_LOCK_BEFORE
    SF_APP_LOCK_AFTER
    SF_APP_QUEUE
    
    SF_REPAINT
    SF_COMPOSITION_COMPLETE
    SF_UNLOCK_CLIENTS
    SF_SWAP_BUFFERS
    SF_REPAINT_DONE
    
    SF_FB_POST_BEFORE
    SF_FB_POST_AFTER
    SF_FB_DEQUEUE_BEFORE
    SF_FB_DEQUEUE_AFTER
    SF_FB_LOCK_BEFORE
    SF_FB_LOCK_AFTER
    
    all events log the buffer conserned and a timestamp in microseconds.
    
    by default the logging is not enabled, to turn it on:
    adb shell service call SurfaceFlinger 1006 i31 1
    adb shell setprop debug.graphic_log 1
    
    The effect is immediate in SurfaceFlinger, but applications need to be
    restarted.
    
    Change-Id: Ifc2e31f7aed072d9a7dede20ff2ce59231edbec1
    surfaceflinger: composite HWC_SKIP_LAYER layers
    
    Change-Id: I363ede63287ae903d66d0d419343f4ecd81bcc00
    surfaceflinger: unlock clients only after flip
    
    Change-Id: I039291a36f05bbaa02b29325d4012114abd784b9
    Change the framework to use the new camera preview path.
    
    This change makes the camera HAL interface take an ANativeWindow interface from
    which all the camera preview buffers will be allocated.  The framework code
    running in application processes now passes a Surface object rather than an
    ISurface to the camera server via Binder when setting the preview surface.  The
    camera server then forwards that Surface object (which implements the
    ANativeWindow interface) to the camera HAL, which uses it to communicate with
    SurfaceFlinger to allocate the camera preview buffers.
    
    Change-Id: Ie438f721559cd7de5e4f848a26d96360dda07b5f
    Squashed commit of the following:
    
    commit 35cc68814a9537c31fde146e171e7b0bbdfe211e
    Author: Andreas Huber <andih@google.com>
    Date:   Mon Aug 16 08:48:42 2010 -0700
    
        Only enable support for yuv to yuv conversion on passion, where it's available, use the slower yuv->rgb565 path everywhere else.
    
    commit d8ac5a8814103e60d11d2acf61997fc31a1dc58d
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 13 13:56:44 2010 -0700
    
        The software renderer takes over all rendering, converting from yuv to yuv if possible and rgb565 otherwise.
    
    commit 684972074b74318bdcb826ed9b5b0864d2d2e273
    Author: Andreas Huber <andih@google.com>
    Date:   Fri Aug 13 09:34:35 2010 -0700
    
        A first shot at supporting the new rendering APIs.
    
    Change-Id: Iea9b32856da46950501f1a700f616b5feac710fd
    revert hwcomposer HAL changes. DO NOT MERGE.
    
    This reverts commit:
    94364b91a2894bf037b8beb027132fbb812e1434
    f8e705dea48f77f1c2532fdbadd4997dd1851af0
    b59beb5ca68d0228f60dda60d85e2d0226b33215
    e0d5f5bcf5a8b26f4ad75f549cbf380b2c9faf20
    surfaceflinger: don't check HWComposer numLayers unless one exists
    
    Change-Id: I4b83f7bf7ba1318c70054117f14e759fe0ad105c
    surfaceflinger: don't check HWComposer numLayers unless one exists
    
    Change-Id: I6524f46910b761cff3ef696edf5a65a424879faa
    Fix a couple issues with the new hwcomposer HAL
    
    - we now clear the framebuffer upon request from the HAL
    - the HAL list size could get out of sync with reality
    - there was also an issue where sometime we could run past the list
    
    Change-Id: Ic3a34314aed24181f2d8cc787096af83c046ef27
    call into hwcomposer HAL when present
    
    Change-Id: I70f31c69a9436a43860e78977442863ecba6d27b
    get rid of our LayerVector implementation
    
    we now use SortedVector<> with a special compare implementation.
    
    Change-Id: I910459cf3b3c8993b55ad0786a8c348369262de5
    keep a list of visible sorted surfaces
    
    Change-Id: Ib815eeff894f8a3b1e79fbbf8186d5d91bb60285
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    fix live wallpapers on Droid
    
    On omap3 h/w we force opaque formats to RGB_565 instead of RGBX_8888
    because the GL driver doesn't support it. RGBX_8888 is always remapped
    to RGBA_8888.
    
    Change-Id: I0bfabeb98c8d3a399079e6797cf2a0ee95915324
    Revert "Revert "fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger""
    
    This reverts commit 330dd304a471d260a73e342a240921c03c825f99.
    Revert "fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger"
    
    This reverts commit 081bc5c47d8a980e6eafa70ddafcd89981586391.
    Revert "am 256fc043: am 081bc5c4: fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger"
    
    This reverts commit e02dec8c4cbab17d09983af1328308b8aa61ef85, reversing
    changes made to 6d7a052fb04b251c517d0a9049b8d5d7408ce8c0.
    
    Bug: 2798567
    fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger
    
    Make sure to not use GL_TEXTURE_EXTERNAL when it's not supported
    by the GL. The error was harmless, but annoying.
    
    Change-Id: I571a9a9b05d35da51420950a6a6e95629067efd0
    Added support for the GL_TEXTURE_EXTERNAL target
    
    This will allow us to support YUV surfaces.
    
    Change-Id: I2d4da75f1006a5285bdc552695d4caeecccf2183
    allow re-targetting of surfaces
    
    Surfaces can now be parcelized and sent to remote
    processes. When a surface crosses a process
    boundary, it looses its connection with the
    current process and gets attached to the new one.
    
    Change-Id: I39c7b055bcd3ea1162ef2718d3d4b866bf7c81c0
    fix [2751143] Device crashes when in a text box for too long
    split surface management from surface's buffers management
    
    Change-Id: If3c5655d1231f8f0c49ba68f972b1b20c93b3f87
    clean-up client management.
    
    simplified things a lot, the biggest change is that the concept
    of "ClientID" is now gone, instead we simply use references.
    
    Change-Id: Icbc57f80865884aa5f35ad0d0a0db26f19f9f7ce
    more clean-up in preparation of bigger changes
    
    the most important change here is the renaming of
    ISurfaceFlingerClient to ISurfaceComposerClient
    
    Change-Id: I94e18b0417f50e06f21377446639c61f65f959b3
    fix the threading issue for setBuffercount()
    
    this change introduces R/W locks in the right places.
    on the server-side, it guarantees that setBufferCount()
    is synchronized with "retire" and "resize".
    on the client-side, it guarantees that setBufferCount()
    is synchronized with "dequeue", "lockbuffer" and "queue"
    more surfaceflinger cleanups
    
    get rid of the "fake rtti" code, and use polymorphism instead.
    also simplify how we log SF's state (using polymorphism)
    
    Change-Id: I2bae7c98de4dd207a3e2b00083fa3fde7c467922
    clean-up surfaceflinger a bit
    
    get rid of the glDrawTexi path and use floating points instead of fixed point maths
    
    Change-Id: I3aa9ce2dc082f702160e605a16ba5fe987cdf087
    Make pixels prettier.
    
    Change-Id: If3b0774b70cbe943894c15ffa1da111ad887010f
    fix [2511580] Window poop on screen - drop down list left some residual when it resized
    
    Change-Id: Ib9a3622e7a568ba26717a93b5bfa4a191651f4d0
    improve SF logging/debugging a little bit
    
    Change-Id: I6a57f89c25defc293fd748cc1fbd710031c02ec2
    fix [2425395] portrait UI briefly shows in landscape
    
    the "freeze" timeout was not initialized properly which caused it
    to kick-in immediately instead of after 5s
    Added a name to Surface created by SurfaceFlinger
    
    Updated the window manager to use this new facility.
    Surfaces name are now printed by "dumpsys".
    to help debugging [2461567] Home screen redraw messed up
    
    log SF's idea of the front buffer in dumpsys.
    remove a dependency of surfaceflinger on libskia
    
    libskia was only used for a small part of SkTransform. We now implement
    Transform is surfaceflinger directly.
    Add support for physically rotated displays
    
    This feature is currently controled by a system property.
    "ro.sf.hwrotation" can be set to either 90 or 270. It'll cause
    SF to rotate the screen by 90 and 270 degres respectively.
    
    That is, if the driver reports 800x480 for instance, and
    ro.sf.hwrotation is set to 90, applications will "see" a
    480x800 display and will run in portrait.
    
    This is implemented by introducing an extra "display"
    transformation in the GraphicPlane.
    android-2.1_r1 snapshot
    fix [2297155] SurfaceFlinger's freeze-timeout doesn't work
    
    There was bug in the logic that calculated the relative timeout, the start time was
    reset each time an event was received, which caused the timeout to never occur if
    an application was constantly redrawing.
    
    Now we always check for a timeout when we come back from the waitEvent() and
    process the "anti-freeze" if needed, regardless of whether an event was received.
    eclair snapshot
    fix [2167050] glTexImage2D code path buggy in SurfaceFlinger
    
    When EGLImage extension is not available, SurfaceFlinger will fallback to using
    glTexImage2D and glTexSubImage2D instead, which requires 50% more memory and an
    extra copy. However this code path has never been exercised and had some bugs
    which this patch fix.
    
    Mainly the scale factor wasn't computed right when falling back on glDrawElements.
    We also fallback to this mode of operation if a buffer doesn't have the adequate
    usage bits for EGLImage usage.
    
    This changes only code that is currently not executed. Some refactoring was needed to
    keep the change clean. This doesn't change anything functionaly.
    Attempt to fix [2152536] ANR in browser
    
    The ANR is caused by SurfaceFlinger waiting for buffers of a removed surface to become availlable.
    When it is removed from the current list, a Surface is marked as NO_INIT, which causes SF to return
    immediately in the above case. For some reason, the surface here wasn't marked as NO_INIT.
    
    This change makes the code more robust by always (irregadless or errors) setting the NO_INIT status
    in all code paths where a surface is removed from the list.
    
    Additionaly added more information in the logs, should this happen again.
    attempt to work around [2155085, 2150246] stuck in closeTransaction()
    remove unused code
    don't emit GL commands when sf is in freeze mode
    
    We were emitting GL commands, calling composition complete and releasing clients
    without ever calling eglSwapBuffers(), which is completely wrong on non-direct
    renders. This could cause transient drawing artifacts when unfreezing the
    screen (upon orientaion change for instance) and could also block the clients
    for ever as they are waiting for their previous buffer to be rendered.
    minor SurfaceFlinger code cleanup and remove unnecessary tests
    turn dithering off if it's not needed
    fix [2133214] STOPSHIP: revert I4a06bb4f: workaround for [2113743] Sholes: frozen then runtime restart going to list view
    
    Revert "workaround for [2113743] Sholes: frozen then runtime restart going to list view"
    
    This reverts commit 4a06bb4f3355b0ef2b76aa883704da9d154c44ae.
    workaround for [2113743] Sholes: frozen then runtime restart going to list view
    Android side of the fix for [2121211] Sholes has stutter during animations
    
    a new method, compostionComplete() is added to the framebuffer hal, it is used by surfaceflinger to signal the driver that the composition is complete, BEFORE it releases its client. This gives a chance to the driver to
    add basic time stats for surfaces lock time
    fix [2117464] SF can crash when calling dumpsys
    fix [2112575] stuck on DequeueCondition for a surface that doesn't exist anymore
    
    this also fixes part of [2111536] Device is soft rebooted after ending the call through voice dialer
    fix [2068105] implement queueBuffer/lockBuffer/dequeueBuffer properly
    
    Rewrote SurfaceFlinger's buffer management from the ground-up.
    The design now support an arbitrary number of buffers per surface, however the current implementation is limited to four. Currently only 2 buffers are used in practice.
    
    The main new feature is to be able to dequeue all buffers at once (very important when there are only two).
    
    A client can dequeue all buffers until there are none available, it can lock all buffers except the last one that is used for composition. The client will block then, until a new buffer is enqueued.
    
    The current implementation requires that buffers are locked in the same order they are dequeued and enqueued in the same order they are locked. Only one buffer can be locked at a time.
    
    eg. Allowed sequence:   DQ, DQ, LOCK, Q, LOCK, Q
    eg. Forbidden sequence: DQ, DQ, LOCK, LOCK, Q, Q
    attempt to fix [2099362] Possible SurfaceFlinger crash
    dumpsys SurfaceFlinger will now always dump SF's state, even if SF is deadlocked
    (in this case the state is dumped without the proper locks held which could result to a crash)
    
    in addition, the last transaction and swap times are printed to the dump as well as the time spent
    *currently* in these function. For instance, if SF is unresponsive because eglSwapBuffers() is stuck,
    this will show up here.
    fix a bug that caused the PixelFormat viewed by Surface to be wrong.
    
    what happened is that the efective pixel format is calculated by SF but Surface nevew had access to it directly.
    in particular this caused query(FORMAT) to return the requested format instead of the effective format.
    donut snapshot
    donut snapshot
    fix [2017532] Partial Update leaves residual image.
    donut snapshot
    fix for [1885684] E/SurfaceFlinger( 60): not enough memory for layer bitmap size=4294938624
    get rid of references to MemoryDealer in SurfaceFlinger
    free gralloc buffers as soon as possible (when a surface is not visible any longer), client who have the buffers still mapped won't crash, btu may see garbage data
    fix a bug that caused artifacts when SWAP_RECTANGLE was enabled
    fix [1947273] the DimLayer causes the whole screen to update during transactions
    fix [1947273] the DimLayer causes the whole screen to update during transactions
    fix an update bug with SHOW_UPDATE debug feature. Fix a problem with the debug binder codes too
    fix a memory corruption where a SF Client could be used after it's been destroyed
    release the last reference to surfaces explicitely instead of letting it go implicitely when the message is destroyed
    new Permission class used to improve permission checks speed (by caching results)
    fix a bunch of problems with destroying surfaces.
    
    now, all destruction path, go through the purgatory which is emptied when ~ISurface is called, but we also make sure to remove the surface from the current list from there (in case a client forgot to request the destruction explicitely).
    split boot animation out of SurfaceFlinger
    
    Conflicts:
    
            data/etc/platform.xml
    move libbinder's header files under includes/binder
    donut snapshot
    Region now has its own implementation instead of relying on SkRegion, which allows us to break libui's dependency on libcorecg.
    created an new EGL extension called ANDROID_swap_rectangle
    
    ANDROID_swap_rectangle allows to specify the rectangle affected by eglSwapBuffers(), anything outside of this rectangle is unchanged. in particular EGL_BUFFER_DESTROYED only applies to that rectangle. This extension as well as EGL_BUFFER_PRESERVED allow major optimizations on surfaceflinger, which can redraw only the dirty area during compositing.
    
    However, ANDROID_swap_rectangle allows further optimizations in EGL by reducing the amount of copy-back needed. ANDROID_swap_rectangle is particularily important for software implementations.
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    make use of the perfectly fine List.h instead of our own reimplementation of a linked list.
    fix 1803886 android15 Translucent GLSurfaceView demo does not display properly
    get rid of an old hack to work around a bug around glDeleteTextures() in the adreno drivers
    get rid of the "show fps" debug option
    Surfaces are now destroyed properly in SurfaceFlinger.
    
    First, the window manager tells us when a surface is no longer needed. At this point, several things happen:
    - the surface is removed from the active/visible list
    - it is added to a purgatory list, where it waits for all clients to release their reference
    - it destroys all data/state that can be spared
    
    Later, when all clients are done, the remains of the Surface are disposed off: it is removed from the purgatory and destroyed.
    In particular its gralloc buffers are destroyed at that point (when we're sure nobody is using them anymore).
    a brand new MessageQueue for SurfaceFlinger.
    more Surface lifetime management
    
    Surfaces are now destroyed once all references from the clients are gone, but they go through a partial destruction as soon as the window manager requests it.
    This last part is still buggy. see comments in SurfaceFlinger::destroySurface()
    more splitting of Surface/SurfaceControl. Surface.java is now implemented in terms of Surface and SurfaceControl.
    
    The WindowManager side of Surface.java holds a SurfaceControl, while the client-side holds a Surface. When the client is in the system process, Surface.java holds both (which is a problem we'll try to fix later).
    fix a few typos in comments. this is really intended as a git pull/push test.
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    AI 143320: am: CL 143171 am: CL 142873 fix [1732012] Only show screen rotation animation when triggered by sensor
      Original author: mathias
      Merged from: //branches/cupcake/...
      Original author: android-build
      Merged from: //branches/donutburger/...
    
    Automated import of CL 143320
    AI 143309: am: CL 143160 am: CL 142856 new-new-new-new rotation animation. it may still change one more time.
      Original author: mathias
      Merged from: //branches/cupcake/...
      Original author: android-build
      Merged from: //branches/donutburger/...
    
    Automated import of CL 143309
    AI 143171: am: CL 142873 fix [1732012] Only show screen rotation animation when triggered by sensor
      Original author: mathias
      Merged from: //branches/cupcake/...
    
    Automated import of CL 143171
    AI 143160: am: CL 142856 new-new-new-new rotation animation. it may still change one more time.
      Original author: mathias
      Merged from: //branches/cupcake/...
    
    Automated import of CL 143160
    Automated import from //branches/cupcake/...@142873,142873
    Automated import from //branches/cupcake/...@142856,142856
    Automated import from //branches/master/...@142447,142447
    Automated import from //branches/donutburger/...@142446,142446
    Automated import from //branches/master/...@141504,141504
    Automated import from //branches/donutburger/...@141502,141502
    Automated import from //branches/cupcake/...@142445,142445
    auto import from //branches/cupcake_rel/...@141571
    auto import from //branches/cupcake/...@137873
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@131421
    auto import from //branches/cupcake/...@130745
    Add missing <limits.h> include
    
    This should fix the build for gcc 4.3.2
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    color blindness enhancement
    
    This is an attempt at improving the experience of
    users with color vision impairement.
    
    At this time this feature can only be enabled for
    debugging:
    
      adb shell service call SurfaceFlinger 1014 i32 PARAM
    
      with PARAM:
       0 : disabled
       1 : protanomaly/protanopia simulation
       2 : deuteranomaly/deuteranopia simulation
       3 : tritanopia/tritanomaly simulation
      11, 12, 13: same as above w/ attempted correction/enhancement
    
    The enhancement algorithm tries to spread the "error"
    such that tones that would otherwise appear similar can be
    distinguished.
    
    Bug: 9465644
    
    Change-Id: I860f7eed0cb81f54ef9cf24ad78155b6395ade48
    implement display projection clipping in h/w composer
    
    - cropping to the projection's "viewport" is "simply"
      accomplished by intersecting it with the window crop
      expressed in layerstack space.
    
    Bug: 7149437
    Change-Id: I0e90b3f37945292314b5d78a8f134935967e8053
    Ensure that viewport and frame are initialized.
    
    onInitializeDisplays() was posting a transaction with changes
    to the display projection.  Unfortunately, it only set the
    display orientation field and left viewport and frame
    uninitialized.
    
    The uninitialized values flowed downstream and found themselves
    baked into a bogus DisplayDevice mGlobalTransform.  That transform
    was then applied to some Rects which were turned into Regions
    that were them combined with other Regions.
    
    Under certain situations, the uninitialized data might have
    a largish value, resulting in the creation of Regions with
    components in excess of the Region max-value limit of 0x7ffffff
    (note that this is not INT_MAX).  Later when performing a
    binary operation using the Region, the Spanner would loop
    indefinitely trying to figure out how to stuff a humongous
    region inside of a max-value region.  Not content to try
    just once, the Spanner would continue trying again and
    again, pegging the CPU and hanging surface flinger during boot.
    
    Insanity soon followed.
    
    Bug: 7130713
    Change-Id: I0016f0c9662185be833474c212a1dd408096ae23
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    fix Surface positions are not floats
    
    Added Surface.setPosition(float, float) which allows to set a surface's
    position in float.
    
    Bug: 5239859
    Change-Id: I903aef4ad5b5999142202fb8ea30fe216d805711
    fix a typo that prevented preserveRects() to work properly
    
    this caused drawing artifacts during the screen rotation
    animation of SurfaceView.
    
    Change-Id: Idcc996b6ca2e346135dd2264959670c0b086d4cb
    implement: "Add an ANativeWindow API for SurfaceFlinger to suggest an optimal buffer orientation"
    
    Bug: 4487161
    Change-Id: I883f34efe542c2a566d04966f873374f40c50092
    take the state transform into account with h/w composer hal
    
    if the state transform didn't preserve rectangles, we
    would still try to use h/w composer hal using the bounds
    of the transformed rect, which isn't correct.
    
    now we correctly fall back to composition.
    
    Change-Id: Iff78f4339ece415d4987e95a5717b04934d370ab
    really fix [3118445] Transform * Transform does not work as expected
    
    Two bugs were counter acting each other.
    - rotation matrices are on the left-hand side of multiplies
    - the transform of the overlay is applied before that of the layer
    
    Change-Id: Ia79bd368e9b719235c89ecf244ea263f01ce906a
    fix [3118445] Transform * Transform does not work as expected
    
    The problem wasn't in the multiply operator, but rather in the code
    that built the transform from the HAL bitmask.
    
    We now use the multiply operator to build the Transform from the bitmask,
    which guarantees, it'll always be correct.
    
    Also added a simple test for Transform.
    
    Change-Id: I09bf3b0e51d92f59d83ea91c4cc94fc2aa0bf227
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    clean-up surfaceflinger a bit
    
    get rid of the glDrawTexi path and use floating points instead of fixed point maths
    
    Change-Id: I3aa9ce2dc082f702160e605a16ba5fe987cdf087
    fix [2483456] Video orientation is wrong on Droid for some videos
    
    Change-Id: I450191f1335f57bffc51aff3e27295395847dbc0
    remove a dependency of surfaceflinger on libskia
    
    libskia was only used for a small part of SkTransform. We now implement
    Transform is surfaceflinger directly.
    Add an orientation parameter for overlay, so we can do camera preview in portrait mode.
    eclair snapshot
    Region now has its own implementation instead of relying on SkRegion, which allows us to break libui's dependency on libcorecg.
    AI 143309: am: CL 143160 am: CL 142856 new-new-new-new rotation animation. it may still change one more time.
      Original author: mathias
      Merged from: //branches/cupcake/...
      Original author: android-build
      Merged from: //branches/donutburger/...
    
    Automated import of CL 143309
    AI 143160: am: CL 142856 new-new-new-new rotation animation. it may still change one more time.
      Original author: mathias
      Merged from: //branches/cupcake/...
    
    Automated import of CL 143160
    Automated import from //branches/cupcake/...@142856,142856
    Automated import from //branches/master/...@142447,142447
    Automated import from //branches/donutburger/...@142446,142446
    Automated import from //branches/master/...@141504,141504
    Automated import from //branches/donutburger/...@141502,141502
    Automated import from //branches/cupcake/...@142445,142445
    auto import from //branches/cupcake_rel/...@141571
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    surfaceflinger: Check sideband stream changed to trigger sideband Layer update.
    
    BUG: 17382907
    Change-Id: I65fd037bd25238ae68a3976468ae7fd7ce49c562
    SurfaceFlinger: Prevent deadlock by updating an atomic layer set.
    
    Bug: 12934849
    
    Change-Id: I9dede7316f1e967de4140bd731ac810115ea302f
    Turn on support for async cursor update in surfaceflinger.
    
    If available, surfaceflinger will use the hwc setCursorPositionAsync()
    api to change the position of supported cursor layers outside of
    the usual prepare/set loop.
    
    Change-Id: Ib3fc5c0c390b3489ddbba202379840a1d2748917
    Add sticky transform to surfaceflinger.
    
    Bug: 15116722
    
    - Adds a sticky transform field that can be set from a
      SurfaceFlinger client Surface.  This transform is
      added to any transform applied to the Surface.
    
    Change-Id: Idaa4311dfd027b2d2b8ea5e2c6cba2da5779d753
    Update HWC dump format
    
    Shortens a few fields.  Displays the format as a string.
    
    Change-Id: Ib471f05603763e250bad165db610f8e173e8423a
    Adding render stats APIs to UiAutomation (framework native).
    
    bug:12927198
    
    Change-Id: Ibb1c07f7d89e11281e5c1f27f412a29ac6f9c4ab
    Remove deprecated BufferQueue constructor
    
    Bug: 13415624
    Change-Id: I9fe15e45daa7351f1db34ee75bfee6f19cb347d3
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    Allow "opaque" flag to be updated. DO NOT MERGE
    
    Moves the "opaque layer" from Layer to Layer::State.  This allows
    it to be updated as part of a transaction.
    
    Bug 12387406
    
    Change-Id: I0a114ce6adf77cd12fb08f96e0691b76c475768d
    Allow disabling layer rotation during screenshots
    
    Add the ability to ignore layers' transformation matrices during
    screenshot capture, which will allow the window manager to capture
    unrotated images for recents during the device rotation animation.
    
    Bug: 11805195
    Change-Id: I854d87bc84ca06ef9a054a454af1c080ee66fbb8
    Allow "opaque" flag to be updated
    
    Moves the "opaque layer" from Layer to Layer::State.  This allows
    it to be updated as part of a transaction.
    
    Bug 12387406
    
    Change-Id: I0a114ce6adf77cd12fb08f96e0691b76c475768d
    Encapsulate textures into their own Texture class
    
    the main reason for doing this is so that we can have
    access to informations about a texture (like its dimension)
    close to where we generate and use shaders in ES 2.0.
    Previously, there wasn't any way to get to a texture's size
    from a RenderEngine implementation.
    
    Bug: 8679321
    
    Change-Id: I388b338a70d07e3e8177dde248710ea1e4c82dff
    don't reallocate the mesh each time we use it
    
    the Mesh object can be part of each Layer (at least currently).
    also reworked the Mesh code a bit to make it easier to access
    the vertex data.
    
    Change-Id: I0490851ba898f0aa2e55b62958dcd8bdb535e98b
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    surfaceflinger: add frame duration logging
    
    Change-Id: Ib414a45e7e191f23a2726cbbbeb606e9ce68a3b5
    fix SF buffer cropping
    
    When a buffer had a crop (meaning its content is scaled to the window size)
    and a window crop was defined, the resulting crop couldn't be expressed
    properly because h/w composer's API was limited to integers, since
    this is fixed in h/w composer 1.3, we take adventage of this to
    make sure we get the correct crop.
    
    this bug could result in the buffer being scaled by an incorrect ratio and
    be slightly offset; moreover, it would produce different results from the
    GL code path, which is always correct.
    
    Change-Id: I8e20e00b6e26177d14f4ab4d2cd581e26c818892
    Refactor SF. Move all GL operations in their own class.
    
    this is the first step to add support for GLES 2.x, this
    change breaks the dependency of SF on GLES 1.x by moving
    all operation into their own class.
    
    Bug: 8679321
    
    Change-Id: I0d2741eca2cefe67dfd9cf837cac10c4d126928b
    clean-up SurfaceFlinger a bit
    
    - most methods on Layer didn't need to be virtual
    - more consistency in naming drawing/current state
    
    Change-Id: Ieb7b4951b40fc673b807994ed21ae4aea7281068
    Add a --color option to dumpsys SurfaceFlinger
    
    colorize a bit the output of dumpsys SurfaceFlinger to
    make it easier to read. Right now it will bold the
    title of each section and use green for the name of
    each layer.
    
    Change-Id: I0d9f18d115401cb45109d244ef3a278481f68cc6
    clean-up/simplify all dump() APIs
    
    remove the scratch buffer parameter and use
    String8::appendFormat() instead.
    
    Change-Id: Ib96c91617c8e7292de87433d15cf6232b7d591b0
    latch transparent region hint only when we get a new frame
    
    since the transparent region hint really depends on the
    content of the window containing the SurfaceView
    (it's calculated by the view hierarchy based on
    overlapping views), it makes sense to latch it only when
    the content of the window (the app) changes.
    
    This should help fixing drawing artifacts when changing the
    layout of a window containing a SurfaceView.
    
    Bug: 8511430
    Change-Id: Ic3aa668495293cb4d82a2cd7dcf3b6a337287678
    get rid of ISurface
    
    ISurface was only used to get the IGraphicBufferProducer from
    a Layer. It's now replaced by a BBinder subclass / IBinder and
    is only used as a handle to the surface, to both refer to it
    and manage its life-time.
    
    Also cleaned-up a bit the ISurfaceComposer interface and
    "create layer" code path.
    
    Change-Id: I68d0e02d57b862cffb31d5168c3bc10cea0906eb
    Get rid of LayerBase.
    
    The functionality of LayerBase and Layer is folded
    into Layer. There wasn't a need for this abstraction
    anymore.
    
    Change-Id: I66511c08cc3d89009ba4deabf47e26cd4cfeaefb
    Make LayerDim a regular Layer instead of a LayerBase
    
    this is in preparation to get rid of LayerBase entirely
    
    Change-Id: Ia051949fc5205fd87371331145356ee11598a597
    fold LayerBaseClient into LayerBase
    
    Change-Id: Ic745136522df59c42f0885fd969e75ea55d09f01
    rework screenshot API and implementation
    
    - SurfaceFlinger now supports to take a screenshot
      directly into an IGraphicBufferProducer
    
    - reimplement the IMemoryHeap screenshot on top
      of the above
    
    - reimplement LayerScreenshot such that its
      BufferQueue is directly used as the destination
      of the screenshot. LayerScreenshot is now a thin
      wrapper around Layer
    
    Bug: 6940974
    
    Change-Id: I69a2096b44b91acbb99eba16f83a9c78d94e0d10
    refactor the crop region for hwc is calculated/set
    
    - the crop region is now always calculated and set
      in LayerBase::setGeometry which uses new virtuals to
      access the "content" crop and transform (which are
      provided by the Layer subclass)
    
    Change-Id: Ib7769bdec0917dd248f926600c14ddf9ea84897a
    SurfaceFlinger: add win anim frame time tracking
    
    This change makes the 'dumpsys SurfaceFlinger --latency' command with no extra
    args dump the frame timestamp data for the most recent frames that
    SurfaceFlinger generated that included window animation transaction changes.
    
    Change-Id: I8bded1ea08a4cddefef0aa955401052bb9107c90
    Add some comments.
    
    Also, minor tweak to SurfaceTextureLayer.
    
    Change-Id: If616d5ee4e8226dd0e16c5dbb0e0f80db553110e
    Refactor SurfaceTexture a bit.
    
    Rearranges updateTexImage() so that the SurfaceFlinger-specific
    behavior is in a new SurfaceFlingerConsumer subclass.
    
    SurfaceTexture behavior should not be altered.  Instead of
    acquire-bind-release we now do acquire-release-bind, but since
    it's all done with the lock held there shouldn't be any
    externally-visible change.
    
    Change-Id: Ia566e4727945e2cfb9359fc6d2a8f8af64d7b7b7
    make transform hint multi-display aware
    
    if a layer is not mirrored, we now use its display
    as the source for the transfrom hint calculation
    instead of always using the default (main) display.
    
    this change does two thing:
    1) we make updateTransformHint take a DisplayDevice
       as a parameter instead of hard-coding the
       main display.
    
    2) each time we do a transaction that could change
       the hint, we go through all layers and
       figure out which display should be used for their
       transform hint.
    
    Bug: 7599344
    Change-Id: I9b04a95e6c372dd770bacf81d8ef6f8e31b87b83
    SurfaceFlinger: refactor frame time tracking
    
    This change moves the frame time history tracking code out of Layer and into a
    new class called FrameTracker.  It also changes the tracking to use signal
    timestamps from fences when available for more accurate results.
    
    Change-Id: I323c5f075c58bf86ce363b52af885ad0f6365f2b
    Change ConsumerBase's FrameAvailableListener to be a weak pointer
    
    This prevents strong reference cycles when the listener implementation also
    holds a strong pointer to the ConsumerBase
    
    Bug: 7425644
    Change-Id: I1514b13a32b18d421c902dddebec0765a989c55c
    add support hwc 1.1
    
    Bug: 7124069
    
    Change-Id: I53d705105c4ad8954d3f50ee4f4c8b7ec936b871
    Fix transform hints
    
    The hints were being set a little too late, so the pre-rotation stuff
    wasn't quite working.
    
    Bug 7054997
    
    Change-Id: Id8d5c626db7a76f768ba762a145b315878ee08e6
    Eradicate DisplayID.
    
    DisplayDevices are now keyed of the wp<IBinder> the client uses.
    DisplayID has now become DisplayType which is just used to identify
    physical displays (as opposed to virtual displays such as wifi displays).
    
    Change-Id: I0c5968f2c902dcd699a7e0afacf833ff070c12ea
    turn DisplayDevice into a reference-counted object
    
    it's safer this way because this object owns an
    EGLSurface which cannot be easily reference-counted.
    
    it also gives us the ability to sub-class it, which
    we might want to do soon.
    
    Change-Id: I07358bb052dc5a13b4f2196b2c2b6e6e94c4bb4f
    cleanups in preparation of bigger changes
    
    - fix typo drawForSreenshot misspelled
    - get rid of DisplayDeviceBase
    - removed unused or unneeded code
    - always pass a DisplayDevice to Layer methods that are called
      on a per-display basis (to make it clear that this could be
      called more than once per composition).
    
    Change-Id: Id948b7e09fe5c06db0e42d40d6ed75dd095c7f44
    rename DisplayHardware to DisplayDevice
    
    Change-Id: I3f7250cd914e0da4f9ec2c9403587bbe12f3cc62
    one more step towards multiple display support
    
    - remove dependency on cached state in validateVisibility
    - get rid of mVertices and mTransformedBounds
    - get rid of validateVisibility
    - get rid of unlockPageFlip
    - handleTransaction now returns a dirty region
    - computevisibileregion now uses window-manager space
    Only set acquire fences on overlay layers
    
    Change-Id: I08e8173f83580de5a4e43a0ba5ea03e5ec6e8782
    Pass fence to HWC on first use of buffer
    
    Also do a CPU-wait on the fence before using it for GL composition.
    
    Change-Id: I0f645a42a44803276cae11b904e5a26d65871562
    get rid of GraphicPlane
    
    its functionality is now folded into DisplayHardware
    there will be more changes in that area.
    Transfer HWC release fences to BufferQueue
    
    After a HWC set, each SurfaceFlinger Layer retrieves the release fence
    HWC returned and gives it to the layer's SurfaceTexture. The
    SurfaceTexture accumulates the fences into a merged fence until the
    next updateTexImage, then passes the merged fence to the BufferQueue
    in releaseBuffer.
    
    In a follow-on change, BufferQueue will return the fence along with
    the buffer slot in dequeueBuffer. For now, dequeueBuffer waits for the
    fence to signal before returning.
    
    The releaseFence default value for BufferQueue::releaseBuffer() is
    temporary to avoid transient build breaks with a multi-project
    checkin. It'll disappear in the next change.
    
    Change-Id: Iaa9a0d5775235585d9cbf453d3a64623d08013d9
    refactor HWComposer to break dependency with the HAL headers
    
    HWComposer must abstract the HWC HAL entirely, so that the
    HAL can continue to evolve (and break binary compatibility)
    without breaking SurfaceFlinger. The HWC data structure had
    leaked outside of HWComposer, this is now fixed.
    
    We now have an abstract interface that provide all the
    needed functionality, HWCompose provides concrete
    implementations of it based on the the HWC version.
    
    Change-Id: I40c4676dc986b682ede5520a1c60efe64037b0bb
    SurfaceFlinger: add a crop to the layer state
    
    This change adds a crop rectangle specified in window coordinates to the layer
    state.  The all window pixels outside this crop rectangle are treated as though
    they were fully transparent.  This change also adds the plumbing necessary for
    WindowManager to set that crop.
    
    Change-Id: I582bc445dc8c97d4c943d4db8d582a6ef5a66081
    SurfaceFlinger: tell SurfaceTex about filtering
    
    This change makes SurfaceFlinger set the filtering-enable on each layer's
    SurfaceTexture before querying the texture matrix to use for GLES composition.
    
    Change-Id: I40c3defd73ebf96e3cabb3bfdb1fc97f2036753a
    SurfaceTexture: Fully refactored from BufferQueue
    
    SurfaceTexture and BufferQueue are separate objects.
    
    Change-Id: I230bc0ae6f78d0f9b2b5df902f40ab443ed5a055
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    fix an issue in SF where we could miss some updates
    
    Change-Id: I7d350bc05d1596655baddff3deaebaba58c9bcc0
    separate transactions from updates
    
    with this changes, SF transactions are handled as soon as possible
    but do not trigger updates. the update is delayed until the next
    vsync.
    
    this allows us to work much better without requiring triple-buffering.
    
    Change-Id: I1fa10794d0cf742129f0877698b7b1e1f2ec7401
    added a few more commands to SF's dumpsys
    
    --latency-clear [name]
    clears the latency data for the specified layer or for
    all layers if none is specified
    
    --list
    prints the list of all layers regardless of their visibility
    
    Change-Id: I7c07ae020f838c173b98ee50f3fb3e93da78acbb
    improve SurfaceFlinger dumpsys
    
    It is now possible to say:
    
    dumpsys SurfaceFlinger --latency
    
    to print latency information about all windows
    
    dumpsys SurfaceFlinger --latency window-name
    
    to print the latency stats of the specified window
    
    for instance: dumpsys SurfaceFlinger --latency SurfaceView
    
    The data consists of one line containing global stats, followed by
    128 lines of tab separated timestamps in nanosecond.
    
    The first line currently contains the refresh period in nanosecond.
    Each 128 following line contains 3 timestamps, of respectively
    the app draw time, the vsync timestamp just prior the call to set and
    the timestamp of the call to set.
    
    Change-Id: Ib6b6da1d7e2e6ba49c282bdbc0b56a7dc203343a
    hack up frame latency measurement
    
    Change-Id: I6d9a466a23285304f0e229a5649815636ab5d6af
    SurfaceFlinger: Remove display freezing code
    
    This change removes the dead code from SurfaceFlinger that resulted from
    disabling support for freezing the display.
    
    Change-Id: I4e5ff00c94b4c7a79af2f65c9850c135210068ed
    SurfaceFlinger: set layer names on SurfaceTextures
    
    This change sets the SurfaceTexture name string to match that of the
    layer to which it belongs.
    
    Change-Id: Ib302d79e916a36ab1e54cb9ff477c3b857bd957b
    improve hwc dumpsys
    
    we now log the buffer's format
    
    Change-Id: I9d3ad8018e884240a153de3baefb6331cb014d0f
    improve hwc dumpsys
    
    we now log the buffer's format
    
    Change-Id: I9d3ad8018e884240a153de3baefb6331cb014d0f
    Add a debug option to turn the "transformation hint" off
    
    transformation hint is disabled with:
    
       adb shell service call SurfaceFlinger 1009 i32 1
    
    Change-Id: I9aafe6f280f88ce41569ed69a06dc522b10e3a88
    SurfaceTexture: fix queues-to-composer
    
    This change fixes the NATIVE_WINDOW_QUEUES_TO_WINDOW_COMPOSER query of
    Surface and SurfaceTextureClient.  Surface now uses the inherited
    SurfaceTextureClient implementation of this query.  SurfaceTextureClient
    now queries SurfaceFlinger to determine whether buffers that are queued
    to its ISurfaceTexture will be sent to SurfaceFlinger (as opposed to
    some other process).
    
    Change-Id: Iff187e72f30d454229f07f896b438198978270a8
    SurfaceTexture: fix queues-to-composer
    
    This change fixes the NATIVE_WINDOW_QUEUES_TO_WINDOW_COMPOSER query of
    Surface and SurfaceTextureClient.  Surface now uses the inherited
    SurfaceTextureClient implementation of this query.  SurfaceTextureClient
    now queries SurfaceFlinger to determine whether buffers that are queued
    to its ISurfaceTexture will be sent to SurfaceFlinger (as opposed to
    some other process).
    
    Change-Id: Iff187e72f30d454229f07f896b438198978270a8
    SurfaceFlinger doesn't rely on having a custom RefBase destructor
    
    we just use a message to the main thread to
    destroy our GLES state.
    use SurfaceTexture new scaling mode in SF
    
    SF now obeys SurfaceTexture's scaling mode instead
    of inferring it from the buffer's size
    
    Change-Id: I4d50e9851abedd7e64bfcfc8af9eefb9fb668529
    Revert "merge various SF fixes from gingerbread to honeycomb-mr2" (DO NOT MERGE)
    
    Also revert all dependent changes:
    This reverts commit 8e18668d14adf601cbe5973030c310ec23d88461.
    This reverts commit 69b4587bfbb3e98f793959d9123340360fa233a2.
    This reverts commit a9c9a4baf24700e8817d47d8ea8da1742caea0b5.
    This reverts commit 2c0042b666a969091c931614f2fc0dce2f1cfac8.
    This reverts commit f6c8206735e7e078461e5f2aef6e1a1446fdd075.
    This reverts commit 24855c09173a6caaec7dcedd0c2d7ce15121d39b.
    
    Change-Id: I33e699640f3f59e42fa03c99a9a1b7af0d27d4d8
    revert surfaceflinger leak fix as it uncovered a crasher on xoom (DO NOT MERGE)
    
    This reverts commit 52a43990880b27808bcf562afcc4209d34728e6e.
    
    Change-Id: I1856a48f863b051395b8091ddfd1e01292fa1b1e
    Revert "revert surfaceflinger leak fix as it uncovered a crasher on xoom"
    
    This reverts commit af6edba59e250adbdfa5b3c3be134f70d8c38a16.
    
    Change-Id: I7793d3ca8a4d20a2b188364f47854328ab5f586d
    revert surfaceflinger leak fix as it uncovered a crasher on xoom
    
    Bug: 4600244
    Change-Id: Ia68ebf0f243a051ff6a21b3863e3e5d259bbf7ac
    fix RefBase so it retains binary-compatibility with gingerbread
    
    Bug: 4595257
    Change-Id: I0d5e10f497e3f39868bff58f6ded510c38b44b12
    unify SurfaceTexture and Surface
    
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    Add SurfaceTexture logging
    fix onFrameAvailable
    fix RefBase so it retains binary-compatibility with gingerbread (DO NOT MERGE)
    
    Bug: 4595257
    Change-Id: I4773cf4fe59b2509db0ed733739eb6961d473b25
    fix RefBase so it retains binary-compatibility with gingerbread (DO NOT MERGE)
    
    Bug: 4595257
    Change-Id: I1db83149107d7dab1f0b7e73c684e0ff82e17e62
    merge various SF fixes from gingerbread to honeycomb-mr2 (DO NOT MERGE)
    
      Fix a race that could cause GL commands to be executed from the wrong thread.
      RefBase subclasses can now decide how they want to be destroyed.
      Fix a race in SurfaceFlinger that could cause layers to be leaked forever.
      Fix a race-condtion in SurfaceFlinger that could lead to a crash.
    
    initial cherry-pick:
    resolved conflicts for merge of b9783b49 to honeycomb-plus-aosp
    
    Change-Id: I2a335e03fff219e35c18a7b0089b3a11d636576f
    Fix a race that could cause GL commands to be executed from the wrong thread.
    
    Bug: 4483050
    Change-Id: I37f0f3156059c208c6168ee6131d0e267d823188
    Fix a race that could cause GL commands to be executed from the wrong thread.
    
    Change-Id: Ia3d407f7bf2f5553f46cfdade70b7b0badb35beb
    SurfaceFlinger: Respect the PROTECTED gralloc bit.
    
    This change makes SurfaceFlinger treat layers for which the active
    buffer has the GRALLOC_USAGE_PROTECTED bit set as if they have the
    'secure' flag set.
    
    Change-Id: Ic60b6513a63e4bb92ec6ce9fd12fd39b4ba5f674
    Bug: 4081304
    revert the surface purgatory list and dependent changes.
    
    6d0f6cb Revert "Fix [3513017] in lockscreen but showing empty launcher (live wallpaper) only"
    6154412 Revert "partially fix [3306150] HTML5 video with H/W acceleration blackout (DO NOT MERGE)"
    37c2a37 fix [3408713] Dialog window invisible sometimes
    
    It looks like there is a surface leak, it's unclear where it is.
    Without those reverts, this would cause a leak of the associated buffers
    which is far more problematic. this change might hide the surface leak.
    
    Bug: 4078032
    Change-Id: Iedcda3ffcdd2f69d41047b5c3134c1e867ff90d7
    Fix [3513017] in lockscreen but showing empty launcher (live wallpaper) only
    
    37c2a37 fix [3408713] Dialog window invisible sometimes
    d35c666 fix [3385504] Surface flinger hang when adding dim surface
    1723b04 fix [3389263] OMX.Nvidia.h264.decode fails to shutdown
    1b0114f fix a surface leak in SurfaceFlinger
    
    Bug: 3513017
    
    Change-Id: Ia13ed8c9cdcb1f484e177cdcaff687e7c88a10c3
    fix a surface leak in SurfaceFlinger
    
    SF kept a strong reference to ISurface until the
    window manager removed the surface from the screen.
    This fell appart when running standalone tests, that is
    when the window manager wasn't involved.
    
    When the window manager is around, it would clean-up surfaces
    even when an application died.
    
    with this change, SF is able to do its own cleanup without
    relying on the window manager.
    
    the change is very simple, we simply don't keep a reference
    to ISurface and make sure no more than one of them can
    be created.
    
    Change-Id: I61f2d7473bf8d4aa651549a846c34cdbb0d0c85a
    Correctly handle translucency of device-specific pixel formats
    
    Check requested format for device-specific formats, and assume (as
    documented in libhardware/include/hardware/hardware.h) this is opaque
    layer so no blending is necessary.
    
    Bug: 3215931
    Change-Id: Ib4dff8060ac522d201ff1e74807ac340c17d3fa7
    Protected surface API
    
    To be used by DRM framework, implemented by display HAL
    
    Change-Id: I054a07a94f4d5dbe792f3a597e2e49a100d90eb2
    fix [3361121] hang in glClear() - device unresponsive, OTA fails (DO NOT MERGE)
    
    Generally we never want to lock a buffer for write access if it is at
    the "head" on the surfaceflinger side. The only exception (1) is when
    the buffer is not currently in use AND there is at least one queued
    buffer -- in which case, SurfaceFlinger will never use said buffer
    anymore, because on the next composition around, it will be able to
    retire the first queued buffer.
    
    The logic above relies on SurfaceFlinger always retiring
    and locking a buffer before composition -- unfortunately this
    didn't happen during a screenshot.
    
    This could leave us in a situation where a buffer is locked by the
    application for write, and used by SurfaceFlinger for texturing,
    causing a hang.
    
    Here, we fix this issue by never assuming the exception (1), it was
    intended as an optimization allowing ANativeWindow::lockBuffer() to
    return sooner and was justified when most of SF composition was
    done in software. The actual buffer locking is now ensured by
    gralloc. We could have handled screenshots in a similar way to
    a regular composition, but it could have caused glitches on screen,
    essentially, taking a screenshot could cause to skip a frame.
    
    now that we removed the notion of a "inUse" buffer in surfaceflinger
    a lot of code can be simplified / removed.
    
    noteworthy, the whole concept of "unlockClient" wrt. "compositionComplete"
    is also gone.
    clean-up unneeded code
    
    now that we removed the notion of a "inUse" buffer in surfaceflinger
    a lot of code can be simplified / removed.
    
    noteworthy, the whole concept of "unlockClient" wrt. "compositionComplete"
    is also gone.
    
    Change-Id: I210413d4c8c0998dae05c8620ebfc895d3e6233d
    Fix a problem where hwc and GL composition could show a different buffer
    
    if a surface's buffers are reallocated, the current active buffer will
    end-up pointing on one of these until a new buffer is retired.
    
    we're now keeping a reference to the actual buffer until we retire a
    new one.
    
    Change-Id: Ib1703947e7a0340694d846e0962576318863b935
    fix [3223749] media server crashes when switching mode from video capture to still image capture
    
    there was an issue were in some situation SF would call prepare() on hwc
    with a NULL handle and never call prepare again.
    in this situation, we onw set the SKIP flag to make sure that hwc
    won't process this layer and as soon as we receive our first buffer we
    trigger a recompute of the visible regions which will end-up calling
    prepare() again.
    
    Change-Id: I6b400b2df79712408b9315a9859290c7fcb1609e
    [317580] fix issue where the screen wouldn't be rotated properly in bypass mode
    
    In some situations, the screen transformation would not be
    applied while in bypass mode.
    
    Change-Id: I3d6dd52e4c12b11aae97b54bf8e2322536eee37f
    [3171580] SurfaceFlinger Bypass mode. (DO NOT MERGE)
    
    This is a poor's man precursor to the h/w composer HAL.
    Basically we detect when a window is full screen and in
    that case we bypass surfaceflinger's composition step, which
    yields to much improved performance.
    
    Change-Id: Ie03796ae81a1c951949b771c9323044b980cb347
    [3171580] Fix two typos related to fixed-size buffers
    
    mFixedSize was never set, this bug was introduced during some "cleanup", in
    practice this could cause some issues when a fixed-size buffer was used and
    the window was resized.
    
    Layer::drawForSreenShot() had a typo that had no effect.
    
    mFixedSize was used to determine if filtering was needed, which was a bit too
    conservative and created a dependency between filtering and "fixed size" states
    which should exist.
    
    Now we enable filtering based on the size of the buffer vs. the size of the layer.
    
    Change-Id: I32044e91b0c944c1b137efdceb3f01dfaa78119d
    Implement reducing the buffer count of a Surface.
    
    Change-Id: I7f979c60c06d654aa8265002836277434bc1a64f
    Bug: 3095167
    refactored screenshot code
    
    the core screenshot function now can capture the screen at any lower resolution
    performing bilinear filtering.
    
    we also now have some client code to interface with the screenshot service.
    
    it's now possible to request a screenshot at a lower resolution.
    
    Change-Id: I33689bba98507ab928d0898b21596d0d2fe4b953
    refactored screenshot code
    
    the core screenshot function now can capture the screen at any lower resolution
    performing bilinear filtering.
    
    we also now have some client code to interface with the screenshot service.
    
    it's now possible to request a screenshot at a lower resolution.
    
    Change-Id: I5a3b0e431421800e3aad601d9af8f94adffbc71f
    revert hwcomposer HAL changes. DO NOT MERGE.
    
    This reverts commit:
    94364b91a2894bf037b8beb027132fbb812e1434
    f8e705dea48f77f1c2532fdbadd4997dd1851af0
    b59beb5ca68d0228f60dda60d85e2d0226b33215
    e0d5f5bcf5a8b26f4ad75f549cbf380b2c9faf20
    call into hwcomposer HAL when present
    
    Change-Id: I70f31c69a9436a43860e78977442863ecba6d27b
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    Revert "Revert "fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger""
    
    This reverts commit 330dd304a471d260a73e342a240921c03c825f99.
    Revert "fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger"
    
    This reverts commit 081bc5c47d8a980e6eafa70ddafcd89981586391.
    Revert "am 256fc043: am 081bc5c4: fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger"
    
    This reverts commit e02dec8c4cbab17d09983af1328308b8aa61ef85, reversing
    changes made to 6d7a052fb04b251c517d0a9049b8d5d7408ce8c0.
    
    Bug: 2798567
    fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger
    
    Make sure to not use GL_TEXTURE_EXTERNAL when it's not supported
    by the GL. The error was harmless, but annoying.
    
    Change-Id: I571a9a9b05d35da51420950a6a6e95629067efd0
    allow re-targetting of surfaces
    
    Surfaces can now be parcelized and sent to remote
    processes. When a surface crosses a process
    boundary, it looses its connection with the
    current process and gets attached to the new one.
    
    Change-Id: I39c7b055bcd3ea1162ef2718d3d4b866bf7c81c0
    split surface management from surface's buffers management
    
    Change-Id: If3c5655d1231f8f0c49ba68f972b1b20c93b3f87
    clean-up client management.
    
    simplified things a lot, the biggest change is that the concept
    of "ClientID" is now gone, instead we simply use references.
    
    Change-Id: Icbc57f80865884aa5f35ad0d0a0db26f19f9f7ce
    Make sure to use filtering while in fixed-size mode
    added the notion of fixed-size buffers
    
    the new native_window_set_buffers_geometry allows
    to specify a size and format for all buffers to be
    dequeued. the buffer will be scalled to the window's
    size.
    
    Change-Id: I2c378b85c88d29cdd827a5f319d5c704d79ba381
    fix the threading issue for setBuffercount()
    
    this change introduces R/W locks in the right places.
    on the server-side, it guarantees that setBufferCount()
    is synchronized with "retire" and "resize".
    on the client-side, it guarantees that setBufferCount()
    is synchronized with "dequeue", "lockbuffer" and "queue"
    SharedBufferStack now can grow up to 16 buffers.
    
    there is a new resize() api, which currently only allows growing.
    
    Change-Id: Ia37b81b73be466d2491ffed7f3a23cd8e113c6fe
    Refactor some code in surfaceflinger in preparation of upcoming changes
    
    the new TextureMagager class now handle texture creation and upload
    as well as EGL image creation and binding to GraphicBuffers. This is
    used indirectly by Layer and directly by LayerBuffer
    
    the new BufferManager class handles the set of buffers used for a
    Layer (Surface), it abstracts how many buffer there is as well as
    the use of EGLimage vs. regular texture ops (glTexImage2D).
    
    Change-Id: I2da1ddcf27758e6731400f6cc4e20bef35c0a39a
    remove the "memcpy" hack
    
    this hack was used for gpus that don't support cached buffers
    for s/w clients. currently we have no gpu with this issue.
    this removes quite a bit of complexity.
    
    Change-Id: I72564669f124f92805030e61983711f61c76b6d9
    more surfaceflinger cleanups
    
    get rid of the "fake rtti" code, and use polymorphism instead.
    also simplify how we log SF's state (using polymorphism)
    
    Change-Id: I2bae7c98de4dd207a3e2b00083fa3fde7c467922
    to help debugging [2461567] Home screen redraw messed up
    
    log SF's idea of the front buffer in dumpsys.
    eclair snapshot
        fix [2143798] Need to figure out how to do video
    
        Use EGLImageKHR instead of copybit directly.
        We now have the basis to use streaming YUV textures (well, in fact
        we already are). When/if we use the GPU instead of the MDP we'll
        need to make sure it supports the appropriate YUV format.
    
        Also make sure we compile if EGL_ANDROID_image_native_buffer is not supported
    fix [2211532] improves sholes graphics performance
    
    Instead of using glTex{Sub}Image2D() to refresh the textures, we're using an EGLImageKHR object
    backed up by a gralloc buffer. The data is updated using memcpy(). This is faster than
    glTex{Sub}Image2D() because the texture is not swizzled. It also uses less memory because
    EGLImageKHW is not limited to power-of-two dimensions.
    fix [2152536] ANR in browser
    
    A window is created and the browser is about to render into it the
    very first time, at that point it does an IPC to SF to request a new
    buffer. Meanwhile, the window manager removes that window from the
    list and the shared memory block it uses is marked as invalid.
    However, at that point, another window is created and is given the
    same index (that just go freed), but a different identity and resets
    the "invalid" bit in the shared block. When we go back to the buffer
    allocation code, we're stuck because the surface we're allocating for
    is gone and we don't detect it's invalid because the invalid bit has
    been reset.
    
    It is not sufficient to check for the invalid bit, I should
    also check that identities match.
    fix [2168528] enable glTexImage2D code path in SF for software-only buffers
    fix [2167050] glTexImage2D code path buggy in SurfaceFlinger
    
    When EGLImage extension is not available, SurfaceFlinger will fallback to using
    glTexImage2D and glTexSubImage2D instead, which requires 50% more memory and an
    extra copy. However this code path has never been exercised and had some bugs
    which this patch fix.
    
    Mainly the scale factor wasn't computed right when falling back on glDrawElements.
    We also fallback to this mode of operation if a buffer doesn't have the adequate
    usage bits for EGLImage usage.
    
    This changes only code that is currently not executed. Some refactoring was needed to
    keep the change clean. This doesn't change anything functionaly.
    Attempt to fix [2152536] ANR in browser
    
    The ANR is caused by SurfaceFlinger waiting for buffers of a removed surface to become availlable.
    When it is removed from the current list, a Surface is marked as NO_INIT, which causes SF to return
    immediately in the above case. For some reason, the surface here wasn't marked as NO_INIT.
    
    This change makes the code more robust by always (irregadless or errors) setting the NO_INIT status
    in all code paths where a surface is removed from the list.
    
    Additionaly added more information in the logs, should this happen again.
    turn dithering off if it's not needed
    fix [2112575] stuck on DequeueCondition for a surface that doesn't exist anymore
    
    this also fixes part of [2111536] Device is soft rebooted after ending the call through voice dialer
    fix [2068105] implement queueBuffer/lockBuffer/dequeueBuffer properly
    
    Rewrote SurfaceFlinger's buffer management from the ground-up.
    The design now support an arbitrary number of buffers per surface, however the current implementation is limited to four. Currently only 2 buffers are used in practice.
    
    The main new feature is to be able to dequeue all buffers at once (very important when there are only two).
    
    A client can dequeue all buffers until there are none available, it can lock all buffers except the last one that is used for composition. The client will block then, until a new buffer is enqueued.
    
    The current implementation requires that buffers are locked in the same order they are dequeued and enqueued in the same order they are locked. Only one buffer can be locked at a time.
    
    eg. Allowed sequence:   DQ, DQ, LOCK, Q, LOCK, Q
    eg. Forbidden sequence: DQ, DQ, LOCK, LOCK, Q, Q
    second take, hopefully this time it doesn't break one of the builds: "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    Revert "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    
    This reverts commit 8b76a0ac6fbf07254629ed1ea86af014d5abe050.
    SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything.
    
    This change makes SurfaceHolder.setType(GPU) obsolete (it's now ignored).
    Added an API to android_native_window_t to allow extending the functionality without ever breaking binary compatibility. This is used to implement the new set_usage() API. This API needs to be called by software renderers because the default is to use usage flags suitable for h/w.
    get rid of references to MemoryDealer in SurfaceFlinger
    checkpoint. bring back video/camera
    fix a memory corruption where a SF Client could be used after it's been destroyed
    Surfaces are now destroyed properly in SurfaceFlinger.
    
    First, the window manager tells us when a surface is no longer needed. At this point, several things happen:
    - the surface is removed from the active/visible list
    - it is added to a purgatory list, where it waits for all clients to release their reference
    - it destroys all data/state that can be spared
    
    Later, when all clients are done, the remains of the Surface are disposed off: it is removed from the purgatory and destroyed.
    In particular its gralloc buffers are destroyed at that point (when we're sure nobody is using them anymore).
    more Surface lifetime management
    
    Surfaces are now destroyed once all references from the clients are gone, but they go through a partial destruction as soon as the window manager requests it.
    This last part is still buggy. see comments in SurfaceFlinger::destroySurface()
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    implement: "Add an ANativeWindow API for SurfaceFlinger to suggest an optimal buffer orientation"
    
    Bug: 4487161
    Change-Id: I883f34efe542c2a566d04966f873374f40c50092
    unify SurfaceTexture and Surface
    
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    Add SurfaceTexture logging
    fix onFrameAvailable
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add rotation to surfaceflingers screen cap.
    
    + This is needed so that activity manager does not
      have to do cpu side rotations when capturing recents
      thumbnails.
    
    Change-Id: If998008e675ad01305db8399fd643cf4608b7025
    Destroy eglSurface before recreating.
    
    Bug: 16856208
    
    Change-Id: Ifb5c8997afab4bc922356a3542d1f899a2546855
    surfaceflinger: skip composition for empty frames
    
    By not committing the results of composition for empty frames, we
    avoid spitting out series of black frames for virtual displays that
    don't have visible layers. We still draw one black frame when going
    from having layers to not having any. In particular, this avoids
    having a series of empty frames due to re-compositing the primary
    display in the period between creating the virtual display and adding
    layers to it.
    
    Bug: 16786752
    Change-Id: I7e9b2ed2e407d8d49c7af736b447d4c6181b0ad8
    Allow for resizing of Virtual Displays.
    
    Modify SurfaceFlinger to use VirtualDisplaySurface in all cases when a virtual
    display is used. Add functionality in VirtualDisplaySurface to resize the
    buffers aquired in the QueueBufferOutput. Add transaction support in
    SurfaceFlinger for resize. Add the modification of the size in DisplayDevice.
    
    Change-Id: Iae7e3556dc06fd18d470adbbd76f7255f6e6dd6b
    Tested: None
    Modified SurfaceFlinger to implment setActiveConfig and getActiveConfig.
    
    This can be used to change the current display mode of the device.
    
    Change-Id: Icdc3fb58389b861dc77b68102083da6f7a96eccb
    Tested: None
    (cherry picked from commit 2651fa94635a96d653038fb389a0dd827338f8d3)
    surfaceflinger: Replace blank/unblank with setPowerMode
    
    We replace the blank/unblank calls in surfaceFlinger with a more generic
    setPowerMode() routine.
    
    Some displays support different power modes (for example, with reduced
    color palettes). Depending on the use case we should be able to toggle
    these modes, so as to achieve incremental power savings.
    
    Initially, three power modes will be supported:
    - HWC_POWER_MODE_OFF
    - HWC_POWER_MODE_DOZE
    - HWC_POWER_MODE_NORMAL
    
    HWC_POWER_MODE_OFF will correspond to blanking the display, while
    HWC_POWER_MODE_NORMAL will correspond to unblanking. HWC_POWER_MODE_DOZE
    will put the display into a low power setting, if it is supported in
    hardware.
    
    If such a low power mode is not supported, it should be treated as a
    call to set the mode to HWC_POWER_MODE_NORMAL.
    
    As a consequence of adding the mPowerMode field, the mScreenAcquired is
    no longer required, and thus references to it are removed and replaced
    equivalent references to mPowerMode.
    
    We also add the glue code to connect the services invocation of setting
    a power mode and the HAL implementation in HWComposer.
    
    Bug: 13472578
    Change-Id: I431595ecf16d2f2c94259272db3dd42f29636204
    Signed-off-by: Prashant Malani <pmalani@google.com>
    SurfaceFlinger: Add sourceCrop to screenshot
    
    Adds a sourceCrop Rect parameter to screenshot commands, which allows
    clients to capture only a portion of the screen instead of the whole
    screen.
    
    Bug: 15137922
    Change-Id: I629447573cd34ffb96334cde7ba02490b9ea06d8
    Fix virtual display nesting
    
    This fixes the cycling rendering loop caused by nesting virtual
    displays by preventing them from recomposing if their contents
    haven't changed.
    
    (cherry-pick from master I600365c0fd5d3ad93e04295d26cf9de177ffc79b)
    
    Bug: 12101046
    Change-Id: I6182993d53537781aedb522f97a50f06eed8b80f
    SurfaceFlinger: fix 64-bit format string warnings
    
    Change-Id: Idacfbf0601743fba1c5de7632201a66a307a2710
    Signed-off-by: Greg Hackmann <ghackmann@google.com>
    Virtual Display async mode is overridden
    
    Virtual Display async setting is overridden by eglApi.c causing
    stall during composition.
    
    Set the async mode after eglCreateWindowSurface()
    
    b/13139121
    
    Change-Id: I336ca145552e387217cd8bea6e4b7f5f490a274d
    Signed-off-by: Pierre Couillaud <pierre@broadcom.com>
    Allow disabling layer rotation during screenshots
    
    Add the ability to ignore layers' transformation matrices during
    screenshot capture, which will allow the window manager to capture
    unrotated images for recents during the device rotation animation.
    
    Bug: 11805195
    Change-Id: I854d87bc84ca06ef9a054a454af1c080ee66fbb8
    Fix virtual display nesting
    
    This fixes the cycling rendering loop caused by nesting virtual
    displays by preventing them from recomposing if their contents
    haven't changed.
    
    Bug: 12101046
    Change-Id: I600365c0fd5d3ad93e04295d26cf9de177ffc79b
    Implement per-display EGLConfig and configless EGLContext
    
    Bug: 12230666
    Change-Id: Icca608b108cbdcab9cf01a9236d8cdbda000a836
    Signed-off-by: Jesse Hall <jessehall@google.com>
    fix camera API 2.0 orientation
    
    we add a flag to ANativeWindow::setBufferTransform that means
    "apply the inverse rotation of the display this buffer is displayed
    onto to".
    
    Bug: 10804238
    Change-Id: Id2447676271950463e8dbcef1b95935c5c3f32b2
    Stop using default value for Surface producerControlledByApp parameter
    
    Bug: 10785749
    Change-Id: Ifbf9340e5eabe621a69e990ec3e05ac51f8db66a
    reset the gl viewport at each frame for each display
    
    Bug: 10097128, 9506003
    Change-Id: Ie0403a631e339a9134216224f3366f46ece58b53
    Provide HWC prepare with a valid output buffer
    
    We weren't dequeing and setting the output buffer until just before
    set(). This didn't allow HWC to make decisions in prepare() based on
    the output buffer format, dimensions, etc.
    
    Now we dequeue the output buffer at the beginning of the composition
    loop and provide it to HWC in prepare. In GLES-only rendering, we may
    have to cancel the buffer and acquire a new one if GLES requests a
    buffer with properties different than the one we already dequeued.
    
    Bug: 10365313
    Change-Id: I96b4b0a851920e4334ef05080d58097d46467ab8
    Fix virtual displays for HWC 1.0
    
    We weren't swapping the buffers.
    
    Bug 10366404
    
    Change-Id: I43eb7648231bedf24899da6fc0d9acc09e0b047e
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    Set the swap interval of virtual display surfaces to 0
    
    This prevents slow/malicious virtual display consumers from
    backpressuring SurfaceFlinger and preventing it from updating other
    displays.
    
    Bug: 10193714
    Change-Id: I3e877d97202628d2d9abea24b66576f38299c14d
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    Rewrite VirtualDisplaySurface
    
    The previous implementation assumed that the HWC could read and write
    the same buffer on frames that involved both GLES and HWC composition.
    It turns out some hardware can't do this. The new implementation
    maintains a scratch buffer pool to use on these mixed frames, but on
    GLES-only or HWC-only frames still does composition directly into the
    output buffer.
    
    Bug: 8384764
    Change-Id: I7a3addb34fad9bfcbdabbb8b635083e10223df69
    Refactor SF. Move all GL operations in their own class.
    
    this is the first step to add support for GLES 2.x, this
    change breaks the dependency of SF on GLES 1.x by moving
    all operation into their own class.
    
    Bug: 8679321
    
    Change-Id: I0d2741eca2cefe67dfd9cf837cac10c4d126928b
    reformat Rect.{cpp|h}
    
    Change-Id: I45b1f6646541a1abacce1e70df00a770e47b820e
    clean-up/simplify all dump() APIs
    
    remove the scratch buffer parameter and use
    String8::appendFormat() instead.
    
    Change-Id: Ib96c91617c8e7292de87433d15cf6232b7d591b0
    Clean up HWC state when releasing a DisplayDevice
    
    DisplayDevices can be released when DisplayManager removes them from
    the display list, or (for virtual displays) when the surface is set to
    NULL. We were only cleaning up HWC resources associated with the
    display in the first case.
    
    Bug: 8384764
    Change-Id: Id3d226dd7178fbe6d0a2ac4e2660b864ee073de3
    Fix virtual displays for HWC<=1.1
    
    If we're using a HWC that doesn't support virtual displays, or we have
    more virtual displays than HWC supports concurrently, the
    VirtualDisplaySurface should simply be a passthrough from source
    (GLES) to sink.
    
    This change also tries to distinguish between display types and HWC
    display IDs a little better, though there's more to do here. Probably
    needs a higher-level rethink; it's too error-prone now.
    
    Bug: 8446838
    Change-Id: I708d2cf262ec30177042304f174ca5b8da701df1
    Isolate knowledge that fb target == output buffer
    
    HWComposer didn't allow the virtual display output buffer to be set
    directly, instead it always used the framebuffer target buffer.
    DisplayDevice was only providing the framebuffer release fence to
    DisplaySurfaces after a commit.
    
    This change fixes both of these, so both HWComposer and DisplayDevice
    should continue to work if VirtualDisplaySurface changes to use
    separate framebuffer and output buffers. It's also more correct since
    VirtualDisplaySurface uses the correct release fence when queueing the
    buffer to the sink.
    
    Bug: 8384764
    Change-Id: I95c71e8d4f67705e23f122259ec8dd5dbce70dcf
    Pass sp<Fence>s around instead of file descriptors
    
    Change-Id: Iac70584a2207940730e8f803a543e4e9a4000c47
    Release virtual display buffer immediately after HWC set
    
    Previously we only queued a virtual display buffer to the sink when
    the next frame was about to be displayed. This may delay the "last"
    frame of an animation indefinitely. Now we queue the buffer as soon as
    HWC set() returns and gives us the release fence.
    
    Bug: 8384764
    Change-Id: I3844a188e0f6ef6ff28f3e11477cfa063a924b1a
    Add DisplaySurface abstraction
    
    DisplayDevice now has a DisplaySurface instead of using
    FramebufferSurface directly. FramebufferSurface implements
    DisplaySurface, and so does the new VirtualDisplaySurface class.
    DisplayDevice now always has a surface, not just for virtual displays.
    
    In this change VirtualDisplaySurface is just a stub; buffers still go
    directly from GLES to the final consumer.
    
    Bug: 8384764
    Change-Id: I57cb668edbc6c37bfebda90b9222d435bf589f37
    Minor cleanups/fixes before virtual display refactoring
    
    None of these should change behavior, except for removing some
    incorrect log messages when using a virtual display.
    
    - HWComposer::getAndResetReleaseFenceFd() checks the HWC version, so
      no need to do that in the DisplayDevice::onSwapBuffersCompleted().
      However, it should check that mFramebufferSurface is not NULL like
      it is for virtual displays.
    - Comment that FramebufferSurface::dump() overrides the non-virtual
      ConsumerBase::dump(), and fix it so the right thing happens
      regardless of the static type of the pointer/reference the callee
      has. FramebufferSurface::dump() could be removed right now, but I'd
      need to bring it back in a later change.
    - Use the right enum for validating display type ids.
    - Don't try to send hotplug events for virtual displays.
    - Mark virtual displays as connected so HWComposer::prepare() doesn't
      think something is wrong when it gets a non-NULL layer list.
    - Remove unused FramebufferSurface methods.
    
    Bug: 8384764
    Change-Id: Id28a2f9be86b45f4bb7915fdf7752157035f4294
    Get rid of LayerBase.
    
    The functionality of LayerBase and Layer is folded
    into Layer. There wasn't a need for this abstraction
    anymore.
    
    Change-Id: I66511c08cc3d89009ba4deabf47e26cd4cfeaefb
    Init displays to null layer stack
    
    When a display is added, initialize it to use an empty layer stack, so
    if it is somehow visible it will show black. It will be assigned the
    real layer stack -- along with a projection and other properties -- by
    window manager soon. Normally a display remains blanked until window
    manager has decided what to show on it, but for HDMI connected at boot
    that isn't currently the case.
    
    Bug: 7258935
    Change-Id: Ic9bb25f7a9b8d9d3772b097ab1d6fa03bc8780a1
    apply the projection's viewport to the visibleregion passed to hwc
    
    each desplay's projection's viewport essentially clips each layer,
    so this should be reflected in the visibleregion passed to
    h/w composer.
    
    DisplayDevice getViewport and getFrame are now guaranteed to return
    valid Rects.
    
    Change-Id: I4c25f34fb26af10179eb26d429ca6c384c671e91
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: Ibed34175ae273608393aaa5f0a7df207dc40d709
    DisplayDevice: initialize mDisplayToken correctly
    
    mDisplayToken should be initialized by displayToken.
    
    Change-Id: I0a5fec1f1732200a32d10b1575239dceffe6dee4
    rework a bit how we scissor the display
    
    the scissor rect is now computed once by DisplayDevice
    and is combined with the "undefined" region so that
    the letter-boxed area of the screen get cleared in
    drawWormhole.
    
    Bug: 7149437
    Change-Id: Id2f30516a5786f32eace7f876ff32028f954f357
    SurfaceFlinger: add support for secure displays
    
    This change adds support for displays that are not allowed to display surfaces
    with the eSecure flag set.  All non-virtual displays are considered secure,
    while virtual displays have their secure-ness specified at creation time.
    
    Bug: 7368436
    Change-Id: I81ad535d2d1e5a7ff78269017e85b111f0098500
    fix typo that prevented proper loging of EGL error code
    
    needed for investigating 7309949
    
    Bug: 7309949
    Change-Id: If29a5c08d0e87f46b44ba2e1030be61cb4d1403b
    save/restore viewport properly when taking screenshot
    
    Bug: 7241739
    Change-Id: Iba8b9ffc75ab47fbc56169e65da26d96850a9297
    reset GL viewport and project when caputring the screen
    
    Bug: 7241739
    Change-Id: I3bb5214b070384de9be2026647865c6c236a4331
    only abort when errors happen on the main display
    
    Bug: 7232690
    Change-Id: I2c4b35a82f131da26deea738ef294e100e536d15
    only abort when errors happen on the main display
    
    Bug: 7232690
    Change-Id: I2c4b35a82f131da26deea738ef294e100e536d15
    handle EGL errors
    
    for now we just restart the runtime.
    
    bug: 7225248
    Change-Id: I7638ffe82075a4db9e7e6f9e35cf48afcb5a387a
    add/remove displays properly on hotplug events
    
    Bug: 7191563
    Change-Id: I8f0fbf3b29658c9479443141798e6f288a1f2d52
    calculate wether we filter on a per-display basis
    
    Change-Id: I79d80b432b20b3d02428da19add464ac1e2b9378
    fix typo in DisplayDevice logs
    
    Change-Id: I593ef674f12073bd9d690946447031394ef9044e
    improve logging of external displays
    
    Change-Id: I041aebb7fc655aeca98bbf698d15e05d7c12cac9
    Plumb display name into SurfaceFlinger
    
    The Surface createDisplay() call takes a display name for debugging.
    This change carries it through SurfaceFlinger and displays it in
    the "dumpsys SurfaceFlinger" output.
    
    Bug 7058158
    
    Change-Id: I79f3474a8656ff1beb7b478e0dbf2c5de666118a
    fix external displays
    
    we were not calling eglSwapBuffers() on external displays
    because they can't use HWC which caused us to think they
    didn't have GLES composition.
    
    Change-Id: I6cef4ae40b138412d2e6f2acda33c9d222b03a83
    add support hwc 1.1
    
    Bug: 7124069
    
    Change-Id: I53d705105c4ad8954d3f50ee4f4c8b7ec936b871
    Fix display projections when translated.
    
    There are two different translations to apply in the logical
    orientation, one before scaling and one after.
    So translate, scale, translate then rotate.
    
    Bug: 7139798
    Change-Id: I0726991cadb62988390e77503dbbaed54f07bfe3
    Fix display projection transforms
    
    Bug: 7139798
    Change-Id: I61aafe99180d85563c6880d16bc367fce80e6022
    display projection API now has a single function instead of 3
    
    Change-Id: I9bf46d372b77d547486d4bbe6f1953ec8c65e98f
    implement display viewport and frame
    
    note: viewport clipping is not implemented yet
    
    Change-Id: I7fde7c4de075d409d95c48bb20ba8ee017f6f00a
    Eradicate DisplayID.
    
    DisplayDevices are now keyed of the wp<IBinder> the client uses.
    DisplayID has now become DisplayType which is just used to identify
    physical displays (as opposed to virtual displays such as wifi displays).
    
    Change-Id: I0c5968f2c902dcd699a7e0afacf833ff070c12ea
    HWComposer now has its own concept of display IDs
    
    HWComposer can now create IDs representing a display
    it can deal with. IDs MAIN and HDMI are reserved.
    SurfaceFlinger associate HWComposer IDs with a
    DisplayDevice and uses that when it talks to HWComposer.
    
    A DisplayDevice doesn't have to have a HWComposer ID,
    in that case it just can't use h/w composer composition.
    
    Change-Id: Iec3d7ac92e0c22bf975052ae2847402f58bade71
    refactor compositing code to avoid multiple eglMakeCurrent() calls
    
    when multiple displays are connected, we ended-up having to
    call eglMakeCurrent() twice per display due to a limitation
    in EGL. this fixes that.
    
    Change-Id: I11e4584df50f8c24bbecee74e37b28b3ee031d2f
    reimplement wifi display hack with new external display SF framework
    
    fix a few bugs with external displays
    
    - HWComposer doesn't really handle multiple displays yet
      so there is a lot of ugliness there
    
    - We also need to make sure that external displays are not
      blanked by default
    
    - due to some EGL limitations surfaces being swapped need
      to be current
    
    Change-Id: I82bff05b43bcebd8da863c7c76b4edbc3bc223a9
    xdpi / ydpi were reported as 0
    
    Bug: 6975723
    Change-Id: Ia7fa37ec11e2308804f5034959a37e508d292d31
    screenshots could stop working after camera was used
    
    once a secure window is put on screen the display
    would retain its "secure" flag forever, preventing
    screenshots from being taken.
    
    Bug: 6933967
    Change-Id: I5be8355145ca7d580d84552311642f8fa912fe6a
    libgui includes refactoring
    
    Change-Id: I1d24ec17f5003ec2abab5f7472daaff4cc4cc2d3
    now able to set the layer stack on a DisplayDevice
    
    Change-Id: Ia9691cf221b9444c243eb468d9e276a30e600b6b
    surfaceflinger: refactor FrambufferSurface
    
    This change refactors the FramebufferSurface class to inherit from the new
    ConsumerBase class.
    
    Bug: 6620200
    Change-Id: I46ec942ddb019658e3c5e79465548b171b2261f2
    turn DisplayDevice into a reference-counted object
    
    it's safer this way because this object owns an
    EGLSurface which cannot be easily reference-counted.
    
    it also gives us the ability to sub-class it, which
    we might want to do soon.
    
    Change-Id: I07358bb052dc5a13b4f2196b2c2b6e6e94c4bb4f
    DisplayDevice only needs ANativeWindow not SurfaceTextureClient
    
    Change-Id: Ib5be5af8bede435c8d5d9fabf586d28d0e74c2cb
    remove a dependency of DisplayDevice on the refresh rate
    
    this remove a dependency (not all) on FramebufferSurface
    
    Change-Id: Ie07ce70760cdcedfb41b5b41bea8da45637bf474
    We now have a real list of displays.
    
    displays can be dynamically added or removed, and the
    list is part of the SF's transaction.
    
    Change-Id: I4186ea39f1317c0e7c044f869004017738968fab
    cleanups in preparation of bigger changes
    
    - fix typo drawForSreenshot misspelled
    - get rid of DisplayDeviceBase
    - removed unused or unneeded code
    - always pass a DisplayDevice to Layer methods that are called
      on a per-display basis (to make it clear that this could be
      called more than once per composition).
    
    Change-Id: Id948b7e09fe5c06db0e42d40d6ed75dd095c7f44
    rename DisplayHardware to DisplayDevice
    
    Change-Id: I3f7250cd914e0da4f9ec2c9403587bbe12f3cc62
    getting closer to final main composition loop
    
    Change-Id: Icd63782366ffd11d9ea00c925ae5783ed7440cdb
    get rid of global regions that should be tracked per display
    
    Change-Id: I3b871860cc29f1b2fdcc22b0c577a6eae65d9296
    get rid of the shared-memory control block
    
    Change-Id: If814060aca1d2ff2619d4adcd57296983d207f7f
    split HWComposer out of DisplayHardware
    
    we will only ever have a single instance of HWComposer, so
    it's now an attribute of SurfaceFlinger, instead of being part
    of DisplayHardware.
    
    DisplayHardware now just represents a "display" (it should be renamed).
    
    Change-Id: Iec191e57686868e1df6daa8b880a286c9fefde56
    get rid of ro.sf.hwrotation, it's not used anymore
    
    Change-Id: I2ee469ac89ecd65d7187be5cab08b5cc18f67cbe
    SurfaceFlinger cleanup
    
    mostly refactored SurfaceFlinger.h, but also removed dead code.
    cleaned-up a few includes as well.
    
    Change-Id: Ib15f4ffe567912b61ee98aa076c6a283b72811b5
    factor EGL/GL and surface creation out of DisplayHardware
    
    Change-Id: Icd85a6a4caad06f056578008af3e21666fa8b1f4
    mVisibleLayersSortedByZ is now maintained per display
    
    Change-Id: Idcdb77eba1a3f99b3e4b2150128a82acaffcd2a8
    surfaceflinger: call into hardware composer to blank screen
    
    Call into the new HWC blank operation to blank or unblank the screen.
    Legacy systems may have already blanked the screen via early suspend,
    and can choose to not implement the blank operation in their hardware
    composer implementation.
    
    Change-Id: Ib403c8c0e36367a2cfef3e1d124872fcfeb9e7cb
    get rid of GraphicPlane
    
    its functionality is now folded into DisplayHardware
    there will be more changes in that area.
    First prototype atttempting to support an external display
    
    both API and implementation will change, this is just a prototype
    intended to show feasability.
    
    SurfaceFlinger is passed an ISurfaceTexture through a new
    callback, it is in turn used to create an EGLSurface which
    surfaceflinger will draw into in addition to the main screen.
    
    Change-Id: Id0bbb0b854bb7bae44d57246a90b65d4567f9a21
    Implement SurfaceFlinger's ANW on top of BufferQueue
    
    SF now has its own implementation of ANW for the
    framebuffer and it uses BufferQueue. FramebufferNativeWindow
    is now only used by stand-alone apps.
    
    Change-Id: Iddeb24087df62bd92b0f78e391dda9b97ddc859c
    set vsync power hint
    
    Change-Id: I28c2faf9ff584df3e74392712971cbcf75eb9e98
    get rid off preserve backbuffer optimization in SF
    
    this optimization didn't improve performance and in fact
    seemed to hurt more than anything else. it also made
    things a lot more complex as it introduced edges cases
    when switching to/from h/w composer.
    
    Change-Id: Iaafc235e175f5740cd98bff914d706e02ab88bb8
    SurfaceFlinger now uses the new VSYNC HAL API.
    
    If h/w composer doesn't support vsync (version < 0.3) we
    "fake" it with a timer.
    
    Change-Id: I1e3be79f43c9631d1293ad7d6cf52f9bfc42d65b
    displayhardware: fix not obeying ro.sf.lcd_density when specified
    
    Change-Id: I71efd6aebfdb0323b07327f5e448a5cb5eb0fad6
    Signed-off-by: Dima Zavin <dima@android.com>
    rewrite density calculation code so it's understandable
    
    Change-Id: I1016cd5fd75355abe4ab879d04f4849bd2dd4122
    displayhardware: fix not obeying ro.sf.lcd_density when specified
    
    Change-Id: I71efd6aebfdb0323b07327f5e448a5cb5eb0fad6
    Signed-off-by: Dima Zavin <dima@android.com>
    surfaceflinger: use display dpi if not forced with ro.sf.lcd_nensity
    
    Change-Id: I52c4b872e0f2c088c2a6ada7a5bb15db071f0002
    Signed-off-by: Dima Zavin <dima@android.com>
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    remove libui dependency on libEGL
    
    Change-Id: I1194f04085637d5c384e134967249430cc43b6ee
    improve SurfaceFlinger dumpsys
    
    It is now possible to say:
    
    dumpsys SurfaceFlinger --latency
    
    to print latency information about all windows
    
    dumpsys SurfaceFlinger --latency window-name
    
    to print the latency stats of the specified window
    
    for instance: dumpsys SurfaceFlinger --latency SurfaceView
    
    The data consists of one line containing global stats, followed by
    128 lines of tab separated timestamps in nanosecond.
    
    The first line currently contains the refresh period in nanosecond.
    Each 128 following line contains 3 timestamps, of respectively
    the app draw time, the vsync timestamp just prior the call to set and
    the timestamp of the call to set.
    
    Change-Id: Ib6b6da1d7e2e6ba49c282bdbc0b56a7dc203343a
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)
    
    Change-Id: I26f76452ac49e2890b14d133c065493d8df0fb4a
    remove dead/usnused code
    
    Change-Id: I6fa2bc6ee01790abd2c1533f043d61a5e5c8d26e
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: Ib08fe86d23db91ee153e9f91a99a35c42b9208ea
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    Fix build.
    
    Revert "Add support for sending VSYNC events to the framework"
    
    This reverts commit f3918c5bd4bc9f02f74da42995564150ca2dd382.
    
    Change-Id: I998e3e1aa3fa310829ae973b64fe11b01f6f468f
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: If4126023fc9c067e56087ec7d16a8fd542ce1794
    rework a bit how we manage EGL extensions
    
    - don't advertise extensions that are not supported
      by any implementation
    
    - remove EGL_ANDROID_swap_rectangle which is not
      implemented by anybody and confuses people
    
    - add some comments about mandatory extensions
    
    Bug: 5428001
    Change-Id: Id8dc48116ac1d1eb79ec9ef55d03e29d4257c1f3
    Set the WM refresh rate to 60 Hz for tuna devices only DO
    NOT MERGE
    
    This approach is TEMPORARY until we can do this properly.
    
    Change-Id: I81a8f852df501b2faccffdae7cac954855a6c98f
    workaround to set the WM refresh rate to 48 Hz for tuna devices only
    
    this is TEMPORARY until we can do this properly.
    
    Bug: 5572464
    Change-Id: I6537706d636a83a4a50e2900d6b829dd89b6f245
    Add a h/w composer API to allow the HAL to trigger a redraw
    
    This is useful in various situations, for instance if the HAL
    wants to change its compositing strategy.
    
    Bug: 4488017
    Change-Id: I5afc14e5917c6db7926d7417d48677d5aba50caa
    Fix EGLUtils::selectConfigForPixelFormat()
    
    - renderscript now calls EGL directly instead of relying on this function
    - surfaceflinger also does its own EGLConfig selection
    - selectConfigForPixelFormat stays for legacy reason (many tests use it) but
    it now only tries to match the alpha channel of the format rather than the
    format itself.
    
    this will allow implementations who don't support the exact formats
    defined in the HAL to work properly.
    
    Bug: 4998223
    
    Change-Id: Ic664dfc14d5072a514b6f77a115d1521bfc1578f
    don't kill surfaceflinger when system process dies
    
    Change-Id: I2d3ed87b590f9ccea3fa4af41d92911de070b315
    fix memory corruption when retriving GL_MAX_VIEWPORT_DIMS
    
    Change-Id: I2e0b1eac6dbc6a4ecbbaf31013aa02cf2369fce2
    remove support for PUSH_BUFFER surfaces and overlays
    
    the same functionality is now supported through
    the h/w composer HAL, and YUV support in the GPU.
    
    Change-Id: I8146605449954b8e8fd7f78810b7d873c2d8f5bf
    surfaceflinger: add support for gralloc dump hooks
    
    Change-Id: Ib6f539ed0132b70d040d653c03d52cc04249ac3c
    [3171580] SurfaceFlinger Bypass mode. (DO NOT MERGE)
    
    This is a poor's man precursor to the h/w composer HAL.
    Basically we detect when a window is full screen and in
    that case we bypass surfaceflinger's composition step, which
    yields to much improved performance.
    
    Change-Id: Ie03796ae81a1c951949b771c9323044b980cb347
    Use the context_priority extension when present.
    
    Change-Id: I12eadf1e32d576de5d811fba44afa73263e13eef
    Add logging of various important graphics events
    
    There are 16 events logged in the event log:
    SF_APP_DEQUEUE_BEFORE
    SF_APP_DEQUEUE_AFTER
    SF_APP_LOCK_BEFORE
    SF_APP_LOCK_AFTER
    SF_APP_QUEUE
    
    SF_REPAINT
    SF_COMPOSITION_COMPLETE
    SF_UNLOCK_CLIENTS
    SF_SWAP_BUFFERS
    SF_REPAINT_DONE
    
    SF_FB_POST_BEFORE
    SF_FB_POST_AFTER
    SF_FB_DEQUEUE_BEFORE
    SF_FB_DEQUEUE_AFTER
    SF_FB_LOCK_BEFORE
    SF_FB_LOCK_AFTER
    
    all events log the buffer conserned and a timestamp in microseconds.
    
    by default the logging is not enabled, to turn it on:
    adb shell service call SurfaceFlinger 1006 i31 1
    adb shell setprop debug.graphic_log 1
    
    The effect is immediate in SurfaceFlinger, but applications need to be
    restarted.
    
    Change-Id: Ifc2e31f7aed072d9a7dede20ff2ce59231edbec1
    surfaceflinger: give hwcomposer a chance to release buffers
    
    Change-Id: I605fa779702022865dd58df3b36f37c2644ade36
    revert hwcomposer HAL changes. DO NOT MERGE.
    
    This reverts commit:
    94364b91a2894bf037b8beb027132fbb812e1434
    f8e705dea48f77f1c2532fdbadd4997dd1851af0
    b59beb5ca68d0228f60dda60d85e2d0226b33215
    e0d5f5bcf5a8b26f4ad75f549cbf380b2c9faf20
    call into hwcomposer HAL when present
    
    Change-Id: I70f31c69a9436a43860e78977442863ecba6d27b
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    Revert "Revert "fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger""
    
    This reverts commit 330dd304a471d260a73e342a240921c03c825f99.
    Revert "fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger"
    
    This reverts commit 081bc5c47d8a980e6eafa70ddafcd89981586391.
    Revert "am 256fc043: am 081bc5c4: fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger"
    
    This reverts commit e02dec8c4cbab17d09983af1328308b8aa61ef85, reversing
    changes made to 6d7a052fb04b251c517d0a9049b8d5d7408ce8c0.
    
    Bug: 2798567
    fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger
    
    Make sure to not use GL_TEXTURE_EXTERNAL when it's not supported
    by the GL. The error was harmless, but annoying.
    
    Change-Id: I571a9a9b05d35da51420950a6a6e95629067efd0
    fix uninitialized variable in DisplayHardware
    
    this fixes the issue where the display is all messed-up sometimes.
    
    Change-Id: I20be91b5166bfff0c6d353a777351842c9df8e95
    remove the "memcpy" hack
    
    this hack was used for gpus that don't support cached buffers
    for s/w clients. currently we have no gpu with this issue.
    this removes quite a bit of complexity.
    
    Change-Id: I72564669f124f92805030e61983711f61c76b6d9
    clean-up surfaceflinger a bit
    
    get rid of the glDrawTexi path and use floating points instead of fixed point maths
    
    Change-Id: I3aa9ce2dc082f702160e605a16ba5fe987cdf087
    fix [2594950] Flash: Zooming in on some content crashes the Nexus One and causes it to reboot (runtime restart)
    
    We now limit the size of the surface to the maximum size supported by the GPU.
    On Nexus One this will 2048 -- it could be different on other devices.
    Surface creation fails if the limit is exceeded.
    
    Change-Id: I9ecfc2e9c58c9e283782b61ebfc6b590f71df785
    surfaceflinger: remove un-cached buffers hack for Adreno
    
    Change-Id: I5ae4e74bfa3e25b55be2cddf7b3c51368a140ab9
    Signed-off-by: Dima Zavin <dima@android.com>
    android-2.1_r1 snapshot
    surfaceflinger: remove un-cached buffer hack for SGX
    
    Signed-off-by: Erik Gilling <konkers@android.com>
    addresses several bugs: 2206097, 2166583, 2261119, 2216759
    
    2206097: Broken suggestions while composing message
    2166583: Color artifacts with MDP dithering
    2261119: Passion transition animations are rough
    2216759: Screen flicker when dropdown list in background window shows or hides
    
    This is part of enabling GPU composition instead of using the MDP. This change
    is dependent on another change in the vendor project.
    
    Specifically this change disables the use of EGLImageKHR for s/w buffers
    for cache coherency reasons. memcpy is used instead.
    eclair snapshot
        fix [2143798] Need to figure out how to do video
    
        Use EGLImageKHR instead of copybit directly.
        We now have the basis to use streaming YUV textures (well, in fact
        we already are). When/if we use the GPU instead of the MDP we'll
        need to make sure it supports the appropriate YUV format.
    
        Also make sure we compile if EGL_ANDROID_image_native_buffer is not supported
    Revert "temporarily disable the use of glTexImage2D for sw buffers on sholes."
    
    This reverts commit c131c5671965b69b0dee3e4afa3b3dd5e3c0c405.
    
    Approved by Hiroshi
    temporarily disable the use of glTexImage2D for sw buffers on sholes.
    
    we're going to first cut a build without this change.
    
    Approved by Dr. Hiroshi.
    fix [2168528] enable glTexImage2D code path in SF for software-only buffers
    minor SurfaceFlinger code cleanup and remove unnecessary tests
    Android side of the fix for [2121211] Sholes has stutter during animations
    
    a new method, compostionComplete() is added to the framebuffer hal, it is used by surfaceflinger to signal the driver that the composition is complete, BEFORE it releases its client. This gives a chance to the driver to
    disable backbuffer preservation when possible, which may improve performance a bit
    add a debug property to disable h/w composition. debug.sf.hw, when set to 0 will disable h/w composition
    fix [2068105] implement queueBuffer/lockBuffer/dequeueBuffer properly
    
    Rewrote SurfaceFlinger's buffer management from the ground-up.
    The design now support an arbitrary number of buffers per surface, however the current implementation is limited to four. Currently only 2 buffers are used in practice.
    
    The main new feature is to be able to dequeue all buffers at once (very important when there are only two).
    
    A client can dequeue all buffers until there are none available, it can lock all buffers except the last one that is used for composition. The client will block then, until a new buffer is enqueued.
    
    The current implementation requires that buffers are locked in the same order they are dequeued and enqueued in the same order they are locked. Only one buffer can be locked at a time.
    
    eg. Allowed sequence:   DQ, DQ, LOCK, Q, LOCK, Q
    eg. Forbidden sequence: DQ, DQ, LOCK, LOCK, Q, Q
    make sure EGL_ANDROID_swap_rectangle is actually supported before using it
    Better error handling in EGL extensions
    minor code clean-up
    added two EGL helpers for selecting a config matching a certain pixelformat or native window type
    donut snapshot
    Reset the mDpiX and mDpiY values when qemu.sf.lcd_density is defined.
    
    This will make android.view.Display return corresponding values for
    the screen's DPI.
    donut snapshot
    fix [1969200] Uninitialized double passed to Math.sqrt()
    when there is a choice between UPDATE_ON_DEMAND and SWAP_BUFFER optimizations, choose UPDATE_ON_DEMAND which is often more efficient.
    fix a bug that caused artifacts when SWAP_RECTANGLE was enabled
    fix an update bug with SHOW_UPDATE debug feature. Fix a problem with the debug binder codes too
    make use of new eglGetRenderBufferANDROID extension to clean-up a bit a few hacks added recently
    hack copybit back in for video playback on msm7k. we have h/w accelerated video again
    Fix sim-eng build and simplify previous lcd-density related patch
    Allow the qemu.sf.lcd_density property to override the value of ro.sf.lcd_density
    
    ro.sf.lcd_density is usually defined in the build.prop file which is parsed by init
    before anything else. Since its name begins with "ro.", this property is write-once
    and cannot later be modified, e.g. in /system/etc/init.goldfish.sh.
    
    In other words, you cannot use "emulator -prop ro.sf.lcd_density=<value>", since
    it is impossible to override the value defined in build.prop
    
    This patch modifies the system to recognize "qemu.sf.lcd_density" as an override
    value, which can be set with "emulator -prop qemu.sf.lcd_density=<value>", forcing
    a specific density.
    
    A later patch will allow the emulator to automatically set this property depending
    on AVD hardware configuration settings.
    protect ANDROID specific egl extension with #define
    when looking for an EGLConfig always pick the first one that matches, not the last one
    add support for update-on-demand in SurfaceFlinger
    fix EGL extension string names
    created an new EGL extension called ANDROID_swap_rectangle
    
    ANDROID_swap_rectangle allows to specify the rectangle affected by eglSwapBuffers(), anything outside of this rectangle is unchanged. in particular EGL_BUFFER_DESTROYED only applies to that rectangle. This extension as well as EGL_BUFFER_PRESERVED allow major optimizations on surfaceflinger, which can redraw only the dirty area during compositing.
    
    However, ANDROID_swap_rectangle allows further optimizations in EGL by reducing the amount of copy-back needed. ANDROID_swap_rectangle is particularily important for software implementations.
    move opengl/include/EGL/android_natives.h to include/ui/egl/android_natives.h and don't include it from egl.h
    
    the android_native_ types are just forward declared in egl.h
    minor clean-up in FramebufferNativeWindow
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    auto import from //branches/cupcake/...@126645
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    BufferQueue: Add allocateBuffers method
    
    This adds an allocateBuffers method to BufferQueue, which instructs
    it to allocate up to the maximum number of buffers allowed by the
    current configuration. The goal is that this method can be called
    ahead of render time, which will prevent dequeueBuffers from blocking
    in allocation and inducing jank.
    
    This interface is also plumbed up to the native Surface (and, in
    another change, up to the Java Surface and ThreadedRenderer).
    
    Bug: 11792166
    Change-Id: I4aa96b4351ea1c95ed5db228ca3ef98303229c74
    BufferQueueProducer: add detachNextBuffer
    
    Adds a new method, IGBP::detachNextBuffer, that effectively does
    dequeue + request + detach in a single call, but does not need to
    know anything about the dequeued buffer, and will not block on
    dequeue. This is mostly for the upcoming StreamSplitter to use in
    its onBufferReleased callback.
    
    Change-Id: Ie88a69de109003acebaa486a5b44c8a455726550
    BufferQueue: Remove Bn version of create*
    
    It turns out that there's no reason to have both I* and Bn* versions
    of the createBufferQueue method, so I removed the Bn* version.
    
    Change-Id: I66aeb09e10458ae540ddf1f38d2d0154ea8f315b
    BufferQueue: Add producer buffer-released callback
    
    Add a callback to the producer side, onBufferReleased, which will be
    called every time the consumer releases a buffer back to the
    BufferQueue. This will enable a buffer stream splitter to work
    autonomously without having to block on dequeueBuffer.
    
    The binder object used for the callback replaces the generic IBinder
    token that was passed into IGraphicBufferProducer::connect to detect
    the death of the producer. If a producer does not wish to listen for
    buffer release events, it can pass in an instance of the
    DummyProducerListener class defined in IProducerListener.h, if it even
    cares about death events (BufferQueue doesn't enforce the token being
    non-NULL, though perhaps we should).
    
    Change-Id: I23935760673524abeafea2b58dccc3583b368710
    Remove deprecated BufferQueue constructor
    
    Bug: 13415624
    Change-Id: I9fe15e45daa7351f1db34ee75bfee6f19cb347d3
    fix another bug where screenshots could end-up all black
    
    SF transactions were always handled on VSYNC which allowed
    the screenshot to sneak-in between closing the transaction
    and vsync (before it's latched), resulting in a screenshot
    with the previous state.
    
    we now always force transactions to happen immediately
    before screenhots.
    
    Bug: 7552304
    Change-Id: I0afc86b7e8366173daff5b9988bbb4d2a0f43860
    one more step towards multiple display support
    
    - remove dependency on cached state in validateVisibility
    - get rid of mVertices and mTransformedBounds
    - get rid of validateVisibility
    - get rid of unlockPageFlip
    - handleTransaction now returns a dirty region
    - computevisibileregion now uses window-manager space
    separate transactions from updates
    
    with this changes, SF transactions are handled as soon as possible
    but do not trigger updates. the update is delayed until the next
    vsync.
    
    this allows us to work much better without requiring triple-buffering.
    
    Change-Id: I1fa10794d0cf742129f0877698b7b1e1f2ec7401
    SF now synchronizes to VSYNC
    
    Change-Id: Ic5e4f2ea9927ce133eef9499c03161325e9d02c5
    fix an issue where invalidate/transactions could be missed
    
    Change-Id: I84a1fcba1317b2631f5441de7b7ecd12af5ad022
    fix an issue where updates could starve transactions
    
    Bug: 5700586
    Change-Id: Iaa4adc1a6aea1db6e2943efe4caca1f6cbebfa72
    rewrite SF's message loop on top of Looper
    
    Change-Id: Ib56139f87a5c0b124e34da5c8151207219b2577b
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    fix the threading issue for setBuffercount()
    
    this change introduces R/W locks in the right places.
    on the server-side, it guarantees that setBufferCount()
    is synchronized with "retire" and "resize".
    on the client-side, it guarantees that setBufferCount()
    is synchronized with "dequeue", "lockbuffer" and "queue"
    eclair snapshot
    make use of the perfectly fine List.h instead of our own reimplementation of a linked list.
    Surfaces are now destroyed properly in SurfaceFlinger.
    
    First, the window manager tells us when a surface is no longer needed. At this point, several things happen:
    - the surface is removed from the active/visible list
    - it is added to a purgatory list, where it waits for all clients to release their reference
    - it destroys all data/state that can be spared
    
    Later, when all clients are done, the remains of the Surface are disposed off: it is removed from the purgatory and destroyed.
    In particular its gralloc buffers are destroyed at that point (when we're sure nobody is using them anymore).
    a brand new MessageQueue for SurfaceFlinger.
    Adding render stats APIs to UiAutomation (framework native).
    
    bug:12927198
    
    Change-Id: Ibb1c07f7d89e11281e5c1f27f412a29ac6f9c4ab
    surfaceflinger: add frame duration logging
    
    Change-Id: Ib414a45e7e191f23a2726cbbbeb606e9ce68a3b5
    SurfaceFlinger: add win anim frame time tracking
    
    This change makes the 'dumpsys SurfaceFlinger --latency' command with no extra
    args dump the frame timestamp data for the most recent frames that
    SurfaceFlinger generated that included window animation transaction changes.
    
    Change-Id: I8bded1ea08a4cddefef0aa955401052bb9107c90
    SurfaceFlinger: refactor frame time tracking
    
    This change moves the frame time history tracking code out of Layer and into a
    new class called FrameTracker.  It also changes the tracking to use signal
    timestamps from fences when available for more accurate results.
    
    Change-Id: I323c5f075c58bf86ce363b52af885ad0f6365f2b
    SurfaceFlinger: Add EventControlThread
    
    This change adds a new thread for calling HWComposer's eventControl
    asynchronously.  The DispSync-based vsync approach ends up enabling and
    disabling HWComposer's vsync callbacks at arbitrary times, and some HWComposer
    implementations do not have these calls optimized.
    
    Bug: 11175503
    Change-Id: I719be82bd200b391c61d40863b991c7b59acdfd6
    Add a --color option to dumpsys SurfaceFlinger
    
    colorize a bit the output of dumpsys SurfaceFlinger to
    make it easier to read. Right now it will bold the
    title of each section and use green for the name of
    each layer.
    
    Change-Id: I0d9f18d115401cb45109d244ef3a278481f68cc6
    surfaceflinger: add getDisplayStats() method
    
    This is used by media service to schedule video frames at the
    proper time, based on precise vsync timings.
    
    Bug: 14659809
    Change-Id: I1a90603f3dc09dca9aa4f90a3aa845fab56e0a5e
    Replace "lower power mode" experiment
    
    This replaces the previous low-power mode experiment, which
    discarded refresh events, with a new experiment that alters
    the refresh period.
    
    (see also I2849e5ea335c0d2509fea1c315392bce7f20451d )
    
    The feature is enabled by specifying a nonzero value for the
    "refresh skip count", which indicates the number of periods
    to skip.  For example, the command:
    
      adb shell service call SurfaceFlinger 1016 i32 1
    
    sets a skip count of '1', yielding a 30Hz refresh rate on a device
    with a 60Hz display.  Changing the last value to '2' would set the
    refresh to 20Hz.  '0' returns to the default behavior.
    
    Bug 15523257
    
    Change-Id: I00039c22a55750e74035644c63800e4bee1c774a
    DO NOT MERGE - Replace "lower power mode" experiment
    
    This replaces the previous low-power mode experiment, which
    discarded refresh events, with a new experiment that alters
    the refresh period.
    
    (see also I2849e5ea335c0d2509fea1c315392bce7f20451d )
    
    The feature is enabled by specifying a nonzero value for the
    "refresh skip count", which indicates the number of periods
    to skip.  For example, the command:
    
      adb shell service call SurfaceFlinger 1016 i32 1
    
    sets a skip count of '1', yielding a 30Hz refresh rate on a device
    with a 60Hz display.  Changing the last value to '2' would set the
    refresh to 20Hz.  '0' returns to the default behavior.
    
    Bug 15523257
    
    (cherry-pick from master I00039c22a55750e74035644c63800e4bee1c774a)
    
    Change-Id: I9ef5539fa7da953dd97f88e7fa39be0dc20b6889
    DO NOT MERGE - Disable DispSync resync when not needed
    
    If app and SF events aren't using phase offsets, we don't need
    to maintain the DispSync model.  We just turn hardware VSYNC on
    whenever something wants to draw.  This avoids some edge cases
    where we were doing too much resync work.
    
    Also, updated the systrace output.  The "VsyncOn" line was a
    combination of SF and app event threads, and would occasionally
    be very weird.  Removed VsyncOn, renamed VSYNC to VSYNC-app,
    and added VSYNC-sf.
    
    Also, added more details to the --dispsync dumpsys output.
    
    Also, renamed global constants to not look like local variables.
    
    Bug 15516453
    
    (cherry-pick from master I0da10b72f0d9a7b7eb5202d87cc18967f698adbd)
    
    Change-Id: I7d6fa96f1df48f0b3abcc4b39c5dcfee88199eb6
    Disable DispSync resync when not needed
    
    If app and SF events aren't using phase offsets, we don't need
    to maintain the DispSync model.  We just turn hardware VSYNC on
    whenever something wants to draw.  This avoids some edge cases
    where we were doing too much resync work.
    
    Also, updated the systrace output.  The "VsyncOn" line was a
    combination of SF and app event threads, and would occasionally
    be very weird.  Removed VsyncOn, renamed VSYNC to VSYNC-app,
    and added VSYNC-sf.
    
    Also, added more details to the --dispsync dumpsys output.
    
    Also, renamed global constants to not look like local variables.
    
    Bug 15516453
    
    Change-Id: I0da10b72f0d9a7b7eb5202d87cc18967f698adbd
    DO NOT MERGE Add "dumpsys SurfaceFlinger --dispsync"
    
    Dumps the current DispSync state.
    
    Bug 14651879
    
    (this is a near-cherrypick of Ide4e6dbd58b117bc1a6b97b57d10cd92ec86dc84)
    
    Change-Id: I6e6c8452ede5c2d5098db1b884d28226e77d9a03
    Add "dumpsys SurfaceFlinger --dispsync"
    
    Dumps the current DispSync state.
    
    Bug 14651879
    
    Change-Id: Ide4e6dbd58b117bc1a6b97b57d10cd92ec86dc84
    Improve SurfaceFlinger PTS estimation
    
    Get the next refresh time from DispSync instead of guessing based
    on the current time.
    
    Change-Id: I8dc72a3217bfd4e9b4c905034194d1a298cad69a
    SurfaceFlinger: Adds the functionality to reduce refresh rate to half of
    the default.
    
    Feature added for the low power mode.
    
    Change-Id: I2849e5ea335c0d2509fea1c315392bce7f20451d
    Signed-off-by: Ruchi Kandoi <kandoiruchi@google.com>
    SurfaceFlinger: SW-based vsync events
    
    This change adds the DispSync class, which models the hardware vsync event
    times to allow vsync event callbacks to be done at an arbitrary phase offset
    from the hardware vsync.  This can be used to reduce the minimum latency from
    Choreographer wake-up to on-screen image presentation.
    
    Bug: 10624956
    Change-Id: I8c7a54ceacaa4d709726ed97b0dcae4093a7bdcf
    BufferQueue: Add allocateBuffers method
    
    This adds an allocateBuffers method to BufferQueue, which instructs
    it to allocate up to the maximum number of buffers allowed by the
    current configuration. The goal is that this method can be called
    ahead of render time, which will prevent dequeueBuffers from blocking
    in allocation and inducing jank.
    
    This interface is also plumbed up to the native Surface (and, in
    another change, up to the Java Surface and ThreadedRenderer).
    
    Bug: 11792166
    Change-Id: I4aa96b4351ea1c95ed5db228ca3ef98303229c74
    BufferQueueProducer: add detachNextBuffer
    
    Adds a new method, IGBP::detachNextBuffer, that effectively does
    dequeue + request + detach in a single call, but does not need to
    know anything about the dequeued buffer, and will not block on
    dequeue. This is mostly for the upcoming StreamSplitter to use in
    its onBufferReleased callback.
    
    Change-Id: Ie88a69de109003acebaa486a5b44c8a455726550
    BufferQueue: Remove Bn version of create*
    
    It turns out that there's no reason to have both I* and Bn* versions
    of the createBufferQueue method, so I removed the Bn* version.
    
    Change-Id: I66aeb09e10458ae540ddf1f38d2d0154ea8f315b
    BufferQueue: Add producer buffer-released callback
    
    Add a callback to the producer side, onBufferReleased, which will be
    called every time the consumer releases a buffer back to the
    BufferQueue. This will enable a buffer stream splitter to work
    autonomously without having to block on dequeueBuffer.
    
    The binder object used for the callback replaces the generic IBinder
    token that was passed into IGraphicBufferProducer::connect to detect
    the death of the producer. If a producer does not wish to listen for
    buffer release events, it can pass in an instance of the
    DummyProducerListener class defined in IProducerListener.h, if it even
    cares about death events (BufferQueue doesn't enforce the token being
    non-NULL, though perhaps we should).
    
    Change-Id: I23935760673524abeafea2b58dccc3583b368710
    Remove deprecated BufferQueue constructor
    
    Bug: 13415624
    Change-Id: I9fe15e45daa7351f1db34ee75bfee6f19cb347d3
    surfaceflinger: skip composition for empty frames
    
    By not committing the results of composition for empty frames, we
    avoid spitting out series of black frames for virtual displays that
    don't have visible layers. We still draw one black frame when going
    from having layers to not having any. In particular, this avoids
    having a series of empty frames due to re-compositing the primary
    display in the period between creating the virtual display and adding
    layers to it.
    
    Bug: 16786752
    Change-Id: I7e9b2ed2e407d8d49c7af736b447d4c6181b0ad8
    Allow for resizing of Virtual Displays.
    
    Modify SurfaceFlinger to use VirtualDisplaySurface in all cases when a virtual
    display is used. Add functionality in VirtualDisplaySurface to resize the
    buffers aquired in the QueueBufferOutput. Add transaction support in
    SurfaceFlinger for resize. Add the modification of the size in DisplayDevice.
    
    Change-Id: Iae7e3556dc06fd18d470adbbd76f7255f6e6dd6b
    Tested: None
    Modified SurfaceFlinger to implment setActiveConfig and getActiveConfig.
    
    This can be used to change the current display mode of the device.
    
    Change-Id: Icdc3fb58389b861dc77b68102083da6f7a96eccb
    Tested: None
    (cherry picked from commit 2651fa94635a96d653038fb389a0dd827338f8d3)
    surfaceflinger: Replace blank/unblank with setPowerMode
    
    We replace the blank/unblank calls in surfaceFlinger with a more generic
    setPowerMode() routine.
    
    Some displays support different power modes (for example, with reduced
    color palettes). Depending on the use case we should be able to toggle
    these modes, so as to achieve incremental power savings.
    
    Initially, three power modes will be supported:
    - HWC_POWER_MODE_OFF
    - HWC_POWER_MODE_DOZE
    - HWC_POWER_MODE_NORMAL
    
    HWC_POWER_MODE_OFF will correspond to blanking the display, while
    HWC_POWER_MODE_NORMAL will correspond to unblanking. HWC_POWER_MODE_DOZE
    will put the display into a low power setting, if it is supported in
    hardware.
    
    If such a low power mode is not supported, it should be treated as a
    call to set the mode to HWC_POWER_MODE_NORMAL.
    
    As a consequence of adding the mPowerMode field, the mScreenAcquired is
    no longer required, and thus references to it are removed and replaced
    equivalent references to mPowerMode.
    
    We also add the glue code to connect the services invocation of setting
    a power mode and the HAL implementation in HWComposer.
    
    Bug: 13472578
    Change-Id: I431595ecf16d2f2c94259272db3dd42f29636204
    Signed-off-by: Prashant Malani <pmalani@google.com>
    Fix virtual display nesting
    
    This fixes the cycling rendering loop caused by nesting virtual
    displays by preventing them from recomposing if their contents
    haven't changed.
    
    (cherry-pick from master I600365c0fd5d3ad93e04295d26cf9de177ffc79b)
    
    Bug: 12101046
    Change-Id: I6182993d53537781aedb522f97a50f06eed8b80f
    Fix virtual display nesting
    
    This fixes the cycling rendering loop caused by nesting virtual
    displays by preventing them from recomposing if their contents
    haven't changed.
    
    Bug: 12101046
    Change-Id: I600365c0fd5d3ad93e04295d26cf9de177ffc79b
    Implement per-display EGLConfig and configless EGLContext
    
    Bug: 12230666
    Change-Id: Icca608b108cbdcab9cf01a9236d8cdbda000a836
    Signed-off-by: Jesse Hall <jessehall@google.com>
    fix camera API 2.0 orientation
    
    we add a flag to ANativeWindow::setBufferTransform that means
    "apply the inverse rotation of the display this buffer is displayed
    onto to".
    
    Bug: 10804238
    Change-Id: Id2447676271950463e8dbcef1b95935c5c3f32b2
    Provide HWC prepare with a valid output buffer
    
    We weren't dequeing and setting the output buffer until just before
    set(). This didn't allow HWC to make decisions in prepare() based on
    the output buffer format, dimensions, etc.
    
    Now we dequeue the output buffer at the beginning of the composition
    loop and provide it to HWC in prepare. In GLES-only rendering, we may
    have to cancel the buffer and acquire a new one if GLES requests a
    buffer with properties different than the one we already dequeued.
    
    Bug: 10365313
    Change-Id: I96b4b0a851920e4334ef05080d58097d46467ab8
    SurfaceFlinger now runs in the process's main thread
    
    it used to spawn its own thread and return the main thread
    to the binder thread pool -- this was confusing the naming
    of things in the kernel.
    
    Bug: 10331839
    
    Change-Id: I2d13a6d73409a38109300fcbe6a04b4c41cb5d00
    Use new HWC display type/count constants.
    
    Change-Id: I774d0c68906ac6dc69268f708c30a6b0868b8816
    Set the swap interval of virtual display surfaces to 0
    
    This prevents slow/malicious virtual display consumers from
    backpressuring SurfaceFlinger and preventing it from updating other
    displays.
    
    Bug: 10193714
    Change-Id: I3e877d97202628d2d9abea24b66576f38299c14d
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    Rewrite VirtualDisplaySurface
    
    The previous implementation assumed that the HWC could read and write
    the same buffer on frames that involved both GLES and HWC composition.
    It turns out some hardware can't do this. The new implementation
    maintains a scratch buffer pool to use on these mixed frames, but on
    GLES-only or HWC-only frames still does composition directly into the
    output buffer.
    
    Bug: 8384764
    Change-Id: I7a3addb34fad9bfcbdabbb8b635083e10223df69
    Refactor SF. Move all GL operations in their own class.
    
    this is the first step to add support for GLES 2.x, this
    change breaks the dependency of SF on GLES 1.x by moving
    all operation into their own class.
    
    Bug: 8679321
    
    Change-Id: I0d2741eca2cefe67dfd9cf837cac10c4d126928b
    clean-up/simplify all dump() APIs
    
    remove the scratch buffer parameter and use
    String8::appendFormat() instead.
    
    Change-Id: Ib96c91617c8e7292de87433d15cf6232b7d591b0
    Clean up HWC state when releasing a DisplayDevice
    
    DisplayDevices can be released when DisplayManager removes them from
    the display list, or (for virtual displays) when the surface is set to
    NULL. We were only cleaning up HWC resources associated with the
    display in the first case.
    
    Bug: 8384764
    Change-Id: Id3d226dd7178fbe6d0a2ac4e2660b864ee073de3
    Fix virtual displays for HWC<=1.1
    
    If we're using a HWC that doesn't support virtual displays, or we have
    more virtual displays than HWC supports concurrently, the
    VirtualDisplaySurface should simply be a passthrough from source
    (GLES) to sink.
    
    This change also tries to distinguish between display types and HWC
    display IDs a little better, though there's more to do here. Probably
    needs a higher-level rethink; it's too error-prone now.
    
    Bug: 8446838
    Change-Id: I708d2cf262ec30177042304f174ca5b8da701df1
    Add DisplaySurface abstraction
    
    DisplayDevice now has a DisplaySurface instead of using
    FramebufferSurface directly. FramebufferSurface implements
    DisplaySurface, and so does the new VirtualDisplaySurface class.
    DisplayDevice now always has a surface, not just for virtual displays.
    
    In this change VirtualDisplaySurface is just a stub; buffers still go
    directly from GLES to the final consumer.
    
    Bug: 8384764
    Change-Id: I57cb668edbc6c37bfebda90b9222d435bf589f37
    Get rid of LayerBase.
    
    The functionality of LayerBase and Layer is folded
    into Layer. There wasn't a need for this abstraction
    anymore.
    
    Change-Id: I66511c08cc3d89009ba4deabf47e26cd4cfeaefb
    Init displays to null layer stack
    
    When a display is added, initialize it to use an empty layer stack, so
    if it is somehow visible it will show black. It will be assigned the
    real layer stack -- along with a projection and other properties -- by
    window manager soon. Normally a display remains blanked until window
    manager has decided what to show on it, but for HDMI connected at boot
    that isn't currently the case.
    
    Bug: 7258935
    Change-Id: Ic9bb25f7a9b8d9d3772b097ab1d6fa03bc8780a1
    apply the projection's viewport to the visibleregion passed to hwc
    
    each desplay's projection's viewport essentially clips each layer,
    so this should be reflected in the visibleregion passed to
    h/w composer.
    
    DisplayDevice getViewport and getFrame are now guaranteed to return
    valid Rects.
    
    Change-Id: I4c25f34fb26af10179eb26d429ca6c384c671e91
    rework a bit how we scissor the display
    
    the scissor rect is now computed once by DisplayDevice
    and is combined with the "undefined" region so that
    the letter-boxed area of the screen get cleared in
    drawWormhole.
    
    Bug: 7149437
    Change-Id: Id2f30516a5786f32eace7f876ff32028f954f357
    SurfaceFlinger: add support for secure displays
    
    This change adds support for displays that are not allowed to display surfaces
    with the eSecure flag set.  All non-virtual displays are considered secure,
    while virtual displays have their secure-ness specified at creation time.
    
    Bug: 7368436
    Change-Id: I81ad535d2d1e5a7ff78269017e85b111f0098500
    reset GL viewport and project when caputring the screen
    
    Bug: 7241739
    Change-Id: I3bb5214b070384de9be2026647865c6c236a4331
    add/remove displays properly on hotplug events
    
    Bug: 7191563
    Change-Id: I8f0fbf3b29658c9479443141798e6f288a1f2d52
    calculate wether we filter on a per-display basis
    
    Change-Id: I79d80b432b20b3d02428da19add464ac1e2b9378
    improve logging of external displays
    
    Change-Id: I041aebb7fc655aeca98bbf698d15e05d7c12cac9
    Plumb display name into SurfaceFlinger
    
    The Surface createDisplay() call takes a display name for debugging.
    This change carries it through SurfaceFlinger and displays it in
    the "dumpsys SurfaceFlinger" output.
    
    Bug 7058158
    
    Change-Id: I79f3474a8656ff1beb7b478e0dbf2c5de666118a
    add support hwc 1.1
    
    Bug: 7124069
    
    Change-Id: I53d705105c4ad8954d3f50ee4f4c8b7ec936b871
    display projection API now has a single function instead of 3
    
    Change-Id: I9bf46d372b77d547486d4bbe6f1953ec8c65e98f
    implement display viewport and frame
    
    note: viewport clipping is not implemented yet
    
    Change-Id: I7fde7c4de075d409d95c48bb20ba8ee017f6f00a
    Eradicate DisplayID.
    
    DisplayDevices are now keyed of the wp<IBinder> the client uses.
    DisplayID has now become DisplayType which is just used to identify
    physical displays (as opposed to virtual displays such as wifi displays).
    
    Change-Id: I0c5968f2c902dcd699a7e0afacf833ff070c12ea
    teach HWC about multiple displays
    
    Change-Id: I5e72a83d419a729835cb0e1ec45557b4d3fb56b1
    HWComposer now has its own concept of display IDs
    
    HWComposer can now create IDs representing a display
    it can deal with. IDs MAIN and HDMI are reserved.
    SurfaceFlinger associate HWComposer IDs with a
    DisplayDevice and uses that when it talks to HWComposer.
    
    A DisplayDevice doesn't have to have a HWComposer ID,
    in that case it just can't use h/w composer composition.
    
    Change-Id: Iec3d7ac92e0c22bf975052ae2847402f58bade71
    refactor compositing code to avoid multiple eglMakeCurrent() calls
    
    when multiple displays are connected, we ended-up having to
    call eglMakeCurrent() twice per display due to a limitation
    in EGL. this fixes that.
    
    Change-Id: I11e4584df50f8c24bbecee74e37b28b3ee031d2f
    xdpi / ydpi were reported as 0
    
    Bug: 6975723
    Change-Id: Ia7fa37ec11e2308804f5034959a37e508d292d31
    make multi-display more real
    
    - displays are represented by a binder on the client side
    - c++ clients can now create and modify displays
    
    Change-Id: I203ea5b4beae0819d742ec5171c27568f4e8354b
    Add a display parameter to HWComposer where needed
    
    - also replace C casts with C++ casts
    - only the interface is changed, HWComposer still doesn't
      fully handle multiple displays
    
    Change-Id: I48eb89bff2edb76bf1d4d41f46802b9b2a7166a8
    now able to set the layer stack on a DisplayDevice
    
    Change-Id: Ia9691cf221b9444c243eb468d9e276a30e600b6b
    surfaceflinger: refactor FrambufferSurface
    
    This change refactors the FramebufferSurface class to inherit from the new
    ConsumerBase class.
    
    Bug: 6620200
    Change-Id: I46ec942ddb019658e3c5e79465548b171b2261f2
    DisplayDevice doesn't need weak pointers or polymorphism
    
    let's use a LightRefBase for now.
    
    Change-Id: Ida068fa902343a8f89ffb6d34c2cd4627ab43c6c
    turn DisplayDevice into a reference-counted object
    
    it's safer this way because this object owns an
    EGLSurface which cannot be easily reference-counted.
    
    it also gives us the ability to sub-class it, which
    we might want to do soon.
    
    Change-Id: I07358bb052dc5a13b4f2196b2c2b6e6e94c4bb4f
    DisplayDevice only needs ANativeWindow not SurfaceTextureClient
    
    Change-Id: Ib5be5af8bede435c8d5d9fabf586d28d0e74c2cb
    remove a dependency of DisplayDevice on the refresh rate
    
    this remove a dependency (not all) on FramebufferSurface
    
    Change-Id: Ie07ce70760cdcedfb41b5b41bea8da45637bf474
    We now have a real list of displays.
    
    displays can be dynamically added or removed, and the
    list is part of the SF's transaction.
    
    Change-Id: I4186ea39f1317c0e7c044f869004017738968fab
    cleanups in preparation of bigger changes
    
    - fix typo drawForSreenshot misspelled
    - get rid of DisplayDeviceBase
    - removed unused or unneeded code
    - always pass a DisplayDevice to Layer methods that are called
      on a per-display basis (to make it clear that this could be
      called more than once per composition).
    
    Change-Id: Id948b7e09fe5c06db0e42d40d6ed75dd095c7f44
    rename DisplayHardware to DisplayDevice
    
    Change-Id: I3f7250cd914e0da4f9ec2c9403587bbe12f3cc62
    getting closer to final main composition loop
    
    Change-Id: Icd63782366ffd11d9ea00c925ae5783ed7440cdb
    get rid of global regions that should be tracked per display
    
    Change-Id: I3b871860cc29f1b2fdcc22b0c577a6eae65d9296
    get rid of the shared-memory control block
    
    Change-Id: If814060aca1d2ff2619d4adcd57296983d207f7f
    split HWComposer out of DisplayHardware
    
    we will only ever have a single instance of HWComposer, so
    it's now an attribute of SurfaceFlinger, instead of being part
    of DisplayHardware.
    
    DisplayHardware now just represents a "display" (it should be renamed).
    
    Change-Id: Iec191e57686868e1df6daa8b880a286c9fefde56
    get rid of ro.sf.hwrotation, it's not used anymore
    
    Change-Id: I2ee469ac89ecd65d7187be5cab08b5cc18f67cbe
    factor EGL/GL and surface creation out of DisplayHardware
    
    Change-Id: Icd85a6a4caad06f056578008af3e21666fa8b1f4
    mVisibleLayersSortedByZ is now maintained per display
    
    Change-Id: Idcdb77eba1a3f99b3e4b2150128a82acaffcd2a8
    get rid of GraphicPlane
    
    its functionality is now folded into DisplayHardware
    there will be more changes in that area.
    First prototype atttempting to support an external display
    
    both API and implementation will change, this is just a prototype
    intended to show feasability.
    
    SurfaceFlinger is passed an ISurfaceTexture through a new
    callback, it is in turn used to create an EGLSurface which
    surfaceflinger will draw into in addition to the main screen.
    
    Change-Id: Id0bbb0b854bb7bae44d57246a90b65d4567f9a21
    Implement SurfaceFlinger's ANW on top of BufferQueue
    
    SF now has its own implementation of ANW for the
    framebuffer and it uses BufferQueue. FramebufferNativeWindow
    is now only used by stand-alone apps.
    
    Change-Id: Iddeb24087df62bd92b0f78e391dda9b97ddc859c
    set vsync power hint
    
    Change-Id: I28c2faf9ff584df3e74392712971cbcf75eb9e98
    get rid off preserve backbuffer optimization in SF
    
    this optimization didn't improve performance and in fact
    seemed to hurt more than anything else. it also made
    things a lot more complex as it introduced edges cases
    when switching to/from h/w composer.
    
    Change-Id: Iaafc235e175f5740cd98bff914d706e02ab88bb8
    SurfaceFlinger now uses the new VSYNC HAL API.
    
    If h/w composer doesn't support vsync (version < 0.3) we
    "fake" it with a timer.
    
    Change-Id: I1e3be79f43c9631d1293ad7d6cf52f9bfc42d65b
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    improve SurfaceFlinger dumpsys
    
    It is now possible to say:
    
    dumpsys SurfaceFlinger --latency
    
    to print latency information about all windows
    
    dumpsys SurfaceFlinger --latency window-name
    
    to print the latency stats of the specified window
    
    for instance: dumpsys SurfaceFlinger --latency SurfaceView
    
    The data consists of one line containing global stats, followed by
    128 lines of tab separated timestamps in nanosecond.
    
    The first line currently contains the refresh period in nanosecond.
    Each 128 following line contains 3 timestamps, of respectively
    the app draw time, the vsync timestamp just prior the call to set and
    the timestamp of the call to set.
    
    Change-Id: Ib6b6da1d7e2e6ba49c282bdbc0b56a7dc203343a
    remove dead/usnused code
    
    Change-Id: I6fa2bc6ee01790abd2c1533f043d61a5e5c8d26e
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    Fix build.
    
    Revert "Add support for sending VSYNC events to the framework"
    
    This reverts commit f3918c5bd4bc9f02f74da42995564150ca2dd382.
    
    Change-Id: I998e3e1aa3fa310829ae973b64fe11b01f6f468f
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: If4126023fc9c067e56087ec7d16a8fd542ce1794
    fix transition from full overlays to fb
    
    we need to clear the whole framebuffer in that situation because
    we can't trust the content of the FB when partial (fb preserving)
    updates are used.
    
    Bug: 5318492
    
    Change-Id: I3f0e01b0fb665a34e44d88ad9f0f54a5d990060b
    fix transition from full overlays to fb
    
    we need to clear the whole framebuffer in that situation because
    we can't trust the content of the FB when partial (fb preserving)
    updates are used.
    
    Bug: 5318492
    
    Change-Id: I3f0e01b0fb665a34e44d88ad9f0f54a5d990060b
    Add a h/w composer API to allow the HAL to trigger a redraw
    
    This is useful in various situations, for instance if the HAL
    wants to change its compositing strategy.
    
    Bug: 4488017
    Change-Id: I5afc14e5917c6db7926d7417d48677d5aba50caa
    fix memory corruption when retriving GL_MAX_VIEWPORT_DIMS
    
    Change-Id: I2e0b1eac6dbc6a4ecbbaf31013aa02cf2369fce2
    remove support for PUSH_BUFFER surfaces and overlays
    
    the same functionality is now supported through
    the h/w composer HAL, and YUV support in the GPU.
    
    Change-Id: I8146605449954b8e8fd7f78810b7d873c2d8f5bf
    surfaceflinger: add support for gralloc dump hooks
    
    Change-Id: Ib6f539ed0132b70d040d653c03d52cc04249ac3c
    [3171580] SurfaceFlinger Bypass mode. (DO NOT MERGE)
    
    This is a poor's man precursor to the h/w composer HAL.
    Basically we detect when a window is full screen and in
    that case we bypass surfaceflinger's composition step, which
    yields to much improved performance.
    
    Change-Id: Ie03796ae81a1c951949b771c9323044b980cb347
    Add logging of various important graphics events
    
    There are 16 events logged in the event log:
    SF_APP_DEQUEUE_BEFORE
    SF_APP_DEQUEUE_AFTER
    SF_APP_LOCK_BEFORE
    SF_APP_LOCK_AFTER
    SF_APP_QUEUE
    
    SF_REPAINT
    SF_COMPOSITION_COMPLETE
    SF_UNLOCK_CLIENTS
    SF_SWAP_BUFFERS
    SF_REPAINT_DONE
    
    SF_FB_POST_BEFORE
    SF_FB_POST_AFTER
    SF_FB_DEQUEUE_BEFORE
    SF_FB_DEQUEUE_AFTER
    SF_FB_LOCK_BEFORE
    SF_FB_LOCK_AFTER
    
    all events log the buffer conserned and a timestamp in microseconds.
    
    by default the logging is not enabled, to turn it on:
    adb shell service call SurfaceFlinger 1006 i31 1
    adb shell setprop debug.graphic_log 1
    
    The effect is immediate in SurfaceFlinger, but applications need to be
    restarted.
    
    Change-Id: Ifc2e31f7aed072d9a7dede20ff2ce59231edbec1
    revert hwcomposer HAL changes. DO NOT MERGE.
    
    This reverts commit:
    94364b91a2894bf037b8beb027132fbb812e1434
    f8e705dea48f77f1c2532fdbadd4997dd1851af0
    b59beb5ca68d0228f60dda60d85e2d0226b33215
    e0d5f5bcf5a8b26f4ad75f549cbf380b2c9faf20
    call into hwcomposer HAL when present
    
    Change-Id: I70f31c69a9436a43860e78977442863ecba6d27b
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    Revert "Revert "fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger""
    
    This reverts commit 330dd304a471d260a73e342a240921c03c825f99.
    Revert "fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger"
    
    This reverts commit 081bc5c47d8a980e6eafa70ddafcd89981586391.
    Revert "am 256fc043: am 081bc5c4: fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger"
    
    This reverts commit e02dec8c4cbab17d09983af1328308b8aa61ef85, reversing
    changes made to 6d7a052fb04b251c517d0a9049b8d5d7408ce8c0.
    
    Bug: 2798567
    fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger
    
    Make sure to not use GL_TEXTURE_EXTERNAL when it's not supported
    by the GL. The error was harmless, but annoying.
    
    Change-Id: I571a9a9b05d35da51420950a6a6e95629067efd0
    remove the "memcpy" hack
    
    this hack was used for gpus that don't support cached buffers
    for s/w clients. currently we have no gpu with this issue.
    this removes quite a bit of complexity.
    
    Change-Id: I72564669f124f92805030e61983711f61c76b6d9
    clean-up surfaceflinger a bit
    
    get rid of the glDrawTexi path and use floating points instead of fixed point maths
    
    Change-Id: I3aa9ce2dc082f702160e605a16ba5fe987cdf087
    fix [2594950] Flash: Zooming in on some content crashes the Nexus One and causes it to reboot (runtime restart)
    
    We now limit the size of the surface to the maximum size supported by the GPU.
    On Nexus One this will 2048 -- it could be different on other devices.
    Surface creation fails if the limit is exceeded.
    
    Change-Id: I9ecfc2e9c58c9e283782b61ebfc6b590f71df785
    eclair snapshot
    fix [2168528] enable glTexImage2D code path in SF for software-only buffers
    minor SurfaceFlinger code cleanup and remove unnecessary tests
    Android side of the fix for [2121211] Sholes has stutter during animations
    
    a new method, compostionComplete() is added to the framebuffer hal, it is used by surfaceflinger to signal the driver that the composition is complete, BEFORE it releases its client. This gives a chance to the driver to
    make use of new eglGetRenderBufferANDROID extension to clean-up a bit a few hacks added recently
    hack copybit back in for video playback on msm7k. we have h/w accelerated video again
    created an new EGL extension called ANDROID_swap_rectangle
    
    ANDROID_swap_rectangle allows to specify the rectangle affected by eglSwapBuffers(), anything outside of this rectangle is unchanged. in particular EGL_BUFFER_DESTROYED only applies to that rectangle. This extension as well as EGL_BUFFER_PRESERVED allow major optimizations on surfaceflinger, which can redraw only the dirty area during compositing.
    
    However, ANDROID_swap_rectangle allows further optimizations in EGL by reducing the amount of copy-back needed. ANDROID_swap_rectangle is particularily important for software implementations.
    minor clean-up in FramebufferNativeWindow
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    When eglMakeCurrent fails we need to fix the egl state.
    
    Bug: 16676660
    
    Change-Id: Ie7bee9c78378b9e9206060444319e6ee35e1ab74
    surfaceflinger: add getDisplayStats() method
    
    This is used by media service to schedule video frames at the
    proper time, based on precise vsync timings.
    
    Bug: 14659809
    Change-Id: I1a90603f3dc09dca9aa4f90a3aa845fab56e0a5e
    Add rotation to surfaceflingers screen cap.
    
    + This is needed so that activity manager does not
      have to do cpu side rotations when capturing recents
      thumbnails.
    
    Change-Id: If998008e675ad01305db8399fd643cf4608b7025
    Have VirtualDisplays send SF resize messages when resizing
    
    Change-Id: I76d15b22099a659450ec875836c9bf2b6584838f
    Modified SurfaceFlinger to implment setActiveConfig and getActiveConfig.
    
    This can be used to change the current display mode of the device.
    
    Change-Id: Icdc3fb58389b861dc77b68102083da6f7a96eccb
    Tested: None
    (cherry picked from commit 2651fa94635a96d653038fb389a0dd827338f8d3)
    Turn on support for async cursor update in surfaceflinger.
    
    If available, surfaceflinger will use the hwc setCursorPositionAsync()
    api to change the position of supported cursor layers outside of
    the usual prepare/set loop.
    
    Change-Id: Ib3fc5c0c390b3489ddbba202379840a1d2748917
    surfaceflinger: Replace blank/unblank with setPowerMode
    
    We replace the blank/unblank calls in surfaceFlinger with a more generic
    setPowerMode() routine.
    
    Some displays support different power modes (for example, with reduced
    color palettes). Depending on the use case we should be able to toggle
    these modes, so as to achieve incremental power savings.
    
    Initially, three power modes will be supported:
    - HWC_POWER_MODE_OFF
    - HWC_POWER_MODE_DOZE
    - HWC_POWER_MODE_NORMAL
    
    HWC_POWER_MODE_OFF will correspond to blanking the display, while
    HWC_POWER_MODE_NORMAL will correspond to unblanking. HWC_POWER_MODE_DOZE
    will put the display into a low power setting, if it is supported in
    hardware.
    
    If such a low power mode is not supported, it should be treated as a
    call to set the mode to HWC_POWER_MODE_NORMAL.
    
    As a consequence of adding the mPowerMode field, the mScreenAcquired is
    no longer required, and thus references to it are removed and replaced
    equivalent references to mPowerMode.
    
    We also add the glue code to connect the services invocation of setting
    a power mode and the HAL implementation in HWComposer.
    
    Bug: 13472578
    Change-Id: I431595ecf16d2f2c94259272db3dd42f29636204
    Signed-off-by: Prashant Malani <pmalani@google.com>
    SurfaceFlinger: Add sourceCrop to screenshot
    
    Adds a sourceCrop Rect parameter to screenshot commands, which allows
    clients to capture only a portion of the screen instead of the whole
    screen.
    
    Bug: 15137922
    Change-Id: I629447573cd34ffb96334cde7ba02490b9ea06d8
    Enable changing display configuration
    
    This allows querying and switching display device configurations
    through the ISurfaceComposer/SurfaceComposerClient interface.
    
    Bug: 14320401
    Change-Id: I8c22165698950e5da32204c1c4da92122f91a715
    Adding render stats APIs to UiAutomation (framework native).
    
    bug:12927198
    
    Change-Id: Ibb1c07f7d89e11281e5c1f27f412a29ac6f9c4ab
    Remove deprecated BufferQueue constructor
    
    Bug: 13415624
    Change-Id: I9fe15e45daa7351f1db34ee75bfee6f19cb347d3
    Revert "Implement video plane layer"
    
    This reverts commit f837c93a1b392dbc4f7099d0c4fb723e32ca438e.
    
    Change-Id: I6a1aa9ad0aca023267dc53d19c950b1535123ca7
    Implement video plane layer
    
    Binding with video source will follow.
    
    Change-Id: Ic14e9757f5b61f4055cbeda47c1bafae0a621abb
    Allow disabling layer rotation during screenshots
    
    Add the ability to ignore layers' transformation matrices during
    screenshot capture, which will allow the window manager to capture
    unrotated images for recents during the device rotation animation.
    
    Bug: 11805195
    Change-Id: I854d87bc84ca06ef9a054a454af1c080ee66fbb8
    Move EGLConfig selection to RenderEngine
    
    Bug: 12230666
    Change-Id: I8d1111a7e0fd9d9e2525e6a80da8ce46d7dd085d
    Signed-off-by: Jesse Hall <jessehall@google.com>
    SurfaceFlinger: give SF its own vsync phase
    
    This change allows SurfaceFlinger to run at a different vsync phase offset from
    that used by external listeners.
    
    Bug: 11175503
    Change-Id: I561c53a5659fa6dc1e3e4ae30340f3c1a6adceb4
    SurfaceFlinger: Add EventControlThread
    
    This change adds a new thread for calling HWComposer's eventControl
    asynchronously.  The DispSync-based vsync approach ends up enabling and
    disabling HWComposer's vsync callbacks at arbitrary times, and some HWComposer
    implementations do not have these calls optimized.
    
    Bug: 11175503
    Change-Id: I719be82bd200b391c61d40863b991c7b59acdfd6
    Disable hardware vsync when blanking the screen
    
    Bug: 11220224
    Change-Id: I99d0a42e1a6bb0aaf89706f6d100e9ef2a5deaa4
    SurfaceFlinger: SW-based vsync events
    
    This change adds the DispSync class, which models the hardware vsync event
    times to allow vsync event callbacks to be done at an arbitrary phase offset
    from the hardware vsync.  This can be used to reduce the minimum latency from
    Choreographer wake-up to on-screen image presentation.
    
    Bug: 10624956
    Change-Id: I8c7a54ceacaa4d709726ed97b0dcae4093a7bdcf
    Fix two EGLConfig selection bugs
    
    This fixes two bugs introduced by
      Change-Id: Ia8cc084c02a0e3de910def024da8a08d02bbd89d
    
    (a) There is no invalid EGLConfig value, in particular zero is valid.
        Checking return values of eglGetConfigs and eglChooseConfig is the
        only way to determine success.
    (b) The "simple" EGLConfig query used as the emulator fallback should
        not include EGL_RECORDABLE; the emulator doesn't have it.
    
    Bug: 10935622
    Change-Id: Ib798a24e7cf06a679811c46eaa45d39174a715ec
    Fix two EGLConfig selection bugs
    
    This fixes two bugs introduced by
      Change-Id: Ia8cc084c02a0e3de910def024da8a08d02bbd89d
    
    (a) There is no invalid EGLConfig value, in particular zero is valid.
        Checking return values of eglGetConfigs and eglChooseConfig is the
        only way to determine success.
    (b) The "simple" EGLConfig query used as the emulator fallback should
        not include EGL_RECORDABLE; the emulator doesn't have it.
    
    Bug: 10935622
    Change-Id: Ib798a24e7cf06a679811c46eaa45d39174a715ec
    reinstate black-screenshot debugging code
    
    turned off by default.
    
    Bug: 10809349
    Change-Id: I3e6b8c7860e6b0e122b8f07de4020967cd1f005c
    Fix GLES context version selection
    
    Explicitly selects an ES 2.0 config first, then an ES 1.x config,
    before attempting the fallback path for the emulator.
    
    Bug: 10820214
    Change-Id: Ia8cc084c02a0e3de910def024da8a08d02bbd89d
    Add API for pushing color transforms to SurfaceFlinger
    
    BUG: 9057596
    Change-Id: Iea0953366eac875b7968897a75472c25a137edb5
    color blindness enhancement
    
    This is an attempt at improving the experience of
    users with color vision impairement.
    
    At this time this feature can only be enabled for
    debugging:
    
      adb shell service call SurfaceFlinger 1014 i32 PARAM
    
      with PARAM:
       0 : disabled
       1 : protanomaly/protanopia simulation
       2 : deuteranomaly/deuteranopia simulation
       3 : tritanopia/tritanomaly simulation
      11, 12, 13: same as above w/ attempted correction/enhancement
    
    The enhancement algorithm tries to spread the "error"
    such that tones that would otherwise appear similar can be
    distinguished.
    
    Bug: 9465644
    
    Change-Id: I860f7eed0cb81f54ef9cf24ad78155b6395ade48
    SurfaceFlinger now runs in the process's main thread
    
    it used to spawn its own thread and return the main thread
    to the binder thread pool -- this was confusing the naming
    of things in the kernel.
    
    Bug: 10331839
    
    Change-Id: I2d13a6d73409a38109300fcbe6a04b4c41cb5d00
    Use new HWC display type/count constants.
    
    Change-Id: I774d0c68906ac6dc69268f708c30a6b0868b8816
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    Add ISurfaceComposer::destroyDisplay
    
    Bug: 10191053
    Change-Id: Ia89286f95421344a60ffedaaca5825c4e3cd7f9e
    remove support for glReadPixels screenshot path
    
    this was only needed on some chipset we're not
    supporting in KLP.
    
    Change-Id: I2e8fc07f135030bd61d2e241a8e426f1a4316425
    surfaceflinger: add frame duration logging
    
    Change-Id: Ib414a45e7e191f23a2726cbbbeb606e9ce68a3b5
    Debug code for detecting all black pixels screenshots
    
    Bug: 9120292
    Change-Id: If60db32524db973bb1f905ba3cb415c2a1cd7e71
    Refactor SF. Move all GL operations in their own class.
    
    this is the first step to add support for GLES 2.x, this
    change breaks the dependency of SF on GLES 1.x by moving
    all operation into their own class.
    
    Bug: 8679321
    
    Change-Id: I0d2741eca2cefe67dfd9cf837cac10c4d126928b
    Prevent opaque windows from making framebuffer translucent
    
    To keep the code readable now that we have four different texenv
    configurations, this change separates the decisions about what
    configuration to use from the GL calls to set up the configuration.
    
    Bug: 8963244
    Change-Id: Ia07a306a7809ba8f93493d0160ccbd509e948581
    make all libsurfaceflinger and libsensorservice symbols's visibility hidden
    
    we only export the main entry-point.
    this saves about 150KB.
    
    Change-Id: I55eb2b6705386fdfa43860deb62f9cdd2a0982aa
    use a Framebuffer Object to render all screenshots
    
    this allows us to render into a buffer with a
    pixelformat of our own choice; this is much faster
    on all platform.
    
    Bug: 8582615
    Change-Id: I61298fc8e43fa6f92044c5123955cb5c7897dab7
    clean-up/simplify all dump() APIs
    
    remove the scratch buffer parameter and use
    String8::appendFormat() instead.
    
    Change-Id: Ib96c91617c8e7292de87433d15cf6232b7d591b0
    Improve screenshot performance on some devices (DO NOT MERGE)
    
    this affects devices that need a glReadPixels(). We use
    a FBO instead of a GlConsumer as an intermediate render target, this
    saves 2 calls to eglMakeCurrent().
    
    On Galaxy Nexus this allows us to go from ~135ms to ~35ms for
    recent's screenshots.
    
    Bug: 8582615
    Change-Id: I6b25291ecc235f1927579bbb2db3c731e985c6e8
    Improve screenshot performance on some devices (DO NOT MERGE)
    
    this affects devices that need a glReadPixels(). We use
    a FBO instead of a GlConsumer as an intermediate render target, this
    saves 2 calls to eglMakeCurrent().
    
    On Galaxy Nexus this allows us to go from ~135ms to ~35ms for
    recent's screenshots.
    
    Bug: 8582615
    Change-Id: I6b25291ecc235f1927579bbb2db3c731e985c6e8
    Clean up HWC state when releasing a DisplayDevice
    
    DisplayDevices can be released when DisplayManager removes them from
    the display list, or (for virtual displays) when the surface is set to
    NULL. We were only cleaning up HWC resources associated with the
    display in the first case.
    
    Bug: 8384764
    Change-Id: Id3d226dd7178fbe6d0a2ac4e2660b864ee073de3
    Fix dump when virtual display exists
    
    SurfaceFlinger::getLayerSortedByZForHwcDisplay only worked for builtin
    displays.
    
    Bug: 8384764
    Change-Id: I989275407fb2f06d166a6e70321c3211e27e562e
    make sure screenshot are in a format supported by Bitmap.java
    
    Change-Id: I0fb9cc4088f9c1fd27e6c017b0a7c5617adb4660
    only use glReadPixels() when needed when taking screenshots
    
    some drivers don't support this yet, so we use a system
    property to enable the glReadPixels "workaround" for them:
    
      ro.bq.gpu_to_cpu_unsupported=1
    
    Change-Id: I74d6a3a8f0cee8d5a507b72c760cf247e39195e0
    rework how we take screenshots for a CPU consumer
    
    We're not using IMemoryHeap as a transport anymore,
    instead we're providing a CpuConsumer and use the
    IGraphicBufferProducer version of the screenshot API.
    
    However, some GPU drivers don't support properly
    a GPU to CPU path, to work around this, we use a
    temporary BufferQueue on the server side for the
    GL rendering, and we use glReadPixels into the
    CpuConsumer (we're now using a CPU to CPU path
    which is always supported).
    
    Currently this "wrapping" is always performed,
    but it can be bypassed on devices that support
    the GPU to CPU path.
    
    This also addresses a DoS attack vector on
    SurfaceFlinger, where an application could
    consume all of SF's filedescriptors by creating
    a lot of screenshots in a row.
    
    Bug: 8390553
    
    Change-Id: I9e81514c2a7711b9bb393f74305be7d2abe08f1c
    get rid of purgatory and fix QueuesToWindowComposer query
    
    the purgatory list wasn't needed anymore; in fact it had no effect as
    buffer life-time management is now handled by the BufferQueue.
    
    For QueuesToWindowComposer we keep a list of wp<> on the IBinder
    for IGraphicBufferProducers we hand over to clients so we can
    easily check if an IGraphicBufferProducer is ours. We clean-up the
    list when our IGraphicBufferProducer are destroyed.
    
    Bug: 8349142
    Change-Id: I1aa06652ade8c72d0004a3f5e6c3d6e8a82fc2ae
    get rid of ISurface
    
    ISurface was only used to get the IGraphicBufferProducer from
    a Layer. It's now replaced by a BBinder subclass / IBinder and
    is only used as a handle to the surface, to both refer to it
    and manage its life-time.
    
    Also cleaned-up a bit the ISurfaceComposer interface and
    "create layer" code path.
    
    Change-Id: I68d0e02d57b862cffb31d5168c3bc10cea0906eb
    Get rid of LayerBase.
    
    The functionality of LayerBase and Layer is folded
    into Layer. There wasn't a need for this abstraction
    anymore.
    
    Change-Id: I66511c08cc3d89009ba4deabf47e26cd4cfeaefb
    fold LayerBaseClient into LayerBase
    
    Change-Id: Ic745136522df59c42f0885fd969e75ea55d09f01
    Remove support for ScreenshotLayer
    
    Change-Id: I5b571a4cf3faa77d2c4aca916fa4bd00a1065bb9
    rework screenshot API and implementation
    
    - SurfaceFlinger now supports to take a screenshot
      directly into an IGraphicBufferProducer
    
    - reimplement the IMemoryHeap screenshot on top
      of the above
    
    - reimplement LayerScreenshot such that its
      BufferQueue is directly used as the destination
      of the screenshot. LayerScreenshot is now a thin
      wrapper around Layer
    
    Bug: 6940974
    
    Change-Id: I69a2096b44b91acbb99eba16f83a9c78d94e0d10
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: Ibed34175ae273608393aaa5f0a7df207dc40d709
    get rid of Surface identity and token
    
    we use the IBinder instead.
    
    Change-Id: I4aa0b58869ba43f19980013620051e5a261b062d
    SurfaceFlinger: add win anim frame time tracking
    
    This change makes the 'dumpsys SurfaceFlinger --latency' command with no extra
    args dump the frame timestamp data for the most recent frames that
    SurfaceFlinger generated that included window animation transaction changes.
    
    Change-Id: I8bded1ea08a4cddefef0aa955401052bb9107c90
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    Create builtin display tokens on demand
    
    For hotpluggable builtin displays (currently just HDMI), create the
    display device IBinder token when the display is connected and destroy
    it when the display is disconnected. Previously we created the tokens
    at startup and never changed them. This made it so that when comparing
    current and drawing state, we couldn't tell whether a display had been
    disconnected and reconnected.
    
    Bug: 7491120
    Change-Id: I2ac82b864e10cb1cd0a308782d7e0ab9745c5d81
    Create builtin display tokens on demand
    
    For hotpluggable builtin displays (currently just HDMI), create the
    display device IBinder token when the display is connected and destroy
    it when the display is disconnected. Previously we created the tokens
    at startup and never changed them. This made it so that when comparing
    current and drawing state, we couldn't tell whether a display had been
    disconnected and reconnected.
    
    Bug: 7491120
    Change-Id: I23b77037dc0f548d549abf580339edd0e3c626e9
    SurfaceFlinger: add support for secure displays
    
    This change adds support for displays that are not allowed to display surfaces
    with the eSecure flag set.  All non-virtual displays are considered secure,
    while virtual displays have their secure-ness specified at creation time.
    
    Bug: 7368436
    Change-Id: I81ad535d2d1e5a7ff78269017e85b111f0098500
    SurfaceFlinger: add animation transactions
    
    This change adds a transaction flag for WindowManager to indicate that a
    transaction is being used to animate windows around the screen.  SurfaceFlinger
    will not allow more than one of these transactions to be outstanding at a time
    to prevent the animation "frames" from being dropped.
    
    Bug: 7353840
    Change-Id: I6488a6e0e1ed13d27356d2203c9dc766dc6b1759
    fix a corruption in blank/unblank
    
    we were holding a reference (ie: pointer) to a sp<DisplayDevice>
    while processing the message. Meanwhile the object itself could
    go away and we would end up accessing a dead object.
    
    the root cause of the problem is that we are accessing mDisplays[]
    in a few places outside of the main thread.
    
    Bug: 7352770
    Change-Id: I89e35dd85fb30e9a6383eca9a0bbc7028363876c
    SurfaceFlinger: add animation transactions
    
    This change adds a transaction flag for WindowManager to indicate that a
    transaction is being used to animate windows around the screen.  SurfaceFlinger
    will not allow more than one of these transactions to be outstanding at a time
    to prevent the animation "frames" from being dropped.
    
    Bug: 7353840
    Change-Id: I6488a6e0e1ed13d27356d2203c9dc766dc6b1759
    fix dumpsys Layer name when using multiple displays
    
    Bug: 7288401
    Change-Id: I14beeef58fac5270cef3b611e18c163060efe6c3
    make sure we don't call into the HWC HAL when not needed
    
    when enabling/disabling vsync we now make sure to
    not call into the HAL if the state wouldn't change.
    
    Bug: 7274951
    
    Change-Id: Ie24a6d68888a51b577acf9c2a973d85437cbacaf
    make sure we don't call into the HWC HAL when not needed
    
    when enabling/disabling vsync we now make sure to
    not call into the HAL if the state wouldn't change.
    
    Bug: 7274951
    
    Change-Id: Ie24a6d68888a51b577acf9c2a973d85437cbacaf
    Pass display arg to blank/unblank
    
    This allows us to blank and unblank displays other than the built-in
    display (e.g. HDMI).
    
    Bug: 7240511
    Change-Id: I89ea13f9e497be74c3e1231d0c62fb558e93e0f8
    add support for EGL_FRAMEBUFFER_TARGET_ANDROID
    
    we now try first with EGL_FRAMEBUFFER_TARGET_ANDROID, and
    pick the first config we find. Otherwise, we revert to
    the old algorithm.
    
    Bug: 7232584
    
    Change-Id: I8d5c5a4ce48420832c2e2828718a8f53325effb0
    Show build config in dumpsys SurfaceFlinger
    
    This adds a line to the "dumpsys SurfaceFlinger" output that shows
    build-time configuration values.
    
    Example:
     Build configuration: [sf HAS_CONTEXT_PRIORITY] [libui] \
      [libgui USE_FENCE_SYNC]
    
    Bug 7206633
    
    Change-Id: Ibe1856b459d34a4be6ee83a4ebfd2807e6cc68a0
    We now report hotplug events to the framework
    
    Change-Id: I2d6b7787d39e5929485a551e4982498c5053c211
    GraphicBufferAlloc class was declared twice
    
    this was confusing because the one in FramebufferSurface
    wasn't in fact being used
    
    Change-Id: Ied45aec20d804cfbe52440f9b2f2852a85c757cf
    Plumb display name into SurfaceFlinger
    
    The Surface createDisplay() call takes a display name for debugging.
    This change carries it through SurfaceFlinger and displays it in
    the "dumpsys SurfaceFlinger" output.
    
    Bug 7058158
    
    Change-Id: I79f3474a8656ff1beb7b478e0dbf2c5de666118a
    refactor things a bit
    
    - decouple GL and main display initialization
    - ensure that each "supported" display has its own FramebufferSurface
    - onScreenAcquired/Released now takes a display
    
    Change-Id: If34a05f3dea40f6c79db77f4dde283a2580daac4
    don't call hwc with non-empty layer lists for blanked displays
    
    we now make sure to take the blanked state of a display into
    account when we build its list of visible layers, this ensures
    that we won't call prepare/set with a non-empty list when the
    display is blanked.
    
    Possibly fixes 7075380, 7103553, 7130187, 7016215
    
    Bug: 7075380
    Change-Id: I9fdd2e73d1b7621eaeca3d4ac2ae60d9fb1b3631
    implement display viewport and frame
    
    note: viewport clipping is not implemented yet
    
    Change-Id: I7fde7c4de075d409d95c48bb20ba8ee017f6f00a
    add libsurfaceflinger_ddmconnection for PDK build
    
    - the library is dlopened from libsurfaceflinger
    - the library built only when libnativehelper exists
    
    Bug: 7089510
    Change-Id: Ib3ea1029d7e8f6e055f4b759d0bf68f5123fa8a1
    we were not always clearing the screen properly
    
    Change-Id: I269dd866e965aebd9b3c4667095818202982f4a3
    Eradicate DisplayID.
    
    DisplayDevices are now keyed of the wp<IBinder> the client uses.
    DisplayID has now become DisplayType which is just used to identify
    physical displays (as opposed to virtual displays such as wifi displays).
    
    Change-Id: I0c5968f2c902dcd699a7e0afacf833ff070c12ea
    Banish DisplayID from the SurfaceFlinger API.
    
    Use only display tokens in the API to refer to new displays.
    
    Don't require the caller to specify the display when creating
    a surface (since in general a surface could be shown on
    any display).
    
    This is intended to be a minimum change just to update the API.
    Note that SurfaceFlinger still uses DisplayID in a few places
    internally that might cause some features not to work properly
    when there are multiple displays (LayerScreenshot, for example).
    
    Change-Id: I3d91eec2da406eefd97bcd53655d403ad865a7e6
    Added display initialization method
    
    The primary display device was being configured to "blank" by
    default, which prevented the boot animation from appearing
    (unless you got lucky with the hardware composer state).
    
    Bug 6975688
    
    Change-Id: I0fa52e9e719c6e997c5725a7baf15d9718461b78
    surfaceflinger: fix display id selection
    
    This change fixes display ID selection so that it never chooses negative
    numbers as display IDs.
    
    Change-Id: I5af1acc7b1270b371595e096b18e2a6ad250c7ba
    Revert "Added display initialization method"
    
    Something doesn't seem right (again).
    
    This reverts commit 53ade0853ca003c9e917b5e7d34e1b1338d7b87d.
    
    Change-Id: Id5786997ca9dd2a447363e8ac95213ea37468504
    Added display initialization method
    
    The primary display device was being configured to "blank" by
    default, which prevented the boot animation from appearing
    (unless you got lucky with the hardware composer state).
    
    Bug 6975688
    
    (This reverts an earlier revert.)
    Revert "Added display initialization method"
    
    This reverts commit 3f3956236aac97b6aa25fa89f0983d5e9d065fdb
    
    Change-Id: Ia2a15d9a5db88add6019edf9d955cef1f73d432d
    Revert "Added display initialization method"
    
    This reverts commit 3f3956236aac97b6aa25fa89f0983d5e9d065fdb
    
    Change-Id: Ia2a15d9a5db88add6019edf9d955cef1f73d432d
    Added display initialization method
    
    The primary display device was being configured to "blank" by
    default, which prevented the boot animation from appearing
    (unless you got lucky with the hardware composer state).
    
    Bug 6975688
    
    Change-Id: Idaa0d0b98ebb331a17d1b16774c6b05bfa1e8728
    refactor compositing code to avoid multiple eglMakeCurrent() calls
    
    when multiple displays are connected, we ended-up having to
    call eglMakeCurrent() twice per display due to a limitation
    in EGL. this fixes that.
    
    Change-Id: I11e4584df50f8c24bbecee74e37b28b3ee031d2f
    reimplement wifi display hack with new external display SF framework
    
    fix a few bugs with external displays
    
    - HWComposer doesn't really handle multiple displays yet
      so there is a lot of ugliness there
    
    - We also need to make sure that external displays are not
      blanked by default
    
    - due to some EGL limitations surfaces being swapped need
      to be current
    
    Change-Id: I82bff05b43bcebd8da863c7c76b4edbc3bc223a9
    make multi-display more real
    
    - displays are represented by a binder on the client side
    - c++ clients can now create and modify displays
    
    Change-Id: I203ea5b4beae0819d742ec5171c27568f4e8354b
    turn DisplayDevice into a reference-counted object
    
    it's safer this way because this object owns an
    EGLSurface which cannot be easily reference-counted.
    
    it also gives us the ability to sub-class it, which
    we might want to do soon.
    
    Change-Id: I07358bb052dc5a13b4f2196b2c2b6e6e94c4bb4f
    remove a dependency of DisplayDevice on the refresh rate
    
    this remove a dependency (not all) on FramebufferSurface
    
    Change-Id: Ie07ce70760cdcedfb41b5b41bea8da45637bf474
    screen-off animation won't be handled by SF anymore
    
    Change-Id: Idc41386804ae7d7eb981c36e1bc55c270870c8d0
    We now have a real list of displays.
    
    displays can be dynamically added or removed, and the
    list is part of the SF's transaction.
    
    Change-Id: I4186ea39f1317c0e7c044f869004017738968fab
    rename DisplayHardware to DisplayDevice
    
    Change-Id: I3f7250cd914e0da4f9ec2c9403587bbe12f3cc62
    getting closer to final main composition loop
    
    Change-Id: Icd63782366ffd11d9ea00c925ae5783ed7440cdb
    get rid of global regions that should be tracked per display
    
    Change-Id: I3b871860cc29f1b2fdcc22b0c577a6eae65d9296
    Move eglSwapBuffers out of HWComposer
    
    Commit 8630320 moved the eglSwapBuffers fallback (for devices with no
    HWC implementation) from DisplayHardware to HWComposer. But HWComposer
    only knows about the framebuffer EGL display and surface handles if
    there is a HWC, so it was always passing bogus handles.
    
    This change moves the eglSwapBuffers fallback up to SurfaceFlinger,
    which has access to the framebuffer EGL handles.
    
    Bug: 6886613
    Change-Id: Iad3f5ff7c90ee48d7053999e6a4548d6794b6ebd
    get rid of the shared-memory control block
    
    Change-Id: If814060aca1d2ff2619d4adcd57296983d207f7f
    split HWComposer out of DisplayHardware
    
    we will only ever have a single instance of HWComposer, so
    it's now an attribute of SurfaceFlinger, instead of being part
    of DisplayHardware.
    
    DisplayHardware now just represents a "display" (it should be renamed).
    
    Change-Id: Iec191e57686868e1df6daa8b880a286c9fefde56
    update SF binder protocol to support setting display attributes
    
    no change of functionality -- the old behavior is implemented
    on top of this new protocol.
    this new protocol will allow, eventually, to pass informations
    about displays and layer stacks.
    
    Change-Id: Ic6c2295e61ec8ecbc8ce01ab7664e35d928202fc
    SurfaceFlinger cleanup
    
    mostly refactored SurfaceFlinger.h, but also removed dead code.
    cleaned-up a few includes as well.
    
    Change-Id: Ib15f4ffe567912b61ee98aa076c6a283b72811b5
    factor EGL/GL and surface creation out of DisplayHardware
    
    Change-Id: Icd85a6a4caad06f056578008af3e21666fa8b1f4
    mVisibleLayersSortedByZ is now maintained per display
    
    Change-Id: Idcdb77eba1a3f99b3e4b2150128a82acaffcd2a8
    one more step towards multiple display support
    
    - remove dependency on cached state in validateVisibility
    - get rid of mVertices and mTransformedBounds
    - get rid of validateVisibility
    - get rid of unlockPageFlip
    - handleTransaction now returns a dirty region
    - computevisibileregion now uses window-manager space
    get rid of GraphicPlane
    
    its functionality is now folded into DisplayHardware
    there will be more changes in that area.
    First prototype atttempting to support an external display
    
    both API and implementation will change, this is just a prototype
    intended to show feasability.
    
    SurfaceFlinger is passed an ISurfaceTexture through a new
    callback, it is in turn used to create an EGLSurface which
    surfaceflinger will draw into in addition to the main screen.
    
    Change-Id: Id0bbb0b854bb7bae44d57246a90b65d4567f9a21
    Exit boot animation cleanly.
    
    The desc.txt file can now mark parts as 'must finish cleanly' by using
    'c' as the part line prefix rather than 'p'.  If so indicated, if the
    bootanimation is asked to quit it will do so only after waiting to
    finish that part.
    
    I considered either making init.c service killing smarter or promoting
    bootanim to be a bindable service with a requestExit method.  However,
    these changes are probably too big/risky given our ship date.  So
    I used a property as a mailbox between SurfaceFlinger and bootanim.
    
    Bug: 6679877
    Change-Id: Id7dca22caa50b450fff25ca94f7242d971034f41
    split-up Client.h out of SurfaceFlinger.h
    
    Change-Id: I1993bf23e417163749d886283563a93d50b361b4
    surfaceflinger: replace early suspend with binder call from PowerManager
    
    SurfaceFlinger will no longer directly synchronize with early suspend.
    Instead, PowerManagerService will synchronize with SurfaceFlinger to
    ensure that a black frame has been drawn on the display, and then
    trigger all early suspend handlers.
    
    Change-Id: I07acdd628440d23fdb69db94319ec5d65d3f4919
    make sure to clear the framebuffer when using overlays
    
    Bug: 6354761, 6353719
    Change-Id: I0739de3fee7c54c14b294ffd768b70ee1f541d9e
    get rid off preserve backbuffer optimization in SF
    
    this optimization didn't improve performance and in fact
    seemed to hurt more than anything else. it also made
    things a lot more complex as it introduced edges cases
    when switching to/from h/w composer.
    
    Change-Id: Iaafc235e175f5740cd98bff914d706e02ab88bb8
    rework screen on/off code
    
    Change-Id: I13f71e850592a588bbd4805b1830c503bd4decb4
    refactor / simplify EventThread
    
    Change-Id: I3981c6fba93b7b985174b2a7045e24db2c0b4428
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    separate transactions from updates
    
    with this changes, SF transactions are handled as soon as possible
    but do not trigger updates. the update is delayed until the next
    vsync.
    
    this allows us to work much better without requiring triple-buffering.
    
    Change-Id: I1fa10794d0cf742129f0877698b7b1e1f2ec7401
    remove unneeded code
    
    Change-Id: I07e2fca7274d2e12bf5b4aee0050794bdb97a8b3
    added a few more commands to SF's dumpsys
    
    --latency-clear [name]
    clears the latency data for the specified layer or for
    all layers if none is specified
    
    --list
    prints the list of all layers regardless of their visibility
    
    Change-Id: I7c07ae020f838c173b98ee50f3fb3e93da78acbb
    improve SurfaceFlinger dumpsys
    
    It is now possible to say:
    
    dumpsys SurfaceFlinger --latency
    
    to print latency information about all windows
    
    dumpsys SurfaceFlinger --latency window-name
    
    to print the latency stats of the specified window
    
    for instance: dumpsys SurfaceFlinger --latency SurfaceView
    
    The data consists of one line containing global stats, followed by
    128 lines of tab separated timestamps in nanosecond.
    
    The first line currently contains the refresh period in nanosecond.
    Each 128 following line contains 3 timestamps, of respectively
    the app draw time, the vsync timestamp just prior the call to set and
    the timestamp of the call to set.
    
    Change-Id: Ib6b6da1d7e2e6ba49c282bdbc0b56a7dc203343a
    remove dead/usnused code
    
    Change-Id: I6fa2bc6ee01790abd2c1533f043d61a5e5c8d26e
    Use the standard CC_LIKELY and CC_UNLIKELY macros
    
    Several source files privately defined macros LIKELY and UNLIKELY in terms
    of __builtin_expect. But <cutils/compiler.h> already has CC_LIKELY and
    CC_UNLIKELY which are intended for this purpose.  So rename the private
    uses to use the standard names.
    
    In addition, AudioFlinger was relying on the macro expanding to extra ( ).
    
    Change-Id: I2494e087a0c0cac0ac998335f5e9c8ad02955873
    Improve the VSYNC api a bit.
    
    - add the ability to set the vsync delivery rate, when the rate is
    set to N>1 (ie: receive every N vsync), SF process' is woken up for
    all of vsync, but clients only see the every N events.
    
    - add the concept of one-shot vsync events, with a call-back
    to request the next one. currently the call-back is a binder IPC.
    
    Change-Id: I09f71df0b0ba0d88ed997645e2e2497d553c9a1b
    SurfaceFlinger: fix layer removal race condition
    
    Layer::lockPageFlip() and layer::onRemove() could be called on
    different threads and race such that lockPageFlip() successfully
    called mSurfaceTexture->updateTexImage() but then gets NULL back from
    mSurfaceTexture->getCurrentBuffer(), leading to a crash.
    
    This change moves Layer::onRemove() calls to
    SurfaceFlinger::commitTransaction() so they happen after the Layer is
    done being drawn from and only happen on the main surfaceflinger
    thread.
    
    Change-Id: I4b550caadff4cc1878d7c3bca6129193fb0c713e
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    Fix build.
    
    Revert "Add support for sending VSYNC events to the framework"
    
    This reverts commit f3918c5bd4bc9f02f74da42995564150ca2dd382.
    
    Change-Id: I998e3e1aa3fa310829ae973b64fe11b01f6f468f
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: If4126023fc9c067e56087ec7d16a8fd542ce1794
    Fix rotation displays frame N-1 briefly while rotating
    
    The ScreenShot layer is now created hidden. The screenshot itself
    is aquired during the transaction when the layer is made visible.
    This guarantees the screenshot and the layer happen atomically
    with respect to screen updates.
    
    Bug: 5534521
    Change-Id: Ida23e1f13d5716ec83b78a15712e0646d6cf8729
    mDirtyRegion is single threaded, but could be accessed from a hwc thread
    
    We now have mInvalidateRegion which holds the region to invalidate, it
    can be set from any thread as long as mInvalidateLock is held. We use
    fine-grained locking here because mInvalidateRegion can be set from anywhere,
    in particular frmo HWC callbacks.
    
    Bug: 5466774
    Change-Id: Iafca20aa3f5b25a87755e65bde7b769aa8f997bc
    mDirtyRegion is single threaded, but could be accessed from a hwc thread
    
    We now have mInvalidateRegion which holds the region to invalidate, it
    can be set from any thread as long as mInvalidateLock is held. We use
    fine-grained locking here because mInvalidateRegion can be set from anywhere,
    in particular frmo HWC callbacks.
    
    Bug: 5466774
    Change-Id: Iafca20aa3f5b25a87755e65bde7b769aa8f997bc
    Add a LayerScreenshot
    
    A LayerScreenshot is a special type of layer that contains a screenshot of
    the screen acquired when its created. It works just like LayerDim.
    
    Make sure to call compositionComplete() after rendering into a FBO.
    
    Bug: 5446982, 5467587, 5466259
    Change-Id: I5d8a1b4c327f9973d950cd4f4c0bca7f62825cd4
    Revert "Add a LayerScreenshot"
    
    This reverts commit d6809f40cf61203573ec5dbc437f695cd132cc18.
    SurfaceFlinger: Remove display freezing code
    
    This change removes the dead code from SurfaceFlinger that resulted from
    disabling support for freezing the display.
    
    Change-Id: I4e5ff00c94b4c7a79af2f65c9850c135210068ed
    SurfaceFlinger: make sync transactions explicit
    
    This change enables a layer or orientation update transaction sent to
    SurfaceFlinger to explicitly request a synchronous transaction.
    
    Change-Id: I97cbba610c13679849f66114b216fa6dbf12f2a9
    Add a LayerScreenshot
    
    A LayerScreenshot is a special type of layer that contains a screenshot of
    the screen acquired when its created. It works just like LayerDim.
    
    Bug: 5446982
    Change-Id: I7814aff2380e7e146937f2b641907be2a30c76cc
    SurfaceFlinger: update orientation via transactions
    
    This change merges the ISurfaceComposer::setOrientation functionality
    into ISurfaceComposer::setTransactionState.  It enables the window
    manager to atomically update both the display orientation and the
    position and size of the windows in a single transaction with
    SurfaceFlinger.
    
    Bug: 5439574
    Change-Id: I18a8ccc564d7d760ef8afb2d015ccdb7a7963900
    fix an issue where the screen could stay off
    
    this would happen when toggling on/off/on very fast, the screen
    could stay black (while the panel is on).
    
    Bug: 5429724
    Change-Id: Ic8aa6aff066e6267923c0d47ef65e314e7bb6d41
    SurfaceFlinger: screenshots w/ protected buffers
    
    This change modifies SurfaceFlinger's screenshot behavior when a layer
    with a protected buffer is visible.  The previous behavior was to simply
    fail the screenshot.  The new behavior is to render the screenshot using
    a placeholder texture where the protected buffer would have been.
    
    Change-Id: I5e50cb2f3b31b2ea81cfe291c9b4a42e9ee71874
    Force a repaint when hwc invalidate hook is called
    
    without this prepare() would be called but not set() since the
    dirty region is empty.
    
    Change-Id: I038acfbdad4c16015357ccde4d1949391d6f989d
    Handle orientation changes more systematically.
    Bug: 4981385
    
    Simplify the orientation changing code path in the
    WindowManager.  Instead of the policy calling setRotation()
    when the sensor determined orientation changes, it calls
    updateRotation(), which figures everything out.  For the most
    part, the rotation actually passed to setRotation() was
    more or less ignored and just added confusion, particularly
    when handling deferred orientation changes.
    
    Ensure that 180 degree rotations are disallowed even when
    the application specifies SCREEN_ORIENTATION_SENSOR_*.
    These rotations are only enabled when docked upside-down for
    some reason or when the application specifies
    SCREEN_ORIENTATION_FULL_SENSOR.
    
    Ensure that special modes like HDMI connected, lid switch,
    dock and rotation lock all cause the sensor to be ignored
    even when the application asks for sensor-based orientation
    changes.  The sensor is not relevant in these modes because
    some external factor (or the user) is determining the
    preferred rotation.
    
    Currently, applications can still override the preferred
    rotation even when there are special modes in play that
    might say otherwise.  We could tweak this so that some
    special modes trump application choices completely
    (resulting in a letter-boxed application, perhaps).
    I tested this sort of tweak (not included in the patch)
    and it seems to work fine, including transitions between
    applications with varying orientation.
    
    Delete dead code related to animFlags.
    
    Handle pausing/resuming orientation changes more precisely.
    Ensure that a deferred orientation change is performed when
    a drag completes, even if endDragLw() is not called because the
    drag was aborted before the drop happened.  We pause
    the orientation change in register() and resume in unregister()
    because those methods appear to always be called as needed.
    
    Change-Id: If0a31de3d057251e581fdee64819f2b19e676e9a
    fix transition from full overlays to fb
    
    we need to clear the whole framebuffer in that situation because
    we can't trust the content of the FB when partial (fb preserving)
    updates are used.
    
    Bug: 5318492
    
    Change-Id: I3f0e01b0fb665a34e44d88ad9f0f54a5d990060b
    rename mInvalidRegion to mSwapRegion
    
    Change-Id: I946cbc782c0c84645843ea44c3d8b04a0a2fe658
    fix transition from full overlays to fb
    
    we need to clear the whole framebuffer in that situation because
    we can't trust the content of the FB when partial (fb preserving)
    updates are used.
    
    Bug: 5318492
    
    Change-Id: I3f0e01b0fb665a34e44d88ad9f0f54a5d990060b
    rename mInvalidRegion to mSwapRegion
    
    Change-Id: I946cbc782c0c84645843ea44c3d8b04a0a2fe658
    Fix another problem with refreshing the screen when switching to/from overlay
    
    the previous fix was incorrect. See comment in setupHardwareComposer for
    full explanations.
    
    Change-Id: Ib24a9af000b8f95cf7319f9272d34997064ceb6d
    Fix an issue is SF that caused drawing artifacts when hwc changed mode
    
    we were not redrawing and/or clearing the FB properly when
    hwc moved a layer from/to FB to/from OVERLAY.
    
    In these cases we needed to expand the dirty region to include
    the layer that changed mode.
    
    Also split composeSurfaces() which was becoming quite large.
    
    Change-Id: Id6fa1acfc4ff694037fddf7efd037a4405732073
    Add a debug option to turn the "transformation hint" off
    
    transformation hint is disabled with:
    
       adb shell service call SurfaceFlinger 1009 i32 1
    
    Change-Id: I9aafe6f280f88ce41569ed69a06dc522b10e3a88
    fix "show screen update" debug option.
    
    Change-Id: I7d8b24124768b5f7d59d3bb0b019e9baaa0dfc4f
    NOTE: from now on, this also disable the h/w composer
    SurfaceTexture: fix queues-to-composer
    
    This change fixes the NATIVE_WINDOW_QUEUES_TO_WINDOW_COMPOSER query of
    Surface and SurfaceTextureClient.  Surface now uses the inherited
    SurfaceTextureClient implementation of this query.  SurfaceTextureClient
    now queries SurfaceFlinger to determine whether buffers that are queued
    to its ISurfaceTexture will be sent to SurfaceFlinger (as opposed to
    some other process).
    
    Change-Id: Iff187e72f30d454229f07f896b438198978270a8
    SurfaceTexture: fix queues-to-composer
    
    This change fixes the NATIVE_WINDOW_QUEUES_TO_WINDOW_COMPOSER query of
    Surface and SurfaceTextureClient.  Surface now uses the inherited
    SurfaceTextureClient implementation of this query.  SurfaceTextureClient
    now queries SurfaceFlinger to determine whether buffers that are queued
    to its ISurfaceTexture will be sent to SurfaceFlinger (as opposed to
    some other process).
    
    Change-Id: Iff187e72f30d454229f07f896b438198978270a8
    as a debug option SrufaceFlinger can now connect to DDMS
    
    this is disabled by default. To enable:
      setprop debug.sf.ddms 1
    
    this debug option requires to restart SurfaceFlinger
    
    Change-Id: Ic2f8050b29911b55bcd21721648b6978700c277d
    SurfaceFlinger doesn't rely on having a custom RefBase destructor
    
    we just use a message to the main thread to
    destroy our GLES state.
    don't kill surfaceflinger when system process dies
    
    Change-Id: I2d3ed87b590f9ccea3fa4af41d92911de070b315
    return an error code with gralloc buffer allocation failures
    
    Change-Id: I471e5d37ea7a42fc8a0f93446ee3b4229da37807
    SF transactions are now O(1) wrt IPC instead of O(N).
    
    Change-Id: I57669852cbf6aabae244ea86940a08a5a27ffc43
    PermissionCache caches permission checks
    
    This is intended to absorb the cost of the IPC
    to the permission controller.
    Cached permission checks cost about 3us, while
    full blown ones are two orders of magnitude slower.
    
    CAVEAT: PermissionCache can only handle system
    permissions safely for now, because the cache is
    not purged upon global permission changes.
    
    Change-Id: I8b8a5e71e191e3c01e8f792f253c379190eee62e
    Revert "merge various SF fixes from gingerbread to honeycomb-mr2" (DO NOT MERGE)
    
    Also revert all dependent changes:
    This reverts commit 8e18668d14adf601cbe5973030c310ec23d88461.
    This reverts commit 69b4587bfbb3e98f793959d9123340360fa233a2.
    This reverts commit a9c9a4baf24700e8817d47d8ea8da1742caea0b5.
    This reverts commit 2c0042b666a969091c931614f2fc0dce2f1cfac8.
    This reverts commit f6c8206735e7e078461e5f2aef6e1a1446fdd075.
    This reverts commit 24855c09173a6caaec7dcedd0c2d7ce15121d39b.
    
    Change-Id: I33e699640f3f59e42fa03c99a9a1b7af0d27d4d8
    revert surfaceflinger leak fix as it uncovered a crasher on xoom (DO NOT MERGE)
    
    This reverts commit 52a43990880b27808bcf562afcc4209d34728e6e.
    
    Change-Id: I1856a48f863b051395b8091ddfd1e01292fa1b1e
    Revert "revert surfaceflinger leak fix as it uncovered a crasher on xoom"
    
    This reverts commit af6edba59e250adbdfa5b3c3be134f70d8c38a16.
    
    Change-Id: I7793d3ca8a4d20a2b188364f47854328ab5f586d
    revert surfaceflinger leak fix as it uncovered a crasher on xoom
    
    Bug: 4600244
    Change-Id: Ia68ebf0f243a051ff6a21b3863e3e5d259bbf7ac
    unify SurfaceTexture and Surface
    
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    Add SurfaceTexture logging
    fix onFrameAvailable
    merge various SF fixes from gingerbread to honeycomb-mr2 (DO NOT MERGE)
    
      Fix a race that could cause GL commands to be executed from the wrong thread.
      RefBase subclasses can now decide how they want to be destroyed.
      Fix a race in SurfaceFlinger that could cause layers to be leaked forever.
      Fix a race-condtion in SurfaceFlinger that could lead to a crash.
    
    initial cherry-pick:
    resolved conflicts for merge of b9783b49 to honeycomb-plus-aosp
    
    Change-Id: I2a335e03fff219e35c18a7b0089b3a11d636576f
    Fix a race that could cause GL commands to be executed from the wrong thread.
    
    Bug: 4483050
    Change-Id: I37f0f3156059c208c6168ee6131d0e267d823188
    Fix a race in SurfaceFlinger that could cause layers to be leaked forever.
    
    The transaction flags were atomically read-and-cleared to determine if
    a transaction was needed, in the later case, mStateLock was taken to
    keep the current state still during the transaction. This left a small
    window open, where a layer could be removed after the transaction flags
    were checked but before the transaction was started holding the lock.
    In that situation eTraversalNeeded would be set but only seen during the
    next transaction cycle; however, because we're handling this transaction
    (because of another flag) it will be commited, "loosing" the information
    about the layer being removed -- so when the next transaction cycle due
    to eTraversalNeeded starts, it won't notice that layers have been removed
    and won't populated the ditchedLayers array.
    
    Bug: 4483049
    
    Change-Id: Ibb5989312f871339928ee1aa3f9567770d72969b
    Fix a race-condtion in SurfaceFlinger that could lead to a crash.
    
    Client::mLayers could be accessed from different threads.
    On one side from Client::attachLayer() which is currently
    called from a binder thread; on the other side from
    Client::detachLayer() which is always called from the main
    thread.
    
    This could lead to a corruption of Client::mLayers.
    
    We fix this issue by adding an internal lock to Client.
    
    Bug: 4483046
    
    Change-Id: I5262bf1124d9a65ec6f8ffd8e367356fc33a7536
    Fix a race that could cause GL commands to be executed from the wrong thread.
    
    Change-Id: Ia3d407f7bf2f5553f46cfdade70b7b0badb35beb
    Fix a race in SurfaceFlinger that could cause layers to be leaked forever.
    
    The transaction flags were atomically read-and-cleared to determine if
    a transaction was needed, in the later case, mStateLock was taken to
    keep the current state still during the transaction. This left a small
    window open, where a layer could be removed after the transaction flags
    were checked but before the transaction was started holding the lock.
    In that situation eTraversalNeeded would be set but only seen during the
    next transaction cycle; however, because we're handling this transaction
    (because of another flag) it will be commited, "loosing" the information
    about the layer being removed -- so when the next transaction cycle due
    to eTraversalNeeded starts, it won't notice that layers have been removed
    and won't populated the ditchedLayers array.
    
    Change-Id: Iedea9e25fee8dd98a0c5bd5ad41a20fcadf75b47
    Fix a race-condtion in SurfaceFlinger that could lead to a crash.
    
    Client::mLayers could be accessed from different threads.
    On one side from Client::attachLayer() which is currently
    called from a binder thread; on the other side from
    Client::detachLayer() which is always called from the main
    thread.
    
    This could lead to a corruption of Client::mLayers.
    
    We fix this issue by adding an internal lock to Client.
    
    Change-Id: Ib1317d7750ed5030e6f577efe34b69fc10198bd3
    Get rid of the "pid" parameter from createSurface
    
    Change-Id: I28635e3f803e6abe965d79998e305f54a202465d
    Fix a GraphicBuffer leak in SurfaceTexture
    
    This leak was intentional, it was there to deal with the fact that
    some gralloc implementations don't track buffer handles with
    file-descriptors so buffers needed to stay alive until there were
    registered, which is not guaranteed by binder transactions.
    
    In this new implementation, we use a small BBinder holding a
    reference to the buffer, which with tuck into the parcel. This forces
    the reference to stay alive until the parcel is destroyed, which
    is guaranteed (by construction) to happen after the buffer is
    registered.
    
    this allows the public facing API to not expose the previous hack.
    
    Change-Id: I1dd6cd83679a2b7457ad628169e2851acc027143
    Fix some const-ness and comments
    
    mDrawingState doesn't need to be accessed by the
    mStateLock, because by definition it's only accessed
    from the main thread.
    
    Similarily, the list of layers in the drawing state
    cannot change (ie: is const).
    
    Change-Id: I2e5da7f4d8caee7af7802b432cd45cc81c7c08b0
    revert the surface purgatory list and dependent changes.
    
    6d0f6cb Revert "Fix [3513017] in lockscreen but showing empty launcher (live wallpaper) only"
    6154412 Revert "partially fix [3306150] HTML5 video with H/W acceleration blackout (DO NOT MERGE)"
    37c2a37 fix [3408713] Dialog window invisible sometimes
    
    It looks like there is a surface leak, it's unclear where it is.
    Without those reverts, this would cause a leak of the associated buffers
    which is far more problematic. this change might hide the surface leak.
    
    Bug: 4078032
    Change-Id: Iedcda3ffcdd2f69d41047b5c3134c1e867ff90d7
    ANativeWindow: add queues-to-window-composer check.
    
    This change adds a new 'method' to the ANativeWindow interface to check
    whether buffers queued to the window will be sent directly to the system
    window compositor.
    
    Change-Id: I4d4b199e328c110b68b250029aea650f03c8724d
    Bug: 3495535
    fix [3361121] hang in glClear() - device unresponsive, OTA fails (DO NOT MERGE)
    
    Generally we never want to lock a buffer for write access if it is at
    the "head" on the surfaceflinger side. The only exception (1) is when
    the buffer is not currently in use AND there is at least one queued
    buffer -- in which case, SurfaceFlinger will never use said buffer
    anymore, because on the next composition around, it will be able to
    retire the first queued buffer.
    
    The logic above relies on SurfaceFlinger always retiring
    and locking a buffer before composition -- unfortunately this
    didn't happen during a screenshot.
    
    This could leave us in a situation where a buffer is locked by the
    application for write, and used by SurfaceFlinger for texturing,
    causing a hang.
    
    Here, we fix this issue by never assuming the exception (1), it was
    intended as an optimization allowing ANativeWindow::lockBuffer() to
    return sooner and was justified when most of SF composition was
    done in software. The actual buffer locking is now ensured by
    gralloc. We could have handled screenshots in a similar way to
    a regular composition, but it could have caused glitches on screen,
    essentially, taking a screenshot could cause to skip a frame.
    
    now that we removed the notion of a "inUse" buffer in surfaceflinger
    a lot of code can be simplified / removed.
    
    noteworthy, the whole concept of "unlockClient" wrt. "compositionComplete"
    is also gone.
    partially fix [3306150] HTML5 video with H/W acceleration blackout (DO NOT MERGE)
    
    We used to guarantee that a layer in SurfaceFlinger would never be
    destroyed before all references (to its ISurface) on the client
    side would be released. At some point, this guarantee got
    relaxed to allow to free gralloc resources sooner. This last
    change was incorrect, because:
    - in implementations with reference-counting the gralloc resources
    wouldn't be released anyways, until all the mapping were gone
    - in implementations without ref counting, the client side
    would most likely crash or do something bad
    - it also caused the SharedBufferStack slot to be reallocated
    to another surface, which could be problematic if the client
    continued to use the surface after the window manager destroyed it.
    
    So, we essentially reinstate the guarantee that layers won't be
    destroyed until after all references to their ISurface are
    released.
    
    NOTE: This doesn't entirely fix 3306150 because there is another
    problem there where the Browser continues to use a surface after it
    has been destroyed.
    
    also improve SurfaceFlinger 'dumpsys' log
    
    list the purgatory, which shows windows that have been closed,
    but for which the client still has references.
    clean-up unneeded code
    
    now that we removed the notion of a "inUse" buffer in surfaceflinger
    a lot of code can be simplified / removed.
    
    noteworthy, the whole concept of "unlockClient" wrt. "compositionComplete"
    is also gone.
    
    Change-Id: I210413d4c8c0998dae05c8620ebfc895d3e6233d
    partially fix [3306150] HTML5 video with H/W acceleration blackout
    
    We used to guarantee that a layer in SurfaceFlinger would never be
    destroyed before all references (to its ISurface) on the client
    side would be released. At some point, this guarantee got
    relaxed to allow to free gralloc resources sooner. This last
    change was incorrect, because:
    - in implementations with reference-counting the gralloc resources
    wouldn't be released anyways, until all the mapping were gone
    - in implementations without ref counting, the client side
    would most likely crash or do something bad
    - it also caused the SharedBufferStack slot to be reallocated
    to another surface, which could be problematic if the client
    continued to use the surface after the window manager destroyed it.
    
    So, we essentially reinstate the guarantee that layers won't be
    destroyed until after all references to their ISurface are
    released.
    
    NOTE: This doesn't entirely fix 3306150 because there is another
    problem there where the Browser continues to use a surface after it
    has been destroyed.
    
    Change-Id: I305c830dd722b30a6d53cbf3a9c714fd3cf7eb06
    fix [3312683] Camera mirroring problem after switching from back to front camera
    
    the crop as well as buffer orientation can change at every frame, when that happens
    we need to reset the hwc HAL (ie: set the GEOMETRY_CHANGED flag).
    currently we achieve this by taking the same code path than an actual geometry change
    which is a bit more heavy than necessary.
    
    Change-Id: I751f9ed1eeec0c27db7df2e77d5d17c6bcc17a24
    Fix remote GraphicBuffer allocation in SurfaceFlinger.
    
    This change fixes a horrible hack that I did to allow application
    processes to create GraphicBuffer objects by making a binder call to
    SurfaceFlinger.  This change introduces a new binder interface
    specifically for doing this, and does it in such a way that
    SurfaceFlinger will maintain a reference to the buffers until the app is
    done with them.
    
    Change-Id: Icb240397c6c206d7f69124c1497a829f051cb49b
    Add the ISurfaceComposer::createGraphicBuffer IPC.
    
    This change adds a new binder method to the ISurfaceComposer interface.
    This IPC is intended to allow SurfaceFlinger clients to allocate gralloc
    buffers using SurfaceFlinger as a proxy to gralloc.
    
    Change-Id: Ide9fc283aec5da6268ba62cfed0c3319a50b640d
    [3258939] Need snapshot to limit which layers are included
    
    Change-Id: Id7351a0e3f53dde99b291cffba553d89fd4d7ca9
    More clean-up. Get rid off the "blur" effect in SurfaceFlinger
    
    For multiple reason, this effect is not maintainable and was never
    used due to its abysmal performance. it'll be resurected when it can be
    implemented efficiently.
    
    Change-Id: Id4222c9b86c629275cdec18873ef07be8723b6d2
    remove support for PUSH_BUFFER surfaces and overlays
    
    the same functionality is now supported through
    the h/w composer HAL, and YUV support in the GPU.
    
    Change-Id: I8146605449954b8e8fd7f78810b7d873c2d8f5bf
    [3171580] SurfaceFlinger Bypass mode. (DO NOT MERGE)
    
    This is a poor's man precursor to the h/w composer HAL.
    Basically we detect when a window is full screen and in
    that case we bypass surfaceflinger's composition step, which
    yields to much improved performance.
    
    Change-Id: Ie03796ae81a1c951949b771c9323044b980cb347
    addresses parts of 3096779 and 3097475
    
    3097475: Animation setting should control the screen on animation
    3096779: CRT power-on animation can briefly show the top app instead of lockscreen
    
    There is now a parameter that controls wether the ON and/or OFF animation are
    performed. we also always clear the screen to black on power off, to make
    sure it won't briefly appear on power on.
    HOWEVER, 3096779 is not 100% fixed in the case where we're doing the animation
    because there is a race, where SF doesn't wait (b/c it doesn't know) for the
    framework to have redrawn the lockscreen.
    
    Change-Id: Ie0f02c9225fcdf24b1e8907e268eb7da2c5b0a03
    implement part of [3094280] New animation for screen on and screen off
    add support for screen on animation
    
    Change-Id: If50cf52ae04b95b42da7d74cf7fa96d5cb54d238
    turn off the electron beam
    
    Change-Id: I335fb6719f1d5a3f1c6f37a046fd1c2c4ed2bbc6
    refactored screenshot code
    
    the core screenshot function now can capture the screen at any lower resolution
    performing bilinear filtering.
    
    we also now have some client code to interface with the screenshot service.
    
    it's now possible to request a screenshot at a lower resolution.
    
    Change-Id: I33689bba98507ab928d0898b21596d0d2fe4b953
    refactored screenshot code
    
    the core screenshot function now can capture the screen at any lower resolution
    performing bilinear filtering.
    
    we also now have some client code to interface with the screenshot service.
    
    it's now possible to request a screenshot at a lower resolution.
    
    Change-Id: I5a3b0e431421800e3aad601d9af8f94adffbc71f
    add support for [1974164] Be able to take a screen shot on the device
    
    screenshots are taken using ISurfaceComposer::captureScreen() which returns
    the size of the screenshot and an IMemoryHeap containing the data.
    screenshots have limitations:
    - they will always fail if a secure window is up on screen
    - require GL_OES_framebuffer_object extension
    - in some situation, video planes won't been captured
    
    Change-Id: I741c68a2d2984fb139039301c3349e6780e2cd58
    add a way to toggle the h/w composer at runtime
    
    to DISABLE the h/w composer:
      adb shell service call SurfaceFlinger 1008 i32 1
    
    to ENABLE the h/w composer:
      adb shell service call SurfaceFlinger 1008 i32 0
    
    the state is dumped in "dumpsys SurfaceFlinger"
    
    Change-Id: I23e2242d42c6e3fd5261a83332dd900b189e38ce
    revert hwcomposer HAL changes. DO NOT MERGE.
    
    This reverts commit:
    94364b91a2894bf037b8beb027132fbb812e1434
    f8e705dea48f77f1c2532fdbadd4997dd1851af0
    b59beb5ca68d0228f60dda60d85e2d0226b33215
    e0d5f5bcf5a8b26f4ad75f549cbf380b2c9faf20
    call into hwcomposer HAL when present
    
    Change-Id: I70f31c69a9436a43860e78977442863ecba6d27b
    get rid of our LayerVector implementation
    
    we now use SortedVector<> with a special compare implementation.
    
    Change-Id: I910459cf3b3c8993b55ad0786a8c348369262de5
    keep a list of visible sorted surfaces
    
    Change-Id: Ib815eeff894f8a3b1e79fbbf8186d5d91bb60285
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    split surface management from surface's buffers management
    
    Change-Id: If3c5655d1231f8f0c49ba68f972b1b20c93b3f87
    clean-up client management.
    
    simplified things a lot, the biggest change is that the concept
    of "ClientID" is now gone, instead we simply use references.
    
    Change-Id: Icbc57f80865884aa5f35ad0d0a0db26f19f9f7ce
    more clean-up in preparation of bigger changes
    
    the most important change here is the renaming of
    ISurfaceFlingerClient to ISurfaceComposerClient
    
    Change-Id: I94e18b0417f50e06f21377446639c61f65f959b3
    fix the threading issue for setBuffercount()
    
    this change introduces R/W locks in the right places.
    on the server-side, it guarantees that setBufferCount()
    is synchronized with "retire" and "resize".
    on the client-side, it guarantees that setBufferCount()
    is synchronized with "dequeue", "lockbuffer" and "queue"
    more surfaceflinger cleanups
    
    get rid of the "fake rtti" code, and use polymorphism instead.
    also simplify how we log SF's state (using polymorphism)
    
    Change-Id: I2bae7c98de4dd207a3e2b00083fa3fde7c467922
    Added a name to Surface created by SurfaceFlinger
    
    Updated the window manager to use this new facility.
    Surfaces name are now printed by "dumpsys".
    split libsurfaceflinger_client and libcamera_client out of libui
    Add support for physically rotated displays
    
    This feature is currently controled by a system property.
    "ro.sf.hwrotation" can be set to either 90 or 270. It'll cause
    SF to rotate the screen by 90 and 270 degres respectively.
    
    That is, if the driver reports 800x480 for instance, and
    ro.sf.hwrotation is set to 90, applications will "see" a
    480x800 display and will run in portrait.
    
    This is implemented by introducing an extra "display"
    transformation in the GraphicPlane.
    android-2.1_r1 snapshot
    fix [2297155] SurfaceFlinger's freeze-timeout doesn't work
    
    There was bug in the logic that calculated the relative timeout, the start time was
    reset each time an event was received, which caused the timeout to never occur if
    an application was constantly redrawing.
    
    Now we always check for a timeout when we come back from the waitEvent() and
    process the "anti-freeze" if needed, regardless of whether an event was received.
    eclair snapshot
    DO NOT MERGE: Another gcc 4.0.3 workaround.
    
    Temporarily make a function public that doesn't need to be.  When
    host gcc-4.0.3 is gone from the build servers we can undo this.
    
    (Cherry-picked from eclair-mr2.)
    Another gcc 4.0.3 workaround.
    
    Temporarily make a function public that doesn't need to be.  When
    host gcc-4.0.3 is gone from the build servers we can undo this.
    fix [2167050] glTexImage2D code path buggy in SurfaceFlinger
    
    When EGLImage extension is not available, SurfaceFlinger will fallback to using
    glTexImage2D and glTexSubImage2D instead, which requires 50% more memory and an
    extra copy. However this code path has never been exercised and had some bugs
    which this patch fix.
    
    Mainly the scale factor wasn't computed right when falling back on glDrawElements.
    We also fallback to this mode of operation if a buffer doesn't have the adequate
    usage bits for EGLImage usage.
    
    This changes only code that is currently not executed. Some refactoring was needed to
    keep the change clean. This doesn't change anything functionaly.
    fix [2133214] STOPSHIP: revert I4a06bb4f: workaround for [2113743] Sholes: frozen then runtime restart going to list view
    
    Revert "workaround for [2113743] Sholes: frozen then runtime restart going to list view"
    
    This reverts commit 4a06bb4f3355b0ef2b76aa883704da9d154c44ae.
    Work around gcc 4.0.3 bug.
    
    This appears to fix the sim-eng build on the gDapper build machines.
    
    Basic problem is that LayerBuffer::OverlaySource has a constructor that
    calls SurfaceFlinger.signalEvent().  SurfaceFlinger lists LayerBuffer
    as a friend, but that's not enough to convince gcc that the embedded
    OverlaySource class is also a friend.  I don't see a way to make them
    friendly, so I marked signalEvent() as public.
    workaround for [2113743] Sholes: frozen then runtime restart going to list view
    fix [2068105] implement queueBuffer/lockBuffer/dequeueBuffer properly
    
    Rewrote SurfaceFlinger's buffer management from the ground-up.
    The design now support an arbitrary number of buffers per surface, however the current implementation is limited to four. Currently only 2 buffers are used in practice.
    
    The main new feature is to be able to dequeue all buffers at once (very important when there are only two).
    
    A client can dequeue all buffers until there are none available, it can lock all buffers except the last one that is used for composition. The client will block then, until a new buffer is enqueued.
    
    The current implementation requires that buffers are locked in the same order they are dequeued and enqueued in the same order they are locked. Only one buffer can be locked at a time.
    
    eg. Allowed sequence:   DQ, DQ, LOCK, Q, LOCK, Q
    eg. Forbidden sequence: DQ, DQ, LOCK, LOCK, Q, Q
    dumpsys SurfaceFlinger will now always dump SF's state, even if SF is deadlocked
    (in this case the state is dumped without the proper locks held which could result to a crash)
    
    in addition, the last transaction and swap times are printed to the dump as well as the time spent
    *currently* in these function. For instance, if SF is unresponsive because eglSwapBuffers() is stuck,
    this will show up here.
    fix a bug that caused the PixelFormat viewed by Surface to be wrong.
    
    what happened is that the efective pixel format is calculated by SF but Surface nevew had access to it directly.
    in particular this caused query(FORMAT) to return the requested format instead of the effective format.
    donut snapshot
    fix [2017532] Partial Update leaves residual image.
    donut snapshot
    trying to fix the sim, I'm not even sure this syntaxe is valid, but my compilo doesn't complain
    get rid of references to MemoryDealer in SurfaceFlinger
    free gralloc buffers as soon as possible (when a surface is not visible any longer), client who have the buffers still mapped won't crash, btu may see garbage data
    fix a memory corruption where a SF Client could be used after it's been destroyed
    implement dimming with a texture on msm7k so it uses copybit
    new Permission class used to improve permission checks speed (by caching results)
    fix a bunch of problems with destroying surfaces.
    
    now, all destruction path, go through the purgatory which is emptied when ~ISurface is called, but we also make sure to remove the surface from the current list from there (in case a client forgot to request the destruction explicitely).
    split boot animation out of SurfaceFlinger
    
    Conflicts:
    
            data/etc/platform.xml
    move libbinder's header files under includes/binder
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    get rid of the "show fps" debug option
    a brand new MessageQueue for SurfaceFlinger.
    more Surface lifetime management
    
    Surfaces are now destroyed once all references from the clients are gone, but they go through a partial destruction as soon as the window manager requests it.
    This last part is still buggy. see comments in SurfaceFlinger::destroySurface()
    more splitting of Surface/SurfaceControl. Surface.java is now implemented in terms of Surface and SurfaceControl.
    
    The WindowManager side of Surface.java holds a SurfaceControl, while the client-side holds a Surface. When the client is in the system process, Surface.java holds both (which is a problem we'll try to fix later).
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    AI 143320: am: CL 143171 am: CL 142873 fix [1732012] Only show screen rotation animation when triggered by sensor
      Original author: mathias
      Merged from: //branches/cupcake/...
      Original author: android-build
      Merged from: //branches/donutburger/...
    
    Automated import of CL 143320
    AI 143309: am: CL 143160 am: CL 142856 new-new-new-new rotation animation. it may still change one more time.
      Original author: mathias
      Merged from: //branches/cupcake/...
      Original author: android-build
      Merged from: //branches/donutburger/...
    
    Automated import of CL 143309
    AI 143171: am: CL 142873 fix [1732012] Only show screen rotation animation when triggered by sensor
      Original author: mathias
      Merged from: //branches/cupcake/...
    
    Automated import of CL 143171
    AI 143160: am: CL 142856 new-new-new-new rotation animation. it may still change one more time.
      Original author: mathias
      Merged from: //branches/cupcake/...
    
    Automated import of CL 143160
    Automated import from //branches/cupcake/...@142873,142873
    Automated import from //branches/cupcake/...@142856,142856
    Automated import from //branches/master/...@142447,142447
    Automated import from //branches/donutburger/...@142446,142446
    Automated import from //branches/master/...@141504,141504
    Automated import from //branches/donutburger/...@141502,141502
    Automated import from //branches/cupcake/...@142445,142445
    auto import from //branches/cupcake_rel/...@141571
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@131421
    auto import from //branches/cupcake/...@130745
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    add libsurfaceflinger_ddmconnection for PDK build
    
    - the library is dlopened from libsurfaceflinger
    - the library built only when libnativehelper exists
    
    Bug: 7089510
    Change-Id: Ib3ea1029d7e8f6e055f4b759d0bf68f5123fa8a1
    as a debug option SrufaceFlinger can now connect to DDMS
    
    this is disabled by default. To enable:
      setprop debug.sf.ddms 1
    
    this debug option requires to restart SurfaceFlinger
    
    Change-Id: Ic2f8050b29911b55bcd21721648b6978700c277d
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    Remove frameworks/base/im since these stuff are only used by IM app
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    Track Looper decoupling from ALooper
    
    Change-Id: I612f0de7002e24948a4cbbea7b416b4fbb3929aa
    fix another bug where screenshots could end-up all black
    
    SF transactions were always handled on VSYNC which allowed
    the screenshot to sneak-in between closing the transaction
    and vsync (before it's latched), resulting in a screenshot
    with the previous state.
    
    we now always force transactions to happen immediately
    before screenhots.
    
    Bug: 7552304
    Change-Id: I0afc86b7e8366173daff5b9988bbb4d2a0f43860
    one more step towards multiple display support
    
    - remove dependency on cached state in validateVisibility
    - get rid of mVertices and mTransformedBounds
    - get rid of validateVisibility
    - get rid of unlockPageFlip
    - handleTransaction now returns a dirty region
    - computevisibileregion now uses window-manager space
    Revert "handle surfaces posts independently from composition"
    
    This reverts commit 562f4b2c1e555b853997113bb54b21303d642bc6.
    
    Change-Id: I96efe11c2f0494ed2d57fc580e49c598d913830e
    handle surfaces posts independently from composition
    
    surfaceflinger will now handle each surface post
    as soon as possible and handle the composition
    itself at VSYNC time as usual.
    
    Change-Id: I6b1ae33fd56062d86e5419ebab8def0ca5803fbf
    ui freeze workaround: reenable triple buffering mode
    
    we're seeing UI freezes when window updates and
    composition are separated. for now we workaround this
    by always doing a composition after window updates on
    vsync. triple buffering is reenabled for performance.
    
    Change-Id: I693d705000b7452489bb0b4918fbeadb9879315c
    separate transactions from updates
    
    with this changes, SF transactions are handled as soon as possible
    but do not trigger updates. the update is delayed until the next
    vsync.
    
    this allows us to work much better without requiring triple-buffering.
    
    Change-Id: I1fa10794d0cf742129f0877698b7b1e1f2ec7401
    SF now synchronizes to VSYNC
    
    Change-Id: Ic5e4f2ea9927ce133eef9499c03161325e9d02c5
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    fix an issue where invalidate/transactions could be missed
    
    Change-Id: I84a1fcba1317b2631f5441de7b7ecd12af5ad022
    fix an issue where updates could starve transactions
    
    Bug: 5700586
    Change-Id: Iaa4adc1a6aea1db6e2943efe4caca1f6cbebfa72
    rewrite SF's message loop on top of Looper
    
    Change-Id: Ib56139f87a5c0b124e34da5c8151207219b2577b
    deliver invalidate messages AFTER other messages
    
    because invalidate messages were always handled first, they
    could prevent other messages to get through entirely.
    there is no real reason to handle invalidate messages first because
    the other messages are very uncommon and won't interfer with
    updates.
    
    Change-Id: Ib95cdf35a91407bd2f4d69dd082c5f546e1e0071
    fix a bug where timeouts would only be handled when a message was delivered
    
    Change-Id: I98c69b129e75e065e61f47e54f0f855d9401b0dc
    fix a bug where timeouts would only be handled when a message was delivered
    
    Change-Id: Id3127b21c1a1a1afab32911a8edbb202360d7c9b
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    fix the threading issue for setBuffercount()
    
    this change introduces R/W locks in the right places.
    on the server-side, it guarantees that setBufferCount()
    is synchronized with "retire" and "resize".
    on the client-side, it guarantees that setBufferCount()
    is synchronized with "dequeue", "lockbuffer" and "queue"
    eclair snapshot
    implement Mutex and Condition with pthread instead of calling futex directly.
    
    internally pthread uses futex. the implementation consists of simple inlines
    there are no implementation files anymore.
    fix for [1969185] valgrind errors in new gl stuff
    make use of the perfectly fine List.h instead of our own reimplementation of a linked list.
    a brand new MessageQueue for SurfaceFlinger.
    DO NOT MERGE Add "dumpsys SurfaceFlinger --dispsync"
    
    Dumps the current DispSync state.
    
    Bug 14651879
    
    (this is a near-cherrypick of Ide4e6dbd58b117bc1a6b97b57d10cd92ec86dc84)
    
    Change-Id: I6e6c8452ede5c2d5098db1b884d28226e77d9a03
    Add "dumpsys SurfaceFlinger --dispsync"
    
    Dumps the current DispSync state.
    
    Bug 14651879
    
    Change-Id: Ide4e6dbd58b117bc1a6b97b57d10cd92ec86dc84
    make sure SF initialization is ran at target priority and correct thread group
    
    SF can spawn threads (indirectly) during initialization
    and we want those to be spawned at URGENT_DISPLAY_PRIORITY
    (in theory they should set their own, but some code lives
    in vendor libraries and doesn't).
    
    Bug: 10430209
    Change-Id: I5b3a8f979297de287614c8eafd8267bef1176e4b
    SurfaceFlinger now runs in the process's main thread
    
    it used to spawn its own thread and return the main thread
    to the binder thread pool -- this was confusing the naming
    of things in the kernel.
    
    Bug: 10331839
    
    Change-Id: I2d13a6d73409a38109300fcbe6a04b4c41cb5d00
    move services executables sources in their respective src folder
    
    Change-Id: Ic65434a26c7fed1699abf0851fec6faa40e09c0c
    limit number of extra binder threads in SF to 4
    
    it should be enough and it makes debugging easier.
    
    Bug: 6609290
    Change-Id: I2341e20cfcfde184fe1ed9b925215f8fa3481ced
    SF doesn't need more than a few binder threads
    
    Change-Id: Ic4659fb81f9990cc7caf84a496a8ae659a1d16a9
    Some hardening of isolated processes by restricting access to services.
    
    Services now must explicitly opt in to being accessed by isolated
    processes.  Currently only the activity manager and surface flinger
    allow this.  Activity manager is needed so that we can actually
    bring up the process; SurfaceFlinger is needed to be able to get the
    display information for creating the Configuration.  The SurfaceFlinger
    should be safe because the app doesn't have access to the window
    manager so can't actually get a surface to do anything with.
    
    The activity manager now protects most of its entry points against
    isolated processes.
    
    Change-Id: I0dad8cb2c873575c4c7659c3c2a7eda8e98f46b0
    added BinderService<> template to help creating native binder services
    
    Change-Id: Id980899d2647b56479f8a27c89eaa949f9209dfe
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    surfaceflinger: add getDisplayStats() method
    
    This is used by media service to schedule video frames at the
    proper time, based on precise vsync timings.
    
    Bug: 14659809
    Change-Id: I1a90603f3dc09dca9aa4f90a3aa845fab56e0a5e
    Replace "lower power mode" experiment
    
    This replaces the previous low-power mode experiment, which
    discarded refresh events, with a new experiment that alters
    the refresh period.
    
    (see also I2849e5ea335c0d2509fea1c315392bce7f20451d )
    
    The feature is enabled by specifying a nonzero value for the
    "refresh skip count", which indicates the number of periods
    to skip.  For example, the command:
    
      adb shell service call SurfaceFlinger 1016 i32 1
    
    sets a skip count of '1', yielding a 30Hz refresh rate on a device
    with a 60Hz display.  Changing the last value to '2' would set the
    refresh to 20Hz.  '0' returns to the default behavior.
    
    Bug 15523257
    
    Change-Id: I00039c22a55750e74035644c63800e4bee1c774a
    DO NOT MERGE - Replace "lower power mode" experiment
    
    This replaces the previous low-power mode experiment, which
    discarded refresh events, with a new experiment that alters
    the refresh period.
    
    (see also I2849e5ea335c0d2509fea1c315392bce7f20451d )
    
    The feature is enabled by specifying a nonzero value for the
    "refresh skip count", which indicates the number of periods
    to skip.  For example, the command:
    
      adb shell service call SurfaceFlinger 1016 i32 1
    
    sets a skip count of '1', yielding a 30Hz refresh rate on a device
    with a 60Hz display.  Changing the last value to '2' would set the
    refresh to 20Hz.  '0' returns to the default behavior.
    
    Bug 15523257
    
    (cherry-pick from master I00039c22a55750e74035644c63800e4bee1c774a)
    
    Change-Id: I9ef5539fa7da953dd97f88e7fa39be0dc20b6889
    DO NOT MERGE - Disable DispSync resync when not needed
    
    If app and SF events aren't using phase offsets, we don't need
    to maintain the DispSync model.  We just turn hardware VSYNC on
    whenever something wants to draw.  This avoids some edge cases
    where we were doing too much resync work.
    
    Also, updated the systrace output.  The "VsyncOn" line was a
    combination of SF and app event threads, and would occasionally
    be very weird.  Removed VsyncOn, renamed VSYNC to VSYNC-app,
    and added VSYNC-sf.
    
    Also, added more details to the --dispsync dumpsys output.
    
    Also, renamed global constants to not look like local variables.
    
    Bug 15516453
    
    (cherry-pick from master I0da10b72f0d9a7b7eb5202d87cc18967f698adbd)
    
    Change-Id: I7d6fa96f1df48f0b3abcc4b39c5dcfee88199eb6
    Disable DispSync resync when not needed
    
    If app and SF events aren't using phase offsets, we don't need
    to maintain the DispSync model.  We just turn hardware VSYNC on
    whenever something wants to draw.  This avoids some edge cases
    where we were doing too much resync work.
    
    Also, updated the systrace output.  The "VsyncOn" line was a
    combination of SF and app event threads, and would occasionally
    be very weird.  Removed VsyncOn, renamed VSYNC to VSYNC-app,
    and added VSYNC-sf.
    
    Also, added more details to the --dispsync dumpsys output.
    
    Also, renamed global constants to not look like local variables.
    
    Bug 15516453
    
    Change-Id: I0da10b72f0d9a7b7eb5202d87cc18967f698adbd
    DO NOT MERGE Add "dumpsys SurfaceFlinger --dispsync"
    
    Dumps the current DispSync state.
    
    Bug 14651879
    
    (this is a near-cherrypick of Ide4e6dbd58b117bc1a6b97b57d10cd92ec86dc84)
    
    Change-Id: I6e6c8452ede5c2d5098db1b884d28226e77d9a03
    Add "dumpsys SurfaceFlinger --dispsync"
    
    Dumps the current DispSync state.
    
    Bug 14651879
    
    Change-Id: Ide4e6dbd58b117bc1a6b97b57d10cd92ec86dc84
    Add mutex
    
    Change-Id: I81072031e74a5cca8384e4e8bce4babf2187d8bb
    Improve SurfaceFlinger PTS estimation
    
    Get the next refresh time from DispSync instead of guessing based
    on the current time.
    
    Change-Id: I8dc72a3217bfd4e9b4c905034194d1a298cad69a
    SurfaceFlinger: Adds the functionality to reduce refresh rate to half of
    the default.
    
    Feature added for the low power mode.
    
    Change-Id: I2849e5ea335c0d2509fea1c315392bce7f20451d
    Signed-off-by: Ruchi Kandoi <kandoiruchi@google.com>
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    DispSync: remove delay when enabling vsync events
    
    This change fixes a bug that caused an extra frame of latency when enabling
    vsync event callbacks in DispSync.  The bug was related to the logic that
    prevents the two events from firing with very little time between them due to
    updates to the vsync model.
    
    Bug: 11479720
    Change-Id: Ie7eaff9e92ffb7b7b6cb4d3d4402c96cbd29af7e
    DispSync: remove delay when enabling vsync events
    
    This change fixes a bug that caused an extra frame of latency when enabling
    vsync event callbacks in DispSync.  The bug was related to the logic that
    prevents the two events from firing with very little time between them due to
    updates to the vsync model.
    
    Bug: 11479720
    Change-Id: Ie7eaff9e92ffb7b7b6cb4d3d4402c96cbd29af7e
    Wake up disp sync thread when setting display period
    
    Bug: 10624956
    Change-Id: I272c15f319521bfbd1bb70451366c7dd84d60bf9
    DispSync: don't compensate for wakeup latency
    
    This change removes the wakeup latency compensation from the software-generated
    vsync events.  Choreographer can't handle timestamps in the future, so don't
    aim for early wake-ups with the expectation that the actual wake-up will be
    late.
    
    Bug: 11153576
    SurfaceFlinger: SW-based vsync events
    
    This change adds the DispSync class, which models the hardware vsync event
    times to allow vsync event callbacks to be done at an arbitrary phase offset
    from the hardware vsync.  This can be used to reduce the minimum latency from
    Choreographer wake-up to on-screen image presentation.
    
    Bug: 10624956
    Change-Id: I8c7a54ceacaa4d709726ed97b0dcae4093a7bdcf
    color blindness enhancement
    
    This is an attempt at improving the experience of
    users with color vision impairement.
    
    At this time this feature can only be enabled for
    debugging:
    
      adb shell service call SurfaceFlinger 1014 i32 PARAM
    
      with PARAM:
       0 : disabled
       1 : protanomaly/protanopia simulation
       2 : deuteranomaly/deuteranopia simulation
       3 : tritanopia/tritanomaly simulation
      11, 12, 13: same as above w/ attempted correction/enhancement
    
    The enhancement algorithm tries to spread the "error"
    such that tones that would otherwise appear similar can be
    distinguished.
    
    Bug: 9465644
    
    Change-Id: I860f7eed0cb81f54ef9cf24ad78155b6395ade48
    implement display projection clipping in h/w composer
    
    - cropping to the projection's "viewport" is "simply"
      accomplished by intersecting it with the window crop
      expressed in layerstack space.
    
    Bug: 7149437
    Change-Id: I0e90b3f37945292314b5d78a8f134935967e8053
    SurfaceFlinger: SCALING_MODE_FREEZE cropping support
    
    This change adss support for applying a buffer crop to layers with the
    SCALING_MODE_FREEZE scaling mode.  These layers do not scale the image, but
    rather treat all pixels outside the crop rectangle as fully transparent.
    
    Change-Id: I762518e56a37aef7747f9b581df2f2589b232c49
    Bug: 6299171
    fix Surface positions are not floats
    
    Added Surface.setPosition(float, float) which allows to set a surface's
    position in float.
    
    Bug: 5239859
    Change-Id: I903aef4ad5b5999142202fb8ea30fe216d805711
    fix [3118445] Transform * Transform does not work as expected
    
    The problem wasn't in the multiply operator, but rather in the code
    that built the transform from the HAL bitmask.
    
    We now use the multiply operator to build the Transform from the bitmask,
    which guarantees, it'll always be correct.
    
    Also added a simple test for Transform.
    
    Change-Id: I09bf3b0e51d92f59d83ea91c4cc94fc2aa0bf227
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    clean-up surfaceflinger a bit
    
    get rid of the glDrawTexi path and use floating points instead of fixed point maths
    
    Change-Id: I3aa9ce2dc082f702160e605a16ba5fe987cdf087
    fix [2483456] Video orientation is wrong on Droid for some videos
    
    Change-Id: I450191f1335f57bffc51aff3e27295395847dbc0
    remove a dependency of surfaceflinger on libskia
    
    libskia was only used for a small part of SkTransform. We now implement
    Transform is surfaceflinger directly.
    Add an orientation parameter for overlay, so we can do camera preview in portrait mode.
    eclair snapshot
    fix [2142193] disable GL_LINEAR when not needed
    AI 143309: am: CL 143160 am: CL 142856 new-new-new-new rotation animation. it may still change one more time.
      Original author: mathias
      Merged from: //branches/cupcake/...
      Original author: android-build
      Merged from: //branches/donutburger/...
    
    Automated import of CL 143309
    AI 143160: am: CL 142856 new-new-new-new rotation animation. it may still change one more time.
      Original author: mathias
      Merged from: //branches/cupcake/...
    
    Automated import of CL 143160
    Automated import from //branches/cupcake/...@142856,142856
    Automated import from //branches/master/...@142447,142447
    Automated import from //branches/donutburger/...@142446,142446
    Automated import from //branches/master/...@141504,141504
    Automated import from //branches/donutburger/...@141502,141502
    Automated import from //branches/cupcake/...@142445,142445
    auto import from //branches/cupcake_rel/...@141571
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    surfaceflinger: recompute visibility after sideband stream change
    
    We normally recompute layer visibility when a layer gets its first
    buffer; before then it's treated as invisible. Sideband layers never
    get a buffer (as far as SurfaceFlinger knows), so never became
    visible. Now we also recompute visibility when a layer gets a new
    sideband stream.
    
    Bug: 17752511
    Change-Id: I84e150f196eb2eb7bcd2616248e5e3fa73624809
    Fix inverse orientation when original is not applied first.
    
    Change-Id: I6f1a11950c77c99800acbf08a672bc1b2310b0b5
    Fix camera orientation by swapping horizontal and vertical flips when needed.
    
    Bug: 16637957
    
    Change-Id: I66de597546fdc19e0af9e6150ca20460ab36bf8b
    Incorporate TransformToDisplayInverse into the crop calculation.
    
    Change-Id: Ia9757b3a43d3b8f99df9fef2ed4d11c43b5abdd2
    Fix HWComposer Surface Crop when surface is rotated
    
    Bug: 15091149
    
    Change-Id: I97ecd8af9636da9403fafdb3f9b846f95053ebb7
    Turn on support for async cursor update in surfaceflinger.
    
    If available, surfaceflinger will use the hwc setCursorPositionAsync()
    api to change the position of supported cursor layers outside of
    the usual prepare/set loop.
    
    Change-Id: Ib3fc5c0c390b3489ddbba202379840a1d2748917
    Add sticky transform to surfaceflinger.
    
    Bug: 15116722
    
    - Adds a sticky transform field that can be set from a
      SurfaceFlinger client Surface.  This transform is
      added to any transform applied to the Surface.
    
    Change-Id: Idaa4311dfd027b2d2b8ea5e2c6cba2da5779d753
    Improve SurfaceFlinger PTS estimation
    
    Get the next refresh time from DispSync instead of guessing based
    on the current time.
    
    Change-Id: I8dc72a3217bfd4e9b4c905034194d1a298cad69a
    Adding render stats APIs to UiAutomation (framework native).
    
    bug:12927198
    
    Change-Id: Ibb1c07f7d89e11281e5c1f27f412a29ac6f9c4ab
    BufferQueue: Remove Bn version of create*
    
    It turns out that there's no reason to have both I* and Bn* versions
    of the createBufferQueue method, so I removed the Bn* version.
    
    Change-Id: I66aeb09e10458ae540ddf1f38d2d0154ea8f315b
    Fix sideband stream issues
    
    - Notify a listener when sideband stream is set
    - Mark a layer as visible when sideband stream is set, even though
    no buffer is queued.
    
    Change-Id: I9652bf530f2b5ce331533ec1bb3b10a815ca191c
    Remove deprecated BufferQueue constructor
    
    Bug: 13415624
    Change-Id: I9fe15e45daa7351f1db34ee75bfee6f19cb347d3
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    Allow "opaque" flag to be updated. DO NOT MERGE
    
    Moves the "opaque layer" from Layer to Layer::State.  This allows
    it to be updated as part of a transaction.
    
    Bug 12387406
    
    Change-Id: I0a114ce6adf77cd12fb08f96e0691b76c475768d
    Allow disabling layer rotation during screenshots
    
    Add the ability to ignore layers' transformation matrices during
    screenshot capture, which will allow the window manager to capture
    unrotated images for recents during the device rotation animation.
    
    Bug: 11805195
    Change-Id: I854d87bc84ca06ef9a054a454af1c080ee66fbb8
    Allow "opaque" flag to be updated
    
    Moves the "opaque layer" from Layer to Layer::State.  This allows
    it to be updated as part of a transaction.
    
    Bug 12387406
    
    Change-Id: I0a114ce6adf77cd12fb08f96e0691b76c475768d
    fix camera API 2.0 orientation
    
    we add a flag to ANativeWindow::setBufferTransform that means
    "apply the inverse rotation of the display this buffer is displayed
    onto to".
    
    Bug: 10804238
    Change-Id: Id2447676271950463e8dbcef1b95935c5c3f32b2
    color blindness enhancement
    
    This is an attempt at improving the experience of
    users with color vision impairement.
    
    At this time this feature can only be enabled for
    debugging:
    
      adb shell service call SurfaceFlinger 1014 i32 PARAM
    
      with PARAM:
       0 : disabled
       1 : protanomaly/protanopia simulation
       2 : deuteranomaly/deuteranopia simulation
       3 : tritanopia/tritanomaly simulation
      11, 12, 13: same as above w/ attempted correction/enhancement
    
    The enhancement algorithm tries to spread the "error"
    such that tones that would otherwise appear similar can be
    distinguished.
    
    Bug: 9465644
    
    Change-Id: I860f7eed0cb81f54ef9cf24ad78155b6395ade48
    minor clean-up of the GLESRenderer
    
    Change-Id: I978dea25b7687fbbbb283f09c24e115d9bad49a2
    screenshot layers wouldn't work in some cases
    
    specifically when the display size and the screenshot window
    size didn't match, the buffer would be rejected.
    We simply fix this by setting the scalling mode to
    "SCALE_TO_WINDOW".
    
    Bug: 9992306
    Change-Id: Ib821767899af330bb70d3cbbfa7d41b02794a075
    Fix a bug where non-cropped layer could be scaled incorrectly
    
    If a layer is not cropped but its bounds are outside of the
    viewport (i.e.: clipped), the crop rectangle passed to
    hw composer would be invalid because it started invalid
    in the first place (to indicate "no crop").
    
    Bug: 10410944
    Change-Id: I4ae4d49a1adef0be7fa4304ecf84b1a5b7d03fe0
    Encapsulate textures into their own Texture class
    
    the main reason for doing this is so that we can have
    access to informations about a texture (like its dimension)
    close to where we generate and use shaders in ES 2.0.
    Previously, there wasn't any way to get to a texture's size
    from a RenderEngine implementation.
    
    Bug: 8679321
    
    Change-Id: I388b338a70d07e3e8177dde248710ea1e4c82dff
    don't reallocate the mesh each time we use it
    
    the Mesh object can be part of each Layer (at least currently).
    also reworked the Mesh code a bit to make it easier to access
    the vertex data.
    
    Change-Id: I0490851ba898f0aa2e55b62958dcd8bdb535e98b
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    Add support for EGL_KHR_gl_colorspace
    
    Change-Id: I684d0b8556cd6c84ee4b4d67e1bb95c3b96fccfb
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    get rid of HAL pixelformats 5551 and 4444
    
    Change-Id: I39409103144c1ba09078c4ddc323a58987fb09ea
    make transparent pixels transparents again
    
    apparently boolean logic in hard...
    
    Change-Id: Ie70401fe12e0fa00b0b8c7cc475c1438cdbbf531
    get rid of PixelFormatInfo and simplify things
    
    Change-Id: I025a362cc12d5b9b794fac14be500e25aab65396
    surfaceflinger: add frame duration logging
    
    Change-Id: Ib414a45e7e191f23a2726cbbbeb606e9ce68a3b5
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    always pass the BufferQueue explicitely to consumers
    
    Change-Id: I883b0a7b19d8e722f9ab714ba6f49e658b02ca86
    Pay attention to buffer timestamps
    
    When acquiring a buffer, SurfaceFlinger now computes the expected
    presentation time and passes it to the BufferQueue acquireBuffer()
    method.  If it's not yet time to display the buffer, acquireBuffer()
    returns PRESENT_LATER instead of a buffer.
    
    The current implementation of the expected-present-time computation
    uses approximations and guesswork.
    
    Bug 7900302
    
    Change-Id: If9345611c5983a11a811935aaf27d6388a5036f1
    fix SF buffer cropping
    
    When a buffer had a crop (meaning its content is scaled to the window size)
    and a window crop was defined, the resulting crop couldn't be expressed
    properly because h/w composer's API was limited to integers, since
    this is fixed in h/w composer 1.3, we take adventage of this to
    make sure we get the correct crop.
    
    this bug could result in the buffer being scaled by an incorrect ratio and
    be slightly offset; moreover, it would produce different results from the
    GL code path, which is always correct.
    
    Change-Id: I8e20e00b6e26177d14f4ab4d2cd581e26c818892
    Refactor SF. Move all GL operations in their own class.
    
    this is the first step to add support for GLES 2.x, this
    change breaks the dependency of SF on GLES 1.x by moving
    all operation into their own class.
    
    Bug: 8679321
    
    Change-Id: I0d2741eca2cefe67dfd9cf837cac10c4d126928b
    clean-up SurfaceFlinger a bit
    
    - most methods on Layer didn't need to be virtual
    - more consistency in naming drawing/current state
    
    Change-Id: Ieb7b4951b40fc673b807994ed21ae4aea7281068
    Prevent opaque windows from making framebuffer translucent
    
    To keep the code readable now that we have four different texenv
    configurations, this change separates the decisions about what
    configuration to use from the GL calls to set up the configuration.
    
    Bug: 8963244
    Change-Id: Ia07a306a7809ba8f93493d0160ccbd509e948581
    take the "transparent region" into account for blending
    
    until now it was only used to discard a layer entirely.
    we're now reducing the size of the layer if it is still
    visible, if possible.
    
    this works for instance when a surfaceView is used and
    only the menu bar is displayed over it.
    
    Change-Id: I3f5527c5cd1e69ecc968272c8948f1513ada8c55
    reformat Rect.{cpp|h}
    
    Change-Id: I45b1f6646541a1abacce1e70df00a770e47b820e
    Add a --color option to dumpsys SurfaceFlinger
    
    colorize a bit the output of dumpsys SurfaceFlinger to
    make it easier to read. Right now it will bold the
    title of each section and use green for the name of
    each layer.
    
    Change-Id: I0d9f18d115401cb45109d244ef3a278481f68cc6
    clean-up/simplify all dump() APIs
    
    remove the scratch buffer parameter and use
    String8::appendFormat() instead.
    
    Change-Id: Ib96c91617c8e7292de87433d15cf6232b7d591b0
    make sure to update the "current state" when we "fake" the transaction
    
    this mimics the code we used for the size. basically we need to
    also update the "current state" because it gets copied to the
    "drawing state" when a transaction occurs, and it would
    "undo" our change.
    
    Bug: 8511430
    Bug: 8581533
    Change-Id: I08c02abbf21b7f168f7124cd14ee717d7d3d502c
    latch transparent region hint only when we get a new frame
    
    since the transparent region hint really depends on the
    content of the window containing the SurfaceView
    (it's calculated by the view hierarchy based on
    overlapping views), it makes sense to latch it only when
    the content of the window (the app) changes.
    
    This should help fixing drawing artifacts when changing the
    layout of a window containing a SurfaceView.
    
    Bug: 8511430
    Change-Id: Ic3aa668495293cb4d82a2cd7dcf3b6a337287678
    Pass sp<Fence>s around instead of file descriptors
    
    Change-Id: Iac70584a2207940730e8f803a543e4e9a4000c47
    get rid of purgatory and fix QueuesToWindowComposer query
    
    the purgatory list wasn't needed anymore; in fact it had no effect as
    buffer life-time management is now handled by the BufferQueue.
    
    For QueuesToWindowComposer we keep a list of wp<> on the IBinder
    for IGraphicBufferProducers we hand over to clients so we can
    easily check if an IGraphicBufferProducer is ours. We clean-up the
    list when our IGraphicBufferProducer are destroyed.
    
    Bug: 8349142
    Change-Id: I1aa06652ade8c72d0004a3f5e6c3d6e8a82fc2ae
    get rid of ISurface
    
    ISurface was only used to get the IGraphicBufferProducer from
    a Layer. It's now replaced by a BBinder subclass / IBinder and
    is only used as a handle to the surface, to both refer to it
    and manage its life-time.
    
    Also cleaned-up a bit the ISurfaceComposer interface and
    "create layer" code path.
    
    Change-Id: I68d0e02d57b862cffb31d5168c3bc10cea0906eb
    Get rid of LayerBase.
    
    The functionality of LayerBase and Layer is folded
    into Layer. There wasn't a need for this abstraction
    anymore.
    
    Change-Id: I66511c08cc3d89009ba4deabf47e26cd4cfeaefb
    fold LayerBaseClient into LayerBase
    
    Change-Id: Ic745136522df59c42f0885fd969e75ea55d09f01
    refactor the crop region for hwc is calculated/set
    
    - the crop region is now always calculated and set
      in LayerBase::setGeometry which uses new virtuals to
      access the "content" crop and transform (which are
      provided by the Layer subclass)
    
    Change-Id: Ib7769bdec0917dd248f926600c14ddf9ea84897a
    SurfaceFlinger: fix a couple NULL fence checks
    
    This change replaces checks for a NULL fence pointer with calls to
    Fence::isValid.  There should no longer be NULL fences.
    
    Change-Id: If17c9c132fcb1801531bf7588f8ba53476c57dad
    SurfaceFlinger: fix a couple NULL fence checks
    
    This change replaces checks for a NULL fence pointer with calls to
    Fence::isValid.  There should no longer be NULL fences.
    
    Change-Id: If17c9c132fcb1801531bf7588f8ba53476c57dad
    libgui: disallow NULL Fence pointers
    
    This change eliminates the uses of a NULL sp<Fence> indicating that no waiting
    is required.  Instead we use a non-NULL but invalid Fence object for which the
    wait methods will return immediately.
    
    Bug: 7892871
    Change-Id: I5360aebe3090422ef6920d56c99fc4eedc642e48
    SurfaceFlinger: add win anim frame time tracking
    
    This change makes the 'dumpsys SurfaceFlinger --latency' command with no extra
    args dump the frame timestamp data for the most recent frames that
    SurfaceFlinger generated that included window animation transaction changes.
    
    Change-Id: I8bded1ea08a4cddefef0aa955401052bb9107c90
    Add support for plane-alpha in HWC
    
    Change-Id: I218e7dd5f23de535aabce61e993002ab6cb46cdd
    SurfaceFlinger: remove a driver bug workaround
    
    Change-Id: I7478293e87899d6e467db8c2f9e295935c8b1d4e
    Add some comments.
    
    Also, minor tweak to SurfaceTextureLayer.
    
    Change-Id: If616d5ee4e8226dd0e16c5dbb0e0f80db553110e
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    Avoid unnecessary texture bind
    
    In SurfaceFlingerConsumer, check to see if native fence sync is
    enabled.  If so, defer the texture binding step to Layer::onDraw.
    
    Change-Id: I7d4034a31c0143207eea2509dfa13ef3820f9b8c
    Refactor SurfaceTexture a bit.
    
    Rearranges updateTexImage() so that the SurfaceFlinger-specific
    behavior is in a new SurfaceFlingerConsumer subclass.
    
    SurfaceTexture behavior should not be altered.  Instead of
    acquire-bind-release we now do acquire-release-bind, but since
    it's all done with the lock held there shouldn't be any
    externally-visible change.
    
    Change-Id: Ia566e4727945e2cfb9359fc6d2a8f8af64d7b7b7
    SurfaceFlinger: work around a driver bug
    
    Change-Id: I4490f308b12e9b6fda2ea7255eb19d867d6d008c
    make transform hint multi-display aware
    
    if a layer is not mirrored, we now use its display
    as the source for the transfrom hint calculation
    instead of always using the default (main) display.
    
    this change does two thing:
    1) we make updateTransformHint take a DisplayDevice
       as a parameter instead of hard-coding the
       main display.
    
    2) each time we do a transaction that could change
       the hint, we go through all layers and
       figure out which display should be used for their
       transform hint.
    
    Bug: 7599344
    Change-Id: I9b04a95e6c372dd770bacf81d8ef6f8e31b87b83
    SurfaceFlinger: refactor frame time tracking
    
    This change moves the frame time history tracking code out of Layer and into a
    new class called FrameTracker.  It also changes the tracking to use signal
    timestamps from fences when available for more accurate results.
    
    Change-Id: I323c5f075c58bf86ce363b52af885ad0f6365f2b
    Change ConsumerBase's FrameAvailableListener to be a weak pointer
    
    This prevents strong reference cycles when the listener implementation also
    holds a strong pointer to the ConsumerBase
    
    Bug: 7425644
    Change-Id: I1514b13a32b18d421c902dddebec0765a989c55c
    SurfaceFlinger: add support for secure displays
    
    This change adds support for displays that are not allowed to display surfaces
    with the eSecure flag set.  All non-virtual displays are considered secure,
    while virtual displays have their secure-ness specified at creation time.
    
    Bug: 7368436
    Change-Id: I81ad535d2d1e5a7ff78269017e85b111f0098500
    Recompute visible regions more vigorously
    
    Some of the code in latchBuffer was calling invalidateHwcGeometry,
    but that didn't cause the SurfaceFlinger visible region code to
    re-evaluate the layer's visibility.  Set the recomputeVisibleRegions
    "out" parameter instead.
    
    Bug 7235797
    
    Change-Id: If6ba33fbd1a594cd64cc5253aebf752d6ceda1c9
    calculate wether we filter on a per-display basis
    
    Change-Id: I79d80b432b20b3d02428da19add464ac1e2b9378
    SurfaceTexture: default to doing GL sync
    
    This change makes updateTexImage default to performing the necessary
    synchronization and adds an argument for SurfaceFlinger to disable that
    synchronization so that it can be performed lazily.
    
    Change-Id: I7c20923cc786634126fbf7021c9d2541aa77be5d
    Bug: 6991805
    add support hwc 1.1
    
    Bug: 7124069
    
    Change-Id: I53d705105c4ad8954d3f50ee4f4c8b7ec936b871
    Fix transform hints
    
    The hints were being set a little too late, so the pre-rotation stuff
    wasn't quite working.
    
    Bug 7054997
    
    Change-Id: Id8d5c626db7a76f768ba762a145b315878ee08e6
    Reshuffle FramebufferSurface
    
    FramebufferSurface no longer speaks directly to the FB HAL.  Now
    everything goes through HWComposer (which may or may not be
    connected to a hardware composer).
    
    Added display index arg to some query methods.
    
    Change-Id: Id3e157d2d4e3555d33afbb703e518b6e92e2d6d5
    SurfaceTexture: use eglWaitSync
    
    This change adds a compile-option to use eglWaitSyncANDROID to ensure that
    texturing operations that access the current buffer of a SurfaceTexture do not
    occur until the buffer is completely written.  It also moves this
    synchronization into a new SurfaceTexture method called doGLFenceWait and
    changes SurfaceFlinger's Layer class to use that method rather than performing
    its own wait on the fence.
    
    Change-Id: I70afa88086ca7ff49a80e3cd03d423767db7cb88
    the visibleRegion was never set in hwcomposer
    
    Bug: 7089478
    Change-Id: I13b031b23ce908d33f431a04e1cf87831b551260
    the visible region sent to HWC was garbage
    
    we used to have a visibleRegion object per layer, but now
    it's per screen; so at somepoint the code got changed to
    calculate the per-screen visible region on the stack and that's
    what got passed to HWC.
    
    we're now setting the visibleRegionScreen at each frame and
    freeing at after the HWC set() call. We use the underlaying
    SharedBuffer so that in most cases we don't have to allocate,
    free or copy memory around.
    
    Bug: 7089478
    Change-Id: I24fa556c76613a225d9fe7a6c6b727bb476144d8
    BufferQueue: clean up buffer counting
    
    This change is a clean up of some of the handling of the maximum number of
    buffers that are allowed at once.  It mostly renames a few member variables and
    methods, but it includes a couple small refactorings.
    
    Change-Id: I9959310f563d09583548d4291e1050a7bbc7d87d
    Eradicate DisplayID.
    
    DisplayDevices are now keyed of the wp<IBinder> the client uses.
    DisplayID has now become DisplayType which is just used to identify
    physical displays (as opposed to virtual displays such as wifi displays).
    
    Change-Id: I0c5968f2c902dcd699a7e0afacf833ff070c12ea
    libgui includes refactoring
    
    Change-Id: I1d24ec17f5003ec2abab5f7472daaff4cc4cc2d3
    turn DisplayDevice into a reference-counted object
    
    it's safer this way because this object owns an
    EGLSurface which cannot be easily reference-counted.
    
    it also gives us the ability to sub-class it, which
    we might want to do soon.
    
    Change-Id: I07358bb052dc5a13b4f2196b2c2b6e6e94c4bb4f
    remove a dependency of DisplayDevice on the refresh rate
    
    this remove a dependency (not all) on FramebufferSurface
    
    Change-Id: Ie07ce70760cdcedfb41b5b41bea8da45637bf474
    cleanups in preparation of bigger changes
    
    - fix typo drawForSreenshot misspelled
    - get rid of DisplayDeviceBase
    - removed unused or unneeded code
    - always pass a DisplayDevice to Layer methods that are called
      on a per-display basis (to make it clear that this could be
      called more than once per composition).
    
    Change-Id: Id948b7e09fe5c06db0e42d40d6ed75dd095c7f44
    rename DisplayHardware to DisplayDevice
    
    Change-Id: I3f7250cd914e0da4f9ec2c9403587bbe12f3cc62
    getting closer to final main composition loop
    
    Change-Id: Icd63782366ffd11d9ea00c925ae5783ed7440cdb
    SurfaceFlinger cleanup
    
    mostly refactored SurfaceFlinger.h, but also removed dead code.
    cleaned-up a few includes as well.
    
    Change-Id: Ib15f4ffe567912b61ee98aa076c6a283b72811b5
    factor EGL/GL and surface creation out of DisplayHardware
    
    Change-Id: Icd85a6a4caad06f056578008af3e21666fa8b1f4
    one more step towards multiple display support
    
    - remove dependency on cached state in validateVisibility
    - get rid of mVertices and mTransformedBounds
    - get rid of validateVisibility
    - get rid of unlockPageFlip
    - handleTransaction now returns a dirty region
    - computevisibileregion now uses window-manager space
    Only set acquire fences on overlay layers
    
    Change-Id: I08e8173f83580de5a4e43a0ba5ea03e5ec6e8782
    Pass fence to HWC on first use of buffer
    
    Also do a CPU-wait on the fence before using it for GL composition.
    
    Change-Id: I0f645a42a44803276cae11b904e5a26d65871562
    get rid of GraphicPlane
    
    its functionality is now folded into DisplayHardware
    there will be more changes in that area.
    Transfer HWC release fences to BufferQueue
    
    After a HWC set, each SurfaceFlinger Layer retrieves the release fence
    HWC returned and gives it to the layer's SurfaceTexture. The
    SurfaceTexture accumulates the fences into a merged fence until the
    next updateTexImage, then passes the merged fence to the BufferQueue
    in releaseBuffer.
    
    In a follow-on change, BufferQueue will return the fence along with
    the buffer slot in dequeueBuffer. For now, dequeueBuffer waits for the
    fence to signal before returning.
    
    The releaseFence default value for BufferQueue::releaseBuffer() is
    temporary to avoid transient build breaks with a multi-project
    checkin. It'll disappear in the next change.
    
    Change-Id: Iaa9a0d5775235585d9cbf453d3a64623d08013d9
    refactor HWComposer to break dependency with the HAL headers
    
    HWComposer must abstract the HWC HAL entirely, so that the
    HAL can continue to evolve (and break binary compatibility)
    without breaking SurfaceFlinger. The HWC data structure had
    leaked outside of HWComposer, this is now fixed.
    
    We now have an abstract interface that provide all the
    needed functionality, HWCompose provides concrete
    implementations of it based on the the HWC version.
    
    Change-Id: I40c4676dc986b682ede5520a1c60efe64037b0bb
    sometimes we would incorrectly scale the content of a surface
    
    this would happen when a resize was pending (ie: we have received
    and processed a resize transaction but have not received a buffer
    with the right size) and a new transaction came in that didn't
    involve a resize, for instance a translate-only transaction.
    
    in this case, we would incorrectly update the drawing state
    with the pending size, eventhough we still don't have a buffer
    for it.
    
    the solution is quite simple, we never allow the size to propagate
    from current to drawing state during the regular transaction processing
    (unless we are in fixed-size mode -- meaning we don't need to have
    a matching size buffer), this propagation happens later once we
    receive the buffer.
    
    Bug: 6624163
    Change-Id: I11a97e4b88a7f3a0571ddcfe99c86cb04ce01a4d
    sometimes SF would not process a surface resize
    
    this would happen when a window started with size A, was
    resized to B and immediately resized to A. In this situation
    the erquested and active size would be the same, and SF
    would think a transaction wasn't needed.
    
    we fix this by always comparing the requested sizes.
    
    Also, make sure to set mRefreshPending once we're sure
    we have succesfully called updateTexImage().
    
    Bug: 6580962
    Change-Id: I2c48b4df7f05fd35c9e1d2dd82095b0f3d5a0b6a
    Fix a crasher is surfaceflinger.
    
    this bug introduced recently would happen when the very first
    buffer of a surface was rejected for not having the right size
    
    Bug: 6577035
    Change-Id: I9fabf20006019f2a6c308be7c7f5c05bdcfd5014
    add the ability to reject buffers in SurfaceTexture::updateTexImage
    
    SurfaceFlinger is using this new feature to reject buffers that
    don't have the right size.
    
    Bug: 6498869
    Change-Id: I8a7250a47db6c082a357b703feb3b9d0fc8d3443
    refactoring in preparation for bug:6498869 fix
    
    here we just shuffle a bit the code inside lockPageFlip(),
    we move the code that handles the buffer size closer to the call
    to updateTexImage(). no functionality change.
    
    Change-Id: Ie3193cd86cd32cf3c89532449fd747d145ca0ab6
    improve resize transactions
    
    use a flag instead of pre-committing the "requested" state
    to prevent propagation or "requested" to "active", which makes
    things a lot clearer when reading the code.
    
    also avoid going through the "resized" code-path when requested
    size is equal to "active" size.
    
    Bug: 6498869
    Change-Id: I24f893ba0ec5ca06aac5b8da9818989ae7ce4005
    Improve debug logs and minor clean-up
    
    Bug: 6498869
    Change-Id: I14d1b4d6960b87b5a7c4d7e20b92538edd9331ff
    Fix "Battery/Status/Clock status bar area flickers when dragging down"
    
    The crop is now handled like a resize, it's latched only when we
    receive a new buffer in the case we have a resize in the same
    transaction.
    
    Bug: 6498869
    Change-Id: I9f3cbbe08fb19443899461ec441c714748a4fd1a
    minor refactoring in praparation of crop fix
    
    Bug: 6498869
    Change-Id: I12a6f9a9fdfd2ea1db3fbe5fc8cb443aeaedb328
    SurfaceFlinger: recompute visible regions less
    
    This change removes some visible region recomputation that was needed to handle
    the SCALING_MODE_FREEZE cropping.  We've changed things to use a window crop
    from the WindowManager instead, so this is no longer needed.
    
    Bug: 6299171
    Change-Id: I32fbc2b689c985837126d8ba3d9a91e79613ffbf
    SurfaceFlinger: add a crop to the layer state
    
    This change adds a crop rectangle specified in window coordinates to the layer
    state.  The all window pixels outside this crop rectangle are treated as though
    they were fully transparent.  This change also adds the plumbing necessary for
    WindowManager to set that crop.
    
    Change-Id: I582bc445dc8c97d4c943d4db8d582a6ef5a66081
    SurfaceFlinger: recompute visible regions more
    
    This change makes a change in the crop, scaling mode, transform, or buffer
    dimensions trigger a recomputation of the visible regions of a window.  With
    the new cropping behavior for SCALING_MODE_FREEZE all of these can now affect
    the visible region.
    
    Bug: 6470541
    Change-Id: I1904e47efbd708e28bf189f637d24dbef65cd41e
    SurfaceFlinger: SCALING_MODE_FREEZE cropping support
    
    This change adss support for applying a buffer crop to layers with the
    SCALING_MODE_FREEZE scaling mode.  These layers do not scale the image, but
    rather treat all pixels outside the crop rectangle as fully transparent.
    
    Change-Id: I762518e56a37aef7747f9b581df2f2589b232c49
    Bug: 6299171
    SurfaceFlinger: tell SurfaceTex about filtering
    
    This change makes SurfaceFlinger set the filtering-enable on each layer's
    SurfaceTexture before querying the texture matrix to use for GLES composition.
    
    Change-Id: I40c3defd73ebf96e3cabb3bfdb1fc97f2036753a
    remove SurfaceTexture::connect()
    
    use BufferQueue::connect() instead
    
    Change-Id: I04aab7cf11304bf962cde38470747f3b19ddba42
    triple buffering is now controled by BoardConfig and enabled by default
    
    use TARGET_DISABLE_TRIPLE_BUFFERING := true to disable
    triple buffering.
    
    Change-Id: I9875d6ddefd23c1af9e51e7ee7dec1bacd1e6799
    SurfaceTexture: Fully refactored from BufferQueue
    
    SurfaceTexture and BufferQueue are separate objects.
    
    Change-Id: I230bc0ae6f78d0f9b2b5df902f40ab443ed5a055
    Add tracing to various graphics components.
    
    This change adds ATRACE call tracing to BufferQueue,
    SurfaceTextureClient, SurfaceTexture, SurfaceFlinger, Layer, and EGL.
    
    Change-Id: I9d75ed26f5a3f0d1af635da38289520134cfbbb7
    a window could get stuck to gpu composition
    
    this could happen after an orientation change. basically
    we need to triger a geometry-changed when the very first buffer
    is received
    
    Change-Id: I097e411fd6612c18725737cffccdbf6b2af3511c
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    deprecate L_8, LA_88 and RGB_332 in sdk
    
    re-add support for pixelformats L_8, LA_88 and RGB_332 in libui
    for backward compatibility.
    
    This may or may not fix 6058926
    
    Bug: 6049685
    Change-Id: Ic1b8b4cc994522f7fe664da64c0ef76b98bc6d53
    fix an issue in SF where we could miss some updates
    
    Change-Id: I7d350bc05d1596655baddff3deaebaba58c9bcc0
    ui freeze workaround: reenable triple buffering mode
    
    we're seeing UI freezes when window updates and
    composition are separated. for now we workaround this
    by always doing a composition after window updates on
    vsync. triple buffering is reenabled for performance.
    
    Change-Id: I693d705000b7452489bb0b4918fbeadb9879315c
    separate transactions from updates
    
    with this changes, SF transactions are handled as soon as possible
    but do not trigger updates. the update is delayed until the next
    vsync.
    
    this allows us to work much better without requiring triple-buffering.
    
    Change-Id: I1fa10794d0cf742129f0877698b7b1e1f2ec7401
    SF now synchronizes to VSYNC
    
    Change-Id: Ic5e4f2ea9927ce133eef9499c03161325e9d02c5
    added a few more commands to SF's dumpsys
    
    --latency-clear [name]
    clears the latency data for the specified layer or for
    all layers if none is specified
    
    --list
    prints the list of all layers regardless of their visibility
    
    Change-Id: I7c07ae020f838c173b98ee50f3fb3e93da78acbb
    improve SurfaceFlinger dumpsys
    
    It is now possible to say:
    
    dumpsys SurfaceFlinger --latency
    
    to print latency information about all windows
    
    dumpsys SurfaceFlinger --latency window-name
    
    to print the latency stats of the specified window
    
    for instance: dumpsys SurfaceFlinger --latency SurfaceView
    
    The data consists of one line containing global stats, followed by
    128 lines of tab separated timestamps in nanosecond.
    
    The first line currently contains the refresh period in nanosecond.
    Each 128 following line contains 3 timestamps, of respectively
    the app draw time, the vsync timestamp just prior the call to set and
    the timestamp of the call to set.
    
    Change-Id: Ib6b6da1d7e2e6ba49c282bdbc0b56a7dc203343a
    hack up frame latency measurement
    
    Change-Id: I6d9a466a23285304f0e229a5649815636ab5d6af
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    CherryPick f9e455 from master to mr0. do not merge.
    
    Fix software GL renderer.
    
    Change-Id: I7273a8e65c23a0032d155ea6572de2923791e411
    Fix software GL renderer.
    
    Change-Id: I07ab2709fa694e41aa3fcc5b9dfc809f55853ab4
    Add a LayerScreenshot
    
    A LayerScreenshot is a special type of layer that contains a screenshot of
    the screen acquired when its created. It works just like LayerDim.
    
    Make sure to call compositionComplete() after rendering into a FBO.
    
    Bug: 5446982, 5467587, 5466259
    Change-Id: I5d8a1b4c327f9973d950cd4f4c0bca7f62825cd4
    Make sure set GL state properly
    
    when taking a screenshot, in particular, we could end up
    with stale GL state when drawing LayerDim which resulted
    in incortect rendering.
    
    Bug: 5467587
    Change-Id: Id9fbed2843481d31063620f3662b364c7e3ac781
    Revert "Add a LayerScreenshot"
    
    This reverts commit d6809f40cf61203573ec5dbc437f695cd132cc18.
    SurfaceFlinger: Remove display freezing code
    
    This change removes the dead code from SurfaceFlinger that resulted from
    disabling support for freezing the display.
    
    Change-Id: I4e5ff00c94b4c7a79af2f65c9850c135210068ed
    Add a LayerScreenshot
    
    A LayerScreenshot is a special type of layer that contains a screenshot of
    the screen acquired when its created. It works just like LayerDim.
    
    Bug: 5446982
    Change-Id: I7814aff2380e7e146937f2b641907be2a30c76cc
    SurfaceFlinger: screenshots w/ protected buffers
    
    This change modifies SurfaceFlinger's screenshot behavior when a layer
    with a protected buffer is visible.  The previous behavior was to simply
    fail the screenshot.  The new behavior is to render the screenshot using
    a placeholder texture where the protected buffer would have been.
    
    Change-Id: I5e50cb2f3b31b2ea81cfe291c9b4a42e9ee71874
    SurfaceFlinger: fix setting default buffer size
    
    This change makes SurfaceFlinger update a SurfaceTextureLayer's default
    buffer size in response to a window resize even if the Layer is in fixed
    size mode.
    
    Change-Id: I3871c8f19a045d03904d1284390cad7659be71ff
    Bug: 5366426
    SurfaceFlinger: fix the transform hint
    
    This change fixes the transform hint to use only the global display
    transform rather than incorporating the transient layer-specific
    transform used during animations.
    
    Bug: 5366891
    Change-Id: I5408dcd3f4771d010953e8a696a484c835bfe81e
    SurfaceFlinger: set layer names on SurfaceTextures
    
    This change sets the SurfaceTexture name string to match that of the
    layer to which it belongs.
    
    Change-Id: Ib302d79e916a36ab1e54cb9ff477c3b857bd957b
    (DO NOT MERGE) SurfaceFlinger: fix isOpaque check in lockPageFlip
    
    This change fixes an issue where Layer::isOpaque was being called in
    lockPageFlip to get the opaqueness for the new buffer before
    mActiveBuffer was updated.
    
    Bug: 5321313
    Change-Id: Ibb5d7d3f4e9a2b1448e117a484a0d9f9ca5fc9de
    SurfaceFlinger: fix isOpaque check in lockPageFlip
    
    This change fixes an issue where Layer::isOpaque was being called in
    lockPageFlip to get the opaqueness for the new buffer before
    mActiveBuffer was updated.
    
    Bug: 5321313
    Change-Id: Ibb5d7d3f4e9a2b1448e117a484a0d9f9ca5fc9de
    fix display artifacts in preview screen in timelapse video mode
    
    We were not updating the h/w composer state when the buffer size
    changed.
    
    We also didn't update the h/w composer state when the transformation
    matrix changed (which is related to the above issue, since it would
    probably change when the buffer size changes).
    
    Also moved updating the crop to setGeometry(), since we decided
    that the "crop" change requires the GEOMETRY_CHANGED flag (ie:
    not need to do this every frame)
    
    Bug: 5238473
    
    Change-Id: Ia7b47e145b48581b568d89d9aa2c14ff778be862
    Add a debug option to turn the "transformation hint" off
    
    transformation hint is disabled with:
    
       adb shell service call SurfaceFlinger 1009 i32 1
    
    Change-Id: I9aafe6f280f88ce41569ed69a06dc522b10e3a88
    Minor cleanup
    
    Change-Id: Ic042043c54631b5a5c74d20136addb2c08515ea9
    SurfaceFlinger: use the HWC gralloc usage bit
    
    This change makes SurfaceFlinger always use the
    GRALLOC_USAGE_HW_COMPOSER usage bit when allocating buffers that may be
    passed to the HWComposer.
    
    Change-Id: I70362a8ede2b359fb2046853f85149d597465817
    give the proper orientation to the h/w composer HAL
    
    we were using the "orientation" value instead of the
    real transform, which may contain arbitrary rotations for
    instance, and in some case ended up with a final "orientation"
    that looked valid, but wasn't.
    
    this fixes a problem on devices with a h/w composer hal where
    the rotation animation looked weird.
    
    Change-Id: I4be8a2a1bde49c33456fcf5c8d87ab515c216763
    SurfaceTexture: fix queues-to-composer
    
    This change fixes the NATIVE_WINDOW_QUEUES_TO_WINDOW_COMPOSER query of
    Surface and SurfaceTextureClient.  Surface now uses the inherited
    SurfaceTextureClient implementation of this query.  SurfaceTextureClient
    now queries SurfaceFlinger to determine whether buffers that are queued
    to its ISurfaceTexture will be sent to SurfaceFlinger (as opposed to
    some other process).
    
    Change-Id: Iff187e72f30d454229f07f896b438198978270a8
    SurfaceTexture: fix queues-to-composer
    
    This change fixes the NATIVE_WINDOW_QUEUES_TO_WINDOW_COMPOSER query of
    Surface and SurfaceTextureClient.  Surface now uses the inherited
    SurfaceTextureClient implementation of this query.  SurfaceTextureClient
    now queries SurfaceFlinger to determine whether buffers that are queued
    to its ISurfaceTexture will be sent to SurfaceFlinger (as opposed to
    some other process).
    
    Change-Id: Iff187e72f30d454229f07f896b438198978270a8
    fix an orientation change drawing artifact.
    
    a wrong orientation would be briefly shown when
    rotation the screen. this happened when the window manager
    set a custom transformation and the h/w composer was used.
    
    the custom transformation was applied twice in that case.
    
    Bug: 5037522
    Change-Id: Ic1f87b63cd843f4475e4265d1624463825d775c4
    SurfaceFlinger doesn't rely on having a custom RefBase destructor
    
    we just use a message to the main thread to
    destroy our GLES state.
    improve dumpsys SurfaceFlinger output
    
    we now output the handle and size of all buffers of each layer.
    
    Change-Id: I8d011ee4ae9199f4198bd07bed770ec3bcf02986
    fix a crasher in surfaceflinger
    
    this would happen if being told to draw before a buffer
    was available.
    
    Change-Id: I46d121c73e883078cdbf952063e38b0076f79038
    update HWC data structures even when a layer is marked for SKIP
    
    Change-Id: I16bcf44cd617814a14a795429bde2f39f411077d
    SurfaceFlinger: abandon Layer SurfaceTextures
    
    This change makes the Layer::onRemoved method call
    SurfaceTextures::abandon on the layer's SurfaceTexture.  This will cause
    all client-initiated operations on the SurfaceTexture to fail.  In
    particular, this will result in an error on the client side, rather than
    a deadlock when removing a layer that used a SurfaceTexture in
    synchronous mode.
    
    Change-Id: I14014d00369f29560a21b606831edee432bb8867
    Bug: 5020874
    SurfaceFlinger: fix a layer occlusion bug
    
    This change fixes a bug where the window visibility would be computed
    before any buffers were available, causing the window to be treated as
    non-opaque.  When the first buffer arrived, if both mCurrentOpacity and
    the opacity determined by the buffer's format were 'opaque', a
    recomputation of the opacity would not be done, and the window would
    continue to be treated as non-opaque.  SurfaceFlinger could then
    unnecessarily draw fully occluded layers.
    
    Change-Id: I2b95da2f4b50e68d50fc5afd8b772e26e62f58d6
    Bug: 5057122
    remove dead code and member variables.
    
    also fix some comments and improve debugging logs.
    
    Change-Id: I83e55309f306332b59e1ec46104c4a7fffbf3c97
    implement: "Add an ANativeWindow API for SurfaceFlinger to suggest an optimal buffer orientation"
    
    Bug: 4487161
    Change-Id: I883f34efe542c2a566d04966f873374f40c50092
    use SurfaceTexture new scaling mode in SF
    
    SF now obeys SurfaceTexture's scaling mode instead
    of inferring it from the buffer's size
    
    Change-Id: I4d50e9851abedd7e64bfcfc8af9eefb9fb668529
    take the state transform into account with h/w composer hal
    
    if the state transform didn't preserve rectangles, we
    would still try to use h/w composer hal using the bounds
    of the transformed rect, which isn't correct.
    
    now we correctly fall back to composition.
    
    Change-Id: Iff78f4339ece415d4987e95a5717b04934d370ab
    SurfaceTexture: change onFrameAvailable behavior
    
    This change alters the conditions under which the onFrameAvailable
    callback gets called by the C++ SurfaceTexture class.  The new behavior
    is to call the callback whenever a frame gets queued that will be
    visible to the buffer consumer.  This means that buffers queued in
    synchronous mode always trigger the callback, as those buffers will
    remain pending until they are consumed.  Buffers queued in asynchronous
    mode will only trigger the callback if there was not previously an
    unconsumed buffer pending.
    
    The new behavior means that a consumer should perform a draw operation
    exactly once for every onFrameAvailable call that it recieves.  This
    change also modifies SurfaceFlinger and the SurfaceTexture JNI to
    support of the new behavior.
    
    Change-Id: I8b2c6e00961d3d58b11c6af50b555b6e4c5f5b40
    Revert "merge various SF fixes from gingerbread to honeycomb-mr2" (DO NOT MERGE)
    
    Also revert all dependent changes:
    This reverts commit 8e18668d14adf601cbe5973030c310ec23d88461.
    This reverts commit 69b4587bfbb3e98f793959d9123340360fa233a2.
    This reverts commit a9c9a4baf24700e8817d47d8ea8da1742caea0b5.
    This reverts commit 2c0042b666a969091c931614f2fc0dce2f1cfac8.
    This reverts commit f6c8206735e7e078461e5f2aef6e1a1446fdd075.
    This reverts commit 24855c09173a6caaec7dcedd0c2d7ce15121d39b.
    
    Change-Id: I33e699640f3f59e42fa03c99a9a1b7af0d27d4d8
    revert surfaceflinger leak fix as it uncovered a crasher on xoom (DO NOT MERGE)
    
    This reverts commit 52a43990880b27808bcf562afcc4209d34728e6e.
    
    Change-Id: I1856a48f863b051395b8091ddfd1e01292fa1b1e
    Revert "revert surfaceflinger leak fix as it uncovered a crasher on xoom"
    
    This reverts commit af6edba59e250adbdfa5b3c3be134f70d8c38a16.
    
    Change-Id: I7793d3ca8a4d20a2b188364f47854328ab5f586d
    revert surfaceflinger leak fix as it uncovered a crasher on xoom
    
    Bug: 4600244
    Change-Id: Ia68ebf0f243a051ff6a21b3863e3e5d259bbf7ac
    fix RefBase so it retains binary-compatibility with gingerbread
    
    Bug: 4595257
    Change-Id: I0d5e10f497e3f39868bff58f6ded510c38b44b12
    unify SurfaceTexture and Surface
    
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    Add SurfaceTexture logging
    fix onFrameAvailable
    fix RefBase so it retains binary-compatibility with gingerbread (DO NOT MERGE)
    
    Bug: 4595257
    Change-Id: I4773cf4fe59b2509db0ed733739eb6961d473b25
    fix RefBase so it retains binary-compatibility with gingerbread (DO NOT MERGE)
    
    Bug: 4595257
    Change-Id: I1db83149107d7dab1f0b7e73c684e0ff82e17e62
    merge various SF fixes from gingerbread to honeycomb-mr2 (DO NOT MERGE)
    
      Fix a race that could cause GL commands to be executed from the wrong thread.
      RefBase subclasses can now decide how they want to be destroyed.
      Fix a race in SurfaceFlinger that could cause layers to be leaked forever.
      Fix a race-condtion in SurfaceFlinger that could lead to a crash.
    
    initial cherry-pick:
    resolved conflicts for merge of b9783b49 to honeycomb-plus-aosp
    
    Change-Id: I2a335e03fff219e35c18a7b0089b3a11d636576f
    Fix a race that could cause GL commands to be executed from the wrong thread.
    
    Bug: 4483050
    Change-Id: I37f0f3156059c208c6168ee6131d0e267d823188
    Fix a race that could cause GL commands to be executed from the wrong thread.
    
    Change-Id: Ia3d407f7bf2f5553f46cfdade70b7b0badb35beb
    SurfaceFlinger: unfreeze windows for fixed size buffers.
    
    This change makes SurfaceFlinger unfreeze a window if it ever gets a
    buffer that is fixed-size.  Normally the window would not be frozen if
    its in fixed-size mode, but if the window was frozen before entering
    fixed-size mode then it should be unfrozen.
    
    Change-Id: I6bc822d4b02ae51fa8914c1f60f5d24b2002b38d
    Add lock before calling initEglImage
    
    Without that lock, there is a chance of race condition
    where while composing a specific index, requestBuf with
    the same index can be executed and touch the
    same data that is being used in initEglImage.
    (e.g. dirty flag in texture)
    SurfaceFlinger: Fix a typo.
    
    This change makes Layer skip its cleanup of its old shared memory region
    when the UserClient object that owned the memory has been freed.
    
    Bug: 3429357
    Change-Id: I9e4d8eb190f6914dc043674b9bb8dd28e959901b
    fix [4093196] Device lock up - log spam with SharedBufferStack: waitForCondition(LockCondition) timed out
    
    a memory corruption happned when the buffer pool was resized
    (like when playing a video or using camera) and there was
    no current active buffer. In this case, the faulty code
    would index into an array at position -1 which corrupted
    24 bytes of data.
    
    also improved region validation code (ifdef'ed out by default)
    
    Bug: 4093196
    Change-Id: I915c581d131148959d720e00e3892e9186ab733d
    Fix initialization order warning.
    
    Change-Id: I794dfaaa3a2f2645a89abc6c45de5f76e485f7d0
    Default to NONE format in Layer
    
    mFormat is not initialized with any value in Layer constructor, causing
    a call to requestFormat() with no explicit format specified to fallback to
    some uninitialized value. Such invalid path actually detected by valgrind.
    
    Change-Id: Ib7faabcd61eaa26fb0ae7a9a486d9e258ba31b63
    SurfaceFlinger: Respect the PROTECTED gralloc bit.
    
    This change makes SurfaceFlinger treat layers for which the active
    buffer has the GRALLOC_USAGE_PROTECTED bit set as if they have the
    'secure' flag set.
    
    Change-Id: Ic60b6513a63e4bb92ec6ce9fd12fd39b4ba5f674
    Bug: 4081304
    revert the surface purgatory list and dependent changes.
    
    6d0f6cb Revert "Fix [3513017] in lockscreen but showing empty launcher (live wallpaper) only"
    6154412 Revert "partially fix [3306150] HTML5 video with H/W acceleration blackout (DO NOT MERGE)"
    37c2a37 fix [3408713] Dialog window invisible sometimes
    
    It looks like there is a surface leak, it's unclear where it is.
    Without those reverts, this would cause a leak of the associated buffers
    which is far more problematic. this change might hide the surface leak.
    
    Bug: 4078032
    Change-Id: Iedcda3ffcdd2f69d41047b5c3134c1e867ff90d7
    Fix [3513017] in lockscreen but showing empty launcher (live wallpaper) only
    
    37c2a37 fix [3408713] Dialog window invisible sometimes
    d35c666 fix [3385504] Surface flinger hang when adding dim surface
    1723b04 fix [3389263] OMX.Nvidia.h264.decode fails to shutdown
    1b0114f fix a surface leak in SurfaceFlinger
    
    Bug: 3513017
    
    Change-Id: Ia13ed8c9cdcb1f484e177cdcaff687e7c88a10c3
    fix a surface leak in SurfaceFlinger
    
    SF kept a strong reference to ISurface until the
    window manager removed the surface from the screen.
    This fell appart when running standalone tests, that is
    when the window manager wasn't involved.
    
    When the window manager is around, it would clean-up surfaces
    even when an application died.
    
    with this change, SF is able to do its own cleanup without
    relying on the window manager.
    
    the change is very simple, we simply don't keep a reference
    to ISurface and make sure no more than one of them can
    be created.
    
    Change-Id: I61f2d7473bf8d4aa651549a846c34cdbb0d0c85a
    Correctly handle translucency of device-specific pixel formats
    
    Check requested format for device-specific formats, and assume (as
    documented in libhardware/include/hardware/hardware.h) this is opaque
    layer so no blending is necessary.
    
    Bug: 3215931
    Change-Id: Ib4dff8060ac522d201ff1e74807ac340c17d3fa7
    fix [3389263] OMX.Nvidia.h264.decode fails to shutdown
    
    We were still destroying an ANativeWindow's buffer pretty soon
    after it was removed from the window manager. This time
    we really wait for the ISurace to go away.
    
    Change-Id: I329273fedaeef76ee92836f6180c2c3808389330
    Protected surface API
    
    To be used by DRM framework, implemented by display HAL
    
    Change-Id: I054a07a94f4d5dbe792f3a597e2e49a100d90eb2
    fix [3361121] hang in glClear() - device unresponsive, OTA fails (DO NOT MERGE)
    
    Generally we never want to lock a buffer for write access if it is at
    the "head" on the surfaceflinger side. The only exception (1) is when
    the buffer is not currently in use AND there is at least one queued
    buffer -- in which case, SurfaceFlinger will never use said buffer
    anymore, because on the next composition around, it will be able to
    retire the first queued buffer.
    
    The logic above relies on SurfaceFlinger always retiring
    and locking a buffer before composition -- unfortunately this
    didn't happen during a screenshot.
    
    This could leave us in a situation where a buffer is locked by the
    application for write, and used by SurfaceFlinger for texturing,
    causing a hang.
    
    Here, we fix this issue by never assuming the exception (1), it was
    intended as an optimization allowing ANativeWindow::lockBuffer() to
    return sooner and was justified when most of SF composition was
    done in software. The actual buffer locking is now ensured by
    gralloc. We could have handled screenshots in a similar way to
    a regular composition, but it could have caused glitches on screen,
    essentially, taking a screenshot could cause to skip a frame.
    
    now that we removed the notion of a "inUse" buffer in surfaceflinger
    a lot of code can be simplified / removed.
    
    noteworthy, the whole concept of "unlockClient" wrt. "compositionComplete"
    is also gone.
    clean-up unneeded code
    
    now that we removed the notion of a "inUse" buffer in surfaceflinger
    a lot of code can be simplified / removed.
    
    noteworthy, the whole concept of "unlockClient" wrt. "compositionComplete"
    is also gone.
    
    Change-Id: I210413d4c8c0998dae05c8620ebfc895d3e6233d
    Fix a problem where hwc and GL composition could show a different buffer
    
    if a surface's buffers are reallocated, the current active buffer will
    end-up pointing on one of these until a new buffer is retired.
    
    we're now keeping a reference to the actual buffer until we retire a
    new one.
    
    Change-Id: Ib1703947e7a0340694d846e0962576318863b935
    fix [3223749] media server crashes when switching mode from video capture to still image capture
    
    there was an issue were in some situation SF would call prepare() on hwc
    with a NULL handle and never call prepare again.
    in this situation, we onw set the SKIP flag to make sure that hwc
    won't process this layer and as soon as we receive our first buffer we
    trigger a recompute of the visible regions which will end-up calling
    prepare() again.
    
    Change-Id: I6b400b2df79712408b9315a9859290c7fcb1609e
    fix [3176642] Camera preview turns completely black for multiple toggles between camera and camcorder app
    
    There was a leak of Surface tokens when a surface was detached from a UserClient.
    We now always detach a surface from its client before attaching to the new one,
    this guarantees that its token is freed.
    
    Change-Id: Icfad0b16286ed58155bdfafdf36ab161440aa485
    [3211070] camera preview image is rendered offset from the UI overlay frame
    
    somehow this change got lost.
    
    Change-Id: I36f6c7ef3f782918042b77e9dc91a4c811d84a40
    fix [3260137] Sometimes front-facing camera mirroring is wrong
    
    make sure to take the buffer's orientation into account.
    
    Change-Id: I9fef89e66368ad2dec1cb8c7b77ac2b3b4858efb
    [317580] fix issue where the screen wouldn't be rotated properly in bypass mode
    
    In some situations, the screen transformation would not be
    applied while in bypass mode.
    
    Change-Id: I3d6dd52e4c12b11aae97b54bf8e2322536eee37f
    [3171580] SurfaceFlinger Bypass mode. (DO NOT MERGE)
    
    This is a poor's man precursor to the h/w composer HAL.
    Basically we detect when a window is full screen and in
    that case we bypass surfaceflinger's composition step, which
    yields to much improved performance.
    
    Change-Id: Ie03796ae81a1c951949b771c9323044b980cb347
    [3171580] Fix two typos related to fixed-size buffers
    
    mFixedSize was never set, this bug was introduced during some "cleanup", in
    practice this could cause some issues when a fixed-size buffer was used and
    the window was resized.
    
    Layer::drawForSreenShot() had a typo that had no effect.
    
    mFixedSize was used to determine if filtering was needed, which was a bit too
    conservative and created a dependency between filtering and "fixed size" states
    which should exist.
    
    Now we enable filtering based on the size of the buffer vs. the size of the layer.
    
    Change-Id: I32044e91b0c944c1b137efdceb3f01dfaa78119d
    [3171580] don't automatically log GraphicBuffer allocation failures
    
    some of these failures are not fatal and even expected in some cases
    so they should not emit a dump in the log in those cases.
    
    Change-Id: Idcfa252e3bfa9d74e27fe4ad8f8623aa01aa9c5e
    Remove const_cast to layer handle
    
    Change-Id: Ica1e089cb56b5f9f46ab87abf735ffe7237fc926
    Implement reducing the buffer count of a Surface.
    
    Change-Id: I7f979c60c06d654aa8265002836277434bc1a64f
    Bug: 3095167
    Always create OpenGL accelerated windows in RGBA 8888.
    
    Bug #3081600
    
    The OpenGL renderer in libhwui uses a single EGL context per process and
    thus create it with an RGBA 8888 EGL configuration. To ensure that all
    windows are compatible with this configuration, this change modifies
    the window manager and SurfaceFlinger.
    
    The window manager now checks the window's flags and if the window is
    hardware accelerated, it forces the window's pixel format to be
    translucent when creating the surface. The window itself is still
    marked as opaque if we know that the window will be opaque on screen.
    This keeps existing optimizations in place.
    
    Similarly in SurfaceFlinger, a translucent Surface can now be created
    with the Surface.OPAQUE flag, indicating SurfaceFlinger that the surface
    does not require blending, despite its RGBA 8888 configuration.
    
    Change-Id: Ic747b6b12564ba064412d842117880fcc199eb7c
    refactored screenshot code
    
    the core screenshot function now can capture the screen at any lower resolution
    performing bilinear filtering.
    
    we also now have some client code to interface with the screenshot service.
    
    it's now possible to request a screenshot at a lower resolution.
    
    Change-Id: I33689bba98507ab928d0898b21596d0d2fe4b953
    refactored screenshot code
    
    the core screenshot function now can capture the screen at any lower resolution
    performing bilinear filtering.
    
    we also now have some client code to interface with the screenshot service.
    
    it's now possible to request a screenshot at a lower resolution.
    
    Change-Id: I5a3b0e431421800e3aad601d9af8f94adffbc71f
    fix [3018216] UI shrinks / stretches while using apps with IME
    
    Change-Id: Ie4c5d8a434b4489355ed8c52af96eb931b4d7167
    Fix a SurfaceFlinger bug.
    
    The bug caused SurfaceFlinger to constantly trigger reallocation of buffers
    that requested a fixed size.
    
    Change-Id: Ic993a60e6474e36a344c8b48d541a0d08b8c4faf
    fix [2946787] Screen flicker on low resolution setting in camcorder.
    
    Change-Id: I7e86f2b6d85dcae8dd212890b978fa6ac7de6893
    don't try to lock a buffer that wasn't allocated with SW usage bits
    
    Change-Id: Iabbcec1bfa30dc47d45ece699dd178653f1b675b
    fix [2931513] Add support for setting the orientation of an ANativeWindow
    
    Also implement support for cropping.
    
    Change-Id: Iba5888dd242bf2feaac9e9ce26e404c1f404c280
    revert hwcomposer HAL changes. DO NOT MERGE.
    
    This reverts commit:
    94364b91a2894bf037b8beb027132fbb812e1434
    f8e705dea48f77f1c2532fdbadd4997dd1851af0
    b59beb5ca68d0228f60dda60d85e2d0226b33215
    e0d5f5bcf5a8b26f4ad75f549cbf380b2c9faf20
    call into hwcomposer HAL when present
    
    Change-Id: I70f31c69a9436a43860e78977442863ecba6d27b
    fix [2873058] Surface::dequeueBuffer blocks on last buffer, i.e. cannot dequeue all allocated buffers at once.
    
    this situation happened when the last buffer needed to be resized
    (or allocated, the first time). the assumption was that the buffer
    was in use by SF itself as the current buffer (obviously, this
    assumption made no sense when the buffer had never been allocated, btw).
    
    the system would wait until some other buffer became the "front" buffer.
    
    we fix this problem by entirely removing the requirement that the
    buffer being resized cannot be the front buffer. instead, we just
    allocate a new buffer and replace the front buffer by the new one.
    
    the downside is that this uses more memory (an extra buffer) for a
    brief amount of time while the old buffer is being reallocated and
    before it has actually been replaced.
    
    Change-Id: I022e4621209474ceb1c671b23deb4188eaaa7285
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    Revert "Revert "fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger""
    
    This reverts commit 330dd304a471d260a73e342a240921c03c825f99.
    Revert "fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger"
    
    This reverts commit 081bc5c47d8a980e6eafa70ddafcd89981586391.
    Revert "am 256fc043: am 081bc5c4: fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger"
    
    This reverts commit e02dec8c4cbab17d09983af1328308b8aa61ef85, reversing
    changes made to 6d7a052fb04b251c517d0a9049b8d5d7408ce8c0.
    
    Bug: 2798567
    fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger
    
    Make sure to not use GL_TEXTURE_EXTERNAL when it's not supported
    by the GL. The error was harmless, but annoying.
    
    Change-Id: I571a9a9b05d35da51420950a6a6e95629067efd0
    fix [2785833] valgrind error in android::Layer::requestBuffer
    
    fix uninitialized variable
    
    Change-Id: I99e1b619ae8c88dd9d77b3abf4762f801019047e
    Added support for the GL_TEXTURE_EXTERNAL target
    
    This will allow us to support YUV surfaces.
    
    Change-Id: I2d4da75f1006a5285bdc552695d4caeecccf2183
    allow re-targetting of surfaces
    
    Surfaces can now be parcelized and sent to remote
    processes. When a surface crosses a process
    boundary, it looses its connection with the
    current process and gets attached to the new one.
    
    Change-Id: I39c7b055bcd3ea1162ef2718d3d4b866bf7c81c0
    split surface management from surface's buffers management
    
    Change-Id: If3c5655d1231f8f0c49ba68f972b1b20c93b3f87
    clean-up client management.
    
    simplified things a lot, the biggest change is that the concept
    of "ClientID" is now gone, instead we simply use references.
    
    Change-Id: Icbc57f80865884aa5f35ad0d0a0db26f19f9f7ce
    Make sure to use filtering while in fixed-size mode
    added the notion of fixed-size buffers
    
    the new native_window_set_buffers_geometry allows
    to specify a size and format for all buffers to be
    dequeued. the buffer will be scalled to the window's
    size.
    
    Change-Id: I2c378b85c88d29cdd827a5f319d5c704d79ba381
    fix the threading issue for setBuffercount()
    
    this change introduces R/W locks in the right places.
    on the server-side, it guarantees that setBufferCount()
    is synchronized with "retire" and "resize".
    on the client-side, it guarantees that setBufferCount()
    is synchronized with "dequeue", "lockbuffer" and "queue"
    SharedBufferStack now can grow up to 16 buffers.
    
    there is a new resize() api, which currently only allows growing.
    
    Change-Id: Ia37b81b73be466d2491ffed7f3a23cd8e113c6fe
    Refactor some code in surfaceflinger in preparation of upcoming changes
    
    the new TextureMagager class now handle texture creation and upload
    as well as EGL image creation and binding to GraphicBuffers. This is
    used indirectly by Layer and directly by LayerBuffer
    
    the new BufferManager class handles the set of buffers used for a
    Layer (Surface), it abstracts how many buffer there is as well as
    the use of EGLimage vs. regular texture ops (glTexImage2D).
    
    Change-Id: I2da1ddcf27758e6731400f6cc4e20bef35c0a39a
    remove the "memcpy" hack
    
    this hack was used for gpus that don't support cached buffers
    for s/w clients. currently we have no gpu with this issue.
    this removes quite a bit of complexity.
    
    Change-Id: I72564669f124f92805030e61983711f61c76b6d9
    fix [2664345] Flash: Bad flicker at the end of a pinch zoom.
    
    the window manger puts SurfaceViews up before they have been
    rendered into, because of that surfaceflinger doesn't have
    anything ready to draw for that surface when an udpate occurs
    and responds by filling the surface with black.
    With this fix, we only fill those areas of the framebuffer
    that would otherwise be undefined (no content at all).
    
    in the Flash case, the "flash" window is not drawn at all
    until it has some content, instead the underlaying browser
    window is shown.
    
    Change-Id: Ifb610f7f8c27b88edf83e09adc4803fc295c15a1
    more surfaceflinger cleanups
    
    get rid of the "fake rtti" code, and use polymorphism instead.
    also simplify how we log SF's state (using polymorphism)
    
    Change-Id: I2bae7c98de4dd207a3e2b00083fa3fde7c467922
    better fix for [2420565] Surface.lockCanvas() updates the dirty region too often
    
    Change-Id: I83438b40effd21538f1c74396dc665254b9d5ab6
    fix [2594950] Flash: Zooming in on some content crashes the Nexus One and causes it to reboot (runtime restart)
    
    We now limit the size of the surface to the maximum size supported by the GPU.
    On Nexus One this will 2048 -- it could be different on other devices.
    Surface creation fails if the limit is exceeded.
    
    Change-Id: I9ecfc2e9c58c9e283782b61ebfc6b590f71df785
    fix [2515291] Native crash and runtime restart while trying to preview captured picture on Sapphire
    
    if a buffer couldn't be allocated because of an OOM, SF could, in some case dereference
    a null pointer.
    
    Change-Id: I5321248c38a21e56d5278b6aada2694e64451378
    fixes for [2474091] Saw Poor behaviour playing a video.
    
    - fix a bug when hacking video buffers into gralloc buffers
     where the buffer size was incorrect this was causing the
     "direct-form-texture" mode to fail
    
    - also when the above fails, make sure to revert to the
     "mdp copy mode" before going to "slow mode"
    
    - finally disable completely the "direct-from-texture" mode
     for now. It cannot work because the allocated buffers can't
     respect the GPU constraints (alignment and such). We'll
     have to find a solution for that.
    get rid off the YUV formats at the libui layer
    split libsurfaceflinger_client and libcamera_client out of libui
    android-2.1_r1 snapshot
    fix [2269582] [TOP-10][Passion_1506][APT:Camera]Sometimes camera preview screen is truncated after launching and back to home screen by home key repeatedly
    
    When a surface is removed from the screen while it holds a "freeze lock", the
    release of that lock happens in the destructor as a "safety net". However, it
    doesn't trigger an update at that point.
    
    Make sure that "freeze locks" are released from the transaction at the point
    a surface is removed from the screen (if it's not on screen, it shouldn't
    prevent the screen to redraw, and therefore cannot hold a freeze lock).
    The refresh corresponding to that transaction will pick it up as soon as possible.
    fix [2319255] crash in openGL : from the media recorder stress test.
    
    never call eglCreateImageKHR() with a NULL native buffer, which can
    happen in OOM conditions.
    fixed [2260070] display stopped updating
    
    always check that the visible region isn't empty after all visible regions are recomputed
    clear he freeze-lock if it is.
    eclair snapshot
        fix [2143798] Need to figure out how to do video
    
        Use EGLImageKHR instead of copybit directly.
        We now have the basis to use streaming YUV textures (well, in fact
        we already are). When/if we use the GPU instead of the MDP we'll
        need to make sure it supports the appropriate YUV format.
    
        Also make sure we compile if EGL_ANDROID_image_native_buffer is not supported
    fix [2211532] improves sholes graphics performance
    
    Instead of using glTex{Sub}Image2D() to refresh the textures, we're using an EGLImageKHR object
    backed up by a gralloc buffer. The data is updated using memcpy(). This is faster than
    glTex{Sub}Image2D() because the texture is not swizzled. It also uses less memory because
    EGLImageKHW is not limited to power-of-two dimensions.
    fix [2164183] sometimes device just wants to stay asleep
    
    When switching rapidily orientation back and forth, surfaces end-up
    acquiring the freeze-lock when the first orientation change happens,
    but never release it because by the time the 2nd orientation change
    comes in, the surface size is back to its original size and
    doesn't appear to have resized.
    
    we now always release the freeze-lock when we receive a buffer of the
    expected size.
    fix [2170319] gmail bulk operation checkbox latency on passion
    
    This also fixes [2152536] ANR in browser
    
    When SF is enqueuing buffers faster than SF dequeues them.
    The update flag in SF is not counted and under some situations SF will only
    dequeue the first buffer. The state at this point is not technically
    corrupted, it's valid, but just delayed by one buffer.
    
    In the case of the Browser ANR, because the last enqueued buffer was delayed
    the resizing of the current buffer couldn't happen.
    
    The system would always fall back onto its feet if anything -else- in
    tried to draw, because the "late" buffer would be picked up then.
    fix [2152536] ANR in browser
    
    A window is created and the browser is about to render into it the
    very first time, at that point it does an IPC to SF to request a new
    buffer. Meanwhile, the window manager removes that window from the
    list and the shared memory block it uses is marked as invalid.
    However, at that point, another window is created and is given the
    same index (that just go freed), but a different identity and resets
    the "invalid" bit in the shared block. When we go back to the buffer
    allocation code, we're stuck because the surface we're allocating for
    is gone and we don't detect it's invalid because the invalid bit has
    been reset.
    
    It is not sufficient to check for the invalid bit, I should
    also check that identities match.
    fix [2168528] enable glTexImage2D code path in SF for software-only buffers
    fix [2167050] glTexImage2D code path buggy in SurfaceFlinger
    
    When EGLImage extension is not available, SurfaceFlinger will fallback to using
    glTexImage2D and glTexSubImage2D instead, which requires 50% more memory and an
    extra copy. However this code path has never been exercised and had some bugs
    which this patch fix.
    
    Mainly the scale factor wasn't computed right when falling back on glDrawElements.
    We also fallback to this mode of operation if a buffer doesn't have the adequate
    usage bits for EGLImage usage.
    
    This changes only code that is currently not executed. Some refactoring was needed to
    keep the change clean. This doesn't change anything functionaly.
    Attempt to fix [2152536] ANR in browser
    
    The ANR is caused by SurfaceFlinger waiting for buffers of a removed surface to become availlable.
    When it is removed from the current list, a Surface is marked as NO_INIT, which causes SF to return
    immediately in the above case. For some reason, the surface here wasn't marked as NO_INIT.
    
    This change makes the code more robust by always (irregadless or errors) setting the NO_INIT status
    in all code paths where a surface is removed from the list.
    
    Additionaly added more information in the logs, should this happen again.
    fix [2152247] Windows sometimes drawn scaled up.
    invalidate the surface when the physical changes
    introduce the notion of the requested size in the Layer state
    minor SurfaceFlinger code cleanup and remove unnecessary tests
    turn dithering off if it's not needed
    fix [2133214] STOPSHIP: revert I4a06bb4f: workaround for [2113743] Sholes: frozen then runtime restart going to list view
    
    Revert "workaround for [2113743] Sholes: frozen then runtime restart going to list view"
    
    This reverts commit 4a06bb4f3355b0ef2b76aa883704da9d154c44ae.
    workaround for [2113743] Sholes: frozen then runtime restart going to list view
    fix [2129080] Soft reboot after clicking around and then rubbing the screen
    fix [2119400] sholes: artifacting when switching orientation
    add support for RGBX_8888 surfaces in SurfaceFlinger
    fix [2112575] stuck on DequeueCondition for a surface that doesn't exist anymore
    
    this also fixes part of [2111536] Device is soft rebooted after ending the call through voice dialer
    fix [2068105] implement queueBuffer/lockBuffer/dequeueBuffer properly
    
    Rewrote SurfaceFlinger's buffer management from the ground-up.
    The design now support an arbitrary number of buffers per surface, however the current implementation is limited to four. Currently only 2 buffers are used in practice.
    
    The main new feature is to be able to dequeue all buffers at once (very important when there are only two).
    
    A client can dequeue all buffers until there are none available, it can lock all buffers except the last one that is used for composition. The client will block then, until a new buffer is enqueued.
    
    The current implementation requires that buffers are locked in the same order they are dequeued and enqueued in the same order they are locked. Only one buffer can be locked at a time.
    
    eg. Allowed sequence:   DQ, DQ, LOCK, Q, LOCK, Q
    eg. Forbidden sequence: DQ, DQ, LOCK, LOCK, Q, Q
    fix a bug that could cause a window to be hidden in some cases.
    
    this would happen is the window is made visible but the client didn't render yet into it. This happens often with SurfaceView.
    Instead of filling the window with solid black, SF would simply ignore it which could lead to more disturbing artifacts.
    
    in theory the window manager should not display a window before it has been drawn into, but it does happen occasionnaly.
    Surface::GPU and Surface::HARDWARE are now deprecated; they will be set automatically if needed.
    
    this also ripples into the window manager API by making some constant there deprecated as well.
    second take, hopefully this time it doesn't break one of the builds: "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    Revert "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    
    This reverts commit 8b76a0ac6fbf07254629ed1ea86af014d5abe050.
    SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything.
    
    This change makes SurfaceHolder.setType(GPU) obsolete (it's now ignored).
    Added an API to android_native_window_t to allow extending the functionality without ever breaking binary compatibility. This is used to implement the new set_usage() API. This API needs to be called by software renderers because the default is to use usage flags suitable for h/w.
    remove unused and confusing comment
    free gralloc buffers as soon as possible (when a surface is not visible any longer), client who have the buffers still mapped won't crash, btu may see garbage data
    checkpoint. bring back video/camera
    fix a memory corruption where a SF Client could be used after it's been destroyed
    donut snapshot
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    fix 1803886 android15 Translucent GLSurfaceView demo does not display properly
    get rid of an old hack to work around a bug around glDeleteTextures() in the adreno drivers
    Surfaces are now destroyed properly in SurfaceFlinger.
    
    First, the window manager tells us when a surface is no longer needed. At this point, several things happen:
    - the surface is removed from the active/visible list
    - it is added to a purgatory list, where it waits for all clients to release their reference
    - it destroys all data/state that can be spared
    
    Later, when all clients are done, the remains of the Surface are disposed off: it is removed from the purgatory and destroyed.
    In particular its gralloc buffers are destroyed at that point (when we're sure nobody is using them anymore).
    more Surface lifetime management
    
    Surfaces are now destroyed once all references from the clients are gone, but they go through a partial destruction as soon as the window manager requests it.
    This last part is still buggy. see comments in SurfaceFlinger::destroySurface()
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@131421
    auto import from //branches/cupcake/...@130745
    auto import from //branches/cupcake/...@125939
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Remove dependencies on runtime_libdvm and libdvm.so in general
    
    Bug: 14298175
    
    (cherry picked from commit aefe55f0fb9e69be205497ef4fc3432d2f7a2d8b)
    
    Change-Id: I05b1a7dd1ef30b3366b52b46bfc7b39cfb3be198
    Remove dependencies on runtime_libdvm and libdvm.so in general
    
    Bug: 14298175
    Change-Id: I74b4a3dabf89c6b53bfe688c45d6e1167880fd95
    fix SurfaceFlinger DDMS debugging
    
    DdmHandleAppName.setAppName() signature changed which broke
    this debugging feature.
    
    Needed for debugging b\7267680
    
    Change-Id: I4482bf5a441e91bef89d1ddea9a4152333be7f88
    add libsurfaceflinger_ddmconnection for PDK build
    
    - the library is dlopened from libsurfaceflinger
    - the library built only when libnativehelper exists
    
    Bug: 7089510
    Change-Id: Ib3ea1029d7e8f6e055f4b759d0bf68f5123fa8a1
    fix pdk build
    
    Change-Id: Ia4db8e1e8ee18ac112bf13a5ab2a75edb08fc70f
    Signed-off-by: Greg Hackmann <ghackmann@google.com>
    break SF dependencies on libdvm and libandroid_runtime
    
    these libraries are only needed for debugging and are now
    linked at runtime if needed.
    
    Change-Id: I03f138523c6de166a1e2700d4454d4a854aee145
    as a debug option SrufaceFlinger can now connect to DDMS
    
    this is disabled by default. To enable:
      setprop debug.sf.ddms 1
    
    this debug option requires to restart SurfaceFlinger
    
    Change-Id: Ic2f8050b29911b55bcd21721648b6978700c277d
    SurfaceFlinger: Add EventControlThread
    
    This change adds a new thread for calling HWComposer's eventControl
    asynchronously.  The DispSync-based vsync approach ends up enabling and
    disabling HWComposer's vsync callbacks at arbitrary times, and some HWComposer
    implementations do not have these calls optimized.
    
    Bug: 11175503
    Change-Id: I719be82bd200b391c61d40863b991c7b59acdfd6
    dumpstate: switch to HAL static libraries
    
    Change-Id: I865a0b4b4a84a2d54a239e7b09874287f0c1ad56
    move services executables sources in their respective src folder
    
    Change-Id: Ic65434a26c7fed1699abf0851fec6faa40e09c0c
    Add skeleton of input flinger.
    
    Change-Id: I7f25080e446d4d3d9de9b18fe432a09bc751e0d9
    Improve memory coherence management in screenshot code [DO NOT MERGE]
    
    The existing code worked in practice, but wasn't quite correct in
    theory and relied on implementation details of other code. It's still
    somewhat unusual and subtle, but now is correct-in-theory (I believe)
    and a little better documented.
    
    Bug: 16044767
    Change-Id: I22b01d6640f0b7beca7cbfc74981795a3218b064
    (cherry picked from commit c61576794e75898a829eac52fc524c8e907b4b02)
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    fix the threading issue for setBuffercount()
    
    this change introduces R/W locks in the right places.
    on the server-side, it guarantees that setBufferCount()
    is synchronized with "retire" and "resize".
    on the client-side, it guarantees that setBufferCount()
    is synchronized with "dequeue", "lockbuffer" and "queue"
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    GLConsumer: Stop using default constructor params
    
    Removes the dependency on default constructor parameters for
    GLConsumer so that a different constructor prototype can safely be
    added.
    
    Change-Id: I0da924bbd4c141edbf305598c1be8bc575654680
    Improve SurfaceFlinger PTS estimation
    
    Get the next refresh time from DispSync instead of guessing based
    on the current time.
    
    Change-Id: I8dc72a3217bfd4e9b4c905034194d1a298cad69a
    Remove deprecated BufferQueue constructor
    
    Bug: 13415624
    Change-Id: I9fe15e45daa7351f1db34ee75bfee6f19cb347d3
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    fix camera API 2.0 orientation
    
    we add a flag to ANativeWindow::setBufferTransform that means
    "apply the inverse rotation of the display this buffer is displayed
    onto to".
    
    Bug: 10804238
    Change-Id: Id2447676271950463e8dbcef1b95935c5c3f32b2
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    always pass the BufferQueue explicitely to consumers
    
    Change-Id: I883b0a7b19d8e722f9ab714ba6f49e658b02ca86
    Pay attention to buffer timestamps
    
    When acquiring a buffer, SurfaceFlinger now computes the expected
    presentation time and passes it to the BufferQueue acquireBuffer()
    method.  If it's not yet time to display the buffer, acquireBuffer()
    returns PRESENT_LATER instead of a buffer.
    
    The current implementation of the expected-present-time computation
    uses approximations and guesswork.
    
    Bug 7900302
    
    Change-Id: If9345611c5983a11a811935aaf27d6388a5036f1
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    Avoid unnecessary texture bind
    
    In SurfaceFlingerConsumer, check to see if native fence sync is
    enabled.  If so, defer the texture binding step to Layer::onDraw.
    
    Change-Id: I7d4034a31c0143207eea2509dfa13ef3820f9b8c
    Refactor SurfaceTexture a bit.
    
    Rearranges updateTexImage() so that the SurfaceFlinger-specific
    behavior is in a new SurfaceFlingerConsumer subclass.
    
    SurfaceTexture behavior should not be altered.  Instead of
    acquire-bind-release we now do acquire-release-bind, but since
    it's all done with the lock held there shouldn't be any
    externally-visible change.
    
    Change-Id: Ia566e4727945e2cfb9359fc6d2a8f8af64d7b7b7
    MT6589: fix build
    
    Change-Id: Ie3ae37ed028ed14c88eec039f81238c836cb1260
    Improve SurfaceFlinger PTS estimation
    
    Get the next refresh time from DispSync instead of guessing based
    on the current time.
    
    Change-Id: I8dc72a3217bfd4e9b4c905034194d1a298cad69a
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    fix camera API 2.0 orientation
    
    we add a flag to ANativeWindow::setBufferTransform that means
    "apply the inverse rotation of the display this buffer is displayed
    onto to".
    
    Bug: 10804238
    Change-Id: Id2447676271950463e8dbcef1b95935c5c3f32b2
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    single buffer mode for BufferQueue
    
    Bug: 9891035
    Change-Id: Id1ab5f911a6dc4c1d8235e65775b3d3635231ad4
    Pay attention to buffer timestamps
    
    When acquiring a buffer, SurfaceFlinger now computes the expected
    presentation time and passes it to the BufferQueue acquireBuffer()
    method.  If it's not yet time to display the buffer, acquireBuffer()
    returns PRESENT_LATER instead of a buffer.
    
    The current implementation of the expected-present-time computation
    uses approximations and guesswork.
    
    Bug 7900302
    
    Change-Id: If9345611c5983a11a811935aaf27d6388a5036f1
    SurfaceFlinger: fix releaseBuffer in updateTexImage
    
    Allow releasing a buffer acquired in the past.
    
    Change-Id: I3f27f1caec109c1a47286fc4d2235c6e1afe9022
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Bug: 9516405
    BufferQueue: track buffer-queue by instance vs. by reference
    
    Instead of representing the buffer-queue as a vector of buffer
    indices, represent them as a vector of BufferItems (copies).
    This allows modifying the buffer slots independent of the queued
    buffers.
    
    As part of this change, BufferSlot properties that are only
    been relevant in the buffer-queue have been removed.
    
    Also, invalid scalingMode in queueBuffer now returns an error.
    
    ConsumerBase has also changed to allow reuse of the same
    buffer slots by different buffers.
    
    Change-Id: If2a698fa142b67c69ad41b8eaca6e127eb3ef75b
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Related-to-bug: 7093648
    don't use compile-time configuration of libgui as much as possible
    
    We now detect at runtime which sync features to use, which
    allows us to remove a lot of the compile-time configuration
    options. There  is still one option though, to disable
    KHR_fence_sync on some devices (which are more efficient
    without it).
    
    - added a backdoor to get the vendor's EGL strings
    
    the new logic is:
    - use always ANDROID_native_fence_sync if available
    - fallback to KHR_fence_sync if available and not disabled
      by the compile-time option
    - use KHR_wait_sync if available and either of the above is
      enabled
    
    Change-Id: I9c4b49d9ff1151faf902cc93bd53ea5f205aaabf
    libgui: disallow NULL Fence pointers
    
    This change eliminates the uses of a NULL sp<Fence> indicating that no waiting
    is required.  Instead we use a non-NULL but invalid Fence object for which the
    wait methods will return immediately.
    
    Bug: 7892871
    Change-Id: I5360aebe3090422ef6920d56c99fc4eedc642e48
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    Avoid unnecessary texture bind
    
    In SurfaceFlingerConsumer, check to see if native fence sync is
    enabled.  If so, defer the texture binding step to Layer::onDraw.
    
    Change-Id: I7d4034a31c0143207eea2509dfa13ef3820f9b8c
    Refactor SurfaceTexture a bit.
    
    Rearranges updateTexImage() so that the SurfaceFlinger-specific
    behavior is in a new SurfaceFlingerConsumer subclass.
    
    SurfaceTexture behavior should not be altered.  Instead of
    acquire-bind-release we now do acquire-release-bind, but since
    it's all done with the lock held there shouldn't be any
    externally-visible change.
    
    Change-Id: Ia566e4727945e2cfb9359fc6d2a8f8af64d7b7b7
    Allow disabling layer rotation during screenshots
    
    Add the ability to ignore layers' transformation matrices during
    screenshot capture, which will allow the window manager to capture
    unrotated images for recents during the device rotation animation.
    
    Bug: 11805195
    Change-Id: I854d87bc84ca06ef9a054a454af1c080ee66fbb8
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    Refactor SF. Move all GL operations in their own class.
    
    this is the first step to add support for GLES 2.x, this
    change breaks the dependency of SF on GLES 1.x by moving
    all operation into their own class.
    
    Bug: 8679321
    
    Change-Id: I0d2741eca2cefe67dfd9cf837cac10c4d126928b
    clean-up SurfaceFlinger a bit
    
    - most methods on Layer didn't need to be virtual
    - more consistency in naming drawing/current state
    
    Change-Id: Ieb7b4951b40fc673b807994ed21ae4aea7281068
    get rid of ISurface
    
    ISurface was only used to get the IGraphicBufferProducer from
    a Layer. It's now replaced by a BBinder subclass / IBinder and
    is only used as a handle to the surface, to both refer to it
    and manage its life-time.
    
    Also cleaned-up a bit the ISurfaceComposer interface and
    "create layer" code path.
    
    Change-Id: I68d0e02d57b862cffb31d5168c3bc10cea0906eb
    Get rid of LayerBase.
    
    The functionality of LayerBase and Layer is folded
    into Layer. There wasn't a need for this abstraction
    anymore.
    
    Change-Id: I66511c08cc3d89009ba4deabf47e26cd4cfeaefb
    Make LayerDim a regular Layer instead of a LayerBase
    
    this is in preparation to get rid of LayerBase entirely
    
    Change-Id: Ia051949fc5205fd87371331145356ee11598a597
    fold LayerBaseClient into LayerBase
    
    Change-Id: Ic745136522df59c42f0885fd969e75ea55d09f01
    Eradicate DisplayID.
    
    DisplayDevices are now keyed of the wp<IBinder> the client uses.
    DisplayID has now become DisplayType which is just used to identify
    physical displays (as opposed to virtual displays such as wifi displays).
    
    Change-Id: I0c5968f2c902dcd699a7e0afacf833ff070c12ea
    turn DisplayDevice into a reference-counted object
    
    it's safer this way because this object owns an
    EGLSurface which cannot be easily reference-counted.
    
    it also gives us the ability to sub-class it, which
    we might want to do soon.
    
    Change-Id: I07358bb052dc5a13b4f2196b2c2b6e6e94c4bb4f
    cleanups in preparation of bigger changes
    
    - fix typo drawForSreenshot misspelled
    - get rid of DisplayDeviceBase
    - removed unused or unneeded code
    - always pass a DisplayDevice to Layer methods that are called
      on a per-display basis (to make it clear that this could be
      called more than once per composition).
    
    Change-Id: Id948b7e09fe5c06db0e42d40d6ed75dd095c7f44
    rename DisplayHardware to DisplayDevice
    
    Change-Id: I3f7250cd914e0da4f9ec2c9403587bbe12f3cc62
    one more step towards multiple display support
    
    - remove dependency on cached state in validateVisibility
    - get rid of mVertices and mTransformedBounds
    - get rid of validateVisibility
    - get rid of unlockPageFlip
    - handleTransaction now returns a dirty region
    - computevisibileregion now uses window-manager space
    get rid of GraphicPlane
    
    its functionality is now folded into DisplayHardware
    there will be more changes in that area.
    don't attempt to clip layers anymore using glScissor
    
    this seems to hurt performance on some GPU. this change
    might negatively affect performance on other GPUs though, but
    probably in less time-sensitive cases. If this becomes a
    problem it might become necessary to pre-clip the geometry
    (so that we don't have to use glScissor).
    
    This improves the rotation animation quite a bit.
    
    Change-Id: I5dbe1286f7ad858ef2c1e1ad9a07ee3f26c0b1f3
    Make sure set GL state properly
    
    when taking a screenshot, in particular, we could end up
    with stale GL state when drawing LayerDim which resulted
    in incortect rendering.
    
    Bug: 5467587
    Change-Id: Id9fbed2843481d31063620f3662b364c7e3ac781
    unify SurfaceTexture and Surface
    
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    Add SurfaceTexture logging
    fix onFrameAvailable
    revert the surface purgatory list and dependent changes.
    
    6d0f6cb Revert "Fix [3513017] in lockscreen but showing empty launcher (live wallpaper) only"
    6154412 Revert "partially fix [3306150] HTML5 video with H/W acceleration blackout (DO NOT MERGE)"
    37c2a37 fix [3408713] Dialog window invisible sometimes
    
    It looks like there is a surface leak, it's unclear where it is.
    Without those reverts, this would cause a leak of the associated buffers
    which is far more problematic. this change might hide the surface leak.
    
    Bug: 4078032
    Change-Id: Iedcda3ffcdd2f69d41047b5c3134c1e867ff90d7
    Fix [3513017] in lockscreen but showing empty launcher (live wallpaper) only
    
    37c2a37 fix [3408713] Dialog window invisible sometimes
    d35c666 fix [3385504] Surface flinger hang when adding dim surface
    1723b04 fix [3389263] OMX.Nvidia.h264.decode fails to shutdown
    1b0114f fix a surface leak in SurfaceFlinger
    
    Bug: 3513017
    
    Change-Id: Ia13ed8c9cdcb1f484e177cdcaff687e7c88a10c3
    [3418265] apply layer transformations to the DimLayer.
    
    with this change DimLayers will behave just like any other layer,
    in particular they'll respect the layer transformations.
    
    Change-Id: Icb4a1275e8bca9e3deb5f57c9f9219aaa69f9877
    fix [3385504] Surface flinger hang when adding dim surface
    
    Change-Id: I8e0cda414bcad5854d2ca5dde8370bfd8b2e5ea4
    surfaceflinger / GL extensions cleanup
    
    Add correct enumerants for OES_EGL_image_external to glext.h.
    SurfaceFlinger now checks for the correct extension name.
    
    Change-Id: I2ba2728a01fa2260bd086d2df4316c68f694a9b1
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    remove a hack that was used only used on h/w we no longer support.
    
    this should fix the opal build.
    
    Change-Id: I43d7633696fea5be6bc834293a832d22f6bdfc61
    Revert "Revert "fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger""
    
    This reverts commit 330dd304a471d260a73e342a240921c03c825f99.
    Revert "fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger"
    
    This reverts commit 081bc5c47d8a980e6eafa70ddafcd89981586391.
    Revert "am 256fc043: am 081bc5c4: fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger"
    
    This reverts commit e02dec8c4cbab17d09983af1328308b8aa61ef85, reversing
    changes made to 6d7a052fb04b251c517d0a9049b8d5d7408ce8c0.
    
    Bug: 2798567
    fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger
    
    Make sure to not use GL_TEXTURE_EXTERNAL when it's not supported
    by the GL. The error was harmless, but annoying.
    
    Change-Id: I571a9a9b05d35da51420950a6a6e95629067efd0
    Added support for the GL_TEXTURE_EXTERNAL target
    
    This will allow us to support YUV surfaces.
    
    Change-Id: I2d4da75f1006a5285bdc552695d4caeecccf2183
    clean-up client management.
    
    simplified things a lot, the biggest change is that the concept
    of "ClientID" is now gone, instead we simply use references.
    
    Change-Id: Icbc57f80865884aa5f35ad0d0a0db26f19f9f7ce
    more surfaceflinger cleanups
    
    get rid of the "fake rtti" code, and use polymorphism instead.
    also simplify how we log SF's state (using polymorphism)
    
    Change-Id: I2bae7c98de4dd207a3e2b00083fa3fde7c467922
    eclair snapshot
        fix [2143798] Need to figure out how to do video
    
        Use EGLImageKHR instead of copybit directly.
        We now have the basis to use streaming YUV textures (well, in fact
        we already are). When/if we use the GPU instead of the MDP we'll
        need to make sure it supports the appropriate YUV format.
    
        Also make sure we compile if EGL_ANDROID_image_native_buffer is not supported
    fix [2167050] glTexImage2D code path buggy in SurfaceFlinger
    
    When EGLImage extension is not available, SurfaceFlinger will fallback to using
    glTexImage2D and glTexSubImage2D instead, which requires 50% more memory and an
    extra copy. However this code path has never been exercised and had some bugs
    which this patch fix.
    
    Mainly the scale factor wasn't computed right when falling back on glDrawElements.
    We also fallback to this mode of operation if a buffer doesn't have the adequate
    usage bits for EGLImage usage.
    
    This changes only code that is currently not executed. Some refactoring was needed to
    keep the change clean. This doesn't change anything functionaly.
    fix [2068105] implement queueBuffer/lockBuffer/dequeueBuffer properly
    
    Rewrote SurfaceFlinger's buffer management from the ground-up.
    The design now support an arbitrary number of buffers per surface, however the current implementation is limited to four. Currently only 2 buffers are used in practice.
    
    The main new feature is to be able to dequeue all buffers at once (very important when there are only two).
    
    A client can dequeue all buffers until there are none available, it can lock all buffers except the last one that is used for composition. The client will block then, until a new buffer is enqueued.
    
    The current implementation requires that buffers are locked in the same order they are dequeued and enqueued in the same order they are locked. Only one buffer can be locked at a time.
    
    eg. Allowed sequence:   DQ, DQ, LOCK, Q, LOCK, Q
    eg. Forbidden sequence: DQ, DQ, LOCK, LOCK, Q, Q
    second take, hopefully this time it doesn't break one of the builds: "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    second take, hopefully this time it doesn't break one of the builds: "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    Revert "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    
    This reverts commit 8b76a0ac6fbf07254629ed1ea86af014d5abe050.
    SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything.
    
    This change makes SurfaceHolder.setType(GPU) obsolete (it's now ignored).
    Added an API to android_native_window_t to allow extending the functionality without ever breaking binary compatibility. This is used to implement the new set_usage() API. This API needs to be called by software renderers because the default is to use usage flags suitable for h/w.
    don't use a 1/4th of the screen size texture for the dim layer
    
    we can't use a texture of 1/4th of the screen for the dim layer, because the mdp internal input resultion is alwyas integers and for very small blits of a couple pixels the scale factor can get way out of range, for instance for a 7 pixels source, the scale factor would be either 7 (7/1) or 3.5 (7/2) instead of 4 (7/1.75). This caused the mdp to fail in some cases and revert to software. we now always use a texture of the actual screen size, so the problem will never happen. This burns 300KB of pmem instead of 21KB. On devices with a larger screen we might want to use a smaller texture and tile it by hand.
    use 1/16 the size (20KB) for the dim texture in the copybit/msm case
    fix a memory corruption where a SF Client could be used after it's been destroyed
    implement dimming with a texture on msm7k so it uses copybit
    Region now has its own implementation instead of relying on SkRegion, which allows us to break libui's dependency on libcorecg.
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Allow disabling layer rotation during screenshots
    
    Add the ability to ignore layers' transformation matrices during
    screenshot capture, which will allow the window manager to capture
    unrotated images for recents during the device rotation animation.
    
    Bug: 11805195
    Change-Id: I854d87bc84ca06ef9a054a454af1c080ee66fbb8
    Refactor SF. Move all GL operations in their own class.
    
    this is the first step to add support for GLES 2.x, this
    change breaks the dependency of SF on GLES 1.x by moving
    all operation into their own class.
    
    Bug: 8679321
    
    Change-Id: I0d2741eca2cefe67dfd9cf837cac10c4d126928b
    clean-up SurfaceFlinger a bit
    
    - most methods on Layer didn't need to be virtual
    - more consistency in naming drawing/current state
    
    Change-Id: Ieb7b4951b40fc673b807994ed21ae4aea7281068
    get rid of ISurface
    
    ISurface was only used to get the IGraphicBufferProducer from
    a Layer. It's now replaced by a BBinder subclass / IBinder and
    is only used as a handle to the surface, to both refer to it
    and manage its life-time.
    
    Also cleaned-up a bit the ISurfaceComposer interface and
    "create layer" code path.
    
    Change-Id: I68d0e02d57b862cffb31d5168c3bc10cea0906eb
    Make LayerDim a regular Layer instead of a LayerBase
    
    this is in preparation to get rid of LayerBase entirely
    
    Change-Id: Ia051949fc5205fd87371331145356ee11598a597
    fold LayerBaseClient into LayerBase
    
    Change-Id: Ic745136522df59c42f0885fd969e75ea55d09f01
    Eradicate DisplayID.
    
    DisplayDevices are now keyed of the wp<IBinder> the client uses.
    DisplayID has now become DisplayType which is just used to identify
    physical displays (as opposed to virtual displays such as wifi displays).
    
    Change-Id: I0c5968f2c902dcd699a7e0afacf833ff070c12ea
    turn DisplayDevice into a reference-counted object
    
    it's safer this way because this object owns an
    EGLSurface which cannot be easily reference-counted.
    
    it also gives us the ability to sub-class it, which
    we might want to do soon.
    
    Change-Id: I07358bb052dc5a13b4f2196b2c2b6e6e94c4bb4f
    rename DisplayHardware to DisplayDevice
    
    Change-Id: I3f7250cd914e0da4f9ec2c9403587bbe12f3cc62
    get rid of GraphicPlane
    
    its functionality is now folded into DisplayHardware
    there will be more changes in that area.
    unify SurfaceTexture and Surface
    
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    Add SurfaceTexture logging
    fix onFrameAvailable
    [3418265] apply layer transformations to the DimLayer.
    
    with this change DimLayers will behave just like any other layer,
    in particular they'll respect the layer transformations.
    
    Change-Id: Icb4a1275e8bca9e3deb5f57c9f9219aaa69f9877
    Protected surface API
    
    To be used by DRM framework, implemented by display HAL
    
    Change-Id: I054a07a94f4d5dbe792f3a597e2e49a100d90eb2
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    clean-up client management.
    
    simplified things a lot, the biggest change is that the concept
    of "ClientID" is now gone, instead we simply use references.
    
    Change-Id: Icbc57f80865884aa5f35ad0d0a0db26f19f9f7ce
    more surfaceflinger cleanups
    
    get rid of the "fake rtti" code, and use polymorphism instead.
    also simplify how we log SF's state (using polymorphism)
    
    Change-Id: I2bae7c98de4dd207a3e2b00083fa3fde7c467922
    eclair snapshot
    fix [2068105] implement queueBuffer/lockBuffer/dequeueBuffer properly
    
    Rewrote SurfaceFlinger's buffer management from the ground-up.
    The design now support an arbitrary number of buffers per surface, however the current implementation is limited to four. Currently only 2 buffers are used in practice.
    
    The main new feature is to be able to dequeue all buffers at once (very important when there are only two).
    
    A client can dequeue all buffers until there are none available, it can lock all buffers except the last one that is used for composition. The client will block then, until a new buffer is enqueued.
    
    The current implementation requires that buffers are locked in the same order they are dequeued and enqueued in the same order they are locked. Only one buffer can be locked at a time.
    
    eg. Allowed sequence:   DQ, DQ, LOCK, Q, LOCK, Q
    eg. Forbidden sequence: DQ, DQ, LOCK, LOCK, Q, Q
    fix a memory corruption where a SF Client could be used after it's been destroyed
    implement dimming with a texture on msm7k so it uses copybit
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Adding render stats APIs to UiAutomation (framework native).
    
    bug:12927198
    
    Change-Id: Ibb1c07f7d89e11281e5c1f27f412a29ac6f9c4ab
    SurfaceFlinger: fix 64-bit format string warnings
    
    Change-Id: Idacfbf0601743fba1c5de7632201a66a307a2710
    Signed-off-by: Greg Hackmann <ghackmann@google.com>
    surfaceflinger: add frame duration logging
    
    Change-Id: Ib414a45e7e191f23a2726cbbbeb606e9ce68a3b5
    SurfaceFlinger: add win anim frame time tracking
    
    This change makes the 'dumpsys SurfaceFlinger --latency' command with no extra
    args dump the frame timestamp data for the most recent frames that
    SurfaceFlinger generated that included window animation transaction changes.
    
    Change-Id: I8bded1ea08a4cddefef0aa955401052bb9107c90
    SurfaceFlinger: refactor frame time tracking
    
    This change moves the frame time history tracking code out of Layer and into a
    new class called FrameTracker.  It also changes the tracking to use signal
    timestamps from fences when available for more accurate results.
    
    Change-Id: I323c5f075c58bf86ce363b52af885ad0f6365f2b
    Adding render stats APIs to UiAutomation (framework native).
    
    bug:12927198
    
    Change-Id: Ibb1c07f7d89e11281e5c1f27f412a29ac6f9c4ab
    get rid of ISurface
    
    ISurface was only used to get the IGraphicBufferProducer from
    a Layer. It's now replaced by a BBinder subclass / IBinder and
    is only used as a handle to the surface, to both refer to it
    and manage its life-time.
    
    Also cleaned-up a bit the ISurfaceComposer interface and
    "create layer" code path.
    
    Change-Id: I68d0e02d57b862cffb31d5168c3bc10cea0906eb
    Get rid of LayerBase.
    
    The functionality of LayerBase and Layer is folded
    into Layer. There wasn't a need for this abstraction
    anymore.
    
    Change-Id: I66511c08cc3d89009ba4deabf47e26cd4cfeaefb
    fold LayerBaseClient into LayerBase
    
    Change-Id: Ic745136522df59c42f0885fd969e75ea55d09f01
    get rid of Surface identity and token
    
    we use the IBinder instead.
    
    Change-Id: I4aa0b58869ba43f19980013620051e5a261b062d
    Banish DisplayID from the SurfaceFlinger API.
    
    Use only display tokens in the API to refer to new displays.
    
    Don't require the caller to specify the display when creating
    a surface (since in general a surface could be shown on
    any display).
    
    This is intended to be a minimum change just to update the API.
    Note that SurfaceFlinger still uses DisplayID in a few places
    internally that might cause some features not to work properly
    when there are multiple displays (LayerScreenshot, for example).
    
    Change-Id: I3d91eec2da406eefd97bcd53655d403ad865a7e6
    split-up Client.h out of SurfaceFlinger.h
    
    Change-Id: I1993bf23e417163749d886283563a93d50b361b4
    SurfaceFlinger: send VSYNC power hints to IPowerManager
    
    VSYNC power hints are now sent via binder to IPowerManager.
    SurfaceFlinger no longer loads a second copy of the PowerHAL.
    VSYNC power hints are sent in batches and not on per frame basis.
    
    Change-Id: Ia5a839ab3c857cffae7089f810b4315d4ed23fcf
    Revert "SurfaceFlinger: send VSYNC power hints to IPowerManager"
    
    This reverts commit d469a1c3285b974cf2637517cc25727da8f82668.
    SurfaceFlinger: send VSYNC power hints to IPowerManager
    
    VSYNC power hints are now sent via binder to IPowerManager.
    SurfaceFlinger no longer loads a second copy of the PowerHAL.
    VSYNC power hints are sent in batches and not on per frame basis.
    
    Change-Id: Icc2eee5df56135bd24dc244a84e7c12dd5511fec
    don't actuate vsync hint when not needed
    
    Change-Id: I61c43dd76041816ab8cbe9aeaa55c11c1479ed03
    set vsync power hint
    
    Change-Id: I28c2faf9ff584df3e74392712971cbcf75eb9e98
    update the binder protocol for connect to match that of queueBuffer
    
    indeed, connect and queueBuffer return the same data, so it's
    easier to have them use the same protocol.
    
    Change-Id: I4f9fa3be0a80c9ab0a7a4039b282ae843aab02e1
    SurfaceTexture: Fully refactored from BufferQueue
    
    SurfaceTexture and BufferQueue are separate objects.
    
    Change-Id: I230bc0ae6f78d0f9b2b5df902f40ab443ed5a055
    return correct value from query after connecting a surface
    
    the first time a surface was connected, the values returned
    by query NATIVE_WINDOW_DEFAULT_{WIDTH|HEIGHT} and
    NATIVE_WINDOW_TRANSFORM_HINT were wrong until a call
    to queueBuffer was performed.
    
    Bug: 5137366, 5121607
    Change-Id: I7ac6b5b0daa876638f6bed7c20f286a6e6d984f6
    SurfaceFlinger: use async mode for video & cam
    
    This change makes SurfaceFlinger's SurfaceTexture objects default to
    async mode whenever a camera or video decoder connects.  This behavior
    can be disabled by #defining NEVER_DEFAULT_TO_ASYNC_MODE.
    
    Change-Id: I8965951d1775915da180e4af298dd7af3afafecc
    implement: "Add an ANativeWindow API for SurfaceFlinger to suggest an optimal buffer orientation"
    
    Bug: 4487161
    Change-Id: I883f34efe542c2a566d04966f873374f40c50092
    unify SurfaceTexture and Surface
    
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    Add SurfaceTexture logging
    fix onFrameAvailable
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Allow for resizing of Virtual Displays.
    
    Modify SurfaceFlinger to use VirtualDisplaySurface in all cases when a virtual
    display is used. Add functionality in VirtualDisplaySurface to resize the
    buffers aquired in the QueueBufferOutput. Add transaction support in
    SurfaceFlinger for resize. Add the modification of the size in DisplayDevice.
    
    Change-Id: Iae7e3556dc06fd18d470adbbd76f7255f6e6dd6b
    Tested: None
    Fix virtual display nesting
    
    This fixes the cycling rendering loop caused by nesting virtual
    displays by preventing them from recomposing if their contents
    haven't changed.
    
    (cherry-pick from master I600365c0fd5d3ad93e04295d26cf9de177ffc79b)
    
    Bug: 12101046
    Change-Id: I6182993d53537781aedb522f97a50f06eed8b80f
    Fix virtual display nesting
    
    This fixes the cycling rendering loop caused by nesting virtual
    displays by preventing them from recomposing if their contents
    haven't changed.
    
    Bug: 12101046
    Change-Id: I600365c0fd5d3ad93e04295d26cf9de177ffc79b
    Provide HWC prepare with a valid output buffer
    
    We weren't dequeing and setting the output buffer until just before
    set(). This didn't allow HWC to make decisions in prepare() based on
    the output buffer format, dimensions, etc.
    
    Now we dequeue the output buffer at the beginning of the composition
    loop and provide it to HWC in prepare. In GLES-only rendering, we may
    have to cancel the buffer and acquire a new one if GLES requests a
    buffer with properties different than the one we already dequeued.
    
    Bug: 10365313
    Change-Id: I96b4b0a851920e4334ef05080d58097d46467ab8
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    Rewrite VirtualDisplaySurface
    
    The previous implementation assumed that the HWC could read and write
    the same buffer on frames that involved both GLES and HWC composition.
    It turns out some hardware can't do this. The new implementation
    maintains a scratch buffer pool to use on these mixed frames, but on
    GLES-only or HWC-only frames still does composition directly into the
    output buffer.
    
    Bug: 8384764
    Change-Id: I7a3addb34fad9bfcbdabbb8b635083e10223df69
    Isolate knowledge that fb target == output buffer
    
    HWComposer didn't allow the virtual display output buffer to be set
    directly, instead it always used the framebuffer target buffer.
    DisplayDevice was only providing the framebuffer release fence to
    DisplaySurfaces after a commit.
    
    This change fixes both of these, so both HWComposer and DisplayDevice
    should continue to work if VirtualDisplaySurface changes to use
    separate framebuffer and output buffers. It's also more correct since
    VirtualDisplaySurface uses the correct release fence when queueing the
    buffer to the sink.
    
    Bug: 8384764
    Change-Id: I95c71e8d4f67705e23f122259ec8dd5dbce70dcf
    Pass sp<Fence>s around instead of file descriptors
    
    Change-Id: Iac70584a2207940730e8f803a543e4e9a4000c47
    Release virtual display buffer immediately after HWC set
    
    Previously we only queued a virtual display buffer to the sink when
    the next frame was about to be displayed. This may delay the "last"
    frame of an animation indefinitely. Now we queue the buffer as soon as
    HWC set() returns and gives us the release fence.
    
    Bug: 8384764
    Change-Id: I3844a188e0f6ef6ff28f3e11477cfa063a924b1a
    Add DisplaySurface abstraction
    
    DisplayDevice now has a DisplaySurface instead of using
    FramebufferSurface directly. FramebufferSurface implements
    DisplaySurface, and so does the new VirtualDisplaySurface class.
    DisplayDevice now always has a surface, not just for virtual displays.
    
    In this change VirtualDisplaySurface is just a stub; buffers still go
    directly from GLES to the final consumer.
    
    Bug: 8384764
    Change-Id: I57cb668edbc6c37bfebda90b9222d435bf589f37
    SurfaceFlinger: send VSYNC power hints to IPowerManager
    
    VSYNC power hints are now sent via binder to IPowerManager.
    SurfaceFlinger no longer loads a second copy of the PowerHAL.
    VSYNC power hints are sent in batches and not on per frame basis.
    
    Change-Id: Ia5a839ab3c857cffae7089f810b4315d4ed23fcf
    Revert "SurfaceFlinger: send VSYNC power hints to IPowerManager"
    
    This reverts commit d469a1c3285b974cf2637517cc25727da8f82668.
    SurfaceFlinger: send VSYNC power hints to IPowerManager
    
    VSYNC power hints are now sent via binder to IPowerManager.
    SurfaceFlinger no longer loads a second copy of the PowerHAL.
    VSYNC power hints are sent in batches and not on per frame basis.
    
    Change-Id: Icc2eee5df56135bd24dc244a84e7c12dd5511fec
    don't actuate vsync hint when not needed
    
    Change-Id: I61c43dd76041816ab8cbe9aeaa55c11c1479ed03
    set vsync power hint
    
    Change-Id: I28c2faf9ff584df3e74392712971cbcf75eb9e98
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Allow for resizing of Virtual Displays.
    
    Modify SurfaceFlinger to use VirtualDisplaySurface in all cases when a virtual
    display is used. Add functionality in VirtualDisplaySurface to resize the
    buffers aquired in the QueueBufferOutput. Add transaction support in
    SurfaceFlinger for resize. Add the modification of the size in DisplayDevice.
    
    Change-Id: Iae7e3556dc06fd18d470adbbd76f7255f6e6dd6b
    Tested: None
    BufferQueue: Add allocateBuffers method
    
    This adds an allocateBuffers method to BufferQueue, which instructs
    it to allocate up to the maximum number of buffers allowed by the
    current configuration. The goal is that this method can be called
    ahead of render time, which will prevent dequeueBuffers from blocking
    in allocation and inducing jank.
    
    This interface is also plumbed up to the native Surface (and, in
    another change, up to the Java Surface and ThreadedRenderer).
    
    Bug: 11792166
    Change-Id: I4aa96b4351ea1c95ed5db228ca3ef98303229c74
    Fix virtual display nesting
    
    This fixes the cycling rendering loop caused by nesting virtual
    displays by preventing them from recomposing if their contents
    haven't changed.
    
    (cherry-pick from master I600365c0fd5d3ad93e04295d26cf9de177ffc79b)
    
    Bug: 12101046
    Change-Id: I6182993d53537781aedb522f97a50f06eed8b80f
    BufferQueue: Increase max slots from 32 to 64
    
    Increases NUM_BUFFER_SLOTS from 32 to 64 and changes the mask
    returned by IGBC::getReleasedBuffers from 32 to 64 bits.
    
    Bug: 13174352
    Change-Id: Ie8ef0853916cfb91f83881c7241886bb1950f01a
    BufferQueueProducer: add detachNextBuffer
    
    Adds a new method, IGBP::detachNextBuffer, that effectively does
    dequeue + request + detach in a single call, but does not need to
    know anything about the dequeued buffer, and will not block on
    dequeue. This is mostly for the upcoming StreamSplitter to use in
    its onBufferReleased callback.
    
    Change-Id: Ie88a69de109003acebaa486a5b44c8a455726550
    BufferQueue: Add producer buffer-released callback
    
    Add a callback to the producer side, onBufferReleased, which will be
    called every time the consumer releases a buffer back to the
    BufferQueue. This will enable a buffer stream splitter to work
    autonomously without having to block on dequeueBuffer.
    
    The binder object used for the callback replaces the generic IBinder
    token that was passed into IGraphicBufferProducer::connect to detect
    the death of the producer. If a producer does not wish to listen for
    buffer release events, it can pass in an instance of the
    DummyProducerListener class defined in IProducerListener.h, if it even
    cares about death events (BufferQueue doesn't enforce the token being
    non-NULL, though perhaps we should).
    
    Change-Id: I23935760673524abeafea2b58dccc3583b368710
    Remove deprecated BufferQueue constructor
    
    Bug: 13415624
    Change-Id: I9fe15e45daa7351f1db34ee75bfee6f19cb347d3
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    BufferQueue: Allow detaching/reattaching buffers
    
    Adds detachBuffer and attachBuffer calls to both the producer and
    consumer sides of BufferQueue. Buffers may be detached while dequeued
    by the producer or acquired by the consumer, and when attached, enter
    the dequeued and acquired states, respectively.
    
    Bug: 13173343
    Change-Id: Ic152692b0a94d99e0135b9bfa62747dab2a54220
    Fix virtual display nesting
    
    This fixes the cycling rendering loop caused by nesting virtual
    displays by preventing them from recomposing if their contents
    haven't changed.
    
    Bug: 12101046
    Change-Id: I600365c0fd5d3ad93e04295d26cf9de177ffc79b
    Don't use implementation-defined format with CPU consumers
    
    If the virtual display surface is being consumed by the CPU, it can't
    be allowed with HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED since there is
    no way for the CPU consumer to find out what format gralloc chose. So
    for CPU-consumer surfaces, just use the BufferQueue's default format,
    which can be set by the consumer.
    
    A better but more invasive change would be to let the consumer require
    a certain format (or set of formats?), and disallow the producer from
    requesting a different format.
    
    Bug: 11479817
    Change-Id: I5b20ee6ac1146550e8799b806e14661d279670c0
    Use implementation-defined format when HWC writes to output buffer
    
    When GLES isn't writing to the output buffer directly, request an
    implementation-defined format with minimal usage flags, leaving the
    format choice up to gralloc. On some hardware this allows HWC to do
    format conversions during composition that would otherwise need to be
    done (with worse power and/or performance) by the consumer.
    
    Bug: 8316155
    Change-Id: Iee6ee8404282036f9fd1833067cfe11dbadbf0bf
    Make sure do disconnect from a BQ when its client dies.
    
    Bug: 5679534
    
    Change-Id: If447e8673df83fe0b1d6210641e0a48522501a53
    Force async behavior for the virtual display output BufferQueue
    
    Bug: 10551087
    Change-Id: I40bbb2b87d64420939a0ea309254f281437dab56
    Provide HWC prepare with a valid output buffer
    
    We weren't dequeing and setting the output buffer until just before
    set(). This didn't allow HWC to make decisions in prepare() based on
    the output buffer format, dimensions, etc.
    
    Now we dequeue the output buffer at the beginning of the composition
    loop and provide it to HWC in prepare. In GLES-only rendering, we may
    have to cancel the buffer and acquire a new one if GLES requests a
    buffer with properties different than the one we already dequeued.
    
    Bug: 10365313
    Change-Id: I96b4b0a851920e4334ef05080d58097d46467ab8
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    Make ANW.setSwapInterval(0) work again
    
    we can now queue/dequeue a buffer in asynchrnous mode by using the
    async parameter to these calls. async mode is only specified
    with those calls (it is not modal anymore).
    
    as a consequence it can only be specified when the buffer count
    is not overidden, as error is returned otherwise.
    
    Change-Id: Ic63f4f96f671cb9d65c4cecbcc192615e09a8b6b
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    Rewrite VirtualDisplaySurface
    
    The previous implementation assumed that the HWC could read and write
    the same buffer on frames that involved both GLES and HWC composition.
    It turns out some hardware can't do this. The new implementation
    maintains a scratch buffer pool to use on these mixed frames, but on
    GLES-only or HWC-only frames still does composition directly into the
    output buffer.
    
    Bug: 8384764
    Change-Id: I7a3addb34fad9bfcbdabbb8b635083e10223df69
    Remove experimental HWC virtual display support
    
    Bug: 8384764
    Change-Id: I97b52ed83ad85466bd91cb9291308994048568a1
    Fix virtual displays for HWC<=1.1
    
    If we're using a HWC that doesn't support virtual displays, or we have
    more virtual displays than HWC supports concurrently, the
    VirtualDisplaySurface should simply be a passthrough from source
    (GLES) to sink.
    
    This change also tries to distinguish between display types and HWC
    display IDs a little better, though there's more to do here. Probably
    needs a higher-level rethink; it's too error-prone now.
    
    Bug: 8446838
    Change-Id: I708d2cf262ec30177042304f174ca5b8da701df1
    Isolate knowledge that fb target == output buffer
    
    HWComposer didn't allow the virtual display output buffer to be set
    directly, instead it always used the framebuffer target buffer.
    DisplayDevice was only providing the framebuffer release fence to
    DisplaySurfaces after a commit.
    
    This change fixes both of these, so both HWComposer and DisplayDevice
    should continue to work if VirtualDisplaySurface changes to use
    separate framebuffer and output buffers. It's also more correct since
    VirtualDisplaySurface uses the correct release fence when queueing the
    buffer to the sink.
    
    Bug: 8384764
    Change-Id: I95c71e8d4f67705e23f122259ec8dd5dbce70dcf
    Pass sp<Fence>s around instead of file descriptors
    
    Change-Id: Iac70584a2207940730e8f803a543e4e9a4000c47
    Release virtual display buffer immediately after HWC set
    
    Previously we only queued a virtual display buffer to the sink when
    the next frame was about to be displayed. This may delay the "last"
    frame of an animation indefinitely. Now we queue the buffer as soon as
    HWC set() returns and gives us the release fence.
    
    Bug: 8384764
    Change-Id: I3844a188e0f6ef6ff28f3e11477cfa063a924b1a
    Add BufferQueueInterposer and use it for virtual displays
    
    BufferQueueInterposer allows a client to tap into a
    IGraphicBufferProducer-based buffer queue, and modify buffers as they
    pass from producer to consumer. VirtualDisplaySurface uses this to
    layer HWC composition on top of GLES composition before passing the
    buffer to the virtual display consumer.
    
    Bug: 8384764
    Change-Id: I61ae54f3d90de6a35f4f02bb5e64e7cc88e1cb83
    Add DisplaySurface abstraction
    
    DisplayDevice now has a DisplaySurface instead of using
    FramebufferSurface directly. FramebufferSurface implements
    DisplaySurface, and so does the new VirtualDisplaySurface class.
    DisplayDevice now always has a surface, not just for virtual displays.
    
    In this change VirtualDisplaySurface is just a stub; buffers still go
    directly from GLES to the final consumer.
    
    Bug: 8384764
    Change-Id: I57cb668edbc6c37bfebda90b9222d435bf589f37
    Allow for resizing of Virtual Displays.
    
    Modify SurfaceFlinger to use VirtualDisplaySurface in all cases when a virtual
    display is used. Add functionality in VirtualDisplaySurface to resize the
    buffers aquired in the QueueBufferOutput. Add transaction support in
    SurfaceFlinger for resize. Add the modification of the size in DisplayDevice.
    
    Change-Id: Iae7e3556dc06fd18d470adbbd76f7255f6e6dd6b
    Tested: None
    Fix virtual display nesting
    
    This fixes the cycling rendering loop caused by nesting virtual
    displays by preventing them from recomposing if their contents
    haven't changed.
    
    (cherry-pick from master I600365c0fd5d3ad93e04295d26cf9de177ffc79b)
    
    Bug: 12101046
    Change-Id: I6182993d53537781aedb522f97a50f06eed8b80f
    Fix virtual display nesting
    
    This fixes the cycling rendering loop caused by nesting virtual
    displays by preventing them from recomposing if their contents
    haven't changed.
    
    Bug: 12101046
    Change-Id: I600365c0fd5d3ad93e04295d26cf9de177ffc79b
    Provide HWC prepare with a valid output buffer
    
    We weren't dequeing and setting the output buffer until just before
    set(). This didn't allow HWC to make decisions in prepare() based on
    the output buffer format, dimensions, etc.
    
    Now we dequeue the output buffer at the beginning of the composition
    loop and provide it to HWC in prepare. In GLES-only rendering, we may
    have to cancel the buffer and acquire a new one if GLES requests a
    buffer with properties different than the one we already dequeued.
    
    Bug: 10365313
    Change-Id: I96b4b0a851920e4334ef05080d58097d46467ab8
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    Rewrite VirtualDisplaySurface
    
    The previous implementation assumed that the HWC could read and write
    the same buffer on frames that involved both GLES and HWC composition.
    It turns out some hardware can't do this. The new implementation
    maintains a scratch buffer pool to use on these mixed frames, but on
    GLES-only or HWC-only frames still does composition directly into the
    output buffer.
    
    Bug: 8384764
    Change-Id: I7a3addb34fad9bfcbdabbb8b635083e10223df69
    clean-up/simplify all dump() APIs
    
    remove the scratch buffer parameter and use
    String8::appendFormat() instead.
    
    Change-Id: Ib96c91617c8e7292de87433d15cf6232b7d591b0
    Isolate knowledge that fb target == output buffer
    
    HWComposer didn't allow the virtual display output buffer to be set
    directly, instead it always used the framebuffer target buffer.
    DisplayDevice was only providing the framebuffer release fence to
    DisplaySurfaces after a commit.
    
    This change fixes both of these, so both HWComposer and DisplayDevice
    should continue to work if VirtualDisplaySurface changes to use
    separate framebuffer and output buffers. It's also more correct since
    VirtualDisplaySurface uses the correct release fence when queueing the
    buffer to the sink.
    
    Bug: 8384764
    Change-Id: I95c71e8d4f67705e23f122259ec8dd5dbce70dcf
    Pass sp<Fence>s around instead of file descriptors
    
    Change-Id: Iac70584a2207940730e8f803a543e4e9a4000c47
    Release virtual display buffer immediately after HWC set
    
    Previously we only queued a virtual display buffer to the sink when
    the next frame was about to be displayed. This may delay the "last"
    frame of an animation indefinitely. Now we queue the buffer as soon as
    HWC set() returns and gives us the release fence.
    
    Bug: 8384764
    Change-Id: I3844a188e0f6ef6ff28f3e11477cfa063a924b1a
    Add DisplaySurface abstraction
    
    DisplayDevice now has a DisplaySurface instead of using
    FramebufferSurface directly. FramebufferSurface implements
    DisplaySurface, and so does the new VirtualDisplaySurface class.
    DisplayDevice now always has a surface, not just for virtual displays.
    
    In this change VirtualDisplaySurface is just a stub; buffers still go
    directly from GLES to the final consumer.
    
    Bug: 8384764
    Change-Id: I57cb668edbc6c37bfebda90b9222d435bf589f37
    Minor cleanups/fixes before virtual display refactoring
    
    None of these should change behavior, except for removing some
    incorrect log messages when using a virtual display.
    
    - HWComposer::getAndResetReleaseFenceFd() checks the HWC version, so
      no need to do that in the DisplayDevice::onSwapBuffersCompleted().
      However, it should check that mFramebufferSurface is not NULL like
      it is for virtual displays.
    - Comment that FramebufferSurface::dump() overrides the non-virtual
      ConsumerBase::dump(), and fix it so the right thing happens
      regardless of the static type of the pointer/reference the callee
      has. FramebufferSurface::dump() could be removed right now, but I'd
      need to bring it back in a later change.
    - Use the right enum for validating display type ids.
    - Don't try to send hotplug events for virtual displays.
    - Mark virtual displays as connected so HWComposer::prepare() doesn't
      think something is wrong when it gets a non-NULL layer list.
    - Remove unused FramebufferSurface methods.
    
    Bug: 8384764
    Change-Id: Id28a2f9be86b45f4bb7915fdf7752157035f4294
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    SurfaceFlinger: make the num FBs a board config
    
    Bug: 7283132
    Change-Id: I38116f39fc18212f2daab94bbfc3daaf89439fc4
    we now correctly set-up connected screens during boot
    
    Change-Id: Ie8b1a3b97ad1821cc970e43abe96c8cec7135b66
    add support hwc 1.1
    
    Bug: 7124069
    
    Change-Id: I53d705105c4ad8954d3f50ee4f4c8b7ec936b871
    Reshuffle FramebufferSurface
    
    FramebufferSurface no longer speaks directly to the FB HAL.  Now
    everything goes through HWComposer (which may or may not be
    connected to a hardware composer).
    
    Added display index arg to some query methods.
    
    Change-Id: Id3e157d2d4e3555d33afbb703e518b6e92e2d6d5
    xdpi / ydpi were reported as 0
    
    Bug: 6975723
    Change-Id: Ia7fa37ec11e2308804f5034959a37e508d292d31
    surfaceflinger: refactor FrambufferSurface
    
    This change refactors the FramebufferSurface class to inherit from the new
    ConsumerBase class.
    
    Bug: 6620200
    Change-Id: I46ec942ddb019658e3c5e79465548b171b2261f2
    factor EGL/GL and surface creation out of DisplayHardware
    
    Change-Id: Icd85a6a4caad06f056578008af3e21666fa8b1f4
    Implement SurfaceFlinger's ANW on top of BufferQueue
    
    SF now has its own implementation of ANW for the
    framebuffer and it uses BufferQueue. FramebufferNativeWindow
    is now only used by stand-alone apps.
    
    Change-Id: Iddeb24087df62bd92b0f78e391dda9b97ddc859c
    remove dependency on android_native{s_priv|buffer}.h
    
    Change-Id: Ie4b95f7061c240f37c504414259f92d72c4ffc89
    frameworks/base: android_native_buffer_t -> ANativeWindowBuffer
    
    Change-Id: Idc2eabaa805bb6d308ebb315872623f28d428417
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    frameworks/base: make the ANativeWindow query() method const
    
    query() does not modify the object's data, so it needs to be a const method
    
    Change-Id: I67c40a3c865461e6f1cc2193fd2d74286ff6ac8f
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    surfaceflinger: add support for gralloc dump hooks
    
    Change-Id: Ib6f539ed0132b70d040d653c03d52cc04249ac3c
    Framebuffer: Support variable number of framebuffers in the UI
    
    This change defines a macro NUM_FRAME_BUFFERS to set
    the desired number of framebuffers to be used by the UI,
    instead of hard-coding 2 framebuffers.
    
    Aditional logic has been  added to handle the initialization
    and destruction of NUM_FRAME_BUFFERS buffers.
    
    Change-Id: I3a4bfec3e0f453432f2ffebf084c00f574d3be46
    Signed-off-by: Rodrigo Obregon <robregon@ti.com>
    Add logging of various important graphics events
    
    There are 16 events logged in the event log:
    SF_APP_DEQUEUE_BEFORE
    SF_APP_DEQUEUE_AFTER
    SF_APP_LOCK_BEFORE
    SF_APP_LOCK_AFTER
    SF_APP_QUEUE
    
    SF_REPAINT
    SF_COMPOSITION_COMPLETE
    SF_UNLOCK_CLIENTS
    SF_SWAP_BUFFERS
    SF_REPAINT_DONE
    
    SF_FB_POST_BEFORE
    SF_FB_POST_AFTER
    SF_FB_DEQUEUE_BEFORE
    SF_FB_DEQUEUE_AFTER
    SF_FB_LOCK_BEFORE
    SF_FB_LOCK_AFTER
    
    all events log the buffer conserned and a timestamp in microseconds.
    
    by default the logging is not enabled, to turn it on:
    adb shell service call SurfaceFlinger 1006 i31 1
    adb shell setprop debug.graphic_log 1
    
    The effect is immediate in SurfaceFlinger, but applications need to be
    restarted.
    
    Change-Id: Ifc2e31f7aed072d9a7dede20ff2ce59231edbec1
    Introduce official public NativeWindow type.
    
    Not yet hooked up to anything in the NDK, but requires renaming
    the existing android_native_window_t type everywhere.
    
    Change-Id: Iffee6ea39c93b8b34e20fb69e4d2c7c837e5ea2e
    eclair snapshot
    Android side of the fix for [2121211] Sholes has stutter during animations
    
    a new method, compostionComplete() is added to the framebuffer hal, it is used by surfaceflinger to signal the driver that the composition is complete, BEFORE it releases its client. This gives a chance to the driver to
    second take, hopefully this time it doesn't break one of the builds: "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    Revert "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    
    This reverts commit 8b76a0ac6fbf07254629ed1ea86af014d5abe050.
    SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything.
    
    This change makes SurfaceHolder.setType(GPU) obsolete (it's now ignored).
    Added an API to android_native_window_t to allow extending the functionality without ever breaking binary compatibility. This is used to implement the new set_usage() API. This API needs to be called by software renderers because the default is to use usage flags suitable for h/w.
    fixed some issues with the software renderer when surfaces are made current.
    
    there was several issues:
    - when a surface was made non-current, the last frame wasn't shown and the buffer could stay locked
    - when a surface was made current the 2nd time, it would not dequeue a new buffer
    
    now, queue/dequeue are done when the surface is made current.
    
    for this to work, a new query() hook had to be added on android_native_window_t, it allows to retrieve some attributes of a window (currently only width and height).
    make use of new eglGetRenderBufferANDROID extension to clean-up a bit a few hacks added recently
    hack copybit back in for video playback on msm7k. we have h/w accelerated video again
    add support for update-on-demand in SurfaceFlinger
    move opengl/include/EGL/android_natives.h to include/ui/egl/android_natives.h and don't include it from egl.h
    
    the android_native_ types are just forward declared in egl.h
    get rid of android_native_buffer_t::getHandle() and replace it with an handle field
    
    this abstraction was not necessary. things are easier now.
    minor clean-up in FramebufferNativeWindow
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Initial Contribution
    Fix virtual display nesting
    
    This fixes the cycling rendering loop caused by nesting virtual
    displays by preventing them from recomposing if their contents
    haven't changed.
    
    (cherry-pick from master I600365c0fd5d3ad93e04295d26cf9de177ffc79b)
    
    Bug: 12101046
    Change-Id: I6182993d53537781aedb522f97a50f06eed8b80f
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    Fix virtual display nesting
    
    This fixes the cycling rendering loop caused by nesting virtual
    displays by preventing them from recomposing if their contents
    haven't changed.
    
    Bug: 12101046
    Change-Id: I600365c0fd5d3ad93e04295d26cf9de177ffc79b
    Provide HWC prepare with a valid output buffer
    
    We weren't dequeing and setting the output buffer until just before
    set(). This didn't allow HWC to make decisions in prepare() based on
    the output buffer format, dimensions, etc.
    
    Now we dequeue the output buffer at the beginning of the composition
    loop and provide it to HWC in prepare. In GLES-only rendering, we may
    have to cancel the buffer and acquire a new one if GLES requests a
    buffer with properties different than the one we already dequeued.
    
    Bug: 10365313
    Change-Id: I96b4b0a851920e4334ef05080d58097d46467ab8
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    single buffer mode for BufferQueue
    
    Bug: 9891035
    Change-Id: Id1ab5f911a6dc4c1d8235e65775b3d3635231ad4
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    Rewrite VirtualDisplaySurface
    
    The previous implementation assumed that the HWC could read and write
    the same buffer on frames that involved both GLES and HWC composition.
    It turns out some hardware can't do this. The new implementation
    maintains a scratch buffer pool to use on these mixed frames, but on
    GLES-only or HWC-only frames still does composition directly into the
    output buffer.
    
    Bug: 8384764
    Change-Id: I7a3addb34fad9bfcbdabbb8b635083e10223df69
    Pay attention to buffer timestamps
    
    When acquiring a buffer, SurfaceFlinger now computes the expected
    presentation time and passes it to the BufferQueue acquireBuffer()
    method.  If it's not yet time to display the buffer, acquireBuffer()
    returns PRESENT_LATER instead of a buffer.
    
    The current implementation of the expected-present-time computation
    uses approximations and guesswork.
    
    Bug 7900302
    
    Change-Id: If9345611c5983a11a811935aaf27d6388a5036f1
    BufferQueue: track buffer-queue by instance vs. by reference
    
    Instead of representing the buffer-queue as a vector of buffer
    indices, represent them as a vector of BufferItems (copies).
    This allows modifying the buffer slots independent of the queued
    buffers.
    
    As part of this change, BufferSlot properties that are only
    been relevant in the buffer-queue have been removed.
    
    Also, invalid scalingMode in queueBuffer now returns an error.
    
    ConsumerBase has also changed to allow reuse of the same
    buffer slots by different buffers.
    
    Change-Id: If2a698fa142b67c69ad41b8eaca6e127eb3ef75b
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Related-to-bug: 7093648
    clean-up/simplify all dump() APIs
    
    remove the scratch buffer parameter and use
    String8::appendFormat() instead.
    
    Change-Id: Ib96c91617c8e7292de87433d15cf6232b7d591b0
    Fix include paths
    
    Change-Id: If5350a3de995cc0cb1afea067e7ce168bc00d3f5
    Isolate knowledge that fb target == output buffer
    
    HWComposer didn't allow the virtual display output buffer to be set
    directly, instead it always used the framebuffer target buffer.
    DisplayDevice was only providing the framebuffer release fence to
    DisplaySurfaces after a commit.
    
    This change fixes both of these, so both HWComposer and DisplayDevice
    should continue to work if VirtualDisplaySurface changes to use
    separate framebuffer and output buffers. It's also more correct since
    VirtualDisplaySurface uses the correct release fence when queueing the
    buffer to the sink.
    
    Bug: 8384764
    Change-Id: I95c71e8d4f67705e23f122259ec8dd5dbce70dcf
    Pass sp<Fence>s around instead of file descriptors
    
    Change-Id: Iac70584a2207940730e8f803a543e4e9a4000c47
    Release virtual display buffer immediately after HWC set
    
    Previously we only queued a virtual display buffer to the sink when
    the next frame was about to be displayed. This may delay the "last"
    frame of an animation indefinitely. Now we queue the buffer as soon as
    HWC set() returns and gives us the release fence.
    
    Bug: 8384764
    Change-Id: I3844a188e0f6ef6ff28f3e11477cfa063a924b1a
    Add DisplaySurface abstraction
    
    DisplayDevice now has a DisplaySurface instead of using
    FramebufferSurface directly. FramebufferSurface implements
    DisplaySurface, and so does the new VirtualDisplaySurface class.
    DisplayDevice now always has a surface, not just for virtual displays.
    
    In this change VirtualDisplaySurface is just a stub; buffers still go
    directly from GLES to the final consumer.
    
    Bug: 8384764
    Change-Id: I57cb668edbc6c37bfebda90b9222d435bf589f37
    Minor cleanups/fixes before virtual display refactoring
    
    None of these should change behavior, except for removing some
    incorrect log messages when using a virtual display.
    
    - HWComposer::getAndResetReleaseFenceFd() checks the HWC version, so
      no need to do that in the DisplayDevice::onSwapBuffersCompleted().
      However, it should check that mFramebufferSurface is not NULL like
      it is for virtual displays.
    - Comment that FramebufferSurface::dump() overrides the non-virtual
      ConsumerBase::dump(), and fix it so the right thing happens
      regardless of the static type of the pointer/reference the callee
      has. FramebufferSurface::dump() could be removed right now, but I'd
      need to bring it back in a later change.
    - Use the right enum for validating display type ids.
    - Don't try to send hotplug events for virtual displays.
    - Mark virtual displays as connected so HWComposer::prepare() doesn't
      think something is wrong when it gets a non-NULL layer list.
    - Remove unused FramebufferSurface methods.
    
    Bug: 8384764
    Change-Id: Id28a2f9be86b45f4bb7915fdf7752157035f4294
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: Ibed34175ae273608393aaa5f0a7df207dc40d709
    SurfaceFlinger: Move GraphicBufferAlloc to libgui
    
    This change moves the GraphicBufferAlloc class from SurfaceFlinger to libgui.
    
    Change-Id: Idf31d2004efa2651b60590733f73c4a7b831e8a9
    SurfaceFlinger: make the num FBs a board config
    
    Bug: 7283132
    Change-Id: I38116f39fc18212f2daab94bbfc3daaf89439fc4
    we now correctly set-up connected screens during boot
    
    Change-Id: Ie8b1a3b97ad1821cc970e43abe96c8cec7135b66
    GraphicBufferAlloc class was declared twice
    
    this was confusing because the one in FramebufferSurface
    wasn't in fact being used
    
    Change-Id: Ied45aec20d804cfbe52440f9b2f2852a85c757cf
    add support hwc 1.1
    
    Bug: 7124069
    
    Change-Id: I53d705105c4ad8954d3f50ee4f4c8b7ec936b871
    Initialize new HWC 1.2 fields
    
    Also rename resolution* to width/height.
    
    Change-Id: Ia5f0c50d3f0a349160f314a3257c3b985e13ef1d
    Reshuffle FramebufferSurface
    
    FramebufferSurface no longer speaks directly to the FB HAL.  Now
    everything goes through HWComposer (which may or may not be
    connected to a hardware composer).
    
    Added display index arg to some query methods.
    
    Change-Id: Id3e157d2d4e3555d33afbb703e518b6e92e2d6d5
    libgui: move fence handling into ConsumerBase
    
    This change moves some common fence handling code into the base class for
    BufferQueue consumer classes.  It also makes the ConsumerBase class initialize
    a buffer slot's fence with the acquire fence every time a buffer is acquired.
    
    Change-Id: I0bd88bc269e919653b659bfb3ebfb04dd61692a0
    BufferQueue: use max acquired buffer count
    
    This change makes BufferQueue derive the min undequeued buffer count from a max
    acquired buffer count that is set by the consumer.  This value may be set at
    any time that a producer is not connected to the BufferQueue rather than at
    BufferQueue construction time.
    
    Change-Id: Icf9f1d91ec612a079968ba0a4621deffe48f4e22
    BufferQueue: clean up buffer counting
    
    This change is a clean up of some of the handling of the maximum number of
    buffers that are allowed at once.  It mostly renames a few member variables and
    methods, but it includes a couple small refactorings.
    
    Change-Id: I9959310f563d09583548d4291e1050a7bbc7d87d
    xdpi / ydpi were reported as 0
    
    Bug: 6975723
    Change-Id: Ia7fa37ec11e2308804f5034959a37e508d292d31
    surfaceflinger: refactor FrambufferSurface
    
    This change refactors the FramebufferSurface class to inherit from the new
    ConsumerBase class.
    
    Bug: 6620200
    Change-Id: I46ec942ddb019658e3c5e79465548b171b2261f2
    factor EGL/GL and surface creation out of DisplayHardware
    
    Change-Id: Icd85a6a4caad06f056578008af3e21666fa8b1f4
    Return fence from acquireBuffer
    
    Change-Id: Iab22054c1dc4fd84affab3cc5bbdcd5a1e689666
    Transfer HWC release fences to BufferQueue
    
    After a HWC set, each SurfaceFlinger Layer retrieves the release fence
    HWC returned and gives it to the layer's SurfaceTexture. The
    SurfaceTexture accumulates the fences into a merged fence until the
    next updateTexImage, then passes the merged fence to the BufferQueue
    in releaseBuffer.
    
    In a follow-on change, BufferQueue will return the fence along with
    the buffer slot in dequeueBuffer. For now, dequeueBuffer waits for the
    fence to signal before returning.
    
    The releaseFence default value for BufferQueue::releaseBuffer() is
    temporary to avoid transient build breaks with a multi-project
    checkin. It'll disappear in the next change.
    
    Change-Id: Iaa9a0d5775235585d9cbf453d3a64623d08013d9
    Implement SurfaceFlinger's ANW on top of BufferQueue
    
    SF now has its own implementation of ANW for the
    framebuffer and it uses BufferQueue. FramebufferNativeWindow
    is now only used by stand-alone apps.
    
    Change-Id: Iddeb24087df62bd92b0f78e391dda9b97ddc859c
    surfaceflinger: Use landscape resolution for default dpi
    
    When HWC doesn't provide DPI values for a display, we pick a default
    DPI based on resolution. The intent was that 1080p and higher displays
    would get XHIGH density, and lower resolutions would get TV density.
    In KK (and possibly forever) we had a bug that we'd always use TV
    density. That was fixed in L, but that fix exposed a pre-existing bug
    that we always used the display's height in its native orientation,
    rather than in landscape orientation. So an 800x1280 tablet like N7v1
    started getting XHIGH density instead of the intended TV density.
    
    Bug: 17461633
    Change-Id: Ia57fa49e61f36bdda63ce283ef62c9953297222c
    surfaceflinger: Trace HW vsync enable
    
    This makes it possible to tell whether two HW vsync signals are too
    far apart because one was late, or because we turned HW vsync off
    briefly between them.
    
    Bug: 17259382
    Change-Id: If4fba2a8a6013568349949ce87c5c36f0468d2a2
    Update currentConfig variable when active display is changed.
    
    Bug: 17182607
    Change-Id: I8631c105a9e0fa402a7d9670717becc9857af935
    sf: Clear display configs when hot pluggable display is disconnected
    
    Display configs for external displays are stored in the framework
    everytime we receive a hot plug to connect. However, since the
    configs are not cleared on disconnect, framework will just assume
    that the configs are valid. This does not work for use cases when
    you connect/disconnect external displays with different resolutions.
    
    e.g. 1080p to 4K and vice-versa
    
    With this change we clear the display configs and repopulate when
    we receive a hot plug to connect.
    
    Change-Id: I2eeab186a8d8668a53390a2413b2ce5e044a1845
    Acked-by: Tatenda Chipeperekwa <tatendac@codeaurora.org>
    Change output format to not throw warning on volantis.
    
    Change-Id: Id66eb61bdb1ceccfb7aefa0aa70793dac807c257
    Build fix for printf with int64 and size_t
    
    Change-Id: I642584cce7dd43e6d491a49228b0bce047d53354
    Modified SurfaceFlinger to implment setActiveConfig and getActiveConfig.
    
    This can be used to change the current display mode of the device.
    
    Change-Id: Icdc3fb58389b861dc77b68102083da6f7a96eccb
    Tested: None
    (cherry picked from commit 2651fa94635a96d653038fb389a0dd827338f8d3)
    Turn on support for async cursor update in surfaceflinger.
    
    If available, surfaceflinger will use the hwc setCursorPositionAsync()
    api to change the position of supported cursor layers outside of
    the usual prepare/set loop.
    
    Change-Id: Ib3fc5c0c390b3489ddbba202379840a1d2748917
    surfaceflinger: Replace blank/unblank with setPowerMode
    
    We replace the blank/unblank calls in surfaceFlinger with a more generic
    setPowerMode() routine.
    
    Some displays support different power modes (for example, with reduced
    color palettes). Depending on the use case we should be able to toggle
    these modes, so as to achieve incremental power savings.
    
    Initially, three power modes will be supported:
    - HWC_POWER_MODE_OFF
    - HWC_POWER_MODE_DOZE
    - HWC_POWER_MODE_NORMAL
    
    HWC_POWER_MODE_OFF will correspond to blanking the display, while
    HWC_POWER_MODE_NORMAL will correspond to unblanking. HWC_POWER_MODE_DOZE
    will put the display into a low power setting, if it is supported in
    hardware.
    
    If such a low power mode is not supported, it should be treated as a
    call to set the mode to HWC_POWER_MODE_NORMAL.
    
    As a consequence of adding the mPowerMode field, the mScreenAcquired is
    no longer required, and thus references to it are removed and replaced
    equivalent references to mPowerMode.
    
    We also add the glue code to connect the services invocation of setting
    a power mode and the HAL implementation in HWComposer.
    
    Bug: 13472578
    Change-Id: I431595ecf16d2f2c94259272db3dd42f29636204
    Signed-off-by: Prashant Malani <pmalani@google.com>
    Add IMPLEMENTATION_DEFINED to dump
    
    The "dumpsys SurfaceFlinger" output shows pixel formats in
    human-readable form now.  Add IMPLEMENTATION_DEFINED.
    
    Change-Id: If567e34dad4b940fbfb4d0b70c65f6ab8cd5f5e7
    Enable changing display configuration
    
    This allows querying and switching display device configurations
    through the ISurfaceComposer/SurfaceComposerClient interface.
    
    Bug: 14320401
    Change-Id: I8c22165698950e5da32204c1c4da92122f91a715
    Improve SurfaceFlinger PTS estimation
    
    Get the next refresh time from DispSync instead of guessing based
    on the current time.
    
    Change-Id: I8dc72a3217bfd4e9b4c905034194d1a298cad69a
    Update HWC dump format
    
    Shortens a few fields.  Displays the format as a string.
    
    Change-Id: Ib471f05603763e250bad165db610f8e173e8423a
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    Implement per-display EGLConfig and configless EGLContext
    
    Bug: 12230666
    Change-Id: Icca608b108cbdcab9cf01a9236d8cdbda000a836
    Signed-off-by: Jesse Hall <jessehall@google.com>
    Provide virtual display output buffer to HWC in prepare
    
    We were already making sure the HWComposer class had the handle before
    prepare, but it wasn't passing the handle along to HWC as intended.
    
    Partial fix for bug: 11430248
    Change-Id: I25f672c4fdfaa6a81fe0acb24d9ad05153ee17dc
    Filter out vsync events from HWC with duplicate timestamps
    
    Bug: 11220224
    Change-Id: I4efe0b66ea8969bf0ec3c4fcb325d354c8a0c315
    SurfaceFlinger: SW-based vsync events
    
    This change adds the DispSync class, which models the hardware vsync event
    times to allow vsync event callbacks to be done at an arbitrary phase offset
    from the hardware vsync.  This can be used to reduce the minimum latency from
    Choreographer wake-up to on-screen image presentation.
    
    Bug: 10624956
    Change-Id: I8c7a54ceacaa4d709726ed97b0dcae4093a7bdcf
    Treat composition frames with no layers as using GLES composition
    
    When there are no window layers for a display, SurfaceFlinger clears
    the undefined region using GLES. Some of the places that check for
    GLES composition weren't considering this special case, in particular:
    
    - We were skipping the eglSwapBuffers() on these frames.
    - We were putting VirtualDisplaySurface in HWC-only composition mode.
    
    This change centralizes the logic for this special case.
    
    Bug: 10957068
    Change-Id: I2deaf2ed101e8ea76708862a6bb67751b6078794
    Treat composition frames with no layers as using GLES composition
    
    When there are no window layers for a display, SurfaceFlinger clears
    the undefined region using GLES. Some of the places that check for
    GLES composition weren't considering this special case, in particular:
    
    - We were skipping the eglSwapBuffers() on these frames.
    - We were putting VirtualDisplaySurface in HWC-only composition mode.
    
    This change centralizes the logic for this special case.
    
    Bug: 10957068
    Change-Id: I2deaf2ed101e8ea76708862a6bb67751b6078794
    fix initialization of framebuffer target crop rect on hwc 1.3
    
    Bug: 10936771
    Change-Id: If283e5e231ca34b93e0b1784bb4e8e4c7bfd75de
    Remove unnecessary include.
    
    All these files are including utils/CallStack.h, but none of the code
    uses any CallStack objects.
    
    Change-Id: I38c3a346a3bd0ddbff368d0f7f8b3f3d78fc0432
    handle several vsync signal correctly
    
    Change-Id: I34935d2197ce8e914fef2f110896e47b44225ad2
    Fix HWComposer dumping of float source crops
    
    Change-Id: I45a9344b5fab17ccb54bebd01382d738a03860e6
    Use new HWC display type/count constants.
    
    Change-Id: I774d0c68906ac6dc69268f708c30a6b0868b8816
    Rewrite VirtualDisplaySurface
    
    The previous implementation assumed that the HWC could read and write
    the same buffer on frames that involved both GLES and HWC composition.
    It turns out some hardware can't do this. The new implementation
    maintains a scratch buffer pool to use on these mixed frames, but on
    GLES-only or HWC-only frames still does composition directly into the
    output buffer.
    
    Bug: 8384764
    Change-Id: I7a3addb34fad9bfcbdabbb8b635083e10223df69
    fix SF buffer cropping
    
    When a buffer had a crop (meaning its content is scaled to the window size)
    and a window crop was defined, the resulting crop couldn't be expressed
    properly because h/w composer's API was limited to integers, since
    this is fixed in h/w composer 1.3, we take adventage of this to
    make sure we get the correct crop.
    
    this bug could result in the buffer being scaled by an incorrect ratio and
    be slightly offset; moreover, it would produce different results from the
    GL code path, which is always correct.
    
    Change-Id: I8e20e00b6e26177d14f4ab4d2cd581e26c818892
    make the warning timout of Fence::waitForever() implicit and longer
    
    - timeout is now 3 seconds instead of 1
    - simplifies the API a bit
    - allows us to change/tweak this timeout globaly
    
    Bug: 8988871
    
    Change-Id: I8d3c6ec43a372f602fb3f29856710339f86c0ec9
    Remove experimental HWC virtual display support
    
    Bug: 8384764
    Change-Id: I97b52ed83ad85466bd91cb9291308994048568a1
    clean-up/simplify all dump() APIs
    
    remove the scratch buffer parameter and use
    String8::appendFormat() instead.
    
    Change-Id: Ib96c91617c8e7292de87433d15cf6232b7d591b0
    Tell HWComposer the dimensions of virtual displays
    
    HWComposer queries the HWC for dimensions of physical displays, but
    can't do that for virtual displays. The dimensions are used to set the
    display frame of the framebuffer target layer passed to HWC, and
    implicitly the dimensions of the virtual display.
    
    Bug: 8316155
    Change-Id: I9cbd2530d2fa878f86128a1472def520b5d694a5
    Fix include paths
    
    Change-Id: If5350a3de995cc0cb1afea067e7ce168bc00d3f5
    Clean up HWC state when releasing a DisplayDevice
    
    DisplayDevices can be released when DisplayManager removes them from
    the display list, or (for virtual displays) when the surface is set to
    NULL. We were only cleaning up HWC resources associated with the
    display in the first case.
    
    Bug: 8384764
    Change-Id: Id3d226dd7178fbe6d0a2ac4e2660b864ee073de3
    Isolate knowledge that fb target == output buffer
    
    HWComposer didn't allow the virtual display output buffer to be set
    directly, instead it always used the framebuffer target buffer.
    DisplayDevice was only providing the framebuffer release fence to
    DisplaySurfaces after a commit.
    
    This change fixes both of these, so both HWComposer and DisplayDevice
    should continue to work if VirtualDisplaySurface changes to use
    separate framebuffer and output buffers. It's also more correct since
    VirtualDisplaySurface uses the correct release fence when queueing the
    buffer to the sink.
    
    Bug: 8384764
    Change-Id: I95c71e8d4f67705e23f122259ec8dd5dbce70dcf
    Use descriptive aliases instead of HWC_NUM_DISPLAY_TYPES
    
    Bug: 8384764
    Change-Id: Ia2563fab19dbc6e4a95bed03445e609334841cca
    Pass sp<Fence>s around instead of file descriptors
    
    Change-Id: Iac70584a2207940730e8f803a543e4e9a4000c47
    initialize planeAlpha (to 0xFF) for the FB_TARGET
    
    Bug: 8422625
    Change-Id: I7b72456c2e01ed92e675cc1bfa0cfd0d2ce5064e
    Don't log an error on HWC1.1+ devices with no FB HAL
    
    Change-Id: I015e5a1a1f926181e51f82525f69beff71bd70cd
    Add BufferQueueInterposer and use it for virtual displays
    
    BufferQueueInterposer allows a client to tap into a
    IGraphicBufferProducer-based buffer queue, and modify buffers as they
    pass from producer to consumer. VirtualDisplaySurface uses this to
    layer HWC composition on top of GLES composition before passing the
    buffer to the virtual display consumer.
    
    Bug: 8384764
    Change-Id: I61ae54f3d90de6a35f4f02bb5e64e7cc88e1cb83
    Add DisplaySurface abstraction
    
    DisplayDevice now has a DisplaySurface instead of using
    FramebufferSurface directly. FramebufferSurface implements
    DisplaySurface, and so does the new VirtualDisplaySurface class.
    DisplayDevice now always has a surface, not just for virtual displays.
    
    In this change VirtualDisplaySurface is just a stub; buffers still go
    directly from GLES to the final consumer.
    
    Bug: 8384764
    Change-Id: I57cb668edbc6c37bfebda90b9222d435bf589f37
    Minor cleanups/fixes before virtual display refactoring
    
    None of these should change behavior, except for removing some
    incorrect log messages when using a virtual display.
    
    - HWComposer::getAndResetReleaseFenceFd() checks the HWC version, so
      no need to do that in the DisplayDevice::onSwapBuffersCompleted().
      However, it should check that mFramebufferSurface is not NULL like
      it is for virtual displays.
    - Comment that FramebufferSurface::dump() overrides the non-virtual
      ConsumerBase::dump(), and fix it so the right thing happens
      regardless of the static type of the pointer/reference the callee
      has. FramebufferSurface::dump() could be removed right now, but I'd
      need to bring it back in a later change.
    - Use the right enum for validating display type ids.
    - Don't try to send hotplug events for virtual displays.
    - Mark virtual displays as connected so HWComposer::prepare() doesn't
      think something is wrong when it gets a non-NULL layer list.
    - Remove unused FramebufferSurface methods.
    
    Bug: 8384764
    Change-Id: Id28a2f9be86b45f4bb7915fdf7752157035f4294
    Get rid of LayerBase.
    
    The functionality of LayerBase and Layer is folded
    into Layer. There wasn't a need for this abstraction
    anymore.
    
    Change-Id: I66511c08cc3d89009ba4deabf47e26cd4cfeaefb
    Initialize DisplayData fences to NO_FENCE, not NULL
    
    Also fix another place that was checking for NULL fence rather than
    Fence::isValid().
    
    Bug 8283950
    
    Change-Id: Ie06db327eb416828d8dac139171d96d4470b2e35
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: Ibed34175ae273608393aaa5f0a7df207dc40d709
    libgui: disallow NULL Fence pointers
    
    This change eliminates the uses of a NULL sp<Fence> indicating that no waiting
    is required.  Instead we use a non-NULL but invalid Fence object for which the
    wait methods will return immediately.
    
    Bug: 7892871
    Change-Id: I5360aebe3090422ef6920d56c99fc4eedc642e48
    only disable hwc when alpha < 1.0
    
    Bug: 8149181
    Change-Id: Ib3c7a44f04871e020adceeae16d002141ac758d4
    only disable hwc when alpha < 1.0
    
    Bug: 8149181
    Change-Id: Ib3c7a44f04871e020adceeae16d002141ac758d4
    Add support for plane-alpha in HWC
    
    Change-Id: I218e7dd5f23de535aabce61e993002ab6cb46cdd
    Remove unused HWCLayer::setPerFrameDefaultState()
    
    Bug: 7977590
    Change-Id: Ic49c4e38ef2ee6beaeb268c406347c882135bdf0
    Reduce C++11 warnings
    
    A few typecasts to fix "narrowing conversion" complaints.
    
    Change-Id: Ib2118079a2ca33959c748d03d8c6f1722d62e8fe
    Remove support for legacy HWC version encoding
    
    Change-Id: If03ae1ebf10d15777310e1449a57473021390582
    workaround: don't reset compositionType to HWC_FRAMEBUFFER
    
    This workaround a HWC HAL issue in Nexus 7, which causes videos and live
    wallpapers to animate slowly.
    
    Bug: 7563862
    Change-Id: I87803aaad9751b1fd8392b9732304d4bccec659a
    workaround: don't reset compositionType to HWC_FRAMEBUFFER
    
    This workaround a HWC HAL issue in Nexus 7, which causes videos and live
    wallpapers to animate slowly.
    
    Bug: 7563862
    Change-Id: I87803aaad9751b1fd8392b9732304d4bccec659a
    workaround: don't reset compositionType to HWC_FRAMEBUFFER [DO NOT MERGE]
    
    This workaround a HWC HAL issue in Nexus 7, which causes videos and live
    wallpapers to animate slowly.
    
    Bug: 7563862
    Change-Id: I16ad85317e3e7f47f005e7397357c14186b0a13d
    workaround: don't reset compositionType to HWC_FRAMEBUFFER [DO NOT MERGE]
    
    This workaround a HWC HAL issue in Nexus 7, which causes videos and live
    wallpapers to animate slowly.
    
    Bug: 7563862
    Change-Id: I16ad85317e3e7f47f005e7397357c14186b0a13d
    SurfaceFlinger: track the HWC retire fences
    
    This change adds functionality to the HWComposer class to track the retire
    fences returned by each hwc set call.  It adds the HWComposer::getDisplayFence
    method to allow other parts of SurfaceFlinger to get a fence that will signal
    when the most recent flip takes effect on a display.
    
    Change-Id: I676e0f98440fc58ed70908aa1a1e2ee3e7bf9eb2
    Reset compositionType to HWC_FRAMEBUFFER before calling prepare()
    
    Honor the documentation. this broke in JB-MR1.
    
    Change-Id: I841a93b409fc940374bc748c4e143d82a192669c
    Fix emulator vsync
    
    The code that reserves display IDs was only run when a hardware
    composer was present.  The eventControl() function, which handles
    enabling of vsync, was ignoring the request because the primary
    display didn't appear in its set of allocated IDs.  This moves
    reservation of IDs for built-in displays outside the HWC-only block.
    
    Also, added a couple of warnings in eventControl().
    
    Bug 7376568
    
    Change-Id: I185ccdf817a25499b5c2668f8f6d594afb8c1568
    Fix HDMI unblank behavior
    
    Two issues:
    
    (1) We were announcing the hotplug event before we were ready to
    handle blank/unblank events, so we were losing the initial unblank
    that power manager sends us when HDMI is first plugged in.  This
    left the display blank until you toggled the device power off/on.
    
    (2) We were retaining fbTargetHandle for HDMI after the display was
    disconnected.  The value didn't get updated when HDMI was reconnected
    because the display was blank, so we didn't go through that code
    path.  So, when HDMI was re-connected, we passed stale data into
    the HWC.
    
    Bug 7323938
    
    Change-Id: I2335d24fd7b0f00bb23fc63aa7bcf44cb8857c73
    fix dumpsys Layer name when using multiple displays
    
    Bug: 7288401
    Change-Id: I14beeef58fac5270cef3b611e18c163060efe6c3
    Tone down a fatal assert
    
    The new disconnectDisplay function doesn't handle virtual displays,
    but it may be called for them.  Return without doing anything.
    
    Bug 7281786
    
    Change-Id: I62607f2ae6073fa66b393f55932604aeb8e03566
    make sure we don't call into the HWC HAL when not needed
    
    when enabling/disabling vsync we now make sure to
    not call into the HAL if the state wouldn't change.
    
    Bug: 7274951
    
    Change-Id: Ie24a6d68888a51b577acf9c2a973d85437cbacaf
    make sure we don't call into the HWC HAL when not needed
    
    when enabling/disabling vsync we now make sure to
    not call into the HAL if the state wouldn't change.
    
    Bug: 7274951
    
    Change-Id: Ie24a6d68888a51b577acf9c2a973d85437cbacaf
    Fix crashes after HDMI disconnect
    
    The display was being removed from SurfaceFlinger's list before we
    had a chance to reset HWComposer's layer list, so we were passing
    stale data into the hardware composer (which has its own per-display
    data).  This resulted in "invalid gralloc handle" complaints.
    We now clear the layer list immediately after removing the display.
    
    The display was being removed while its EGLSurface was still
    "current", resulting in "cancelBuffer: BufferQueue has been
    abandoned" complaints.  We now call makeCurrent on the primary
    display before removing the external display.
    
    Bug 7274254
    
    Change-Id: Ia59e3a61d7ec46488b96bf93ec5e4ed3488b70e4
    Fix crashes after HDMI disconnect
    
    The display was being removed from SurfaceFlinger's list before we
    had a chance to reset HWComposer's layer list, so we were passing
    stale data into the hardware composer (which has its own per-display
    data).  This resulted in "invalid gralloc handle" complaints.
    We now clear the layer list immediately after removing the display.
    
    The display was being removed while its EGLSurface was still
    "current", resulting in "cancelBuffer: BufferQueue has been
    abandoned" complaints.  We now call makeCurrent on the primary
    display before removing the external display.
    
    Bug 7274254
    
    Change-Id: Ia59e3a61d7ec46488b96bf93ec5e4ed3488b70e4
    Add Fence::waitForever which logs a warning timeout, and use it
    
    Bug: 7217641
    Change-Id: If0c1a613ead307c4045a47824174bf40c72bc7d7
    SurfaceFlinger: reset the FB_TGT acquire fence
    
    This change makes SurfaceFlinger reset the acquire fence fd to -1 after each
    call to HWComposer::commit.  The HWComposer implementation is resonsible for
    closing the fd, so SurfaceFlinger should make sure not to pass it to HWC
    multiple times.
    
    Change-Id: I79554d9f6d6ef2b77d632d40251516c1f5b16ddb
    Bug: 7258954
    Pass display arg to blank/unblank
    
    This allows us to blank and unblank displays other than the built-in
    display (e.g. HDMI).
    
    Bug: 7240511
    Change-Id: I89ea13f9e497be74c3e1231d0c62fb558e93e0f8
    add/remove displays properly on hotplug events
    
    Bug: 7191563
    Change-Id: I8f0fbf3b29658c9479443141798e6f288a1f2d52
    fix an issue where hotplug events were not dispatched
    
    Change-Id: I527eec77f338cd6f1a9021aa4c9d384dbddd6d2a
    fix a typo preventing pre hwc-1.1 devices from booting
    
    Change-Id: Icf01254689633d04967872749ac947a671e47ed8
    we now correctly set-up connected screens during boot
    
    Change-Id: Ie8b1a3b97ad1821cc970e43abe96c8cec7135b66
    We now report hotplug events to the framework
    
    Change-Id: I2d6b7787d39e5929485a551e4982498c5053c211
    one more step toward HDMI support
    
    getDisplayInfo() now returns proper information for
    HWC managed displays.
    
    hotplug is sitll not supported; so this is not fully correct
    as the information returned will be bogus if the HDMI screen
    is not plugged in.
    
    Bug: 7191563
    Change-Id: If55d8e829fae0443571548155007f486cdf9bc9f
    Check that HWC exists before trying to use it
    
    Bug: 7185810
    Change-Id: I1271d6ba397f3abf0ef166b8d03b9b26b72e28d7
    suppress superfluous log
    
    Change-Id: I838f2de4cf99e885833c4f42e2a69d6e3bb8eea5
    Check that HWC exists before trying to use it
    
    Bug: 7185810
    Change-Id: I1271d6ba397f3abf0ef166b8d03b9b26b72e28d7
    add support hwc 1.1
    
    Bug: 7124069
    
    Change-Id: I53d705105c4ad8954d3f50ee4f4c8b7ec936b871
    refactor things a bit
    
    - decouple GL and main display initialization
    - ensure that each "supported" display has its own FramebufferSurface
    - onScreenAcquired/Released now takes a display
    
    Change-Id: If34a05f3dea40f6c79db77f4dde283a2580daac4
    Minor tweaks
    
    A couple of minor cleanups I stumbled over while looking at other
    things.
    
    Change-Id: I385ecfe1afefd577afbc59d7ef1d98d868073651
    Initialize new HWC 1.2 fields
    
    Also rename resolution* to width/height.
    
    Change-Id: Ia5f0c50d3f0a349160f314a3257c3b985e13ef1d
    Fix emulator
    
    Emulator has no HWC.
    
    Change-Id: I7810b27034f6772823142e5bf877681db1c8ee49
    Reduce failure uncertainty
    
    This adds a trivial workaround for a one-shot boot time crash, plus
    an explicit check and abort for a failure condition that currently
    presents as a less obvious failure.
    
    Bug: 7145521, 7147557
    Change-Id: I548f6a9caa9f0bd5710aaecea0e1c6c7c8f2f281
    Reshuffle FramebufferSurface
    
    FramebufferSurface no longer speaks directly to the FB HAL.  Now
    everything goes through HWComposer (which may or may not be
    connected to a hardware composer).
    
    Added display index arg to some query methods.
    
    Change-Id: Id3e157d2d4e3555d33afbb703e518b6e92e2d6d5
    Always reset layer acquireFenceFd after commit
    
    If SurfaceFlinger needs to refresh the screen but the dirty region is
    empty, it won't set the layer acquire fences, and stale file
    descriptors will be passed to HWC commit(). Now we make sure to clear
    the stale file descriptors for each layer right after commit().
    
    Bug: 7078301
    Change-Id: I6953ff91fc5488f105b30b07306f9c45a4c3f780
    fix a problem where  all hwc layers would have the SKIP flags set
    
    the problem was that LayerBase::setPerFrameData() was always setting
    this flag. in fact there was no reason to do this at that point since
    the layer is initialized to a default state in setGeometry().
    
    Bug: 7111259
    Change-Id: Ib37b0dd7391a6163070e9aca025512159c1705f9
    fix a problem where  all hwc layers would have the SKIP flags set
    
    the problem was that LayerBase::setPerFrameData() was always setting
    this flag. in fact there was no reason to do this at that point since
    the layer is initialized to a default state in setGeometry().
    
    Bug: 7111259
    Change-Id: Ib37b0dd7391a6163070e9aca025512159c1705f9
    Always reset layer acquireFenceFd after commit
    
    If SurfaceFlinger needs to refresh the screen but the dirty region is
    empty, it won't set the layer acquire fences, and stale file
    descriptors will be passed to HWC commit(). Now we make sure to clear
    the stale file descriptors for each layer right after commit().
    
    Bug: 7078301
    Change-Id: I6953ff91fc5488f105b30b07306f9c45a4c3f780
    the visible region sent to HWC was garbage
    
    we used to have a visibleRegion object per layer, but now
    it's per screen; so at somepoint the code got changed to
    calculate the per-screen visible region on the stack and that's
    what got passed to HWC.
    
    we're now setting the visibleRegionScreen at each frame and
    freeing at after the HWC set() call. We use the underlaying
    SharedBuffer so that in most cases we don't have to allocate,
    free or copy memory around.
    
    Bug: 7089478
    Change-Id: I24fa556c76613a225d9fe7a6c6b727bb476144d8
    HWC 1.1: hook up hotplug event, use new display config queries
    
    Change-Id: I2fd359e5fc7e1948072c6bc6b6fe47ea5e8025c1
    Handle new device api version encoding
    
    Change-Id: I3d36058bd5d31c23b3cc4a7eb5aa033b6f3c1955
    Added display initialization method
    
    The primary display device was being configured to "blank" by
    default, which prevented the boot animation from appearing
    (unless you got lucky with the hardware composer state).
    
    Bug 6975688
    
    Change-Id: I0fa52e9e719c6e997c5725a7baf15d9718461b78
    teach HWC about multiple displays
    
    Change-Id: I5e72a83d419a729835cb0e1ec45557b4d3fb56b1
    remove support for HWC < 1.0
    
    Change-Id: If7e676a6e3524afeb9af3875125d2131d95db38b
    HWComposer now has its own concept of display IDs
    
    HWComposer can now create IDs representing a display
    it can deal with. IDs MAIN and HDMI are reserved.
    SurfaceFlinger associate HWComposer IDs with a
    DisplayDevice and uses that when it talks to HWComposer.
    
    A DisplayDevice doesn't have to have a HWComposer ID,
    in that case it just can't use h/w composer composition.
    
    Change-Id: Iec3d7ac92e0c22bf975052ae2847402f58bade71
    Update for cleanups in hwc interface
    
    Change-Id: I363fd8b085167a1af6c14b68012bda5c62bfe59f
    Pass the correct number of displays based on HWC version
    
    Change-Id: I27372f5d3102ad56f6d67722d631ae18d37f8330
    reimplement wifi display hack with new external display SF framework
    
    fix a few bugs with external displays
    
    - HWComposer doesn't really handle multiple displays yet
      so there is a lot of ugliness there
    
    - We also need to make sure that external displays are not
      blanked by default
    
    - due to some EGL limitations surfaces being swapped need
      to be current
    
    Change-Id: I82bff05b43bcebd8da863c7c76b4edbc3bc223a9
    xdpi / ydpi were reported as 0
    
    Bug: 6975723
    Change-Id: Ia7fa37ec11e2308804f5034959a37e508d292d31
    avoid crashing when we don't have an h/w composer
    
    should fix the emulator
    
    Bug: 6956162
    Change-Id: I38247b59d276b8db078c4dc2caba7d3fb545912c
    Add a display parameter to HWComposer where needed
    
    - also replace C casts with C++ casts
    - only the interface is changed, HWComposer still doesn't
      fully handle multiple displays
    
    Change-Id: I48eb89bff2edb76bf1d4d41f46802b9b2a7166a8
    Changes to support multi-display HWC
    
    Change-Id: I07efff54f2980dcb013935747b03e099b8f1181b
    remove a dependency of DisplayDevice on the refresh rate
    
    this remove a dependency (not all) on FramebufferSurface
    
    Change-Id: Ie07ce70760cdcedfb41b5b41bea8da45637bf474
    cleanups in preparation of bigger changes
    
    - fix typo drawForSreenshot misspelled
    - get rid of DisplayDeviceBase
    - removed unused or unneeded code
    - always pass a DisplayDevice to Layer methods that are called
      on a per-display basis (to make it clear that this could be
      called more than once per composition).
    
    Change-Id: Id948b7e09fe5c06db0e42d40d6ed75dd095c7f44
    Revert "Minimal changes to support multi-display HWC"
    
    This reverts commit bddd724b178b1263c16e41b564165fcd0e93ff83
    
    Change-Id: Ib7db20b5b3de4779b6e173473a33976ae398abd4
    Revert "Minimal changes to support multi-display HWC"
    
    This reverts commit bddd724b178b1263c16e41b564165fcd0e93ff83
    
    Change-Id: Ib7db20b5b3de4779b6e173473a33976ae398abd4
    Move eglSwapBuffers out of HWComposer
    
    Commit 8630320 moved the eglSwapBuffers fallback (for devices with no
    HWC implementation) from DisplayHardware to HWComposer. But HWComposer
    only knows about the framebuffer EGL display and surface handles if
    there is a HWC, so it was always passing bogus handles.
    
    This change moves the eglSwapBuffers fallback up to SurfaceFlinger,
    which has access to the framebuffer EGL handles.
    
    Bug: 6886613
    Change-Id: Iad3f5ff7c90ee48d7053999e6a4548d6794b6ebd
    Minimal changes to support multi-display HWC
    
    Change-Id: I5efea78ac381c3e3118e6e92b508f336233ac319
    hopefully fixe a race condition in sf initialization
    
    if we received a vsync event during SF init, we could crash
    as not all objects were ready to go.
    
    Change-Id: Ie11b46e3eb1b37a709dd8757843d444f93dd0189
    split HWComposer out of DisplayHardware
    
    we will only ever have a single instance of HWComposer, so
    it's now an attribute of SurfaceFlinger, instead of being part
    of DisplayHardware.
    
    DisplayHardware now just represents a "display" (it should be renamed).
    
    Change-Id: Iec191e57686868e1df6daa8b880a286c9fefde56
    SurfaceFlinger cleanup
    
    mostly refactored SurfaceFlinger.h, but also removed dead code.
    cleaned-up a few includes as well.
    
    Change-Id: Ib15f4ffe567912b61ee98aa076c6a283b72811b5
    surfaceflinger: call into hardware composer to blank screen
    
    Call into the new HWC blank operation to blank or unblank the screen.
    Legacy systems may have already blanked the screen via early suspend,
    and can choose to not implement the blank operation in their hardware
    composer implementation.
    
    Change-Id: Ib403c8c0e36367a2cfef3e1d124872fcfeb9e7cb
    Pass fence to HWC on first use of buffer
    
    Also do a CPU-wait on the fence before using it for GL composition.
    
    Change-Id: I0f645a42a44803276cae11b904e5a26d65871562
    Transfer HWC release fences to BufferQueue
    
    After a HWC set, each SurfaceFlinger Layer retrieves the release fence
    HWC returned and gives it to the layer's SurfaceTexture. The
    SurfaceTexture accumulates the fences into a merged fence until the
    next updateTexImage, then passes the merged fence to the BufferQueue
    in releaseBuffer.
    
    In a follow-on change, BufferQueue will return the fence along with
    the buffer slot in dequeueBuffer. For now, dequeueBuffer waits for the
    fence to signal before returning.
    
    The releaseFence default value for BufferQueue::releaseBuffer() is
    temporary to avoid transient build breaks with a multi-project
    checkin. It'll disappear in the next change.
    
    Change-Id: Iaa9a0d5775235585d9cbf453d3a64623d08013d9
    Add support for HWC_DEVICE_API_VERSION_1_0
    
    The acquire and release fences aren't yet used; this is just support
    for the new version and temporary backwards compatibility for older
    versions.
    
    Change-Id: Ia5ccc05a97c86f649042b9a35e11042fa0187e84
    refactor HWComposer to break dependency with the HAL headers
    
    HWComposer must abstract the HWC HAL entirely, so that the
    HAL can continue to evolve (and break binary compatibility)
    without breaking SurfaceFlinger. The HWC data structure had
    leaked outside of HWComposer, this is now fixed.
    
    We now have an abstract interface that provide all the
    needed functionality, HWCompose provides concrete
    implementations of it based on the the HWC version.
    
    Change-Id: I40c4676dc986b682ede5520a1c60efe64037b0bb
    set vsync power hint
    
    Change-Id: I28c2faf9ff584df3e74392712971cbcf75eb9e98
    make sure to disable VSYNC while screen is off
    
    Change-Id: If1894c43b0a39a2851e1280a35ae77bccd6d9abd
    Added vsync debugging information in dumpsys log
    
    Change-Id: I20ef05a73d89caaf6a70dc9ca25ada6e6a1f6ff9
    start VSYNC thread when HWC doesn't handle it
    
    Change-Id: I853a822ea9ec13870ae25af55a89ad9a8cc3936a
    VSYNC handling cleanup
    
    Change-Id: I1376bf864c4e03c11fb6d1333a8b7cfdda08c9e4
    Fix SurfaceFlinger crash in HWC::eventControl
    
    eventControl was not checking if there was a hwc before callingi
    hwc->eventControl
    
    Change-Id: I4d739fc9c0d47da131f4ffc5d50e274de156d012
    SurfaceFlinger now uses the new VSYNC HAL API.
    
    If h/w composer doesn't support vsync (version < 0.3) we
    "fake" it with a timer.
    
    Change-Id: I1e3be79f43c9631d1293ad7d6cf52f9bfc42d65b
    Add HWC vsync hook. Currently unused.
    
    Change-Id: I849d56f375813a044c5e2d0b25f791476a60fa01
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Force a repaint when hwc invalidate hook is called
    
    without this prepare() would be called but not set() since the
    dirty region is empty.
    
    Change-Id: I038acfbdad4c16015357ccde4d1949391d6f989d
    improve hwc log output
    
    we now print the handle of each buffer
    
    Change-Id: I4104cd6d3a0a303baf44c5c69de3bf36c237892e
    improve hwc log output
    
    we now print the handle of each buffer
    
    Change-Id: I70884ae458a9dcf10cfc403258d48eaa4618b7f4
    fix dumpsys wording for h/w composer
    
    Change-Id: Iaa1094964f2fb83da491e23b9309f7690079c17e
    fix transition from full overlays to fb
    
    we need to clear the whole framebuffer in that situation because
    we can't trust the content of the FB when partial (fb preserving)
    updates are used.
    
    Bug: 5318492
    
    Change-Id: I3f0e01b0fb665a34e44d88ad9f0f54a5d990060b
    improve hwc dumpsys
    
    we now log the buffer's format
    
    Change-Id: I9d3ad8018e884240a153de3baefb6331cb014d0f
    fix transition from full overlays to fb
    
    we need to clear the whole framebuffer in that situation because
    we can't trust the content of the FB when partial (fb preserving)
    updates are used.
    
    Bug: 5318492
    
    Change-Id: I3f0e01b0fb665a34e44d88ad9f0f54a5d990060b
    improve hwc dumpsys
    
    we now log the buffer's format
    
    Change-Id: I9d3ad8018e884240a153de3baefb6331cb014d0f
    Improve SF dumpsys output wrt HWC
    
    Change-Id: Ibdb7930fa3b521bfd3f44750ed98cfd75f9a01fe
    fix a bug that caused the off animation to not show sometimes
    
    this happened when the overlays were in use, since the animation
    is rendered in the FB and the FB is not used.
    
    we now have a way to turn hwc off temporarily.
    
    Change-Id: I3385f0c25bb9cc91948e7b26e7cd31ed18c36ace
    fix a bug that caused the off animation to not show sometimes
    
    this happened when the overlays were in use, since the animation
    is rendered in the FB and the FB is not used.
    
    we now have a way to turn hwc off temporarily.
    
    Change-Id: I3385f0c25bb9cc91948e7b26e7cd31ed18c36ace
    Add a h/w composer API to allow the HAL to trigger a redraw
    
    This is useful in various situations, for instance if the HAL
    wants to change its compositing strategy.
    
    Bug: 4488017
    Change-Id: I5afc14e5917c6db7926d7417d48677d5aba50caa
    surfaceflinger: add support for gralloc dump hooks
    
    Change-Id: Ib6f539ed0132b70d040d653c03d52cc04249ac3c
    Fix a null dereference
    
    Change-Id: I3df446b90c1607782778749de7ba0f8c00698c33
    dump HWC state in dumpsys
    
    Change-Id: Ifbb38ca1ac9685776250e01c8d02021b35af72cf
    surfaceflinger: give hwcomposer a chance to release buffers
    
    Change-Id: I605fa779702022865dd58df3b36f37c2644ade36
    revert hwcomposer HAL changes. DO NOT MERGE.
    
    This reverts commit:
    94364b91a2894bf037b8beb027132fbb812e1434
    f8e705dea48f77f1c2532fdbadd4997dd1851af0
    b59beb5ca68d0228f60dda60d85e2d0226b33215
    e0d5f5bcf5a8b26f4ad75f549cbf380b2c9faf20
    Fix a couple issues with the new hwcomposer HAL
    
    - we now clear the framebuffer upon request from the HAL
    - the HAL list size could get out of sync with reality
    - there was also an issue where sometime we could run past the list
    
    Change-Id: Ic3a34314aed24181f2d8cc787096af83c046ef27
    should fix sim build, hopefully
    
    Change-Id: I5390bd34dcca36fef43b5169386fff1b04cc842b
    call into hwcomposer HAL when present
    
    Change-Id: I70f31c69a9436a43860e78977442863ecba6d27b
    MT6589: fix build
    
    Change-Id: Ie3ae37ed028ed14c88eec039f81238c836cb1260
    Build fix to use the correct source.
    
    Change-Id: If36710be600dd0e15c31682e0343f281baa55627
    Allow for resizing of Virtual Displays.
    
    Modify SurfaceFlinger to use VirtualDisplaySurface in all cases when a virtual
    display is used. Add functionality in VirtualDisplaySurface to resize the
    buffers aquired in the QueueBufferOutput. Add transaction support in
    SurfaceFlinger for resize. Add the modification of the size in DisplayDevice.
    
    Change-Id: Iae7e3556dc06fd18d470adbbd76f7255f6e6dd6b
    Tested: None
    Compile libsurfaceflinger with Clang and -std=c++11 [DO NOT MERGE]
    
    This is necessary to use C11/C++11 stdlib atomics, which the next
    change will do. This change also fixes a couple bits of syntax that
    both GCC and Clang refuse to compile in -std=c++11 mode.
    
    Change-Id: Ia14d9d6b537a3bb106c23e19a277e48be180754c
    BufferQueue: Add allocateBuffers method
    
    This adds an allocateBuffers method to BufferQueue, which instructs
    it to allocate up to the maximum number of buffers allowed by the
    current configuration. The goal is that this method can be called
    ahead of render time, which will prevent dequeueBuffers from blocking
    in allocation and inducing jank.
    
    This interface is also plumbed up to the native Surface (and, in
    another change, up to the Java Surface and ThreadedRenderer).
    
    Bug: 11792166
    Change-Id: I4aa96b4351ea1c95ed5db228ca3ef98303229c74
    Handle failed requestBuffer after successful dequeueBuffer
    
    If the virtual display consumer disconnects after the
    VirtualDisplaySurface dequeues a buffer but before it requests it, the
    request will fail. Previously the error was ignored, and the caller
    would get a success result but a NULL buffer. Now the dequeued buffer
    is cancelled and the error propagated to the caller.
    
    Bug: 14140551
    Change-Id: I91547885c2cf6063dc7a8f02d97f2df282cdde2c
    Fix virtual display nesting
    
    This fixes the cycling rendering loop caused by nesting virtual
    displays by preventing them from recomposing if their contents
    haven't changed.
    
    (cherry-pick from master I600365c0fd5d3ad93e04295d26cf9de177ffc79b)
    
    Bug: 12101046
    Change-Id: I6182993d53537781aedb522f97a50f06eed8b80f
    BufferQueue: Increase max slots from 32 to 64
    
    Increases NUM_BUFFER_SLOTS from 32 to 64 and changes the mask
    returned by IGBC::getReleasedBuffers from 32 to 64 bits.
    
    Bug: 13174352
    Change-Id: Ie8ef0853916cfb91f83881c7241886bb1950f01a
    BufferQueueProducer: add detachNextBuffer
    
    Adds a new method, IGBP::detachNextBuffer, that effectively does
    dequeue + request + detach in a single call, but does not need to
    know anything about the dequeued buffer, and will not block on
    dequeue. This is mostly for the upcoming StreamSplitter to use in
    its onBufferReleased callback.
    
    Change-Id: Ie88a69de109003acebaa486a5b44c8a455726550
    BufferQueue: Add producer buffer-released callback
    
    Add a callback to the producer side, onBufferReleased, which will be
    called every time the consumer releases a buffer back to the
    BufferQueue. This will enable a buffer stream splitter to work
    autonomously without having to block on dequeueBuffer.
    
    The binder object used for the callback replaces the generic IBinder
    token that was passed into IGraphicBufferProducer::connect to detect
    the death of the producer. If a producer does not wish to listen for
    buffer release events, it can pass in an instance of the
    DummyProducerListener class defined in IProducerListener.h, if it even
    cares about death events (BufferQueue doesn't enforce the token being
    non-NULL, though perhaps we should).
    
    Change-Id: I23935760673524abeafea2b58dccc3583b368710
    Remove deprecated BufferQueue constructor
    
    Bug: 13415624
    Change-Id: I9fe15e45daa7351f1db34ee75bfee6f19cb347d3
    VirtualDisplaySurface: no attach/detach support
    
    Change-Id: I630dd6e352940318c33a4e072d2f33a6ec58c556
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    BufferQueue: Allow detaching/reattaching buffers
    
    Adds detachBuffer and attachBuffer calls to both the producer and
    consumer sides of BufferQueue. Buffers may be detached while dequeued
    by the producer or acquired by the consumer, and when attached, enter
    the dequeued and acquired states, respectively.
    
    Bug: 13173343
    Change-Id: Ic152692b0a94d99e0135b9bfa62747dab2a54220
    Fix virtual display nesting
    
    This fixes the cycling rendering loop caused by nesting virtual
    displays by preventing them from recomposing if their contents
    haven't changed.
    
    Bug: 12101046
    Change-Id: I600365c0fd5d3ad93e04295d26cf9de177ffc79b
    SurfaceFlinger: mFbProducerSlot initailization
    
    b/12487813
    
    SurfaceFlinger crash is observed during simulation of
    Secondary display
    
    Note: change 14e8b01a761180250671f3d6494532d8bd04fa8e
    removed the initialization leading to the crash when
    simulating secondary display.  Restore the initialization
    to solve the problem.
    
    Change-Id: Iae5845fb82735e01de5cc0dc582d13c27e3c614f
    Signed-off-by: mayank parshar <mayankp@broadcom.com>
    Signed-off-by: Pierre Couillaud <pierre@broadcom.com>
    SurfaceFlinger: mFbFence initialization
    
    MobC00383030
    b/12487813
    
    SurfaceFlinger crash is observed while connecting
    to Wi-Fi display.
    
    Note: change 14e8b01a761180250671f3d6494532d8bd04fa8e
    removed the initialization leading to the crash when
    running through the HWC composition path.  Restore the
    initialization to solve the problem.
    
    Change-Id: I581defc7135ac512080c0da06a62b1dae7d218c4
    Signed-off-by: mayank parshar <mayankp@broadcom.com>
    Signed-off-by: Pierre Couillaud <pierre@broadcom.com>
    Don't change the framebuffer target until we render a new one
    
    Continuing to send the last-rendered framebuffer to HWC on subsequent
    frames allows the HWC to read partially-composed regions that haven't
    changed, instead of re-composing from scratch.
    
    Bug: 11573910
    Change-Id: I8829877d2a06001f1e1b3f168cbba71c7b217b2d
    Don't use implementation-defined format with CPU consumers
    
    If the virtual display surface is being consumed by the CPU, it can't
    be allowed with HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED since there is
    no way for the CPU consumer to find out what format gralloc chose. So
    for CPU-consumer surfaces, just use the BufferQueue's default format,
    which can be set by the consumer.
    
    A better but more invasive change would be to let the consumer require
    a certain format (or set of formats?), and disallow the producer from
    requesting a different format.
    
    Bug: 11479817
    Change-Id: I5b20ee6ac1146550e8799b806e14661d279670c0
    Fix handling of undefined TARGET_FORCE_HWC_FOR_VIRTUAL_DISPLAYS
    
    related to b/8316155 - Implement HWComposer 1.3 w/ virtual display support
    Change-Id: I2dc8d65a74174aa833cc491264f97f1f2df49307
    Add a boardconfig to force HWC composition of virtual displays
    
    When this boardconfig is defined, even when all virtual display
    composition is done by GLES, the HWC will be forced to copy from the
    GLES framebuffer to the output buffer. On some hardware this allows
    HWC to do format conversions that would otherwise have to be done by
    the consumer, with worse power and/or performance.
    
    Bug: 8316155
    Change-Id: If980ecc589f138cef063eafa757f7f748196713e
    Use implementation-defined format when HWC writes to output buffer
    
    When GLES isn't writing to the output buffer directly, request an
    implementation-defined format with minimal usage flags, leaving the
    format choice up to gralloc. On some hardware this allows HWC to do
    format conversions during composition that would otherwise need to be
    done (with worse power and/or performance) by the consumer.
    
    Bug: 8316155
    Change-Id: Iee6ee8404282036f9fd1833067cfe11dbadbf0bf
    Set the outbuf acquire fence after we actually have it.
    
    In GLES-only mode, we don't have the outbuf acquire fence until after
    GLES composition is done for the frame. We were setting the fence in
    HWC's state immediately after dequeueing the buffer from the consumer,
    before GLES had started. This fence got passed through HWC and on to
    the consumer, so the consumer was reading the buffer before GLES was
    done writing to it.
    
    Now we update HWC's state just before set(), when we know we have the
    right fence.
    
    Bug: 11000763
    Change-Id: Iea9db4c69634c352dc2d600f0bdb6bef2a432636
    Set the outbuf acquire fence after we actually have it.
    
    In GLES-only mode, we don't have the outbuf acquire fence until after
    GLES composition is done for the frame. We were setting the fence in
    HWC's state immediately after dequeueing the buffer from the consumer,
    before GLES had started. This fence got passed through HWC and on to
    the consumer, so the consumer was reading the buffer before GLES was
    done writing to it.
    
    Now we update HWC's state just before set(), when we know we have the
    right fence.
    
    Bug: 11000763
    Change-Id: Iea9db4c69634c352dc2d600f0bdb6bef2a432636
    fix crashers with wifi/virtual displays
    
    Bug: 10647742
    Change-Id: I4b8ed9da52ef95af3a3b3a04b98514a3776a674d
    fix crashers with wifi/virtual displays
    
    Bug: 10647742
    Change-Id: I4b8ed9da52ef95af3a3b3a04b98514a3776a674d
    Make sure do disconnect from a BQ when its client dies.
    
    Bug: 5679534
    
    Change-Id: If447e8673df83fe0b1d6210641e0a48522501a53
    Force async behavior for the virtual display output BufferQueue
    
    Bug: 10551087
    Change-Id: I40bbb2b87d64420939a0ea309254f281437dab56
    Provide HWC prepare with a valid output buffer
    
    We weren't dequeing and setting the output buffer until just before
    set(). This didn't allow HWC to make decisions in prepare() based on
    the output buffer format, dimensions, etc.
    
    Now we dequeue the output buffer at the beginning of the composition
    loop and provide it to HWC in prepare. In GLES-only rendering, we may
    have to cancel the buffer and acquire a new one if GLES requests a
    buffer with properties different than the one we already dequeued.
    
    Bug: 10365313
    Change-Id: I96b4b0a851920e4334ef05080d58097d46467ab8
    Re-enable frame dropping for non-auto timestamps
    
    This change adds an entire field to note whether the timestamp was
    auto-generated by Surface or supplied by the application.
    
    The value is used when deciding whether or not to drop frames based
    on buffer presentation timestamps.  If a desired presentation time
    was set explicitly, BufferQueue will use that value to decide if a
    frame should be dropped.  If the timestamp was generated by Surface
    at the time the buffer was queued, the timestamp is ignored.
    
    Bug 10151804
    
    Change-Id: Ibd571a7578351063b813cbdad2ddbeed70655ba5
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    Make ANW.setSwapInterval(0) work again
    
    we can now queue/dequeue a buffer in asynchrnous mode by using the
    async parameter to these calls. async mode is only specified
    with those calls (it is not modal anymore).
    
    as a consequence it can only be specified when the buffer count
    is not overidden, as error is returned otherwise.
    
    Change-Id: Ic63f4f96f671cb9d65c4cecbcc192615e09a8b6b
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    Fix build -- update for function signature change
    
    Change-Id: I9c2448d5853c69ec7e962847fdaba9a99906cc42
    Rewrite VirtualDisplaySurface
    
    The previous implementation assumed that the HWC could read and write
    the same buffer on frames that involved both GLES and HWC composition.
    It turns out some hardware can't do this. The new implementation
    maintains a scratch buffer pool to use on these mixed frames, but on
    GLES-only or HWC-only frames still does composition directly into the
    output buffer.
    
    Bug: 8384764
    Change-Id: I7a3addb34fad9bfcbdabbb8b635083e10223df69
    Remove experimental HWC virtual display support
    
    Bug: 8384764
    Change-Id: I97b52ed83ad85466bd91cb9291308994048568a1
    Actually set the virtual display output buffer.
    
    Bug: 8316155
    Change-Id: Ida1ac47e5a932fdaad3ec862e121cfe55d255699
    Fix virtual displays for HWC<=1.1
    
    If we're using a HWC that doesn't support virtual displays, or we have
    more virtual displays than HWC supports concurrently, the
    VirtualDisplaySurface should simply be a passthrough from source
    (GLES) to sink.
    
    This change also tries to distinguish between display types and HWC
    display IDs a little better, though there's more to do here. Probably
    needs a higher-level rethink; it's too error-prone now.
    
    Bug: 8446838
    Change-Id: I708d2cf262ec30177042304f174ca5b8da701df1
    Isolate knowledge that fb target == output buffer
    
    HWComposer didn't allow the virtual display output buffer to be set
    directly, instead it always used the framebuffer target buffer.
    DisplayDevice was only providing the framebuffer release fence to
    DisplaySurfaces after a commit.
    
    This change fixes both of these, so both HWComposer and DisplayDevice
    should continue to work if VirtualDisplaySurface changes to use
    separate framebuffer and output buffers. It's also more correct since
    VirtualDisplaySurface uses the correct release fence when queueing the
    buffer to the sink.
    
    Bug: 8384764
    Change-Id: I95c71e8d4f67705e23f122259ec8dd5dbce70dcf
    Pass sp<Fence>s around instead of file descriptors
    
    Change-Id: Iac70584a2207940730e8f803a543e4e9a4000c47
    Release virtual display buffer immediately after HWC set
    
    Previously we only queued a virtual display buffer to the sink when
    the next frame was about to be displayed. This may delay the "last"
    frame of an animation indefinitely. Now we queue the buffer as soon as
    HWC set() returns and gives us the release fence.
    
    Bug: 8384764
    Change-Id: I3844a188e0f6ef6ff28f3e11477cfa063a924b1a
    Add BufferQueueInterposer and use it for virtual displays
    
    BufferQueueInterposer allows a client to tap into a
    IGraphicBufferProducer-based buffer queue, and modify buffers as they
    pass from producer to consumer. VirtualDisplaySurface uses this to
    layer HWC composition on top of GLES composition before passing the
    buffer to the virtual display consumer.
    
    Bug: 8384764
    Change-Id: I61ae54f3d90de6a35f4f02bb5e64e7cc88e1cb83
    Add DisplaySurface abstraction
    
    DisplayDevice now has a DisplaySurface instead of using
    FramebufferSurface directly. FramebufferSurface implements
    DisplaySurface, and so does the new VirtualDisplaySurface class.
    DisplayDevice now always has a surface, not just for virtual displays.
    
    In this change VirtualDisplaySurface is just a stub; buffers still go
    directly from GLES to the final consumer.
    
    Bug: 8384764
    Change-Id: I57cb668edbc6c37bfebda90b9222d435bf589f37
    Modified SurfaceFlinger to implment setActiveConfig and getActiveConfig.
    
    This can be used to change the current display mode of the device.
    
    Change-Id: Icdc3fb58389b861dc77b68102083da6f7a96eccb
    Tested: None
    (cherry picked from commit 2651fa94635a96d653038fb389a0dd827338f8d3)
    Turn on support for async cursor update in surfaceflinger.
    
    If available, surfaceflinger will use the hwc setCursorPositionAsync()
    api to change the position of supported cursor layers outside of
    the usual prepare/set loop.
    
    Change-Id: Ib3fc5c0c390b3489ddbba202379840a1d2748917
    surfaceflinger: Replace blank/unblank with setPowerMode
    
    We replace the blank/unblank calls in surfaceFlinger with a more generic
    setPowerMode() routine.
    
    Some displays support different power modes (for example, with reduced
    color palettes). Depending on the use case we should be able to toggle
    these modes, so as to achieve incremental power savings.
    
    Initially, three power modes will be supported:
    - HWC_POWER_MODE_OFF
    - HWC_POWER_MODE_DOZE
    - HWC_POWER_MODE_NORMAL
    
    HWC_POWER_MODE_OFF will correspond to blanking the display, while
    HWC_POWER_MODE_NORMAL will correspond to unblanking. HWC_POWER_MODE_DOZE
    will put the display into a low power setting, if it is supported in
    hardware.
    
    If such a low power mode is not supported, it should be treated as a
    call to set the mode to HWC_POWER_MODE_NORMAL.
    
    As a consequence of adding the mPowerMode field, the mScreenAcquired is
    no longer required, and thus references to it are removed and replaced
    equivalent references to mPowerMode.
    
    We also add the glue code to connect the services invocation of setting
    a power mode and the HAL implementation in HWComposer.
    
    Bug: 13472578
    Change-Id: I431595ecf16d2f2c94259272db3dd42f29636204
    Signed-off-by: Prashant Malani <pmalani@google.com>
    Enable changing display configuration
    
    This allows querying and switching display device configurations
    through the ISurfaceComposer/SurfaceComposerClient interface.
    
    Bug: 14320401
    Change-Id: I8c22165698950e5da32204c1c4da92122f91a715
    Improve SurfaceFlinger PTS estimation
    
    Get the next refresh time from DispSync instead of guessing based
    on the current time.
    
    Change-Id: I8dc72a3217bfd4e9b4c905034194d1a298cad69a
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    handle several vsync signal correctly
    
    Change-Id: I34935d2197ce8e914fef2f110896e47b44225ad2
    Use new HWC display type/count constants.
    
    Change-Id: I774d0c68906ac6dc69268f708c30a6b0868b8816
    fix SF buffer cropping
    
    When a buffer had a crop (meaning its content is scaled to the window size)
    and a window crop was defined, the resulting crop couldn't be expressed
    properly because h/w composer's API was limited to integers, since
    this is fixed in h/w composer 1.3, we take adventage of this to
    make sure we get the correct crop.
    
    this bug could result in the buffer being scaled by an incorrect ratio and
    be slightly offset; moreover, it would produce different results from the
    GL code path, which is always correct.
    
    Change-Id: I8e20e00b6e26177d14f4ab4d2cd581e26c818892
    clean-up/simplify all dump() APIs
    
    remove the scratch buffer parameter and use
    String8::appendFormat() instead.
    
    Change-Id: Ib96c91617c8e7292de87433d15cf6232b7d591b0
    Tell HWComposer the dimensions of virtual displays
    
    HWComposer queries the HWC for dimensions of physical displays, but
    can't do that for virtual displays. The dimensions are used to set the
    display frame of the framebuffer target layer passed to HWC, and
    implicitly the dimensions of the virtual display.
    
    Bug: 8316155
    Change-Id: I9cbd2530d2fa878f86128a1472def520b5d694a5
    Isolate knowledge that fb target == output buffer
    
    HWComposer didn't allow the virtual display output buffer to be set
    directly, instead it always used the framebuffer target buffer.
    DisplayDevice was only providing the framebuffer release fence to
    DisplaySurfaces after a commit.
    
    This change fixes both of these, so both HWComposer and DisplayDevice
    should continue to work if VirtualDisplaySurface changes to use
    separate framebuffer and output buffers. It's also more correct since
    VirtualDisplaySurface uses the correct release fence when queueing the
    buffer to the sink.
    
    Bug: 8384764
    Change-Id: I95c71e8d4f67705e23f122259ec8dd5dbce70dcf
    Pass sp<Fence>s around instead of file descriptors
    
    Change-Id: Iac70584a2207940730e8f803a543e4e9a4000c47
    Don't log an error on HWC1.1+ devices with no FB HAL
    
    Change-Id: I015e5a1a1f926181e51f82525f69beff71bd70cd
    Add BufferQueueInterposer and use it for virtual displays
    
    BufferQueueInterposer allows a client to tap into a
    IGraphicBufferProducer-based buffer queue, and modify buffers as they
    pass from producer to consumer. VirtualDisplaySurface uses this to
    layer HWC composition on top of GLES composition before passing the
    buffer to the virtual display consumer.
    
    Bug: 8384764
    Change-Id: I61ae54f3d90de6a35f4f02bb5e64e7cc88e1cb83
    Get rid of LayerBase.
    
    The functionality of LayerBase and Layer is folded
    into Layer. There wasn't a need for this abstraction
    anymore.
    
    Change-Id: I66511c08cc3d89009ba4deabf47e26cd4cfeaefb
    Initialize DisplayData fences to NO_FENCE, not NULL
    
    Also fix another place that was checking for NULL fence rather than
    Fence::isValid().
    
    Bug 8283950
    
    Change-Id: Ie06db327eb416828d8dac139171d96d4470b2e35
    Add support for plane-alpha in HWC
    
    Change-Id: I218e7dd5f23de535aabce61e993002ab6cb46cdd
    Remove unused HWCLayer::setPerFrameDefaultState()
    
    Bug: 7977590
    Change-Id: Ic49c4e38ef2ee6beaeb268c406347c882135bdf0
    SurfaceFlinger: track the HWC retire fences
    
    This change adds functionality to the HWComposer class to track the retire
    fences returned by each hwc set call.  It adds the HWComposer::getDisplayFence
    method to allow other parts of SurfaceFlinger to get a fence that will signal
    when the most recent flip takes effect on a display.
    
    Change-Id: I676e0f98440fc58ed70908aa1a1e2ee3e7bf9eb2
    Reset compositionType to HWC_FRAMEBUFFER before calling prepare()
    
    Honor the documentation. this broke in JB-MR1.
    
    Change-Id: I841a93b409fc940374bc748c4e143d82a192669c
    fix dumpsys Layer name when using multiple displays
    
    Bug: 7288401
    Change-Id: I14beeef58fac5270cef3b611e18c163060efe6c3
    make sure we don't call into the HWC HAL when not needed
    
    when enabling/disabling vsync we now make sure to
    not call into the HAL if the state wouldn't change.
    
    Bug: 7274951
    
    Change-Id: Ie24a6d68888a51b577acf9c2a973d85437cbacaf
    make sure we don't call into the HWC HAL when not needed
    
    when enabling/disabling vsync we now make sure to
    not call into the HAL if the state wouldn't change.
    
    Bug: 7274951
    
    Change-Id: Ie24a6d68888a51b577acf9c2a973d85437cbacaf
    Fix crashes after HDMI disconnect
    
    The display was being removed from SurfaceFlinger's list before we
    had a chance to reset HWComposer's layer list, so we were passing
    stale data into the hardware composer (which has its own per-display
    data).  This resulted in "invalid gralloc handle" complaints.
    We now clear the layer list immediately after removing the display.
    
    The display was being removed while its EGLSurface was still
    "current", resulting in "cancelBuffer: BufferQueue has been
    abandoned" complaints.  We now call makeCurrent on the primary
    display before removing the external display.
    
    Bug 7274254
    
    Change-Id: Ia59e3a61d7ec46488b96bf93ec5e4ed3488b70e4
    Fix crashes after HDMI disconnect
    
    The display was being removed from SurfaceFlinger's list before we
    had a chance to reset HWComposer's layer list, so we were passing
    stale data into the hardware composer (which has its own per-display
    data).  This resulted in "invalid gralloc handle" complaints.
    We now clear the layer list immediately after removing the display.
    
    The display was being removed while its EGLSurface was still
    "current", resulting in "cancelBuffer: BufferQueue has been
    abandoned" complaints.  We now call makeCurrent on the primary
    display before removing the external display.
    
    Bug 7274254
    
    Change-Id: Ia59e3a61d7ec46488b96bf93ec5e4ed3488b70e4
    Pass display arg to blank/unblank
    
    This allows us to blank and unblank displays other than the built-in
    display (e.g. HDMI).
    
    Bug: 7240511
    Change-Id: I89ea13f9e497be74c3e1231d0c62fb558e93e0f8
    we now correctly set-up connected screens during boot
    
    Change-Id: Ie8b1a3b97ad1821cc970e43abe96c8cec7135b66
    We now report hotplug events to the framework
    
    Change-Id: I2d6b7787d39e5929485a551e4982498c5053c211
    one more step toward HDMI support
    
    getDisplayInfo() now returns proper information for
    HWC managed displays.
    
    hotplug is sitll not supported; so this is not fully correct
    as the information returned will be bogus if the HDMI screen
    is not plugged in.
    
    Bug: 7191563
    Change-Id: If55d8e829fae0443571548155007f486cdf9bc9f
    add support hwc 1.1
    
    Bug: 7124069
    
    Change-Id: I53d705105c4ad8954d3f50ee4f4c8b7ec936b871
    refactor things a bit
    
    - decouple GL and main display initialization
    - ensure that each "supported" display has its own FramebufferSurface
    - onScreenAcquired/Released now takes a display
    
    Change-Id: If34a05f3dea40f6c79db77f4dde283a2580daac4
    Initialize new HWC 1.2 fields
    
    Also rename resolution* to width/height.
    
    Change-Id: Ia5f0c50d3f0a349160f314a3257c3b985e13ef1d
    Reshuffle FramebufferSurface
    
    FramebufferSurface no longer speaks directly to the FB HAL.  Now
    everything goes through HWComposer (which may or may not be
    connected to a hardware composer).
    
    Added display index arg to some query methods.
    
    Change-Id: Id3e157d2d4e3555d33afbb703e518b6e92e2d6d5
    the visible region sent to HWC was garbage
    
    we used to have a visibleRegion object per layer, but now
    it's per screen; so at somepoint the code got changed to
    calculate the per-screen visible region on the stack and that's
    what got passed to HWC.
    
    we're now setting the visibleRegionScreen at each frame and
    freeing at after the HWC set() call. We use the underlaying
    SharedBuffer so that in most cases we don't have to allocate,
    free or copy memory around.
    
    Bug: 7089478
    Change-Id: I24fa556c76613a225d9fe7a6c6b727bb476144d8
    HWC 1.1: hook up hotplug event, use new display config queries
    
    Change-Id: I2fd359e5fc7e1948072c6bc6b6fe47ea5e8025c1
    teach HWC about multiple displays
    
    Change-Id: I5e72a83d419a729835cb0e1ec45557b4d3fb56b1
    remove support for HWC < 1.0
    
    Change-Id: If7e676a6e3524afeb9af3875125d2131d95db38b
    HWComposer now has its own concept of display IDs
    
    HWComposer can now create IDs representing a display
    it can deal with. IDs MAIN and HDMI are reserved.
    SurfaceFlinger associate HWComposer IDs with a
    DisplayDevice and uses that when it talks to HWComposer.
    
    A DisplayDevice doesn't have to have a HWComposer ID,
    in that case it just can't use h/w composer composition.
    
    Change-Id: Iec3d7ac92e0c22bf975052ae2847402f58bade71
    Update for cleanups in hwc interface
    
    Change-Id: I363fd8b085167a1af6c14b68012bda5c62bfe59f
    Pass the correct number of displays based on HWC version
    
    Change-Id: I27372f5d3102ad56f6d67722d631ae18d37f8330
    xdpi / ydpi were reported as 0
    
    Bug: 6975723
    Change-Id: Ia7fa37ec11e2308804f5034959a37e508d292d31
    Add a display parameter to HWComposer where needed
    
    - also replace C casts with C++ casts
    - only the interface is changed, HWComposer still doesn't
      fully handle multiple displays
    
    Change-Id: I48eb89bff2edb76bf1d4d41f46802b9b2a7166a8
    Changes to support multi-display HWC
    
    Change-Id: I07efff54f2980dcb013935747b03e099b8f1181b
    surfaceflinger: refactor FrambufferSurface
    
    This change refactors the FramebufferSurface class to inherit from the new
    ConsumerBase class.
    
    Bug: 6620200
    Change-Id: I46ec942ddb019658e3c5e79465548b171b2261f2
    remove a dependency of DisplayDevice on the refresh rate
    
    this remove a dependency (not all) on FramebufferSurface
    
    Change-Id: Ie07ce70760cdcedfb41b5b41bea8da45637bf474
    cleanups in preparation of bigger changes
    
    - fix typo drawForSreenshot misspelled
    - get rid of DisplayDeviceBase
    - removed unused or unneeded code
    - always pass a DisplayDevice to Layer methods that are called
      on a per-display basis (to make it clear that this could be
      called more than once per composition).
    
    Change-Id: Id948b7e09fe5c06db0e42d40d6ed75dd095c7f44
    Revert "Minimal changes to support multi-display HWC"
    
    This reverts commit bddd724b178b1263c16e41b564165fcd0e93ff83
    
    Change-Id: Ib7db20b5b3de4779b6e173473a33976ae398abd4
    Revert "Minimal changes to support multi-display HWC"
    
    This reverts commit bddd724b178b1263c16e41b564165fcd0e93ff83
    
    Change-Id: Ib7db20b5b3de4779b6e173473a33976ae398abd4
    Move eglSwapBuffers out of HWComposer
    
    Commit 8630320 moved the eglSwapBuffers fallback (for devices with no
    HWC implementation) from DisplayHardware to HWComposer. But HWComposer
    only knows about the framebuffer EGL display and surface handles if
    there is a HWC, so it was always passing bogus handles.
    
    This change moves the eglSwapBuffers fallback up to SurfaceFlinger,
    which has access to the framebuffer EGL handles.
    
    Bug: 6886613
    Change-Id: Iad3f5ff7c90ee48d7053999e6a4548d6794b6ebd
    Minimal changes to support multi-display HWC
    
    Change-Id: I5efea78ac381c3e3118e6e92b508f336233ac319
    SurfaceFlinger cleanup
    
    mostly refactored SurfaceFlinger.h, but also removed dead code.
    cleaned-up a few includes as well.
    
    Change-Id: Ib15f4ffe567912b61ee98aa076c6a283b72811b5
    surfaceflinger: call into hardware composer to blank screen
    
    Call into the new HWC blank operation to blank or unblank the screen.
    Legacy systems may have already blanked the screen via early suspend,
    and can choose to not implement the blank operation in their hardware
    composer implementation.
    
    Change-Id: Ib403c8c0e36367a2cfef3e1d124872fcfeb9e7cb
    Pass fence to HWC on first use of buffer
    
    Also do a CPU-wait on the fence before using it for GL composition.
    
    Change-Id: I0f645a42a44803276cae11b904e5a26d65871562
    Transfer HWC release fences to BufferQueue
    
    After a HWC set, each SurfaceFlinger Layer retrieves the release fence
    HWC returned and gives it to the layer's SurfaceTexture. The
    SurfaceTexture accumulates the fences into a merged fence until the
    next updateTexImage, then passes the merged fence to the BufferQueue
    in releaseBuffer.
    
    In a follow-on change, BufferQueue will return the fence along with
    the buffer slot in dequeueBuffer. For now, dequeueBuffer waits for the
    fence to signal before returning.
    
    The releaseFence default value for BufferQueue::releaseBuffer() is
    temporary to avoid transient build breaks with a multi-project
    checkin. It'll disappear in the next change.
    
    Change-Id: Iaa9a0d5775235585d9cbf453d3a64623d08013d9
    Add support for HWC_DEVICE_API_VERSION_1_0
    
    The acquire and release fences aren't yet used; this is just support
    for the new version and temporary backwards compatibility for older
    versions.
    
    Change-Id: Ia5ccc05a97c86f649042b9a35e11042fa0187e84
    refactor HWComposer to break dependency with the HAL headers
    
    HWComposer must abstract the HWC HAL entirely, so that the
    HAL can continue to evolve (and break binary compatibility)
    without breaking SurfaceFlinger. The HWC data structure had
    leaked outside of HWComposer, this is now fixed.
    
    We now have an abstract interface that provide all the
    needed functionality, HWCompose provides concrete
    implementations of it based on the the HWC version.
    
    Change-Id: I40c4676dc986b682ede5520a1c60efe64037b0bb
    set vsync power hint
    
    Change-Id: I28c2faf9ff584df3e74392712971cbcf75eb9e98
    Added vsync debugging information in dumpsys log
    
    Change-Id: I20ef05a73d89caaf6a70dc9ca25ada6e6a1f6ff9
    VSYNC handling cleanup
    
    Change-Id: I1376bf864c4e03c11fb6d1333a8b7cfdda08c9e4
    SurfaceFlinger now uses the new VSYNC HAL API.
    
    If h/w composer doesn't support vsync (version < 0.3) we
    "fake" it with a timer.
    
    Change-Id: I1e3be79f43c9631d1293ad7d6cf52f9bfc42d65b
    Add HWC vsync hook. Currently unused.
    
    Change-Id: I849d56f375813a044c5e2d0b25f791476a60fa01
    fix transition from full overlays to fb
    
    we need to clear the whole framebuffer in that situation because
    we can't trust the content of the FB when partial (fb preserving)
    updates are used.
    
    Bug: 5318492
    
    Change-Id: I3f0e01b0fb665a34e44d88ad9f0f54a5d990060b
    fix transition from full overlays to fb
    
    we need to clear the whole framebuffer in that situation because
    we can't trust the content of the FB when partial (fb preserving)
    updates are used.
    
    Bug: 5318492
    
    Change-Id: I3f0e01b0fb665a34e44d88ad9f0f54a5d990060b
    Improve SF dumpsys output wrt HWC
    
    Change-Id: Ibdb7930fa3b521bfd3f44750ed98cfd75f9a01fe
    fix a bug that caused the off animation to not show sometimes
    
    this happened when the overlays were in use, since the animation
    is rendered in the FB and the FB is not used.
    
    we now have a way to turn hwc off temporarily.
    
    Change-Id: I3385f0c25bb9cc91948e7b26e7cd31ed18c36ace
    fix a bug that caused the off animation to not show sometimes
    
    this happened when the overlays were in use, since the animation
    is rendered in the FB and the FB is not used.
    
    we now have a way to turn hwc off temporarily.
    
    Change-Id: I3385f0c25bb9cc91948e7b26e7cd31ed18c36ace
    Add a h/w composer API to allow the HAL to trigger a redraw
    
    This is useful in various situations, for instance if the HAL
    wants to change its compositing strategy.
    
    Bug: 4488017
    Change-Id: I5afc14e5917c6db7926d7417d48677d5aba50caa
    dump HWC state in dumpsys
    
    Change-Id: Ifbb38ca1ac9685776250e01c8d02021b35af72cf
    surfaceflinger: give hwcomposer a chance to release buffers
    
    Change-Id: I605fa779702022865dd58df3b36f37c2644ade36
    revert hwcomposer HAL changes. DO NOT MERGE.
    
    This reverts commit:
    94364b91a2894bf037b8beb027132fbb812e1434
    f8e705dea48f77f1c2532fdbadd4997dd1851af0
    b59beb5ca68d0228f60dda60d85e2d0226b33215
    e0d5f5bcf5a8b26f4ad75f549cbf380b2c9faf20
    Fix a couple issues with the new hwcomposer HAL
    
    - we now clear the framebuffer upon request from the HAL
    - the HAL list size could get out of sync with reality
    - there was also an issue where sometime we could run past the list
    
    Change-Id: Ic3a34314aed24181f2d8cc787096af83c046ef27
    call into hwcomposer HAL when present
    
    Change-Id: I70f31c69a9436a43860e78977442863ecba6d27b
    fix SF buffer cropping
    
    When a buffer had a crop (meaning its content is scaled to the window size)
    and a window crop was defined, the resulting crop couldn't be expressed
    properly because h/w composer's API was limited to integers, since
    this is fixed in h/w composer 1.3, we take adventage of this to
    make sure we get the correct crop.
    
    this bug could result in the buffer being scaled by an incorrect ratio and
    be slightly offset; moreover, it would produce different results from the
    GL code path, which is always correct.
    
    Change-Id: I8e20e00b6e26177d14f4ab4d2cd581e26c818892
    add libsurfaceflinger_ddmconnection for PDK build
    
    - the library is dlopened from libsurfaceflinger
    - the library built only when libnativehelper exists
    
    Bug: 7089510
    Change-Id: Ib3ea1029d7e8f6e055f4b759d0bf68f5123fa8a1
    as a debug option SrufaceFlinger can now connect to DDMS
    
    this is disabled by default. To enable:
      setprop debug.sf.ddms 1
    
    this debug option requires to restart SurfaceFlinger
    
    Change-Id: Ic2f8050b29911b55bcd21721648b6978700c277d
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    Remove frameworks/base/im since these stuff are only used by IM app
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Add rotation to surfaceflingers screen cap.
    
    + This is needed so that activity manager does not
      have to do cpu side rotations when capturing recents
      thumbnails.
    
    Change-Id: If998008e675ad01305db8399fd643cf4608b7025
    SurfaceFlinger: Add sourceCrop to screenshot
    
    Adds a sourceCrop Rect parameter to screenshot commands, which allows
    clients to capture only a portion of the screen instead of the whole
    screen.
    
    Bug: 15137922
    Change-Id: I629447573cd34ffb96334cde7ba02490b9ea06d8
    Use black for blackout layer
    
    SurfaceFlinger was rendering dark purple for secure content, which
    showed up when we took a screen shot for the orientation change
    animation.  Use black instead.
    
    Bug 11157921
    
    Change-Id: I3895e8168891d49dc5b84eed599bcd0a303bb70a
    color blindness enhancement
    
    This is an attempt at improving the experience of
    users with color vision impairement.
    
    At this time this feature can only be enabled for
    debugging:
    
      adb shell service call SurfaceFlinger 1014 i32 PARAM
    
      with PARAM:
       0 : disabled
       1 : protanomaly/protanopia simulation
       2 : deuteranomaly/deuteranopia simulation
       3 : tritanopia/tritanomaly simulation
      11, 12, 13: same as above w/ attempted correction/enhancement
    
    The enhancement algorithm tries to spread the "error"
    such that tones that would otherwise appear similar can be
    distinguished.
    
    Bug: 9465644
    
    Change-Id: I860f7eed0cb81f54ef9cf24ad78155b6395ade48
    minor clean-up of the GLESRenderer
    
    Change-Id: I978dea25b7687fbbbb283f09c24e115d9bad49a2
    switch to use mat4
    
    Change-Id: I8283a989cfd2b74d53958150bc90298bc083fee7
    fix DimLayer in GLES2.0 SF
    
    DimLayer state wasn't initialized properly.
    
    Bug: 10442967
    Change-Id: I384c1d85c58c96ae29d5daa1fabee9f4ce003501
    Encapsulate textures into their own Texture class
    
    the main reason for doing this is so that we can have
    access to informations about a texture (like its dimension)
    close to where we generate and use shaders in ES 2.0.
    Previously, there wasn't any way to get to a texture's size
    from a RenderEngine implementation.
    
    Bug: 8679321
    
    Change-Id: I388b338a70d07e3e8177dde248710ea1e4c82dff
    Fix ES2 composition on some devices
    
    - turns out fragment shaders don't have default precision by default
    - GLES 1.x extensions that became core in GLES 2.0 don't always work
      as extensions in GLES 2.0 (!)
    
    Bug: 8679321
    Change-Id: I5a4a93e158247910399325a965af5d2e3bbece9b
    don't reallocate the mesh each time we use it
    
    the Mesh object can be part of each Layer (at least currently).
    also reworked the Mesh code a bit to make it easier to access
    the vertex data.
    
    Change-Id: I0490851ba898f0aa2e55b62958dcd8bdb535e98b
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    Refactor SF. Move all GL operations in their own class.
    
    this is the first step to add support for GLES 2.x, this
    change breaks the dependency of SF on GLES 1.x by moving
    all operation into their own class.
    
    Bug: 8679321
    
    Change-Id: I0d2741eca2cefe67dfd9cf837cac10c4d126928b
    don't actuate vsync hint when not needed
    
    Change-Id: I61c43dd76041816ab8cbe9aeaa55c11c1479ed03
    set vsync power hint
    
    Change-Id: I28c2faf9ff584df3e74392712971cbcf75eb9e98
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add rotation to surfaceflingers screen cap.
    
    + This is needed so that activity manager does not
      have to do cpu side rotations when capturing recents
      thumbnails.
    
    Change-Id: If998008e675ad01305db8399fd643cf4608b7025
    SurfaceFlinger: Add sourceCrop to screenshot
    
    Adds a sourceCrop Rect parameter to screenshot commands, which allows
    clients to capture only a portion of the screen instead of the whole
    screen.
    
    Bug: 15137922
    Change-Id: I629447573cd34ffb96334cde7ba02490b9ea06d8
    color blindness enhancement
    
    This is an attempt at improving the experience of
    users with color vision impairement.
    
    At this time this feature can only be enabled for
    debugging:
    
      adb shell service call SurfaceFlinger 1014 i32 PARAM
    
      with PARAM:
       0 : disabled
       1 : protanomaly/protanopia simulation
       2 : deuteranomaly/deuteranopia simulation
       3 : tritanopia/tritanomaly simulation
      11, 12, 13: same as above w/ attempted correction/enhancement
    
    The enhancement algorithm tries to spread the "error"
    such that tones that would otherwise appear similar can be
    distinguished.
    
    Bug: 9465644
    
    Change-Id: I860f7eed0cb81f54ef9cf24ad78155b6395ade48
    minor clean-up of the GLESRenderer
    
    Change-Id: I978dea25b7687fbbbb283f09c24e115d9bad49a2
    Encapsulate textures into their own Texture class
    
    the main reason for doing this is so that we can have
    access to informations about a texture (like its dimension)
    close to where we generate and use shaders in ES 2.0.
    Previously, there wasn't any way to get to a texture's size
    from a RenderEngine implementation.
    
    Bug: 8679321
    
    Change-Id: I388b338a70d07e3e8177dde248710ea1e4c82dff
    Fix ES2 composition on some devices
    
    - turns out fragment shaders don't have default precision by default
    - GLES 1.x extensions that became core in GLES 2.0 don't always work
      as extensions in GLES 2.0 (!)
    
    Bug: 8679321
    Change-Id: I5a4a93e158247910399325a965af5d2e3bbece9b
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    Refactor SF. Move all GL operations in their own class.
    
    this is the first step to add support for GLES 2.x, this
    change breaks the dependency of SF on GLES 1.x by moving
    all operation into their own class.
    
    Bug: 8679321
    
    Change-Id: I0d2741eca2cefe67dfd9cf837cac10c4d126928b
    color blindness enhancement
    
    This is an attempt at improving the experience of
    users with color vision impairement.
    
    At this time this feature can only be enabled for
    debugging:
    
      adb shell service call SurfaceFlinger 1014 i32 PARAM
    
      with PARAM:
       0 : disabled
       1 : protanomaly/protanopia simulation
       2 : deuteranomaly/deuteranopia simulation
       3 : tritanopia/tritanomaly simulation
      11, 12, 13: same as above w/ attempted correction/enhancement
    
    The enhancement algorithm tries to spread the "error"
    such that tones that would otherwise appear similar can be
    distinguished.
    
    Bug: 9465644
    
    Change-Id: I860f7eed0cb81f54ef9cf24ad78155b6395ade48
    switch to use mat4
    
    Change-Id: I8283a989cfd2b74d53958150bc90298bc083fee7
    Encapsulate textures into their own Texture class
    
    the main reason for doing this is so that we can have
    access to informations about a texture (like its dimension)
    close to where we generate and use shaders in ES 2.0.
    Previously, there wasn't any way to get to a texture's size
    from a RenderEngine implementation.
    
    Bug: 8679321
    
    Change-Id: I388b338a70d07e3e8177dde248710ea1e4c82dff
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    Build fix for size_t on 64bit.
    
    Change-Id: Ic16895b30d78ba8a635b709adbae31a590501b20
    Implement per-display EGLConfig and configless EGLContext
    
    Bug: 12230666
    Change-Id: Icca608b108cbdcab9cf01a9236d8cdbda000a836
    Signed-off-by: Jesse Hall <jessehall@google.com>
    Move EGLConfig selection to RenderEngine
    
    Bug: 12230666
    Change-Id: I8d1111a7e0fd9d9e2525e6a80da8ce46d7dd085d
    Signed-off-by: Jesse Hall <jessehall@google.com>
    reinstate black-screenshot debugging code
    
    turned off by default.
    
    Bug: 10809349
    Change-Id: I3e6b8c7860e6b0e122b8f07de4020967cd1f005c
    Fix GLES context version selection
    
    Explicitly selects an ES 2.0 config first, then an ES 1.x config,
    before attempting the fallback path for the emulator.
    
    Bug: 10820214
    Change-Id: Ia8cc084c02a0e3de910def024da8a08d02bbd89d
    color blindness enhancement
    
    This is an attempt at improving the experience of
    users with color vision impairement.
    
    At this time this feature can only be enabled for
    debugging:
    
      adb shell service call SurfaceFlinger 1014 i32 PARAM
    
      with PARAM:
       0 : disabled
       1 : protanomaly/protanopia simulation
       2 : deuteranomaly/deuteranopia simulation
       3 : tritanopia/tritanomaly simulation
      11, 12, 13: same as above w/ attempted correction/enhancement
    
    The enhancement algorithm tries to spread the "error"
    such that tones that would otherwise appear similar can be
    distinguished.
    
    Bug: 9465644
    
    Change-Id: I860f7eed0cb81f54ef9cf24ad78155b6395ade48
    minor clean-up of the GLESRenderer
    
    Change-Id: I978dea25b7687fbbbb283f09c24e115d9bad49a2
    Fix ES2 composition on some devices
    
    - turns out fragment shaders don't have default precision by default
    - GLES 1.x extensions that became core in GLES 2.0 don't always work
      as extensions in GLES 2.0 (!)
    
    Bug: 8679321
    Change-Id: I5a4a93e158247910399325a965af5d2e3bbece9b
    Disable GLES 2.x rendering
    
    Bug 10340705
    
    Change-Id: I91f3baf0d79655d8d031c100d0b116f745c2fbef
    Disable GLES 2.x rendering
    
    Bug 10340705
    
    Change-Id: I91f3baf0d79655d8d031c100d0b116f745c2fbef
    don't reallocate the mesh each time we use it
    
    the Mesh object can be part of each Layer (at least currently).
    also reworked the Mesh code a bit to make it easier to access
    the vertex data.
    
    Change-Id: I0490851ba898f0aa2e55b62958dcd8bdb535e98b
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    Refactor SF. Move all GL operations in their own class.
    
    this is the first step to add support for GLES 2.x, this
    change breaks the dependency of SF on GLES 1.x by moving
    all operation into their own class.
    
    Bug: 8679321
    
    Change-Id: I0d2741eca2cefe67dfd9cf837cac10c4d126928b
    don't reallocate the mesh each time we use it
    
    the Mesh object can be part of each Layer (at least currently).
    also reworked the Mesh code a bit to make it easier to access
    the vertex data.
    
    Change-Id: I0490851ba898f0aa2e55b62958dcd8bdb535e98b
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    color blindness enhancement
    
    This is an attempt at improving the experience of
    users with color vision impairement.
    
    At this time this feature can only be enabled for
    debugging:
    
      adb shell service call SurfaceFlinger 1014 i32 PARAM
    
      with PARAM:
       0 : disabled
       1 : protanomaly/protanopia simulation
       2 : deuteranomaly/deuteranopia simulation
       3 : tritanopia/tritanomaly simulation
      11, 12, 13: same as above w/ attempted correction/enhancement
    
    The enhancement algorithm tries to spread the "error"
    such that tones that would otherwise appear similar can be
    distinguished.
    
    Bug: 9465644
    
    Change-Id: I860f7eed0cb81f54ef9cf24ad78155b6395ade48
    switch to use mat4
    
    Change-Id: I8283a989cfd2b74d53958150bc90298bc083fee7
    Encapsulate textures into their own Texture class
    
    the main reason for doing this is so that we can have
    access to informations about a texture (like its dimension)
    close to where we generate and use shaders in ES 2.0.
    Previously, there wasn't any way to get to a texture's size
    from a RenderEngine implementation.
    
    Bug: 8679321
    
    Change-Id: I388b338a70d07e3e8177dde248710ea1e4c82dff
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    switch to use mat4
    
    Change-Id: I8283a989cfd2b74d53958150bc90298bc083fee7
    Encapsulate textures into their own Texture class
    
    the main reason for doing this is so that we can have
    access to informations about a texture (like its dimension)
    close to where we generate and use shaders in ES 2.0.
    Previously, there wasn't any way to get to a texture's size
    from a RenderEngine implementation.
    
    Bug: 8679321
    
    Change-Id: I388b338a70d07e3e8177dde248710ea1e4c82dff
    Generate the SurfaceFlinger shader cache on initialization
    
    Blobcache is not yet enabled for surfaceflinger (as it should be).
    As a temporary workaround, generate all needed shaders during
    surfaceflinger initialization instead of doing the compilation
    on-demand during ui transitions.
    
    Change-Id: I14455b20a3f85f177d85c9c8b76d8ccc35379b39
    Simplify color adjustment using homogeneous coordinates
    
    Change-Id: Ie31abacb134c29d82a6041fa7d521f68a1a273af
    Add API for pushing color transforms to SurfaceFlinger
    
    BUG: 9057596
    Change-Id: Iea0953366eac875b7968897a75472c25a137edb5
    color blindness enhancement
    
    This is an attempt at improving the experience of
    users with color vision impairement.
    
    At this time this feature can only be enabled for
    debugging:
    
      adb shell service call SurfaceFlinger 1014 i32 PARAM
    
      with PARAM:
       0 : disabled
       1 : protanomaly/protanopia simulation
       2 : deuteranomaly/deuteranopia simulation
       3 : tritanopia/tritanomaly simulation
      11, 12, 13: same as above w/ attempted correction/enhancement
    
    The enhancement algorithm tries to spread the "error"
    such that tones that would otherwise appear similar can be
    distinguished.
    
    Bug: 9465644
    
    Change-Id: I860f7eed0cb81f54ef9cf24ad78155b6395ade48
    Encapsulate textures into their own Texture class
    
    the main reason for doing this is so that we can have
    access to informations about a texture (like its dimension)
    close to where we generate and use shaders in ES 2.0.
    Previously, there wasn't any way to get to a texture's size
    from a RenderEngine implementation.
    
    Bug: 8679321
    
    Change-Id: I388b338a70d07e3e8177dde248710ea1e4c82dff
    Simplify handling of opaque layers in shader generation
    
    just ensure the alpha value is 1.0 in the opaque case
    when reading the color from the texture or the
    global color.
    
    Bug: 8679321
    
    Change-Id: Ia38b30e97c3bce5a2d534a40c0d66e0bfc3ea40d
    Fix ES2 composition on some devices
    
    - turns out fragment shaders don't have default precision by default
    - GLES 1.x extensions that became core in GLES 2.0 don't always work
      as extensions in GLES 2.0 (!)
    
    Bug: 8679321
    Change-Id: I5a4a93e158247910399325a965af5d2e3bbece9b
    Initialize mIndent
    
    Bug 10334731
    
    Change-Id: Ia3aa118a1516cc480b0d85179b78c4447f982dd6
    Initialize mIndent
    
    Bug 10334731
    
    Change-Id: Ia3aa118a1516cc480b0d85179b78c4447f982dd6
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    Add rotation to surfaceflingers screen cap.
    
    + This is needed so that activity manager does not
      have to do cpu side rotations when capturing recents
      thumbnails.
    
    Change-Id: If998008e675ad01305db8399fd643cf4608b7025
    SurfaceFlinger: Add sourceCrop to screenshot
    
    Adds a sourceCrop Rect parameter to screenshot commands, which allows
    clients to capture only a portion of the screen instead of the whole
    screen.
    
    Bug: 15137922
    Change-Id: I629447573cd34ffb96334cde7ba02490b9ea06d8
    color blindness enhancement
    
    This is an attempt at improving the experience of
    users with color vision impairement.
    
    At this time this feature can only be enabled for
    debugging:
    
      adb shell service call SurfaceFlinger 1014 i32 PARAM
    
      with PARAM:
       0 : disabled
       1 : protanomaly/protanopia simulation
       2 : deuteranomaly/deuteranopia simulation
       3 : tritanopia/tritanomaly simulation
      11, 12, 13: same as above w/ attempted correction/enhancement
    
    The enhancement algorithm tries to spread the "error"
    such that tones that would otherwise appear similar can be
    distinguished.
    
    Bug: 9465644
    
    Change-Id: I860f7eed0cb81f54ef9cf24ad78155b6395ade48
    minor clean-up of the GLESRenderer
    
    Change-Id: I978dea25b7687fbbbb283f09c24e115d9bad49a2
    Encapsulate textures into their own Texture class
    
    the main reason for doing this is so that we can have
    access to informations about a texture (like its dimension)
    close to where we generate and use shaders in ES 2.0.
    Previously, there wasn't any way to get to a texture's size
    from a RenderEngine implementation.
    
    Bug: 8679321
    
    Change-Id: I388b338a70d07e3e8177dde248710ea1e4c82dff
    Fix ES2 composition on some devices
    
    - turns out fragment shaders don't have default precision by default
    - GLES 1.x extensions that became core in GLES 2.0 don't always work
      as extensions in GLES 2.0 (!)
    
    Bug: 8679321
    Change-Id: I5a4a93e158247910399325a965af5d2e3bbece9b
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    Refactor SF. Move all GL operations in their own class.
    
    this is the first step to add support for GLES 2.x, this
    change breaks the dependency of SF on GLES 1.x by moving
    all operation into their own class.
    
    Bug: 8679321
    
    Change-Id: I0d2741eca2cefe67dfd9cf837cac10c4d126928b
    switch to use mat4
    
    Change-Id: I8283a989cfd2b74d53958150bc90298bc083fee7
    Encapsulate textures into their own Texture class
    
    the main reason for doing this is so that we can have
    access to informations about a texture (like its dimension)
    close to where we generate and use shaders in ES 2.0.
    Previously, there wasn't any way to get to a texture's size
    from a RenderEngine implementation.
    
    Bug: 8679321
    
    Change-Id: I388b338a70d07e3e8177dde248710ea1e4c82dff
    Refactor SF. Move all GL operations in their own class.
    
    this is the first step to add support for GLES 2.x, this
    change breaks the dependency of SF on GLES 1.x by moving
    all operation into their own class.
    
    Bug: 8679321
    
    Change-Id: I0d2741eca2cefe67dfd9cf837cac10c4d126928b
    add support for [1974164] Be able to take a screen shot on the device
    
    screenshots are taken using ISurfaceComposer::captureScreen() which returns
    the size of the screenshot and an IMemoryHeap containing the data.
    screenshots have limitations:
    - they will always fail if a secure window is up on screen
    - require GL_OES_framebuffer_object extension
    - in some situation, video planes won't been captured
    
    Change-Id: I741c68a2d2984fb139039301c3349e6780e2cd58
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    Revert "Revert "fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger""
    
    This reverts commit 330dd304a471d260a73e342a240921c03c825f99.
    Revert "fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger"
    
    This reverts commit 081bc5c47d8a980e6eafa70ddafcd89981586391.
    Revert "am 256fc043: am 081bc5c4: fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger"
    
    This reverts commit e02dec8c4cbab17d09983af1328308b8aa61ef85, reversing
    changes made to 6d7a052fb04b251c517d0a9049b8d5d7408ce8c0.
    
    Bug: 2798567
    fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger
    
    Make sure to not use GL_TEXTURE_EXTERNAL when it's not supported
    by the GL. The error was harmless, but annoying.
    
    Change-Id: I571a9a9b05d35da51420950a6a6e95629067efd0
    color blindness enhancement
    
    This is an attempt at improving the experience of
    users with color vision impairement.
    
    At this time this feature can only be enabled for
    debugging:
    
      adb shell service call SurfaceFlinger 1014 i32 PARAM
    
      with PARAM:
       0 : disabled
       1 : protanomaly/protanopia simulation
       2 : deuteranomaly/deuteranopia simulation
       3 : tritanopia/tritanomaly simulation
      11, 12, 13: same as above w/ attempted correction/enhancement
    
    The enhancement algorithm tries to spread the "error"
    such that tones that would otherwise appear similar can be
    distinguished.
    
    Bug: 9465644
    
    Change-Id: I860f7eed0cb81f54ef9cf24ad78155b6395ade48
    don't reallocate the mesh each time we use it
    
    the Mesh object can be part of each Layer (at least currently).
    also reworked the Mesh code a bit to make it easier to access
    the vertex data.
    
    Change-Id: I0490851ba898f0aa2e55b62958dcd8bdb535e98b
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    Refactor SF. Move all GL operations in their own class.
    
    this is the first step to add support for GLES 2.x, this
    change breaks the dependency of SF on GLES 1.x by moving
    all operation into their own class.
    
    Bug: 8679321
    
    Change-Id: I0d2741eca2cefe67dfd9cf837cac10c4d126928b
    color blindness enhancement
    
    This is an attempt at improving the experience of
    users with color vision impairement.
    
    At this time this feature can only be enabled for
    debugging:
    
      adb shell service call SurfaceFlinger 1014 i32 PARAM
    
      with PARAM:
       0 : disabled
       1 : protanomaly/protanopia simulation
       2 : deuteranomaly/deuteranopia simulation
       3 : tritanopia/tritanomaly simulation
      11, 12, 13: same as above w/ attempted correction/enhancement
    
    The enhancement algorithm tries to spread the "error"
    such that tones that would otherwise appear similar can be
    distinguished.
    
    Bug: 9465644
    
    Change-Id: I860f7eed0cb81f54ef9cf24ad78155b6395ade48
    switch to use mat4
    
    Change-Id: I8283a989cfd2b74d53958150bc90298bc083fee7
    Encapsulate textures into their own Texture class
    
    the main reason for doing this is so that we can have
    access to informations about a texture (like its dimension)
    close to where we generate and use shaders in ES 2.0.
    Previously, there wasn't any way to get to a texture's size
    from a RenderEngine implementation.
    
    Bug: 8679321
    
    Change-Id: I388b338a70d07e3e8177dde248710ea1e4c82dff
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    Add rotation to surfaceflingers screen cap.
    
    + This is needed so that activity manager does not
      have to do cpu side rotations when capturing recents
      thumbnails.
    
    Change-Id: If998008e675ad01305db8399fd643cf4608b7025
    SurfaceFlinger: Add sourceCrop to screenshot
    
    Adds a sourceCrop Rect parameter to screenshot commands, which allows
    clients to capture only a portion of the screen instead of the whole
    screen.
    
    Bug: 15137922
    Change-Id: I629447573cd34ffb96334cde7ba02490b9ea06d8
    Implement per-display EGLConfig and configless EGLContext
    
    Bug: 12230666
    Change-Id: Icca608b108cbdcab9cf01a9236d8cdbda000a836
    Signed-off-by: Jesse Hall <jessehall@google.com>
    Move EGLConfig selection to RenderEngine
    
    Bug: 12230666
    Change-Id: I8d1111a7e0fd9d9e2525e6a80da8ce46d7dd085d
    Signed-off-by: Jesse Hall <jessehall@google.com>
    reinstate black-screenshot debugging code
    
    turned off by default.
    
    Bug: 10809349
    Change-Id: I3e6b8c7860e6b0e122b8f07de4020967cd1f005c
    color blindness enhancement
    
    This is an attempt at improving the experience of
    users with color vision impairement.
    
    At this time this feature can only be enabled for
    debugging:
    
      adb shell service call SurfaceFlinger 1014 i32 PARAM
    
      with PARAM:
       0 : disabled
       1 : protanomaly/protanopia simulation
       2 : deuteranomaly/deuteranopia simulation
       3 : tritanopia/tritanomaly simulation
      11, 12, 13: same as above w/ attempted correction/enhancement
    
    The enhancement algorithm tries to spread the "error"
    such that tones that would otherwise appear similar can be
    distinguished.
    
    Bug: 9465644
    
    Change-Id: I860f7eed0cb81f54ef9cf24ad78155b6395ade48
    minor clean-up of the GLESRenderer
    
    Change-Id: I978dea25b7687fbbbb283f09c24e115d9bad49a2
    Encapsulate textures into their own Texture class
    
    the main reason for doing this is so that we can have
    access to informations about a texture (like its dimension)
    close to where we generate and use shaders in ES 2.0.
    Previously, there wasn't any way to get to a texture's size
    from a RenderEngine implementation.
    
    Bug: 8679321
    
    Change-Id: I388b338a70d07e3e8177dde248710ea1e4c82dff
    Fix ES2 composition on some devices
    
    - turns out fragment shaders don't have default precision by default
    - GLES 1.x extensions that became core in GLES 2.0 don't always work
      as extensions in GLES 2.0 (!)
    
    Bug: 8679321
    Change-Id: I5a4a93e158247910399325a965af5d2e3bbece9b
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    Refactor SF. Move all GL operations in their own class.
    
    this is the first step to add support for GLES 2.x, this
    change breaks the dependency of SF on GLES 1.x by moving
    all operation into their own class.
    
    Bug: 8679321
    
    Change-Id: I0d2741eca2cefe67dfd9cf837cac10c4d126928b
    color blindness enhancement
    
    This is an attempt at improving the experience of
    users with color vision impairement.
    
    At this time this feature can only be enabled for
    debugging:
    
      adb shell service call SurfaceFlinger 1014 i32 PARAM
    
      with PARAM:
       0 : disabled
       1 : protanomaly/protanopia simulation
       2 : deuteranomaly/deuteranopia simulation
       3 : tritanopia/tritanomaly simulation
      11, 12, 13: same as above w/ attempted correction/enhancement
    
    The enhancement algorithm tries to spread the "error"
    such that tones that would otherwise appear similar can be
    distinguished.
    
    Bug: 9465644
    
    Change-Id: I860f7eed0cb81f54ef9cf24ad78155b6395ade48
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    Generate the SurfaceFlinger shader cache on initialization
    
    Blobcache is not yet enabled for surfaceflinger (as it should be).
    As a temporary workaround, generate all needed shaders during
    surfaceflinger initialization instead of doing the compilation
    on-demand during ui transitions.
    
    Change-Id: I14455b20a3f85f177d85c9c8b76d8ccc35379b39
    color blindness enhancement
    
    This is an attempt at improving the experience of
    users with color vision impairement.
    
    At this time this feature can only be enabled for
    debugging:
    
      adb shell service call SurfaceFlinger 1014 i32 PARAM
    
      with PARAM:
       0 : disabled
       1 : protanomaly/protanopia simulation
       2 : deuteranomaly/deuteranopia simulation
       3 : tritanopia/tritanomaly simulation
      11, 12, 13: same as above w/ attempted correction/enhancement
    
    The enhancement algorithm tries to spread the "error"
    such that tones that would otherwise appear similar can be
    distinguished.
    
    Bug: 9465644
    
    Change-Id: I860f7eed0cb81f54ef9cf24ad78155b6395ade48
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    Add rotation to surfaceflingers screen cap.
    
    + This is needed so that activity manager does not
      have to do cpu side rotations when capturing recents
      thumbnails.
    
    Change-Id: If998008e675ad01305db8399fd643cf4608b7025
    SurfaceFlinger: Add sourceCrop to screenshot
    
    Adds a sourceCrop Rect parameter to screenshot commands, which allows
    clients to capture only a portion of the screen instead of the whole
    screen.
    
    Bug: 15137922
    Change-Id: I629447573cd34ffb96334cde7ba02490b9ea06d8
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    Use black for blackout layer
    
    SurfaceFlinger was rendering dark purple for secure content, which
    showed up when we took a screen shot for the orientation change
    animation.  Use black instead.
    
    Bug 11157921
    
    Change-Id: I3895e8168891d49dc5b84eed599bcd0a303bb70a
    color blindness enhancement
    
    This is an attempt at improving the experience of
    users with color vision impairement.
    
    At this time this feature can only be enabled for
    debugging:
    
      adb shell service call SurfaceFlinger 1014 i32 PARAM
    
      with PARAM:
       0 : disabled
       1 : protanomaly/protanopia simulation
       2 : deuteranomaly/deuteranopia simulation
       3 : tritanopia/tritanomaly simulation
      11, 12, 13: same as above w/ attempted correction/enhancement
    
    The enhancement algorithm tries to spread the "error"
    such that tones that would otherwise appear similar can be
    distinguished.
    
    Bug: 9465644
    
    Change-Id: I860f7eed0cb81f54ef9cf24ad78155b6395ade48
    minor clean-up of the GLESRenderer
    
    Change-Id: I978dea25b7687fbbbb283f09c24e115d9bad49a2
    switch to use mat4
    
    Change-Id: I8283a989cfd2b74d53958150bc90298bc083fee7
    Encapsulate textures into their own Texture class
    
    the main reason for doing this is so that we can have
    access to informations about a texture (like its dimension)
    close to where we generate and use shaders in ES 2.0.
    Previously, there wasn't any way to get to a texture's size
    from a RenderEngine implementation.
    
    Bug: 8679321
    
    Change-Id: I388b338a70d07e3e8177dde248710ea1e4c82dff
    Fix ES2 composition on some devices
    
    - turns out fragment shaders don't have default precision by default
    - GLES 1.x extensions that became core in GLES 2.0 don't always work
      as extensions in GLES 2.0 (!)
    
    Bug: 8679321
    Change-Id: I5a4a93e158247910399325a965af5d2e3bbece9b
    don't reallocate the mesh each time we use it
    
    the Mesh object can be part of each Layer (at least currently).
    also reworked the Mesh code a bit to make it easier to access
    the vertex data.
    
    Change-Id: I0490851ba898f0aa2e55b62958dcd8bdb535e98b
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    Refactor SF. Move all GL operations in their own class.
    
    this is the first step to add support for GLES 2.x, this
    change breaks the dependency of SF on GLES 1.x by moving
    all operation into their own class.
    
    Bug: 8679321
    
    Change-Id: I0d2741eca2cefe67dfd9cf837cac10c4d126928b
    Refactor SF. Move all GL operations in their own class.
    
    this is the first step to add support for GLES 2.x, this
    change breaks the dependency of SF on GLES 1.x by moving
    all operation into their own class.
    
    Bug: 8679321
    
    Change-Id: I0d2741eca2cefe67dfd9cf837cac10c4d126928b
    don't use compile-time configuration of libgui as much as possible
    
    We now detect at runtime which sync features to use, which
    allows us to remove a lot of the compile-time configuration
    options. There  is still one option though, to disable
    KHR_fence_sync on some devices (which are more efficient
    without it).
    
    - added a backdoor to get the vendor's EGL strings
    
    the new logic is:
    - use always ANDROID_native_fence_sync if available
    - fallback to KHR_fence_sync if available and not disabled
      by the compile-time option
    - use KHR_wait_sync if available and either of the above is
      enabled
    
    Change-Id: I9c4b49d9ff1151faf902cc93bd53ea5f205aaabf
    fix uninitialized attribute in SurfaceFlinger
    
    Change-Id: I8277f67e297a8b6a99195387060d03154a2cd929
    add support for [1974164] Be able to take a screen shot on the device
    
    screenshots are taken using ISurfaceComposer::captureScreen() which returns
    the size of the screenshot and an IMemoryHeap containing the data.
    screenshots have limitations:
    - they will always fail if a secure window is up on screen
    - require GL_OES_framebuffer_object extension
    - in some situation, video planes won't been captured
    
    Change-Id: I741c68a2d2984fb139039301c3349e6780e2cd58
    surfaceflinger / GL extensions cleanup
    
    Add correct enumerants for OES_EGL_image_external to glext.h.
    SurfaceFlinger now checks for the correct extension name.
    
    Change-Id: I2ba2728a01fa2260bd086d2df4316c68f694a9b1
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    Revert "Revert "fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger""
    
    This reverts commit 330dd304a471d260a73e342a240921c03c825f99.
    Revert "fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger"
    
    This reverts commit 081bc5c47d8a980e6eafa70ddafcd89981586391.
    Revert "am 256fc043: am 081bc5c4: fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger"
    
    This reverts commit e02dec8c4cbab17d09983af1328308b8aa61ef85, reversing
    changes made to 6d7a052fb04b251c517d0a9049b8d5d7408ce8c0.
    
    Bug: 2798567
    fix [2793164] Spam 2x/second with TOT master in SurfaceFlinger
    
    Make sure to not use GL_TEXTURE_EXTERNAL when it's not supported
    by the GL. The error was harmless, but annoying.
    
    Change-Id: I571a9a9b05d35da51420950a6a6e95629067efd0
    remove libandroid.so from targets that don't need it
    
    pdk builds don't have libandroid.so available.  Remove it from
    projects that aren't actually using it.
    
    Change-Id: I100dc84aaf8160c1062a122ef6d5aec0534d73fa
    SurfaceFlinger: add some layer update tests
    
    This change adds two tests for SurfaceFlinger's behavior when updating
    the position and size of a layer.
    
    Change-Id: Id5e3ca1d7e629a3bd2c2d28275d80c7f9256d6da
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: Ibed34175ae273608393aaa5f0a7df207dc40d709
    Banish DisplayID from the SurfaceFlinger API.
    
    Use only display tokens in the API to refer to new displays.
    
    Don't require the caller to specify the display when creating
    a surface (since in general a surface could be shown on
    any display).
    
    This is intended to be a minimum change just to update the API.
    Note that SurfaceFlinger still uses DisplayID in a few places
    internally that might cause some features not to work properly
    when there are multiple displays (LayerScreenshot, for example).
    
    Change-Id: I3d91eec2da406eefd97bcd53655d403ad865a7e6
    get rid of the shared-memory control block
    
    Change-Id: If814060aca1d2ff2619d4adcd57296983d207f7f
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    SurfaceFlinger: add some layer update tests
    
    This change adds two tests for SurfaceFlinger's behavior when updating
    the position and size of a layer.
    
    Change-Id: Id5e3ca1d7e629a3bd2c2d28275d80c7f9256d6da
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    merge libsurfaceflinger_client into libgui
    
    this is the first step in unifying surfacetexture and surface.
    for this reason the header files were not moved, as most of them
    will eventually go away.
    
    NOTE: currently we keep libsurfaceflinger_client.so as an empty
    library to workaround prebuilt binaries wrongly linking against
    it.
    
    Change-Id: I130f0de2428e8579033dc41394d093f4e1431a00
    fix [2873058] Surface::dequeueBuffer blocks on last buffer, i.e. cannot dequeue all allocated buffers at once.
    
    this situation happened when the last buffer needed to be resized
    (or allocated, the first time). the assumption was that the buffer
    was in use by SF itself as the current buffer (obviously, this
    assumption made no sense when the buffer had never been allocated, btw).
    
    the system would wait until some other buffer became the "front" buffer.
    
    we fix this problem by entirely removing the requirement that the
    buffer being resized cannot be the front buffer. instead, we just
    allocate a new buffer and replace the front buffer by the new one.
    
    the downside is that this uses more memory (an extra buffer) for a
    brief amount of time while the old buffer is being reallocated and
    before it has actually been replaced.
    
    Change-Id: I022e4621209474ceb1c671b23deb4188eaaa7285
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    fix an issue with vsync event delivery
    
    vsync events were sometimes delivered to connected
    client who didn't request them. this happened if
    another client requested the delivery and that client
    was first in the client list.
    
    also fix the vsync test which didn't request any events as
    well as DisplayEventReveiver documentation which was misleading
    about the necessity to request vsync events.
    
    Change-Id: Ie990fda3f337f8f0042745c4b2cde67936c45686
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    merge libsurfaceflinger_client into libgui
    
    this is the first step in unifying surfacetexture and surface.
    for this reason the header files were not moved, as most of them
    will eventually go away.
    
    NOTE: currently we keep libsurfaceflinger_client.so as an empty
    library to workaround prebuilt binaries wrongly linking against
    it.
    
    Change-Id: I130f0de2428e8579033dc41394d093f4e1431a00
    simple test app for screen capture API
    
    Change-Id: I1f7c453508ccfd4faaa8b1279968a358ce3f1e5a
    fix [2873058] Surface::dequeueBuffer blocks on last buffer, i.e. cannot dequeue all allocated buffers at once.
    
    this situation happened when the last buffer needed to be resized
    (or allocated, the first time). the assumption was that the buffer
    was in use by SF itself as the current buffer (obviously, this
    assumption made no sense when the buffer had never been allocated, btw).
    
    the system would wait until some other buffer became the "front" buffer.
    
    we fix this problem by entirely removing the requirement that the
    buffer being resized cannot be the front buffer. instead, we just
    allocate a new buffer and replace the front buffer by the new one.
    
    the downside is that this uses more memory (an extra buffer) for a
    brief amount of time while the old buffer is being reallocated and
    before it has actually been replaced.
    
    Change-Id: I022e4621209474ceb1c671b23deb4188eaaa7285
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    Banish DisplayID from the SurfaceFlinger API.
    
    Use only display tokens in the API to refer to new displays.
    
    Don't require the caller to specify the display when creating
    a surface (since in general a surface could be shown on
    any display).
    
    This is intended to be a minimum change just to update the API.
    Note that SurfaceFlinger still uses DisplayID in a few places
    internally that might cause some features not to work properly
    when there are multiple displays (LayerScreenshot, for example).
    
    Change-Id: I3d91eec2da406eefd97bcd53655d403ad865a7e6
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    refactored screenshot code
    
    the core screenshot function now can capture the screen at any lower resolution
    performing bilinear filtering.
    
    we also now have some client code to interface with the screenshot service.
    
    it's now possible to request a screenshot at a lower resolution.
    
    Change-Id: I33689bba98507ab928d0898b21596d0d2fe4b953
    refactored screenshot code
    
    the core screenshot function now can capture the screen at any lower resolution
    performing bilinear filtering.
    
    we also now have some client code to interface with the screenshot service.
    
    it's now possible to request a screenshot at a lower resolution.
    
    Change-Id: I5a3b0e431421800e3aad601d9af8f94adffbc71f
    simple test app for screen capture API
    
    Change-Id: I1f7c453508ccfd4faaa8b1279968a358ce3f1e5a
    fix [3118445] Transform * Transform does not work as expected
    
    The problem wasn't in the multiply operator, but rather in the code
    that built the transform from the HAL bitmask.
    
    We now use the multiply operator to build the Transform from the bitmask,
    which guarantees, it'll always be correct.
    
    Also added a simple test for Transform.
    
    Change-Id: I09bf3b0e51d92f59d83ea91c4cc94fc2aa0bf227
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    split libsurfaceflinger_client and libcamera_client out of libui
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    fix [3118445] Transform * Transform does not work as expected
    
    The problem wasn't in the multiply operator, but rather in the code
    that built the transform from the HAL bitmask.
    
    We now use the multiply operator to build the Transform from the bitmask,
    which guarantees, it'll always be correct.
    
    Also added a simple test for Transform.
    
    Change-Id: I09bf3b0e51d92f59d83ea91c4cc94fc2aa0bf227
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    Native input dispatch rewrite work in progress.
    
    The old dispatch mechanism has been left in place and continues to
    be used by default for now.  To enable native input dispatch,
    edit the ENABLE_NATIVE_DISPATCH constant in WindowManagerPolicy.
    
    Includes part of the new input event NDK API.  Some details TBD.
    
    To wire up input dispatch, as the ViewRoot adds a window to the
    window session it receives an InputChannel object as an output
    argument.  The InputChannel encapsulates the file descriptors for a
    shared memory region and two pipe end-points.  The ViewRoot then
    provides the InputChannel to the InputQueue.  Behind the
    scenes, InputQueue simply attaches handlers to the native PollLoop object
    that underlies the MessageQueue.  This way MessageQueue doesn't need
    to know anything about input dispatch per-se, it just exposes (in native
    code) a PollLoop that other components can use to monitor file descriptor
    state changes.
    
    There can be zero or more targets for any given input event.  Each
    input target is specified by its input channel and some parameters
    including flags, an X/Y coordinate offset, and the dispatch timeout.
    An input target can request either synchronous dispatch (for foreground apps)
    or asynchronous dispatch (fire-and-forget for wallpapers and "outside"
    targets).  Currently, finding the appropriate input targets for an event
    requires a call back into the WindowManagerServer from native code.
    In the future this will be refactored to avoid most of these callbacks
    except as required to handle pending focus transitions.
    
    End-to-end event dispatch mostly works!
    
    To do: event injection, rate limiting, ANRs, testing, optimization, etc.
    
    Change-Id: I8c36b2b9e0a2d27392040ecda0f51b636456de25
    eclair snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    merge libsurfaceflinger_client into libgui
    
    this is the first step in unifying surfacetexture and surface.
    for this reason the header files were not moved, as most of them
    will eventually go away.
    
    NOTE: currently we keep libsurfaceflinger_client.so as an empty
    library to workaround prebuilt binaries wrongly linking against
    it.
    
    Change-Id: I130f0de2428e8579033dc41394d093f4e1431a00
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: Ibed34175ae273608393aaa5f0a7df207dc40d709
    Banish DisplayID from the SurfaceFlinger API.
    
    Use only display tokens in the API to refer to new displays.
    
    Don't require the caller to specify the display when creating
    a surface (since in general a surface could be shown on
    any display).
    
    This is intended to be a minimum change just to update the API.
    Note that SurfaceFlinger still uses DisplayID in a few places
    internally that might cause some features not to work properly
    when there are multiple displays (LayerScreenshot, for example).
    
    Change-Id: I3d91eec2da406eefd97bcd53655d403ad865a7e6
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    createSurface getpid() first parameter was removed
    
    Most of these tests in this directory don't currently build,
    but test-surface did build incorrectly by bad luck, using the old API.
    test-resize still doesn't build, but when the other build errors
    are fixed then it will use the right API.
    
    Change-Id: I388d6d59fe0a2328f352214dcdc28839a24043f0
    SF transactions are now O(1) wrt IPC instead of O(N).
    
    Change-Id: I57669852cbf6aabae244ea86940a08a5a27ffc43
    remove more unused references to ISurface
    
    Change-Id: I2201f1ca2bb8f203a081d94a0134f798778dfbef
    Fix missing AOSP copyright headers for more files
    
    o Update the copyright date on InputDispatcher_test.cpp and InputReader_test.cpp
      because these two files were moved from other places to the current location,
      and were actually created in 2010.
    
    bug - 4119349
    
    Change-Id: Ic93b81ddafb58e9e72a2e9e02ca3d9f173d6dca7
    remove support for PUSH_BUFFER surfaces and overlays
    
    the same functionality is now supported through
    the h/w composer HAL, and YUV support in the GPU.
    
    Change-Id: I8146605449954b8e8fd7f78810b7d873c2d8f5bf
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Icd7336f7289db35df9c8c1857a5122bb8a6f1c86
    move native services under services/
    
    moved surfaceflinger, audioflinger, cameraservice
    
    all native services should now reside in this location.
    
    Change-Id: Iee42b83dd2a94c3bf5107ab0895fe2dfcd5337a8
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    surfaceflinger: add frame duration logging
    
    Change-Id: Ib414a45e7e191f23a2726cbbbeb606e9ce68a3b5
    Basic binary event-log helpers
    
    EventLog can be used from SurfaceFlinger to log jank
    statistics events to the binary event log.
    
    Change-Id: If0fbbe7d7111f10957697166d37fd0c3418109bb
    surfaceflinger: add frame duration logging
    
    Change-Id: Ib414a45e7e191f23a2726cbbbeb606e9ce68a3b5
    Basic binary event-log helpers
    
    EventLog can be used from SurfaceFlinger to log jank
    statistics events to the binary event log.
    
    Change-Id: If0fbbe7d7111f10957697166d37fd0c3418109bb
    surfaceflinger: add frame duration logging
    
    Change-Id: Ib414a45e7e191f23a2726cbbbeb606e9ce68a3b5
    Basic binary event-log helpers
    
    EventLog can be used from SurfaceFlinger to log jank
    statistics events to the binary event log.
    
    Change-Id: If0fbbe7d7111f10957697166d37fd0c3418109bb
    color blindness enhancement
    
    This is an attempt at improving the experience of
    users with color vision impairement.
    
    At this time this feature can only be enabled for
    debugging:
    
      adb shell service call SurfaceFlinger 1014 i32 PARAM
    
      with PARAM:
       0 : disabled
       1 : protanomaly/protanopia simulation
       2 : deuteranomaly/deuteranopia simulation
       3 : tritanopia/tritanomaly simulation
      11, 12, 13: same as above w/ attempted correction/enhancement
    
    The enhancement algorithm tries to spread the "error"
    such that tones that would otherwise appear similar can be
    distinguished.
    
    Bug: 9465644
    
    Change-Id: I860f7eed0cb81f54ef9cf24ad78155b6395ade48
    Don't simulate color space after correction
    
    Change-Id: Ied0918ffa2be5f9382e693f442b142b3e068e735
    color blindness enhancement
    
    This is an attempt at improving the experience of
    users with color vision impairement.
    
    At this time this feature can only be enabled for
    debugging:
    
      adb shell service call SurfaceFlinger 1014 i32 PARAM
    
      with PARAM:
       0 : disabled
       1 : protanomaly/protanopia simulation
       2 : deuteranomaly/deuteranopia simulation
       3 : tritanopia/tritanomaly simulation
      11, 12, 13: same as above w/ attempted correction/enhancement
    
    The enhancement algorithm tries to spread the "error"
    such that tones that would otherwise appear similar can be
    distinguished.
    
    Bug: 9465644
    
    Change-Id: I860f7eed0cb81f54ef9cf24ad78155b6395ade48
    libbatteryservice: add interface to read individual battery properties
    
    Change-Id: I089eb6348053a8a9c8bca59e57ed97b4af14825a
    add libbatteryservice
    
    IBatteryPropertiesListener is used by clients such as BatteryService to
    receive notifications of changed battery/power status (from healthd).
    
    IBatteryPropertiesRegistrar manages registrations of
    IBatteryPropertiesListener clients.
    
    Add BatteryService native header with defines from BatteryManager, and
    class BatteryProperties to pass battery/power status around.
    
    Change-Id: I44e2736e503b586794097b7b9d31d07fefd9b15a
    batteryservice: Native client read exception returned from getProperty
    
    C++ binder client for IBatteryPropertiesRegistrar interface getProperty method
    fails to read the exception code returned by the server.  Add the missing read of the exception code.
    
    Bug: 11985952
    Change-Id: I8a9b145160aafbcf9976e6c5ba9fcb883126a5e3
    libbatteryservice: add interface to read individual battery properties
    
    Change-Id: I089eb6348053a8a9c8bca59e57ed97b4af14825a
    add libbatteryservice
    
    IBatteryPropertiesListener is used by clients such as BatteryService to
    receive notifications of changed battery/power status (from healthd).
    
    IBatteryPropertiesRegistrar manages registrations of
    IBatteryPropertiesListener clients.
    
    Add BatteryService native header with defines from BatteryManager, and
    class BatteryProperties to pass battery/power status around.
    
    Change-Id: I44e2736e503b586794097b7b9d31d07fefd9b15a
    BatteryProperty: Add property ENERGY_COUNTER and 64-bit integer properties
    
    Also fixup comments to match recent changes in BatteryManager.
    
    Change-Id: I6f40924f9e66d564ad1175f9650e2bfd2ad39a3a
    libbatteryservice: add interface to read individual battery properties
    
    Change-Id: I089eb6348053a8a9c8bca59e57ed97b4af14825a
    move services executables sources in their respective src folder
    
    Change-Id: Ic65434a26c7fed1699abf0851fec6faa40e09c0c
    Add skeleton of input flinger.
    
    Change-Id: I7f25080e446d4d3d9de9b18fe432a09bc751e0d9
    add libbatteryservice
    
    IBatteryPropertiesListener is used by clients such as BatteryService to
    receive notifications of changed battery/power status (from healthd).
    
    IBatteryPropertiesRegistrar manages registrations of
    IBatteryPropertiesListener clients.
    
    Add BatteryService native header with defines from BatteryManager, and
    class BatteryProperties to pass battery/power status around.
    
    Change-Id: I44e2736e503b586794097b7b9d31d07fefd9b15a
    batteryservice: remove BatteryProperties fields not sent to BatteryService
    
    Change-Id: I1116ebf0e21117fd37df7bfc41cb8ebaf9361faa
    batteryservice: add battery current now and charge counter data
    
    Change-Id: I4b3ea25342d4a03a8e38bfee2ef3b1ce54f82582
    add libbatteryservice
    
    IBatteryPropertiesListener is used by clients such as BatteryService to
    receive notifications of changed battery/power status (from healthd).
    
    IBatteryPropertiesRegistrar manages registrations of
    IBatteryPropertiesListener clients.
    
    Add BatteryService native header with defines from BatteryManager, and
    class BatteryProperties to pass battery/power status around.
    
    Change-Id: I44e2736e503b586794097b7b9d31d07fefd9b15a
    Move services/powermanager from frameworks/base to frameworks/native
    
    Move services/powermanager into frameworks/native so audioflinger can
    use it.  Note that this is not the same as a PowerManagerService,
    which is part of systemserver and handles turning the screen on and
    off, etc.  This is just a binder interface to allow taking wakelocks.
    
    Change-Id: I6b6a8b41cdbad17e826fda45aab5f059f22fc64e
    eclair snapshot
    update most gl tests to use EGLUtils
    donut snapshot
    Remove opengl tests from tests build
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Code drop from //branches/cupcake/...@124589
    Make IPowerManager native conform to .aidl for oneway
    
    But provide a temporary escape hatch for AudioFlinger.
    This oneway option will be removed as soon as possible.
    
    Bug: 16408906
    Change-Id: I20d6da1969ae05b96e72795463470eb4c1f8fbdc
    IPowerManager: make all binder call one way
    
    make all binder call to power manager service one way so that
    they don't block calling thread and are processed in the
    incoming order.
    
    Bug: 16408906.
    Change-Id: I94034df7f0a36d967e085b53fdc37fff7b44757b
    Update to follow interface change.
    
    Change-Id: I3ef37a32144e79b481af1b12c89531f3757689ef
    PowerManager: add powerHint binder method
    
    Change-Id: Ide1d50bb1580698b25296fbfc1cc63c3b21a00bc
    Native counterpart of new power manager method
    
    Cherrypicked from master.
    
    b/9464621
    
    Change-Id: I54c0ed50a57ac870da91db8589a73a2c792dbd8d
    Native counterpart of new power manager method
    
    Change-Id: I54c0ed50a57ac870da91db8589a73a2c792dbd8d
    Allow blaming a single uid for work done
    
    This lets audioflinger assign blame for wakelocks to a single uid.
    Currently this is only used for recording wakelocks.
    b/10985160
    
    Change-Id: Idc9adb22c29030010ac690d4cb95e7e7ea6b91e6
    Power manager now takes calling package name arg.
    
    Change-Id: Iae57b8eb7abe4e66f0d2645db8cdf57acf7dcd3e
    Use new PowerManager API.
    
    Change-Id: I66165d9954e2d1da9204216382a05a873f1393f4
    Move services/powermanager from frameworks/base to frameworks/native
    
    Move services/powermanager into frameworks/native so audioflinger can
    use it.  Note that this is not the same as a PowerManagerService,
    which is part of systemserver and handles turning the screen on and
    off, etc.  This is just a binder interface to allow taking wakelocks.
    
    Change-Id: I6b6a8b41cdbad17e826fda45aab5f059f22fc64e
    Shelve InputFlinger for another release. DO NOT MERGE
    
    Change-Id: I0f034a2b8b1d9192f61f5001799bd3aa4b3964c7
    Use openssl's SHA1 instead of bionic's.
    
    Bionic is removing its SHA1.
    
    Change-Id: I7d15986ebac9e0f0eb7ff93457780bd90a4f1d4f
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Try 2.
    
    Change-Id: I5f571fe86eb570885ae994e1f0552fb558930346
    Revert "Move inputservice over to frameworks/native"
    
    This reverts commit 2dceb67f1f32bd2ec589c4ac3d83da0b8dbe4a5c.
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Change-Id: I1419a740b38756bd0d54fef5f5ca337e6815b1b0
    Remove input flinger stubs.  (DO NOT MERGE)
    
    Bug: 10446930
    Change-Id: I4dd46f539cd2a2e324dfc83b45ba2787f7404a4a
    move services executables sources in their respective src folder
    
    Change-Id: Ic65434a26c7fed1699abf0851fec6faa40e09c0c
    Add skeleton of input flinger.
    
    Change-Id: I7f25080e446d4d3d9de9b18fe432a09bc751e0d9
    More changes to fix PDK build:
    
    move screencap back to frameworks/base
    move libdiskusage over from frameworks/base
    
    Change-Id: I8415716634a4cb5b0fae15ef15ff21ee0a08906a
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    Fix issue #7257947: Need to fix heap limits on Mako
    
    Change-Id: Id8014b19195b8740bccf000ab66c1b599ba3a1a0
    Configure GC free to be 8MB for devices with >512MB RAM.
    
    b/6606849
    
    Change-Id: Idad46032b4b5d309db0319caeb7a1dfc0550f9f7
    build: add device-type dalvik heap configs
    
    These have been moved from frameworks/base/build
    
    Change-Id: Ib0cdf82f4e2d61a1956baabf1fe636f46ddbc13a
    Signed-off-by: Dima Zavin <dima@android.com>
    OpenGL tracing.
    
    Enable with:
    
    adb shell setprop debug.egl.trace 1
    
    Change-Id: Icfbc795f5260141510975228e72234e9aab56a85
    eclair snapshot
    Added most of the support needed for GLES 2.x
    donut snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Add TYPE_MAGNIFICATION_OVERLAY to isTrustedOverlay
    
    This fixes a bug where a View with filterTouchesWhenObscured will have
    all touches filtered when in magnification accessibility mode. This is
    due to magnification being a separate Window over top of the running
    Activity. The method onFilterTouchEventForSecurity in View will then
    always return false when filterTouchesWhenObscured is enabled on the
    View. By adding the magnification Window to the list of Trusted Overlays
    we can ensure that touches will work properly with this property
    enabled.
    
    This corresponds to AOSP change
    I07706588a625682d05da5cb19f401139eb08a54c
    
    Change-Id: Iba095433a1f9045349d1b47a58a33b850ed31c97
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Try 2.
    
    Change-Id: I5f571fe86eb570885ae994e1f0552fb558930346
    Revert "Move inputservice over to frameworks/native"
    
    This reverts commit 2dceb67f1f32bd2ec589c4ac3d83da0b8dbe4a5c.
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Change-Id: I1419a740b38756bd0d54fef5f5ca337e6815b1b0
    Use openssl's SHA1 instead of bionic's.
    
    Bionic is removing its SHA1.
    
    Change-Id: I7d15986ebac9e0f0eb7ff93457780bd90a4f1d4f
    inputflinger: 64-bit compile issues
    
    Change-Id: I9861f96a8234d5f57b664baead7a465771b63bd5
    Misc. buttons aren't gamepad keys.
    
    BUTTON_[1-9] are intended to be misc. buttons so the kernel will
    assign them to non-gamepad devices.  As such, we shouldn't treat them
    as belonging to gamepads at all.
    
    Bug: 13432364
    Change-Id: Ida52ec45dadb53df1a9d36ac3ab212a2d2b56359
    Cherry pick parts of f5df700e6ce.
    
    This is logically a part of the merge conflict resolution for
    22d07464 to master. These files moved across git repositories.
    
    Change-Id: Id95bfa0bf503295f2c02a201f4bec5243d169ec4
    Controllers must have buttons and a movement mechanism.
    
    Some devices have joystick axes or DPad keys, but no gamepad buttons (or vice
    versa). We shouldn't count these as gamepads since games can't really be
    expected to work with this setup in the general case. Instead, require that a
    device has a movement mechanism (joystick axes or DPad buttons), as well as at
    least one gamepad button before considering it a controller.
    
    Bug: 13432364
    Change-Id: I64372e69d29c775094e2b1faa89714da8c29e2be
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Try 2.
    
    Change-Id: I5f571fe86eb570885ae994e1f0552fb558930346
    Revert "Move inputservice over to frameworks/native"
    
    This reverts commit 2dceb67f1f32bd2ec589c4ac3d83da0b8dbe4a5c.
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Change-Id: I1419a740b38756bd0d54fef5f5ca337e6815b1b0
    Add TYPE_MAGNIFICATION_OVERLAY to isTrustedOverlay
    
    This fixes a bug where a View with filterTouchesWhenObscured will have
    all touches filtered when in magnification accessibility mode. This is
    due to magnification being a separate Window over top of the running
    Activity. The method onFilterTouchEventForSecurity in View will then
    always return false when filterTouchesWhenObscured is enabled on the
    View. By adding the magnification Window to the list of Trusted Overlays
    we can ensure that touches will work properly with this property
    enabled.
    
    This corresponds to AOSP change
    I07706588a625682d05da5cb19f401139eb08a54c
    
    Change-Id: Iba095433a1f9045349d1b47a58a33b850ed31c97
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Try 2.
    
    Change-Id: I5f571fe86eb570885ae994e1f0552fb558930346
    Revert "Move inputservice over to frameworks/native"
    
    This reverts commit 2dceb67f1f32bd2ec589c4ac3d83da0b8dbe4a5c.
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Change-Id: I1419a740b38756bd0d54fef5f5ca337e6815b1b0
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Try 2.
    
    Change-Id: I5f571fe86eb570885ae994e1f0552fb558930346
    Revert "Move inputservice over to frameworks/native"
    
    This reverts commit 2dceb67f1f32bd2ec589c4ac3d83da0b8dbe4a5c.
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Change-Id: I1419a740b38756bd0d54fef5f5ca337e6815b1b0
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Try 2.
    
    Change-Id: I5f571fe86eb570885ae994e1f0552fb558930346
    Revert "Move inputservice over to frameworks/native"
    
    This reverts commit 2dceb67f1f32bd2ec589c4ac3d83da0b8dbe4a5c.
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Change-Id: I1419a740b38756bd0d54fef5f5ca337e6815b1b0
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Try 2.
    
    Change-Id: I5f571fe86eb570885ae994e1f0552fb558930346
    Revert "Move inputservice over to frameworks/native"
    
    This reverts commit 2dceb67f1f32bd2ec589c4ac3d83da0b8dbe4a5c.
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Change-Id: I1419a740b38756bd0d54fef5f5ca337e6815b1b0
    Improve ANR diagnostics.
    
    Print more details about the exact reason that an ANR has occurred.
    Also start checking that the window actually has a registered
    input connection that is not in a broken state.  These windows
    are supposed to be cleaned up by the window manager promptly
    as if the app had crashed but the pattern of ANRs we are observing
    suggests that broken windows might be sticking around longer than
    they should.
    
    Bug: 17721767
    Change-Id: Ie2803a3fa9642381ecadc198fec15e1b70d93c20
    Improve ANR diagnostics.
    
    Print more details about the exact reason that an ANR has occurred.
    Also start checking that the window actually has a registered
    input connection that is not in a broken state.  These windows
    are supposed to be cleaned up by the window manager promptly
    as if the app had crashed but the pattern of ANRs we are observing
    suggests that broken windows might be sticking around longer than
    they should.
    
    Bug: 17721767
    Change-Id: Ie2803a3fa9642381ecadc198fec15e1b70d93c20
    Only mark repeated keys as PASS_TO_USER if the original key was.
    
    Bug: 17629695
    Change-Id: Ic569aba4149c6cc321c2cf8aede7c5e8a1196234
    Revert "Revert "Add system accelerators for BACK and HOME.""
    
    This reverts commit d671f98a27f547ebcddff8dc962fe895549355e2.
    
    Change-Id: Ibec48f81653bd2f755fc59a241fa7836baf53233
    Revert "Add system accelerators for BACK and HOME."
    
    This reverts commit 278b525d25b852554015ec4f92862f9297b502fd.
    Add system accelerators for BACK and HOME.
    
    Meta+Backspace -> BACK
    Meta+Enter -> HOME
    
    Bug: 14066931
    Change-Id: Iff1d027300fa9911626785944a6d8efe4f62235e
    Change InputMessage.motion.pointerSize to a uint32_t.
    
    This ensures it's the same size in both 32 and 64 bit
    processes and also brings it in line with struct
    MotionEntry.
    
    Change-Id: I66bb8b8d8664763e7dcbd489686051f563d5e1dc
    Move key attribute information out of native.
    
    Native doesn't ever actually care about the attributes of keys, so
    move all of it up into the managed layer and move all of the key
    names down so they're defined once.
    
    Change-Id: Ic8ded13ce050b2b98744735ff50d11e8d882d7d5
    Plumb display power state through display manager.
    
    Eliminated the bright here and woke here policy flags since they
    were unused.  Simplified the input dispatch policy somewhat.
    
    Bug: 13133142
    Change-Id: I74b4dc866c44c46ed43006a48a857f0da4c07cc9
    Cherry pick parts of f5df700e6ce.
    
    This is logically a part of the merge conflict resolution for
    22d07464 to master. These files moved across git repositories.
    
    Change-Id: Id95bfa0bf503295f2c02a201f4bec5243d169ec4
    inputflinger: 64 bit compile issues
    
    Change-Id: I73c37eb19b28d987ff13632a999e71d6c96cc3e0
    Generate ACTION_CANCEL on joystick disconnect.
    
    Bug: 11480300
    Change-Id: I46706838eec0711c6bf345301e7b4ccbad83b063
    Add support for injecting events into ActivityContainers.
    
    Enhanced the input system to support concurrent dispatch of touch
    events on multiple displays which is required for this to work.
    
    Add method to apply offset to PointerCoords.
    
    Change-Id: I55fe4a9a8785ae5a2d3341d214fa3c5107f3963a
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Try 2.
    
    Change-Id: I5f571fe86eb570885ae994e1f0552fb558930346
    Revert "Move inputservice over to frameworks/native"
    
    This reverts commit 2dceb67f1f32bd2ec589c4ac3d83da0b8dbe4a5c.
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Change-Id: I1419a740b38756bd0d54fef5f5ca337e6815b1b0
    Fix type for temp variable
    
    Change-Id: I8e2d229da326e5182692f94660336169fb249da7
    Add logging for switch state
    
    Bug: 17004602
    Change-Id: I15c9feb7b28274183742936c20e34e7fb07e0b70
    Move key attribute information out of native.
    
    Native doesn't ever actually care about the attributes of keys, so
    move all of it up into the managed layer and move all of the key
    names down so they're defined once.
    
    Change-Id: Ic8ded13ce050b2b98744735ff50d11e8d882d7d5
    Cherry pick parts of f5df700e6ce.
    
    This is logically a part of the merge conflict resolution for
    22d07464 to master. These files moved across git repositories.
    
    Change-Id: Id95bfa0bf503295f2c02a201f4bec5243d169ec4
    inputflinger: 64 bit compile issues
    
    Change-Id: I73c37eb19b28d987ff13632a999e71d6c96cc3e0
    Add idc config option for handling key repeats
    
    Bug: 13285870
    Change-Id: I3c1cd5fb0a02dfb3432c1f04d0eef2d4970857ea
    Support unique calibration per orientation
    
    Updates the format of the calibration XML to store the Surface rotation
    that a specific calibration applies to. Also updates the API to require
    a rotation value for get/set, and has the native framework supply this
    according to the current rotation whenever it changes.
    
    Change-Id: If38563ceba27c9d8a75f9fd7928c8d7c9d187afb
    Initialize mAffineTransform and update on modification
    
    This patch causes the InputReader to update its mAffineTransform to reflect
    the currently-set calibration on startup and whenever its value is changed
    through the InputManagerService.
    
    Change-Id: I4719122a28afa9833772040f0433780a84240b9d
    Introduce mAffineCalibration for location calibration
    
    The variable mAffineCalibration describes the affine transformation
    that should be applied to the raw X/Y location in order to get it
    into a calibrated state.
    
    Change-Id: I68aa43420ffe7fcaa1ada4acd7390d37e6966a1f
    Add touch.wake IDC property to control wakeup.
    
    Normally we do not wake the device when the internal touch screen is
    touched.  This behavior can now be configured by setting a property
    in the input device configuration file.  Add the following line to
    the IDC file to enable an initial touch to wake the device from sleep.
    
      touch.wake = 1
    
    Change-Id: Ifd6d4f51afacd30d85f475725a66e6fcccde9cbb
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Try 2.
    
    Change-Id: I5f571fe86eb570885ae994e1f0552fb558930346
    Revert "Move inputservice over to frameworks/native"
    
    This reverts commit 2dceb67f1f32bd2ec589c4ac3d83da0b8dbe4a5c.
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Change-Id: I1419a740b38756bd0d54fef5f5ca337e6815b1b0
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Try 2.
    
    Change-Id: I5f571fe86eb570885ae994e1f0552fb558930346
    Revert "Move inputservice over to frameworks/native"
    
    This reverts commit 2dceb67f1f32bd2ec589c4ac3d83da0b8dbe4a5c.
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Change-Id: I1419a740b38756bd0d54fef5f5ca337e6815b1b0
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Try 2.
    
    Change-Id: I5f571fe86eb570885ae994e1f0552fb558930346
    Revert "Move inputservice over to frameworks/native"
    
    This reverts commit 2dceb67f1f32bd2ec589c4ac3d83da0b8dbe4a5c.
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Change-Id: I1419a740b38756bd0d54fef5f5ca337e6815b1b0
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Try 2.
    
    Change-Id: I5f571fe86eb570885ae994e1f0552fb558930346
    add libsurfaceflinger_ddmconnection for PDK build
    
    - the library is dlopened from libsurfaceflinger
    - the library built only when libnativehelper exists
    
    Bug: 7089510
    Change-Id: Ib3ea1029d7e8f6e055f4b759d0bf68f5123fa8a1
    as a debug option SrufaceFlinger can now connect to DDMS
    
    this is disabled by default. To enable:
      setprop debug.sf.ddms 1
    
    this debug option requires to restart SurfaceFlinger
    
    Change-Id: Ic2f8050b29911b55bcd21721648b6978700c277d
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    Remove frameworks/base/im since these stuff are only used by IM app
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Try 2.
    
    Change-Id: I5f571fe86eb570885ae994e1f0552fb558930346
    Revert "Move inputservice over to frameworks/native"
    
    This reverts commit 2dceb67f1f32bd2ec589c4ac3d83da0b8dbe4a5c.
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Change-Id: I1419a740b38756bd0d54fef5f5ca337e6815b1b0
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Try 2.
    
    Change-Id: I5f571fe86eb570885ae994e1f0552fb558930346
    Revert "Move inputservice over to frameworks/native"
    
    This reverts commit 2dceb67f1f32bd2ec589c4ac3d83da0b8dbe4a5c.
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Change-Id: I1419a740b38756bd0d54fef5f5ca337e6815b1b0
    Add logging for switch state
    
    Bug: 17004602
    Change-Id: I15c9feb7b28274183742936c20e34e7fb07e0b70
    Add idc config option for handling key repeats
    
    Bug: 13285870
    Change-Id: I3c1cd5fb0a02dfb3432c1f04d0eef2d4970857ea
    Support unique calibration per orientation
    
    Updates the format of the calibration XML to store the Surface rotation
    that a specific calibration applies to. Also updates the API to require
    a rotation value for get/set, and has the native framework supply this
    according to the current rotation whenever it changes.
    
    Change-Id: If38563ceba27c9d8a75f9fd7928c8d7c9d187afb
    Add test for InputReader location calibration
    
    This patch adds a test for the new native location calibration
    code. The Java interface is not tested.
    
    Change-Id: Id7496486f6b6e2ade12ada607b62d1594af488e8
    Initialize mAffineTransform and update on modification
    
    This patch causes the InputReader to update its mAffineTransform to reflect
    the currently-set calibration on startup and whenever its value is changed
    through the InputManagerService.
    
    Change-Id: I4719122a28afa9833772040f0433780a84240b9d
    Introduce mAffineCalibration for location calibration
    
    The variable mAffineCalibration describes the affine transformation
    that should be applied to the raw X/Y location in order to get it
    into a calibrated state.
    
    Change-Id: I68aa43420ffe7fcaa1ada4acd7390d37e6966a1f
    Add touch.wake IDC property to control wakeup.
    
    Normally we do not wake the device when the internal touch screen is
    touched.  This behavior can now be configured by setting a property
    in the input device configuration file.  Add the following line to
    the IDC file to enable an initial touch to wake the device from sleep.
    
      touch.wake = 1
    
    Change-Id: Ifd6d4f51afacd30d85f475725a66e6fcccde9cbb
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Try 2.
    
    Change-Id: I5f571fe86eb570885ae994e1f0552fb558930346
    Revert "Move inputservice over to frameworks/native"
    
    This reverts commit 2dceb67f1f32bd2ec589c4ac3d83da0b8dbe4a5c.
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Change-Id: I1419a740b38756bd0d54fef5f5ca337e6815b1b0
    Improve ANR diagnostics.
    
    Print more details about the exact reason that an ANR has occurred.
    Also start checking that the window actually has a registered
    input connection that is not in a broken state.  These windows
    are supposed to be cleaned up by the window manager promptly
    as if the app had crashed but the pattern of ANRs we are observing
    suggests that broken windows might be sticking around longer than
    they should.
    
    Bug: 17721767
    Change-Id: Ie2803a3fa9642381ecadc198fec15e1b70d93c20
    Improve ANR diagnostics.
    
    Print more details about the exact reason that an ANR has occurred.
    Also start checking that the window actually has a registered
    input connection that is not in a broken state.  These windows
    are supposed to be cleaned up by the window manager promptly
    as if the app had crashed but the pattern of ANRs we are observing
    suggests that broken windows might be sticking around longer than
    they should.
    
    Bug: 17721767
    Change-Id: Ie2803a3fa9642381ecadc198fec15e1b70d93c20
    Revert "Revert "Add system accelerators for BACK and HOME.""
    
    This reverts commit d671f98a27f547ebcddff8dc962fe895549355e2.
    
    Change-Id: Ibec48f81653bd2f755fc59a241fa7836baf53233
    Revert "Add system accelerators for BACK and HOME."
    
    This reverts commit 278b525d25b852554015ec4f92862f9297b502fd.
    Add system accelerators for BACK and HOME.
    
    Meta+Backspace -> BACK
    Meta+Enter -> HOME
    
    Bug: 14066931
    Change-Id: Iff1d027300fa9911626785944a6d8efe4f62235e
    Plumb display power state through display manager.
    
    Eliminated the bright here and woke here policy flags since they
    were unused.  Simplified the input dispatch policy somewhat.
    
    Bug: 13133142
    Change-Id: I74b4dc866c44c46ed43006a48a857f0da4c07cc9
    Add support for injecting events into ActivityContainers.
    
    Enhanced the input system to support concurrent dispatch of touch
    events on multiple displays which is required for this to work.
    
    Add method to apply offset to PointerCoords.
    
    Change-Id: I55fe4a9a8785ae5a2d3341d214fa3c5107f3963a
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Try 2.
    
    Change-Id: I5f571fe86eb570885ae994e1f0552fb558930346
    Revert "Move inputservice over to frameworks/native"
    
    This reverts commit 2dceb67f1f32bd2ec589c4ac3d83da0b8dbe4a5c.
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Change-Id: I1419a740b38756bd0d54fef5f5ca337e6815b1b0
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Try 2.
    
    Change-Id: I5f571fe86eb570885ae994e1f0552fb558930346
    Completely remove skia dependency from libinput.
    
    Including the tests...
    
    Change-Id: I6ec8f1a5ae7e7514831d7e3b430b3b37b0841b92
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Add createTJunctionFreeRegion
    
    T-junction free regions are useful for rendering regions with various
    geometric transformations, and the Region's span-ordered, sorted rect
    list supports T-junction free storage without modification.
    
    This approach creates a T-junction free region by splitting each
    rectangle that is part of a vertical T-junction. This approach is two
    pass (up and down) so that divisions can trickle up/down to other
    adjacent spans.
    
    Change-Id: Ifcf5e6fe0034c96b00ef09a4433b2b0fce8f4300
    frameworks/base refactoring
    
    create the new libandroidfw from parts of libui and libutils
    
    Change-Id: I1584995616fff5d527a2aba63921b682a6194d58
    Fix uses of all-subdir-makefiles
    
    We should use all-makefiles-under instead.
    all-subdir-makefiles can be used only before any "include" statement.
    Before this change, both subdirs were actually not included.
    
    Change-Id: I6bf35d07f294a5012c9322096f999ac26e37432f
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    Fix a regression with MotionEvent parceling.
    
    Also added some more unit tests.
    
    Change-Id: I413654294d1a998eec056884e6df5eaa50f3daf4
    Fix a regression with MotionEvent parceling.
    
    Also added some more unit tests.
    
    Change-Id: I413654294d1a998eec056884e6df5eaa50f3daf4
    Mouse pointer integration.
    
    Added support for loading the pointer icon from a resource.
    
    Moved the system server related bits of the input manager out
    of libui and into libinput since they do not need to be linked into
    applications.
    
    Change-Id: Iec11e0725b3add2b905c51f8ea2c3b4b0d1a2d67
    Add unit tests for native input and fix bugs identified.
    
    Fixed a bug where we would lose the first touch point when swiping out of
    the virtual key area.
    
    Fixed a bug where we would not send an ACTION_MOVE event in cases where
    individual pointers went down/up and the remaining pointers actually moved.
    This is important since many applications do not handle pointer movements
    during ACTION_POINTER_DOWN or ACTION_POINTER_UP.  In the case of
    ACTION_POINTER_UP the movement was completely lost since all pointers were
    dispatched using their old location rather than the new location.
    
    Improved motion event validation to check for duplicate pointer ids.
    
    Added an input source constant that was missing from the NDK api but
    defined in the framework api.
    
    Added a timestamp when reporting added/removed devices in EventHub.
    
    Bug: 3070082
    Change-Id: I3206a030f43b7616e2f48006e5a9d522c4d92e56
    Don't build framework tests for simulator target.
    
    Change-Id: I70f29c7eb307e4f3ec5702f4eb9d97b4342e2f36
    Even more native input dispatch work in progress.
    
    Added more tests.
    Fixed a regression in Vector.
    Fixed bugs in pointer tracking.
    Fixed a starvation issue in PollLoop when setting or removing callbacks.
    Fixed a couple of policy nits.
    
    Modified the internal representation of MotionEvent to be more
    efficient and more consistent.
    
    Added code to skip/cancel virtual key processing when there are multiple
    pointers down.  This helps to better disambiguate virtual key presses
    from stray touches (such as cheek presses).
    
    Change-Id: I2a7d2cce0195afb9125b23378baa94fd2fc6671c
    Support for multiple tests
    
    The build system enforces some invariants that were being ignored
    before.
    
    Change-Id: Ie7675042af7f961a507386c13b2a0b592b591af8
    Native input dispatch rewrite work in progress.
    
    The old dispatch mechanism has been left in place and continues to
    be used by default for now.  To enable native input dispatch,
    edit the ENABLE_NATIVE_DISPATCH constant in WindowManagerPolicy.
    
    Includes part of the new input event NDK API.  Some details TBD.
    
    To wire up input dispatch, as the ViewRoot adds a window to the
    window session it receives an InputChannel object as an output
    argument.  The InputChannel encapsulates the file descriptors for a
    shared memory region and two pipe end-points.  The ViewRoot then
    provides the InputChannel to the InputQueue.  Behind the
    scenes, InputQueue simply attaches handlers to the native PollLoop object
    that underlies the MessageQueue.  This way MessageQueue doesn't need
    to know anything about input dispatch per-se, it just exposes (in native
    code) a PollLoop that other components can use to monitor file descriptor
    state changes.
    
    There can be zero or more targets for any given input event.  Each
    input target is specified by its input channel and some parameters
    including flags, an X/Y coordinate offset, and the dispatch timeout.
    An input target can request either synchronous dispatch (for foreground apps)
    or asynchronous dispatch (fire-and-forget for wallpapers and "outside"
    targets).  Currently, finding the appropriate input targets for an event
    requires a call back into the WindowManagerServer from native code.
    In the future this will be refactored to avoid most of these callbacks
    except as required to handle pending focus transitions.
    
    End-to-end event dispatch mostly works!
    
    To do: event injection, rate limiting, ANRs, testing, optimization, etc.
    
    Change-Id: I8c36b2b9e0a2d27392040ecda0f51b636456de25
    eclair snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    Support unique calibration per orientation
    
    Updates the format of the calibration XML to store the Surface rotation
    that a specific calibration applies to. Also updates the API to require
    a rotation value for get/set, and has the native framework supply this
    according to the current rotation whenever it changes.
    
    Change-Id: If38563ceba27c9d8a75f9fd7928c8d7c9d187afb
    Add test for InputReader location calibration
    
    This patch adds a test for the new native location calibration
    code. The Java interface is not tested.
    
    Change-Id: Id7496486f6b6e2ade12ada607b62d1594af488e8
    Initialize mAffineTransform and update on modification
    
    This patch causes the InputReader to update its mAffineTransform to reflect
    the currently-set calibration on startup and whenever its value is changed
    through the InputManagerService.
    
    Change-Id: I4719122a28afa9833772040f0433780a84240b9d
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Try 2.
    
    Change-Id: I5f571fe86eb570885ae994e1f0552fb558930346
    Plumb display power state through display manager.
    
    Eliminated the bright here and woke here policy flags since they
    were unused.  Simplified the input dispatch policy somewhat.
    
    Bug: 13133142
    Change-Id: I74b4dc866c44c46ed43006a48a857f0da4c07cc9
    Add support for injecting events into ActivityContainers.
    
    Enhanced the input system to support concurrent dispatch of touch
    events on multiple displays which is required for this to work.
    
    Add method to apply offset to PointerCoords.
    
    Change-Id: I55fe4a9a8785ae5a2d3341d214fa3c5107f3963a
    Move inputservice over to frameworks/native
    
    Add all of the underlying input system pieces, minux PointerController and
    SpriteController, to inputflinger. This is in preparation for moving input to
    its own process and the addition of the input HAL.
    
    Try 2.
    
    Change-Id: I5f571fe86eb570885ae994e1f0552fb558930346
    Shelve InputFlinger for another release. DO NOT MERGE
    
    Change-Id: I0f034a2b8b1d9192f61f5001799bd3aa4b3964c7
    Remove input flinger stubs.  (DO NOT MERGE)
    
    Bug: 10446930
    Change-Id: I4dd46f539cd2a2e324dfc83b45ba2787f7404a4a
    Fix PDK build.
    
    Quick hack to remove Skia dependency from libinput.
    
    Change-Id: Ibaf2e312236f5e3f7251fa903ce381456a77467c
    Add skeleton of input flinger.
    
    Change-Id: I7f25080e446d4d3d9de9b18fe432a09bc751e0d9
    do not build libinput in PDK
    
    - skia is not available in PDK, and it causes build break.
    
    bug: 9528927
    Change-Id: I89663e4a4bd52858506e3b52fbf8ca85d9992363
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Move key attribute information out of native.
    
    Native doesn't ever actually care about the attributes of keys, so
    move all of it up into the managed layer and move all of the key
    names down so they're defined once.
    
    Change-Id: Ic8ded13ce050b2b98744735ff50d11e8d882d7d5
    Parse LED mappings in keylayout files. DO NOT MERGE
    
    Change-Id: I2b34939cc0df256e6b872502ea93f2884b4c8334
    Parse LED mappings in keylayout files
    
    Change-Id: I6bc3760341868015f054d9866e2616a312da94e0
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Move key attribute information out of native.
    
    Native doesn't ever actually care about the attributes of keys, so
    move all of it up into the managed layer and move all of the key
    names down so they're defined once.
    
    Change-Id: Ic8ded13ce050b2b98744735ff50d11e8d882d7d5
    Parse LED mappings in keylayout files. DO NOT MERGE
    
    Change-Id: I2b34939cc0df256e6b872502ea93f2884b4c8334
    Parse LED mappings in keylayout files
    
    Change-Id: I6bc3760341868015f054d9866e2616a312da94e0
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Move key attribute information out of native.
    
    Native doesn't ever actually care about the attributes of keys, so
    move all of it up into the managed layer and move all of the key
    names down so they're defined once.
    
    Change-Id: Ic8ded13ce050b2b98744735ff50d11e8d882d7d5
    Generate ACTION_CANCEL on joystick disconnect. DO NOT MERGE
    
    Bug: 11480300
    Change-Id: I5a4096970c9e588d134f05dd0eb3a9c91c836b2f
    Generate ACTION_CANCEL on joystick disconnect.
    
    Bug: 11480300
    Change-Id: I46706838eec0711c6bf345301e7b4ccbad83b063
    Add support for injecting events into ActivityContainers.
    
    Enhanced the input system to support concurrent dispatch of touch
    events on multiple displays which is required for this to work.
    
    Add method to apply offset to PointerCoords.
    
    Change-Id: I55fe4a9a8785ae5a2d3341d214fa3c5107f3963a
    Add method to apply offset to PointerCoords.  (DO NOT MERGE)
    
    Change-Id: I3dc2ba22b026e5b8e1c3d90f7366ec09a59ce6b6
    Fix PDK build.
    
    Quick hack to remove Skia dependency from libinput.
    
    Change-Id: Ibaf2e312236f5e3f7251fa903ce381456a77467c
    Add a keycode to switch audio tracks (2/2)
    
    A key to switch audio tracks is general on media devices like blu-ray.
    
    Bug: 9728155
    Change-Id: I13ebbc64321f3cf10370f9a605f3d94ea0d16d6d
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Fixup more potential issues / warnings in string formats
    
    Change-Id: I323e44f950b2e758dc9ff4510b2e13ca870eb849
    Fix warning in logging string interpolation
    
    Change-Id: I86623083f68664d31ea277958837a4c2985037b4
    Change InputMessage.motion.pointerSize to a uint32_t.
    
    This ensures it's the same size in both 32 and 64 bit
    processes and also brings it in line with struct
    MotionEntry.
    
    (cherry-picked from bc6001b026069714177526eb1120b0011d6f2a51)
    
    Change-Id: I28e87050478920a54132efbbb8138076ebad1409
    Change InputMessage.motion.pointerSize to a uint32_t.
    
    This ensures it's the same size in both 32 and 64 bit
    processes and also brings it in line with struct
    MotionEntry.
    
    Change-Id: I66bb8b8d8664763e7dcbd489686051f563d5e1dc
    Move key attribute information out of native.
    
    Native doesn't ever actually care about the attributes of keys, so
    move all of it up into the managed layer and move all of the key
    names down so they're defined once.
    
    Change-Id: Ic8ded13ce050b2b98744735ff50d11e8d882d7d5
    Only consume touches up until the frame time
    
    When resampling is disabled, it's currently possible to consume
    touches after the current frame time. This breaks some guarantees and
    could cause unexpected behaviors.
    
    Change-Id: I99908a2cac2df9f795dd4a07188b4451213cf3e4
    Eliminate latency when resampling is disabled
    
    Since the latency was introduced to avoid egregious errors during
    resampling, remove it when we aren't resampling.
    
    Change-Id: Ia8e9a9afb1e16212fec81a8c9c661c598e1b0ebf
    Eliminate latency when resampling is disabled
    
    Since the latency was introduced to avoid egregious errors during
    resampling, remove it when we aren't resampling.
    
    Change-Id: Ia8e9a9afb1e16212fec81a8c9c661c598e1b0ebf
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Move key attribute information out of native.
    
    Native doesn't ever actually care about the attributes of keys, so
    move all of it up into the managed layer and move all of the key
    names down so they're defined once.
    
    Change-Id: Ic8ded13ce050b2b98744735ff50d11e8d882d7d5
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Add controller numbers for gamepads / joysticks
    
    Change-Id: I5294aabbadb836a6a4c7ce76a670abcf50c1f885
    Add input device property for buttons under touchpads
    
    Bug: 8990644
    Change-Id: I6df5fb9e11199173d62523928082db428af55394
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    x86_64: Align uint64_t/int64_t structure member to 8 bytes
    
    To make sure the stature which pass between 32/64bit process have
    same memory layout for 32/64bit.
    
    Signed-off-by: Fengwei Yin <fengwei.yin@intel.com>
    Co-Authored-by: Narayan Kamath <narayan@google.com> (Unit test only.)
    Change-Id: I1bc2d12cce41ec0bc484adcaf968f274bec75c12
    Completely remove skia dependency from libinput.
    
    Including the tests...
    
    Change-Id: I6ec8f1a5ae7e7514831d7e3b430b3b37b0841b92
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Add createTJunctionFreeRegion
    
    T-junction free regions are useful for rendering regions with various
    geometric transformations, and the Region's span-ordered, sorted rect
    list supports T-junction free storage without modification.
    
    This approach creates a T-junction free region by splitting each
    rectangle that is part of a vertical T-junction. This approach is two
    pass (up and down) so that divisions can trickle up/down to other
    adjacent spans.
    
    Change-Id: Ifcf5e6fe0034c96b00ef09a4433b2b0fce8f4300
    frameworks/base refactoring
    
    create the new libandroidfw from parts of libui and libutils
    
    Change-Id: I1584995616fff5d527a2aba63921b682a6194d58
    Fix uses of all-subdir-makefiles
    
    We should use all-makefiles-under instead.
    all-subdir-makefiles can be used only before any "include" statement.
    Before this change, both subdirs were actually not included.
    
    Change-Id: I6bf35d07f294a5012c9322096f999ac26e37432f
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    Fix a regression with MotionEvent parceling.
    
    Also added some more unit tests.
    
    Change-Id: I413654294d1a998eec056884e6df5eaa50f3daf4
    Fix a regression with MotionEvent parceling.
    
    Also added some more unit tests.
    
    Change-Id: I413654294d1a998eec056884e6df5eaa50f3daf4
    Mouse pointer integration.
    
    Added support for loading the pointer icon from a resource.
    
    Moved the system server related bits of the input manager out
    of libui and into libinput since they do not need to be linked into
    applications.
    
    Change-Id: Iec11e0725b3add2b905c51f8ea2c3b4b0d1a2d67
    Add unit tests for native input and fix bugs identified.
    
    Fixed a bug where we would lose the first touch point when swiping out of
    the virtual key area.
    
    Fixed a bug where we would not send an ACTION_MOVE event in cases where
    individual pointers went down/up and the remaining pointers actually moved.
    This is important since many applications do not handle pointer movements
    during ACTION_POINTER_DOWN or ACTION_POINTER_UP.  In the case of
    ACTION_POINTER_UP the movement was completely lost since all pointers were
    dispatched using their old location rather than the new location.
    
    Improved motion event validation to check for duplicate pointer ids.
    
    Added an input source constant that was missing from the NDK api but
    defined in the framework api.
    
    Added a timestamp when reporting added/removed devices in EventHub.
    
    Bug: 3070082
    Change-Id: I3206a030f43b7616e2f48006e5a9d522c4d92e56
    Don't build framework tests for simulator target.
    
    Change-Id: I70f29c7eb307e4f3ec5702f4eb9d97b4342e2f36
    Even more native input dispatch work in progress.
    
    Added more tests.
    Fixed a regression in Vector.
    Fixed bugs in pointer tracking.
    Fixed a starvation issue in PollLoop when setting or removing callbacks.
    Fixed a couple of policy nits.
    
    Modified the internal representation of MotionEvent to be more
    efficient and more consistent.
    
    Added code to skip/cancel virtual key processing when there are multiple
    pointers down.  This helps to better disambiguate virtual key presses
    from stray touches (such as cheek presses).
    
    Change-Id: I2a7d2cce0195afb9125b23378baa94fd2fc6671c
    Support for multiple tests
    
    The build system enforces some invariants that were being ignored
    before.
    
    Change-Id: Ie7675042af7f961a507386c13b2a0b592b591af8
    Native input dispatch rewrite work in progress.
    
    The old dispatch mechanism has been left in place and continues to
    be used by default for now.  To enable native input dispatch,
    edit the ENABLE_NATIVE_DISPATCH constant in WindowManagerPolicy.
    
    Includes part of the new input event NDK API.  Some details TBD.
    
    To wire up input dispatch, as the ViewRoot adds a window to the
    window session it receives an InputChannel object as an output
    argument.  The InputChannel encapsulates the file descriptors for a
    shared memory region and two pipe end-points.  The ViewRoot then
    provides the InputChannel to the InputQueue.  Behind the
    scenes, InputQueue simply attaches handlers to the native PollLoop object
    that underlies the MessageQueue.  This way MessageQueue doesn't need
    to know anything about input dispatch per-se, it just exposes (in native
    code) a PollLoop that other components can use to monitor file descriptor
    state changes.
    
    There can be zero or more targets for any given input event.  Each
    input target is specified by its input channel and some parameters
    including flags, an X/Y coordinate offset, and the dispatch timeout.
    An input target can request either synchronous dispatch (for foreground apps)
    or asynchronous dispatch (fire-and-forget for wallpapers and "outside"
    targets).  Currently, finding the appropriate input targets for an event
    requires a call back into the WindowManagerServer from native code.
    In the future this will be refactored to avoid most of these callbacks
    except as required to handle pending focus transitions.
    
    End-to-end event dispatch mostly works!
    
    To do: event injection, rate limiting, ANRs, testing, optimization, etc.
    
    Change-Id: I8c36b2b9e0a2d27392040ecda0f51b636456de25
    eclair snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    Fix InputEvent_test.
    
    Axis 0 sets the MSB and Axis 63 sets the LSB, and not
    the other way round like the test expects.
    
    This was broken by commit 38dcdff3087f01 which moved this
    code over to using BitSet.
    
    Change-Id: I63a72abe7ce14720b0bf26e5f6d651bb42452f79
    Completely remove skia dependency from libinput.
    
    Including the tests...
    
    Change-Id: I6ec8f1a5ae7e7514831d7e3b430b3b37b0841b92
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Move input library code from frameworks/base.
    
    Change-Id: I4983db61b53e28479fc90d9211fafff68f7f49a6
    Even more native input dispatch work in progress.
    
    Added more tests.
    Fixed a regression in Vector.
    Fixed bugs in pointer tracking.
    Fixed a starvation issue in PollLoop when setting or removing callbacks.
    Fixed a couple of policy nits.
    
    Modified the internal representation of MotionEvent to be more
    efficient and more consistent.
    
    Added code to skip/cancel virtual key processing when there are multiple
    pointers down.  This helps to better disambiguate virtual key presses
    from stray touches (such as cheek presses).
    
    Change-Id: I2a7d2cce0195afb9125b23378baa94fd2fc6671c
    Native input dispatch rewrite work in progress.
    
    The old dispatch mechanism has been left in place and continues to
    be used by default for now.  To enable native input dispatch,
    edit the ENABLE_NATIVE_DISPATCH constant in WindowManagerPolicy.
    
    Includes part of the new input event NDK API.  Some details TBD.
    
    To wire up input dispatch, as the ViewRoot adds a window to the
    window session it receives an InputChannel object as an output
    argument.  The InputChannel encapsulates the file descriptors for a
    shared memory region and two pipe end-points.  The ViewRoot then
    provides the InputChannel to the InputQueue.  Behind the
    scenes, InputQueue simply attaches handlers to the native PollLoop object
    that underlies the MessageQueue.  This way MessageQueue doesn't need
    to know anything about input dispatch per-se, it just exposes (in native
    code) a PollLoop that other components can use to monitor file descriptor
    state changes.
    
    There can be zero or more targets for any given input event.  Each
    input target is specified by its input channel and some parameters
    including flags, an X/Y coordinate offset, and the dispatch timeout.
    An input target can request either synchronous dispatch (for foreground apps)
    or asynchronous dispatch (fire-and-forget for wallpapers and "outside"
    targets).  Currently, finding the appropriate input targets for an event
    requires a call back into the WindowManagerServer from native code.
    In the future this will be refactored to avoid most of these callbacks
    except as required to handle pending focus transitions.
    
    End-to-end event dispatch mostly works!
    
    To do: event injection, rate limiting, ANRs, testing, optimization, etc.
    
    Change-Id: I8c36b2b9e0a2d27392040ecda0f51b636456de25
    eclair snapshot
    move libbinder's header files under includes/binder
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    x86_64: Align uint64_t/int64_t structure member to 8 bytes
    
    To make sure the stature which pass between 32/64bit process have
    same memory layout for 32/64bit.
    
    Signed-off-by: Fengwei Yin <fengwei.yin@intel.com>
    Co-Authored-by: Narayan Kamath <narayan@google.com> (Unit test only.)
    Change-Id: I1bc2d12cce41ec0bc484adcaf968f274bec75c12
    BufferQueue: Add StreamSplitter
    
    Adds a StreamSplitter class, that takes one IGraphicBufferConsumer
    interface and multiple IGraphicBufferProducer interfaces and
    implements a one-to-many broadcast of GraphicBuffers (while managing
    fences correctly).
    
    Change-Id: I38ecdf3e311ac521bc781c30dde0cc382a4376a3
    BufferQueue: Add producer buffer-released callback
    
    Add a callback to the producer side, onBufferReleased, which will be
    called every time the consumer releases a buffer back to the
    BufferQueue. This will enable a buffer stream splitter to work
    autonomously without having to block on dequeueBuffer.
    
    The binder object used for the callback replaces the generic IBinder
    token that was passed into IGraphicBufferProducer::connect to detect
    the death of the producer. If a producer does not wish to listen for
    buffer release events, it can pass in an instance of the
    DummyProducerListener class defined in IProducerListener.h, if it even
    cares about death events (BufferQueue doesn't enforce the token being
    non-NULL, though perhaps we should).
    
    Change-Id: I23935760673524abeafea2b58dccc3583b368710
    Split BufferQueue into core + producer + consumer
    
    Change-Id: Idc39f1e511d68ce4f02202d35425a419bc0bcd92
    Binderize the consumer side of BufferQueue
    
    While currently untested, this should allow to move the
    BuffereQueue in the consumer process and have everything
    work as usual.
    
    Bug: 9265647
    
    Change-Id: I9ca8f099f7c65b9a27b7e7a3643b46d1b58eacfc
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    Add liblog
    
    Bug: 8580410
    Change-Id: I2ca4fa00dde0b574df3619134836bcb9315bd506
    don't use compile-time configuration of libgui as much as possible
    
    We now detect at runtime which sync features to use, which
    allows us to remove a lot of the compile-time configuration
    options. There  is still one option though, to disable
    KHR_fence_sync on some devices (which are more efficient
    without it).
    
    - added a backdoor to get the vendor's EGL strings
    
    the new logic is:
    - use always ANDROID_native_fence_sync if available
    - fallback to KHR_fence_sync if available and not disabled
      by the compile-time option
    - use KHR_wait_sync if available and either of the above is
      enabled
    
    Change-Id: I9c4b49d9ff1151faf902cc93bd53ea5f205aaabf
    get rid of ISurface
    
    ISurface was only used to get the IGraphicBufferProducer from
    a Layer. It's now replaced by a BBinder subclass / IBinder and
    is only used as a handle to the surface, to both refer to it
    and manage its life-time.
    
    Also cleaned-up a bit the ISurfaceComposer interface and
    "create layer" code path.
    
    Change-Id: I68d0e02d57b862cffb31d5168c3bc10cea0906eb
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: Ibed34175ae273608393aaa5f0a7df207dc40d709
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    SurfaceFlinger: Move GraphicBufferAlloc to libgui
    
    This change moves the GraphicBufferAlloc class from SurfaceFlinger to libgui.
    
    Change-Id: Idf31d2004efa2651b60590733f73c4a7b831e8a9
    libgui: enable fence support for exynos5
    
    Change-Id: Iffc48412b8c951116a956a3ac7dab8d75eed13da
    Bug: 7238122
    libgui: fix up compile options
    
    This change adds debug info to SurfaceFlinger's dumpsys to indicate that the
    USE_WAIT_SYNC compile option was enabled, and it removes the
    ALLOW_DEQUEUE_CURRENT_BUFFER option.
    
    Bug: 7238122
    Change-Id: I70e08e34c2ef58aa6d2f88229e781a119f84b5a9
    Show build config in dumpsys SurfaceFlinger
    
    This adds a line to the "dumpsys SurfaceFlinger" output that shows
    build-time configuration values.
    
    Example:
     Build configuration: [sf HAS_CONTEXT_PRIORITY] [libui] \
      [libgui USE_FENCE_SYNC]
    
    Bug 7206633
    
    Change-Id: Ibe1856b459d34a4be6ee83a4ebfd2807e6cc68a0
    gui: conditionally set USE_NATIVE_FENCE_SYNC for msm8960
    
    Change-Id: Ib7ad11597ef7c79162a0b0a49a1b8ae16d192c10
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Add BufferItemConsumer, a simple BufferQueue consumer.
    
    BufferItemConsumer allows for acquiring BufferQueue's BufferItems,
    which contain all the data and metadata the BufferQueue has for a
    given graphics buffer.
    
    This consumer is useful when direct access to the native buffer_handles
    is needed by the client.
    
    Also includes a minor cleanup of CpuConsumer's use of 'virtual'.
    
    Bug: 6243944
    Change-Id: If7dc4192b15ac499555f1eda42a85140f2434795
    surfaceflinger: refactor FrambufferSurface
    
    This change refactors the FramebufferSurface class to inherit from the new
    ConsumerBase class.
    
    Bug: 6620200
    Change-Id: I46ec942ddb019658e3c5e79465548b171b2261f2
    remove unneeded dependencies in libhardware
    
    Change-Id: Ibb8d698d594216d0746b0e7270cf87d7e5acab2b
    libgui: enable EGL_fence_sync usage for exynos5
    
    Bug: 6876502
    Change-Id: I2ec2800881dcba9e4f6ff32ffa1341a2de01f0a2
    Transfer HWC release fences to BufferQueue
    
    After a HWC set, each SurfaceFlinger Layer retrieves the release fence
    HWC returned and gives it to the layer's SurfaceTexture. The
    SurfaceTexture accumulates the fences into a merged fence until the
    next updateTexImage, then passes the merged fence to the BufferQueue
    in releaseBuffer.
    
    In a follow-on change, BufferQueue will return the fence along with
    the buffer slot in dequeueBuffer. For now, dequeueBuffer waits for the
    fence to signal before returning.
    
    The releaseFence default value for BufferQueue::releaseBuffer() is
    temporary to avoid transient build breaks with a multi-project
    checkin. It'll disappear in the next change.
    
    Change-Id: Iaa9a0d5775235585d9cbf453d3a64623d08013d9
    Enable SurfaceTexture fence sync for the emulator
    
    The host-accelerated GL ES driver doesn't do the implicit
    synchronization required when fence sync isn't used.
    
    Bug: 6515813
    Change-Id: I6a667f2db6b519f3557b5abda78775f767841dae
    Add a BufferQueue CPU consumer.
    
    Aimed for use cases where gralloc buffers need to be consumed by CPU
    users, such as camera image data streams.
    
    The CpuConsumer is a synchronous queue, which exposes raw pointers to
    the underlying graphics buffers to applications. Multiple buffers may
    be acquired at once, up to the limit set at time of construction.
    
    Change-Id: If1d99f12471438e95a69696e40685948778055fd
    Added a DummyConsumer for use with BufferQueue.
    
    The DummyConsumer is a consumer that can connect to BufferQueue
    that does nothing.  It is required as BufferQueue checks
    if a consumer is connected.  Also fixes a bug where SurfaceTexture
    was reusing old texture slots.
    
    Bug: 6172739
    Change-Id: I5e7a118dd4d07807ba4c763200242b5ee7d3412b
    Refactored ISurfaceTexture calls from SurfaceTexture into BufferQueue.
    
    Change-Id: I514f6b802f6b49c9ae27bed37bf0b9d23da03c9a
    SurfaceTexture: use fence sync on omap4 & s5pc110
    
    This change enables the use of the EGL_KHR_fence_sync extension in
    SurfaceTexture on omap4 and s5pc110 platforms.
    
    Change-Id: Icad5245bab445413ffb8a7c823c296b678bf3250
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    Fix build.
    
    Revert "Add support for sending VSYNC events to the framework"
    
    This reverts commit f3918c5bd4bc9f02f74da42995564150ca2dd382.
    
    Change-Id: I998e3e1aa3fa310829ae973b64fe11b01f6f468f
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: If4126023fc9c067e56087ec7d16a8fd542ce1794
    enable ALLOW_DEQUEUE_CURRENT_BUFFER for tegra devices
    
    this flag should be enabled for all targets, but currently
    some have issues with it, so we're turning it on only for
    tested targets.
    
    this will hopefully resolve some performance issues.
    
    Bug: 5553562, 5631630
    Change-Id: I54c7a9e2068586898ab13e405d95534669260537
    Revert "enable ALLOW_DEQUEUE_CURRENT_BUFFER for tegra devices"
    
    This reverts commit e7758be6da85728df6b4215f413660c67c5a9740.
    
    Seemed to cause failures un SurfaceTexture.
    
    Bug: 5627450
    Revert "enable ALLOW_DEQUEUE_CURRENT_BUFFER for tegra devices"
    
    This reverts commit e7758be6da85728df6b4215f413660c67c5a9740.
    
    Seemed to cause failures un SurfaceTexture.
    
    Bug: 5627450
    enable ALLOW_DEQUEUE_CURRENT_BUFFER for tegra devices
    
    this flag should be enabled for all targets, but currently
    some have issues with it, so we're turning it on only for
    tested targets.
    
    this will hopefully resolve some performance issues.
    
    Bug: 5553562
    Change-Id: I939992b4cd0debea980dec0127c72be2dff33af8
    Rename SensorChannel to BitTube
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    unify SurfaceTexture and Surface
    
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    Add SurfaceTexture logging
    fix onFrameAvailable
    libgui: enable tests in the 'tests' build.
    
    This change makes the libgui makefile recurse into the tests directory
    so that the tests get built by a top-level make when
    TARGET_BUILD_VARIANT=tests.
    
    Change-Id: I6f623cc4b86dfeb00b9d21823316dbd9def23110
    merge libsurfaceflinger_client into libgui
    
    this is the first step in unifying surfacetexture and surface.
    for this reason the header files were not moved, as most of them
    will eventually go away.
    
    NOTE: currently we keep libsurfaceflinger_client.so as an empty
    library to workaround prebuilt binaries wrongly linking against
    it.
    
    Change-Id: I130f0de2428e8579033dc41394d093f4e1431a00
    Add the SurfaceTexture C++ implementation.
    
    This change adds the C++ implementation of SurfaceTexture and related
    classes. The goal of this is for a SurfaceTexture to be passed to
    camera service or Stagefright in place of a Surface to allow camera
    preview or decoded video frames to be streamed to an OpenGL ES texture
    that an application can use.
    
    Change-Id: I55c83a7017f1ecb81c9c9e3252cbd118b914296c
    first step at implementing the native sensor support
    
    in this commit:
    - implemented the C stub
    - implemented the binder interfaces involved
    - implemented most of the C++ client side
    
    missing:
    - SensorManager cannot connect to the SensorServer yet
    (because there is no SensorServer yet)
    
    Change-Id: I75010cbeef31c98d6fa62fd5d388dcef87c2636b
    more clean-up in preparation of bigger changes
    
    the most important change here is the renaming of
    ISurfaceFlingerClient to ISurfaceComposerClient
    
    Change-Id: I94e18b0417f50e06f21377446639c61f65f959b3
    split libsurfaceflinger_client and libcamera_client out of libui
    Improve the VSYNC api a bit.
    
    - add the ability to set the vsync delivery rate, when the rate is
    set to N>1 (ie: receive every N vsync), SF process' is woken up for
    all of vsync, but clients only see the every N events.
    
    - add the concept of one-shot vsync events, with a call-back
    to request the next one. currently the call-back is a binder IPC.
    
    Change-Id: I09f71df0b0ba0d88ed997645e2e2497d553c9a1b
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    SensorService fixes
    
      i) Significant Motion multiple clients fix. Make a copy of
      mActiveConnections vector before cleaning up SensorEventConnections
      when one-shot sensors trigger.
      ii) Maintain a mapping between flush_complete_events and
      SensorEventConnections to accurately map flush() API calls and
      corresponding flush_complete_events
      iii) Remove all references to 1_1 and 1_2 HALs.
      iv) Dynamically allocate sensor_event buffers in SensorService main
      threadLoop.
    
    Bug: 17412359
    Change-Id: If3c3986197660cafef2d2e0b4dc7582e229cf1c4
    Sensor.cpp changes.
    
      1) Rename TILT_DETECTOR
      2) Set mFlags correctly for wake-up sensors.
      2) Log errors for incorrect sensor flags.
    
    Change-Id: Ia449217d3b8a53353ad6b5c33c544ce37eb1de4f
    Remove WAKE_UP_* sensor constants.
    
    Change-Id: I3de9d114ce82de4ed841932747d72e1f6f73c24f
    Add glance gesture for doze mode.
    
    Change-Id: I038a706c3999200313ff5360c5ff1150ec081f08
    Surface reportingMode for Sensors.
    
    Change-Id: Iac8dd3408c90eb7d285a2e8043131fab3a7e58fa
    libgui: 64 bit compile issues (part deux)
    
    - nsecs_t printed with PRId64
    - int64_t/uint64_t print issues
    - some size_t printing issues.
    - missing argument to BQ_LOGV
    
    Change-Id: I493f2b578e801dc38c44f8c536faa45266720402
    Fix flattening/unflattening of android::Sensor.
    
    Write string lengths as uint32_t so that their width is
    the same on 32 and 64 bit processes.
    
    Note that this fixes another bug as a side effect; getFlattenedSize
    was assuming that sizeof(uint32_t) == sizeof(size_t).
    
    Change-Id: I7b6e3993e1f1ac45c14832ce59c59e0772855a2f
    Surface maxDelay and isWakeUpSensor flag in Sensor.java.
    
    Change-Id: Idd1e9045190beeca87b086b272e8cbf0bed05bae
    Set default values for FifoMaxEventCount and ReservedEventCount.
    
    Change-Id: I4f610c2912ffe1697d1ffb99c556d1c88578466e
    Add wake gesture in Sensor.cpp
    
    Change-Id: Ifb1744acffc2d57da43112fb9966261e8246d6de
    Enable wakeup sensors.
    
    SensorService should hold a wakelock till the app reads events from a wakeup sensor. Currently drivers hold a wakelock with a
    timeout while delivering events from a wake up sensor like Significant Motion. This hack can be removed now.
    
    Bug: 9774884
    Change-Id: If3b5acb99c9cf0cd29012fcfa9d6b04c74133d01
    Add stringType and requiredPermission to sensors, effectively adding permission checking for sensors
    
    This reverts commit 4369a4ebd5ae7567e7075bc82830b83178099ed5.
    
    Change-Id: Ifa8619cc6873470a07a987763d818d78d4232610
    Revert "Add stringType and requiredPermission to sensors, effectively adding permission checking for sensors"
    
    This reverts commit c57a019e117117c5a76c772970b26cd0f5db8c6a.
    
    Change-Id: I3540565bc3e56a32cf3b176a29216cf68bb763b2
    (cherry picked from commit 4369a4ebd5ae7567e7075bc82830b83178099ed5)
    Revert "Add stringType and requiredPermission to sensors, effectively adding permission checking for sensors"
    
    This reverts commit c57a019e117117c5a76c772970b26cd0f5db8c6a.
    
    Change-Id: I3540565bc3e56a32cf3b176a29216cf68bb763b2
    Add stringType and requiredPermission to sensors, effectively adding permission checking for sensors
    
    Change-Id: If0f3dbdb5d2e9378e1fed4614baee4e750d0c850
    Sensor batching. Changes to the native code.
    
    Bug: 10109508
    Change-Id: I7333f3aac76125a8226a4c99c901fb904588df04
    Make Flattenable not virtual
    
    Fallout from the Flattenable change, update all its uses.
    
    Additionnaly, fix/tighten size checks when (un)flatten()ing
    things.
    
    Removed the assumption by some flattenables (e.g.: Fence)
    that the size passed to them would be exact (it can
    and will be larger in some cases)
    
    The code in Parcel is a bit complicated so that we don't
    have to expose the full implementation (and also to
    keep the code smallish).
    
    Change-Id: I0bf1c8aca2a3128491b4f45510bc46667e566dde
    improve [un]marshalling of non-binder objects
    
    this change introduces a new class LightFlattenable<> which is
    a protocol to flatten simple objects that don't require
    binders or file descriptors; the benefit of this protocol is that
    it doesn't require the objects to have a virtual table and give us
    a consitant way of doing this.
    
    we also introduce an implementation of this protocol for
    POD structures, LightFlattenablePod<>.
    
    Parcel has been update to handle this protocol automatically.
    
    Sensor, Rect, Point and Region now use this new protocol.
    
    Change-Id: Icb3ce7fa1d785249eb666f39c2129f2fc143ea4a
    set a Sensor's version properly
    
    Bug: 6447433
    Change-Id: Iaa5d074a8137d9543ea78c2c6f63a750774b3057
    9-axis sensor fusion with Kalman filter
    
    Add support for 9-axis gravity and linear-acceleration sensors
    virtual orientation sensor using 9-axis fusion
    
    Change-Id: I6717539373fce781c10e97b6fa59f68a831a592f
    Added SensorManager.getMinDelay()
    
    Exposed the new "min delay" sensor property through native and
    java sensor apis. This allows the caller to know what is the
    maximum rate at which a sensor can return events, or, if a sensor
    works in "update" mode (events returned only when the value changes).
    
    Also augmented SensorManager.regusterSensorEvent() so that it can
    accept a value in microsecond in addition to the 4 constants already
    defined.
    
    Change-Id: If425e9979892666df8c989d7de3c362230fa19e0
    Fix a memory corruption when writting Sensor into a parcel
    
    Change-Id: I03f703ae2224f43924031bfea4c68aa979bb9f05
    new SensorService
    
    remove old sensor service and implement SensorManager
    on top of the new (native) SensorManger API.
    
    Change-Id: Iddb77d498755da3e11646473a44d651f12f40281
    first step at implementing the native sensor support
    
    in this commit:
    - implemented the C stub
    - implemented the binder interfaces involved
    - implemented most of the C++ client side
    
    missing:
    - SensorManager cannot connect to the SensorServer yet
    (because there is no SensorServer yet)
    
    Change-Id: I75010cbeef31c98d6fa62fd5d388dcef87c2636b
    libgui: 64 bit compile issues (part deux)
    
    - nsecs_t printed with PRId64
    - int64_t/uint64_t print issues
    - some size_t printing issues.
    - missing argument to BQ_LOGV
    
    Change-Id: I493f2b578e801dc38c44f8c536faa45266720402
    BufferQueue: Guard against unbounded queue growth
    
    Adds logic to dequeueBuffer that blocks if there are currently too
    many buffers in the queue. This prevents unbounded growth around
    times where the slots are cleared but the queue is not (e.g.,
    during rapid connect/disconnect or setBufferCount activity). This
    replaces the fix from ag/377958 in a more general way.
    
    Bug: 11293214
    Change-Id: Ieb7adfcd076ff7ffe3d4d369397b2c29cf5099c3
    BufferQueue: Increase max slots from 32 to 64
    
    Increases NUM_BUFFER_SLOTS from 32 to 64 and changes the mask
    returned by IGBC::getReleasedBuffers from 32 to 64 bits.
    
    Bug: 13174352
    Change-Id: Ie8ef0853916cfb91f83881c7241886bb1950f01a
    BufferQueue: Add StreamSplitter
    
    Adds a StreamSplitter class, that takes one IGraphicBufferConsumer
    interface and multiple IGraphicBufferProducer interfaces and
    implements a one-to-many broadcast of GraphicBuffers (while managing
    fences correctly).
    
    Change-Id: I38ecdf3e311ac521bc781c30dde0cc382a4376a3
    BufferQueue: Hook up IProducerListener
    
    Actually call the producer listener's callback during
    IGraphicBufferConsumer::releaseBuffer
    
    Change-Id: Idfa6bb08d62629cd3a198318e6c6fd6a731e73ef
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    BufferQueue: Allow detaching/reattaching buffers
    
    Adds detachBuffer and attachBuffer calls to both the producer and
    consumer sides of BufferQueue. Buffers may be detached while dequeued
    by the producer or acquired by the consumer, and when attached, enter
    the dequeued and acquired states, respectively.
    
    Bug: 13173343
    Change-Id: Ic152692b0a94d99e0135b9bfa62747dab2a54220
    Change BufferQueue into producer/consumer wrapper
    
    Now that BufferQueue has been split into core + producer + consumer,
    rewrite BufferQueue to be a thin layer over a producer and consumer
    interface. Eventually, this layer will be deprecated in favor of
    only using either the producer or consumer interface, as applicable.
    
    Change-Id: I340ae5f5b633b244fb594615ff52ba50b9e2f7e4
    Split BufferQueue into core + producer + consumer
    
    Change-Id: Idc39f1e511d68ce4f02202d35425a419bc0bcd92
    Sensor related changes for NDK.
    
       i) ASensorManager_getDefaultSensor returns a wake-up/non wake-up sensor
          depending on the type.
       ii) Add ASensor_isWakeUpSensor and ASensorManager_getDefaultSensorEx
           methods.
    Bug : 16399898
    Change-Id: I1a86fb8d9de23039fdf41679d1487e1cd761a9d0
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    SensorManager reconnects to sensor service when the later dies
    
    if system process ever restarted, processes using a SensorManager
    would loose the ability to use it, resulting to a crash.
    we now listen for sensor service death and reconnected if necessary.
    
    Bug: 5445240
    Change-Id: Ia47f8b26cdcecb729fa22bf11d55e10fcaef8cfc
    add logging and defensive code when initializing sensors
    
    Bug: 5445240
    Change-Id: I9dc7d27d3e8b4f15989488859831526d8c7ded3b
    new SensorService
    
    remove old sensor service and implement SensorManager
    on top of the new (native) SensorManger API.
    
    Change-Id: Iddb77d498755da3e11646473a44d651f12f40281
    first step at implementing the native sensor support
    
    in this commit:
    - implemented the C stub
    - implemented the binder interfaces involved
    - implemented most of the C++ client side
    
    missing:
    - SensorManager cannot connect to the SensorServer yet
    (because there is no SensorServer yet)
    
    Change-Id: I75010cbeef31c98d6fa62fd5d388dcef87c2636b
    Fix missing parens in CleanSpec.mk.
    
    Change-Id: I0440a942d3e685d619ec9cc402d3293cb3f52df1
    Fix broken CleanSpec.mk in libs/gui
    
    The CleanSpec is missing parens, which causes $P to be interpreted as a
    single variable, and the following printed to the log:
    
    Clean step: rm -rf RODUCT_OUT/obj/SHARED_LIBRARIES/libgui_intermediates
    
    This patch adds parens as needed.
    
    Change-Id: I587998fa67a4884418c286360a577cdbb6ea9a21
    libgui: enable fence support for exynos5
    
    Change-Id: Iffc48412b8c951116a956a3ac7dab8d75eed13da
    Bug: 7238122
    gui: conditionally set USE_NATIVE_FENCE_SYNC for msm8960
    
    Change-Id: Ib7ad11597ef7c79162a0b0a49a1b8ae16d192c10
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Remove deprecated BufferQueue constructor
    
    Finally remove the BufferQueue constructor itself. From now on, all
    BufferQueues must be created through the createBufferQueue method.
    
    Bug: 13415624
    Change-Id: I192bf9430265bab761dcd59db1f02c9d0ac4feed
    BufferQueue: Increase max slots from 32 to 64
    
    Increases NUM_BUFFER_SLOTS from 32 to 64 and changes the mask
    returned by IGBC::getReleasedBuffers from 32 to 64 bits.
    
    Bug: 13174352
    Change-Id: Ie8ef0853916cfb91f83881c7241886bb1950f01a
    BufferQueueProducer: add detachNextBuffer
    
    Adds a new method, IGBP::detachNextBuffer, that effectively does
    dequeue + request + detach in a single call, but does not need to
    know anything about the dequeued buffer, and will not block on
    dequeue. This is mostly for the upcoming StreamSplitter to use in
    its onBufferReleased callback.
    
    Change-Id: Ie88a69de109003acebaa486a5b44c8a455726550
    BufferQueue: Remove Bn version of create*
    
    It turns out that there's no reason to have both I* and Bn* versions
    of the createBufferQueue method, so I removed the Bn* version.
    
    Change-Id: I66aeb09e10458ae540ddf1f38d2d0154ea8f315b
    BufferQueue: Add producer buffer-released callback
    
    Add a callback to the producer side, onBufferReleased, which will be
    called every time the consumer releases a buffer back to the
    BufferQueue. This will enable a buffer stream splitter to work
    autonomously without having to block on dequeueBuffer.
    
    The binder object used for the callback replaces the generic IBinder
    token that was passed into IGraphicBufferProducer::connect to detect
    the death of the producer. If a producer does not wish to listen for
    buffer release events, it can pass in an instance of the
    DummyProducerListener class defined in IProducerListener.h, if it even
    cares about death events (BufferQueue doesn't enforce the token being
    non-NULL, though perhaps we should).
    
    Change-Id: I23935760673524abeafea2b58dccc3583b368710
    BufferQueue: Allow returning interfaces as I*/Bn*
    
    This adds a second createBufferQueue method that returns
    sp<IGraphicBuffer*> interfaces instead of sp<BnGraphicBuffer*>, since
    most clients don't actually need the Binderized versions (but some
    might).
    
    Change-Id: Iaf4f719c96ddb6f704afc75cf52be22588173e32
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    BufferQueue: Allow detaching/reattaching buffers
    
    Adds detachBuffer and attachBuffer calls to both the producer and
    consumer sides of BufferQueue. Buffers may be detached while dequeued
    by the producer or acquired by the consumer, and when attached, enter
    the dequeued and acquired states, respectively.
    
    Bug: 13173343
    Change-Id: Ic152692b0a94d99e0135b9bfa62747dab2a54220
    Change BufferQueue into producer/consumer wrapper
    
    Now that BufferQueue has been split into core + producer + consumer,
    rewrite BufferQueue to be a thin layer over a producer and consumer
    interface. Eventually, this layer will be deprecated in favor of
    only using either the producer or consumer interface, as applicable.
    
    Change-Id: I340ae5f5b633b244fb594615ff52ba50b9e2f7e4
    gui: Add tests for IGraphicBufferProducer
    
    * Basic tests only. Needs more complicated queue/dequeue tests.
    * Also needs consumer-side tests to really be thorough.
    
    Change-Id: I1099dd56d65b6e9dfa15377726d6054ce657c0ca
    gui: Update header docs for IGraphicBufferConsumer/Producer/BufferQueue
    
    Also fix compiler warnings for libgui
    
    Change-Id: I0ee38d9ad5eaa82d55bf812d291da8c433581cef
    Wait for buffers to drain
    
    When a BufferQueue producer disconnects and reconnects, we retain
    the previously-queued buffers but empty the slots.  This allows
    the number of queued buffers to grow without limit.  The low-memory
    killer does not approve.
    
    Bug 11069934
    
    Change-Id: Ia2eaa954c7a3904b54209a3701dba01689e204d8
    BufferQueue: fix a test crash
    
    Bug: 10935880
    Change-Id: If76e9fb055103bad0db7e6c16487532671573149
    Remove unnecessary include.
    
    All these files are including utils/CallStack.h, but none of the code
    uses any CallStack objects.
    
    Change-Id: I38c3a346a3bd0ddbff368d0f7f8b3f3d78fc0432
    fix camera API 2.0 orientation
    
    we add a flag to ANativeWindow::setBufferTransform that means
    "apply the inverse rotation of the display this buffer is displayed
    onto to".
    
    Bug: 10804238
    Change-Id: Id2447676271950463e8dbcef1b95935c5c3f32b2
    Make sure do disconnect from a BQ when its client dies.
    
    Bug: 5679534
    
    Change-Id: If447e8673df83fe0b1d6210641e0a48522501a53
    Force async behavior for the virtual display output BufferQueue
    
    Bug: 10551087
    Change-Id: I40bbb2b87d64420939a0ea309254f281437dab56
    Re-enable frame dropping for non-auto timestamps
    
    This change adds an entire field to note whether the timestamp was
    auto-generated by Surface or supplied by the application.
    
    The value is used when deciding whether or not to drop frames based
    on buffer presentation timestamps.  If a desired presentation time
    was set explicitly, BufferQueue will use that value to decide if a
    frame should be dropped.  If the timestamp was generated by Surface
    at the time the buffer was queued, the timestamp is ignored.
    
    Bug 10151804
    
    Change-Id: Ibd571a7578351063b813cbdad2ddbeed70655ba5
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    Roll back recent change
    
    Disable dropping of frames based on timestamp.  Resume auto-
    generating timestamps in Surface.
    
    Bug 10151804
    
    Change-Id: I15de26158e1d7ef22a5b150e685a126dc48ae2b4
    Binderize the consumer side of BufferQueue
    
    While currently untested, this should allow to move the
    BuffereQueue in the consumer process and have everything
    work as usual.
    
    Bug: 9265647
    
    Change-Id: I9ca8f099f7c65b9a27b7e7a3643b46d1b58eacfc
    Drop frames based on presentation timestamp
    
    If there are two or more buffers pending that are ready for
    immediate presentation, drop all but the last one.
    
    Any code that didn't explicitly specify timestamps for buffers
    was using the default value (auto-generated "now").  As a result,
    surfaceflinger would drop frames whenever more than one buffer
    was queued.  We now use zero as the auto-generated timestamp,
    and we don't set the timestamp in eglBeginFrame().
    
    Change-Id: I187f42d33de227cd3411ff0dcd3b9ce1961457eb
    log an error when dequeueBuffer gets a NULL Fence
    
    Bug: 9858745
    Change-Id: If35d6a7d770bf0a42d55bc55880a9ddb721fcfd0
    BufferQueue: Support query of consumer usage bits
    
    Bug: 9592202
    Change-Id: I61a17758200e61adaca695b426db3df0f6637d4c
    single buffer mode for BufferQueue
    
    Bug: 9891035
    Change-Id: Id1ab5f911a6dc4c1d8235e65775b3d3635231ad4
    Fix a race in BufferQueue
    
    BufferQueue::dequeueBuffer() could incorrectly return
    WOULD_BLOCK while in "cannot block" mode if it happened
    while a consumer acquired the last allowed buffer
    before releasing the old one (which is a valid thing
    to do).
    
    Change-Id: I318e5408871ba85e068ea9ef4dc9b578f1bb1043
    fix log messages and bogus error message
    
    also assert when releasing a buffer and it has
    been queued
    
    Change-Id: I6f78d9ceb406ec85ff46c7b6d0c047b14063e3d0
    make sure to reset the framenumber when a buffer is marked FREE
    
    Change-Id: Ic45929f35553de209801f74e8006fb1bf0b25b45
    Make ANW.setSwapInterval(0) work again
    
    we can now queue/dequeue a buffer in asynchrnous mode by using the
    async parameter to these calls. async mode is only specified
    with those calls (it is not modal anymore).
    
    as a consequence it can only be specified when the buffer count
    is not overidden, as error is returned otherwise.
    
    Change-Id: Ic63f4f96f671cb9d65c4cecbcc192615e09a8b6b
    BuffferQueue disconnect is now always asynchrnous
    
    we tag queued buffers with the "bufferqueue cannot block" flag
    and use that bit to discard a buffer in the queue by new ones
    comming in. this allows us to remove the buffer queue drain in
    disconnect while maintaining the right behaviour if it gets
    connected again (since each buffer remembers how it was enqueued).
    
    Change-Id: I1e703d363a687b70b19ba49cef32213116e8bd3f
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    Pay attention to buffer timestamps
    
    When acquiring a buffer, SurfaceFlinger now computes the expected
    presentation time and passes it to the BufferQueue acquireBuffer()
    method.  If it's not yet time to display the buffer, acquireBuffer()
    returns PRESENT_LATER instead of a buffer.
    
    The current implementation of the expected-present-time computation
    uses approximations and guesswork.
    
    Bug 7900302
    
    Change-Id: If9345611c5983a11a811935aaf27d6388a5036f1
    BufferQueue: remove freeAllBuffersExceptHeadLocked()
    
    Now that we are having separate buffer-instances for the buffer-
    queue, we can free all buffers; we don't have to keep the head
    alive.
    
    Change-Id: I023e9161a2501d99333f8868ce438afa914ec50f
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Related-to-bug: 7093648
    BufferQueue: track buffer-queue by instance vs. by reference
    
    Instead of representing the buffer-queue as a vector of buffer
    indices, represent them as a vector of BufferItems (copies).
    This allows modifying the buffer slots independent of the queued
    buffers.
    
    As part of this change, BufferSlot properties that are only
    been relevant in the buffer-queue have been removed.
    
    Also, invalid scalingMode in queueBuffer now returns an error.
    
    ConsumerBase has also changed to allow reuse of the same
    buffer slots by different buffers.
    
    Change-Id: If2a698fa142b67c69ad41b8eaca6e127eb3ef75b
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Related-to-bug: 7093648
    clean-up/simplify all dump() APIs
    
    remove the scratch buffer parameter and use
    String8::appendFormat() instead.
    
    Change-Id: Ib96c91617c8e7292de87433d15cf6232b7d591b0
    Updated comments
    
    Updated many comments.  Added one minor error check.
    
    Change-Id: Ib935dd99d417bada91d2e198008a50dd94269316
    Fix argument types in IGraphicBufferProducer methods
    
    Bug: 8384764
    Change-Id: I7a3f1e1a0584a70af04f9eafef900505389d2202
    workaround a deadlock when taking screenshots into a surface
    
    When disconnecting from BufferQueue, we now drain the queue
    except the head (which means in the screenshot case we won't
    have to block, but we might not have a buffer to show, this
    will appear as an error in the log).
    
    Bug: 8362363
    Change-Id: If80989aac3c917beea2ebddf3cbb502849d394da
    libgui: disallow NULL Fence pointers
    
    This change eliminates the uses of a NULL sp<Fence> indicating that no waiting
    is required.  Instead we use a non-NULL but invalid Fence object for which the
    wait methods will return immediately.
    
    Bug: 7892871
    Change-Id: I5360aebe3090422ef6920d56c99fc4eedc642e48
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    Refactor SurfaceTexture a bit.
    
    Rearranges updateTexImage() so that the SurfaceFlinger-specific
    behavior is in a new SurfaceFlingerConsumer subclass.
    
    SurfaceTexture behavior should not be altered.  Instead of
    acquire-bind-release we now do acquire-release-bind, but since
    it's all done with the lock held there shouldn't be any
    externally-visible change.
    
    Change-Id: Ia566e4727945e2cfb9359fc6d2a8f8af64d7b7b7
    fix typo that broke all the builds
    
    cherry pick into master since auto-merger is blocked
    
    Bug: 7584338
    Change-Id: Ie7d7c238de1fd224b3b0bae9669a8dcb2f700a79
    fix typo that broke all the builds
    
    Bug: 7584338
    Change-Id: Ieb8c27a544ac583af9aa1e0376e33a673d2d9673
    fix an out-of-bounds memory access
    
    in this particular case, this OOB is always harmless
    (and that's why it didn't get fixed from MR1), however,
    it interfers with valgrind debugging.
    
    Change-Id: Ic977e03287e59c4b124a89146c9023bd0cb540a8
    BufferQueue: alloc without holding the lock
    
    This change makes BufferQueue::dequeueBuffer release its mutex before
    allocating new buffers.  This should alleviate lock contention in
    SurfaceFlinger where SF's main thread can get blocked waiting for an allocation
    operation to complete.
    
    Bug: 7335075
    Change-Id: I1b000539cc616a695afab2e9c68507db69e57b13
    libgui: fix up compile options
    
    This change adds debug info to SurfaceFlinger's dumpsys to indicate that the
    USE_WAIT_SYNC compile option was enabled, and it removes the
    ALLOW_DEQUEUE_CURRENT_BUFFER option.
    
    Bug: 7238122
    Change-Id: I70e08e34c2ef58aa6d2f88229e781a119f84b5a9
    Fix transform hints
    
    The hints were being set a little too late, so the pre-rotation stuff
    wasn't quite working.
    
    Bug 7054997
    
    Change-Id: Id8d5c626db7a76f768ba762a145b315878ee08e6
    BufferQueue: add a setMaxAcquiredBufferCount check
    
    This change adds a check to verify the validity of the value passed to
    setMaxAcquiredBufferCount.
    
    Change-Id: I39730557aa58261e678bd6e4fce11bab78e98362
    BufferQueue: add a check for the max acquired bufs
    
    This change adds an error check to ensure that consumers don't acquire more
    buffers than the maximum that they set.
    
    Change-Id: I026643564bde52732e4ee6146972b207ddbbba77
    BufferQueue: use max acquired buffer count
    
    This change makes BufferQueue derive the min undequeued buffer count from a max
    acquired buffer count that is set by the consumer.  This value may be set at
    any time that a producer is not connected to the BufferQueue rather than at
    BufferQueue construction time.
    
    Change-Id: Icf9f1d91ec612a079968ba0a4621deffe48f4e22
    BufferQueue: simplify max buffer count handling
    
    This change reworks how the maximum buffer count is computed.
    
    Change-Id: I7d3745814b9bd6f6f447f86bfea8eb7729914ebf
    BufferQueue: clean up buffer counting
    
    This change is a clean up of some of the handling of the maximum number of
    buffers that are allowed at once.  It mostly renames a few member variables and
    methods, but it includes a couple small refactorings.
    
    Change-Id: I9959310f563d09583548d4291e1050a7bbc7d87d
    surfaceflinger: refactor FrambufferSurface
    
    This change refactors the FramebufferSurface class to inherit from the new
    ConsumerBase class.
    
    Bug: 6620200
    Change-Id: I46ec942ddb019658e3c5e79465548b171b2261f2
    Return fence from acquireBuffer
    
    Change-Id: Iab22054c1dc4fd84affab3cc5bbdcd5a1e689666
    Pass fences with buffers from SurfaceTextureClient
    
    Change-Id: I09b49433788d01e8b2b3684bb4d0112be29538d3
    Pass fences from BufferQueue to SurfaceTextureClient
    
    ISurfaceTexture::dequeueBuffer now returns the buffer's fence for the
    client to wait on. For BufferQueue, this means passing it through
    Binder so it can be returned to the SurfaceTextureClient. Now
    SurfaceTextureClient is responsible for waiting on the fence in
    dequeueBuffer instead of BufferQueue: one step closer to the goal.
    
    Change-Id: I677ae758bcd23acee2d784b8cec11b32cccc196d
    Transfer HWC release fences to BufferQueue
    
    After a HWC set, each SurfaceFlinger Layer retrieves the release fence
    HWC returned and gives it to the layer's SurfaceTexture. The
    SurfaceTexture accumulates the fences into a merged fence until the
    next updateTexImage, then passes the merged fence to the BufferQueue
    in releaseBuffer.
    
    In a follow-on change, BufferQueue will return the fence along with
    the buffer slot in dequeueBuffer. For now, dequeueBuffer waits for the
    fence to signal before returning.
    
    The releaseFence default value for BufferQueue::releaseBuffer() is
    temporary to avoid transient build breaks with a multi-project
    checkin. It'll disappear in the next change.
    
    Change-Id: Iaa9a0d5775235585d9cbf453d3a64623d08013d9
    Implement SurfaceFlinger's ANW on top of BufferQueue
    
    SF now has its own implementation of ANW for the
    framebuffer and it uses BufferQueue. FramebufferNativeWindow
    is now only used by stand-alone apps.
    
    Change-Id: Iddeb24087df62bd92b0f78e391dda9b97ddc859c
    Remove misleading and wrong ALOGW
    
    Bug: 6476587
    Change-Id: I4345f1100db02786bb50ad83ca7b559cad301706
    libgui: remove setPostTransformCrop
    
    This change removes the setPostTransformCrop function from
    SurfaceTextureClient.  It also includes a small logging fix in BufferQueue.
    
    Bug: 6299171
    Change-Id: Ifd0ed05b95dad6085e7a8267fda4d69b76ea3bad
    libgui: improve some logging and dumping
    
    This change updates some of the SurfaceTextureClient and BufferQueue logging
    and dumping to include the crop, transform and scaling mode.  It also removes
    the uses of the NO_SCALE_CROP scaling mode enum, which was added by accident in
    a previous change.
    
    Change-Id: I62912716a1e48885fb22f12b92678aa13f10fcd9
    Bug: 6470541
    libgui: improve some logging and dumping
    
    This change updates some of the SurfaceTextureClient and BufferQueue logging
    and dumping to include the crop, transform and scaling mode.  It also removes
    the uses of the NO_SCALE_CROP scaling mode enum, which was added by accident in
    a previous change.
    
    Change-Id: I62912716a1e48885fb22f12b92678aa13f10fcd9
    Bug: 6470541
    libgui: improve some logging and dumping
    
    This change updates some of the SurfaceTextureClient and BufferQueue logging
    and dumping to include the crop, transform and scaling mode.  It also removes
    the uses of the NO_SCALE_CROP scaling mode enum, which was added by accident in
    a previous change.
    
    Change-Id: I62912716a1e48885fb22f12b92678aa13f10fcd9
    Bug: 6470541
    libgui: Add support for post-xform crops.
    
    This change adds support for specifying a crop rectangle to a
    SurfaceTextureClient that is in post-transformed coordinate space.
    
    Change-Id: I247901de343e71b32850f7ae3bac62dfa612ad3d
    Bug: 6299171
    libgui: Add plumbing for active rectangle
    
    This change adds the plumbing to SurfaceTextureClient, BufferQueue, and
    SurfaceTexture to get the active rectangle passed to the ANativeWindow to
    the buffer consumer.
    
    Change-Id: I35da0889b266327ebb079b6a7136fa3e2e8b00e6
    add a way to query whether an ANativeWindow consumer is running ahead of the producer
    
    Change-Id: Ibccfa1feb56db2ab11f0c0934ce2d570a2b65ae2
    update the binder protocol for connect to match that of queueBuffer
    
    indeed, connect and queueBuffer return the same data, so it's
    easier to have them use the same protocol.
    
    Change-Id: I4f9fa3be0a80c9ab0a7a4039b282ae843aab02e1
    Fix BufferQueue verbose log
    
    Change-Id: Id80742b5c1fd2960cc2eda3a9ba2db1078df5320
    Remove fixed USAGE_HW_TEXTURE flag from BufferQueue.
    
    USAGE_HW_TEXTURE applies to SurfaceTexture, not to all uses of
    BufferQueue. Refactor accordingly.
    
    Change-Id: Ic7add5e1f2bbec3d3e796ba7f15eaa0633945d8f
    BufferQueue: check before tracing buffer index
    
    This change adds a check on ATRACE_ENABLED before calling snprintf to trace the
    buffer index.
    
    Change-Id: Id79430f9c69706393efd3d10780a4cc97055e9e0
    make sure to pass the transform-hint on ANW.connect
    
    this optimization was probably lost during ST refactoring.
    
    Change-Id: I845978c4b718cb91941d15b30484837f19714abe
    fix a typo causing pre-rotation to never work
    
    Change-Id: I8d698ec52d53ef1a553b887c7329413e1f49cc72
    Enabled cropping support in SurfaceTexture
    
    SurfaceTexture will modify the crop rect so it matches
    the desired output aspect ratio when the scaling
    mode is NATIVE_WINDOW_SCALING_MODE_CROP.  Added a test
    for this new scaling mode.
    
    Change-Id: I60f24dcbc294b65cd10a393d9e27d40f07d27bb6
    use in/out structures for queueBuffer() IPC
    
    Change-Id: Ie125df2444b62a9a2200586a717dca268852afc9
    BufferQueue returns proper code on acquire
    
    Also removed unnecessary debug messages from
    SurfaceTextureClient.
    
    Change-Id: I291897a44170142f9d42a007b008823fad4683e0
    BufferQueue no longer hardcodes buffer counts
    
    BufferQueue is now more flexible as it can be used
    by SurfaceMediaSource in addition to SurfaceTexture.
    
    Change-Id: I4222be8918d63372c44fcd412d9ad241c6a3eeb9
    Fixed disconnect bug in SurfaceTexture
    
    BufferQueue's disconnect could race with updateTexImage
    where invalid buffers could be released.  Additionally
    fixed similar bug with setBufferCount.  Tests were added
    to stress the disconnect mechanism.
    
    Change-Id: I9afa4c64f3e025984e8a9e8d924852a71d044716
    reduce IPC with BufferQueue
    
    collapse setCrop, setTransform and setScalingMode to queueBuffer()
    this ends up simplifying things quite a bit and reducing the numnber
    of IPC needed per frame.
    
    Change-Id: I3a13c07603abe4e76b8251e6380b107fde22e6d9
    libgui: add BQ consumer buffer free notifications
    
    This change adds a new callback for BufferQueue consumers to be notified
    when the BufferQueue frees some or all of its buffers.  This is needed
    to retain SurfaceTexture behavior where all buffers would be freed when
    the producer disconnects.  This change also modifies the
    SurfaceTextureGLToGLTest.EglDestroySurfaceUnrefsBuffers test to catch
    when the buffers are not freed.
    
    The implementation is a little complicated because it needs to avoid
    circular sp<> references across what will be a binder interface (so wp<>
    can't be used directly).  It also needs to avoid the possibility of
    locking the BufferQueue and consumer (e.g. SurfaceTexture) mutexes in
    the wrong order.
    
    This change also includes a few additional fixes and test cleanups.
    
    Change-Id: I27b77d0af15cb4b135f4b63573f634f5f0da2182
    SurfaceTexture: Fully refactored from BufferQueue
    
    SurfaceTexture and BufferQueue are separate objects.
    
    Change-Id: I230bc0ae6f78d0f9b2b5df902f40ab443ed5a055
    attempt to fix a deadlock in SurfaceTextureClient::disconnect
    
    - condition wasn't signaled if an error happened between acquire and release
    - also replace signal with broadcasts
    
    Bug: 6109450
    Change-Id: I8ac03c7eca35c9cc04a00ef7fad36bb9cb3fcef6
    BufferQueue: fixed issues with buffer slots not available
    
    Bug: 6120953
    Change-Id: I61d97d650c8dee0a6d7c19f2f50aa92a5f159095
    BufferQueue: fixed acquire operation
    
    Bug: 6082872
    Change-Id: I897dc61eb84fed953e51f97871cd3ae6321505d4
    Add ATRACEs for Buffer indices
    
    Change-Id: I44d7a9a9bf03f418cab2a4854583aac9e533daee
    Add tracing to various graphics components.
    
    This change adds ATRACE call tracing to BufferQueue,
    SurfaceTextureClient, SurfaceTexture, SurfaceFlinger, Layer, and EGL.
    
    Change-Id: I9d75ed26f5a3f0d1af635da38289520134cfbbb7
    Removed dependecies between BufferQueue and SurfaceTexture
    
    Refactored SurfaceTexture and BufferQueue such that share
    no protected members.  Created an consumer facing interface
    for BufferQueue in preparation of connecting SurfaceTexture
    and BufferQueue through a binder.
    
    Change-Id: I938e63e085128148c58d0e26c7213b30145c109f
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    Revert "Removed dependecies between BufferQueue and SurfaceTexture"
    
    This reverts commit a631399f71dbc7659d2f241968f85d337726ae61
    Removed dependecies between BufferQueue and SurfaceTexture
    
    Refactored SurfaceTexture and BufferQueue such that share
    no protected members.  Created an consumer facing interface
    for BufferQueue in preparation of connecting SurfaceTexture
    and BufferQueue through a binder.
    
    Change-Id: Iff55e740e36a7f70c9f7a17ee7a5af38e3d21f0f
    Refactored query function from SurfaceTexture into BufferQueue
    
    Change-Id: Id1cb6cc38d01edb4fcfcad867c5a7693bdcc3ab1
    Refactored ISurfaceTexture calls from SurfaceTexture into BufferQueue.
    
    Change-Id: I514f6b802f6b49c9ae27bed37bf0b9d23da03c9a
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)
    
    Change-Id: I26f76452ac49e2890b14d133c065493d8df0fb4a
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: Ib08fe86d23db91ee153e9f91a99a35c42b9208ea
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    SurfaceTexture: fix a verbose-log compile error
    
    Change-Id: I045231207e068d950bb0cb5085717af5d9454ed1
    SurfaceTexture: add EGL_KHR_fence_sync option
    
    This change adds a compile-time option for SurfaceTexture to use the
    EGL_KHR_fence_sync extension to synchronize access to Gralloc buffers.
    
    Bug: 5122031
    Change-Id: I7e973a358631fff5308acf377581b811911fe790
    split ComposerService out of SurfaceComposerClient.h
    
    Change-Id: I1eb691f7ca263d5895d871ab675bb5826e0323c6
    EGL: default to swap interval 1
    
    This change explicitly sets swap interval 1 on the window when an
    EGLSurface is created to render to it.
    
    Change-Id: I91eb29dbee3ae4a55076b921f084d503fbe94e03
    don't report an error when disconnecting from an abandoned surfacetexture
    
    this happens often with CPU Surfaces, which disconnect long
    after their surfacetexture has been abandoned.
    
    Change-Id: If49da03b72f99130e01b2b9bcbd444bb38f7ed4e
    enable ALLOW_DEQUEUE_CURRENT_BUFFER for tegra devices
    
    this flag should be enabled for all targets, but currently
    some have issues with it, so we're turning it on only for
    tested targets.
    
    this will hopefully resolve some performance issues.
    
    Bug: 5553562, 5631630
    Change-Id: I54c7a9e2068586898ab13e405d95534669260537
    SurfaceTexture: fix a bug with buffer reallocation
    
    This change fixes an issue involving buffer reallocation and the
    ALLOW_DEQUEUE_CURRENT_BUFFER mode in SurfaceTexture.  The bug happened
    when the buffer slot currently attached to the GL texture was selected
    for dequeuing, but the dequeue operation caused the buffer to be
    reallocated.  Because the buffer is new, the image producer could fill
    the buffer and queue it before an updateTexImage call, which would
    result in the "slot %d is current" error in queueBuffer.
    
    Bug: 5631630
    Change-Id: Icdd8bc5cad3c7db43953446d9be2603aaea11a8d
    Revert "enable ALLOW_DEQUEUE_CURRENT_BUFFER for tegra devices"
    
    This reverts commit e7758be6da85728df6b4215f413660c67c5a9740.
    
    Seemed to cause failures un SurfaceTexture.
    
    Bug: 5627450
    Revert "enable ALLOW_DEQUEUE_CURRENT_BUFFER for tegra devices"
    
    This reverts commit e7758be6da85728df6b4215f413660c67c5a9740.
    
    Seemed to cause failures un SurfaceTexture.
    
    Bug: 5627450
    SurfaceTexture: Fix to return the oldest of free buffers to Client on Dequeue call
    
    Surface Texture dequeue logic is modified to return the oldest of the
    free buffers to Client on dequeue call.
    
    Currently dequeue method is returning the first buffer index which is free.
    The parsing is done in ascending order of the buffer slot indices.
    This leads to returning the buffer which has been just queued to composer,
    and hence display, and this defeats the purpose of having minimum dequeue count
    as 2 in asynchrnouse mode.
    
    This is fixed by checking all the free slots and returning the oldest buffer.
    
    Change-Id: Ibbac10593c3994c278c601af0480b171635ecdd4
    Signed-off-by: Sunita Nadampalli <sunitan@ti.com>
    enable ALLOW_DEQUEUE_CURRENT_BUFFER for tegra devices
    
    this flag should be enabled for all targets, but currently
    some have issues with it, so we're turning it on only for
    tested targets.
    
    this will hopefully resolve some performance issues.
    
    Bug: 5553562
    Change-Id: I939992b4cd0debea980dec0127c72be2dff33af8
    SurfaceTexture: various logging improvements
    
    Change-Id: I1f7216276547a1e9f9343c88c6cc1c24efcdcdbc
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    SurfaceTexture: parameterize the texture target
    
    This change adds a hack to allow Android Browser to use a SurfaceTexture
    to stream RGBA images to a GL_TEXTURE_2D texture object.
    
    Change-Id: Idb90064d5d4b920959ef3be7451362ac5012460e
    SurfaceTexture: add name support
    
    This change adds support for setting a string that can be used to
    identify a SurfaceTexture object in log messages.
    
    Change-Id: Ib4ee085f36c8830dc964c05ef1654f5a55dfcd60
    cleanup: fix typos in logs
    
    Change-Id: Ib5744564a873ea2b84100174673dc4d3ae109fcf
    make sure to re-initialize SurfaceTexture to its default state on disconnect
    
    this caused problems where the NavigationBar would disapear or be
    drawn in the wrong orientation.
    
    Change-Id: I083c41338db83a4afd14f427caec2f31c180d734
    make sure to re-initialize SurfaceTexture to its default state on disconnect
    
    this caused problems where the NavigationBar would disapear or be
    drawn in the wrong orientation.
    
    Change-Id: I083c41338db83a4afd14f427caec2f31c180d734
    don't return the current buffer from dequeueBuffer
    
    we were not reseting mCurrentTexture in some situations
    which in turn caused dequeueBuffers() return a
    "FREE" buffer that was also current.
    Very often it was harmless, but it created a race with
    updateTexImage() which could cause the following
    queueBuffers() to fail.
    
    Bug: 5156325
    Change-Id: If15a31dc869117543d220d6e5562c57116cbabdb
    fix a small race condition when returning the default width/height of a SurfaceTexture
    
    Change-Id: I581bf609505dfb5d4ec5957b2ef2c77df6cfb15f
    Revert "error out when SurfaceTexture APIs are called while not connected"
    
    This reverts commit a04cda9986366ab480ad8008c4d923271b05d78e.
    
    Conflicts:
    
            include/gui/SurfaceTexture.h
            libs/gui/SurfaceTexture.cpp
    
    Change-Id: Ib655016462c496ee2a27f7cb33a6e8b18cfe684a
    fix a crasher in SurfaceTexture::updateTexImage()
    
    we now make sure to drain the buffer queue on disconnect.
    this happens only when in synchrnous mode. in async mode
    we clear all buffers except the head of the queue.
    
    for extra safety we also catch the null pointer
    in updateTexImage (which should  never happen) and return
    an error.
    
    Bug: 5111008
    
    Change-Id: I5174a6ecbb0de641c6510ef56a611cbb4e9e1f59
    rework dequeueBuffer()'s main loop.
    
    this simplifies the code a bit and also makes sure
    we reevaluate mAbandoned and mConnectedApi each time
    we come back from waiting on mDequeueCondition
    
    Change-Id: I1f8538b62ad321b51ed79d953b700036daba796d
    error out when SurfaceTexture APIs are called while not connected
    
    - also log a warning when freeAllBuffers is called with a non empty buffer queue
    - rename freeAllBuffers to freeAllBuffersLocked
    
    Change-Id: Idb71fdcf233b9ccae62d5a2a7c3c4bad2501d877
    fix a crasher in dumpsys
    
    Bug: 5141729
    Change-Id: Ib104d49c8660621180966be099198fe29c5bebf5
    fix a crasher in dumpsys
    
    Bug: 5141729
    Change-Id: Ib104d49c8660621180966be099198fe29c5bebf5
    free all buffers when ANativeWindow::disconnect is called
    
    Change-Id: Ie06e73e5b44398cda9e99876f78175b5eef765dc
    return correct value from query after connecting a surface
    
    the first time a surface was connected, the values returned
    by query NATIVE_WINDOW_DEFAULT_{WIDTH|HEIGHT} and
    NATIVE_WINDOW_TRANSFORM_HINT were wrong until a call
    to queueBuffer was performed.
    
    Bug: 5137366, 5121607
    Change-Id: I7ac6b5b0daa876638f6bed7c20f286a6e6d984f6
    add some logs to track a crash in eglCreateImageKHR
    
    Bug: 5111008
    
    Change-Id: I3e7f5b986151e80cbded39e0dec057770da52fc1
    improve dumpsys SurfaceFlinger output
    
    we now output the handle and size of all buffers of each layer.
    
    Change-Id: I8d011ee4ae9199f4198bd07bed770ec3bcf02986
    Add a 'release' method to the SurfaceTexture public Java API
    
    Bug: 5063618
    Change-Id: I689cb0c01c14e597ccfb4eb0972e64fa570bd4e8
    SurfaceTexture: allow set_buffer_count(2)
    
    This change relaxes an error check in SurfaceTexture::setBufferCount to
    allow clients to explicitly set a buffer count of 2.  The clients that
    will do this are camera and video decode.  Previously it was thought
    that for those clients we would always use async mode, which requires a
    minimum of 3 buffers.  However, we now believe that for some devices it
    may make sense to use synchronous mode (with 2 buffers) to reduce memory
    usage.
    
    Bug: 5088418
    Change-Id: I620a0ef75075745be9d6c8219e0246aaf33ba950
    remove dead code and member variables.
    
    also fix some comments and improve debugging logs.
    
    Change-Id: I83e55309f306332b59e1ec46104c4a7fffbf3c97
    SurfaceTexture: enable RGB external textures
    
    This change removes support for conditionally using the GL_TEXTURE_2D
    target for SurfaceTexture textures with RGB buffers.  It also enables
    and fixes the RGB-based SurfaceTexture tests.
    
    Change-Id: I9a251a981cf66af6b048b2e4c3fe7231e4774f4d
    SurfaceTexture: add the abandon method.
    
    This change adds the 'abandon' method to the SurfaceTexture C++ class.
    This method may be used to put the SurfaceTexture in an abandoned state,
    causing all ISurfaceTexture methods to fail.
    
    Change-Id: Ibd261f7b73f44e2bec36a8508bf92113cfb7cf95
    SurfaceTexture: remove getAllocator
    
    This change removes the SurfaceTexture::getAllocator method, as it's no
    longer needed.  Proper refcounting of the Gralloc buffers is now handled
    by the IGraphicBufferAlloc binder marshalling code.
    
    Change-Id: I5cffa6ebfc1bc5828fb7ce0e0a5b2f55cd8479da
    implement: "Add an ANativeWindow API for SurfaceFlinger to suggest an optimal buffer orientation"
    
    Bug: 4487161
    Change-Id: I883f34efe542c2a566d04966f873374f40c50092
    use SurfaceTexture new scaling mode in SF
    
    SF now obeys SurfaceTexture's scaling mode instead
    of inferring it from the buffer's size
    
    Change-Id: I4d50e9851abedd7e64bfcfc8af9eefb9fb668529
    Add set_scaling_mode() to ANativeWindow.
    
    This allows to specify the scaling mode independently from
    the buffer size.
    
    Change-Id: Iaa2baa660445531a97d3fac192e580f4929c5d3b
    move lock/unlock implementaion outside of Surface into SurfaceTextureClient
    
    This makes ANativeWindow_lock/ANativeWindow_unlockAndPost work
    with ANativeWindows implemented by Surface and SurfaceTextureClient.
    
    Also, Surface now inherits directly from SurfaceTextureClient.
    
    Bug: 5003724
    Change-Id: I9f285877c7bae9a262e9a7af91c2bae78804b2ef
    SurfaceTexture: make (dis)connect into an IPC
    
    This change makes the ANativeWindow connect and disconnect calls result
    in an IPC to the SurfaceTexture object.  This will allow us to prevent
    multiple simultaneous connections from different processes.
    
    Change-Id: Id9aa1003b1335b96ca6bd4a1f5a67aa433d42efb
    return an error code with gralloc buffer allocation failures
    
    Change-Id: I471e5d37ea7a42fc8a0f93446ee3b4229da37807
    Minor fix in SurfaceTexture
    
    Change-Id: Ic859715becf3e6d5107bd8beb8c577034d00ec52
    SurfaceTexture: consume buffers after err checks
    
    This change moves the point at which queued buffers get consumed to
    after any error checks that could cause updateTexImage to fail.  This
    way, if updateTexImage returns an error the buffer remains queued.
    SurfaceTexture: change onFrameAvailable behavior
    
    This change alters the conditions under which the onFrameAvailable
    callback gets called by the C++ SurfaceTexture class.  The new behavior
    is to call the callback whenever a frame gets queued that will be
    visible to the buffer consumer.  This means that buffers queued in
    synchronous mode always trigger the callback, as those buffers will
    remain pending until they are consumed.  Buffers queued in asynchronous
    mode will only trigger the callback if there was not previously an
    unconsumed buffer pending.
    
    The new behavior means that a consumer should perform a draw operation
    exactly once for every onFrameAvailable call that it recieves.  This
    change also modifies SurfaceFlinger and the SurfaceTexture JNI to
    support of the new behavior.
    
    Change-Id: I8b2c6e00961d3d58b11c6af50b555b6e4c5f5b40
    Add allowSynchronousMode to SurfaceTexture constructor.
    
    Change-Id: I54f30a3c16bbe6b813f3bcd1d389da5627531304
    Temporarily don't return the current buffer in synchronous mode
    
    activate synchronous mode by default.
    SurfaceTexture: fix a getTransformMatrix crash.
    
    This change moves the computation of the transform matrix out of
    getTransformMatrix and instead performs the computation when
    updateTexImage gets called.  This is needed in order for
    getTransformMatrix to succeed even if the buffers have been freed (e.g.
    by changing the buffer count) because the computation depends upon the
    properties of the current GraphicBuffer.
    
    Change-Id: Ied541ab8747b7ad604f862717135f9a16a816be9
    Bug: 4490420
    SurfaceTexture: fix an error check in dequeueBuffer.
    
    This change fixes the MIN_UNDEQUEUED_BUFFERS error check in
    dequeueBuffer.  The check should only be performed if a buffer has been
    queued since the last time the buffer count was changed by the client.
    The check must be applied conditionally because video decoders require
    all the bufferes to be dequeued and registered before beginning the
    decode.
    
    Change-Id: I08d96b380544e395c2fcf0f3983a199bfd695b09
    SurfaceTexture: clean up some comments, tests, etc.
    
    This change fixes up some stale comments, member variable names, log
    messages and disables a failing test.
    
    Change-Id: Ic1d3344b18066cf710e4a42838b2417c6b1f2f6c
    Disable error report temporarily to enable inline video
    
    bug:4435022
    
    Change-Id: I06f05a4781ad432ab71db93f0815eb89cd2e7a69
    fix onFrameAvailable
    
    Change-Id: I391fe9f6684ac9fd4f91416ce18b583f7087d966
    Add SurfaceTexture logging
    
    Change-Id: If1b74be5230813fb76429935d88b9d4a7c41700c
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    
    Change-Id: I8382e346ddaa2c4c8ff56ac3ffd7f0109572f188
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    
    Change-Id: Ic94cbab092953243a0746e04bbe1b2eb0cc930ef
    unify SurfaceTexture and Surface
    
    Change-Id: I49da2f5d8408e4cd7e148cfb777bb4ff68cd8f37
    Fix a bug where setgeometry couldn't be undone
    
    This change the binder protocol between SurfaceTextureClient
    and SurfaceTexture. dequeueBuffer() now takes the requested
    parameters for the buffer. SurfaceTexture decides if the
    buffer needs to be reallocated and does the allocation
    if needed. In that case it returns BUFFER_NEEDS_REALLOCATION
    to tell SurfaceTextureClient that it needs to call
    requestBuffer (which all parameters have been removed) to
    acquire a pointer to the buffer.
    
    dequeueBuffer and requestBuffer could be folded into a single
    IPC call, but we chose to optimize the case where buffers are
    not created and avoid some complexity in the marshalling code.
    
    Change-Id: I097a7f6f40a3491e10f3f3742eab33999286c304
    Fix uninitialized variable in SurfaceTexture
    
    Change-Id: Ie77cdad481fc0522ff5ea3b7e14ce94e07150793
    Report errors when eglCreateImageKHR fails
    
    Change-Id: Ica39b72ac2505675e619ef4994bd67b98bf6e7da
    changes to SurfaceTexture needed for unification with SF
    
    - implement connect/disconnect
    - implement missing query
    - handle texture_2d in addition to texture_external_oes
    
    Change-Id: I971a70821f00f22b01f5337de4a7d451177fec4d
    Fix a GraphicBuffer leak in SurfaceTexture
    
    This leak was intentional, it was there to deal with the fact that
    some gralloc implementations don't track buffer handles with
    file-descriptors so buffers needed to stay alive until there were
    registered, which is not guaranteed by binder transactions.
    
    In this new implementation, we use a small BBinder holding a
    reference to the buffer, which with tuck into the parcel. This forces
    the reference to stay alive until the parcel is destroyed, which
    is guaranteed (by construction) to happen after the buffer is
    registered.
    
    this allows the public facing API to not expose the previous hack.
    
    Change-Id: I1dd6cd83679a2b7457ad628169e2851acc027143
    SurfaceTexture can now force the client to request a buffer
    
    SurfaceTexture now has the concept of default size a new method,
    setDefaultBufferSize() to set it. When the default size is
    changed, dequeueBuffer() will return a value telling the
    client that it must ask for a new buffer.
    
    The above only applies if the client has not
    overriden the buffer size with setGeometry.
    
    Change-Id: I520dc40363054b7e37fdb67d6a2e7bce70326e81
    Add support for timestamps into SurfaceTexture.
    
    API addition: The timestamps are represented as nanoseconds from some
    arbitrary time point. Like the SurfaceTexture transform matrix, the
    timestamp retrieved by getTimestamp is for the last frame sent to the
    GL texture using updateTexImage().
    
    Camera HAL change: Expect vendors to set these timestamps using
    native_window_set_buffers_timestamp().  For now, they are
    autogenerated by SurfaceTextureClient if set_buffers_timestamp() is
    never called, but such timing is likely not accurate enough to pass a
    CTS test.
    
    bug:3300707
    
    Change-Id: Ife131a0c2a826ac27342e11b8a6c42ff49e1bea7
    SurfaceTexture: fix transform matrix computation.
    
    This change fixes the transform matrix computation in SurfaceTexture
    when a crop rectangle is specified by the image producer.  It also adds
    a test for this case as well as a basic test for the uncropped case.
    
    Bug: 4070775
    Change-Id: I1481c9ce9d08fe7f2bff86d3afdeab7d4002b157
    Add the MIN_UNDEQUEUED_BUFFERS query to ANW.
    
    This change adds a new query to ANativeWindow for getting the minimum
    number of buffers that must be left un-dequeued during the steady-state
    operation of the ANativeWindow.
    
    Change-Id: Ie8c461fc26b02ecde02ddb4f95bf763662cf1551
    Related-Bug: 3356050
    Initialize the SurfaceTexture transform fields.
    
    Change-Id: I2c25f15949253a1dbe493fef440e5ef118c40e71
    related-bug: 3426067
    Pass the IGraphicBufferAlloc to SurfaceTextureClient.
    
    This change passes a reference to the IGraphicBufferAlloc binder object
    to SurfaceTextureClient objects.  When STC objects are created they
    query their associated ISurfaceTexture object for the
    IGraphicBufferAlloc that the SurfaceTexture uses to allocate buffers.
    Having the SurfaceTextureClient hold this reference prevents the
    GraphicBufferAlloc in SurfaceFlinger from freeing the allocated buffers
    before the SurfaceTextureClient is done with them.
    
    Change-Id: Ib8e30e8b37fdd60438cbb4cb7e9174d0ba6d661c
    related-bug: 3362519
    Clear GL errors before updating a SurfaceTexture.
    
    Change-Id: Ibdac657ae9e9ccae53c63abed9caf1f1513915c2
    Implement SurfaceTexture frame-available callback.
    
    This change implements the onFrameAvailable callback for the
    SurfaceTexture java class.  It includes the C++ SurfaceTexture code as
    well as the JNI and Java code to enable the callback.
    
    Change-Id: Ifd8b8e7ad46ee70cba6da1c2e96dab8045d1ea30
    Fix SurfaceTexture transform matrix.
    
    Change-Id: I31520c547cafa5cc85cd0f73883ab3a9ff4648e2
    Fix remote GraphicBuffer allocation in SurfaceFlinger.
    
    This change fixes a horrible hack that I did to allow application
    processes to create GraphicBuffer objects by making a binder call to
    SurfaceFlinger.  This change introduces a new binder interface
    specifically for doing this, and does it in such a way that
    SurfaceFlinger will maintain a reference to the buffers until the app is
    done with them.
    
    Change-Id: Icb240397c6c206d7f69124c1497a829f051cb49b
    Fix a bug in SurfaceTexture::dequeueBuffer.
    
    This change fixes a bug that allowed the most recently queued buffer to
    be returned by dequeueBuffer.  At the next updateTexImage call, the
    dequeued buffer would be set as the contents of the texture even though
    the client could be writing to it.
    
    Change-Id: I53dc14eed13262475627d5551337df57fd78fe00
    Implement crop & transform for SurfaceTexture.
    
    This change adds support for the setCrop and setTransform methods of the
    SurfaceTexture C++ class.  The crop and transform for the current
    texture will be accessed by applications as a single texture coordinate
    transform matrix.
    
    Change-Id: I6482bf96f680e5c175364e848936db3908d6c8f8
    Fix a bug in SurfaceTexture::setBufferCount.
    
    We need to reset mCurrentTexture and mLastQueued in setBufferCount
    because it frees all of the buffers associated with the buffer slots.
    
    Change-Id: Ie2f834ec1c07ce7a4ab9b2b5fc5fe8c294010c60
    Add method logging to the SurfaceTexture C++ class.
    
    Change-Id: Ic05b05428d34c04634ce9fc3f924ff3322bb2da2
    Initialize the SurfaceTexture buffer slots.
    
    Change-Id: I81a562ad897173f33cd6a2127737718a7db610eb
    Add the SurfaceTexture C++ implementation.
    
    This change adds the C++ implementation of SurfaceTexture and related
    classes. The goal of this is for a SurfaceTexture to be passed to
    camera service or Stagefright in place of a Surface to allow camera
    preview or decoded video frames to be streamed to an OpenGL ES texture
    that an application can use.
    
    Change-Id: I55c83a7017f1ecb81c9c9e3252cbd118b914296c
    SensorService performance improvements.
    
      i) Send ack for wake_up sensors on the socket connection instead of using Binder RPC.
      ii) Cache events per connection in case there are write failures. Compute cache size
          from FIFO counts of sensors.
     iii) Send FlushCompleteEvent only for apps that explicitly called flush().
    
    Change-Id: I018969736b7794b1b930529586f2294a03ee8667
    libgui: 64-bit compile issues
    
    Change-Id: I29961c1567b8431518a7d032ea43385e23b7bb37
    fix a few problems with BitTube
    
    BitTube used to send objects one at a time and didn't
    handle errors properly.
    
    We now send all the objects in one call, which means they
    have to be read as a single batch as well. This changes the
    BitTube API.
    
    Update SensorService to the new API.
    
    Also added an API to set the size of the send buffer.
    
    Bug: 10641596
    Change-Id: I77c70d35e351fdba0416fae4b7ca3b1d56272251
    return errors properly in BitTube and SensorEventQueue
    
    Change-Id: Idf31179f9fcc666e287c7b01b2007431cb60127d
    use a socketpair instead of a pipe in BitTube
    
    Bug: 6252830
    Change-Id: Ia7a7b08409517214136261c05569dc5959a597ab
    make sure to ignore SIGPIPE in the write side of BitTube
    
    Change-Id: If4f037f4403d3ecbcd5f91248354765fc0fa13cb
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    BitTube::read now handles EAGAIN
    
    Change-Id: Iacda2386342ba0727bbf278f6c597488d5467bb8
    Rename SensorChannel to BitTube
    first step at implementing the native sensor support
    
    in this commit:
    - implemented the C stub
    - implemented the binder interfaces involved
    - implemented most of the C++ client side
    
    missing:
    - SensorManager cannot connect to the SensorServer yet
    (because there is no SensorServer yet)
    
    Change-Id: I75010cbeef31c98d6fa62fd5d388dcef87c2636b
    Change BufferQueue into producer/consumer wrapper
    
    Now that BufferQueue has been split into core + producer + consumer,
    rewrite BufferQueue to be a thin layer over a producer and consumer
    interface. Eventually, this layer will be deprecated in favor of
    only using either the producer or consumer interface, as applicable.
    
    Change-Id: I340ae5f5b633b244fb594615ff52ba50b9e2f7e4
    Split BufferQueue into core + producer + consumer
    
    Change-Id: Idc39f1e511d68ce4f02202d35425a419bc0bcd92
    Add sticky transform to surfaceflinger.
    
    Bug: 15116722
    
    - Adds a sticky transform field that can be set from a
      SurfaceFlinger client Surface.  This transform is
      added to any transform applied to the Surface.
    
    Change-Id: Idaa4311dfd027b2d2b8ea5e2c6cba2da5779d753
    BufferQueue: Add allocateBuffers method
    
    This adds an allocateBuffers method to BufferQueue, which instructs
    it to allocate up to the maximum number of buffers allowed by the
    current configuration. The goal is that this method can be called
    ahead of render time, which will prevent dequeueBuffers from blocking
    in allocation and inducing jank.
    
    This interface is also plumbed up to the native Surface (and, in
    another change, up to the Java Surface and ThreadedRenderer).
    
    Bug: 11792166
    Change-Id: I4aa96b4351ea1c95ed5db228ca3ef98303229c74
    BufferQueueProducer: add detachNextBuffer
    
    Adds a new method, IGBP::detachNextBuffer, that effectively does
    dequeue + request + detach in a single call, but does not need to
    know anything about the dequeued buffer, and will not block on
    dequeue. This is mostly for the upcoming StreamSplitter to use in
    its onBufferReleased callback.
    
    Change-Id: Ie88a69de109003acebaa486a5b44c8a455726550
    BufferQueue: Add producer buffer-released callback
    
    Add a callback to the producer side, onBufferReleased, which will be
    called every time the consumer releases a buffer back to the
    BufferQueue. This will enable a buffer stream splitter to work
    autonomously without having to block on dequeueBuffer.
    
    The binder object used for the callback replaces the generic IBinder
    token that was passed into IGraphicBufferProducer::connect to detect
    the death of the producer. If a producer does not wish to listen for
    buffer release events, it can pass in an instance of the
    DummyProducerListener class defined in IProducerListener.h, if it even
    cares about death events (BufferQueue doesn't enforce the token being
    non-NULL, though perhaps we should).
    
    Change-Id: I23935760673524abeafea2b58dccc3583b368710
    Declare ownership of native_handle_t object
    
    Change-Id: I4e21ff8ea76cfafce943dc059c8f72b42397980e
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    BufferQueue: Allow detaching/reattaching buffers
    
    Adds detachBuffer and attachBuffer calls to both the producer and
    consumer sides of BufferQueue. Buffers may be detached while dequeued
    by the producer or acquired by the consumer, and when attached, enter
    the dequeued and acquired states, respectively.
    
    Bug: 13173343
    Change-Id: Ic152692b0a94d99e0135b9bfa62747dab2a54220
    Make sure do disconnect from a BQ when its client dies.
    
    Bug: 5679534
    
    Change-Id: If447e8673df83fe0b1d6210641e0a48522501a53
    Re-enable frame dropping for non-auto timestamps
    
    This change adds an entire field to note whether the timestamp was
    auto-generated by Surface or supplied by the application.
    
    The value is used when deciding whether or not to drop frames based
    on buffer presentation timestamps.  If a desired presentation time
    was set explicitly, BufferQueue will use that value to decide if a
    frame should be dropped.  If the timestamp was generated by Surface
    at the time the buffer was queued, the timestamp is ignored.
    
    Bug 10151804
    
    Change-Id: Ibd571a7578351063b813cbdad2ddbeed70655ba5
    Graphics:Add error check when create GraphicBuffer
    
    Change-Id: Ib0ca59bf1dfe4ae0266c29c91c1dbe3d02c0904e
    Author: Lingyun Zhu <lingyun.zhu@intel.com>
    Signed-off-by: Lingyun Zhu <lingyun.zhu@intel.com>
    Signed-off-by: Shuo Gao <shuo.gao@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Author-tracking-BZ: 50141
    log an error when dequeueBuffer gets a NULL Fence
    
    Bug: 9858745
    Change-Id: If35d6a7d770bf0a42d55bc55880a9ddb721fcfd0
    Make Flattenable not virtual
    
    Fallout from the Flattenable change, update all its uses.
    
    Additionnaly, fix/tighten size checks when (un)flatten()ing
    things.
    
    Removed the assumption by some flattenables (e.g.: Fence)
    that the size passed to them would be exact (it can
    and will be larger in some cases)
    
    The code in Parcel is a bit complicated so that we don't
    have to expose the full implementation (and also to
    keep the code smallish).
    
    Change-Id: I0bf1c8aca2a3128491b4f45510bc46667e566dde
    Make ANW.setSwapInterval(0) work again
    
    we can now queue/dequeue a buffer in asynchrnous mode by using the
    async parameter to these calls. async mode is only specified
    with those calls (it is not modal anymore).
    
    as a consequence it can only be specified when the buffer count
    is not overidden, as error is returned otherwise.
    
    Change-Id: Ic63f4f96f671cb9d65c4cecbcc192615e09a8b6b
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    Fix argument types in IGraphicBufferProducer methods
    
    Bug: 8384764
    Change-Id: I7a3f1e1a0584a70af04f9eafef900505389d2202
    libgui: disallow NULL Fence pointers
    
    This change eliminates the uses of a NULL sp<Fence> indicating that no waiting
    is required.  Instead we use a non-NULL but invalid Fence object for which the
    wait methods will return immediately.
    
    Bug: 7892871
    Change-Id: I5360aebe3090422ef6920d56c99fc4eedc642e48
    Minor tweaks.
    
    Change-Id: I9f82f574112141b6aa074c42303056cd52d5c478
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    Pass fences with buffers from SurfaceTextureClient
    
    Change-Id: I09b49433788d01e8b2b3684bb4d0112be29538d3
    Pass fences from BufferQueue to SurfaceTextureClient
    
    ISurfaceTexture::dequeueBuffer now returns the buffer's fence for the
    client to wait on. For BufferQueue, this means passing it through
    Binder so it can be returned to the SurfaceTextureClient. Now
    SurfaceTextureClient is responsible for waiting on the fence in
    dequeueBuffer instead of BufferQueue: one step closer to the goal.
    
    Change-Id: I677ae758bcd23acee2d784b8cec11b32cccc196d
    update the binder protocol for connect to match that of queueBuffer
    
    indeed, connect and queueBuffer return the same data, so it's
    easier to have them use the same protocol.
    
    Change-Id: I4f9fa3be0a80c9ab0a7a4039b282ae843aab02e1
    use in/out structures for queueBuffer() IPC
    
    Change-Id: Ie125df2444b62a9a2200586a717dca268852afc9
    reduce IPC with BufferQueue
    
    collapse setCrop, setTransform and setScalingMode to queueBuffer()
    this ends up simplifying things quite a bit and reducing the numnber
    of IPC needed per frame.
    
    Change-Id: I3a13c07603abe4e76b8251e6380b107fde22e6d9
    SurfaceTexture: report binder transaction failures
    
    This change fixes the ISurfaceTexture error reporting for the case where
    the binder transaction fails.
    
    Bug: 5082219
    Change-Id: I6517532992e3a76dc9eb5e4a36af43a562391aaa
    return correct value from query after connecting a surface
    
    the first time a surface was connected, the values returned
    by query NATIVE_WINDOW_DEFAULT_{WIDTH|HEIGHT} and
    NATIVE_WINDOW_TRANSFORM_HINT were wrong until a call
    to queueBuffer was performed.
    
    Bug: 5137366, 5121607
    Change-Id: I7ac6b5b0daa876638f6bed7c20f286a6e6d984f6
    SurfaceTexture: add the abandon method.
    
    This change adds the 'abandon' method to the SurfaceTexture C++ class.
    This method may be used to put the SurfaceTexture in an abandoned state,
    causing all ISurfaceTexture methods to fail.
    
    Change-Id: Ibd261f7b73f44e2bec36a8508bf92113cfb7cf95
    SurfaceTexture: remove getAllocator
    
    This change removes the SurfaceTexture::getAllocator method, as it's no
    longer needed.  Proper refcounting of the Gralloc buffers is now handled
    by the IGraphicBufferAlloc binder marshalling code.
    
    Change-Id: I5cffa6ebfc1bc5828fb7ce0e0a5b2f55cd8479da
    implement: "Add an ANativeWindow API for SurfaceFlinger to suggest an optimal buffer orientation"
    
    Bug: 4487161
    Change-Id: I883f34efe542c2a566d04966f873374f40c50092
    Add set_scaling_mode() to ANativeWindow.
    
    This allows to specify the scaling mode independently from
    the buffer size.
    
    Change-Id: Iaa2baa660445531a97d3fac192e580f4929c5d3b
    fix a typo in ISurfaceTexture IPC code
    
    Change-Id: Ied1d9ddb0d849b17219d0ea3d333ce12be849419
    SurfaceTexture: make (dis)connect into an IPC
    
    This change makes the ANativeWindow connect and disconnect calls result
    in an IPC to the SurfaceTexture object.  This will allow us to prevent
    multiple simultaneous connections from different processes.
    
    Change-Id: Id9aa1003b1335b96ca6bd4a1f5a67aa433d42efb
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    
    Change-Id: I8382e346ddaa2c4c8ff56ac3ffd7f0109572f188
    unify SurfaceTexture and Surface
    
    Change-Id: I49da2f5d8408e4cd7e148cfb777bb4ff68cd8f37
    Fix a bug where setgeometry couldn't be undone
    
    This change the binder protocol between SurfaceTextureClient
    and SurfaceTexture. dequeueBuffer() now takes the requested
    parameters for the buffer. SurfaceTexture decides if the
    buffer needs to be reallocated and does the allocation
    if needed. In that case it returns BUFFER_NEEDS_REALLOCATION
    to tell SurfaceTextureClient that it needs to call
    requestBuffer (which all parameters have been removed) to
    acquire a pointer to the buffer.
    
    dequeueBuffer and requestBuffer could be folded into a single
    IPC call, but we chose to optimize the case where buffers are
    not created and avoid some complexity in the marshalling code.
    
    Change-Id: I097a7f6f40a3491e10f3f3742eab33999286c304
    Add support for timestamps into SurfaceTexture.
    
    API addition: The timestamps are represented as nanoseconds from some
    arbitrary time point. Like the SurfaceTexture transform matrix, the
    timestamp retrieved by getTimestamp is for the last frame sent to the
    GL texture using updateTexImage().
    
    Camera HAL change: Expect vendors to set these timestamps using
    native_window_set_buffers_timestamp().  For now, they are
    autogenerated by SurfaceTextureClient if set_buffers_timestamp() is
    never called, but such timing is likely not accurate enough to pass a
    CTS test.
    
    bug:3300707
    
    Change-Id: Ife131a0c2a826ac27342e11b8a6c42ff49e1bea7
    Pass the IGraphicBufferAlloc to SurfaceTextureClient.
    
    This change passes a reference to the IGraphicBufferAlloc binder object
    to SurfaceTextureClient objects.  When STC objects are created they
    query their associated ISurfaceTexture object for the
    IGraphicBufferAlloc that the SurfaceTexture uses to allocate buffers.
    Having the SurfaceTextureClient hold this reference prevents the
    GraphicBufferAlloc in SurfaceFlinger from freeing the allocated buffers
    before the SurfaceTextureClient is done with them.
    
    Change-Id: Ib8e30e8b37fdd60438cbb4cb7e9174d0ba6d661c
    related-bug: 3362519
    Add the SurfaceTexture C++ implementation.
    
    This change adds the C++ implementation of SurfaceTexture and related
    classes. The goal of this is for a SurfaceTexture to be passed to
    camera service or Stagefright in place of a Surface to allow camera
    preview or decoded video frames to be streamed to an OpenGL ES texture
    that an application can use.
    
    Change-Id: I55c83a7017f1ecb81c9c9e3252cbd118b914296c
    Change BufferQueue into producer/consumer wrapper
    
    Now that BufferQueue has been split into core + producer + consumer,
    rewrite BufferQueue to be a thin layer over a producer and consumer
    interface. Eventually, this layer will be deprecated in favor of
    only using either the producer or consumer interface, as applicable.
    
    Change-Id: I340ae5f5b633b244fb594615ff52ba50b9e2f7e4
    Split BufferQueue into core + producer + consumer
    
    Change-Id: Idc39f1e511d68ce4f02202d35425a419bc0bcd92
    GLConsumer: Fix eglTerminate/eglInit edge case.
    
    If a display is terminated and then initialized, we can't detect
    this using the display itself (it has the same value), but all
    EglImages still become invalid for the display. This patch detects
    this during image binding and forces creation of a new EglImage.
    
    Bug: 10430249
    Change-Id: I75101c50962f21263dca3ec6e241a2e5a3c23dad
    GLProducer: Reference count images rather than buffers.
    
    In most cases, EGLImages can be created one-to-one with graphic
    buffers in slots, but that was difficult due to some special
    cases:
    - ReleaseTexImage binds a custom 'unslotted' debug image.
    - When all slots are freed, we still need to hang on to one.
    
    These cases were handled by keeping an additional reference to
    the 'current' buffer (mCurrentTextureBuf), but we would create
    new images since we can't reference count them in the same way.
    This patch uses the same semantics, except that it reference
    counts the image (an EglImage wrapper class) rather than just
    buffer. The wrapper class also detects the cases when we need
    a new EGLImage, and only creates them in those rare cases.
    
    Change-Id: I2915761dbe49d2a9bda1f59e60f857543634636b
    GLConsumer: Allow creation in detached mode
    
    Adds a constructor that doesn't require a GLES texture name and sets
    up the GLConsumer in detached mode.
    
    Bug: 15616428
    Change-Id: Idc9ea2e59baa24bbd959da9fffe0fb71c0aa9818
    Always release a buffer
    
    In GLConsumer's updateAndReleaseLocked(), we must release either
    the previously-acquired buffer or the newly-acquired buffer.
    
    Bug 13755224
    
    Change-Id: I96adc255400ed008ba6e6ac1725ab3514c7cc8ba
    GLConsumer: start using EGL_ANDROID_image_crop
    
    This change makes GLConsumer use the EGL_ANDROID_image_crop extension when
    available on a device.  The crop rectangle is passed to the EGL driver when
    creating EGLImages, allowing the crop to be performed by the driver rather than
    using the texture transform matrix.
    
    Bug: 10897141
    Change-Id: I63e9a5d5c85067376abc420e3639154468346311
    GLConsumer: Add query for current frame number.
    
    Surface the underlying frame number of the current texture.
    
    Bug: 10830400
    Change-Id: Ide3a7da12ea0aac54588beb6bf00dbfe2cd37653
    GLConsumer: Add query for current frame number.
    
    Surface the underlying frame number of the current texture.
    
    Bug: 10830400
    Change-Id: Ide3a7da12ea0aac54588beb6bf00dbfe2cd37653
    SurfaceFlinger now uses GLES 2.x when available
    
    Bug: 8679321
    
    Change-Id: I2b152d01fb4e2de2ea9fe87f1ddbd6826d7520d7
    make sure GLConsumer::releaseTexImage() works after detachFromContext()
    
    Change-Id: I27e0bc57e927d47b2b98113ee37b5396bcc72019
    make GLConsumer's debug texture static
    
    this is so that we don't burn a gralloc handle and a bit
    of memory per GLConsumer.
    
    Change-Id: I30c3e7ec45d7f1b5426aca8e06c7716870877706
    don't hardcode debug texture dimensions
    
    Change-Id: I356333801d246a8cafb3e977a77dc7325e8b822d
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    single buffer mode for BufferQueue
    
    Bug: 9891035
    Change-Id: Id1ab5f911a6dc4c1d8235e65775b3d3635231ad4
    get rid of HAL pixelformats 5551 and 4444
    
    Change-Id: I39409103144c1ba09078c4ddc323a58987fb09ea
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    Tweaks for forward compatibility
    
    Change-Id: Id6a96521b3fd5bd2a034fe89cfa4d3a179a66328
    always pass the BufferQueue explicitely to consumers
    
    Change-Id: I883b0a7b19d8e722f9ab714ba6f49e658b02ca86
    Pay attention to buffer timestamps
    
    When acquiring a buffer, SurfaceFlinger now computes the expected
    presentation time and passes it to the BufferQueue acquireBuffer()
    method.  If it's not yet time to display the buffer, acquireBuffer()
    returns PRESENT_LATER instead of a buffer.
    
    The current implementation of the expected-present-time computation
    uses approximations and guesswork.
    
    Bug 7900302
    
    Change-Id: If9345611c5983a11a811935aaf27d6388a5036f1
    BufferQueue: track buffer-queue by instance vs. by reference
    
    Instead of representing the buffer-queue as a vector of buffer
    indices, represent them as a vector of BufferItems (copies).
    This allows modifying the buffer slots independent of the queued
    buffers.
    
    As part of this change, BufferSlot properties that are only
    been relevant in the buffer-queue have been removed.
    
    Also, invalid scalingMode in queueBuffer now returns an error.
    
    ConsumerBase has also changed to allow reuse of the same
    buffer slots by different buffers.
    
    Change-Id: If2a698fa142b67c69ad41b8eaca6e127eb3ef75b
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Related-to-bug: 7093648
    make the warning timout of Fence::waitForever() implicit and longer
    
    - timeout is now 3 seconds instead of 1
    - simplifies the API a bit
    - allows us to change/tweak this timeout globaly
    
    Bug: 8988871
    
    Change-Id: I8d3c6ec43a372f602fb3f29856710339f86c0ec9
    clean-up/simplify all dump() APIs
    
    remove the scratch buffer parameter and use
    String8::appendFormat() instead.
    
    Change-Id: Ib96c91617c8e7292de87433d15cf6232b7d591b0
    fix uninitialized variables in GLConsumer
    
    mDefaultWidth, mDefaultHeight and mCurrentScallingMode are now
    initialized to the same default value that BufferQueue uses.
    
    Change-Id: I0d4da2022b06419d12745716d8ddbd48c8869953
    don't use compile-time configuration of libgui as much as possible
    
    We now detect at runtime which sync features to use, which
    allows us to remove a lot of the compile-time configuration
    options. There  is still one option though, to disable
    KHR_fence_sync on some devices (which are more efficient
    without it).
    
    - added a backdoor to get the vendor's EGL strings
    
    the new logic is:
    - use always ANDROID_native_fence_sync if available
    - fallback to KHR_fence_sync if available and not disabled
      by the compile-time option
    - use KHR_wait_sync if available and either of the above is
      enabled
    
    Change-Id: I9c4b49d9ff1151faf902cc93bd53ea5f205aaabf
    replace eglWaitSyncANDROID by eglWaitSyncKHR
    
    Change-Id: I22f1b3588011c88389e249f738f1e6915cc97e72
    Pass sp<Fence>s around instead of file descriptors
    
    Change-Id: Iac70584a2207940730e8f803a543e4e9a4000c47
    libgui: disallow NULL Fence pointers
    
    This change eliminates the uses of a NULL sp<Fence> indicating that no waiting
    is required.  Instead we use a non-NULL but invalid Fence object for which the
    wait methods will return immediately.
    
    Bug: 7892871
    Change-Id: I5360aebe3090422ef6920d56c99fc4eedc642e48
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    Avoid unnecessary texture bind
    
    In SurfaceFlingerConsumer, check to see if native fence sync is
    enabled.  If so, defer the texture binding step to Layer::onDraw.
    
    Change-Id: I7d4034a31c0143207eea2509dfa13ef3820f9b8c
    Refactor SurfaceTexture a bit.
    
    Rearranges updateTexImage() so that the SurfaceFlinger-specific
    behavior is in a new SurfaceFlingerConsumer subclass.
    
    SurfaceTexture behavior should not be altered.  Instead of
    acquire-bind-release we now do acquire-release-bind, but since
    it's all done with the lock held there shouldn't be any
    externally-visible change.
    
    Change-Id: Ia566e4727945e2cfb9359fc6d2a8f8af64d7b7b7
    Fix race condition in ConsumerBase::addReleaseFence()
    
    This needs the ConsumerBase mutex locked, but wasn't locking it. Two
    of the four places that called it already held the lock so were fine.
    Now addReleaseFence() takes the lock itself, and I added
    addReleaseFenceLocked() for the two already-locked callers, since in
    one of them dropping the lock would be inconvenient.
    
    Bug: 7289269
    Change-Id: I7a5628adb516f8eec782aa6c14128202f96d7b0a
    libgui: fix up compile options
    
    This change adds debug info to SurfaceFlinger's dumpsys to indicate that the
    USE_WAIT_SYNC compile option was enabled, and it removes the
    ALLOW_DEQUEUE_CURRENT_BUFFER option.
    
    Bug: 7238122
    Change-Id: I70e08e34c2ef58aa6d2f88229e781a119f84b5a9
    Add Fence::waitForever which logs a warning timeout, and use it
    
    Bug: 7217641
    Change-Id: If0c1a613ead307c4045a47824174bf40c72bc7d7
    fix a crasher in SurfaceTexture's setFilteringEnabled
    
    bug: 7211067
    Change-Id: Id8658a8df429d76c20ab9112858b38e52343dc9c
    SurfaceTexture: fix an out of bounds array write
    
    This change fixes an issue causing the mEglContext member of a SurfaceTexture
    to get incorrectly zeroed out.  This would happen when a call to
    ConsumerBase::releaseBufferLocked resulted in the current buffer being freed.
    Freeing the current buffer would set SurfaceTexture::mCurrentTexture to -1,
    which would then be used by SurfaceTexture::releaseBufferLocked to reset the
    current slot's EGLSyncKHR to EGL_NO_SYNC_KHR (= 0).  This would overwrite the
    mEglContext field, resulting in context mismatch errors in
    SurfaceTexture::doGLFenceWaitLocked.
    
    The fix is to simply use the buffer slot that's passed in to
    SurfaceTexture::releaseBufferLocked rather than mCurrentTexture.
    
    Change-Id: I0e5e2bd88fcbb354c35a3744f317716fff3e0e41
    SurfaceTexture: default to doing GL sync
    
    This change makes updateTexImage default to performing the necessary
    synchronization and adds an argument for SurfaceFlinger to disable that
    synchronization so that it can be performed lazily.
    
    Change-Id: I7c20923cc786634126fbf7021c9d2541aa77be5d
    Bug: 6991805
    SurfaceTexture: eglDestroySync after duping its fd
    
    This change adds a call to eglDestroySync after we've dup'd the fd for the
    Android fence that the EGLSyncKHR object wraps.
    
    Change-Id: I4fa6ece863260793630d70bb9a69d6284d05d99e
    SurfaceTexture: use eglWaitSync
    
    This change adds a compile-option to use eglWaitSyncANDROID to ensure that
    texturing operations that access the current buffer of a SurfaceTexture do not
    occur until the buffer is completely written.  It also moves this
    synchronization into a new SurfaceTexture method called doGLFenceWait and
    changes SurfaceFlinger's Layer class to use that method rather than performing
    its own wait on the fence.
    
    Change-Id: I70afa88086ca7ff49a80e3cd03d423767db7cb88
    SurfaceTexture: use EGL-created native fences
    
    This change adds support for using Android fences that come from EGLSyncKHR
    objects as the release fence for a buffer.
    
    Change-Id: Ice192ce2ec001020f909a2018afdf0f17b24dec9
    libgui: move fence handling into ConsumerBase
    
    This change moves some common fence handling code into the base class for
    BufferQueue consumer classes.  It also makes the ConsumerBase class initialize
    a buffer slot's fence with the acquire fence every time a buffer is acquired.
    
    Change-Id: I0bd88bc269e919653b659bfb3ebfb04dd61692a0
    libgui: add some error checks
    
    This change adds a few error checks both in the framework and in some tests.
    
    Change-Id: I2baf2676942a0dc15866e75852a775a0091ed16d
    BufferQueue: clean up buffer counting
    
    This change is a clean up of some of the handling of the maximum number of
    buffers that are allowed at once.  It mostly renames a few member variables and
    methods, but it includes a couple small refactorings.
    
    Change-Id: I9959310f563d09583548d4291e1050a7bbc7d87d
    SurfaceTexture: inherit from ConsumerBase (try 2)
    
    This change makes SurfaceTexture inherit from ConsumerBase.  It removes all of
    the functionality from SurfaceTexture that is now provided by the base class.
    This includes fixes for two bugs that were found after checking this change in
    the first time and then reverting it.
    
    Change-Id: Ie2d9f4f27cfef26fdac341de3152e842b01a58d2
    Revert "SurfaceTexture: inherit from ConsumerBase"
    
    This reverts commit ed059a8d754770c3cf28b78dba30f7a6ba475dbe
    
    Change-Id: I72542c2595771a40c2c88251e0d6eb54e305b99b
    Revert "SurfaceTexture: inherit from ConsumerBase"
    
    This reverts commit ed059a8d754770c3cf28b78dba30f7a6ba475dbe
    
    Change-Id: I72542c2595771a40c2c88251e0d6eb54e305b99b
    Revert "SurfaceTexture: call ConsumerBase::freeBufferLocked"
    
    This reverts commit f8d33c652b930abbfb0722f3a2928cbc2ea71078
    
    Change-Id: I1ff2e1cc85824a8fac1051f573d2931db81af511
    SurfaceTexture: call ConsumerBase::freeBufferLocked
    
    This change fixes SurfaceTexture::freeBufferLocked so that it calls the base
    class implementation.
    
    Change-Id: I45d76fb2eb02c1fa6e4e917823ead83e2086bd15
    SurfaceTexture: inherit from ConsumerBase
    
    This change makes SurfaceTexture inherit from ConsumerBase.  It removes all of
    the functionality from SurfaceTexture that is now provided by the base class.
    
    Change-Id: I4a881df42810a14ee32d4ef7c8772a8f2510f4c7
    SurfaceTexture: Fix a fence fd leak.
    
    Bug: 6949010
    Change-Id: I289992c964504b4fe5458dbd19b248a841ef043f
    SurfaceTexture: fix an out of bounds array access
    
    Bug: 6879028
    Change-Id: Ic3d35a9384c0a6dfa4000e7743a6f6859608b0bf
    remove unneeded dependencies in libhardware
    
    Change-Id: Ibb8d698d594216d0746b0e7270cf87d7e5acab2b
    Add missing break in switch statement
    
    Change-Id: I6206cc9ca46c4e2f125d3d820256280586ad66a1
    Fix check for fence merge success
    
    Change-Id: I9b16526ebfe4ffabf7c4372cca9b192ce046aa21
    Pass fence to HWC on first use of buffer
    
    Also do a CPU-wait on the fence before using it for GL composition.
    
    Change-Id: I0f645a42a44803276cae11b904e5a26d65871562
    Return fence from acquireBuffer
    
    Change-Id: Iab22054c1dc4fd84affab3cc5bbdcd5a1e689666
    Clarify aborted updateTexImage use of fences
    
    When updateTexImage acquires a buffer but then aborts (due to an error
    or the buffer being rejected), it releases the newly-acquired buffer.
    It was passing the buffer slot's fences to releaseBuffer, even though
    they hadn't been created after the acquire yet. This wasn't a bug,
    since the fences would be cleared just after the buffer slot was last
    released, but explicitly passing null fences makes this clearer.
    
    Change-Id: I087f2ec3fd02c40f57782c1fca24eb9567e2943d
    Transfer HWC release fences to BufferQueue
    
    After a HWC set, each SurfaceFlinger Layer retrieves the release fence
    HWC returned and gives it to the layer's SurfaceTexture. The
    SurfaceTexture accumulates the fences into a merged fence until the
    next updateTexImage, then passes the merged fence to the BufferQueue
    in releaseBuffer.
    
    In a follow-on change, BufferQueue will return the fence along with
    the buffer slot in dequeueBuffer. For now, dequeueBuffer waits for the
    fence to signal before returning.
    
    The releaseFence default value for BufferQueue::releaseBuffer() is
    temporary to avoid transient build breaks with a multi-project
    checkin. It'll disappear in the next change.
    
    Change-Id: Iaa9a0d5775235585d9cbf453d3a64623d08013d9
    add the ability to reject buffers in SurfaceTexture::updateTexImage
    
    SurfaceFlinger is using this new feature to reject buffers that
    don't have the right size.
    
    Bug: 6498869
    Change-Id: I8a7250a47db6c082a357b703feb3b9d0fc8d3443
    make sure BufferQueue releases newly acquired buffers on failures
    
    this prevents SurfaceTexture producer to hang in dequeueBuffer()
    when something goes wrong in the consumer.
    only the consumer gets an error and the current frame is kept
    instead of the new one. the producer is unaware of the problem.
    
    Bug: 6476587
    Change-Id: Ie6db5526632aabc3e60229b93dfe29c19491ade4
    Recreate EGLImage for previously used slots
    
    SurfaceTexture would only create an EGLImage for a buffer slot when
    BufferQueue returns a GraphicBuffer, i.e. either the slot was acquired
    for the first time ever, or the buffer for the slot was reallocated.
    But the EGLImage may also need to be re-created for a
    previously-acquired buffer if the slot's EGLImage was destroyed during
    detachFromContext(); in this case BufferQueue won't return a
    GraphicBuffer since SurfaceTexture already has a reference to the
    correct buffer.
    
    Bug: 6461693
    Change-Id: Ib95d0d757192efe336c5fda0866f857481a6617d
    SurfaceTexture: improve texture matrix computation
    
    This change reduces the shrinking of the crop rectangle in some cases.  It adds
    a way to inform the SurfaceTexture that its texture will be used without
    bilinear interpolation, and uses knowledge of the pixel format to avoid
    shrinking unecessarily.
    
    Change-Id: I72365f39f74ecb7fcc51b4cf42f2d0fa97727212
    libgui: Add support for post-xform crops.
    
    This change adds support for specifying a crop rectangle to a
    SurfaceTextureClient that is in post-transformed coordinate space.
    
    Change-Id: I247901de343e71b32850f7ae3bac62dfa612ad3d
    Bug: 6299171
    SurfaceTexture: fix a memory leak
    
    This change fixes a memory leak.
    
    Bug: 6414806
    Change-Id: I43536689b4219a042749aec2096a1d5c4e664ae3
    libgui: Add plumbing for active rectangle
    
    This change adds the plumbing to SurfaceTextureClient, BufferQueue, and
    SurfaceTexture to get the active rectangle passed to the ANativeWindow to
    the buffer consumer.
    
    Change-Id: I35da0889b266327ebb079b6a7136fa3e2e8b00e6
    SurfaceTexture: detachFromContext fixed
    
    Fixed AttachToContextSucceeds test SurfaceTexture test by
    not deleting the current texture when cleaning up memory.
    
    Bug: 6363186
    Change-Id: Ib886bfe6bb86e25ea4825d18b5008afba6b33eae
    remove SurfaceTexture::connect()
    
    use BufferQueue::connect() instead
    
    Change-Id: I04aab7cf11304bf962cde38470747f3b19ddba42
    Remove fixed USAGE_HW_TEXTURE flag from BufferQueue.
    
    USAGE_HW_TEXTURE applies to SurfaceTexture, not to all uses of
    BufferQueue. Refactor accordingly.
    
    Change-Id: Ic7add5e1f2bbec3d3e796ba7f15eaa0633945d8f
    SurfaceTexture: fix a memory leak
    
    This change fixes an issue where we were sometimes setting the SurfaceTexture's
    EGLDisplay to EGL_NO_DISPLAY in detachFromContext, and then subsequently
    abandoning the texture.  Abandoning while in the detached state would result in
    the eglDestroyImageKHR calls failing, which resulted in a memory leak.
    
    Bug: 6302694
    Change-Id: I24c1de0dac029a83c7508075fb8aaeaed96a14ea
    SurfaceTexture: shrink all sides when cropping
    
    This change makes SurfaceTexture include an offset for all sides of the crop
    region when cropping.  This keeps the image centered, to minimize the visual
    changes when switching between the texture transform matrix-based cropping and
    something that does proper cropping (e.g. HWComposer).
    
    Change-Id: I541d3046fd92e49221b488444df36d490924d1c5
    Enabled cropping support in SurfaceTexture
    
    SurfaceTexture will modify the crop rect so it matches
    the desired output aspect ratio when the scaling
    mode is NATIVE_WINDOW_SCALING_MODE_CROP.  Added a test
    for this new scaling mode.
    
    Change-Id: I60f24dcbc294b65cd10a393d9e27d40f07d27bb6
    BufferQueue returns proper code on acquire
    
    Also removed unnecessary debug messages from
    SurfaceTextureClient.
    
    Change-Id: I291897a44170142f9d42a007b008823fad4683e0
    Fixed disconnect bug in SurfaceTexture
    
    BufferQueue's disconnect could race with updateTexImage
    where invalid buffers could be released.  Additionally
    fixed similar bug with setBufferCount.  Tests were added
    to stress the disconnect mechanism.
    
    Change-Id: I9afa4c64f3e025984e8a9e8d924852a71d044716
    SurfaceTexture: add context attach & detach
    
    This change adds the detachFromContext and attachToContext methods to
    SurfaceTexture.  These methods allow the SurfaceTexture to switch from
    one consumer GLES context to another.  This change also includes a few
    cleanups to the error return codes in updateTexImage.
    
    Change-Id: I0df1eb599aa7b6f58f07431f242f8f09269559ed
    Added a DummyConsumer for use with BufferQueue.
    
    The DummyConsumer is a consumer that can connect to BufferQueue
    that does nothing.  It is required as BufferQueue checks
    if a consumer is connected.  Also fixes a bug where SurfaceTexture
    was reusing old texture slots.
    
    Bug: 6172739
    Change-Id: I5e7a118dd4d07807ba4c763200242b5ee7d3412b
    libgui: have ST::updateTexImage check the GL ctx
    
    This change adds a check to SurfaceTexture::updateTexImage to verify
    that the current GL context is the same as the one that was used for
    previous updateTexImage calls.
    
    Change-Id: If02d2f787bcfdb528046dc9ddf6665f8a90e1bf4
    libgui: add BQ consumer buffer free notifications
    
    This change adds a new callback for BufferQueue consumers to be notified
    when the BufferQueue frees some or all of its buffers.  This is needed
    to retain SurfaceTexture behavior where all buffers would be freed when
    the producer disconnects.  This change also modifies the
    SurfaceTextureGLToGLTest.EglDestroySurfaceUnrefsBuffers test to catch
    when the buffers are not freed.
    
    The implementation is a little complicated because it needs to avoid
    circular sp<> references across what will be a binder interface (so wp<>
    can't be used directly).  It also needs to avoid the possibility of
    locking the BufferQueue and consumer (e.g. SurfaceTexture) mutexes in
    the wrong order.
    
    This change also includes a few additional fixes and test cleanups.
    
    Change-Id: I27b77d0af15cb4b135f4b63573f634f5f0da2182
    SurfaceTexture: Fully refactored from BufferQueue
    
    SurfaceTexture and BufferQueue are separate objects.
    
    Change-Id: I230bc0ae6f78d0f9b2b5df902f40ab443ed5a055
    Add tracing to various graphics components.
    
    This change adds ATRACE call tracing to BufferQueue,
    SurfaceTextureClient, SurfaceTexture, SurfaceFlinger, Layer, and EGL.
    
    Change-Id: I9d75ed26f5a3f0d1af635da38289520134cfbbb7
    Removed dependecies between BufferQueue and SurfaceTexture
    
    Refactored SurfaceTexture and BufferQueue such that share
    no protected members.  Created an consumer facing interface
    for BufferQueue in preparation of connecting SurfaceTexture
    and BufferQueue through a binder.
    
    Change-Id: I938e63e085128148c58d0e26c7213b30145c109f
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    Revert "Removed dependecies between BufferQueue and SurfaceTexture"
    
    This reverts commit a631399f71dbc7659d2f241968f85d337726ae61
    Removed dependecies between BufferQueue and SurfaceTexture
    
    Refactored SurfaceTexture and BufferQueue such that share
    no protected members.  Created an consumer facing interface
    for BufferQueue in preparation of connecting SurfaceTexture
    and BufferQueue through a binder.
    
    Change-Id: Iff55e740e36a7f70c9f7a17ee7a5af38e3d21f0f
    Refactored query function from SurfaceTexture into BufferQueue
    
    Change-Id: Id1cb6cc38d01edb4fcfcad867c5a7693bdcc3ab1
    Refactored ISurfaceTexture calls from SurfaceTexture into BufferQueue.
    
    Change-Id: I514f6b802f6b49c9ae27bed37bf0b9d23da03c9a
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)
    
    Change-Id: I26f76452ac49e2890b14d133c065493d8df0fb4a
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: Ib08fe86d23db91ee153e9f91a99a35c42b9208ea
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    SurfaceTexture: fix a verbose-log compile error
    
    Change-Id: I045231207e068d950bb0cb5085717af5d9454ed1
    SurfaceTexture: add EGL_KHR_fence_sync option
    
    This change adds a compile-time option for SurfaceTexture to use the
    EGL_KHR_fence_sync extension to synchronize access to Gralloc buffers.
    
    Bug: 5122031
    Change-Id: I7e973a358631fff5308acf377581b811911fe790
    split ComposerService out of SurfaceComposerClient.h
    
    Change-Id: I1eb691f7ca263d5895d871ab675bb5826e0323c6
    EGL: default to swap interval 1
    
    This change explicitly sets swap interval 1 on the window when an
    EGLSurface is created to render to it.
    
    Change-Id: I91eb29dbee3ae4a55076b921f084d503fbe94e03
    don't report an error when disconnecting from an abandoned surfacetexture
    
    this happens often with CPU Surfaces, which disconnect long
    after their surfacetexture has been abandoned.
    
    Change-Id: If49da03b72f99130e01b2b9bcbd444bb38f7ed4e
    enable ALLOW_DEQUEUE_CURRENT_BUFFER for tegra devices
    
    this flag should be enabled for all targets, but currently
    some have issues with it, so we're turning it on only for
    tested targets.
    
    this will hopefully resolve some performance issues.
    
    Bug: 5553562, 5631630
    Change-Id: I54c7a9e2068586898ab13e405d95534669260537
    SurfaceTexture: fix a bug with buffer reallocation
    
    This change fixes an issue involving buffer reallocation and the
    ALLOW_DEQUEUE_CURRENT_BUFFER mode in SurfaceTexture.  The bug happened
    when the buffer slot currently attached to the GL texture was selected
    for dequeuing, but the dequeue operation caused the buffer to be
    reallocated.  Because the buffer is new, the image producer could fill
    the buffer and queue it before an updateTexImage call, which would
    result in the "slot %d is current" error in queueBuffer.
    
    Bug: 5631630
    Change-Id: Icdd8bc5cad3c7db43953446d9be2603aaea11a8d
    Revert "enable ALLOW_DEQUEUE_CURRENT_BUFFER for tegra devices"
    
    This reverts commit e7758be6da85728df6b4215f413660c67c5a9740.
    
    Seemed to cause failures un SurfaceTexture.
    
    Bug: 5627450
    Revert "enable ALLOW_DEQUEUE_CURRENT_BUFFER for tegra devices"
    
    This reverts commit e7758be6da85728df6b4215f413660c67c5a9740.
    
    Seemed to cause failures un SurfaceTexture.
    
    Bug: 5627450
    SurfaceTexture: Fix to return the oldest of free buffers to Client on Dequeue call
    
    Surface Texture dequeue logic is modified to return the oldest of the
    free buffers to Client on dequeue call.
    
    Currently dequeue method is returning the first buffer index which is free.
    The parsing is done in ascending order of the buffer slot indices.
    This leads to returning the buffer which has been just queued to composer,
    and hence display, and this defeats the purpose of having minimum dequeue count
    as 2 in asynchrnouse mode.
    
    This is fixed by checking all the free slots and returning the oldest buffer.
    
    Change-Id: Ibbac10593c3994c278c601af0480b171635ecdd4
    Signed-off-by: Sunita Nadampalli <sunitan@ti.com>
    enable ALLOW_DEQUEUE_CURRENT_BUFFER for tegra devices
    
    this flag should be enabled for all targets, but currently
    some have issues with it, so we're turning it on only for
    tested targets.
    
    this will hopefully resolve some performance issues.
    
    Bug: 5553562
    Change-Id: I939992b4cd0debea980dec0127c72be2dff33af8
    SurfaceTexture: various logging improvements
    
    Change-Id: I1f7216276547a1e9f9343c88c6cc1c24efcdcdbc
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    SurfaceTexture: parameterize the texture target
    
    This change adds a hack to allow Android Browser to use a SurfaceTexture
    to stream RGBA images to a GL_TEXTURE_2D texture object.
    
    Change-Id: Idb90064d5d4b920959ef3be7451362ac5012460e
    SurfaceTexture: add name support
    
    This change adds support for setting a string that can be used to
    identify a SurfaceTexture object in log messages.
    
    Change-Id: Ib4ee085f36c8830dc964c05ef1654f5a55dfcd60
    cleanup: fix typos in logs
    
    Change-Id: Ib5744564a873ea2b84100174673dc4d3ae109fcf
    make sure to re-initialize SurfaceTexture to its default state on disconnect
    
    this caused problems where the NavigationBar would disapear or be
    drawn in the wrong orientation.
    
    Change-Id: I083c41338db83a4afd14f427caec2f31c180d734
    make sure to re-initialize SurfaceTexture to its default state on disconnect
    
    this caused problems where the NavigationBar would disapear or be
    drawn in the wrong orientation.
    
    Change-Id: I083c41338db83a4afd14f427caec2f31c180d734
    don't return the current buffer from dequeueBuffer
    
    we were not reseting mCurrentTexture in some situations
    which in turn caused dequeueBuffers() return a
    "FREE" buffer that was also current.
    Very often it was harmless, but it created a race with
    updateTexImage() which could cause the following
    queueBuffers() to fail.
    
    Bug: 5156325
    Change-Id: If15a31dc869117543d220d6e5562c57116cbabdb
    fix a small race condition when returning the default width/height of a SurfaceTexture
    
    Change-Id: I581bf609505dfb5d4ec5957b2ef2c77df6cfb15f
    Revert "error out when SurfaceTexture APIs are called while not connected"
    
    This reverts commit a04cda9986366ab480ad8008c4d923271b05d78e.
    
    Conflicts:
    
            include/gui/SurfaceTexture.h
            libs/gui/SurfaceTexture.cpp
    
    Change-Id: Ib655016462c496ee2a27f7cb33a6e8b18cfe684a
    fix a crasher in SurfaceTexture::updateTexImage()
    
    we now make sure to drain the buffer queue on disconnect.
    this happens only when in synchrnous mode. in async mode
    we clear all buffers except the head of the queue.
    
    for extra safety we also catch the null pointer
    in updateTexImage (which should  never happen) and return
    an error.
    
    Bug: 5111008
    
    Change-Id: I5174a6ecbb0de641c6510ef56a611cbb4e9e1f59
    rework dequeueBuffer()'s main loop.
    
    this simplifies the code a bit and also makes sure
    we reevaluate mAbandoned and mConnectedApi each time
    we come back from waiting on mDequeueCondition
    
    Change-Id: I1f8538b62ad321b51ed79d953b700036daba796d
    error out when SurfaceTexture APIs are called while not connected
    
    - also log a warning when freeAllBuffers is called with a non empty buffer queue
    - rename freeAllBuffers to freeAllBuffersLocked
    
    Change-Id: Idb71fdcf233b9ccae62d5a2a7c3c4bad2501d877
    fix a crasher in dumpsys
    
    Bug: 5141729
    Change-Id: Ib104d49c8660621180966be099198fe29c5bebf5
    fix a crasher in dumpsys
    
    Bug: 5141729
    Change-Id: Ib104d49c8660621180966be099198fe29c5bebf5
    free all buffers when ANativeWindow::disconnect is called
    
    Change-Id: Ie06e73e5b44398cda9e99876f78175b5eef765dc
    return correct value from query after connecting a surface
    
    the first time a surface was connected, the values returned
    by query NATIVE_WINDOW_DEFAULT_{WIDTH|HEIGHT} and
    NATIVE_WINDOW_TRANSFORM_HINT were wrong until a call
    to queueBuffer was performed.
    
    Bug: 5137366, 5121607
    Change-Id: I7ac6b5b0daa876638f6bed7c20f286a6e6d984f6
    add some logs to track a crash in eglCreateImageKHR
    
    Bug: 5111008
    
    Change-Id: I3e7f5b986151e80cbded39e0dec057770da52fc1
    improve dumpsys SurfaceFlinger output
    
    we now output the handle and size of all buffers of each layer.
    
    Change-Id: I8d011ee4ae9199f4198bd07bed770ec3bcf02986
    Add a 'release' method to the SurfaceTexture public Java API
    
    Bug: 5063618
    Change-Id: I689cb0c01c14e597ccfb4eb0972e64fa570bd4e8
    SurfaceTexture: allow set_buffer_count(2)
    
    This change relaxes an error check in SurfaceTexture::setBufferCount to
    allow clients to explicitly set a buffer count of 2.  The clients that
    will do this are camera and video decode.  Previously it was thought
    that for those clients we would always use async mode, which requires a
    minimum of 3 buffers.  However, we now believe that for some devices it
    may make sense to use synchronous mode (with 2 buffers) to reduce memory
    usage.
    
    Bug: 5088418
    Change-Id: I620a0ef75075745be9d6c8219e0246aaf33ba950
    remove dead code and member variables.
    
    also fix some comments and improve debugging logs.
    
    Change-Id: I83e55309f306332b59e1ec46104c4a7fffbf3c97
    SurfaceTexture: enable RGB external textures
    
    This change removes support for conditionally using the GL_TEXTURE_2D
    target for SurfaceTexture textures with RGB buffers.  It also enables
    and fixes the RGB-based SurfaceTexture tests.
    
    Change-Id: I9a251a981cf66af6b048b2e4c3fe7231e4774f4d
    SurfaceTexture: add the abandon method.
    
    This change adds the 'abandon' method to the SurfaceTexture C++ class.
    This method may be used to put the SurfaceTexture in an abandoned state,
    causing all ISurfaceTexture methods to fail.
    
    Change-Id: Ibd261f7b73f44e2bec36a8508bf92113cfb7cf95
    SurfaceTexture: remove getAllocator
    
    This change removes the SurfaceTexture::getAllocator method, as it's no
    longer needed.  Proper refcounting of the Gralloc buffers is now handled
    by the IGraphicBufferAlloc binder marshalling code.
    
    Change-Id: I5cffa6ebfc1bc5828fb7ce0e0a5b2f55cd8479da
    implement: "Add an ANativeWindow API for SurfaceFlinger to suggest an optimal buffer orientation"
    
    Bug: 4487161
    Change-Id: I883f34efe542c2a566d04966f873374f40c50092
    use SurfaceTexture new scaling mode in SF
    
    SF now obeys SurfaceTexture's scaling mode instead
    of inferring it from the buffer's size
    
    Change-Id: I4d50e9851abedd7e64bfcfc8af9eefb9fb668529
    Add set_scaling_mode() to ANativeWindow.
    
    This allows to specify the scaling mode independently from
    the buffer size.
    
    Change-Id: Iaa2baa660445531a97d3fac192e580f4929c5d3b
    move lock/unlock implementaion outside of Surface into SurfaceTextureClient
    
    This makes ANativeWindow_lock/ANativeWindow_unlockAndPost work
    with ANativeWindows implemented by Surface and SurfaceTextureClient.
    
    Also, Surface now inherits directly from SurfaceTextureClient.
    
    Bug: 5003724
    Change-Id: I9f285877c7bae9a262e9a7af91c2bae78804b2ef
    SurfaceTexture: make (dis)connect into an IPC
    
    This change makes the ANativeWindow connect and disconnect calls result
    in an IPC to the SurfaceTexture object.  This will allow us to prevent
    multiple simultaneous connections from different processes.
    
    Change-Id: Id9aa1003b1335b96ca6bd4a1f5a67aa433d42efb
    return an error code with gralloc buffer allocation failures
    
    Change-Id: I471e5d37ea7a42fc8a0f93446ee3b4229da37807
    Minor fix in SurfaceTexture
    
    Change-Id: Ic859715becf3e6d5107bd8beb8c577034d00ec52
    SurfaceTexture: consume buffers after err checks
    
    This change moves the point at which queued buffers get consumed to
    after any error checks that could cause updateTexImage to fail.  This
    way, if updateTexImage returns an error the buffer remains queued.
    SurfaceTexture: change onFrameAvailable behavior
    
    This change alters the conditions under which the onFrameAvailable
    callback gets called by the C++ SurfaceTexture class.  The new behavior
    is to call the callback whenever a frame gets queued that will be
    visible to the buffer consumer.  This means that buffers queued in
    synchronous mode always trigger the callback, as those buffers will
    remain pending until they are consumed.  Buffers queued in asynchronous
    mode will only trigger the callback if there was not previously an
    unconsumed buffer pending.
    
    The new behavior means that a consumer should perform a draw operation
    exactly once for every onFrameAvailable call that it recieves.  This
    change also modifies SurfaceFlinger and the SurfaceTexture JNI to
    support of the new behavior.
    
    Change-Id: I8b2c6e00961d3d58b11c6af50b555b6e4c5f5b40
    Add allowSynchronousMode to SurfaceTexture constructor.
    
    Change-Id: I54f30a3c16bbe6b813f3bcd1d389da5627531304
    Temporarily don't return the current buffer in synchronous mode
    
    activate synchronous mode by default.
    SurfaceTexture: fix a getTransformMatrix crash.
    
    This change moves the computation of the transform matrix out of
    getTransformMatrix and instead performs the computation when
    updateTexImage gets called.  This is needed in order for
    getTransformMatrix to succeed even if the buffers have been freed (e.g.
    by changing the buffer count) because the computation depends upon the
    properties of the current GraphicBuffer.
    
    Change-Id: Ied541ab8747b7ad604f862717135f9a16a816be9
    Bug: 4490420
    SurfaceTexture: fix an error check in dequeueBuffer.
    
    This change fixes the MIN_UNDEQUEUED_BUFFERS error check in
    dequeueBuffer.  The check should only be performed if a buffer has been
    queued since the last time the buffer count was changed by the client.
    The check must be applied conditionally because video decoders require
    all the bufferes to be dequeued and registered before beginning the
    decode.
    
    Change-Id: I08d96b380544e395c2fcf0f3983a199bfd695b09
    SurfaceTexture: clean up some comments, tests, etc.
    
    This change fixes up some stale comments, member variable names, log
    messages and disables a failing test.
    
    Change-Id: Ic1d3344b18066cf710e4a42838b2417c6b1f2f6c
    Disable error report temporarily to enable inline video
    
    bug:4435022
    
    Change-Id: I06f05a4781ad432ab71db93f0815eb89cd2e7a69
    fix onFrameAvailable
    
    Change-Id: I391fe9f6684ac9fd4f91416ce18b583f7087d966
    Add SurfaceTexture logging
    
    Change-Id: If1b74be5230813fb76429935d88b9d4a7c41700c
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    
    Change-Id: I8382e346ddaa2c4c8ff56ac3ffd7f0109572f188
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    
    Change-Id: Ic94cbab092953243a0746e04bbe1b2eb0cc930ef
    unify SurfaceTexture and Surface
    
    Change-Id: I49da2f5d8408e4cd7e148cfb777bb4ff68cd8f37
    Fix a bug where setgeometry couldn't be undone
    
    This change the binder protocol between SurfaceTextureClient
    and SurfaceTexture. dequeueBuffer() now takes the requested
    parameters for the buffer. SurfaceTexture decides if the
    buffer needs to be reallocated and does the allocation
    if needed. In that case it returns BUFFER_NEEDS_REALLOCATION
    to tell SurfaceTextureClient that it needs to call
    requestBuffer (which all parameters have been removed) to
    acquire a pointer to the buffer.
    
    dequeueBuffer and requestBuffer could be folded into a single
    IPC call, but we chose to optimize the case where buffers are
    not created and avoid some complexity in the marshalling code.
    
    Change-Id: I097a7f6f40a3491e10f3f3742eab33999286c304
    Fix uninitialized variable in SurfaceTexture
    
    Change-Id: Ie77cdad481fc0522ff5ea3b7e14ce94e07150793
    Report errors when eglCreateImageKHR fails
    
    Change-Id: Ica39b72ac2505675e619ef4994bd67b98bf6e7da
    changes to SurfaceTexture needed for unification with SF
    
    - implement connect/disconnect
    - implement missing query
    - handle texture_2d in addition to texture_external_oes
    
    Change-Id: I971a70821f00f22b01f5337de4a7d451177fec4d
    Fix a GraphicBuffer leak in SurfaceTexture
    
    This leak was intentional, it was there to deal with the fact that
    some gralloc implementations don't track buffer handles with
    file-descriptors so buffers needed to stay alive until there were
    registered, which is not guaranteed by binder transactions.
    
    In this new implementation, we use a small BBinder holding a
    reference to the buffer, which with tuck into the parcel. This forces
    the reference to stay alive until the parcel is destroyed, which
    is guaranteed (by construction) to happen after the buffer is
    registered.
    
    this allows the public facing API to not expose the previous hack.
    
    Change-Id: I1dd6cd83679a2b7457ad628169e2851acc027143
    SurfaceTexture can now force the client to request a buffer
    
    SurfaceTexture now has the concept of default size a new method,
    setDefaultBufferSize() to set it. When the default size is
    changed, dequeueBuffer() will return a value telling the
    client that it must ask for a new buffer.
    
    The above only applies if the client has not
    overriden the buffer size with setGeometry.
    
    Change-Id: I520dc40363054b7e37fdb67d6a2e7bce70326e81
    Add support for timestamps into SurfaceTexture.
    
    API addition: The timestamps are represented as nanoseconds from some
    arbitrary time point. Like the SurfaceTexture transform matrix, the
    timestamp retrieved by getTimestamp is for the last frame sent to the
    GL texture using updateTexImage().
    
    Camera HAL change: Expect vendors to set these timestamps using
    native_window_set_buffers_timestamp().  For now, they are
    autogenerated by SurfaceTextureClient if set_buffers_timestamp() is
    never called, but such timing is likely not accurate enough to pass a
    CTS test.
    
    bug:3300707
    
    Change-Id: Ife131a0c2a826ac27342e11b8a6c42ff49e1bea7
    SurfaceTexture: fix transform matrix computation.
    
    This change fixes the transform matrix computation in SurfaceTexture
    when a crop rectangle is specified by the image producer.  It also adds
    a test for this case as well as a basic test for the uncropped case.
    
    Bug: 4070775
    Change-Id: I1481c9ce9d08fe7f2bff86d3afdeab7d4002b157
    Add the MIN_UNDEQUEUED_BUFFERS query to ANW.
    
    This change adds a new query to ANativeWindow for getting the minimum
    number of buffers that must be left un-dequeued during the steady-state
    operation of the ANativeWindow.
    
    Change-Id: Ie8c461fc26b02ecde02ddb4f95bf763662cf1551
    Related-Bug: 3356050
    Initialize the SurfaceTexture transform fields.
    
    Change-Id: I2c25f15949253a1dbe493fef440e5ef118c40e71
    related-bug: 3426067
    Pass the IGraphicBufferAlloc to SurfaceTextureClient.
    
    This change passes a reference to the IGraphicBufferAlloc binder object
    to SurfaceTextureClient objects.  When STC objects are created they
    query their associated ISurfaceTexture object for the
    IGraphicBufferAlloc that the SurfaceTexture uses to allocate buffers.
    Having the SurfaceTextureClient hold this reference prevents the
    GraphicBufferAlloc in SurfaceFlinger from freeing the allocated buffers
    before the SurfaceTextureClient is done with them.
    
    Change-Id: Ib8e30e8b37fdd60438cbb4cb7e9174d0ba6d661c
    related-bug: 3362519
    Clear GL errors before updating a SurfaceTexture.
    
    Change-Id: Ibdac657ae9e9ccae53c63abed9caf1f1513915c2
    Implement SurfaceTexture frame-available callback.
    
    This change implements the onFrameAvailable callback for the
    SurfaceTexture java class.  It includes the C++ SurfaceTexture code as
    well as the JNI and Java code to enable the callback.
    
    Change-Id: Ifd8b8e7ad46ee70cba6da1c2e96dab8045d1ea30
    Fix SurfaceTexture transform matrix.
    
    Change-Id: I31520c547cafa5cc85cd0f73883ab3a9ff4648e2
    Fix remote GraphicBuffer allocation in SurfaceFlinger.
    
    This change fixes a horrible hack that I did to allow application
    processes to create GraphicBuffer objects by making a binder call to
    SurfaceFlinger.  This change introduces a new binder interface
    specifically for doing this, and does it in such a way that
    SurfaceFlinger will maintain a reference to the buffers until the app is
    done with them.
    
    Change-Id: Icb240397c6c206d7f69124c1497a829f051cb49b
    Fix a bug in SurfaceTexture::dequeueBuffer.
    
    This change fixes a bug that allowed the most recently queued buffer to
    be returned by dequeueBuffer.  At the next updateTexImage call, the
    dequeued buffer would be set as the contents of the texture even though
    the client could be writing to it.
    
    Change-Id: I53dc14eed13262475627d5551337df57fd78fe00
    Implement crop & transform for SurfaceTexture.
    
    This change adds support for the setCrop and setTransform methods of the
    SurfaceTexture C++ class.  The crop and transform for the current
    texture will be accessed by applications as a single texture coordinate
    transform matrix.
    
    Change-Id: I6482bf96f680e5c175364e848936db3908d6c8f8
    Fix a bug in SurfaceTexture::setBufferCount.
    
    We need to reset mCurrentTexture and mLastQueued in setBufferCount
    because it frees all of the buffers associated with the buffer slots.
    
    Change-Id: Ie2f834ec1c07ce7a4ab9b2b5fc5fe8c294010c60
    Add method logging to the SurfaceTexture C++ class.
    
    Change-Id: Ic05b05428d34c04634ce9fc3f924ff3322bb2da2
    Initialize the SurfaceTexture buffer slots.
    
    Change-Id: I81a562ad897173f33cd6a2127737718a7db610eb
    Add the SurfaceTexture C++ implementation.
    
    This change adds the C++ implementation of SurfaceTexture and related
    classes. The goal of this is for a SurfaceTexture to be passed to
    camera service or Stagefright in place of a Surface to allow camera
    preview or decoded video frames to be streamed to an OpenGL ES texture
    that an application can use.
    
    Change-Id: I55c83a7017f1ecb81c9c9e3252cbd118b914296c
    use a socketpair instead of a pipe in BitTube
    
    Bug: 6252830
    Change-Id: Ia7a7b08409517214136261c05569dc5959a597ab
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    separate transactions from updates
    
    with this changes, SF transactions are handled as soon as possible
    but do not trigger updates. the update is delayed until the next
    vsync.
    
    this allows us to work much better without requiring triple-buffering.
    
    Change-Id: I1fa10794d0cf742129f0877698b7b1e1f2ec7401
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Improve the VSYNC api a bit.
    
    - add the ability to set the vsync delivery rate, when the rate is
    set to N>1 (ie: receive every N vsync), SF process' is woken up for
    all of vsync, but clients only see the every N events.
    
    - add the concept of one-shot vsync events, with a call-back
    to request the next one. currently the call-back is a binder IPC.
    
    Change-Id: I09f71df0b0ba0d88ed997645e2e2497d553c9a1b
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    BufferQueue: release mutex while allocating. DO NOT MERGE
    
    BufferQueueProducer::allocateBuffers used to keep the BufferQueueCore
    mutex while doing the buffer allocation, which would cause the consumer
    (which also needs the mutex) to block if the allocation takes a long
    time.
    Instead, release the mutex while doing the allocation, and grab it again
    before filling the slots. Keep a bool state and a condvar to prevent
    other producers from trying to allocate the slots while the mutex is
    released.
    
    Bug: 11792166
    
    Change-Id: I4ab1319995ef892be2beba892f1fdbf50ce0416d
    (cherry picked from commit ea96044470a29133321c681080870b9d31f81a19)
    libgui: 64 bit compile issues (part deux)
    
    - nsecs_t printed with PRId64
    - int64_t/uint64_t print issues
    - some size_t printing issues.
    - missing argument to BQ_LOGV
    
    Change-Id: I493f2b578e801dc38c44f8c536faa45266720402
    BufferQueue: Add StreamSplitter
    
    Adds a StreamSplitter class, that takes one IGraphicBufferConsumer
    interface and multiple IGraphicBufferProducer interfaces and
    implements a one-to-many broadcast of GraphicBuffers (while managing
    fences correctly).
    
    Change-Id: I38ecdf3e311ac521bc781c30dde0cc382a4376a3
    native gui: 64-bit compile issues
    
    Change-Id: I45f605ff3759fb7ae9f0a6425d557d195f93281e
    BufferQueue: Add producer buffer-released callback
    
    Add a callback to the producer side, onBufferReleased, which will be
    called every time the consumer releases a buffer back to the
    BufferQueue. This will enable a buffer stream splitter to work
    autonomously without having to block on dequeueBuffer.
    
    The binder object used for the callback replaces the generic IBinder
    token that was passed into IGraphicBufferProducer::connect to detect
    the death of the producer. If a producer does not wish to listen for
    buffer release events, it can pass in an instance of the
    DummyProducerListener class defined in IProducerListener.h, if it even
    cares about death events (BufferQueue doesn't enforce the token being
    non-NULL, though perhaps we should).
    
    Change-Id: I23935760673524abeafea2b58dccc3583b368710
    Change BufferQueue into producer/consumer wrapper
    
    Now that BufferQueue has been split into core + producer + consumer,
    rewrite BufferQueue to be a thin layer over a producer and consumer
    interface. Eventually, this layer will be deprecated in favor of
    only using either the producer or consumer interface, as applicable.
    
    Change-Id: I340ae5f5b633b244fb594615ff52ba50b9e2f7e4
    Split BufferQueue into core + producer + consumer
    
    Change-Id: Idc39f1e511d68ce4f02202d35425a419bc0bcd92
    Update ScreenshotClient to take advantage of rotation in surfaceflinger's screencap api
    
    Change-Id: I836649d9d5cd5958ce34e47f26f4a36d2d05d24c
    Have VirtualDisplays send SF resize messages when resizing
    
    Change-Id: I76d15b22099a659450ec875836c9bf2b6584838f
    surfaceflinger: Replace blank/unblank with setPowerMode
    
    We replace the blank/unblank calls in surfaceFlinger with a more generic
    setPowerMode() routine.
    
    Some displays support different power modes (for example, with reduced
    color palettes). Depending on the use case we should be able to toggle
    these modes, so as to achieve incremental power savings.
    
    Initially, three power modes will be supported:
    - HWC_POWER_MODE_OFF
    - HWC_POWER_MODE_DOZE
    - HWC_POWER_MODE_NORMAL
    
    HWC_POWER_MODE_OFF will correspond to blanking the display, while
    HWC_POWER_MODE_NORMAL will correspond to unblanking. HWC_POWER_MODE_DOZE
    will put the display into a low power setting, if it is supported in
    hardware.
    
    If such a low power mode is not supported, it should be treated as a
    call to set the mode to HWC_POWER_MODE_NORMAL.
    
    As a consequence of adding the mPowerMode field, the mScreenAcquired is
    no longer required, and thus references to it are removed and replaced
    equivalent references to mPowerMode.
    
    We also add the glue code to connect the services invocation of setting
    a power mode and the HAL implementation in HWComposer.
    
    Bug: 13472578
    Change-Id: I431595ecf16d2f2c94259272db3dd42f29636204
    Signed-off-by: Prashant Malani <pmalani@google.com>
    SurfaceFlinger: Add sourceCrop to screenshot
    
    Adds a sourceCrop Rect parameter to screenshot commands, which allows
    clients to capture only a portion of the screen instead of the whole
    screen.
    
    Bug: 15137922
    Change-Id: I629447573cd34ffb96334cde7ba02490b9ea06d8
    Enable changing display configuration
    
    This allows querying and switching display device configurations
    through the ISurfaceComposer/SurfaceComposerClient interface.
    
    Bug: 14320401
    Change-Id: I8c22165698950e5da32204c1c4da92122f91a715
    Adding render stats APIs to UiAutomation (framework native).
    
    bug:12927198
    
    Change-Id: Ibb1c07f7d89e11281e5c1f27f412a29ac6f9c4ab
    Remove deprecated BufferQueue constructor
    
    Bug: 13415624
    Change-Id: I52f58a4d22296d9fc3cdbd4ad53eb10a785db3ce
    Allow "opaque" flag to be updated. DO NOT MERGE
    
    Moves the "opaque layer" from Layer to Layer::State.  This allows
    it to be updated as part of a transaction.
    
    Bug 12387406
    
    Change-Id: I0a114ce6adf77cd12fb08f96e0691b76c475768d
    Allow disabling layer rotation during screenshots
    
    Add the ability to ignore layers' transformation matrices during
    screenshot capture, which will allow the window manager to capture
    unrotated images for recents during the device rotation animation.
    
    Bug: 11805195
    Change-Id: I854d87bc84ca06ef9a054a454af1c080ee66fbb8
    Allow "opaque" flag to be updated
    
    Moves the "opaque layer" from Layer to Layer::State.  This allows
    it to be updated as part of a transaction.
    
    Bug 12387406
    
    Change-Id: I0a114ce6adf77cd12fb08f96e0691b76c475768d
    Add ISurfaceComposer::destroyDisplay
    
    Bug: 10191053
    Change-Id: Ia89286f95421344a60ffedaaca5825c4e3cd7f9e
    remove support for glReadPixels screenshot path
    
    this was only needed on some chipset we're not
    supporting in KLP.
    
    Change-Id: I2e8fc07f135030bd61d2e241a8e426f1a4316425
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    log an error when dequeueBuffer gets a NULL Fence
    
    Bug: 9858745
    Change-Id: If35d6a7d770bf0a42d55bc55880a9ddb721fcfd0
    always pass the BufferQueue explicitely to consumers
    
    Change-Id: I883b0a7b19d8e722f9ab714ba6f49e658b02ca86
    make sure to unlock the screenshot's buffer on destruction
    
    this fixes a memory leak on various devices
    
    Bug: 8475134
    Change-Id: I25924674c803a0cb22371a95c60664c36acb0340
    rework how we take screenshots for a CPU consumer
    
    We're not using IMemoryHeap as a transport anymore,
    instead we're providing a CpuConsumer and use the
    IGraphicBufferProducer version of the screenshot API.
    
    However, some GPU drivers don't support properly
    a GPU to CPU path, to work around this, we use a
    temporary BufferQueue on the server side for the
    GL rendering, and we use glReadPixels into the
    CpuConsumer (we're now using a CPU to CPU path
    which is always supported).
    
    Currently this "wrapping" is always performed,
    but it can be bypassed on devices that support
    the GPU to CPU path.
    
    This also addresses a DoS attack vector on
    SurfaceFlinger, where an application could
    consume all of SF's filedescriptors by creating
    a lot of screenshots in a row.
    
    Bug: 8390553
    
    Change-Id: I9e81514c2a7711b9bb393f74305be7d2abe08f1c
    get rid of ISurface
    
    ISurface was only used to get the IGraphicBufferProducer from
    a Layer. It's now replaced by a BBinder subclass / IBinder and
    is only used as a handle to the surface, to both refer to it
    and manage its life-time.
    
    Also cleaned-up a bit the ISurfaceComposer interface and
    "create layer" code path.
    
    Change-Id: I68d0e02d57b862cffb31d5168c3bc10cea0906eb
    rework screenshot API and implementation
    
    - SurfaceFlinger now supports to take a screenshot
      directly into an IGraphicBufferProducer
    
    - reimplement the IMemoryHeap screenshot on top
      of the above
    
    - reimplement LayerScreenshot such that its
      BufferQueue is directly used as the destination
      of the screenshot. LayerScreenshot is now a thin
      wrapper around Layer
    
    Bug: 6940974
    
    Change-Id: I69a2096b44b91acbb99eba16f83a9c78d94e0d10
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: Ibed34175ae273608393aaa5f0a7df207dc40d709
    get rid of Surface identity and token
    
    we use the IBinder instead.
    
    Change-Id: I4aa0b58869ba43f19980013620051e5a261b062d
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    Allow global transactions to nest.
    
    This change fixes a number of small glitches that can occur when
    multiple components in the same process are updating surfaces.
    One would expect that updates to disjoint sets of surfaces would
    not collide but this is not the case.  The first component to
    close the global transaction causes all pending updates to
    be applied, including those that another component might not
    have finished setting up if it also had an open transaction
    at the same time.
    
    Change-Id: I99345958581abbe0e1e325a5bcba37e8941a313a
    SurfaceFlinger: add support for secure displays
    
    This change adds support for displays that are not allowed to display surfaces
    with the eSecure flag set.  All non-virtual displays are considered secure,
    while virtual displays have their secure-ness specified at creation time.
    
    Bug: 7368436
    Change-Id: I81ad535d2d1e5a7ff78269017e85b111f0098500
    SurfaceFlinger: add animation transactions
    
    This change adds a transaction flag for WindowManager to indicate that a
    transaction is being used to animate windows around the screen.  SurfaceFlinger
    will not allow more than one of these transactions to be outstanding at a time
    to prevent the animation "frames" from being dropped.
    
    Bug: 7353840
    Change-Id: I6488a6e0e1ed13d27356d2203c9dc766dc6b1759
    SurfaceFlinger: add animation transactions
    
    This change adds a transaction flag for WindowManager to indicate that a
    transaction is being used to animate windows around the screen.  SurfaceFlinger
    will not allow more than one of these transactions to be outstanding at a time
    to prevent the animation "frames" from being dropped.
    
    Bug: 7353840
    Change-Id: I6488a6e0e1ed13d27356d2203c9dc766dc6b1759
    Add blankDisplay/unblankDisplay to SurfaceComposerClient.
    
    Bug: 7309812
    Change-Id: Ia401d642094a46c62f0d26c65da1d11341e203a1
    Revert "Compatibility work around for bad graphics driver dependency."
    
    This reverts commit a50b51c03aca449920fc8581a738032a7bce7150
    
    Change-Id: Ibdcd776a7f241dbb2475403ea04f939249774c41
    Revert "Compatibility work around for bad graphics driver dependency."
    
    This reverts commit a50b51c03aca449920fc8581a738032a7bce7150
    
    Change-Id: Ibdcd776a7f241dbb2475403ea04f939249774c41
    Plumb display name into SurfaceFlinger
    
    The Surface createDisplay() call takes a display name for debugging.
    This change carries it through SurfaceFlinger and displays it in
    the "dumpsys SurfaceFlinger" output.
    
    Bug 7058158
    
    Change-Id: I79f3474a8656ff1beb7b478e0dbf2c5de666118a
    Watch for SurfaceFlinger death
    
    The ComposerService object wasn't watching for SurfaceFlinger
    restarts, which doesn't usually matter because the app framework
    restarts when SurfaceFlinger dies.  However, mediaserver continues
    to run, which means its ComposerService object was trying to use
    a dead handle, and playback of DRM movies was failing.
    
    This adds a DeathRecipient listener and some logic to re-establish
    the SurfaceFlinger connection.
    
    Bug 6645813
    
    Change-Id: I07581b881d3835601aa57d5358c8259d93bc4515
    display projection API now has a single function instead of 3
    
    Change-Id: I9bf46d372b77d547486d4bbe6f1953ec8c65e98f
    Revert "A vendor ril depends on a native screen shot code."
    
    This reverts commit 9b5782baf0a8a2d7afc7129453beb5df7abe7650.
    
    A new ril for toro, hack no longer needed.
    A vendor ril depends on a native screen shot code.
    
    Add a temporary shim until the vendor fixes the ril.
    
    Bug: 7073467
    Change-Id: Ia95a58bd90677c03406c988d1c29ae785f8662f2
    A vendor ril depends on a native screen shot code.
    
    Add a temporary shim until the vendor fixes the ril.
    
    Bug: 7073467
    Change-Id: Ia95a58bd90677c03406c988d1c29ae785f8662f2
    Compatibility work around for bad graphics driver dependency.
    
    This is a compatibility shim for one product whose drivers
    are depending on SurfaceComposerClient::getDisplayInfo(
    int, DisplayInfo*) when it really shouldn't.
    
    Revert this patch when the problem has been resolved.
    
    Bug: 7065398
    Change-Id: I6542691b81fd1b1e1d79500a62e82d40a3d51db7
    Remove unused "layer" argument from show().
    
    Change-Id: I8944a9f4a27c330b11e5e837c69b88c8f84145ba
    Banish DisplayID from the SurfaceFlinger API.
    
    Use only display tokens in the API to refer to new displays.
    
    Don't require the caller to specify the display when creating
    a surface (since in general a surface could be shown on
    any display).
    
    This is intended to be a minimum change just to update the API.
    Note that SurfaceFlinger still uses DisplayID in a few places
    internally that might cause some features not to work properly
    when there are multiple displays (LayerScreenshot, for example).
    
    Change-Id: I3d91eec2da406eefd97bcd53655d403ad865a7e6
    display states can't share the dirty flags
    
    Change-Id: Ifade9f2f1a0df9a36aede77a6cf5eee4be534f98
    make multi-display more real
    
    - displays are represented by a binder on the client side
    - c++ clients can now create and modify displays
    
    Change-Id: I203ea5b4beae0819d742ec5171c27568f4e8354b
    libgui includes refactoring
    
    Change-Id: I1d24ec17f5003ec2abab5f7472daaff4cc4cc2d3
    get rid of the shared-memory control block
    
    Change-Id: If814060aca1d2ff2619d4adcd57296983d207f7f
    add a layerStack attribute to Layers.
    
    this attribute can be set through a regular transaction using
    SurfaceComposerClient (just like any other attribute, eg: position or size)
    
    Change-Id: I701a47c677ea6442ca713728a93335328cd2b172
    update SF binder protocol to support setting display attributes
    
    no change of functionality -- the old behavior is implemented
    on top of this new protocol.
    this new protocol will allow, eventually, to pass informations
    about displays and layer stacks.
    
    Change-Id: Ic6c2295e61ec8ecbc8ce01ab7664e35d928202fc
    Remove freeze(), unfreeze() and setFreezeTint().
    
    This is all dead code.
    
    Change-Id: I646673aac793a6ec45021c370a2450f0ea4fbcce
    Remove freezeDisplay(), which is no-op.
    
    Change-Id: I2b70249a1545636fd6d98b58057b22f9529cad21
    SurfaceFlinger: add a crop to the layer state
    
    This change adds a crop rectangle specified in window coordinates to the layer
    state.  The all window pixels outside this crop rectangle are treated as though
    they were fully transparent.  This change also adds the plumbing necessary for
    WindowManager to set that crop.
    
    Change-Id: I582bc445dc8c97d4c943d4db8d582a6ef5a66081
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    split ComposerService out of SurfaceComposerClient.h
    
    Change-Id: I1eb691f7ca263d5895d871ab675bb5826e0323c6
    SurfaceFlinger: make sync transactions explicit
    
    This change enables a layer or orientation update transaction sent to
    SurfaceFlinger to explicitly request a synchronous transaction.
    
    Change-Id: I97cbba610c13679849f66114b216fa6dbf12f2a9
    SurfaceFlinger: update orientation via transactions
    
    This change merges the ISurfaceComposer::setOrientation functionality
    into ISurfaceComposer::setTransactionState.  It enables the window
    manager to atomically update both the display orientation and the
    position and size of the windows in a single transaction with
    SurfaceFlinger.
    
    Bug: 5439574
    Change-Id: I18a8ccc564d7d760ef8afb2d015ccdb7a7963900
    fix Surface positions are not floats
    
    Added Surface.setPosition(float, float) which allows to set a surface's
    position in float.
    
    Bug: 5239859
    Change-Id: I903aef4ad5b5999142202fb8ea30fe216d805711
    clean-up. get rid ofunused code and members in Surface[Control].cpp
    
    Change-Id: Ia7790ae28af2c2ac99eae01c2c5044ace4a490a4
    SF transactions are now O(1) wrt IPC instead of O(N).
    
    Change-Id: I57669852cbf6aabae244ea86940a08a5a27ffc43
    unify SurfaceTexture and Surface
    
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    Add SurfaceTexture logging
    fix onFrameAvailable
    Get rid of the "pid" parameter from createSurface
    
    Change-Id: I28635e3f803e6abe965d79998e305f54a202465d
    merge libsurfaceflinger_client into libgui
    
    this is the first step in unifying surfacetexture and surface.
    for this reason the header files were not moved, as most of them
    will eventually go away.
    
    NOTE: currently we keep libsurfaceflinger_client.so as an empty
    library to workaround prebuilt binaries wrongly linking against
    it.
    
    Change-Id: I130f0de2428e8579033dc41394d093f4e1431a00
    [3258939] Need snapshot to limit which layers are included
    
    Change-Id: Id7351a0e3f53dde99b291cffba553d89fd4d7ca9
    refactored screenshot code
    
    the core screenshot function now can capture the screen at any lower resolution
    performing bilinear filtering.
    
    we also now have some client code to interface with the screenshot service.
    
    it's now possible to request a screenshot at a lower resolution.
    
    Change-Id: I33689bba98507ab928d0898b21596d0d2fe4b953
    refactored screenshot code
    
    the core screenshot function now can capture the screen at any lower resolution
    performing bilinear filtering.
    
    we also now have some client code to interface with the screenshot service.
    
    it's now possible to request a screenshot at a lower resolution.
    
    Change-Id: I5a3b0e431421800e3aad601d9af8f94adffbc71f
    fix [2751143] Device crashes when in a text box for too long
    split surface management from surface's buffers management
    
    Change-Id: If3c5655d1231f8f0c49ba68f972b1b20c93b3f87
    more clean-up in preparation of bigger changes
    
    the most important change here is the renaming of
    ISurfaceFlingerClient to ISurfaceComposerClient
    
    Change-Id: I94e18b0417f50e06f21377446639c61f65f959b3
    more clean-up of Surfaceflinger's client management
    
    SurfaceComposerClient now only exist on the WindowManager side,
    the client side uses the new SurfaceClient class, which only
    exposes what a client needs.
    
    also instead of keeping mappings from IBinder to SurfaceComposerClients
    we have a SurfaceClient per Surface (referring to the same IBinder), this
    is made possible by the fact that SurfaceClient is very light.
    
    Change-Id: I6a1f7015424f07871632a25ed6a502c55abfcfa6
    fix [2712278] The preview buffer left some black borders in left and bottom edges
    
    we were incorrectly flagging push_buffer surfaces as invalid
    
    Change-Id: I4dfd4ffbbe8a71f7e23e835db8d71966416c29bb
    fix the threading issue for setBuffercount()
    
    this change introduces R/W locks in the right places.
    on the server-side, it guarantees that setBufferCount()
    is synchronized with "retire" and "resize".
    on the client-side, it guarantees that setBufferCount()
    is synchronized with "dequeue", "lockbuffer" and "queue"
    Added a name to Surface created by SurfaceFlinger
    
    Updated the window manager to use this new facility.
    Surfaces name are now printed by "dumpsys".
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    fix [2170319] gmail bulk operation checkbox latency on passion
    
    This also fixes [2152536] ANR in browser
    
    When SF is enqueuing buffers faster than SF dequeues them.
    The update flag in SF is not counted and under some situations SF will only
    dequeue the first buffer. The state at this point is not technically
    corrupted, it's valid, but just delayed by one buffer.
    
    In the case of the Browser ANR, because the last enqueued buffer was delayed
    the resizing of the current buffer couldn't happen.
    
    The system would always fall back onto its feet if anything -else- in
    tried to draw, because the "late" buffer would be picked up then.
    fix [2132563] stuck in boot animation (framebuffer_device_open: Failed to create flip chain)
    Don't return when blocking is true.
    fix [2068105] implement queueBuffer/lockBuffer/dequeueBuffer properly
    
    Rewrote SurfaceFlinger's buffer management from the ground-up.
    The design now support an arbitrary number of buffers per surface, however the current implementation is limited to four. Currently only 2 buffers are used in practice.
    
    The main new feature is to be able to dequeue all buffers at once (very important when there are only two).
    
    A client can dequeue all buffers until there are none available, it can lock all buffers except the last one that is used for composition. The client will block then, until a new buffer is enqueued.
    
    The current implementation requires that buffers are locked in the same order they are dequeued and enqueued in the same order they are locked. Only one buffer can be locked at a time.
    
    eg. Allowed sequence:   DQ, DQ, LOCK, Q, LOCK, Q
    eg. Forbidden sequence: DQ, DQ, LOCK, LOCK, Q, Q
    get rid of references to MemoryDealer in SurfaceFlinger
    move libbinder's header files under includes/binder
    more splitting of Surface/SurfaceControl. Surface.java is now implemented in terms of Surface and SurfaceControl.
    
    The WindowManager side of Surface.java holds a SurfaceControl, while the client-side holds a Surface. When the client is in the system process, Surface.java holds both (which is a problem we'll try to fix later).
    split Surface.cpp into Surface and SurfaceControl
    
    SurfaceControl is used for controling the geometry of the surface (for the WM), while Surface is used to access the buffers (for SF's clients).
    SurfaceFlingerClient now uses the SurfaceID instead of Surface*.
    
    Currently Surface still has the SurfaceControl API and is implemented by calling into SurfaceControl.
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    AI 143320: am: CL 143171 am: CL 142873 fix [1732012] Only show screen rotation animation when triggered by sensor
      Original author: mathias
      Merged from: //branches/cupcake/...
      Original author: android-build
      Merged from: //branches/donutburger/...
    
    Automated import of CL 143320
    AI 143171: am: CL 142873 fix [1732012] Only show screen rotation animation when triggered by sensor
      Original author: mathias
      Merged from: //branches/cupcake/...
    
    Automated import of CL 143171
    Automated import from //branches/cupcake/...@142873,142873
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    BufferQueue: Increase max slots from 32 to 64
    
    Increases NUM_BUFFER_SLOTS from 32 to 64 and changes the mask
    returned by IGBC::getReleasedBuffers from 32 to 64 bits.
    
    Bug: 13174352
    Change-Id: Ie8ef0853916cfb91f83881c7241886bb1950f01a
    BufferQueue: Add StreamSplitter
    
    Adds a StreamSplitter class, that takes one IGraphicBufferConsumer
    interface and multiple IGraphicBufferProducer interfaces and
    implements a one-to-many broadcast of GraphicBuffers (while managing
    fences correctly).
    
    Change-Id: I38ecdf3e311ac521bc781c30dde0cc382a4376a3
    Declare ownership of native_handle_t object
    
    Change-Id: I4e21ff8ea76cfafce943dc059c8f72b42397980e
    BufferQueue: Test remote producer and consumer
    
    Adds a test that puts the BufferQueue into its own process and
    connects to it over remote binder interfaces. This exposed the fact
    that while IGBC was technically binderized, it didn't actually work
    when flattened, so this change also fixes that.
    
    Change-Id: I728cdb662a4273ddd3440ed6040a12560313fe68
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    BufferQueue: Allow detaching/reattaching buffers
    
    Adds detachBuffer and attachBuffer calls to both the producer and
    consumer sides of BufferQueue. Buffers may be detached while dequeued
    by the producer or acquired by the consumer, and when attached, enter
    the dequeued and acquired states, respectively.
    
    Bug: 13173343
    Change-Id: Ic152692b0a94d99e0135b9bfa62747dab2a54220
    gui: Update header docs for IGraphicBufferConsumer/Producer/BufferQueue
    
    Also fix compiler warnings for libgui
    
    Change-Id: I0ee38d9ad5eaa82d55bf812d291da8c433581cef
    fix camera API 2.0 orientation
    
    we add a flag to ANativeWindow::setBufferTransform that means
    "apply the inverse rotation of the display this buffer is displayed
    onto to".
    
    Bug: 10804238
    Change-Id: Id2447676271950463e8dbcef1b95935c5c3f32b2
    Re-enable frame dropping for non-auto timestamps
    
    This change adds an entire field to note whether the timestamp was
    auto-generated by Surface or supplied by the application.
    
    The value is used when deciding whether or not to drop frames based
    on buffer presentation timestamps.  If a desired presentation time
    was set explicitly, BufferQueue will use that value to decide if a
    frame should be dropped.  If the timestamp was generated by Surface
    at the time the buffer was queued, the timestamp is ignored.
    
    Bug 10151804
    
    Change-Id: Ibd571a7578351063b813cbdad2ddbeed70655ba5
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    Binderize the consumer side of BufferQueue
    
    While currently untested, this should allow to move the
    BuffereQueue in the consumer process and have everything
    work as usual.
    
    Bug: 9265647
    
    Change-Id: I9ca8f099f7c65b9a27b7e7a3643b46d1b58eacfc
    libgui: 64-bit compile issues
    
    Change-Id: I29961c1567b8431518a7d032ea43385e23b7bb37
    BufferQueue: Increase max slots from 32 to 64
    
    Increases NUM_BUFFER_SLOTS from 32 to 64 and changes the mask
    returned by IGBC::getReleasedBuffers from 32 to 64 bits.
    
    Bug: 13174352
    Change-Id: Ie8ef0853916cfb91f83881c7241886bb1950f01a
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    gui: Update header docs for IGraphicBufferConsumer/Producer/BufferQueue
    
    Also fix compiler warnings for libgui
    
    Change-Id: I0ee38d9ad5eaa82d55bf812d291da8c433581cef
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    Binderize the consumer side of BufferQueue
    
    While currently untested, this should allow to move the
    BuffereQueue in the consumer process and have everything
    work as usual.
    
    Bug: 9265647
    
    Change-Id: I9ca8f099f7c65b9a27b7e7a3643b46d1b58eacfc
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    Pay attention to buffer timestamps
    
    When acquiring a buffer, SurfaceFlinger now computes the expected
    presentation time and passes it to the BufferQueue acquireBuffer()
    method.  If it's not yet time to display the buffer, acquireBuffer()
    returns PRESENT_LATER instead of a buffer.
    
    The current implementation of the expected-present-time computation
    uses approximations and guesswork.
    
    Bug 7900302
    
    Change-Id: If9345611c5983a11a811935aaf27d6388a5036f1
    BufferQueue: track buffer-queue by instance vs. by reference
    
    Instead of representing the buffer-queue as a vector of buffer
    indices, represent them as a vector of BufferItems (copies).
    This allows modifying the buffer slots independent of the queued
    buffers.
    
    As part of this change, BufferSlot properties that are only
    been relevant in the buffer-queue have been removed.
    
    Also, invalid scalingMode in queueBuffer now returns an error.
    
    ConsumerBase has also changed to allow reuse of the same
    buffer slots by different buffers.
    
    Change-Id: If2a698fa142b67c69ad41b8eaca6e127eb3ef75b
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Related-to-bug: 7093648
    clean-up/simplify all dump() APIs
    
    remove the scratch buffer parameter and use
    String8::appendFormat() instead.
    
    Change-Id: Ib96c91617c8e7292de87433d15cf6232b7d591b0
    libgui: fix an EGLImage leak
    
    This moves the call to ConsumerBase::abandon from the ConsumerBase dtor to
    ConsumerBase::onLastStrongRef.  The abandon call relies on virtual methods to
    perform the clean-up, so calling it from the ConsumerBase dtor after the
    derived classes dtors ran was skipping some of the clean-up.  The
    onLastStrongRef method should get called just before the most derived class's
    dtor gets called.
    
    Bug: 8349135
    Change-Id: I836946826927cc1ed69c049049f525f92b17a269
    don't use compile-time configuration of libgui as much as possible
    
    We now detect at runtime which sync features to use, which
    allows us to remove a lot of the compile-time configuration
    options. There  is still one option though, to disable
    KHR_fence_sync on some devices (which are more efficient
    without it).
    
    - added a backdoor to get the vendor's EGL strings
    
    the new logic is:
    - use always ANDROID_native_fence_sync if available
    - fallback to KHR_fence_sync if available and not disabled
      by the compile-time option
    - use KHR_wait_sync if available and either of the above is
      enabled
    
    Change-Id: I9c4b49d9ff1151faf902cc93bd53ea5f205aaabf
    libgui: disallow NULL Fence pointers
    
    This change eliminates the uses of a NULL sp<Fence> indicating that no waiting
    is required.  Instead we use a non-NULL but invalid Fence object for which the
    wait methods will return immediately.
    
    Bug: 7892871
    Change-Id: I5360aebe3090422ef6920d56c99fc4eedc642e48
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    Revert "ConsumerBase: free buffers outside the lock"
    
    This reverts commit b21a4e3b5f7f07ed160ca6e1809313e2a8e2a6a4.
    ConsumerBase: free buffers outside the lock
    
    This change makes ConsumerBase::onBuffersReleased hold a reference to all its
    gralloc buffers until after the mutex is unlocked.  This prevents slow
    gralloc::free calls from causing lock contention with rendering threads.
    
    Bug: 7675940
    Change-Id: I0ec805d1b612afeeecfffec03f982371d27d93be
    Change ConsumerBase's FrameAvailableListener to be a weak pointer
    
    This prevents strong reference cycles when the listener implementation also
    holds a strong pointer to the ConsumerBase
    
    Bug: 7425644
    Change-Id: I1514b13a32b18d421c902dddebec0765a989c55c
    Fix race condition in ConsumerBase::addReleaseFence()
    
    This needs the ConsumerBase mutex locked, but wasn't locking it. Two
    of the four places that called it already held the lock so were fine.
    Now addReleaseFence() takes the lock itself, and I added
    addReleaseFenceLocked() for the two already-locked callers, since in
    one of them dropping the lock would be inconvenient.
    
    Bug: 7289269
    Change-Id: I7a5628adb516f8eec782aa6c14128202f96d7b0a
    ConsumerBase: make fence names meaningful
    
    Change-Id: I3580120cb63c027c327e80ec70e68650b75395de
    libgui: move fence handling into ConsumerBase
    
    This change moves some common fence handling code into the base class for
    BufferQueue consumer classes.  It also makes the ConsumerBase class initialize
    a buffer slot's fence with the acquire fence every time a buffer is acquired.
    
    Change-Id: I0bd88bc269e919653b659bfb3ebfb04dd61692a0
    SurfaceTexture: inherit from ConsumerBase (try 2)
    
    This change makes SurfaceTexture inherit from ConsumerBase.  It removes all of
    the functionality from SurfaceTexture that is now provided by the base class.
    This includes fixes for two bugs that were found after checking this change in
    the first time and then reverting it.
    
    Change-Id: Ie2d9f4f27cfef26fdac341de3152e842b01a58d2
    Revert "SurfaceTexture: inherit from ConsumerBase"
    
    This reverts commit ed059a8d754770c3cf28b78dba30f7a6ba475dbe
    
    Change-Id: I72542c2595771a40c2c88251e0d6eb54e305b99b
    Revert "SurfaceTexture: inherit from ConsumerBase"
    
    This reverts commit ed059a8d754770c3cf28b78dba30f7a6ba475dbe
    
    Change-Id: I72542c2595771a40c2c88251e0d6eb54e305b99b
    SurfaceTexture: inherit from ConsumerBase
    
    This change makes SurfaceTexture inherit from ConsumerBase.  It removes all of
    the functionality from SurfaceTexture that is now provided by the base class.
    
    Change-Id: I4a881df42810a14ee32d4ef7c8772a8f2510f4c7
    surfaceflinger: refactor FrambufferSurface
    
    This change refactors the FramebufferSurface class to inherit from the new
    ConsumerBase class.
    
    Bug: 6620200
    Change-Id: I46ec942ddb019658e3c5e79465548b171b2261f2
    surfaceflinger: add getDisplayStats() method
    
    This is used by media service to schedule video frames at the
    proper time, based on precise vsync timings.
    
    Bug: 14659809
    Change-Id: I1a90603f3dc09dca9aa4f90a3aa845fab56e0a5e
    Add rotation to surfaceflingers screen cap.
    
    + This is needed so that activity manager does not
      have to do cpu side rotations when capturing recents
      thumbnails.
    
    Change-Id: If998008e675ad01305db8399fd643cf4608b7025
    surfaceflinger: Replace blank/unblank with setPowerMode
    
    We replace the blank/unblank calls in surfaceFlinger with a more generic
    setPowerMode() routine.
    
    Some displays support different power modes (for example, with reduced
    color palettes). Depending on the use case we should be able to toggle
    these modes, so as to achieve incremental power savings.
    
    Initially, three power modes will be supported:
    - HWC_POWER_MODE_OFF
    - HWC_POWER_MODE_DOZE
    - HWC_POWER_MODE_NORMAL
    
    HWC_POWER_MODE_OFF will correspond to blanking the display, while
    HWC_POWER_MODE_NORMAL will correspond to unblanking. HWC_POWER_MODE_DOZE
    will put the display into a low power setting, if it is supported in
    hardware.
    
    If such a low power mode is not supported, it should be treated as a
    call to set the mode to HWC_POWER_MODE_NORMAL.
    
    As a consequence of adding the mPowerMode field, the mScreenAcquired is
    no longer required, and thus references to it are removed and replaced
    equivalent references to mPowerMode.
    
    We also add the glue code to connect the services invocation of setting
    a power mode and the HAL implementation in HWComposer.
    
    Bug: 13472578
    Change-Id: I431595ecf16d2f2c94259272db3dd42f29636204
    Signed-off-by: Prashant Malani <pmalani@google.com>
    SurfaceFlinger: Add sourceCrop to screenshot
    
    Adds a sourceCrop Rect parameter to screenshot commands, which allows
    clients to capture only a portion of the screen instead of the whole
    screen.
    
    Bug: 15137922
    Change-Id: I629447573cd34ffb96334cde7ba02490b9ea06d8
    Enable changing display configuration
    
    This allows querying and switching display device configurations
    through the ISurfaceComposer/SurfaceComposerClient interface.
    
    Bug: 14320401
    Change-Id: I8c22165698950e5da32204c1c4da92122f91a715
    Adding render stats APIs to UiAutomation (framework native).
    
    bug:12927198
    
    Change-Id: Ibb1c07f7d89e11281e5c1f27f412a29ac6f9c4ab
    Allow disabling layer rotation during screenshots
    
    Add the ability to ignore layers' transformation matrices during
    screenshot capture, which will allow the window manager to capture
    unrotated images for recents during the device rotation animation.
    
    Bug: 11805195
    Change-Id: I854d87bc84ca06ef9a054a454af1c080ee66fbb8
    Add ISurfaceComposer::destroyDisplay
    
    Bug: 10191053
    Change-Id: Ia89286f95421344a60ffedaaca5825c4e3cd7f9e
    remove support for glReadPixels screenshot path
    
    this was only needed on some chipset we're not
    supporting in KLP.
    
    Change-Id: I2e8fc07f135030bd61d2e241a8e426f1a4316425
    rework how we take screenshots for a CPU consumer
    
    We're not using IMemoryHeap as a transport anymore,
    instead we're providing a CpuConsumer and use the
    IGraphicBufferProducer version of the screenshot API.
    
    However, some GPU drivers don't support properly
    a GPU to CPU path, to work around this, we use a
    temporary BufferQueue on the server side for the
    GL rendering, and we use glReadPixels into the
    CpuConsumer (we're now using a CPU to CPU path
    which is always supported).
    
    Currently this "wrapping" is always performed,
    but it can be bypassed on devices that support
    the GPU to CPU path.
    
    This also addresses a DoS attack vector on
    SurfaceFlinger, where an application could
    consume all of SF's filedescriptors by creating
    a lot of screenshots in a row.
    
    Bug: 8390553
    
    Change-Id: I9e81514c2a7711b9bb393f74305be7d2abe08f1c
    rework screenshot API and implementation
    
    - SurfaceFlinger now supports to take a screenshot
      directly into an IGraphicBufferProducer
    
    - reimplement the IMemoryHeap screenshot on top
      of the above
    
    - reimplement LayerScreenshot such that its
      BufferQueue is directly used as the destination
      of the screenshot. LayerScreenshot is now a thin
      wrapper around Layer
    
    Bug: 6940974
    
    Change-Id: I69a2096b44b91acbb99eba16f83a9c78d94e0d10
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    SurfaceFlinger: add support for secure displays
    
    This change adds support for displays that are not allowed to display surfaces
    with the eSecure flag set.  All non-virtual displays are considered secure,
    while virtual displays have their secure-ness specified at creation time.
    
    Bug: 7368436
    Change-Id: I81ad535d2d1e5a7ff78269017e85b111f0098500
    Pass display arg to blank/unblank
    
    This allows us to blank and unblank displays other than the built-in
    display (e.g. HDMI).
    
    Bug: 7240511
    Change-Id: I89ea13f9e497be74c3e1231d0c62fb558e93e0f8
    Plumb display name into SurfaceFlinger
    
    The Surface createDisplay() call takes a display name for debugging.
    This change carries it through SurfaceFlinger and displays it in
    the "dumpsys SurfaceFlinger" output.
    
    Bug 7058158
    
    Change-Id: I79f3474a8656ff1beb7b478e0dbf2c5de666118a
    Banish DisplayID from the SurfaceFlinger API.
    
    Use only display tokens in the API to refer to new displays.
    
    Don't require the caller to specify the display when creating
    a surface (since in general a surface could be shown on
    any display).
    
    This is intended to be a minimum change just to update the API.
    Note that SurfaceFlinger still uses DisplayID in a few places
    internally that might cause some features not to work properly
    when there are multiple displays (LayerScreenshot, for example).
    
    Change-Id: I3d91eec2da406eefd97bcd53655d403ad865a7e6
    make multi-display more real
    
    - displays are represented by a binder on the client side
    - c++ clients can now create and modify displays
    
    Change-Id: I203ea5b4beae0819d742ec5171c27568f4e8354b
    screen-off animation won't be handled by SF anymore
    
    Change-Id: Idc41386804ae7d7eb981c36e1bc55c270870c8d0
    get rid of the shared-memory control block
    
    Change-Id: If814060aca1d2ff2619d4adcd57296983d207f7f
    update SF binder protocol to support setting display attributes
    
    no change of functionality -- the old behavior is implemented
    on top of this new protocol.
    this new protocol will allow, eventually, to pass informations
    about displays and layer stacks.
    
    Change-Id: Ic6c2295e61ec8ecbc8ce01ab7664e35d928202fc
    First prototype atttempting to support an external display
    
    both API and implementation will change, this is just a prototype
    intended to show feasability.
    
    SurfaceFlinger is passed an ISurfaceTexture through a new
    callback, it is in turn used to create an EGLSurface which
    surfaceflinger will draw into in addition to the main screen.
    
    Change-Id: Id0bbb0b854bb7bae44d57246a90b65d4567f9a21
    surfaceflinger: replace early suspend with binder call from PowerManager
    
    SurfaceFlinger will no longer directly synchronize with early suspend.
    Instead, PowerManagerService will synchronize with SurfaceFlinger to
    ensure that a black frame has been drawn on the display, and then
    trigger all early suspend handlers.
    
    Change-Id: I07acdd628440d23fdb69db94319ec5d65d3f4919
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Use the standard CC_LIKELY and CC_UNLIKELY macros
    
    Several source files privately defined macros LIKELY and UNLIKELY in terms
    of __builtin_expect. But <cutils/compiler.h> already has CC_LIKELY and
    CC_UNLIKELY which are intended for this purpose.  So rename the private
    uses to use the standard names.
    
    In addition, AudioFlinger was relying on the macro expanding to extra ( ).
    
    Change-Id: I2494e087a0c0cac0ac998335f5e9c8ad02955873
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: Ia720f64d1b950328b47b22c6a86042e481d35f09
    Fix build.
    
    Revert "Add support for sending VSYNC events to the framework"
    
    This reverts commit f3918c5bd4bc9f02f74da42995564150ca2dd382.
    
    Change-Id: I998e3e1aa3fa310829ae973b64fe11b01f6f468f
    Add support for sending VSYNC events to the framework
    
    use gui/DisplayEvent to receive the events. Events are
    dispatched through a unix pipe, so the API is compatible
    with utils/Looper. see gui/DisplayEvent.h for more info.
    
    Bug: 1475048
    Change-Id: If4126023fc9c067e56087ec7d16a8fd542ce1794
    SurfaceFlinger: make sync transactions explicit
    
    This change enables a layer or orientation update transaction sent to
    SurfaceFlinger to explicitly request a synchronous transaction.
    
    Change-Id: I97cbba610c13679849f66114b216fa6dbf12f2a9
    SurfaceFlinger: update orientation via transactions
    
    This change merges the ISurfaceComposer::setOrientation functionality
    into ISurfaceComposer::setTransactionState.  It enables the window
    manager to atomically update both the display orientation and the
    position and size of the windows in a single transaction with
    SurfaceFlinger.
    
    Bug: 5439574
    Change-Id: I18a8ccc564d7d760ef8afb2d015ccdb7a7963900
    SurfaceTexture: fix queues-to-composer
    
    This change fixes the NATIVE_WINDOW_QUEUES_TO_WINDOW_COMPOSER query of
    Surface and SurfaceTextureClient.  Surface now uses the inherited
    SurfaceTextureClient implementation of this query.  SurfaceTextureClient
    now queries SurfaceFlinger to determine whether buffers that are queued
    to its ISurfaceTexture will be sent to SurfaceFlinger (as opposed to
    some other process).
    
    Change-Id: Iff187e72f30d454229f07f896b438198978270a8
    SurfaceTexture: fix queues-to-composer
    
    This change fixes the NATIVE_WINDOW_QUEUES_TO_WINDOW_COMPOSER query of
    Surface and SurfaceTextureClient.  Surface now uses the inherited
    SurfaceTextureClient implementation of this query.  SurfaceTextureClient
    now queries SurfaceFlinger to determine whether buffers that are queued
    to its ISurfaceTexture will be sent to SurfaceFlinger (as opposed to
    some other process).
    
    Change-Id: Iff187e72f30d454229f07f896b438198978270a8
    SF transactions are now O(1) wrt IPC instead of O(N).
    
    Change-Id: I57669852cbf6aabae244ea86940a08a5a27ffc43
    unify SurfaceTexture and Surface
    
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    Add SurfaceTexture logging
    fix onFrameAvailable
    merge libsurfaceflinger_client into libgui
    
    this is the first step in unifying surfacetexture and surface.
    for this reason the header files were not moved, as most of them
    will eventually go away.
    
    NOTE: currently we keep libsurfaceflinger_client.so as an empty
    library to workaround prebuilt binaries wrongly linking against
    it.
    
    Change-Id: I130f0de2428e8579033dc41394d093f4e1431a00
    ANativeWindow: add queues-to-window-composer check.
    
    This change adds a new 'method' to the ANativeWindow interface to check
    whether buffers queued to the window will be sent directly to the system
    window compositor.
    
    Change-Id: I4d4b199e328c110b68b250029aea650f03c8724d
    Bug: 3495535
    Fix the ISurfaceComposer onTransact switch.
    
    Two of the cases in the ISurfaceComposer onTransact switch statement
    were missing 'break' statements at the end, and would fall through to
    the next case block. This change adds those break statements.
    
    Change-Id: I6dcc84263d3ea03d94612c667103283846b3dee1
    Fix remote GraphicBuffer allocation in SurfaceFlinger.
    
    This change fixes a horrible hack that I did to allow application
    processes to create GraphicBuffer objects by making a binder call to
    SurfaceFlinger.  This change introduces a new binder interface
    specifically for doing this, and does it in such a way that
    SurfaceFlinger will maintain a reference to the buffers until the app is
    done with them.
    
    Change-Id: Icb240397c6c206d7f69124c1497a829f051cb49b
    Adding missing breaks in BnSurfaceComposer::onTransact
    
    Change-Id: Ie369e10f96059f940e73a3d9e7c4756465b4260c
    Add the ISurfaceComposer::createGraphicBuffer IPC.
    
    This change adds a new binder method to the ISurfaceComposer interface.
    This IPC is intended to allow SurfaceFlinger clients to allocate gralloc
    buffers using SurfaceFlinger as a proxy to gralloc.
    
    Change-Id: Ide9fc283aec5da6268ba62cfed0c3319a50b640d
    Fix the ISurfaceComposer onTransact switch.
    
    Two of the cases in the ISurfaceComposer onTransact switch statement
    were missing 'break' statements at the end, and would fall through to
    the next case block. This change adds those break statements.
    
    Change-Id: Ia53abe34e4dae480485620c66a14b4c6c76f7735
    [3258939] Need snapshot to limit which layers are included
    
    Change-Id: Id7351a0e3f53dde99b291cffba553d89fd4d7ca9
    implement part of [3094280] New animation for screen on and screen off
    add support for screen on animation
    
    Change-Id: If50cf52ae04b95b42da7d74cf7fa96d5cb54d238
    turn off the electron beam
    
    Change-Id: I335fb6719f1d5a3f1c6f37a046fd1c2c4ed2bbc6
    refactored screenshot code
    
    the core screenshot function now can capture the screen at any lower resolution
    performing bilinear filtering.
    
    we also now have some client code to interface with the screenshot service.
    
    it's now possible to request a screenshot at a lower resolution.
    
    Change-Id: I33689bba98507ab928d0898b21596d0d2fe4b953
    refactored screenshot code
    
    the core screenshot function now can capture the screen at any lower resolution
    performing bilinear filtering.
    
    we also now have some client code to interface with the screenshot service.
    
    it's now possible to request a screenshot at a lower resolution.
    
    Change-Id: I5a3b0e431421800e3aad601d9af8f94adffbc71f
    add support for [1974164] Be able to take a screen shot on the device
    
    screenshots are taken using ISurfaceComposer::captureScreen() which returns
    the size of the screenshot and an IMemoryHeap containing the data.
    screenshots have limitations:
    - they will always fail if a secure window is up on screen
    - require GL_OES_framebuffer_object extension
    - in some situation, video planes won't been captured
    
    Change-Id: I741c68a2d2984fb139039301c3349e6780e2cd58
    split surface management from surface's buffers management
    
    Change-Id: If3c5655d1231f8f0c49ba68f972b1b20c93b3f87
    more clean-up in preparation of bigger changes
    
    the most important change here is the renaming of
    ISurfaceFlingerClient to ISurfaceComposerClient
    
    Change-Id: I94e18b0417f50e06f21377446639c61f65f959b3
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    get rid of references to MemoryDealer in SurfaceFlinger
    some work to try to reduce the code size of some native libraries
    
    - make sure that all binder Bn classes define a ctor and dtor in their respective library.
      This avoids duplication of the ctor/dtor in libraries where these objects are instantiated.
      This is also cleaner, should we want these ctor/dtor to do something one day.
    
    - same change as above for some Bp classes and various other non-binder classes
    
    - moved the definition of CHECK_INTERFACE() in IInterface.h instead of having it everywhere.
    
    - improved the CHECK_INTERFACE() macro so it calls a single method in Parcel, instead of inlining its code everywhere
    
    - IBinder::getInterfaceDescriptor() now returns a "const String16&" instead of String16, which saves calls to String16 and ~String16
    
    - implemented a cache for BpBinder::getInterfaceDescriptor(), since this does an IPC. HOWEVER, this method never seems to be called.
      The cache makes BpBinder bigger, so we need to figure out if we need this method at all.
    move libbinder's header files under includes/binder
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    AI 143320: am: CL 143171 am: CL 142873 fix [1732012] Only show screen rotation animation when triggered by sensor
      Original author: mathias
      Merged from: //branches/cupcake/...
      Original author: android-build
      Merged from: //branches/donutburger/...
    
    Automated import of CL 143320
    AI 143171: am: CL 142873 fix [1732012] Only show screen rotation animation when triggered by sensor
      Original author: mathias
      Merged from: //branches/cupcake/...
    
    Automated import of CL 143171
    Automated import from //branches/cupcake/...@142873,142873
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    SurfaceFlinger: Move GraphicBufferAlloc to libgui
    
    This change moves the GraphicBufferAlloc class from SurfaceFlinger to libgui.
    
    Change-Id: Idf31d2004efa2651b60590733f73c4a7b831e8a9
    GraphicBufferAlloc class was declared twice
    
    this was confusing because the one in FramebufferSurface
    wasn't in fact being used
    
    Change-Id: Ied45aec20d804cfbe52440f9b2f2852a85c757cf
    libgui: 64 bit compile issues (part deux)
    
    - nsecs_t printed with PRId64
    - int64_t/uint64_t print issues
    - some size_t printing issues.
    - missing argument to BQ_LOGV
    
    Change-Id: I493f2b578e801dc38c44f8c536faa45266720402
    BufferQueue: Add StreamSplitter
    
    Adds a StreamSplitter class, that takes one IGraphicBufferConsumer
    interface and multiple IGraphicBufferProducer interfaces and
    implements a one-to-many broadcast of GraphicBuffers (while managing
    fences correctly).
    
    Change-Id: I38ecdf3e311ac521bc781c30dde0cc382a4376a3
    Adding render stats APIs to UiAutomation (framework native).
    
    bug:12927198
    
    Change-Id: Ibb1c07f7d89e11281e5c1f27f412a29ac6f9c4ab
    get rid of ISurface
    
    ISurface was only used to get the IGraphicBufferProducer from
    a Layer. It's now replaced by a BBinder subclass / IBinder and
    is only used as a handle to the surface, to both refer to it
    and manage its life-time.
    
    Also cleaned-up a bit the ISurfaceComposer interface and
    "create layer" code path.
    
    Change-Id: I68d0e02d57b862cffb31d5168c3bc10cea0906eb
    get rid of Surface identity and token
    
    we use the IBinder instead.
    
    Change-Id: I4aa0b58869ba43f19980013620051e5a261b062d
    Banish DisplayID from the SurfaceFlinger API.
    
    Use only display tokens in the API to refer to new displays.
    
    Don't require the caller to specify the display when creating
    a surface (since in general a surface could be shown on
    any display).
    
    This is intended to be a minimum change just to update the API.
    Note that SurfaceFlinger still uses DisplayID in a few places
    internally that might cause some features not to work properly
    when there are multiple displays (LayerScreenshot, for example).
    
    Change-Id: I3d91eec2da406eefd97bcd53655d403ad865a7e6
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    Get AID_GRAPHICS from right place
    
    Change-Id: I97b1754dc7260fec083275c71a8f71ebfb2cefa8
    Use the standard CC_LIKELY and CC_UNLIKELY macros
    
    Several source files privately defined macros LIKELY and UNLIKELY in terms
    of __builtin_expect. But <cutils/compiler.h> already has CC_LIKELY and
    CC_UNLIKELY which are intended for this purpose.  So rename the private
    uses to use the standard names.
    
    In addition, AudioFlinger was relying on the macro expanding to extra ( ).
    
    Change-Id: I2494e087a0c0cac0ac998335f5e9c8ad02955873
    clean-up. get rid ofunused code and members in Surface[Control].cpp
    
    Change-Id: Ia7790ae28af2c2ac99eae01c2c5044ace4a490a4
    SF transactions are now O(1) wrt IPC instead of O(N).
    
    Change-Id: I57669852cbf6aabae244ea86940a08a5a27ffc43
    unify SurfaceTexture and Surface
    
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    Add SurfaceTexture logging
    fix onFrameAvailable
    Get rid of the "pid" parameter from createSurface
    
    Change-Id: I28635e3f803e6abe965d79998e305f54a202465d
    merge libsurfaceflinger_client into libgui
    
    this is the first step in unifying surfacetexture and surface.
    for this reason the header files were not moved, as most of them
    will eventually go away.
    
    NOTE: currently we keep libsurfaceflinger_client.so as an empty
    library to workaround prebuilt binaries wrongly linking against
    it.
    
    Change-Id: I130f0de2428e8579033dc41394d093f4e1431a00
    allow root to call into surfaceflinger
    
    this is useful for running standalone tests
    with standalone SurfaceFlinger.
    
    Change-Id: I08d054f6214affa3a777a82765f4e0bd256ba26d
    split surface management from surface's buffers management
    
    Change-Id: If3c5655d1231f8f0c49ba68f972b1b20c93b3f87
    more clean-up in preparation of bigger changes
    
    the most important change here is the renaming of
    ISurfaceFlingerClient to ISurfaceComposerClient
    
    Change-Id: I94e18b0417f50e06f21377446639c61f65f959b3
    Added a name to Surface created by SurfaceFlinger
    
    Updated the window manager to use this new facility.
    Surfaces name are now printed by "dumpsys".
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    fix a bug that caused the PixelFormat viewed by Surface to be wrong.
    
    what happened is that the efective pixel format is calculated by SF but Surface nevew had access to it directly.
    in particular this caused query(FORMAT) to return the requested format instead of the effective format.
    donut snapshot
    get rid of references to MemoryDealer in SurfaceFlinger
    some work to try to reduce the code size of some native libraries
    
    - make sure that all binder Bn classes define a ctor and dtor in their respective library.
      This avoids duplication of the ctor/dtor in libraries where these objects are instantiated.
      This is also cleaner, should we want these ctor/dtor to do something one day.
    
    - same change as above for some Bp classes and various other non-binder classes
    
    - moved the definition of CHECK_INTERFACE() in IInterface.h instead of having it everywhere.
    
    - improved the CHECK_INTERFACE() macro so it calls a single method in Parcel, instead of inlining its code everywhere
    
    - IBinder::getInterfaceDescriptor() now returns a "const String16&" instead of String16, which saves calls to String16 and ~String16
    
    - implemented a cache for BpBinder::getInterfaceDescriptor(), since this does an IPC. HOWEVER, this method never seems to be called.
      The cache makes BpBinder bigger, so we need to figure out if we need this method at all.
    split boot animation out of SurfaceFlinger
    
    Conflicts:
    
            data/etc/platform.xml
    move libbinder's header files under includes/binder
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    improve [un]marshalling of non-binder objects
    
    this change introduces a new class LightFlattenable<> which is
    a protocol to flatten simple objects that don't require
    binders or file descriptors; the benefit of this protocol is that
    it doesn't require the objects to have a virtual table and give us
    a consitant way of doing this.
    
    we also introduce an implementation of this protocol for
    POD structures, LightFlattenablePod<>.
    
    Parcel has been update to handle this protocol automatically.
    
    Sensor, Rect, Point and Region now use this new protocol.
    
    Change-Id: Icb3ce7fa1d785249eb666f39c2129f2fc143ea4a
    new SensorService
    
    remove old sensor service and implement SensorManager
    on top of the new (native) SensorManger API.
    
    Change-Id: Iddb77d498755da3e11646473a44d651f12f40281
    first step at implementing the native sensor support
    
    in this commit:
    - implemented the C stub
    - implemented the binder interfaces involved
    - implemented most of the C++ client side
    
    missing:
    - SensorManager cannot connect to the SensorServer yet
    (because there is no SensorServer yet)
    
    Change-Id: I75010cbeef31c98d6fa62fd5d388dcef87c2636b
    don't use compile-time configuration of libgui as much as possible
    
    We now detect at runtime which sync features to use, which
    allows us to remove a lot of the compile-time configuration
    options. There  is still one option though, to disable
    KHR_fence_sync on some devices (which are more efficient
    without it).
    
    - added a backdoor to get the vendor's EGL strings
    
    the new logic is:
    - use always ANDROID_native_fence_sync if available
    - fallback to KHR_fence_sync if available and not disabled
      by the compile-time option
    - use KHR_wait_sync if available and either of the above is
      enabled
    
    Change-Id: I9c4b49d9ff1151faf902cc93bd53ea5f205aaabf
    libgui: fix up compile options
    
    This change adds debug info to SurfaceFlinger's dumpsys to indicate that the
    USE_WAIT_SYNC compile option was enabled, and it removes the
    ALLOW_DEQUEUE_CURRENT_BUFFER option.
    
    Bug: 7238122
    Change-Id: I70e08e34c2ef58aa6d2f88229e781a119f84b5a9
    Show build config in dumpsys SurfaceFlinger
    
    This adds a line to the "dumpsys SurfaceFlinger" output that shows
    build-time configuration values.
    
    Example:
     Build configuration: [sf HAS_CONTEXT_PRIORITY] [libui] \
      [libgui USE_FENCE_SYNC]
    
    Bug 7206633
    
    Change-Id: Ibe1856b459d34a4be6ee83a4ebfd2807e6cc68a0
    Refactored DummyConsumer
    
    DummyConsumer no longer uses a ProxyConsumerListener
    
    Change-Id: I0a99428b3f9dae82cb47d5da3589de77653f3d7c
    Added a DummyConsumer for use with BufferQueue.
    
    The DummyConsumer is a consumer that can connect to BufferQueue
    that does nothing.  It is required as BufferQueue checks
    if a consumer is connected.  Also fixes a bug where SurfaceTexture
    was reusing old texture slots.
    
    Bug: 6172739
    Change-Id: I5e7a118dd4d07807ba4c763200242b5ee7d3412b
    libgui: add some error checks
    
    This change adds a few error checks both in the framework and in some tests.
    
    Change-Id: I2baf2676942a0dc15866e75852a775a0091ed16d
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    return an error code with gralloc buffer allocation failures
    
    Change-Id: I471e5d37ea7a42fc8a0f93446ee3b4229da37807
    Fix a GraphicBuffer leak in SurfaceTexture
    
    This leak was intentional, it was there to deal with the fact that
    some gralloc implementations don't track buffer handles with
    file-descriptors so buffers needed to stay alive until there were
    registered, which is not guaranteed by binder transactions.
    
    In this new implementation, we use a small BBinder holding a
    reference to the buffer, which with tuck into the parcel. This forces
    the reference to stay alive until the parcel is destroyed, which
    is guaranteed (by construction) to happen after the buffer is
    registered.
    
    this allows the public facing API to not expose the previous hack.
    
    Change-Id: I1dd6cd83679a2b7457ad628169e2851acc027143
    merge libsurfaceflinger_client into libgui
    
    this is the first step in unifying surfacetexture and surface.
    for this reason the header files were not moved, as most of them
    will eventually go away.
    
    NOTE: currently we keep libsurfaceflinger_client.so as an empty
    library to workaround prebuilt binaries wrongly linking against
    it.
    
    Change-Id: I130f0de2428e8579033dc41394d093f4e1431a00
    Fix remote GraphicBuffer allocation in SurfaceFlinger.
    
    This change fixes a horrible hack that I did to allow application
    processes to create GraphicBuffer objects by making a binder call to
    SurfaceFlinger.  This change introduces a new binder interface
    specifically for doing this, and does it in such a way that
    SurfaceFlinger will maintain a reference to the buffers until the app is
    done with them.
    
    Change-Id: Icb240397c6c206d7f69124c1497a829f051cb49b
    SensorService performance improvements.
    
      i) Send ack for wake_up sensors on the socket connection instead of using Binder RPC.
      ii) Cache events per connection in case there are write failures. Compute cache size
          from FIFO counts of sensors.
     iii) Send FlushCompleteEvent only for apps that explicitly called flush().
    
    Change-Id: I018969736b7794b1b930529586f2294a03ee8667
    Enable wakeup sensors.
    
    SensorService should hold a wakelock till the app reads events from a wakeup sensor. Currently drivers hold a wakelock with a
    timeout while delivering events from a wake up sensor like Significant Motion. This hack can be removed now.
    
    Bug: 9774884
    Change-Id: If3b5acb99c9cf0cd29012fcfa9d6b04c74133d01
    Change API from flush(handle) to flush(). Call flush on all active sensors in the given SensorEventConnection.
    
    Change-Id: I4ef2bec80406c517903ab9782dc9eaf3fa8b7f36
    Change API from flush(handle) to flush(). Call flush on all active sensors in the given SensorEventConnection.
    
    Change-Id: I4ef2bec80406c517903ab9782dc9eaf3fa8b7f36
    Sensor batching. Changes to the native code.
    
    Bug: 10109508
    Change-Id: I7333f3aac76125a8226a4c99c901fb904588df04
    Rename SensorChannel to BitTube
    new SensorService
    
    remove old sensor service and implement SensorManager
    on top of the new (native) SensorManger API.
    
    Change-Id: Iddb77d498755da3e11646473a44d651f12f40281
    first step at implementing the native sensor support
    
    in this commit:
    - implemented the C stub
    - implemented the binder interfaces involved
    - implemented most of the C++ client side
    
    missing:
    - SensorManager cannot connect to the SensorServer yet
    (because there is no SensorServer yet)
    
    Change-Id: I75010cbeef31c98d6fa62fd5d388dcef87c2636b
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    Binderize the consumer side of BufferQueue
    
    While currently untested, this should allow to move the
    BuffereQueue in the consumer process and have everything
    work as usual.
    
    Bug: 9265647
    
    Change-Id: I9ca8f099f7c65b9a27b7e7a3643b46d1b58eacfc
    Within CpuConsumer, use gralloc lockAsync/unlockAsync
    
    Change-Id: I6b2cd195e111c3c7bf94c8052af4db92e09649a5
    gui: CpuConsumer::lockNextBuffer change return code when too many bufs acquired
    
    - Return NOT_ENOUGH_DATA instead of INVALID_OPERATION when too many
      buffers have already been locked.
    - INVALID_OPERATION is nominally used when something irrecoverable happens,
      but in this case the client just needs to call unlockBuffer to go back into a
      good state.
    
    Bug: 10333400
    Change-Id: I3a034d77de85741429f832a90eedd670afa1dc94
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    always pass the BufferQueue explicitely to consumers
    
    Change-Id: I883b0a7b19d8e722f9ab714ba6f49e658b02ca86
    Pay attention to buffer timestamps
    
    When acquiring a buffer, SurfaceFlinger now computes the expected
    presentation time and passes it to the BufferQueue acquireBuffer()
    method.  If it's not yet time to display the buffer, acquireBuffer()
    returns PRESENT_LATER instead of a buffer.
    
    The current implementation of the expected-present-time computation
    uses approximations and guesswork.
    
    Bug 7900302
    
    Change-Id: If9345611c5983a11a811935aaf27d6388a5036f1
    CpuConsumer: Add set buffer size and format functions.
    
    Add setDefaultBufferSize() and setDefaultBufferFormat(). ImageReader JNI need
    them.
    
    Bug: 9254294
    Change-Id: I7d2464d43b0ca73fbb834ed22cecbfbb30eef60c
    BufferQueue: track buffer-queue by instance vs. by reference
    
    Instead of representing the buffer-queue as a vector of buffer
    indices, represent them as a vector of BufferItems (copies).
    This allows modifying the buffer slots independent of the queued
    buffers.
    
    As part of this change, BufferSlot properties that are only
    been relevant in the buffer-queue have been removed.
    
    Also, invalid scalingMode in queueBuffer now returns an error.
    
    ConsumerBase has also changed to allow reuse of the same
    buffer slots by different buffers.
    
    Change-Id: If2a698fa142b67c69ad41b8eaca6e127eb3ef75b
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Related-to-bug: 7093648
    make the warning timout of Fence::waitForever() implicit and longer
    
    - timeout is now 3 seconds instead of 1
    - simplifies the API a bit
    - allows us to change/tweak this timeout globaly
    
    Bug: 8988871
    
    Change-Id: I8d3c6ec43a372f602fb3f29856710339f86c0ec9
    Add support for HAL_PIXEL_FORMAT_YCbCr_420_888
    
    - Add fields to CpuConsumer::LockedBuffer for new information
    - New lock methods for GraphicBuffer and GraphicBufferMapper for
      the format
    
    Bug: 8734880
    Change-Id: If31f82c62d64b6942cf4cc6e5715585c03273f12
    CpuConsumer: Properly track acquired buffers
    
    CpuConsumer cannot simply assume a slot's buffer is the same buffer
    between acquire and release, and therefore it could be possible for
    the same slot to get used for a second acquired buffer, if there's a
    producer disconnect in between. This would cause a problem when the
    first buffer is released by the consumer.
    
    Instead, use an independent list of acquired buffers to properly track
    their state.
    
    Bug: 8291751
    Change-Id: I0241ad8704e53d47318c7179b13daed8181b1fab
    CpuConsumer: Add optional asynchronous mode
    
    Bug: 8290146
    Bug: 8291751
    
    Change-Id: I9c8ac4bff38b0411e987a204e540d018dba6d0b4
    CpuConsumer: Don't unlock buffers on producer disconnect
    
    Bug: 8291751
    
    Change-Id: I062a3d34b41183d07fb6b9109cdb6bf0c0c75672
    Add Fence::waitForever which logs a warning timeout, and use it
    
    Bug: 7217641
    Change-Id: If0c1a613ead307c4045a47824174bf40c72bc7d7
    libgui: move fence handling into ConsumerBase
    
    This change moves some common fence handling code into the base class for
    BufferQueue consumer classes.  It also makes the ConsumerBase class initialize
    a buffer slot's fence with the acquire fence every time a buffer is acquired.
    
    Change-Id: I0bd88bc269e919653b659bfb3ebfb04dd61692a0
    BufferQueue: use max acquired buffer count
    
    This change makes BufferQueue derive the min undequeued buffer count from a max
    acquired buffer count that is set by the consumer.  This value may be set at
    any time that a producer is not connected to the BufferQueue rather than at
    BufferQueue construction time.
    
    Change-Id: Icf9f1d91ec612a079968ba0a4621deffe48f4e22
    Add BufferItemConsumer, a simple BufferQueue consumer.
    
    BufferItemConsumer allows for acquiring BufferQueue's BufferItems,
    which contain all the data and metadata the BufferQueue has for a
    given graphics buffer.
    
    This consumer is useful when direct access to the native buffer_handles
    is needed by the client.
    
    Also includes a minor cleanup of CpuConsumer's use of 'virtual'.
    
    Bug: 6243944
    Change-Id: If7dc4192b15ac499555f1eda42a85140f2434795
    CpuConsumer: inherit from ConsumerBase
    
    Change-Id: I55178b1d673ffa0fbc6e63ef47642c64d4d03228
    Return fence from acquireBuffer
    
    Change-Id: Iab22054c1dc4fd84affab3cc5bbdcd5a1e689666
    Transfer HWC release fences to BufferQueue
    
    After a HWC set, each SurfaceFlinger Layer retrieves the release fence
    HWC returned and gives it to the layer's SurfaceTexture. The
    SurfaceTexture accumulates the fences into a merged fence until the
    next updateTexImage, then passes the merged fence to the BufferQueue
    in releaseBuffer.
    
    In a follow-on change, BufferQueue will return the fence along with
    the buffer slot in dequeueBuffer. For now, dequeueBuffer waits for the
    fence to signal before returning.
    
    The releaseFence default value for BufferQueue::releaseBuffer() is
    temporary to avoid transient build breaks with a multi-project
    checkin. It'll disappear in the next change.
    
    Change-Id: Iaa9a0d5775235585d9cbf453d3a64623d08013d9
    Add a BufferQueue CPU consumer.
    
    Aimed for use cases where gralloc buffers need to be consumed by CPU
    users, such as camera image data streams.
    
    The CpuConsumer is a synchronous queue, which exposes raw pointers to
    the underlying graphics buffers to applications. Multiple buffers may
    be acquired at once, up to the limit set at time of construction.
    
    Change-Id: If1d99f12471438e95a69696e40685948778055fd
    BufferItemConsumer: Use IGBC instead of BQ
    
    Change-Id: Id1756ac62954ba412f2c23c5fa6e5d760c299347
    gui: Remove BufferQueue::MIN_UNDEQUEUED_BUFFERS
    
    Change-Id: I7c0cc36046dbbdb9c0e85acfe5027293d1131275
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    always pass the BufferQueue explicitely to consumers
    
    Change-Id: I883b0a7b19d8e722f9ab714ba6f49e658b02ca86
    Pay attention to buffer timestamps
    
    When acquiring a buffer, SurfaceFlinger now computes the expected
    presentation time and passes it to the BufferQueue acquireBuffer()
    method.  If it's not yet time to display the buffer, acquireBuffer()
    returns PRESENT_LATER instead of a buffer.
    
    The current implementation of the expected-present-time computation
    uses approximations and guesswork.
    
    Bug 7900302
    
    Change-Id: If9345611c5983a11a811935aaf27d6388a5036f1
    BufferQueue: track buffer-queue by instance vs. by reference
    
    Instead of representing the buffer-queue as a vector of buffer
    indices, represent them as a vector of BufferItems (copies).
    This allows modifying the buffer slots independent of the queued
    buffers.
    
    As part of this change, BufferSlot properties that are only
    been relevant in the buffer-queue have been removed.
    
    Also, invalid scalingMode in queueBuffer now returns an error.
    
    ConsumerBase has also changed to allow reuse of the same
    buffer slots by different buffers.
    
    Change-Id: If2a698fa142b67c69ad41b8eaca6e127eb3ef75b
    Signed-off-by: Lajos Molnar <lajos@google.com>
    Related-to-bug: 7093648
    make the warning timout of Fence::waitForever() implicit and longer
    
    - timeout is now 3 seconds instead of 1
    - simplifies the API a bit
    - allows us to change/tweak this timeout globaly
    
    Bug: 8988871
    
    Change-Id: I8d3c6ec43a372f602fb3f29856710339f86c0ec9
    BufferItemConsumer: add functions to set default buffer format/size
    
    Bug: 8629088
    Change-Id: I06f2e26a70d6dbcfcd70b08b4461e8e401f6e83f
    libgui: disallow NULL Fence pointers
    
    This change eliminates the uses of a NULL sp<Fence> indicating that no waiting
    is required.  Instead we use a non-NULL but invalid Fence object for which the
    wait methods will return immediately.
    
    Bug: 7892871
    Change-Id: I5360aebe3090422ef6920d56c99fc4eedc642e48
    Fix race condition in ConsumerBase::addReleaseFence()
    
    This needs the ConsumerBase mutex locked, but wasn't locking it. Two
    of the four places that called it already held the lock so were fine.
    Now addReleaseFence() takes the lock itself, and I added
    addReleaseFenceLocked() for the two already-locked callers, since in
    one of them dropping the lock would be inconvenient.
    
    Bug: 7289269
    Change-Id: I7a5628adb516f8eec782aa6c14128202f96d7b0a
    Add Fence::waitForever which logs a warning timeout, and use it
    
    Bug: 7217641
    Change-Id: If0c1a613ead307c4045a47824174bf40c72bc7d7
    libgui: move fence handling into ConsumerBase
    
    This change moves some common fence handling code into the base class for
    BufferQueue consumer classes.  It also makes the ConsumerBase class initialize
    a buffer slot's fence with the acquire fence every time a buffer is acquired.
    
    Change-Id: I0bd88bc269e919653b659bfb3ebfb04dd61692a0
    BufferQueue: use max acquired buffer count
    
    This change makes BufferQueue derive the min undequeued buffer count from a max
    acquired buffer count that is set by the consumer.  This value may be set at
    any time that a producer is not connected to the BufferQueue rather than at
    BufferQueue construction time.
    
    Change-Id: Icf9f1d91ec612a079968ba0a4621deffe48f4e22
    Add BufferItemConsumer, a simple BufferQueue consumer.
    
    BufferItemConsumer allows for acquiring BufferQueue's BufferItems,
    which contain all the data and metadata the BufferQueue has for a
    given graphics buffer.
    
    This consumer is useful when direct access to the native buffer_handles
    is needed by the client.
    
    Also includes a minor cleanup of CpuConsumer's use of 'virtual'.
    
    Bug: 6243944
    Change-Id: If7dc4192b15ac499555f1eda42a85140f2434795
    Allow for resizing of Virtual Displays.
    
    Modify SurfaceFlinger to use VirtualDisplaySurface in all cases when a virtual
    display is used. Add functionality in VirtualDisplaySurface to resize the
    buffers aquired in the QueueBufferOutput. Add transaction support in
    SurfaceFlinger for resize. Add the modification of the size in DisplayDevice.
    
    Change-Id: Iae7e3556dc06fd18d470adbbd76f7255f6e6dd6b
    Tested: None
    get rid of Surface identity and token
    
    we use the IBinder instead.
    
    Change-Id: I4aa0b58869ba43f19980013620051e5a261b062d
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    improve [un]marshalling of non-binder objects
    
    this change introduces a new class LightFlattenable<> which is
    a protocol to flatten simple objects that don't require
    binders or file descriptors; the benefit of this protocol is that
    it doesn't require the objects to have a virtual table and give us
    a consitant way of doing this.
    
    we also introduce an implementation of this protocol for
    POD structures, LightFlattenablePod<>.
    
    Parcel has been update to handle this protocol automatically.
    
    Sensor, Rect, Point and Region now use this new protocol.
    
    Change-Id: Icb3ce7fa1d785249eb666f39c2129f2fc143ea4a
    make multi-display more real
    
    - displays are represented by a binder on the client side
    - c++ clients can now create and modify displays
    
    Change-Id: I203ea5b4beae0819d742ec5171c27568f4e8354b
    update SF binder protocol to support setting display attributes
    
    no change of functionality -- the old behavior is implemented
    on top of this new protocol.
    this new protocol will allow, eventually, to pass informations
    about displays and layer stacks.
    
    Change-Id: Ic6c2295e61ec8ecbc8ce01ab7664e35d928202fc
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    SF transactions are now O(1) wrt IPC instead of O(N).
    
    Change-Id: I57669852cbf6aabae244ea86940a08a5a27ffc43
    merge libsurfaceflinger_client into libgui
    
    this is the first step in unifying surfacetexture and surface.
    for this reason the header files were not moved, as most of them
    will eventually go away.
    
    NOTE: currently we keep libsurfaceflinger_client.so as an empty
    library to workaround prebuilt binaries wrongly linking against
    it.
    
    Change-Id: I130f0de2428e8579033dc41394d093f4e1431a00
    Remove a dependency of Region (libui) on Parcel (libbinder).
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    move libbinder's header files under includes/binder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    don't use compile-time configuration of libgui as much as possible
    
    We now detect at runtime which sync features to use, which
    allows us to remove a lot of the compile-time configuration
    options. There  is still one option though, to disable
    KHR_fence_sync on some devices (which are more efficient
    without it).
    
    - added a backdoor to get the vendor's EGL strings
    
    the new logic is:
    - use always ANDROID_native_fence_sync if available
    - fallback to KHR_fence_sync if available and not disabled
      by the compile-time option
    - use KHR_wait_sync if available and either of the above is
      enabled
    
    Change-Id: I9c4b49d9ff1151faf902cc93bd53ea5f205aaabf
    BufferQueue: Add producer buffer-released callback
    
    Add a callback to the producer side, onBufferReleased, which will be
    called every time the consumer releases a buffer back to the
    BufferQueue. This will enable a buffer stream splitter to work
    autonomously without having to block on dequeueBuffer.
    
    The binder object used for the callback replaces the generic IBinder
    token that was passed into IGraphicBufferProducer::connect to detect
    the death of the producer. If a producer does not wish to listen for
    buffer release events, it can pass in an instance of the
    DummyProducerListener class defined in IProducerListener.h, if it even
    cares about death events (BufferQueue doesn't enforce the token being
    non-NULL, though perhaps we should).
    
    Change-Id: I23935760673524abeafea2b58dccc3583b368710
    libgui: Remove unnecessary casts in SurfaceControl
    
    There are a number of places where we create a local
    sp<SurfaceComposerClient>& to something that is already an
    sp<SurfaceComposerClient>, which is redundant. This fixes that
    by removing the local references.
    
    Bug: 13814149
    Change-Id: Ic558cbda651c344e5cac97022c97563928eed29c
    Adding render stats APIs to UiAutomation (framework native).
    
    bug:12927198
    
    Change-Id: Ibb1c07f7d89e11281e5c1f27f412a29ac6f9c4ab
    Remove unnecessary include.
    
    All these files are including utils/CallStack.h, but none of the code
    uses any CallStack objects.
    
    Change-Id: I38c3a346a3bd0ddbff368d0f7f8b3f3d78fc0432
    Stop using default value for Surface producerControlledByApp parameter
    
    Bug: 10785749
    Change-Id: Ifbf9340e5eabe621a69e990ec3e05ac51f8db66a
    Revert "Revert "Change SurfaceControl setPosition to take floats""
    
    This reverts commit bbb57f3331c7182399ed82e9c4f93a965677dde3
    
    Change-Id: Ib8f039f530d6b8175b5205c6c0008b135d4001a2
    get rid of ISurface
    
    ISurface was only used to get the IGraphicBufferProducer from
    a Layer. It's now replaced by a BBinder subclass / IBinder and
    is only used as a handle to the surface, to both refer to it
    and manage its life-time.
    
    Also cleaned-up a bit the ISurfaceComposer interface and
    "create layer" code path.
    
    Change-Id: I68d0e02d57b862cffb31d5168c3bc10cea0906eb
    Revert "Change SurfaceControl setPosition to take floats"
    
    Temporary, to fix weekend build, until we get Nvidia code drop.
    
    This reverts commit 9a867a8798fa6ea21f6341db31e38ea64fde6c83
    
    DO NOT MERGE
    
    Change-Id: I7b5dbc4db46ef3d97dc8598057d5487d6971178b
    Revert "Change SurfaceControl setPosition to take floats"
    
    Temporary, to fix weekend build, until we get Nvidia code drop.
    
    This reverts commit 9a867a8798fa6ea21f6341db31e38ea64fde6c83
    
    DO NOT MERGE
    
    Change-Id: I7b5dbc4db46ef3d97dc8598057d5487d6971178b
    Revert "Change SurfaceControl setPosition to take floats"
    
    Temporary, to fix weekend build, until we get Nvidia code drop.
    
    This reverts commit 9a867a8798fa6ea21f6341db31e38ea64fde6c83
    
    Change-Id: I7b5dbc4db46ef3d97dc8598057d5487d6971178b
    Change SurfaceControl setPosition to take floats
    
    Bug: 8153162
    Change-Id: If3c4b7a3e124ace25999eb9a569dc9a806a1fbc2
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: Ibed34175ae273608393aaa5f0a7df207dc40d709
    Fix sockfd leakage in SensorService.
    
    i) Call removeFd() only if the fd in the BitTube has been
    previously added to the Looper. Use a flag to determine whether the fd
    has been previously added or not.
    ii) Increment mPendingFlushEventsToSend after holding a connectionLock.
    iii) Store the number of acks that are pending in SensorEventQueue
     and send them all at once.
    
    Bug: 17472228
    Change-Id: I1ec834fea1112a9cfbd9cddd2198438793698502
    SensorService performance improvements.
    
      i) Send ack for wake_up sensors on the socket connection instead of using Binder RPC.
      ii) Cache events per connection in case there are write failures. Compute cache size
          from FIFO counts of sensors.
     iii) Send FlushCompleteEvent only for apps that explicitly called flush().
    
    Change-Id: I018969736b7794b1b930529586f2294a03ee8667
    Enable wakeup sensors.
    
    SensorService should hold a wakelock till the app reads events from a wakeup sensor. Currently drivers hold a wakelock with a
    timeout while delivering events from a wake up sensor like Significant Motion. This hack can be removed now.
    
    Bug: 9774884
    Change-Id: If3b5acb99c9cf0cd29012fcfa9d6b04c74133d01
    Change API from flush(handle) to flush(). Call flush on all active sensors in the given SensorEventConnection.
    
    Change-Id: I4ef2bec80406c517903ab9782dc9eaf3fa8b7f36
    Change API from flush(handle) to flush(). Call flush on all active sensors in the given SensorEventConnection.
    
    Change-Id: I4ef2bec80406c517903ab9782dc9eaf3fa8b7f36
    fix a few problems with BitTube
    
    BitTube used to send objects one at a time and didn't
    handle errors properly.
    
    We now send all the objects in one call, which means they
    have to be read as a single batch as well. This changes the
    BitTube API.
    
    Update SensorService to the new API.
    
    Also added an API to set the size of the send buffer.
    
    Bug: 10641596
    Change-Id: I77c70d35e351fdba0416fae4b7ca3b1d56272251
    Sensor batching. Changes to the native code.
    
    Bug: 10109508
    Change-Id: I7333f3aac76125a8226a4c99c901fb904588df04
    return errors properly in BitTube and SensorEventQueue
    
    Change-Id: Idf31179f9fcc666e287c7b01b2007431cb60127d
    use a socketpair instead of a pipe in BitTube
    
    Bug: 6252830
    Change-Id: Ia7a7b08409517214136261c05569dc5959a597ab
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename SensorChannel to BitTube
    Fix typo which causes sensors to fail miserably
    
    Change-Id: Ieca18fc089e2bdf7d049f213836971b54d11cd76
    part of fix for [3004226] Cannot end the call - Proximity sensor doesn't work
    
    - In SensorEventQueue, only bail on errors from Looper::loopOnce
    - Improve sensor error logging
    
    Change-Id: Ib3cf8d5d9fdac8513a3d753155827e0feeda1662
    Replace epoll() with poll() and rename PollLoop to Looper.
    
    As part of this change, consolidated and cleaned up the Looper API so
    that there are fewer distinctions between the NDK and non-NDK declarations
    (no need for two callback types, etc.).
    
    Removed the dependence on specific constants from sys/poll.h such as
    POLLIN.  Instead looper.h defines events like LOOPER_EVENT_INPUT for
    the events that it supports.  That should help make any future
    under-the-hood implementation changes easier.
    
    Fixed a couple of compiler warnings along the way.
    
    Change-Id: I449a7ec780bf061bdd325452f823673e2b39b6ae
    Modify native ALooper to take an explicit ident.
    
    The ALooper API now uses an explicit "identifier" for the integer
    that is returned rather than implicitly using the fd.  This allows
    the APIs that had the fd to be a little more sane.
    
    Change-Id: I8507f535ad484c0bdc4a1bd016d87bb09acd7ff0
    Added SensorManager.getMinDelay()
    
    Exposed the new "min delay" sensor property through native and
    java sensor apis. This allows the caller to know what is the
    maximum rate at which a sensor can return events, or, if a sensor
    works in "update" mode (events returned only when the value changes).
    
    Also augmented SensorManager.regusterSensorEvent() so that it can
    accept a value in microsecond in addition to the 4 constants already
    defined.
    
    Change-Id: If425e9979892666df8c989d7de3c362230fa19e0
    propagate sensor event rate properly
    
    Change-Id: I32e67d30e4295285a6827956cc8161b2025d70bc
    new SensorService
    
    remove old sensor service and implement SensorManager
    on top of the new (native) SensorManger API.
    
    Change-Id: Iddb77d498755da3e11646473a44d651f12f40281
    first step at implementing the native sensor support
    
    in this commit:
    - implemented the C stub
    - implemented the binder interfaces involved
    - implemented most of the C++ client side
    
    missing:
    - SensorManager cannot connect to the SensorServer yet
    (because there is no SensorServer yet)
    
    Change-Id: I75010cbeef31c98d6fa62fd5d388dcef87c2636b
    Surface: cancel the dequeued buffer when requestBuffer fails
    
    Partial fix for bug: 17477219
    Change-Id: Ibf5a9e26e02c4be8854925a77a70f5c9c7dcf6f2
    Surface: cancel the dequeued buffer when requestBuffer fails
    
    Partial fix for bug: 17477219
    Change-Id: Ibf5a9e26e02c4be8854925a77a70f5c9c7dcf6f2
    Tunneled Video Playback support
    
     Added native_window_set_sideband_stream() method to Surface.[h|cpp]
     Added ConfigureVideoTunnelModeParams OMX configuration structure to
     HardwareAPI.h
    
    Bug: 16132368
    Change-Id: I28fa1b9dbe858d93e353e0991098cad45c626bd9
    Add sticky transform to surfaceflinger.
    
    Bug: 15116722
    
    - Adds a sticky transform field that can be set from a
      SurfaceFlinger client Surface.  This transform is
      added to any transform applied to the Surface.
    
    Change-Id: Idaa4311dfd027b2d2b8ea5e2c6cba2da5779d753
    BufferQueue: Add allocateBuffers method
    
    This adds an allocateBuffers method to BufferQueue, which instructs
    it to allocate up to the maximum number of buffers allowed by the
    current configuration. The goal is that this method can be called
    ahead of render time, which will prevent dequeueBuffers from blocking
    in allocation and inducing jank.
    
    This interface is also plumbed up to the native Surface (and, in
    another change, up to the Java Surface and ThreadedRenderer).
    
    Bug: 11792166
    Change-Id: I4aa96b4351ea1c95ed5db228ca3ef98303229c74
    Use asynchronous lock/unlock API
    
    The gralloc API now provides a way for using lock/unlock with the Android
    explicit synchronisation concept. This changes updates the GraphicBuffer class
    to also expose this functionality, and updates the Surface class to make use of
    in line with the dequeueBuffer/queueBuffer mechanism.
    
    This new behaviour is dependent on GRALLOC_MODULE_API_VERSION_0_3. If the local
    gralloc module does not support this then the existing synchronous lock/unlock
    mechanism will be used.
    
    Change-Id: I8c3fd9592e0c5400ac9be84450f55a77cc0bbdc5
    Revert "Use asynchronous lock/unlock API"
    
    This reverts commit 378ef07760eda717367d9429428c42d54d54d9a7.
    
    Change-Id: I1de5ab973b5383633e75924fe90ac3ca8216c36a
    Use asynchronous lock/unlock API
    
    The gralloc API now provides a way for using lock/unlock with the Android
    explicit synchronisation concept. This changes updates the GraphicBuffer class
    to also expose this functionality, and updates the Surface class to make use of
    in line with the dequeueBuffer/queueBuffer mechanism.
    
    This new behaviour is dependent on GRALLOC_MODULE_API_VERSION_0_3. If the local
    gralloc module does not support this then the existing synchronous lock/unlock
    mechanism will be used.
    
    Change-Id: I77daa1beb197b63b1c2f281b8414ac4ae4b5b03c
    BufferQueue: Add producer buffer-released callback
    
    Add a callback to the producer side, onBufferReleased, which will be
    called every time the consumer releases a buffer back to the
    BufferQueue. This will enable a buffer stream splitter to work
    autonomously without having to block on dequeueBuffer.
    
    The binder object used for the callback replaces the generic IBinder
    token that was passed into IGraphicBufferProducer::connect to detect
    the death of the producer. If a producer does not wish to listen for
    buffer release events, it can pass in an instance of the
    DummyProducerListener class defined in IProducerListener.h, if it even
    cares about death events (BufferQueue doesn't enforce the token being
    non-NULL, though perhaps we should).
    
    Change-Id: I23935760673524abeafea2b58dccc3583b368710
    Fill in sideband stream caveat
    
    Change-Id: I20db8aea8f13acf31b42db08d90b338da8a5209c
    gui: Surface::dequeueBuffer no locker holds mutex while blocking in binder
    
    - This also fixes a hang in the camera service when trying to shut down
      if the producer is infinitely blocked while trying to get a new buffer.
    
    Bug: 13250382
    Change-Id: I32ca82162bb8645b97dbe084e13e05ca05529a42
    gui: Update header docs for IGraphicBufferConsumer/Producer/BufferQueue
    
    Also fix compiler warnings for libgui
    
    Change-Id: I0ee38d9ad5eaa82d55bf812d291da8c433581cef
    Make sure do disconnect from a BQ when its client dies.
    
    Bug: 5679534
    
    Change-Id: If447e8673df83fe0b1d6210641e0a48522501a53
    Surface: Fix controlledByApp parameter
    
    Bug: 10425641
    Change-Id: I1a47e2ce4ecbdb8e67030a5d9ddf6604c5e2497d
    Re-enable frame dropping for non-auto timestamps
    
    This change adds an entire field to note whether the timestamp was
    auto-generated by Surface or supplied by the application.
    
    The value is used when deciding whether or not to drop frames based
    on buffer presentation timestamps.  If a desired presentation time
    was set explicitly, BufferQueue will use that value to decide if a
    frame should be dropped.  If the timestamp was generated by Surface
    at the time the buffer was queued, the timestamp is ignored.
    
    Bug 10151804
    
    Change-Id: Ibd571a7578351063b813cbdad2ddbeed70655ba5
    Roll back recent change
    
    Disable dropping of frames based on timestamp.  Resume auto-
    generating timestamps in Surface.
    
    Bug 10151804
    
    Change-Id: I15de26158e1d7ef22a5b150e685a126dc48ae2b4
    Drop frames based on presentation timestamp
    
    If there are two or more buffers pending that are ready for
    immediate presentation, drop all but the last one.
    
    Any code that didn't explicitly specify timestamps for buffers
    was using the default value (auto-generated "now").  As a result,
    surfaceflinger would drop frames whenever more than one buffer
    was queued.  We now use zero as the auto-generated timestamp,
    and we don't set the timestamp in eglBeginFrame().
    
    Change-Id: I187f42d33de227cd3411ff0dcd3b9ce1961457eb
    log an error when dequeueBuffer gets a NULL Fence
    
    Bug: 9858745
    Change-Id: If35d6a7d770bf0a42d55bc55880a9ddb721fcfd0
    Make ANW.setSwapInterval(0) work again
    
    we can now queue/dequeue a buffer in asynchrnous mode by using the
    async parameter to these calls. async mode is only specified
    with those calls (it is not modal anymore).
    
    as a consequence it can only be specified when the buffer count
    is not overidden, as error is returned otherwise.
    
    Change-Id: Ic63f4f96f671cb9d65c4cecbcc192615e09a8b6b
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    make the warning timout of Fence::waitForever() implicit and longer
    
    - timeout is now 3 seconds instead of 1
    - simplifies the API a bit
    - allows us to change/tweak this timeout globaly
    
    Bug: 8988871
    
    Change-Id: I8d3c6ec43a372f602fb3f29856710339f86c0ec9
    Fix argument types in IGraphicBufferProducer methods
    
    Bug: 8384764
    Change-Id: I7a3f1e1a0584a70af04f9eafef900505389d2202
    Surface can now be created only from an IGraphicBufferProducer
    
    it can't write itself to a parcel, nor can it be created from a
    parcel.
    
    Change-Id: I69165d5c54d6024b3e546e80d8b57e3dedda7893
    Fix reading NULL Surfaces from Parcels
    
    Writing a NULL Surface was being read as a non-NULL Surface with NULL
    mGraphicBufferProducer. Before the SurfaceTextureClient -> Surface
    refactoring, you'd get a NULL Surface, and some code relies on that.
    
    Bug: 8291161
    Change-Id: I477bfe8882693e53a5f604a3d2c9e3cfe24473b4
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: Ibed34175ae273608393aaa5f0a7df207dc40d709
    get rid of Surface identity and token
    
    we use the IBinder instead.
    
    Change-Id: I4aa0b58869ba43f19980013620051e5a261b062d
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    Remove unused "layer" argument from show().
    
    Change-Id: I8944a9f4a27c330b11e5e837c69b88c8f84145ba
    Banish DisplayID from the SurfaceFlinger API.
    
    Use only display tokens in the API to refer to new displays.
    
    Don't require the caller to specify the display when creating
    a surface (since in general a surface could be shown on
    any display).
    
    This is intended to be a minimum change just to update the API.
    Note that SurfaceFlinger still uses DisplayID in a few places
    internally that might cause some features not to work properly
    when there are multiple displays (LayerScreenshot, for example).
    
    Change-Id: I3d91eec2da406eefd97bcd53655d403ad865a7e6
    Remove freeze(), unfreeze() and setFreezeTint().
    
    This is all dead code.
    
    Change-Id: I646673aac793a6ec45021c370a2450f0ea4fbcce
    SurfaceFlinger: add a crop to the layer state
    
    This change adds a crop rectangle specified in window coordinates to the layer
    state.  The all window pixels outside this crop rectangle are treated as though
    they were fully transparent.  This change also adds the plumbing necessary for
    WindowManager to set that crop.
    
    Change-Id: I582bc445dc8c97d4c943d4db8d582a6ef5a66081
    remove dependency of EGL on ndk header
    
    Change-Id: Ia6e489b5b4f028864bdf54923e81f604710dd8ad
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Fix an issue where Surface::lock() would never update the output region
    
    this bug was introduced recently. in some situations Surface::lock()
    is not able to preserve the content of the back buffer and needs
    to tell the caller to redraw everything.
    
    Bug: 5186460
    Change-Id: I14e03939ddfc1b7ad2a8b99ad79435314c60e78e
    SurfaceTexture: fix queues-to-composer
    
    This change fixes the NATIVE_WINDOW_QUEUES_TO_WINDOW_COMPOSER query of
    Surface and SurfaceTextureClient.  Surface now uses the inherited
    SurfaceTextureClient implementation of this query.  SurfaceTextureClient
    now queries SurfaceFlinger to determine whether buffers that are queued
    to its ISurfaceTexture will be sent to SurfaceFlinger (as opposed to
    some other process).
    
    Change-Id: Iff187e72f30d454229f07f896b438198978270a8
    SurfaceTexture: fix queues-to-composer
    
    This change fixes the NATIVE_WINDOW_QUEUES_TO_WINDOW_COMPOSER query of
    Surface and SurfaceTextureClient.  Surface now uses the inherited
    SurfaceTextureClient implementation of this query.  SurfaceTextureClient
    now queries SurfaceFlinger to determine whether buffers that are queued
    to its ISurfaceTexture will be sent to SurfaceFlinger (as opposed to
    some other process).
    
    Change-Id: Iff187e72f30d454229f07f896b438198978270a8
    Read leftover parcel data when a parceled Surface is found in the cache.
    
    This fixes an issue where the Surface readFromParcel code was leaving
    unread parcel data in the case where the Surface was re-used from the
    sCachedSurfaces cache. On a cache miss the code is creating a new
    Surface from the remainder of the parcel data. On a hit that data was
    being left unread, so anything that parcels a Surface followed by
    additional arguments may end up reading the wrong values.
    
    Change-Id: I25365159d945c125bd1fcc9f17e39a4f00aece55
    Add support for creating a Surface from a a SurfaceTexture.
    
    The Surface is already using SurfaceTexture internally and it is parcelable. This
    is intended to replace and phase out ParcelSurfaceTexture in favor of creating a
    new Surface.java object from an existing SurfaceTexture.
    
    Change-Id: I8e2dd86614523da6abed6403e1d705a68fa19fdf
    clean-up. get rid ofunused code and members in Surface[Control].cpp
    
    Change-Id: Ia7790ae28af2c2ac99eae01c2c5044ace4a490a4
    move lock/unlock implementaion outside of Surface into SurfaceTextureClient
    
    This makes ANativeWindow_lock/ANativeWindow_unlockAndPost work
    with ANativeWindows implemented by Surface and SurfaceTextureClient.
    
    Also, Surface now inherits directly from SurfaceTextureClient.
    
    Bug: 5003724
    Change-Id: I9f285877c7bae9a262e9a7af91c2bae78804b2ef
    Add method to create a ParcelSurfaceTexture from android.view.Surface.
    
    Change-Id: I05e343ab7e327478f60322af9373574b70c148f5
    unify SurfaceTexture and Surface
    
    Add the concept of synchronous dequeueBuffer in SurfaceTexture
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    Add SurfaceTexture logging
    fix onFrameAvailable
    frameworks/base: android_native_buffer_t -> ANativeWindowBuffer
    
    Change-Id: Idc2eabaa805bb6d308ebb315872623f28d428417
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    frameworks/base: make the ANativeWindow query() method const
    
    query() does not modify the object's data, so it needs to be a const method
    
    Change-Id: I67c40a3c865461e6f1cc2193fd2d74286ff6ac8f
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    remove more unused references to ISurface
    
    Change-Id: I2201f1ca2bb8f203a081d94a0134f798778dfbef
    merge libsurfaceflinger_client into libgui
    
    this is the first step in unifying surfacetexture and surface.
    for this reason the header files were not moved, as most of them
    will eventually go away.
    
    NOTE: currently we keep libsurfaceflinger_client.so as an empty
    library to workaround prebuilt binaries wrongly linking against
    it.
    
    Change-Id: I130f0de2428e8579033dc41394d093f4e1431a00
    Add support for timestamps into SurfaceTexture.
    
    API addition: The timestamps are represented as nanoseconds from some
    arbitrary time point. Like the SurfaceTexture transform matrix, the
    timestamp retrieved by getTimestamp is for the last frame sent to the
    GL texture using updateTexImage().
    
    Camera HAL change: Expect vendors to set these timestamps using
    native_window_set_buffers_timestamp().  For now, they are
    autogenerated by SurfaceTextureClient if set_buffers_timestamp() is
    never called, but such timing is likely not accurate enough to pass a
    CTS test.
    
    bug:3300707
    
    Change-Id: Ife131a0c2a826ac27342e11b8a6c42ff49e1bea7
    ANativeWindow: add query for the concrete type.
    
    This change adds a query to the ANativeWindow interface for getting the
    concrete type of the ANativeWindow.
    
    Bug: 4086509
    Change-Id: I64aa86d72fbca3b52a98e1fc35608737781a3178
    ANativeWindow: add query for the concrete type.
    
    This change adds a query to the ANativeWindow interface for getting the
    concrete type of the ANativeWindow.
    
    Bug: 4086509
    Change-Id: I64aa86d72fbca3b52a98e1fc35608737781a3178
    ANativeWindow: add queues-to-window-composer check.
    
    This change adds a new 'method' to the ANativeWindow interface to check
    whether buffers queued to the window will be sent directly to the system
    window compositor.
    
    Change-Id: I4d4b199e328c110b68b250029aea650f03c8724d
    Bug: 3495535
    Add the MIN_UNDEQUEUED_BUFFERS query to ANW.
    
    This change adds a new query to ANativeWindow for getting the minimum
    number of buffers that must be left un-dequeued during the steady-state
    operation of the ANativeWindow.
    
    Change-Id: Ie8c461fc26b02ecde02ddb4f95bf763662cf1551
    Related-Bug: 3356050
    surfaceflinger_client: Don't dereference NULL ptrs.
    
    This change adds a null pointer check before dereferencing buffers in
    a Surface list of known GraphicBuffer objects.  If not all the buffers
    have been dequeued before this list can legitimately contain NULL
    entries.
    
    Change-Id: I0e105b53a3f6f9a5404716b7bf150c793ff648a6
    Reset ANativeWindow crop on buffer geometry changes.
    
    This changes the ANativeWindow API and the two implementations to reset
    the window's crop rectangle to be uncropped when the window's buffer
    geometry is changed.
    
    Bug: 3359604
    Change-Id: I64283dc8382ae687787ec0bebe6a5d5b4a0dcd6b
    minor clean-up. SurfaceFlinger doesn't need libpixelflinger.so. (DO NOT MERGE)
    
    Change-Id: I1ddbbbec4fa5b2521ef3787bc28efe1bc90d0060
    Fix error reporting in Surface::cancelBuffer()
    
    when we validate the surface there, most errors are in fact allowed
    because it is legal to cancel a buffer after a surface has been
    destroyed (for instance). in that case make sure to not log
    error messages as they are very confusing.
    
    Change-Id: Iecdfbaf6d9ee5da54d56cd7ea7a0d430c30934b0
    minor clean-up. SurfaceFlinger doesn't need libpixelflinger.so.
    
    Change-Id: I3bdca74351c8e480a05084bc412a96c5f685221d
    dump callstack on Surface use error
    
    Change-Id: I38e260dd47349b9af3a999dda683a083a94be16d
    Implement reducing the buffer count of a Surface.
    
    Change-Id: I7f979c60c06d654aa8265002836277434bc1a64f
    Bug: 3095167
    Fix a compile warning in the Surface class.
    
    Change-Id: Id744e71d2cd23c287925a5090e13a6d9908cdd99
    Updade Surface (ANativeWindow) format based on its buffers format
    
    this is to allow applications to change the format of a surface's
    buffer, and have it reflected in EGL; which is needed for
    EGLConfig validation.
    
    Change-Id: Iee074c30ad765881e2409c1d37450b05e561c44d
    Move binder magic from the Surface class to GraphicBuffer.
    
    - Register buffers with Gralloc when unflattening a GraphicBuffer (rather than
    doing it in the Surface class).
    - Add support for a GraphicBuffer that wraps an android_native_window_t*.
    
    Change-Id: I029ac086111bbac800e5ca37eb505f558b718cd8
    fix [2835280] Add support for cancelling buffers to ANativeWindow
    
    There is a new ANativeWindow::cancelBuffer() API that can be used to
    cancel any dequeued buffer, BEFORE it's been enqueued. The buffer is
    returned to the list of availlable buffers. dequeue and cancel are not
    mutually thread safe, they must be called from the same thread or
    external synchronization must be used.
    
    Change-Id: I86cc7985bace8b6a93ad2c75d2bef5c3c2cb4d61
    Add logging of various important graphics events
    
    There are 16 events logged in the event log:
    SF_APP_DEQUEUE_BEFORE
    SF_APP_DEQUEUE_AFTER
    SF_APP_LOCK_BEFORE
    SF_APP_LOCK_AFTER
    SF_APP_QUEUE
    
    SF_REPAINT
    SF_COMPOSITION_COMPLETE
    SF_UNLOCK_CLIENTS
    SF_SWAP_BUFFERS
    SF_REPAINT_DONE
    
    SF_FB_POST_BEFORE
    SF_FB_POST_AFTER
    SF_FB_DEQUEUE_BEFORE
    SF_FB_DEQUEUE_AFTER
    SF_FB_LOCK_BEFORE
    SF_FB_LOCK_AFTER
    
    all events log the buffer conserned and a timestamp in microseconds.
    
    by default the logging is not enabled, to turn it on:
    adb shell service call SurfaceFlinger 1006 i31 1
    adb shell setprop debug.graphic_log 1
    
    The effect is immediate in SurfaceFlinger, but applications need to be
    restarted.
    
    Change-Id: Ifc2e31f7aed072d9a7dede20ff2ce59231edbec1
    fix [2931513] Add support for setting the orientation of an ANativeWindow
    
    Also implement support for cropping.
    
    Change-Id: Iba5888dd242bf2feaac9e9ce26e404c1f404c280
    Change the framework to use the new camera preview path.
    
    This change makes the camera HAL interface take an ANativeWindow interface from
    which all the camera preview buffers will be allocated.  The framework code
    running in application processes now passes a Surface object rather than an
    ISurface to the camera server via Binder when setting the preview surface.  The
    camera server then forwards that Surface object (which implements the
    ANativeWindow interface) to the camera HAL, which uses it to communicate with
    SurfaceFlinger to allocate the camera preview buffers.
    
    Change-Id: Ie438f721559cd7de5e4f848a26d96360dda07b5f
    Remove some debug logging that I accidentally committed.
    
    Change-Id: Ib182455fad5e5b3f3f59b3ff24f59dcd7f638292
    Re-use existing Surface objects when reading them from parcels.
    
    This change adds a process-global cache of previously deserialized Surface
    objects so that if a Surface object wrapping the same ISurface gets received
    again the same Surface can be used.  This is important because the 'tail'
    pointer in the SharedBufferClient is stored only on the client side, and needs
    to be the same for all the Surface objects wrapping an ISurface instance.  This
    solves the problem by making there only be one Surface object wrapping an
    ISurface per process.
    
    Change-Id: I4bf0b8787885c56277622fca053022d2bb638902
    Introduce official public NativeWindow type.
    
    Not yet hooked up to anything in the NDK, but requires renaming
    the existing android_native_window_t type everywhere.
    
    Change-Id: Iffee6ea39c93b8b34e20fb69e4d2c7c837e5ea2e
    allow re-targetting of surfaces
    
    Surfaces can now be parcelized and sent to remote
    processes. When a surface crosses a process
    boundary, it looses its connection with the
    current process and gets attached to the new one.
    
    Change-Id: I39c7b055bcd3ea1162ef2718d3d4b866bf7c81c0
    optimize Surface.readFromParcel()
    
    this is called for each relayout() and used to create a full Surface (cpp)
    which in turn did some heavy work (including an IPC with surfaceflinger),
    most of the time to destroy it immediatelly when the returned surface
    (the one in the parcel) was the same.
    
    we now more intelligentely read from the parcel and construct the new
    object only if needed.
    
    Change-Id: Idfd40d9ac96ffc6d4ae5fd99bcc0773e131e2267
    split surface management from surface's buffers management
    
    Change-Id: If3c5655d1231f8f0c49ba68f972b1b20c93b3f87
    more clean-up in preparation of bigger changes
    
    the most important change here is the renaming of
    ISurfaceFlingerClient to ISurfaceComposerClient
    
    Change-Id: I94e18b0417f50e06f21377446639c61f65f959b3
    more clean-up of Surfaceflinger's client management
    
    SurfaceComposerClient now only exist on the WindowManager side,
    the client side uses the new SurfaceClient class, which only
    exposes what a client needs.
    
    also instead of keeping mappings from IBinder to SurfaceComposerClients
    we have a SurfaceClient per Surface (referring to the same IBinder), this
    is made possible by the fact that SurfaceClient is very light.
    
    Change-Id: I6a1f7015424f07871632a25ed6a502c55abfcfa6
    oopsie. forgot to displatch SET_BUFFERS_GEOMETRY
    fix [2712278] The preview buffer left some black borders in left and bottom edges
    
    we were incorrectly flagging push_buffer surfaces as invalid
    
    Change-Id: I4dfd4ffbbe8a71f7e23e835db8d71966416c29bb
    added the notion of fixed-size buffers
    
    the new native_window_set_buffers_geometry allows
    to specify a size and format for all buffers to be
    dequeued. the buffer will be scalled to the window's
    size.
    
    Change-Id: I2c378b85c88d29cdd827a5f319d5c704d79ba381
    added native_window_set_buffer_count()
    
    this method can be used to change the number of buffers
    associated to a native window. the default is two.
    
    Change-Id: I608b959e6b29d77f95edb23c31dc9b099a758f2f
    fix the threading issue for setBuffercount()
    
    this change introduces R/W locks in the right places.
    on the server-side, it guarantees that setBufferCount()
    is synchronized with "retire" and "resize".
    on the client-side, it guarantees that setBufferCount()
    is synchronized with "dequeue", "lockbuffer" and "queue"
    SharedBufferStack now can grow up to 16 buffers.
    
    there is a new resize() api, which currently only allows growing.
    
    Change-Id: Ia37b81b73be466d2491ffed7f3a23cd8e113c6fe
    cleanup. waitForCondition() now uses polymorphsim instead of templtes
    
    the reason for the above change is that waitForCondition() had become
    large over time, mainly to handle error cases, using inlines to
    evaluate the condition doesn't buys us much anymore while it increases
    code size.
    
    Change-Id: I2595d850832628954b900ab8bb1796c863447bc7
    better fix for [2420565] Surface.lockCanvas() updates the dirty region too often
    
    Change-Id: I83438b40effd21538f1c74396dc665254b9d5ab6
    added setCrop() to android_native_window_t
    
    hooked up the new method up to Surface.cpp
    the actual crop is not implemented in SF yet
    
    Change-Id: Ic6e313c98fd880f127a051a0ccc71808bd689751
    fix [2420565] Surface.lockCanvas() updates the dirty region too often
    
    There was a bug where we were we could be reallocating buffers for no reason.
    
    Change-Id: Ieb8a81a289da9339ab7faf987cd3a73428943c1a
    implement connect/disconnect in our native_window_t implementations
    
    the framebuffer implementation doesn't do anything special with this
    but the surfaceflinger implementation makes sure the surface is not used
    by two APIs simultaneously.
    
    Change-Id: Id4ca8ef7093d68846abc2ac814327cc40a64b66b
    split libsurfaceflinger_client and libcamera_client out of libui
    DO NOT MERGE
    return an error when Surface::lock() is called while the surface is already locked.
    return an error when Surface::lock() is called while the surface is already locked.
    android-2.1_r1 snapshot
    fix some aspects of [2258746] native crash in launcher2
    
    Surface::validate() could sometimes dereference a null pointer before checking it wasn't null.
    This will prevent the application to crash when given bad parameters or used incorrectly.
    However, the bug above probably has another cause.
    eclair snapshot
    fix [2170283] SurfaceFlinger crashes on OOM.
    
    when running out of memory, a null handle is returned but the error code may not be set.
    In that case we need to return NO_MEMORY instead of NO_ERROR, so that the calling code
    won't try to dereference the null pointer.
    fix [2152536] ANR in browser
    
    A window is created and the browser is about to render into it the
    very first time, at that point it does an IPC to SF to request a new
    buffer. Meanwhile, the window manager removes that window from the
    list and the shared memory block it uses is marked as invalid.
    However, at that point, another window is created and is given the
    same index (that just go freed), but a different identity and resets
    the "invalid" bit in the shared block. When we go back to the buffer
    allocation code, we're stuck because the surface we're allocating for
    is gone and we don't detect it's invalid because the invalid bit has
    been reset.
    
    It is not sufficient to check for the invalid bit, I should
    also check that identities match.
    fix [2167050] glTexImage2D code path buggy in SurfaceFlinger
    
    When EGLImage extension is not available, SurfaceFlinger will fallback to using
    glTexImage2D and glTexSubImage2D instead, which requires 50% more memory and an
    extra copy. However this code path has never been exercised and had some bugs
    which this patch fix.
    
    Mainly the scale factor wasn't computed right when falling back on glDrawElements.
    We also fallback to this mode of operation if a buffer doesn't have the adequate
    usage bits for EGLImage usage.
    
    This changes only code that is currently not executed. Some refactoring was needed to
    keep the change clean. This doesn't change anything functionaly.
    Attempt to fix [2152536] ANR in browser
    
    The ANR is caused by SurfaceFlinger waiting for buffers of a removed surface to become availlable.
    When it is removed from the current list, a Surface is marked as NO_INIT, which causes SF to return
    immediately in the above case. For some reason, the surface here wasn't marked as NO_INIT.
    
    This change makes the code more robust by always (irregadless or errors) setting the NO_INIT status
    in all code paths where a surface is removed from the list.
    
    Additionaly added more information in the logs, should this happen again.
    fix [2122448] android_native_window_t::setUsage() only reallocates the first buffer
    
    Take 2. We needed to check that the usage flags are "good enough" as opposed to "the same".
    
    This reverts commit 8f17a762fe9e9f31e4e86cb60ff2bfb6b10fdee6.
    Revert "fix [2122448] android_native_window_t::setUsage() only reallocates the first buffer"
    
    This reverts commit 486aa963b63e20b7910e1004cebb4f0afabbd80f.
    fix [2122448] android_native_window_t::setUsage() only reallocates the first buffer
    fix [2068105] implement queueBuffer/lockBuffer/dequeueBuffer properly
    
    Rewrote SurfaceFlinger's buffer management from the ground-up.
    The design now support an arbitrary number of buffers per surface, however the current implementation is limited to four. Currently only 2 buffers are used in practice.
    
    The main new feature is to be able to dequeue all buffers at once (very important when there are only two).
    
    A client can dequeue all buffers until there are none available, it can lock all buffers except the last one that is used for composition. The client will block then, until a new buffer is enqueued.
    
    The current implementation requires that buffers are locked in the same order they are dequeued and enqueued in the same order they are locked. Only one buffer can be locked at a time.
    
    eg. Allowed sequence:   DQ, DQ, LOCK, Q, LOCK, Q
    eg. Forbidden sequence: DQ, DQ, LOCK, LOCK, Q, Q
    fix [2070341] [FAST BLOCKER] can't successfully setup erc52
    fix a bug that caused the PixelFormat viewed by Surface to be wrong.
    
    what happened is that the efective pixel format is calculated by SF but Surface nevew had access to it directly.
    in particular this caused query(FORMAT) to return the requested format instead of the effective format.
    fix [2063336] Surface.lockSurface throws IllegalArgumentException when out of memory
    make sure to update a surface's usage bits when it changes, instead of only the first time.
    
    also fixed a few locking issues in Surface and commented how each member is protected.
    second take, hopefully this time it doesn't break one of the builds: "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    Revert "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    
    This reverts commit 8b76a0ac6fbf07254629ed1ea86af014d5abe050.
    SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything.
    
    This change makes SurfaceHolder.setType(GPU) obsolete (it's now ignored).
    Added an API to android_native_window_t to allow extending the functionality without ever breaking binary compatibility. This is used to implement the new set_usage() API. This API needs to be called by software renderers because the default is to use usage flags suitable for h/w.
    added NATIVE_WINDOW_FORMAT attribute to android_native_window_t
    don't crash when SurfaceBuffer::writeToParcel is given a null argument
    be more robust when errors occur upon EGL surface creation (ie: don't crash)
    fixed some issues with the software renderer when surfaces are made current.
    
    there was several issues:
    - when a surface was made non-current, the last frame wasn't shown and the buffer could stay locked
    - when a surface was made current the 2nd time, it would not dequeue a new buffer
    
    now, queue/dequeue are done when the surface is made current.
    
    for this to work, a new query() hook had to be added on android_native_window_t, it allows to retrieve some attributes of a window (currently only width and height).
    fix [1964315] crash in the surface.cpp while browsing
    fix typo defining a singleton attrbutes for an object that is not a singleton -- no side effects, but useless
    move libbinder's header files under includes/binder
    Region now has its own implementation instead of relying on SkRegion, which allows us to break libui's dependency on libcorecg.
    move opengl/include/EGL/android_natives.h to include/ui/egl/android_natives.h and don't include it from egl.h
    
    the android_native_ types are just forward declared in egl.h
    get rid of android_native_buffer_t::getHandle() and replace it with an handle field
    
    this abstraction was not necessary. things are easier now.
    removed the "bits" attribute from android_native_buffer_t.
    
    "bits" can never be trusted now that we need to call lock() on the handle to get the virtual address of the buffer.
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    Squashed commit of the following:
    
    commit e5c24638f98162c3b75b4c67a16b510d38e31341
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Apr 17 14:09:03 2009 -0700
    
        oops forgot this file.
    
    commit 282642632d0cb12882eecf42e0fdfb2343275de1
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Apr 17 14:07:32 2009 -0700
    
        use a helper macro for creating Singleton<>'s static attributes instances.
    cleanup, remove unused fields. Also make sure that we don't systematically allocate a Surface in Surface.java if only a SurfaceControl is needed (Common case).
    more splitting of Surface/SurfaceControl. Surface.java is now implemented in terms of Surface and SurfaceControl.
    
    The WindowManager side of Surface.java holds a SurfaceControl, while the client-side holds a Surface. When the client is in the system process, Surface.java holds both (which is a problem we'll try to fix later).
    split Surface.cpp into Surface and SurfaceControl
    
    SurfaceControl is used for controling the geometry of the surface (for the WM), while Surface is used to access the buffers (for SF's clients).
    SurfaceFlingerClient now uses the SurfaceID instead of Surface*.
    
    Currently Surface still has the SurfaceControl API and is implemented by calling into SurfaceControl.
    fix some issues with Surface's lifetime management.
    
    To deal with Java's lack of destructors and delayed garbage collection, we used to duplicate Surface.cpp objects in some case; this caused some issues because Surface is supposed to be reference-counted and unique.
    fix a rookie mistake causing Singleton<> to be a "multiton". Also improve the BufferMapper's debugging, but turn it off.
    
    Squashed commit of the following:
    
    commit 04e9cae7f806bd65f2cfe35c011b47a36773bbe5
    Author: Mathias Agopian <mathias@google.com>
    Date:   Wed Apr 15 18:30:30 2009 -0700
    
        fix and improve BufferMapper's tracking of mapped buffers.
    
    commit 1a8deaed15811092b2349cc3c40cafb5f722046c
    Author: Mathias Agopian <mathias@google.com>
    Date:   Wed Apr 15 00:52:02 2009 -0700
    
        fix some bugs with the Singleton<> class. untested.
    
    commit ed01cc06ad70cf640ce1258f01189cb1a96fd3a8
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Apr 14 19:29:25 2009 -0700
    
        some work to debug the Singleton<> template.
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    bufferqueue: workaround: allow NULL fence with queueBuffer (DO NOT MERGE)
    
    On one device there is a bug, not yet root-caused, that causes fence
    fds to not make it across binder from producer to consumer in the
    IGraphicBufferProducer::queueBuffer call. Rather than returning an
    error, which the producer typically treats as a fatal error, this
    change allows the buffer to be queued with no fence. This avoids an
    application crash at the risk of (likely single-frame) visible
    corruption.
    
    Bug: 17946343
    Change-Id: I9ca89f94098c455e1e90f5f58d5336c936b04a9c
    Revert "Modify EGL to disconnect the window when the surface gets destroyed."
    
    This reverts commit 843cbb241da60ada234918a30cfe9a01a1e04187.
    Revert "Modify EGL to disconnect the window when the surface gets destroyed."
    
    This reverts commit 843cbb241da60ada234918a30cfe9a01a1e04187.
    Modify EGL to disconnect the window when the surface gets destroyed.
    
    Bug: 14445579
    
    Change-Id: I1d263ff6cffcb6e448761fca7ca4b06466ad65aa
    BufferQueueProducer: fix which slot gets pre-allocated
    
    Commit 78014f32da6d0ebf52fb34ebb7663863000520a0 introduced a bug that
    made us pre-allocate buffers into the last available free slots instead
    of the first available ones. This in turn caused more re-allocations,
    and possibly triggered driver bugs.
    
    Change-Id: Ic4a70e676b4f2bbb054bc873be62ced26e3099a0
    BufferQueue: release mutex while allocating. DO NOT MERGE
    
    BufferQueueProducer::allocateBuffers used to keep the BufferQueueCore
    mutex while doing the buffer allocation, which would cause the consumer
    (which also needs the mutex) to block if the allocation takes a long
    time.
    Instead, release the mutex while doing the allocation, and grab it again
    before filling the slots. Keep a bool state and a condvar to prevent
    other producers from trying to allocate the slots while the mutex is
    released.
    
    Bug: 11792166
    
    Change-Id: I4ab1319995ef892be2beba892f1fdbf50ce0416d
    (cherry picked from commit ea96044470a29133321c681080870b9d31f81a19)
    Add sticky transform to surfaceflinger.
    
    Bug: 15116722
    
    - Adds a sticky transform field that can be set from a
      SurfaceFlinger client Surface.  This transform is
      added to any transform applied to the Surface.
    
    Change-Id: Idaa4311dfd027b2d2b8ea5e2c6cba2da5779d753
    BufferQueue: Add allocateBuffers method
    
    This adds an allocateBuffers method to BufferQueue, which instructs
    it to allocate up to the maximum number of buffers allowed by the
    current configuration. The goal is that this method can be called
    ahead of render time, which will prevent dequeueBuffers from blocking
    in allocation and inducing jank.
    
    This interface is also plumbed up to the native Surface (and, in
    another change, up to the Java Surface and ThreadedRenderer).
    
    Bug: 11792166
    Change-Id: I4aa96b4351ea1c95ed5db228ca3ef98303229c74
    libgui: 64 bit compile issues (part deux)
    
    - nsecs_t printed with PRId64
    - int64_t/uint64_t print issues
    - some size_t printing issues.
    - missing argument to BQ_LOGV
    
    Change-Id: I493f2b578e801dc38c44f8c536faa45266720402
    BufferQueue: Guard against unbounded queue growth
    
    Adds logic to dequeueBuffer that blocks if there are currently too
    many buffers in the queue. This prevents unbounded growth around
    times where the slots are cleared but the queue is not (e.g.,
    during rapid connect/disconnect or setBufferCount activity). This
    replaces the fix from ag/377958 in a more general way.
    
    Bug: 11293214
    Change-Id: Ieb7adfcd076ff7ffe3d4d369397b2c29cf5099c3
    BufferQueueProducer: add detachNextBuffer
    
    Adds a new method, IGBP::detachNextBuffer, that effectively does
    dequeue + request + detach in a single call, but does not need to
    know anything about the dequeued buffer, and will not block on
    dequeue. This is mostly for the upcoming StreamSplitter to use in
    its onBufferReleased callback.
    
    Change-Id: Ie88a69de109003acebaa486a5b44c8a455726550
    Fix sideband stream issues
    
    - Notify a listener when sideband stream is set
    - Mark a layer as visible when sideband stream is set, even though
    no buffer is queued.
    
    Change-Id: I9652bf530f2b5ce331533ec1bb3b10a815ca191c
    BufferQueue: Add producer buffer-released callback
    
    Add a callback to the producer side, onBufferReleased, which will be
    called every time the consumer releases a buffer back to the
    BufferQueue. This will enable a buffer stream splitter to work
    autonomously without having to block on dequeueBuffer.
    
    The binder object used for the callback replaces the generic IBinder
    token that was passed into IGraphicBufferProducer::connect to detect
    the death of the producer. If a producer does not wish to listen for
    buffer release events, it can pass in an instance of the
    DummyProducerListener class defined in IProducerListener.h, if it even
    cares about death events (BufferQueue doesn't enforce the token being
    non-NULL, though perhaps we should).
    
    Change-Id: I23935760673524abeafea2b58dccc3583b368710
    BufferQueue: Set attached buffers as requested
    
    When a buffer is attached to the producer side, it needs to be marked
    as having been requested so that it can be queued successfully.
    
    Change-Id: I90a88b332c415a57921bd094ae635afdf65bff99
    Add sideband streams to BufferQueue and related classes
    
    Sideband streams are essentially a device-specific buffer queue that
    bypasses the BufferQueue system. They can be used for situations with
    hard real-time requirements like high-quality TV and video playback
    with A/V sync. A handle to the stream is provided by the source HAL,
    and attached to a BufferQueue. The sink HAL can read buffers via the
    stream handle rather than acquiring individual buffers from the
    BufferQueue.
    
    Change-Id: Ib3f262eddfc520f4bbe3d9b91753ed7dd09d3a9b
    BufferQueue: Allow detaching/reattaching buffers
    
    Adds detachBuffer and attachBuffer calls to both the producer and
    consumer sides of BufferQueue. Buffers may be detached while dequeued
    by the producer or acquired by the consumer, and when attached, enter
    the dequeued and acquired states, respectively.
    
    Bug: 13173343
    Change-Id: Ic152692b0a94d99e0135b9bfa62747dab2a54220
    Change BufferQueue into producer/consumer wrapper
    
    Now that BufferQueue has been split into core + producer + consumer,
    rewrite BufferQueue to be a thin layer over a producer and consumer
    interface. Eventually, this layer will be deprecated in favor of
    only using either the producer or consumer interface, as applicable.
    
    Change-Id: I340ae5f5b633b244fb594615ff52ba50b9e2f7e4
    Split BufferQueue into core + producer + consumer
    
    Change-Id: Idc39f1e511d68ce4f02202d35425a419bc0bcd92
    BufferQueue: Add StreamSplitter
    
    Adds a StreamSplitter class, that takes one IGraphicBufferConsumer
    interface and multiple IGraphicBufferProducer interfaces and
    implements a one-to-many broadcast of GraphicBuffers (while managing
    fences correctly).
    
    Change-Id: I38ecdf3e311ac521bc781c30dde0cc382a4376a3
    libgui: Add a test suite for SRGB testing
    
    This is the start of an SRGB test suite. Currently it has a test for
    SRGB texture reads in GLES3.
    
    Change-Id: I553ee2691dc92b98cae7a003084d4e2823d40d95
    libgui: Split SurfaceTexture tests into more files
    
    Extract the many different test fixtures and suites in SurfaceTexture_test.cpp
    into separate files. No real functional changes, just tweaking headers to keep
    things building (and adding a few copyright headers I forgot last time).
    
    Change-Id: Id801bd5d617f0cc61d22508fb9b71b41694bdecf
    libgui: Fix a couple of minor bugs, extract GLTest
    
    Fix a couple of minor bugs in existing tests, and extract the GLTest class into
    its own files.
    
    Change-Id: I7d9570a0d3dbc9c5d7f9b13f2017607af42744b3
    gui: Add tests for IGraphicBufferProducer
    
    * Basic tests only. Needs more complicated queue/dequeue tests.
    * Also needs consumer-side tests to really be thorough.
    
    Change-Id: I1099dd56d65b6e9dfa15377726d6054ce657c0ca
    Add a test that checks multi-texturing works with GL_TEXTURE_EXTERNAL_OES
    
    Bug: 8395618
    Change-Id: I160d29699593b11058533ca753e275d5deeb3b54
    libgui: add BufferQueue test infrastructure
    
    This change adds some infrastructure for testing the BufferQueue class.  It
    also includes a test that tests the new check in BufferQueue::acquireBuffer
    that prevents the consumer from acquiring more than one buffer beyond the max
    acquired buffer count that was set.
    
    Change-Id: I38554ad3f9a53d2ddeba7ef0deee35ec2e2f9775
    Update ANativeWindow clients for sync
    
    This change updates the uses of ANativeWindow to use the new ANW functions that
    accept and return Sync HAL fence file descriptors.
    
    Change-Id: I3ca648b6ac33f7360e86754f924aa072f95242f6
    Add a BufferQueue CPU consumer.
    
    Aimed for use cases where gralloc buffers need to be consumed by CPU
    users, such as camera image data streams.
    
    The CpuConsumer is a synchronous queue, which exposes raw pointers to
    the underlying graphics buffers to applications. Multiple buffers may
    be acquired at once, up to the limit set at time of construction.
    
    Change-Id: If1d99f12471438e95a69696e40685948778055fd
    remove libandroid.so from targets that don't need it
    
    pdk builds don't have libandroid.so available.  Remove it from
    projects that aren't actually using it.
    
    Change-Id: I100dc84aaf8160c1062a122ef6d5aec0534d73fa
    Integreate surfacetexture test into our continuous test framework.
    
    Change-Id: Ic481f3a431166851947676d676749543c7afbbf7
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    libgui: enable tests in the 'tests' build.
    
    This change makes the libgui makefile recurse into the tests directory
    so that the tests get built by a top-level make when
    TARGET_BUILD_VARIANT=tests.
    
    Change-Id: I6f623cc4b86dfeb00b9d21823316dbd9def23110
    merge libsurfaceflinger_client into libgui
    
    this is the first step in unifying surfacetexture and surface.
    for this reason the header files were not moved, as most of them
    will eventually go away.
    
    NOTE: currently we keep libsurfaceflinger_client.so as an empty
    library to workaround prebuilt binaries wrongly linking against
    it.
    
    Change-Id: I130f0de2428e8579033dc41394d093f4e1431a00
    SurfaceTexture: fix transform matrix computation.
    
    This change fixes the transform matrix computation in SurfaceTexture
    when a crop rectangle is specified by the image producer.  It also adds
    a test for this case as well as a basic test for the uncropped case.
    
    Bug: 4070775
    Change-Id: I1481c9ce9d08fe7f2bff86d3afdeab7d4002b157
    ANativeWindow: add queues-to-window-composer check.
    
    This change adds a new 'method' to the ANativeWindow interface to check
    whether buffers queued to the window will be sent directly to the system
    window compositor.
    
    Change-Id: I4d4b199e328c110b68b250029aea650f03c8724d
    Bug: 3495535
    Fix a regression with MotionEvent parceling.
    
    Also added some more unit tests.
    
    Change-Id: I413654294d1a998eec056884e6df5eaa50f3daf4
    Fix a regression with MotionEvent parceling.
    
    Also added some more unit tests.
    
    Change-Id: I413654294d1a998eec056884e6df5eaa50f3daf4
    Mouse pointer integration.
    
    Added support for loading the pointer icon from a resource.
    
    Moved the system server related bits of the input manager out
    of libui and into libinput since they do not need to be linked into
    applications.
    
    Change-Id: Iec11e0725b3add2b905c51f8ea2c3b4b0d1a2d67
    Add unit tests for native input and fix bugs identified.
    
    Fixed a bug where we would lose the first touch point when swiping out of
    the virtual key area.
    
    Fixed a bug where we would not send an ACTION_MOVE event in cases where
    individual pointers went down/up and the remaining pointers actually moved.
    This is important since many applications do not handle pointer movements
    during ACTION_POINTER_DOWN or ACTION_POINTER_UP.  In the case of
    ACTION_POINTER_UP the movement was completely lost since all pointers were
    dispatched using their old location rather than the new location.
    
    Improved motion event validation to check for duplicate pointer ids.
    
    Added an input source constant that was missing from the NDK api but
    defined in the framework api.
    
    Added a timestamp when reporting added/removed devices in EventHub.
    
    Bug: 3070082
    Change-Id: I3206a030f43b7616e2f48006e5a9d522c4d92e56
    Don't build framework tests for simulator target.
    
    Change-Id: I70f29c7eb307e4f3ec5702f4eb9d97b4342e2f36
    Even more native input dispatch work in progress.
    
    Added more tests.
    Fixed a regression in Vector.
    Fixed bugs in pointer tracking.
    Fixed a starvation issue in PollLoop when setting or removing callbacks.
    Fixed a couple of policy nits.
    
    Modified the internal representation of MotionEvent to be more
    efficient and more consistent.
    
    Added code to skip/cancel virtual key processing when there are multiple
    pointers down.  This helps to better disambiguate virtual key presses
    from stray touches (such as cheek presses).
    
    Change-Id: I2a7d2cce0195afb9125b23378baa94fd2fc6671c
    Support for multiple tests
    
    The build system enforces some invariants that were being ignored
    before.
    
    Change-Id: Ie7675042af7f961a507386c13b2a0b592b591af8
    Native input dispatch rewrite work in progress.
    
    The old dispatch mechanism has been left in place and continues to
    be used by default for now.  To enable native input dispatch,
    edit the ENABLE_NATIVE_DISPATCH constant in WindowManagerPolicy.
    
    Includes part of the new input event NDK API.  Some details TBD.
    
    To wire up input dispatch, as the ViewRoot adds a window to the
    window session it receives an InputChannel object as an output
    argument.  The InputChannel encapsulates the file descriptors for a
    shared memory region and two pipe end-points.  The ViewRoot then
    provides the InputChannel to the InputQueue.  Behind the
    scenes, InputQueue simply attaches handlers to the native PollLoop object
    that underlies the MessageQueue.  This way MessageQueue doesn't need
    to know anything about input dispatch per-se, it just exposes (in native
    code) a PollLoop that other components can use to monitor file descriptor
    state changes.
    
    There can be zero or more targets for any given input event.  Each
    input target is specified by its input channel and some parameters
    including flags, an X/Y coordinate offset, and the dispatch timeout.
    An input target can request either synchronous dispatch (for foreground apps)
    or asynchronous dispatch (fire-and-forget for wallpapers and "outside"
    targets).  Currently, finding the appropriate input targets for an event
    requires a call back into the WindowManagerServer from native code.
    In the future this will be refactored to avoid most of these callbacks
    except as required to handle pending focus transitions.
    
    End-to-end event dispatch mostly works!
    
    To do: event injection, rate limiting, ANRs, testing, optimization, etc.
    
    Change-Id: I8c36b2b9e0a2d27392040ecda0f51b636456de25
    eclair snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    libgui: Split SurfaceTexture tests into more files
    
    Extract the many different test fixtures and suites in SurfaceTexture_test.cpp
    into separate files. No real functional changes, just tweaking headers to keep
    things building (and adding a few copyright headers I forgot last time).
    
    Change-Id: Id801bd5d617f0cc61d22508fb9b71b41694bdecf
    libgui: Fix a couple of minor bugs, extract GLTest
    
    Fix a couple of minor bugs in existing tests, and extract the GLTest class into
    its own files.
    
    Change-Id: I7d9570a0d3dbc9c5d7f9b13f2017607af42744b3
    BufferQueue: Add StreamSplitter
    
    Adds a StreamSplitter class, that takes one IGraphicBufferConsumer
    interface and multiple IGraphicBufferProducer interfaces and
    implements a one-to-many broadcast of GraphicBuffers (while managing
    fences correctly).
    
    Change-Id: I38ecdf3e311ac521bc781c30dde0cc382a4376a3
    BufferQueue: Remove Bn version of create*
    
    It turns out that there's no reason to have both I* and Bn* versions
    of the createBufferQueue method, so I removed the Bn* version.
    
    Change-Id: I66aeb09e10458ae540ddf1f38d2d0154ea8f315b
    BufferQueue: Add producer buffer-released callback
    
    Add a callback to the producer side, onBufferReleased, which will be
    called every time the consumer releases a buffer back to the
    BufferQueue. This will enable a buffer stream splitter to work
    autonomously without having to block on dequeueBuffer.
    
    The binder object used for the callback replaces the generic IBinder
    token that was passed into IGraphicBufferProducer::connect to detect
    the death of the producer. If a producer does not wish to listen for
    buffer release events, it can pass in an instance of the
    DummyProducerListener class defined in IProducerListener.h, if it even
    cares about death events (BufferQueue doesn't enforce the token being
    non-NULL, though perhaps we should).
    
    Change-Id: I23935760673524abeafea2b58dccc3583b368710
    BufferQueue: Test remote producer and consumer
    
    Adds a test that puts the BufferQueue into its own process and
    connects to it over remote binder interfaces. This exposed the fact
    that while IGBC was technically binderized, it didn't actually work
    when flattened, so this change also fixes that.
    
    Change-Id: I728cdb662a4273ddd3440ed6040a12560313fe68
    Fix broken build for more tests
    
    Change-Id: I7bdd12a833233724805d01d993541ee05caa9bf6
    BufferQueue: Allow detaching/reattaching buffers
    
    Adds detachBuffer and attachBuffer calls to both the producer and
    consumer sides of BufferQueue. Buffers may be detached while dequeued
    by the producer or acquired by the consumer, and when attached, enter
    the dequeued and acquired states, respectively.
    
    Bug: 13173343
    Change-Id: Ic152692b0a94d99e0135b9bfa62747dab2a54220
    FramebufferNativeWindow.h is obsolete
    
    This adds a deprecation #warning to the header.
    
    Change-Id: Ia32f16e491cb01d435ec8846dda3d9a7d1a9cfc5
    gui: Add tests for IGraphicBufferProducer
    
    * Basic tests only. Needs more complicated queue/dequeue tests.
    * Also needs consumer-side tests to really be thorough.
    
    Change-Id: I1099dd56d65b6e9dfa15377726d6054ce657c0ca
    Fix build (tests)
    
    Change-Id: I5b233ef448e5e7eec3818c6586dfea138b28f7b6
    Fix build
    
    Neglected the "checkbuild"-built tests.
    
    Change-Id: I202692f1a6d1e306c88e820c959d07d16e7c6a00
    Binderize the consumer side of BufferQueue
    
    While currently untested, this should allow to move the
    BuffereQueue in the consumer process and have everything
    work as usual.
    
    Bug: 9265647
    
    Change-Id: I9ca8f099f7c65b9a27b7e7a3643b46d1b58eacfc
    Make ANW.setSwapInterval(0) work again
    
    we can now queue/dequeue a buffer in asynchrnous mode by using the
    async parameter to these calls. async mode is only specified
    with those calls (it is not modal anymore).
    
    as a consequence it can only be specified when the buffer count
    is not overidden, as error is returned otherwise.
    
    Change-Id: Ic63f4f96f671cb9d65c4cecbcc192615e09a8b6b
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    Pay attention to buffer timestamps
    
    When acquiring a buffer, SurfaceFlinger now computes the expected
    presentation time and passes it to the BufferQueue acquireBuffer()
    method.  If it's not yet time to display the buffer, acquireBuffer()
    returns PRESENT_LATER instead of a buffer.
    
    The current implementation of the expected-present-time computation
    uses approximations and guesswork.
    
    Bug 7900302
    
    Change-Id: If9345611c5983a11a811935aaf27d6388a5036f1
    Fix argument types in IGraphicBufferProducer methods
    
    Bug: 8384764
    Change-Id: I7a3f1e1a0584a70af04f9eafef900505389d2202
    libgui: disallow NULL Fence pointers
    
    This change eliminates the uses of a NULL sp<Fence> indicating that no waiting
    is required.  Instead we use a non-NULL but invalid Fence object for which the
    wait methods will return immediately.
    
    Bug: 7892871
    Change-Id: I5360aebe3090422ef6920d56c99fc4eedc642e48
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    BufferQueue: add a setMaxAcquiredBufferCount check
    
    This change adds a check to verify the validity of the value passed to
    setMaxAcquiredBufferCount.
    
    Change-Id: I39730557aa58261e678bd6e4fce11bab78e98362
    libgui: add BufferQueue test infrastructure
    
    This change adds some infrastructure for testing the BufferQueue class.  It
    also includes a test that tests the new check in BufferQueue::acquireBuffer
    that prevents the consumer from acquiring more than one buffer beyond the max
    acquired buffer count that was set.
    
    Change-Id: I38554ad3f9a53d2ddeba7ef0deee35ec2e2f9775
    GLConsumer: Stop using default constructor params
    
    Removes the dependency on default constructor parameters for
    GLConsumer so that a different constructor prototype can safely be
    added.
    
    Change-Id: I0da924bbd4c141edbf305598c1be8bc575654680
    Remove deprecated BufferQueue constructor
    
    Bug: 13415624
    Change-Id: I153b5470b21832cebe3c617d28a4ab9c9bf3b362
    Fix build. optional tests were broken.
    
    Change-Id: Iba9f5cb57f134559e1f9c55e293578d9f5d8cb96
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    fix build
    
    Change-Id: I04df8ec96510b16e84054089f7c02609d8fe2b0c
    Make ANW.setSwapInterval(0) work again
    
    we can now queue/dequeue a buffer in asynchrnous mode by using the
    async parameter to these calls. async mode is only specified
    with those calls (it is not modal anymore).
    
    as a consequence it can only be specified when the buffer count
    is not overidden, as error is returned otherwise.
    
    Change-Id: Ic63f4f96f671cb9d65c4cecbcc192615e09a8b6b
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    always pass the BufferQueue explicitely to consumers
    
    Change-Id: I883b0a7b19d8e722f9ab714ba6f49e658b02ca86
    libgui: fix an EGLImage leak
    
    This moves the call to ConsumerBase::abandon from the ConsumerBase dtor to
    ConsumerBase::onLastStrongRef.  The abandon call relies on virtual methods to
    perform the clean-up, so calling it from the ConsumerBase dtor after the
    derived classes dtors ran was skipping some of the clean-up.  The
    onLastStrongRef method should get called just before the most derived class's
    dtor gets called.
    
    Bug: 8349135
    Change-Id: I836946826927cc1ed69c049049f525f92b17a269
    Added a test that checks the error behavior of ConsumerBase::abandon
    
    We check that calling eglSwapBuffers() on an abandonned BufferQueue
    return EGL_BAD_SURFACE -- this is to ensure consistancy between
    drivers.
    
    Change-Id: Ibb548e0cf767ceee69f2fc4a85811d15a6522277
    Added a test that checks the error behavior of ConsumerBase::abandon
    
    We check that calling eglSwapBuffers() on an abandonned BufferQueue
    return EGL_BAD_ALLOC -- this is to ensure consistancy between
    drivers.
    
    Change-Id: If84b082bc6bdea21673b16e5e717658c78edf405
    get rid of Surface::getISurfaceTexture()
    
    this was there just for legacy reasons.
    
    Change-Id: I0a48d6e04d7efa65033f9f10c91bba557f16ae8b
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: Ibed34175ae273608393aaa5f0a7df207dc40d709
    Rename ISurfaceTexture and SurfaceTexture
    
    The C++ class names don't match what the classes do, so rename
    ISurfaceTexture to IGraphicBufferProducer, and SurfaceTexture to
    GLConsumer.
    
    Bug 7736700
    
    Change-Id: Ia03e468888025b5cae3c0ee1995434515dbea387
    stop using a deprecated SurfaceTextureClient ctor
    
    Change-Id: I8c8282a0debd551db290dd6849faf272a88c704c
    SurfaceTexture: fix a few tests
    
    Change-Id: Ic74fe8791361f8fe91ad7149720fafd4cc154ac1
    Update ANativeWindow clients for sync
    
    This change updates the uses of ANativeWindow to use the new ANW functions that
    accept and return Sync HAL fence file descriptors.
    
    Change-Id: I3ca648b6ac33f7360e86754f924aa072f95242f6
    libgui: remove setPostTransformCrop
    
    This change removes the setPostTransformCrop function from
    SurfaceTextureClient.  It also includes a small logging fix in BufferQueue.
    
    Bug: 6299171
    Change-Id: Ifd0ed05b95dad6085e7a8267fda4d69b76ea3bad
    libgui: Add support for post-xform crops.
    
    This change adds support for specifying a crop rectangle to a
    SurfaceTextureClient that is in post-transformed coordinate space.
    
    Change-Id: I247901de343e71b32850f7ae3bac62dfa612ad3d
    Bug: 6299171
    SurfaceTexture: shrink all sides when cropping
    
    This change makes SurfaceTexture include an offset for all sides of the crop
    region when cropping.  This keeps the image centered, to minimize the visual
    changes when switching between the texture transform matrix-based cropping and
    something that does proper cropping (e.g. HWComposer).
    
    Change-Id: I541d3046fd92e49221b488444df36d490924d1c5
    libgui: add BQ consumer buffer free notifications
    
    This change adds a new callback for BufferQueue consumers to be notified
    when the BufferQueue frees some or all of its buffers.  This is needed
    to retain SurfaceTexture behavior where all buffers would be freed when
    the producer disconnects.  This change also modifies the
    SurfaceTextureGLToGLTest.EglDestroySurfaceUnrefsBuffers test to catch
    when the buffers are not freed.
    
    The implementation is a little complicated because it needs to avoid
    circular sp<> references across what will be a binder interface (so wp<>
    can't be used directly).  It also needs to avoid the possibility of
    locking the BufferQueue and consumer (e.g. SurfaceTexture) mutexes in
    the wrong order.
    
    This change also includes a few additional fixes and test cleanups.
    
    Change-Id: I27b77d0af15cb4b135f4b63573f634f5f0da2182
    clean-up. get rid ofunused code and members in Surface[Control].cpp
    
    Change-Id: Ia7790ae28af2c2ac99eae01c2c5044ace4a490a4
    SurfaceTexture: add a multi-SurfaceTexture test
    
    This change adds a test that does simple, unverified GL rendering to
    multiple SurfaceTextures.
    
    Change-Id: I51a41d68ae5a27e01ae93842242897b0d3558ca6
    SurfaceTexture: enable a test that now passes.
    
    This change enables the QueryFormatAfterSettingWorks.
    
    Change-Id: Ic868011a36a6c86c8646880246cd5b6960a13364
    SurfaceTextureClient: minor test refactoring.
    
    Change-Id: Iabc6d27ca35d30d896c6aef65c4f1b5a1eed47b8
    Temporarily don't return the current buffer in synchronous mode
    
    activate synchronous mode by default.
    SurfaceTexture: add a format querying test.
    
    This change adds a test to verify that querying the format of a
    SurfaceTextureClient immediately after setting it returns the correct
    result.  The test is currently disabled because it does not pass.
    
    Change-Id: I5bddb39c5bf96d6104624094383d410ed913e9f3
    SurfaceTexture: add getTransformMatrix tests.
    
    This change adds a test verifying that with no transform set on the
    SurfaceTextureClient, the SurfaceTexture will return an identity
    transform matrix.  It also verifies this same effect in the presence of
    an additional call to native_window_set_buffer_count just before the
    call to getTransformMatrix.
    
    Bug: 4490420
    Change-Id: Ic5adfa29b5696cc2b451433834e3758ef20c5edd
    SurfaceTexture: disable a failing test.
    
    The SurfaceTextureSyncModeWaitRetire test was disabled.  It is failing
    because of the synchronization hacks that were added to SurfaceTexture
    to work around bugs in vendor device drivers.
    
    Change-Id: I09a74538bfe14a04833acb6847471e00826cc7fc
    SurfaceTexture: fix an error check in dequeueBuffer.
    
    This change fixes the MIN_UNDEQUEUED_BUFFERS error check in
    dequeueBuffer.  The check should only be performed if a buffer has been
    queued since the last time the buffer count was changed by the client.
    The check must be applied conditionally because video decoders require
    all the bufferes to be dequeued and registered before beginning the
    decode.
    
    Change-Id: I08d96b380544e395c2fcf0f3983a199bfd695b09
    SurfaceTexture: clean up some comments, tests, etc.
    
    This change fixes up some stale comments, member variable names, log
    messages and disables a failing test.
    
    Change-Id: Ic1d3344b18066cf710e4a42838b2417c6b1f2f6c
    Implement {Surface|SurfaceTextureClient}::setSwapInterval()
    
    Change-Id: I8382e346ddaa2c4c8ff56ac3ffd7f0109572f188
    new tests for SurfaceTexture synchronous mode
    
    Change-Id: Icfdaa625238246f8d0224efe28fdf2c1c24203f8
    unify SurfaceTexture and Surface
    
    Change-Id: I49da2f5d8408e4cd7e148cfb777bb4ff68cd8f37
    frameworks/base: android_native_buffer_t -> ANativeWindowBuffer
    
    Change-Id: Idc2eabaa805bb6d308ebb315872623f28d428417
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    EGL: Allow creating a SurfaceTexture EGLSurface.
    
    This change removes the check that disallowed the creation of an
    EGLSurface that would send frames to a SurfaceTexture.
    
    Change-Id: I44c6d5df503cc676a88144d72d39b414692ce4c9
    SurfaceTexture can now force the client to request a buffer
    
    SurfaceTexture now has the concept of default size a new method,
    setDefaultBufferSize() to set it. When the default size is
    changed, dequeueBuffer() will return a value telling the
    client that it must ask for a new buffer.
    
    The above only applies if the client has not
    overriden the buffer size with setGeometry.
    
    Change-Id: I520dc40363054b7e37fdb67d6a2e7bce70326e81
    ANativeWindow: add query for the concrete type.
    
    This change adds a query to the ANativeWindow interface for getting the
    concrete type of the ANativeWindow.
    
    Bug: 4086509
    Change-Id: I64aa86d72fbca3b52a98e1fc35608737781a3178
    SurfaceTexture: disallow unsupported uses.
    
    This change makes the ANativeWindow_lock NDK function error out if it is
    passed an ANativeWindow with a concrete type that is not Surface.  It
    also makes eglCreateWindowSurface fail if it is passed a
    SurfaceTextureClient as its 'window' argument.
    
    Bug: 4087277
    Change-Id: Ie68c50c52d88f72d8a387f6c094908044c83a88c
    SurfaceTextureClient: Add ISurfaceTexture getter.
    
    This change adds a getter method to SurfaceTextureClient to get the
    ISurfaceTexture object with which the SurfaceTextureClient is
    communicating.
    
    Bug: 4086509
    Change-Id: Ifec621e0fe5392a5be56b2348fdc54067cbebcdd
    ANativeWindow: add query for the concrete type.
    
    This change adds a query to the ANativeWindow interface for getting the
    concrete type of the ANativeWindow.
    
    Bug: 4086509
    Change-Id: I64aa86d72fbca3b52a98e1fc35608737781a3178
    ANativeWindow: add queues-to-window-composer check.
    
    This change adds a new 'method' to the ANativeWindow interface to check
    whether buffers queued to the window will be sent directly to the system
    window compositor.
    
    Change-Id: I4d4b199e328c110b68b250029aea650f03c8724d
    Bug: 3495535
    libgui: Split SurfaceTexture tests into more files
    
    Extract the many different test fixtures and suites in SurfaceTexture_test.cpp
    into separate files. No real functional changes, just tweaking headers to keep
    things building (and adding a few copyright headers I forgot last time).
    
    Change-Id: Id801bd5d617f0cc61d22508fb9b71b41694bdecf
    libgui: Split SurfaceTexture tests into more files
    
    Extract the many different test fixtures and suites in SurfaceTexture_test.cpp
    into separate files. No real functional changes, just tweaking headers to keep
    things building (and adding a few copyright headers I forgot last time).
    
    Change-Id: Id801bd5d617f0cc61d22508fb9b71b41694bdecf
    SurfaceFlinger: Add sourceCrop to screenshot
    
    Adds a sourceCrop Rect parameter to screenshot commands, which allows
    clients to capture only a portion of the screen instead of the whole
    screen.
    
    Bug: 15137922
    Change-Id: I629447573cd34ffb96334cde7ba02490b9ea06d8
    Remove deprecated BufferQueue constructor
    
    Bug: 13415624
    Change-Id: I153b5470b21832cebe3c617d28a4ab9c9bf3b362
    Fix calls to captureScreen
    
    Change-Id: Ic0ff47afa29f143131906082dff79d4e907b7143
    fix tests more
    
    Change-Id: I05c3dd6a22440844f8bd071f4c2b620b2bd8c720
    fix tests
    
    Change-Id: I0f4d613481eda2c44a2d631a81d75de7e52e7a62
    Fix build. 3rd attempt
    
    Change-Id: I4317b34fd07890ea7cf9db51be42d72ef21aca89
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    BufferQueue: Support query of consumer usage bits
    
    Bug: 9592202
    Change-Id: I61a17758200e61adaca695b426db3df0f6637d4c
    BuffferQueue disconnect is now always asynchrnous
    
    we tag queued buffers with the "bufferqueue cannot block" flag
    and use that bit to discard a buffer in the queue by new ones
    comming in. this allows us to remove the buffer queue drain in
    disconnect while maintaining the right behaviour if it gets
    connected again (since each buffer remembers how it was enqueued).
    
    Change-Id: I1e703d363a687b70b19ba49cef32213116e8bd3f
    BufferQueue improvements and APIs changes
    
    this is the first step of a series of improvements to
    BufferQueue. A few things happen in this change:
    
    - setSynchronousMode() goes away as well as the SynchronousModeAllowed flag
    - BufferQueue now defaults to (what used to be) synchronous mode
    - a new "controlled by app" flag is passed when creating consumers and producers
      those flags are used to put the BufferQueue in a mode where it
      will never block if both flags are set. This is achieved by:
      - returning an error from dequeueBuffer() if it would block
      - making sure a buffer is always available by replacing
        the previous buffer with the new one in queueBuffer()
        (note: this is similar to what asynchrnous mode used to be)
    
    Note: in this change EGL's swap-interval 0 is broken; this will be
    fixed in another change.
    
    Change-Id: I691f9507d6e2e158287e3039f2a79a4d4434211d
    always pass the BufferQueue explicitely to consumers
    
    to fix tests build.
    
    Change-Id: I70b9cf5b0d76df709e474181eeb7c42a54ecf43a
    fix build. update test to new API
    
    Change-Id: I31ca84c85edff3e2ff90c554769e058110f27d49
    Banish DisplayID from the SurfaceFlinger API.
    
    Use only display tokens in the API to refer to new displays.
    
    Don't require the caller to specify the display when creating
    a surface (since in general a surface could be shown on
    any display).
    
    This is intended to be a minimum change just to update the API.
    Note that SurfaceFlinger still uses DisplayID in a few places
    internally that might cause some features not to work properly
    when there are multiple displays (LayerScreenshot, for example).
    
    Change-Id: I3d91eec2da406eefd97bcd53655d403ad865a7e6
    Update ANativeWindow clients for sync
    
    This change updates the uses of ANativeWindow to use the new ANW functions that
    accept and return Sync HAL fence file descriptors.
    
    Change-Id: I3ca648b6ac33f7360e86754f924aa072f95242f6
    fix libgui header location
    
    Change-Id: Iec71706cdd4f29c6904993648ce873e83ef9cafe
    split ComposerService out of SurfaceComposerClient.h
    
    Change-Id: I1eb691f7ca263d5895d871ab675bb5826e0323c6
    Surface: fix a protected buffer test
    
    This change renames the ScreenshotsOfProtectedBuffersFail to
    ScreenshotsOfProtectedBuffersSucceed and changes the test to verify that
    the screenshot succeeds.
    
    Change-Id: I960bb8eed4211578cb4dc446b08392937da064b6
    fix ScreenshotsOfProtectedBuffersFail
    
    - put the test window at the front most screen position
    - use RGBA_8888 which is a mandatory format
    - handle devices that don't support the protected usage flags
    
    Bug: 4950464
    
    Change-Id: I0005fb667cfe094e5978816e2924b294c5ef817e
    SF transactions are now O(1) wrt IPC instead of O(N).
    
    Change-Id: I57669852cbf6aabae244ea86940a08a5a27ffc43
    frameworks/base: android_native_buffer_t -> ANativeWindowBuffer
    
    Change-Id: Idc2eabaa805bb6d308ebb315872623f28d428417
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    libgui: Fix the tests so they build.
    
    Change-Id: I7205b0819e5801ac549109ff562c3ab1b113d176
    merge libsurfaceflinger_client into libgui
    
    this is the first step in unifying surfacetexture and surface.
    for this reason the header files were not moved, as most of them
    will eventually go away.
    
    NOTE: currently we keep libsurfaceflinger_client.so as an empty
    library to workaround prebuilt binaries wrongly linking against
    it.
    
    Change-Id: I130f0de2428e8579033dc41394d093f4e1431a00
    ANativeWindow: add query for the concrete type.
    
    This change adds a query to the ANativeWindow interface for getting the
    concrete type of the ANativeWindow.
    
    Bug: 4086509
    Change-Id: I64aa86d72fbca3b52a98e1fc35608737781a3178
    ANativeWindow: add query for the concrete type.
    
    This change adds a query to the ANativeWindow interface for getting the
    concrete type of the ANativeWindow.
    
    Bug: 4086509
    Change-Id: I64aa86d72fbca3b52a98e1fc35608737781a3178
    SurfaceFlinger: Respect the PROTECTED gralloc bit.
    
    This change makes SurfaceFlinger treat layers for which the active
    buffer has the GRALLOC_USAGE_PROTECTED bit set as if they have the
    'secure' flag set.
    
    Change-Id: Ic60b6513a63e4bb92ec6ce9fd12fd39b4ba5f674
    Bug: 4081304
    ANativeWindow: add queues-to-window-composer check.
    
    This change adds a new 'method' to the ANativeWindow interface to check
    whether buffers queued to the window will be sent directly to the system
    window compositor.
    
    Change-Id: I4d4b199e328c110b68b250029aea650f03c8724d
    Bug: 3495535
    GLConsumer: Stop using default constructor params
    
    Removes the dependency on default constructor parameters for
    GLConsumer so that a different constructor prototype can safely be
    added.
    
    Change-Id: I0da924bbd4c141edbf305598c1be8bc575654680
    Remove deprecated BufferQueue constructor
    
    Bug: 13415624
    Change-Id: I153b5470b21832cebe3c617d28a4ab9c9bf3b362
    libgui: Split SurfaceTexture tests into more files
    
    Extract the many different test fixtures and suites in SurfaceTexture_test.cpp
    into separate files. No real functional changes, just tweaking headers to keep
    things building (and adding a few copyright headers I forgot last time).
    
    Change-Id: Id801bd5d617f0cc61d22508fb9b71b41694bdecf
    libgui: Split SurfaceTexture tests into more files
    
    Extract the many different test fixtures and suites in SurfaceTexture_test.cpp
    into separate files. No real functional changes, just tweaking headers to keep
    things building (and adding a few copyright headers I forgot last time).
    
    Change-Id: Id801bd5d617f0cc61d22508fb9b71b41694bdecf
    fix SF buffer cropping
    
    When a buffer had a crop (meaning its content is scaled to the window size)
    and a window crop was defined, the resulting crop couldn't be expressed
    properly because h/w composer's API was limited to integers, since
    this is fixed in h/w composer 1.3, we take adventage of this to
    make sure we get the correct crop.
    
    this bug could result in the buffer being scaled by an incorrect ratio and
    be slightly offset; moreover, it would produce different results from the
    GL code path, which is always correct.
    
    Change-Id: I8e20e00b6e26177d14f4ab4d2cd581e26c818892
    add libsurfaceflinger_ddmconnection for PDK build
    
    - the library is dlopened from libsurfaceflinger
    - the library built only when libnativehelper exists
    
    Bug: 7089510
    Change-Id: Ib3ea1029d7e8f6e055f4b759d0bf68f5123fa8a1
    as a debug option SrufaceFlinger can now connect to DDMS
    
    this is disabled by default. To enable:
      setprop debug.sf.ddms 1
    
    this debug option requires to restart SurfaceFlinger
    
    Change-Id: Ic2f8050b29911b55bcd21721648b6978700c277d
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    Remove frameworks/base/im since these stuff are only used by IM app
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    Remove deprecated BufferQueue constructor
    
    Bug: 13415624
    Change-Id: I153b5470b21832cebe3c617d28a4ab9c9bf3b362
    libgui: Split SurfaceTexture tests into more files
    
    Extract the many different test fixtures and suites in SurfaceTexture_test.cpp
    into separate files. No real functional changes, just tweaking headers to keep
    things building (and adding a few copyright headers I forgot last time).
    
    Change-Id: Id801bd5d617f0cc61d22508fb9b71b41694bdecf
    Remove deprecated BufferQueue constructor
    
    Bug: 13415624
    Change-Id: I153b5470b21832cebe3c617d28a4ab9c9bf3b362
    BufferQueue: Add producer buffer-released callback
    
    Add a callback to the producer side, onBufferReleased, which will be
    called every time the consumer releases a buffer back to the
    BufferQueue. This will enable a buffer stream splitter to work
    autonomously without having to block on dequeueBuffer.
    
    The binder object used for the callback replaces the generic IBinder
    token that was passed into IGraphicBufferProducer::connect to detect
    the death of the producer. If a producer does not wish to listen for
    buffer release events, it can pass in an instance of the
    DummyProducerListener class defined in IProducerListener.h, if it even
    cares about death events (BufferQueue doesn't enforce the token being
    non-NULL, though perhaps we should).
    
    Change-Id: I23935760673524abeafea2b58dccc3583b368710
    Fix broken build for more tests
    
    Change-Id: I7bdd12a833233724805d01d993541ee05caa9bf6
    FramebufferNativeWindow.h is obsolete
    
    This adds a deprecation #warning to the header.
    
    Change-Id: Ia32f16e491cb01d435ec8846dda3d9a7d1a9cfc5
    gui: Add tests for IGraphicBufferProducer
    
    * Basic tests only. Needs more complicated queue/dequeue tests.
    * Also needs consumer-side tests to really be thorough.
    
    Change-Id: I1099dd56d65b6e9dfa15377726d6054ce657c0ca
    libgui: Split SurfaceTexture tests into more files
    
    Extract the many different test fixtures and suites in SurfaceTexture_test.cpp
    into separate files. No real functional changes, just tweaking headers to keep
    things building (and adding a few copyright headers I forgot last time).
    
    Change-Id: Id801bd5d617f0cc61d22508fb9b71b41694bdecf
    Remove deprecated BufferQueue constructor
    
    Bug: 13415624
    Change-Id: I153b5470b21832cebe3c617d28a4ab9c9bf3b362
    FramebufferNativeWindow.h is obsolete
    
    This adds a deprecation #warning to the header.
    
    Change-Id: Ia32f16e491cb01d435ec8846dda3d9a7d1a9cfc5
    gui: Fix return code assert in CpuConsumer_test.
    
    The CpuConsumer error code was changed recently from INVALID_OPERATION to
    NOT_ENOUGH_DATA, however the CpuConsumer_test was not updated. This change
    fixes the return code checked by CpuConsumer_test so the test no longer
    fails.
    
    Change-Id: Ie548ddcb313fa34c130ac63355090cb44ac15ebf
    All consumers now take an IGraphicBufferConsumer instead of a BufferQueue
    
    this means they only have access to the consumer end of
    the interface. we had a lot of code that assumed consumers
    where holding a BufferQueue (i.e.: both ends), so most of
    this change is untangling in fix that
    
    Bug: 9265647
    Change-Id: Ic2e2596ee14c7535f51bf26d9a897a0fc036d22c
    always pass the BufferQueue explicitely to consumers
    
    Change-Id: I883b0a7b19d8e722f9ab714ba6f49e658b02ca86
    CpuConsumer_test: Extend test with new formats RGBA8888 and optional Y8/Y16
    
    Change-Id: I0a0f6ce73516883bf50c749a1759abbdb3748e08
    Refactoring: Rename SurfaceTextureClient to Surface
    
    Change-Id: Ibed34175ae273608393aaa5f0a7df207dc40d709
    libgui: disable CpuConsumer tests
    
    This change disables the CpuConsumer tests because they require a Gralloc
    format that is not supported on all devices.
    
    Change-Id: Ifaa618062c1dae53d9fcb9e16ba92c480d3dbd0c
    Update ANativeWindow clients for sync
    
    This change updates the uses of ANativeWindow to use the new ANW functions that
    accept and return Sync HAL fence file descriptors.
    
    Change-Id: I3ca648b6ac33f7360e86754f924aa072f95242f6
    Add a BufferQueue CPU consumer.
    
    Aimed for use cases where gralloc buffers need to be consumed by CPU
    users, such as camera image data streams.
    
    The CpuConsumer is a synchronous queue, which exposes raw pointers to
    the underlying graphics buffers to applications. Multiple buffers may
    be acquired at once, up to the limit set at time of construction.
    
    Change-Id: If1d99f12471438e95a69696e40685948778055fd
    libgui: Split SurfaceTexture tests into more files
    
    Extract the many different test fixtures and suites in SurfaceTexture_test.cpp
    into separate files. No real functional changes, just tweaking headers to keep
    things building (and adding a few copyright headers I forgot last time).
    
    Change-Id: Id801bd5d617f0cc61d22508fb9b71b41694bdecf
    Remove deprecated BufferQueue constructor
    
    Bug: 13415624
    Change-Id: I153b5470b21832cebe3c617d28a4ab9c9bf3b362
    libgui: Fix segfault in SRGB tests
    
    Make the test exit cleanly if the output buffer is never mapped.
    
    Bug: 12761226
    Change-Id: If789f02198851a17b11ee06f612f9ba7e06da754
    libgui: Add a test for SRGB surfaces
    
    Add SRGBTest.RenderToSRGBSurface, which validates that passing the
    SRGB colorspace attributes to eglCreateWindowSurface actually
    results in an SRGB surface by comparing the output values to those
    of a standard RGB surface.
    
    Change-Id: I3d5fef8070ed8fa2357ddd1c5fcc849ae3fbd12a
    libgui: Add a test suite for SRGB testing
    
    This is the start of an SRGB test suite. Currently it has a test for
    SRGB texture reads in GLES3.
    
    Change-Id: I553ee2691dc92b98cae7a003084d4e2823d40d95
    libgui: Split SurfaceTexture tests into more files
    
    Extract the many different test fixtures and suites in SurfaceTexture_test.cpp
    into separate files. No real functional changes, just tweaking headers to keep
    things building (and adding a few copyright headers I forgot last time).
    
    Change-Id: Id801bd5d617f0cc61d22508fb9b71b41694bdecf
    libgui: Split SurfaceTexture tests into more files
    
    Extract the many different test fixtures and suites in SurfaceTexture_test.cpp
    into separate files. No real functional changes, just tweaking headers to keep
    things building (and adding a few copyright headers I forgot last time).
    
    Change-Id: Id801bd5d617f0cc61d22508fb9b71b41694bdecf
    libgui: Split SurfaceTexture tests into more files
    
    Extract the many different test fixtures and suites in SurfaceTexture_test.cpp
    into separate files. No real functional changes, just tweaking headers to keep
    things building (and adding a few copyright headers I forgot last time).
    
    Change-Id: Id801bd5d617f0cc61d22508fb9b71b41694bdecf
    libgui: Split SurfaceTexture tests into more files
    
    Extract the many different test fixtures and suites in SurfaceTexture_test.cpp
    into separate files. No real functional changes, just tweaking headers to keep
    things building (and adding a few copyright headers I forgot last time).
    
    Change-Id: Id801bd5d617f0cc61d22508fb9b71b41694bdecf
    libgui: Split SurfaceTexture tests into more files
    
    Extract the many different test fixtures and suites in SurfaceTexture_test.cpp
    into separate files. No real functional changes, just tweaking headers to keep
    things building (and adding a few copyright headers I forgot last time).
    
    Change-Id: Id801bd5d617f0cc61d22508fb9b71b41694bdecf
    BufferQueue: Add StreamSplitter
    
    Adds a StreamSplitter class, that takes one IGraphicBufferConsumer
    interface and multiple IGraphicBufferProducer interfaces and
    implements a one-to-many broadcast of GraphicBuffers (while managing
    fences correctly).
    
    Change-Id: I38ecdf3e311ac521bc781c30dde0cc382a4376a3
    Fix broken build for more tests
    
    Change-Id: I7bdd12a833233724805d01d993541ee05caa9bf6
    libgui: Split SurfaceTexture tests into more files
    
    Extract the many different test fixtures and suites in SurfaceTexture_test.cpp
    into separate files. No real functional changes, just tweaking headers to keep
    things building (and adding a few copyright headers I forgot last time).
    
    Change-Id: Id801bd5d617f0cc61d22508fb9b71b41694bdecf
    GLConsumer: Stop using default constructor params
    
    Removes the dependency on default constructor parameters for
    GLConsumer so that a different constructor prototype can safely be
    added.
    
    Change-Id: I0da924bbd4c141edbf305598c1be8bc575654680
    Remove deprecated BufferQueue constructor
    
    Bug: 13415624
    Change-Id: I153b5470b21832cebe3c617d28a4ab9c9bf3b362
    libgui: Split SurfaceTexture tests into more files
    
    Extract the many different test fixtures and suites in SurfaceTexture_test.cpp
    into separate files. No real functional changes, just tweaking headers to keep
    things building (and adding a few copyright headers I forgot last time).
    
    Change-Id: Id801bd5d617f0cc61d22508fb9b71b41694bdecf
    libgui: Split SurfaceTexture tests into more files
    
    Extract the many different test fixtures and suites in SurfaceTexture_test.cpp
    into separate files. No real functional changes, just tweaking headers to keep
    things building (and adding a few copyright headers I forgot last time).
    
    Change-Id: Id801bd5d617f0cc61d22508fb9b71b41694bdecf
    libgui: Split SurfaceTexture tests into more files
    
    Extract the many different test fixtures and suites in SurfaceTexture_test.cpp
    into separate files. No real functional changes, just tweaking headers to keep
    things building (and adding a few copyright headers I forgot last time).
    
    Change-Id: Id801bd5d617f0cc61d22508fb9b71b41694bdecf
    libgui: Fix a couple of minor bugs, extract GLTest
    
    Fix a couple of minor bugs in existing tests, and extract the GLTest class into
    its own files.
    
    Change-Id: I7d9570a0d3dbc9c5d7f9b13f2017607af42744b3
    libgui: Split SurfaceTexture tests into more files
    
    Extract the many different test fixtures and suites in SurfaceTexture_test.cpp
    into separate files. No real functional changes, just tweaking headers to keep
    things building (and adding a few copyright headers I forgot last time).
    
    Change-Id: Id801bd5d617f0cc61d22508fb9b71b41694bdecf
    fix SF buffer cropping
    
    When a buffer had a crop (meaning its content is scaled to the window size)
    and a window crop was defined, the resulting crop couldn't be expressed
    properly because h/w composer's API was limited to integers, since
    this is fixed in h/w composer 1.3, we take adventage of this to
    make sure we get the correct crop.
    
    this bug could result in the buffer being scaled by an incorrect ratio and
    be slightly offset; moreover, it would produce different results from the
    GL code path, which is always correct.
    
    Change-Id: I8e20e00b6e26177d14f4ab4d2cd581e26c818892
    add libsurfaceflinger_ddmconnection for PDK build
    
    - the library is dlopened from libsurfaceflinger
    - the library built only when libnativehelper exists
    
    Bug: 7089510
    Change-Id: Ib3ea1029d7e8f6e055f4b759d0bf68f5123fa8a1
    as a debug option SrufaceFlinger can now connect to DDMS
    
    this is disabled by default. To enable:
      setprop debug.sf.ddms 1
    
    this debug option requires to restart SurfaceFlinger
    
    Change-Id: Ic2f8050b29911b55bcd21721648b6978700c277d
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    Remove frameworks/base/im since these stuff are only used by IM app
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    GLConsumer: Fix eglTerminate/eglInit edge case.
    
    If a display is terminated and then initialized, we can't detect
    this using the display itself (it has the same value), but all
    EglImages still become invalid for the display. This patch detects
    this during image binding and forces creation of a new EglImage.
    
    Bug: 10430249
    Change-Id: I75101c50962f21263dca3ec6e241a2e5a3c23dad
    libgui: Split SurfaceTexture tests into more files
    
    Extract the many different test fixtures and suites in SurfaceTexture_test.cpp
    into separate files. No real functional changes, just tweaking headers to keep
    things building (and adding a few copyright headers I forgot last time).
    
    Change-Id: Id801bd5d617f0cc61d22508fb9b71b41694bdecf
    More changes to fix PDK build:
    
    move screencap back to frameworks/base
    move libdiskusage over from frameworks/base
    
    Change-Id: I8415716634a4cb5b0fae15ef15ff21ee0a08906a
    Move non-Java commands over from frameworks/base
    
    Change-Id: I0571813c1cfcf66abd36eb9f178fc49b618e88a6
    Signed-off-by: Mike Lockwood <lockwood@google.com>
    Fix issue #7257947: Need to fix heap limits on Mako
    
    Change-Id: Id8014b19195b8740bccf000ab66c1b599ba3a1a0
    Configure GC free to be 8MB for devices with >512MB RAM.
    
    b/6606849
    
    Change-Id: Idad46032b4b5d309db0319caeb7a1dfc0550f9f7
    build: add device-type dalvik heap configs
    
    These have been moved from frameworks/base/build
    
    Change-Id: Ib0cdf82f4e2d61a1956baabf1fe636f46ddbc13a
    Signed-off-by: Dima Zavin <dima@android.com>
    OpenGL tracing.
    
    Enable with:
    
    adb shell setprop debug.egl.trace 1
    
    Change-Id: Icfbc795f5260141510975228e72234e9aab56a85
    eclair snapshot
    Added most of the support needed for GLES 2.x
    donut snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    More changes to fix PDK build:
    
    move screencap back to frameworks/base
    move libdiskusage over from frameworks/base
    
    Change-Id: I8415716634a4cb5b0fae15ef15ff21ee0a08906a
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Report actual disk space used
    
    Report size based on blocks used, not the "nominal" size.
    b/8744465
    
    Change-Id: Idbb72f47af6d475b51305a14be291bf01acb14bb
    More changes to fix PDK build:
    
    move screencap back to frameworks/base
    move libdiskusage over from frameworks/base
    
    Change-Id: I8415716634a4cb5b0fae15ef15ff21ee0a08906a
    [1/2] GraphicBufferMapper: Add MT6589-specific methods
    
    Change-Id: I23af90e532fb5f9496337fb7ddcb3ecc11fb78b4
    Adding render stats APIs to UiAutomation (framework native).
    
    bug:12927198
    
    Change-Id: Ibb1c07f7d89e11281e5c1f27f412a29ac6f9c4ab
    Add liblog
    
    Bug: 8580410
    Change-Id: I2ca4fa00dde0b574df3619134836bcb9315bd506
    Show build config in dumpsys SurfaceFlinger
    
    This adds a line to the "dumpsys SurfaceFlinger" output that shows
    build-time configuration values.
    
    Example:
     Build configuration: [sf HAS_CONTEXT_PRIORITY] [libui] \
      [libgui USE_FENCE_SYNC]
    
    Bug 7206633
    
    Change-Id: Ibe1856b459d34a4be6ee83a4ebfd2807e6cc68a0
    Update ANativeWindow clients for sync
    
    This change updates the uses of ANativeWindow to use the new ANW functions that
    accept and return Sync HAL fence file descriptors.
    
    Change-Id: I3ca648b6ac33f7360e86754f924aa072f95242f6
    remove libui dependency on libEGL
    
    Change-Id: I1194f04085637d5c384e134967249430cc43b6ee
    libui: add ability to force a framebuffer format for EGL's use
    
    This does not actually change the framebuffer format. It merely
    fakes this format to surfaceflinger so that when it creates
    framebuffer surfaces it will use this format. It's really a giant
    HACK to allow interworking with buggy gralloc+GPU driver
    implementations. You should *NEVER* need to set this for shipping
    devices.
    
    Change-Id: I03eeb5b4d72838ef219df386ecc489fc20ab9cc7
    Signed-off-by: Dima Zavin <dima@android.com>
    remove libui's dependency on libpixelflinger
    
    this also remove support for unused pixelformats.
    
    Change-Id: I2c759a6d2daa740f3786ed62095def8047ae933d
    frameworks/base refactoring
    
    create the new libandroidfw from parts of libui and libutils
    
    Change-Id: I1584995616fff5d527a2aba63921b682a6194d58
    remove dead/usnused code
    
    Change-Id: I6fa2bc6ee01790abd2c1533f043d61a5e5c8d26e
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    Remove native EventRecurrence parser
    
    Switch over to the new parser.
    
    Bug 4575374
    
    Change-Id: If78d8042fb266182900398f7fc464a048c779966
    Add support for arbitrary axes in MotionEvents.
    
    This change makes it possible to extend the set of axes that
    are reported in MotionEvents by defining new axis constants.
    
    The MotionEvent object is now backed by its C++ counterpart
    to avoid having to maintain multiple representations of the
    same data.
    
    Change-Id: Ibe93c90d4b390d43c176cce48d558d20869ee608
    Mouse pointer integration.
    
    Added support for loading the pointer icon from a resource.
    
    Moved the system server related bits of the input manager out
    of libui and into libinput since they do not need to be linked into
    applications.
    
    Change-Id: Iec11e0725b3add2b905c51f8ea2c3b4b0d1a2d67
    remove support for PUSH_BUFFER surfaces and overlays
    
    the same functionality is now supported through
    the h/w composer HAL, and YUV support in the GPU.
    
    Change-Id: I8146605449954b8e8fd7f78810b7d873c2d8f5bf
    Improve support for external keyboards.
    
    Use Vendor ID, Product ID and optionally the Version to
    locate keymaps and configuration files for external devices.
    
    Moved virtual key definition parsing to native code so that
    EventHub can identify touch screens with virtual keys and load
    the appropriate key layout file.
    
    Cleaned up a lot of old code in EventHub.
    
    Fixed a regression in ViewRoot's fallback event handling.
    
    Fixed a minor bug in FileMap that caused it to try to munmap
    or close invalid handled when released if the attempt to map
    the file failed.
    
    Added a couple of new String8 conveniences for formatting strings.
    
    Modified Tokenizer to fall back to open+read when mmap fails since
    we can't mmap sysfs files as needed to open the virtual key
    definition files in /sys/board_properties/.
    
    Change-Id: I6ca5e5f9547619fd082ddac47e87ce185da69ee6
    Port Emulator keymaps.
    
    Also added a validation tool for keymaps (not currently integrated
    into the build system but getting there).
    
    This change brings back Android.mk with the intent that it will
    be used to validate keymaps in a later change.
    
    Added some missing keys that are present on phones.
    
    Bug: 3215210
    Bug: 3225421
    Change-Id: Id817c6e2215164616942c51a42752915d9ceacd3
    Added support for full PC-style keyboards.
    
    BREAKING CHANGE: Redesigned the key character map format to
    accomodate full keyboards with more comprehensive suite of modifiers.
    Old key character maps will not work anymore and must be updated.
    The new format is plain text only and it not compiled to a binary
    file (so the "kcm" tool will be removed in a subsequent check-in).
    
    Added FULL keyboard type to support full PC-style keyboards.
    
    Added SPECIAL_FUNCTION keyboard type to support special function
    keypads that do not have any printable keys suitable for typing
    and only have keys like HOME and POWER
    
    Added a special VIRTUAL_KEYBOARD device id convention that maps
    to a virtual keyboard with a fixed known layout.  This is designed
    to work around issues injecting input events on devices whose
    built-in keyboard does not have a useful key character map (ie.
    when the built-in keyboard is a special function keyboard only.)
    
    Modified several places where events were being synthesized
    to use the virtual keyboard.
    
    Removed support for the "qwerty" default layout.
    The new default layout is "Generic".  For the most part "qwerty"
    was being used as a backstop in case the built-in keyboard did
    not have a key character map (probably because it was a special
    function keypad) and the framework needed to be able to inject
    key events anyways.  The latter issue is resolved by using the
    special VIRTUAL_KEYBOARD device instead of BUILT_IN_KEYBOARD.
    
    Added the concept of a key modifier behavior so that
    MetaKeyKeyListener can distinguish between keyboards that use
    chorded vs. toggled modifiers.
    
    Wrote more robust key layout and key character map parsers
    to enable support for new keyboard features and user installable
    key maps.
    
    Fixed a bug in InputReader generating key ups when keys
    are released out of sequence.
    
    Updated tons of documentation.
    
    Currently QwertyKeyListener is being used for full keyboards
    with autotext and capitalization disabled.  This mostly works
    but causes some problems with character pickers, etc.
    These issues will be resolved in subsequent changes.
    
    Change-Id: Ica48f6097a551141c215bc0d2c6f7b3fb634d354
    Add logging of various important graphics events
    
    There are 16 events logged in the event log:
    SF_APP_DEQUEUE_BEFORE
    SF_APP_DEQUEUE_AFTER
    SF_APP_LOCK_BEFORE
    SF_APP_LOCK_AFTER
    SF_APP_QUEUE
    
    SF_REPAINT
    SF_COMPOSITION_COMPLETE
    SF_UNLOCK_CLIENTS
    SF_SWAP_BUFFERS
    SF_REPAINT_DONE
    
    SF_FB_POST_BEFORE
    SF_FB_POST_AFTER
    SF_FB_DEQUEUE_BEFORE
    SF_FB_DEQUEUE_AFTER
    SF_FB_LOCK_BEFORE
    SF_FB_LOCK_AFTER
    
    all events log the buffer conserned and a timestamp in microseconds.
    
    by default the logging is not enabled, to turn it on:
    adb shell service call SurfaceFlinger 1006 i31 1
    adb shell setprop debug.graphic_log 1
    
    The effect is immediate in SurfaceFlinger, but applications need to be
    restarted.
    
    Change-Id: Ifc2e31f7aed072d9a7dede20ff2ce59231edbec1
    Refactor input reader to support new device types more easily.
    
    Refactored the input reader so that each raw input protocol is handled
    by a separate subclass of the new InputMapper type.  This way, behaviors
    pertaining to keyboard, trackballs, touchscreens, switches and other
    devices are clearly distinguished for improved maintainability.
    
    Added partial support for describing capabilities of input devices
    (incomplete and untested for now, will be fleshed out in later commits).
    
    Simplified EventHub interface somewhat since InputReader is taking over
    more of the work.
    
    Cleaned up some of the interactions between InputManager and
    WindowManagerService related to reading input state.
    
    Fixed swiping finger from screen edge into display area.
    
    Added logging of device information to 'dumpsys window'.
    
    Change-Id: I17faffc33e3aec3a0f33f0b37e81a70609378612
    Add initial gamepad support.
    
    Change-Id: I0439648f6eb5405f200e4223c915eb3a418b32b9
    Native input dispatch rewrite work in progress.
    
    The old dispatch mechanism has been left in place and continues to
    be used by default for now.  To enable native input dispatch,
    edit the ENABLE_NATIVE_DISPATCH constant in WindowManagerPolicy.
    
    Includes part of the new input event NDK API.  Some details TBD.
    
    To wire up input dispatch, as the ViewRoot adds a window to the
    window session it receives an InputChannel object as an output
    argument.  The InputChannel encapsulates the file descriptors for a
    shared memory region and two pipe end-points.  The ViewRoot then
    provides the InputChannel to the InputQueue.  Behind the
    scenes, InputQueue simply attaches handlers to the native PollLoop object
    that underlies the MessageQueue.  This way MessageQueue doesn't need
    to know anything about input dispatch per-se, it just exposes (in native
    code) a PollLoop that other components can use to monitor file descriptor
    state changes.
    
    There can be zero or more targets for any given input event.  Each
    input target is specified by its input channel and some parameters
    including flags, an X/Y coordinate offset, and the dispatch timeout.
    An input target can request either synchronous dispatch (for foreground apps)
    or asynchronous dispatch (fire-and-forget for wallpapers and "outside"
    targets).  Currently, finding the appropriate input targets for an event
    requires a call back into the WindowManagerServer from native code.
    In the future this will be refactored to avoid most of these callbacks
    except as required to handle pending focus transitions.
    
    End-to-end event dispatch mostly works!
    
    To do: event injection, rate limiting, ANRs, testing, optimization, etc.
    
    Change-Id: I8c36b2b9e0a2d27392040ecda0f51b636456de25
    split libsurfaceflinger_client and libcamera_client out of libui
    eclair snapshot
    fix [2170319] gmail bulk operation checkbox latency on passion
    
    This also fixes [2152536] ANR in browser
    
    When SF is enqueuing buffers faster than SF dequeues them.
    The update flag in SF is not counted and under some situations SF will only
    dequeue the first buffer. The state at this point is not technically
    corrupted, it's valid, but just delayed by one buffer.
    
    In the case of the Browser ANR, because the last enqueued buffer was delayed
    the resizing of the current buffer couldn't happen.
    
    The system would always fall back onto its feet if anything -else- in
    tried to draw, because the "late" buffer would be picked up then.
    fix [2167050] glTexImage2D code path buggy in SurfaceFlinger
    
    When EGLImage extension is not available, SurfaceFlinger will fallback to using
    glTexImage2D and glTexSubImage2D instead, which requires 50% more memory and an
    extra copy. However this code path has never been exercised and had some bugs
    which this patch fix.
    
    Mainly the scale factor wasn't computed right when falling back on glDrawElements.
    We also fallback to this mode of operation if a buffer doesn't have the adequate
    usage bits for EGLImage usage.
    
    This changes only code that is currently not executed. Some refactoring was needed to
    keep the change clean. This doesn't change anything functionaly.
    Fix sim-eng build.
    
    Appears to have been broken by:
    
    commit 9779b221e999583ff89e0dfc40e56398737adbb3
    Author: Mathias Agopian <mathias@google.com>
    Date:   Mon Sep 7 16:32:45 2009 -0700
    
        fix [2068105] implement queueBuffer/lockBuffer/dequeueBuffer properly
    
    For some reason we don't like to have "-lpthread" globally -- it's a no-op
    on device builds, but required for many host tools and all sim binaries --
    so adding the use of pthread calls requires adding the library explicitly.
    fix [2068105] implement queueBuffer/lockBuffer/dequeueBuffer properly
    
    Rewrote SurfaceFlinger's buffer management from the ground-up.
    The design now support an arbitrary number of buffers per surface, however the current implementation is limited to four. Currently only 2 buffers are used in practice.
    
    The main new feature is to be able to dequeue all buffers at once (very important when there are only two).
    
    A client can dequeue all buffers until there are none available, it can lock all buffers except the last one that is used for composition. The client will block then, until a new buffer is enqueued.
    
    The current implementation requires that buffers are locked in the same order they are dequeued and enqueued in the same order they are locked. Only one buffer can be locked at a time.
    
    eg. Allowed sequence:   DQ, DQ, LOCK, Q, LOCK, Q
    eg. Forbidden sequence: DQ, DQ, LOCK, LOCK, Q, Q
    added two EGL helpers for selecting a config matching a certain pixelformat or native window type
    donut snapshot
    move ui/Time.cpp to core/jni, since this is the only place it is used
    minor clean-up to Rect and Point.
    
    - return "const" objects for overloaded operators to disallow constructs like: (a+b) = c;
    - don't return references to non-static members, it's not always safe.
    - Point.cpp was empty, so get rid of it
    checkpoint: split libutils into libutils + libbinder
    Region now has its own implementation instead of relying on SkRegion, which allows us to break libui's dependency on libcorecg.
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    frameworks_native: Add back PixelFormatInfo
    
    Change-Id: Ie6ee04bd4711ac412f291c0f5db2b32db74c5da0
    libgui: Add a test for SRGB surfaces
    
    Add SRGBTest.RenderToSRGBSurface, which validates that passing the
    SRGB colorspace attributes to eglCreateWindowSurface actually
    results in an SRGB surface by comparing the output values to those
    of a standard RGB surface.
    
    Change-Id: I3d5fef8070ed8fa2357ddd1c5fcc849ae3fbd12a
    get rid of HAL pixelformats 5551 and 4444
    
    Change-Id: I39409103144c1ba09078c4ddc323a58987fb09ea
    get rid of PixelFormatInfo and simplify things
    
    Change-Id: I025a362cc12d5b9b794fac14be500e25aab65396
    PixelFormat.UNKNOWN should return an error when queried
    
    Bug: 6294260
    Change-Id: Iad6f7bcbdda0a684abca6d9584da611a8b28f7ab
    deprecate L_8, LA_88 and RGB_332 in sdk
    
    re-add support for pixelformats L_8, LA_88 and RGB_332 in libui
    for backward compatibility.
    
    This may or may not fix 6058926
    
    Bug: 6049685
    Change-Id: Ic1b8b4cc994522f7fe664da64c0ef76b98bc6d53
    remove libui's dependency on libpixelflinger
    
    this also remove support for unused pixelformats.
    
    Change-Id: I2c759a6d2daa740f3786ed62095def8047ae933d
    remove unused pixel format
    
    Change-Id: I55bc3cc41385743c07f7e4de06335c922f746f73
    Remove the YV16 format for simplicity's sake.
    
    Change-Id: Iee03d100933ba0c67b13d51e0435be3b4cd953cf
    remove unused YUV formats
    
    Change-Id: Ie84616f842c7e0329d68e67e65a65d510558004b
    remove unused YUV formats
    
    Change-Id: Id0ae28b1700cf771cdbe0ca27b139d32cab90b2a
    Added support for the GL_TEXTURE_EXTERNAL target
    
    This will allow us to support YUV surfaces.
    
    Change-Id: I2d4da75f1006a5285bdc552695d4caeecccf2183
    fix a bug I introduced recently where YUV formats would crash the system
    get rid off the YUV formats at the libui layer
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Initial Contribution
    libui: fix passing Fence object over binder
    
    The Fence object was writing a size_t into the binder buffer
    in flatten, which changes size if the producer and consumer
    are running in a 32-bit and a 64-bit process.  Use a uint32_t
    instead.
    
    Change-Id: Ifed526513800ce27f9d605101cddd922292cca37
    Make Flattenable not virtual
    
    Fallout from the Flattenable change, update all its uses.
    
    Additionnaly, fix/tighten size checks when (un)flatten()ing
    things.
    
    Removed the assumption by some flattenables (e.g.: Fence)
    that the size passed to them would be exact (it can
    and will be larger in some cases)
    
    The code in Parcel is a bit complicated so that we don't
    have to expose the full implementation (and also to
    keep the code smallish).
    
    Change-Id: I0bf1c8aca2a3128491b4f45510bc46667e566dde
    make the warning timout of Fence::waitForever() implicit and longer
    
    - timeout is now 3 seconds instead of 1
    - simplifies the API a bit
    - allows us to change/tweak this timeout globaly
    
    Bug: 8988871
    
    Change-Id: I8d3c6ec43a372f602fb3f29856710339f86c0ec9
    libgui: disallow NULL Fence pointers
    
    This change eliminates the uses of a NULL sp<Fence> indicating that no waiting
    is required.  Instead we use a non-NULL but invalid Fence object for which the
    wait methods will return immediately.
    
    Bug: 7892871
    Change-Id: I5360aebe3090422ef6920d56c99fc4eedc642e48
    Fix memory leak when getting signal time for unsignaled fences
    
    Bug: 8000983
    Change-Id: Ie88ed23fc5e8c95bfade364e090e90b7f070fa8e
    SurfaceFlinger: refactor frame time tracking
    
    This change moves the frame time history tracking code out of Layer and into a
    new class called FrameTracker.  It also changes the tracking to use signal
    timestamps from fences when available for more accurate results.
    
    Change-Id: I323c5f075c58bf86ce363b52af885ad0f6365f2b
    Fence didn't manager sync_wait error codes properly
    
    error codes are returned in errno, this caused ::waitForwever()
    to only wait for 1 second and return improper error code (-1).
    
    needed to help debugging 7316632
    
    Bug: 7316632
    Change-Id: Ie144f614a88393393972a3a770c6b4b0581f961a
    Add Fence::waitForever which logs a warning timeout, and use it
    
    Bug: 7217641
    Change-Id: If0c1a613ead307c4045a47824174bf40c72bc7d7
    log more info on fence sync_merge error
    
    also fix a typo where the wrong value was passed to sterror.
    
    Change-Id: I4df2abe582e14c8f816b65818f4593a6bd3c23ea
    Pass fences with buffers from SurfaceTextureClient
    
    Change-Id: I09b49433788d01e8b2b3684bb4d0112be29538d3
    Return fence to client in dequeuBuffer
    
    Change-Id: Ic19750793ad993f0e85391f3cabd743ba565d4c9
    Transfer HWC release fences to BufferQueue
    
    After a HWC set, each SurfaceFlinger Layer retrieves the release fence
    HWC returned and gives it to the layer's SurfaceTexture. The
    SurfaceTexture accumulates the fences into a merged fence until the
    next updateTexImage, then passes the merged fence to the BufferQueue
    in releaseBuffer.
    
    In a follow-on change, BufferQueue will return the fence along with
    the buffer slot in dequeueBuffer. For now, dequeueBuffer waits for the
    fence to signal before returning.
    
    The releaseFence default value for BufferQueue::releaseBuffer() is
    temporary to avoid transient build breaks with a multi-project
    checkin. It'll disappear in the next change.
    
    Change-Id: Iaa9a0d5775235585d9cbf453d3a64623d08013d9
    libui: add the Fence class
    
    This change adds the Fence class to libui for to wrap the libsync
    functionality.
    
    Change-Id: I93a31baeee608b93c14da807a32013dabf783f84
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Show build config in dumpsys SurfaceFlinger
    
    This adds a line to the "dumpsys SurfaceFlinger" output that shows
    build-time configuration values.
    
    Example:
     Build configuration: [sf HAS_CONTEXT_PRIORITY] [libui] \
      [libgui USE_FENCE_SYNC]
    
    Bug 7206633
    
    Change-Id: Ibe1856b459d34a4be6ee83a4ebfd2807e6cc68a0
    Refactored DummyConsumer
    
    DummyConsumer no longer uses a ProxyConsumerListener
    
    Change-Id: I0a99428b3f9dae82cb47d5da3589de77653f3d7c
    Added a DummyConsumer for use with BufferQueue.
    
    The DummyConsumer is a consumer that can connect to BufferQueue
    that does nothing.  It is required as BufferQueue checks
    if a consumer is connected.  Also fixes a bug where SurfaceTexture
    was reusing old texture slots.
    
    Bug: 6172739
    Change-Id: I5e7a118dd4d07807ba4c763200242b5ee7d3412b
    crash if getNativeBuffer() called on NULL GraphicBuffer
    
    If getNativeBuffer() is called on a NULL GraphicBuffer the
    static_cast of this from GraphicBuffer* to ANativeWindowBuffer*
    will return a small pointer like (ANativeWindowBuffer*)0x10.
    This value can propagate past NULL checks until it causes a crash
    far away from the original NULL pointer.  Crash immediately
    instead.
    
    Change-Id: Id614b9eb1484108b3c3c733545309844c4b87532
    crash if getNativeBuffer() called on NULL GraphicBuffer
    
    If getNativeBuffer() is called on a NULL GraphicBuffer the
    static_cast of this from GraphicBuffer* to ANativeWindowBuffer*
    will return a small pointer like (ANativeWindowBuffer*)0x10.
    This value can propagate past NULL checks until it causes a crash
    far away from the original NULL pointer.  Crash immediately
    instead.
    
    Change-Id: Id614b9eb1484108b3c3c733545309844c4b87532
    Use asynchronous lock/unlock API
    
    The gralloc API now provides a way for using lock/unlock with the Android
    explicit synchronisation concept. This changes updates the GraphicBuffer class
    to also expose this functionality, and updates the Surface class to make use of
    in line with the dequeueBuffer/queueBuffer mechanism.
    
    This new behaviour is dependent on GRALLOC_MODULE_API_VERSION_0_3. If the local
    gralloc module does not support this then the existing synchronous lock/unlock
    mechanism will be used.
    
    Change-Id: I8c3fd9592e0c5400ac9be84450f55a77cc0bbdc5
    Revert "Use asynchronous lock/unlock API"
    
    This reverts commit 378ef07760eda717367d9429428c42d54d54d9a7.
    
    Change-Id: I1de5ab973b5383633e75924fe90ac3ca8216c36a
    Use asynchronous lock/unlock API
    
    The gralloc API now provides a way for using lock/unlock with the Android
    explicit synchronisation concept. This changes updates the GraphicBuffer class
    to also expose this functionality, and updates the Surface class to make use of
    in line with the dequeueBuffer/queueBuffer mechanism.
    
    This new behaviour is dependent on GRALLOC_MODULE_API_VERSION_0_3. If the local
    gralloc module does not support this then the existing synchronous lock/unlock
    mechanism will be used.
    
    Change-Id: I77daa1beb197b63b1c2f281b8414ac4ae4b5b03c
    fix GraphicBuffer::flatten crash issue when handle is null
    
    Change-Id: I0d3727e4366cac355791e52cb7790bf8f3c51527
    Signed-off-by: Jun Jiang <jun.a.jiang@intel.com>
    Add unique ID to GraphicBuffer
    
    Adds a globally-unique ID (PID + sequence number) to every
    GraphicBuffer, which will remain the same while crossing Binder,
    even if the underlying handles change.
    
    Change-Id: Ib11330a4c5e99621b82204e0adb31b9a88658426
    Added null check
    
    Don't dereference "handle" if it's NULL.
    
    Bug 13348578
    
    Change-Id: Ifa6758616c41cf84467af6db29c779d26901a01c
    Graphics:Add error check when create GraphicBuffer
    
    Change-Id: Ib0ca59bf1dfe4ae0266c29c91c1dbe3d02c0904e
    Author: Lingyun Zhu <lingyun.zhu@intel.com>
    Signed-off-by: Lingyun Zhu <lingyun.zhu@intel.com>
    Signed-off-by: Shuo Gao <shuo.gao@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Author-tracking-BZ: 50141
    remove unused code form GraphicBuffer
    
    Change-Id: I0dd67f1f93f654331e8f17b55730931dbc695ca7
    Make Flattenable not virtual
    
    Fallout from the Flattenable change, update all its uses.
    
    Additionnaly, fix/tighten size checks when (un)flatten()ing
    things.
    
    Removed the assumption by some flattenables (e.g.: Fence)
    that the size passed to them would be exact (it can
    and will be larger in some cases)
    
    The code in Parcel is a bit complicated so that we don't
    have to expose the full implementation (and also to
    keep the code smallish).
    
    Change-Id: I0bf1c8aca2a3128491b4f45510bc46667e566dde
    Add support for HAL_PIXEL_FORMAT_YCbCr_420_888
    
    - Add fields to CpuConsumer::LockedBuffer for new information
    - New lock methods for GraphicBuffer and GraphicBufferMapper for
      the format
    
    Bug: 8734880
    Change-Id: If31f82c62d64b6942cf4cc6e5715585c03273f12
    libgui: add some error checks
    
    This change adds a few error checks both in the framework and in some tests.
    
    Change-Id: I2baf2676942a0dc15866e75852a775a0091ed16d
    remove dependency on android_native{s_priv|buffer}.h
    
    Change-Id: Ie4b95f7061c240f37c504414259f92d72c4ffc89
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Tweaks for forward-compatibility
    
    Change-Id: Iec525edc186e78d5d865f82dd5b1f56263c22e86
    frameworks/base: android_native_buffer_t -> ANativeWindowBuffer
    
    Change-Id: Idc2eabaa805bb6d308ebb315872623f28d428417
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    [3171580] Add transform field to native buffers. (DO NOT MERGE)
    
    This field indicate how the content of the buffer
    needs to be transformed.
    
    Change-Id: Ide3e980a90599e931406135693231276626adbbb
    [3171580] don't automatically log GraphicBuffer allocation failures
    
    some of these failures are not fatal and even expected in some cases
    so they should not emit a dump in the log in those cases.
    
    Change-Id: Idcfa252e3bfa9d74e27fe4ad8f8623aa01aa9c5e
    Move binder magic from the Surface class to GraphicBuffer.
    
    - Register buffers with Gralloc when unflattening a GraphicBuffer (rather than
    doing it in the Surface class).
    - Add support for a GraphicBuffer that wraps an android_native_window_t*.
    
    Change-Id: I029ac086111bbac800e5ca37eb505f558b718cd8
    fix live wallpapers on Droid
    
    On omap3 h/w we force opaque formats to RGB_565 instead of RGBX_8888
    because the GL driver doesn't support it. RGBX_8888 is always remapped
    to RGBA_8888.
    
    Change-Id: I0bfabeb98c8d3a399079e6797cf2a0ee95915324
    allow re-targetting of surfaces
    
    Surfaces can now be parcelized and sent to remote
    processes. When a surface crosses a process
    boundary, it looses its connection with the
    current process and gets attached to the new one.
    
    Change-Id: I39c7b055bcd3ea1162ef2718d3d4b866bf7c81c0
    split surface management from surface's buffers management
    
    Change-Id: If3c5655d1231f8f0c49ba68f972b1b20c93b3f87
    fix a bug where fading in/out of opaque 32-bits windows wasn't working
    
    opaque 32-bits windows are now allocated as RGBX_8888 buffers and
    SurfaceFlinger always uses GL_MODULATE instead of trying to
    optimize to GL_REPLACE when possible (makes no sense on
    h/w accelerated GL).
    
    we still have a small hack for devices that don't support
    RGBX_8888 in their gralloc implementation where we revert to
    RGBA_8888.
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    fix[2228133] pixelflinger ignores the "vertical stride" leading to artifacts when playing back video
    
    we lost the concept of vertical stride when moving video playback to EGLImage.
    Here we bring it back in a somewhat hacky-way that will work only for the
    softgl/mdp backend.
        fix [2143798] Need to figure out how to do video
    
        Use EGLImageKHR instead of copybit directly.
        We now have the basis to use streaming YUV textures (well, in fact
        we already are). When/if we use the GPU instead of the MDP we'll
        need to make sure it supports the appropriate YUV format.
    
        Also make sure we compile if EGL_ANDROID_image_native_buffer is not supported
    fix [2167050] glTexImage2D code path buggy in SurfaceFlinger
    
    When EGLImage extension is not available, SurfaceFlinger will fallback to using
    glTexImage2D and glTexSubImage2D instead, which requires 50% more memory and an
    extra copy. However this code path has never been exercised and had some bugs
    which this patch fix.
    
    Mainly the scale factor wasn't computed right when falling back on glDrawElements.
    We also fallback to this mode of operation if a buffer doesn't have the adequate
    usage bits for EGLImage usage.
    
    This changes only code that is currently not executed. Some refactoring was needed to
    keep the change clean. This doesn't change anything functionaly.
    [1/2] GraphicBufferMapper: Add MT6589-specific methods
    
    Change-Id: I23af90e532fb5f9496337fb7ddcb3ecc11fb78b4
    Use asynchronous lock/unlock API
    
    The gralloc API now provides a way for using lock/unlock with the Android
    explicit synchronisation concept. This changes updates the GraphicBuffer class
    to also expose this functionality, and updates the Surface class to make use of
    in line with the dequeueBuffer/queueBuffer mechanism.
    
    This new behaviour is dependent on GRALLOC_MODULE_API_VERSION_0_3. If the local
    gralloc module does not support this then the existing synchronous lock/unlock
    mechanism will be used.
    
    Change-Id: I8c3fd9592e0c5400ac9be84450f55a77cc0bbdc5
    Revert "Use asynchronous lock/unlock API"
    
    This reverts commit 378ef07760eda717367d9429428c42d54d54d9a7.
    
    Change-Id: I1de5ab973b5383633e75924fe90ac3ca8216c36a
    Use asynchronous lock/unlock API
    
    The gralloc API now provides a way for using lock/unlock with the Android
    explicit synchronisation concept. This changes updates the GraphicBuffer class
    to also expose this functionality, and updates the Surface class to make use of
    in line with the dequeueBuffer/queueBuffer mechanism.
    
    This new behaviour is dependent on GRALLOC_MODULE_API_VERSION_0_3. If the local
    gralloc module does not support this then the existing synchronous lock/unlock
    mechanism will be used.
    
    Change-Id: I77daa1beb197b63b1c2f281b8414ac4ae4b5b03c
    Add support for HAL_PIXEL_FORMAT_YCbCr_420_888
    
    - Add fields to CpuConsumer::LockedBuffer for new information
    - New lock methods for GraphicBuffer and GraphicBufferMapper for
      the format
    
    Bug: 8734880
    Change-Id: If31f82c62d64b6942cf4cc6e5715585c03273f12
    add more tracing for buffer allocation
    
    Change-Id: I8408850d0625985992ef2e2cd0c9f300b1fca293
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    fix [3259708] Graphic Buffer Mapper does not support YV12
    
    remove a bunch of a code that was there only to support broken gralloc implementations
    
    Change-Id: I3c1a9172224cbcc283601abfbbd695a20815451f
    eclair snapshot
    fix [2168531] have software-only gralloc buffer side-step the HAL
    fix [2167050] glTexImage2D code path buggy in SurfaceFlinger
    
    When EGLImage extension is not available, SurfaceFlinger will fallback to using
    glTexImage2D and glTexSubImage2D instead, which requires 50% more memory and an
    extra copy. However this code path has never been exercised and had some bugs
    which this patch fix.
    
    Mainly the scale factor wasn't computed right when falling back on glDrawElements.
    We also fallback to this mode of operation if a buffer doesn't have the adequate
    usage bits for EGLImage usage.
    
    This changes only code that is currently not executed. Some refactoring was needed to
    keep the change clean. This doesn't change anything functionaly.
    Fix a debug statement in BufferMapper
    move opengl/include/EGL/android_natives.h to include/ui/egl/android_natives.h and don't include it from egl.h
    
    the android_native_ types are just forward declared in egl.h
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    Squashed commit of the following:
    
    commit e5c24638f98162c3b75b4c67a16b510d38e31341
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Apr 17 14:09:03 2009 -0700
    
        oops forgot this file.
    
    commit 282642632d0cb12882eecf42e0fdfb2343275de1
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Apr 17 14:07:32 2009 -0700
    
        use a helper macro for creating Singleton<>'s static attributes instances.
    fix a rookie mistake causing Singleton<> to be a "multiton". Also improve the BufferMapper's debugging, but turn it off.
    
    Squashed commit of the following:
    
    commit 04e9cae7f806bd65f2cfe35c011b47a36773bbe5
    Author: Mathias Agopian <mathias@google.com>
    Date:   Wed Apr 15 18:30:30 2009 -0700
    
        fix and improve BufferMapper's tracking of mapped buffers.
    
    commit 1a8deaed15811092b2349cc3c40cafb5f722046c
    Author: Mathias Agopian <mathias@google.com>
    Date:   Wed Apr 15 00:52:02 2009 -0700
    
        fix some bugs with the Singleton<> class. untested.
    
    commit ed01cc06ad70cf640ce1258f01189cb1a96fd3a8
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Apr 14 19:29:25 2009 -0700
    
        some work to debug the Singleton<> template.
    more debugging tools around BufferMapper
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    Adding render stats APIs to UiAutomation (framework native).
    
    bug:12927198
    
    Change-Id: Ibb1c07f7d89e11281e5c1f27f412a29ac6f9c4ab
    take the "transparent region" into account for blending
    
    until now it was only used to discard a layer entirely.
    we're now reducing the size of the layer if it is still
    visible, if possible.
    
    this works for instance when a surfaceView is used and
    only the menu bar is displayed over it.
    
    Change-Id: I3f5527c5cd1e69ecc968272c8948f1513ada8c55
    reformat Rect.{cpp|h}
    
    Change-Id: I45b1f6646541a1abacce1e70df00a770e47b820e
    SurfaceFlinger: add a crop to the layer state
    
    This change adds a crop rectangle specified in window coordinates to the layer
    state.  The all window pixels outside this crop rectangle are treated as though
    they were fully transparent.  This change also adds the plumbing necessary for
    WindowManager to set that crop.
    
    Change-Id: I582bc445dc8c97d4c943d4db8d582a6ef5a66081
    libui: add the Rect::transform method
    
    This change adds a method to Rect to transform a rectangle by a graphics HAL
    transform.
    
    Change-Id: Ic0d0988e731bdb5662faee41a5927b1242891658
    Bug: 6299171
    Add ANativeWindow API for directly drawing to the surface bits.
    
    Also other cleanup and fixes:
    
    - We now properly set the default window format to 565.
    - New APIs to set the window format and flags from native code.
    - Tweaked glue for simpler handling of the "destroy" message.
    - Um, other stuff.
    
    Change-Id: Id7790a21a2fa9a19b91854d225324a7c1e7c6ade
    donut snapshot
    minor clean-up to Rect and Point.
    
    - return "const" objects for overloaded operators to disallow constructs like: (a+b) = c;
    - don't return references to non-static members, it's not always safe.
    - Point.cpp was empty, so get rid of it
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    libs/ui: Add support for triple framebuffers
    
    Change-Id: I90dd38deeeda9a3785b87286cc7d252c6f948750
    Move remaining bits of lockBuffer to dequeueBuffer
    
    FramebufferNativeWindow::dequeueBuffer now waits for the next buffer
    to be non-front in addition to being free.
    
    Change-Id: I991f154958cc6b488b1241aba83d1f95a0513b3c
    Update ANativeWindow clients for sync
    
    This change updates the uses of ANativeWindow to use the new ANW functions that
    accept and return Sync HAL fence file descriptors.
    
    Change-Id: I3ca648b6ac33f7360e86754f924aa072f95242f6
    remove dependency on android_native{s_priv|buffer}.h
    
    Change-Id: Ie4b95f7061c240f37c504414259f92d72c4ffc89
    libui: add ability to force a framebuffer format for EGL's use
    
    This does not actually change the framebuffer format. It merely
    fakes this format to surfaceflinger so that when it creates
    framebuffer surfaces it will use this format. It's really a giant
    HACK to allow interworking with buggy gralloc+GPU driver
    implementations. You should *NEVER* need to set this for shipping
    devices.
    
    Change-Id: I03eeb5b4d72838ef219df386ecc489fc20ab9cc7
    Signed-off-by: Dima Zavin <dima@android.com>
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    remove dead/usnused code
    
    Change-Id: I6fa2bc6ee01790abd2c1533f043d61a5e5c8d26e
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    connect/disconnect is now called from our EGL wrapper
    
    the original connect/disconnect hooks are deprecated
    and replace by api_connect/api_disconnect. the original
    hooks are no no-ops.
    api_connect/api_disconnect is now only called from the
    android framework.
    
    Bug: 5057915
    Change-Id: I8ca64cd1acd6cabf915bf54689ec2e5f6dfa495a
    Fix a few issues with NATIVE_WINDOW_TRANSFORM_HINT
    
    - fixed uninitialized variable
    - set hint to indentity when transform is too complex
    - make sure FrameBufferNativeWindow doesn't fail on needed perform commands
    
    Bug: 4487161
    Change-Id: I7cb2b0869b72404732eca7cb2d145ff669e2ed9b
    implement: "Add an ANativeWindow API for SurfaceFlinger to suggest an optimal buffer orientation"
    
    Bug: 4487161
    Change-Id: I883f34efe542c2a566d04966f873374f40c50092
    Add set_scaling_mode() to ANativeWindow.
    
    This allows to specify the scaling mode independently from
    the buffer size.
    
    Change-Id: Iaa2baa660445531a97d3fac192e580f4929c5d3b
    move lock/unlock implementaion outside of Surface into SurfaceTextureClient
    
    This makes ANativeWindow_lock/ANativeWindow_unlockAndPost work
    with ANativeWindows implemented by Surface and SurfaceTextureClient.
    
    Also, Surface now inherits directly from SurfaceTextureClient.
    
    Bug: 5003724
    Change-Id: I9f285877c7bae9a262e9a7af91c2bae78804b2ef
    EGL: fix the ANativeWindow size/fmt override
    
    This change fixes how the Android EGL layer overrides the size and
    format of an ANativeWindow in eglCreateWindowSurface.  The new behavior
    is to leave the size untouched when overriding the format.  The previous
    behavior was to reset the ANativeWindow to use the default size set by
    the ANativeWindow implementation.
    
    It also adds two new 'perform' methods to the ANativeWindow interface:
    set_buffers_dimensions and set_buffers_format, and redefines the
    behavior of set_buffers_geometry to be the combination of these two new
    methods.
    
    Additionally, this change adds an error check for the return value of
    the new native_window_set_buffers_format call, which required adding a
    (stub) handler for to FramebufferNativeWindow.
    
    Change-Id: I805c7ccd8d4730dfb132d10d8bc3fb058a0b9df1
    frameworks/base: android_native_buffer_t -> ANativeWindowBuffer
    
    Change-Id: Idc2eabaa805bb6d308ebb315872623f28d428417
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    frameworks/base: make the ANativeWindow query() method const
    
    query() does not modify the object's data, so it needs to be a const method
    
    Change-Id: I67c40a3c865461e6f1cc2193fd2d74286ff6ac8f
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    ANativeWindow: add query for the concrete type.
    
    This change adds a query to the ANativeWindow interface for getting the
    concrete type of the ANativeWindow.
    
    Bug: 4086509
    Change-Id: I64aa86d72fbca3b52a98e1fc35608737781a3178
    ANativeWindow: add query for the concrete type.
    
    This change adds a query to the ANativeWindow interface for getting the
    concrete type of the ANativeWindow.
    
    Bug: 4086509
    Change-Id: I64aa86d72fbca3b52a98e1fc35608737781a3178
    surfaceflinger: add support for gralloc dump hooks
    
    Change-Id: Ib6f539ed0132b70d040d653c03d52cc04249ac3c
    Framebuffer: Support variable number of framebuffers in the UI
    
    This change defines a macro NUM_FRAME_BUFFERS to set
    the desired number of framebuffers to be used by the UI,
    instead of hard-coding 2 framebuffers.
    
    Aditional logic has been  added to handle the initialization
    and destruction of NUM_FRAME_BUFFERS buffers.
    
    Change-Id: I3a4bfec3e0f453432f2ffebf084c00f574d3be46
    Signed-off-by: Rodrigo Obregon <robregon@ti.com>
    Add logging of various important graphics events
    
    There are 16 events logged in the event log:
    SF_APP_DEQUEUE_BEFORE
    SF_APP_DEQUEUE_AFTER
    SF_APP_LOCK_BEFORE
    SF_APP_LOCK_AFTER
    SF_APP_QUEUE
    
    SF_REPAINT
    SF_COMPOSITION_COMPLETE
    SF_UNLOCK_CLIENTS
    SF_SWAP_BUFFERS
    SF_REPAINT_DONE
    
    SF_FB_POST_BEFORE
    SF_FB_POST_AFTER
    SF_FB_DEQUEUE_BEFORE
    SF_FB_DEQUEUE_AFTER
    SF_FB_LOCK_BEFORE
    SF_FB_LOCK_AFTER
    
    all events log the buffer conserned and a timestamp in microseconds.
    
    by default the logging is not enabled, to turn it on:
    adb shell service call SurfaceFlinger 1006 i31 1
    adb shell setprop debug.graphic_log 1
    
    The effect is immediate in SurfaceFlinger, but applications need to be
    restarted.
    
    Change-Id: Ifc2e31f7aed072d9a7dede20ff2ce59231edbec1
    Introduce official public NativeWindow type.
    
    Not yet hooked up to anything in the NDK, but requires renaming
    the existing android_native_window_t type everywhere.
    
    Change-Id: Iffee6ea39c93b8b34e20fb69e4d2c7c837e5ea2e
    implement connect/disconnect in our native_window_t implementations
    
    the framebuffer implementation doesn't do anything special with this
    but the surfaceflinger implementation makes sure the surface is not used
    by two APIs simultaneously.
    
    Change-Id: Id4ca8ef7093d68846abc2ac814327cc40a64b66b
    split libsurfaceflinger_client and libcamera_client out of libui
    android-2.1_r1 snapshot
    eclair snapshot
    Revert change incorrectly submitted as part of change #32153.
    
    Change-Id: I31c52beff03c0d038a257fc151eff3b8da60eddc
    Prevent crash in Home when using widgets whose ids collide with Home's
    resources.
    
    Bug #2228943.
    
    Approved by mcleron, triaged by ryanpc.
    
    Change-Id: Idf40f3b09502ae5d0d3b9a6a72c265a2de2ffca2
    fbDev wasn't initialized of hw_get_module failed, but was then used anyway.
    Android side of the fix for [2121211] Sholes has stutter during animations
    
    a new method, compostionComplete() is added to the framebuffer hal, it is used by surfaceflinger to signal the driver that the composition is complete, BEFORE it releases its client. This gives a chance to the driver to
    second take, hopefully this time it doesn't break one of the builds: "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    Revert "SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything."
    
    This reverts commit 8b76a0ac6fbf07254629ed1ea86af014d5abe050.
    SurfaceFlinger will now allocate buffers based on the usage specified by the clients. This allows to allocate the right kind of buffer automatically, without having the user to specify anything.
    
    This change makes SurfaceHolder.setType(GPU) obsolete (it's now ignored).
    Added an API to android_native_window_t to allow extending the functionality without ever breaking binary compatibility. This is used to implement the new set_usage() API. This API needs to be called by software renderers because the default is to use usage flags suitable for h/w.
    better error handling
    added NATIVE_WINDOW_FORMAT attribute to android_native_window_t
    fixed some issues with the software renderer when surfaces are made current.
    
    there was several issues:
    - when a surface was made non-current, the last frame wasn't shown and the buffer could stay locked
    - when a surface was made current the 2nd time, it would not dequeue a new buffer
    
    now, queue/dequeue are done when the surface is made current.
    
    for this to work, a new query() hook had to be added on android_native_window_t, it allows to retrieve some attributes of a window (currently only width and height).
    make use of new eglGetRenderBufferANDROID extension to clean-up a bit a few hacks added recently
    hack copybit back in for video playback on msm7k. we have h/w accelerated video again
    add support for update-on-demand in SurfaceFlinger
    get rid off unneeded flags
    move android_native_buffer_t declaration into its own private/ui/android_native_priv.h header, since user code should never have access to it.
    move opengl/include/EGL/android_natives.h to include/ui/egl/android_natives.h and don't include it from egl.h
    
    the android_native_ types are just forward declared in egl.h
    minor clean-up in FramebufferNativeWindow
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@130745
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    [DO NOT MERGE] GraphicBufferAllocator: stall alloc for async frees
    
    This change makes GraphicBufferAllocator::alloc wait for pending async frees to
    complete before attempting to allocate a gralloc buffer if there are more than
    8 pending async frees.
    
    Bug: 7696861
    Change-Id: I1fae86e13edefcaa153b8ce9fd057f335716059e
    DO NOT MERGE GraphicBufferAllocator: make frees async
    
    This change makes GraphicBufferAllocator::free queue a job to another thread to
    perform the actual free operation.  This prevents potentially slow free
    operations from blocking rendering.
    
    Bug: 7675940
    Change-Id: Id61099d66bb4c3949d04184e0d7f192ac18076b4
    add more tracing for buffer allocation
    
    Change-Id: I8408850d0625985992ef2e2cd0c9f300b1fca293
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    improve GraphicAllocator dump method
    
    GraphicAllocator debugging cannot deal with
    custom HAL formats. make this more obvious in the
    log.
    
    Change-Id: I202e58a7f213f32e725aa4eac62cdf6e50ca5894
    revert the surface purgatory list and dependent changes.
    
    6d0f6cb Revert "Fix [3513017] in lockscreen but showing empty launcher (live wallpaper) only"
    6154412 Revert "partially fix [3306150] HTML5 video with H/W acceleration blackout (DO NOT MERGE)"
    37c2a37 fix [3408713] Dialog window invisible sometimes
    
    It looks like there is a surface leak, it's unclear where it is.
    Without those reverts, this would cause a leak of the associated buffers
    which is far more problematic. this change might hide the surface leak.
    
    Bug: 4078032
    Change-Id: Iedcda3ffcdd2f69d41047b5c3134c1e867ff90d7
    partially fix [3306150] HTML5 video with H/W acceleration blackout (DO NOT MERGE)
    
    We used to guarantee that a layer in SurfaceFlinger would never be
    destroyed before all references (to its ISurface) on the client
    side would be released. At some point, this guarantee got
    relaxed to allow to free gralloc resources sooner. This last
    change was incorrect, because:
    - in implementations with reference-counting the gralloc resources
    wouldn't be released anyways, until all the mapping were gone
    - in implementations without ref counting, the client side
    would most likely crash or do something bad
    - it also caused the SharedBufferStack slot to be reallocated
    to another surface, which could be problematic if the client
    continued to use the surface after the window manager destroyed it.
    
    So, we essentially reinstate the guarantee that layers won't be
    destroyed until after all references to their ISurface are
    released.
    
    NOTE: This doesn't entirely fix 3306150 because there is another
    problem there where the Browser continues to use a surface after it
    has been destroyed.
    
    also improve SurfaceFlinger 'dumpsys' log
    
    list the purgatory, which shows windows that have been closed,
    but for which the client still has references.
    improve SurfaceFlinger 'dumpsys' log
    
    list the purgatory, which shows windows that have been closed,
    but for which the client still has references.
    
    Change-Id: I5168bb88cb328d5d77d71d0871deb9190f493126
    fix [3259708] Graphic Buffer Mapper does not support YV12
    
    remove a bunch of a code that was there only to support broken gralloc implementations
    
    Change-Id: I3c1a9172224cbcc283601abfbbd695a20815451f
    surfaceflinger: add support for gralloc dump hooks
    
    Change-Id: Ib6f539ed0132b70d040d653c03d52cc04249ac3c
    [3171580] don't automatically log GraphicBuffer allocation failures
    
    some of these failures are not fatal and even expected in some cases
    so they should not emit a dump in the log in those cases.
    
    Change-Id: Idcfa252e3bfa9d74e27fe4ad8f8623aa01aa9c5e
    when a zero dimension buffer is allocated, turn the allocation into
    a 1x1 buffer instead of Nx1 (or 1xN)
    
    Change-Id: I27eeb15e83e13002dd9405f4e52b54f7dffc0fe7
    fix [2545826] calling into gralloc with external lock held
    
    Change-Id: I2d0e017382404c684c768a0dd0423d574213f10a
    eclair snapshot
    fix [2168531] have software-only gralloc buffer side-step the HAL
    fix [2167050] glTexImage2D code path buggy in SurfaceFlinger
    
    When EGLImage extension is not available, SurfaceFlinger will fallback to using
    glTexImage2D and glTexSubImage2D instead, which requires 50% more memory and an
    extra copy. However this code path has never been exercised and had some bugs
    which this patch fix.
    
    Mainly the scale factor wasn't computed right when falling back on glDrawElements.
    We also fallback to this mode of operation if a buffer doesn't have the adequate
    usage bits for EGLImage usage.
    
    This changes only code that is currently not executed. Some refactoring was needed to
    keep the change clean. This doesn't change anything functionaly.
    a simple test app for gralloc
    Allways dump the list of allocated buffers when an allocation fails.
    
    Hopefully this will help us understand cases of failures such as [2148405]
    fix [2068105] implement queueBuffer/lockBuffer/dequeueBuffer properly
    
    Rewrote SurfaceFlinger's buffer management from the ground-up.
    The design now support an arbitrary number of buffers per surface, however the current implementation is limited to four. Currently only 2 buffers are used in practice.
    
    The main new feature is to be able to dequeue all buffers at once (very important when there are only two).
    
    A client can dequeue all buffers until there are none available, it can lock all buffers except the last one that is used for composition. The client will block then, until a new buffer is enqueued.
    
    The current implementation requires that buffers are locked in the same order they are dequeued and enqueued in the same order they are locked. Only one buffer can be locked at a time.
    
    eg. Allowed sequence:   DQ, DQ, LOCK, Q, LOCK, Q
    eg. Forbidden sequence: DQ, DQ, LOCK, LOCK, Q, Q
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    Squashed commit of the following:
    
    commit e5c24638f98162c3b75b4c67a16b510d38e31341
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Apr 17 14:09:03 2009 -0700
    
        oops forgot this file.
    
    commit 282642632d0cb12882eecf42e0fdfb2343275de1
    Author: Mathias Agopian <mathias@google.com>
    Date:   Fri Apr 17 14:07:32 2009 -0700
    
        use a helper macro for creating Singleton<>'s static attributes instances.
    fix a rookie mistake causing Singleton<> to be a "multiton". Also improve the BufferMapper's debugging, but turn it off.
    
    Squashed commit of the following:
    
    commit 04e9cae7f806bd65f2cfe35c011b47a36773bbe5
    Author: Mathias Agopian <mathias@google.com>
    Date:   Wed Apr 15 18:30:30 2009 -0700
    
        fix and improve BufferMapper's tracking of mapped buffers.
    
    commit 1a8deaed15811092b2349cc3c40cafb5f722046c
    Author: Mathias Agopian <mathias@google.com>
    Date:   Wed Apr 15 00:52:02 2009 -0700
    
        fix some bugs with the Singleton<> class. untested.
    
    commit ed01cc06ad70cf640ce1258f01189cb1a96fd3a8
    Author: Mathias Agopian <mathias@google.com>
    Date:   Tue Apr 14 19:29:25 2009 -0700
    
        some work to debug the Singleton<> template.
    more debugging tools around BufferMapper
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    native frameworks: 64-bit compile issues
    
    - Fix format (print/scanf)
    - Suppress unused argument warning messages (bonus)
    
    Change-Id: I05c7724d2aba6da1e82a86000e11f3a8fef4e728
    Add contains point method to Region
    
    Change-Id: I553433ff7ac39f14ffca8278960d2abc95b4dd63
    Make Flattenable not virtual
    
    Fallout from the Flattenable change, update all its uses.
    
    Additionnaly, fix/tighten size checks when (un)flatten()ing
    things.
    
    Removed the assumption by some flattenables (e.g.: Fence)
    that the size passed to them would be exact (it can
    and will be larger in some cases)
    
    The code in Parcel is a bit complicated so that we don't
    have to expose the full implementation (and also to
    keep the code smallish).
    
    Change-Id: I0bf1c8aca2a3128491b4f45510bc46667e566dde
    reformat Rect.{cpp|h}
    
    Change-Id: I45b1f6646541a1abacce1e70df00a770e47b820e
    latch transparent region hint only when we get a new frame
    
    since the transparent region hint really depends on the
    content of the window containing the SurfaceView
    (it's calculated by the view hierarchy based on
    overlapping views), it makes sense to latch it only when
    the content of the window (the app) changes.
    
    This should help fixing drawing artifacts when changing the
    layout of a window containing a SurfaceView.
    
    Bug: 8511430
    Change-Id: Ic3aa668495293cb4d82a2cd7dcf3b6a337287678
    improved CallStack a bit
    
    - added a ctor that updates and dumps the stack immediately
    - added a "logtag" parameter to dump()
    
    Change-Id: Ie51c256071d282591752243bdb4f68cf9ff8829d
    Add createTJunctionFreeRegion
    
    T-junction free regions are useful for rendering regions with various
    geometric transformations, and the Region's span-ordered, sorted rect
    list supports T-junction free storage without modification.
    
    This approach creates a T-junction free region by splitting each
    rectangle that is part of a vertical T-junction. This approach is two
    pass (up and down) so that divisions can trickle up/down to other
    adjacent spans.
    
    Change-Id: Ifcf5e6fe0034c96b00ef09a4433b2b0fce8f4300
    Region::validate() cannot be called from addRectUnchecked()
    
    addRectUnchecked() is allowed to be in an invalid state
    temporarily.
    
    Change-Id: I6f5162b5c49f378978c070a77abba35023fe918c
    strengthen region validation
    
    Change-Id: I75ee7bc4dd7a2f5357ac8994a23bc8b8bfb6eb44
    Add a way to retrieve a Region as a SharedBuffer
    
    Change-Id: Ia53cb905fbc88f899521658545f990fb9217b1e1
    change how we store Region data internally
    
    We used to keep the bounds of the region as a
    separate rectangle. Instead we now store it as the last
    element of the Vector<> of Rects.
    
    This has the benefit of being slightly more efficient when
    copying regions and reduces the overhead of small regions,
    but more importantly will allow us to export the underlaying
    SharedBuffer (eventually).
    
    Change-Id: I80790e4fb1a09a747a5616000cfef852ac4ce9e9
    don't generate a new Region when translating by 0,0
    
    since regions are copy-on-write, this prevents to
    duplicate the region entirely and offseting by 0,0 is
    fairly common.
    
    Change-Id: I9b8c286315a2e00dda01c2456397d72b5e12006b
    improve [un]marshalling of non-binder objects
    
    this change introduces a new class LightFlattenable<> which is
    a protocol to flatten simple objects that don't require
    binders or file descriptors; the benefit of this protocol is that
    it doesn't require the objects to have a virtual table and give us
    a consitant way of doing this.
    
    we also introduce an implementation of this protocol for
    POD structures, LightFlattenablePod<>.
    
    Parcel has been update to handle this protocol automatically.
    
    Sensor, Rect, Point and Region now use this new protocol.
    
    Change-Id: Icb3ce7fa1d785249eb666f39c2129f2fc143ea4a
    fix Region const_iterator.
    
    - it returned an empty rect when the region was empty, instead
    of returning an empty list of rect.
    
    - also fixed an infinite loop when boolean_operation was given
    an empty list of rects
    
    Change-Id: I62225c7dcd2832025bb8f12e6cb3762f2a7b36cb
    Preliminary support for clipRect(Rect, Op)
    
    This adds basic support for clip regions. It is currently disabled at compile
    time. Enabling clip regions will require setting up a stencil buffer.
    
    Change-Id: I638616a972276e38737f8ac0633692c3845eaa74
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Region cannot handle malformed Rects. Abort the Region op in that case.
    
    Bug: 5331198, 5334829
    Change-Id: I05f2aaa95c55fe9e4a5d23180bb3032896c88151
    Make sure Region handles invalid rectangles
    
    the boolean operation code assumes rects are valid and
    could go into an infinite loop if not. make sure we
    abort before that happens.
    
    Bug: 5331198, 5334829
    Change-Id: I8aa42b2e0b37238ec2434b794dd84c1a1b70f163
    Region cannot handle malformed Rects. Abort the Region op in that case.
    
    Bug: 5331198, 5334829
    Change-Id: Ib1fdbf6fb291e7f1191ccfe16b5ff29d73e7a474
    Make sure Region handles invalid rectangles
    
    the boolean operation code assumes rects are valid and
    could go into an infinite loop if not. make sure we
    abort before that happens.
    
    Bug: 5331198, 5334829
    Change-Id: Iee4e3b838ecf504ef21f7447fd2e34a56e7dc3f8
    fix [4093196] Device lock up - log spam with SharedBufferStack: waitForCondition(LockCondition) timed out
    
    a memory corruption happned when the buffer pool was resized
    (like when playing a video or using camera) and there was
    no current active buffer. In this case, the faulty code
    would index into an array at position -1 which corrupted
    24 bytes of data.
    
    also improved region validation code (ifdef'ed out by default)
    
    Bug: 4093196
    Change-Id: I915c581d131148959d720e00e3892e9186ab733d
    Optimize FBO drawing with regions.
    This optimization is currently disabled until Launcher is
    modified to take advantage of it. The optimization can be
    enabled by turning on RENDER_LAYERS_AS_REGIONS in the
    OpenGLRenderer.h file.
    
    Change-Id: I2fdf59d0f4dc690a3d7f712173ab8db3848b27b1
    fix [3148312] Region can access data out of bounds
    
    Change-Id: Ic46f31d40943f405e37da21a50b55edd5a2c4124
    Remove a dependency of Region (libui) on Parcel (libbinder).
    eclair snapshot
    should fix sim build
    Region::makeBoundsSelf() efficiently turns a region to its bounds
    make sure the Region code disallows constructs like "(a+b)=c;", which is somewhat meaningless.
    Region now has its own implementation instead of relying on SkRegion, which allows us to break libui's dependency on libcorecg.
    update surfaceflinger, libui and libagl to the new gralloc api
    
    - Currently the lock/unlock path is naive and is done for each drawing operation (glDrawElements and glDrawArrays). this should be improved eventually.
    - factor all the lock/unlock code in SurfaceBuffer.
    - fixed "showupdate" so it works even when we don't have preserving eglSwapBuffers().
    - improved the situation with the dirty-region and fixed a problem that caused GL apps to not update.
    - make use of LightRefBase() where needed, instead of duplicating its implementation
    - add LightRefBase::getStrongCount()
    - renamed EGLNativeWindowSurface.cpp to FramebufferNativeWindow.cpp
    
    - disabled copybits test, since it clashes with the new gralloc api
    
    - Camera/Video will be fixed later when we rework the overlay apis
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    Fix misuse of $(my-dir).
    
    Change-Id: I8b24f60826abe4b541de646cbc3df66929203301
    vector and matrix classes for graphics use
    
    - this implements vec2, vec3, vec4, which are float vectors
    of size 2, 3 and 4 respectively.
    
    the code allows easy instantiation of vectors of a different
    type via the tvec{2|3|4}<T> template classes.
    
    - this also implements mat4 which is a float 4x4 matrix. the
    tmat44<T> template class allows easy instantiation of a
    4x4 matrix of a different value_type.
    
    The vector types have some minimal support for the
    glsl style swizzled access; for instance:
    
      vec4 u;
      vec3 v = u.xyz;
    
    only .x, .xy, .xyz and their .stpq / .rgba equivalent are
    supported.
    
    most operators are supported on both vector and matrices:
    arithmetic, unary, compound assignment and comparison
    (bit-wise operators NOT supported).
    
    - operations available on vectors include:
    dot, length, distance, normalize and cross
    
    - operations available on matrices include:
    transpose, inverse, trace
    
    - and a few utilities to create matrices:
    ortho, frustum, lookAt
    
    Change-Id: I64add89ae90fa78d3f2f59985b63495575378635
    Add createTJunctionFreeRegion
    
    T-junction free regions are useful for rendering regions with various
    geometric transformations, and the Region's span-ordered, sorted rect
    list supports T-junction free storage without modification.
    
    This approach creates a T-junction free region by splitting each
    rectangle that is part of a vertical T-junction. This approach is two
    pass (up and down) so that divisions can trickle up/down to other
    adjacent spans.
    
    Change-Id: Ifcf5e6fe0034c96b00ef09a4433b2b0fce8f4300
    frameworks/base refactoring
    
    create the new libandroidfw from parts of libui and libutils
    
    Change-Id: I1584995616fff5d527a2aba63921b682a6194d58
    Fix uses of all-subdir-makefiles
    
    We should use all-makefiles-under instead.
    all-subdir-makefiles can be used only before any "include" statement.
    Before this change, both subdirs were actually not included.
    
    Change-Id: I6bf35d07f294a5012c9322096f999ac26e37432f
    Remove the simulator target from all makefiles.
    Bug: 5010576
    
    Change-Id: I04d722f258951a3078fe07899f5bbe8aac02a8e8
    Fix a regression with MotionEvent parceling.
    
    Also added some more unit tests.
    
    Change-Id: I413654294d1a998eec056884e6df5eaa50f3daf4
    Fix a regression with MotionEvent parceling.
    
    Also added some more unit tests.
    
    Change-Id: I413654294d1a998eec056884e6df5eaa50f3daf4
    Mouse pointer integration.
    
    Added support for loading the pointer icon from a resource.
    
    Moved the system server related bits of the input manager out
    of libui and into libinput since they do not need to be linked into
    applications.
    
    Change-Id: Iec11e0725b3add2b905c51f8ea2c3b4b0d1a2d67
    Add unit tests for native input and fix bugs identified.
    
    Fixed a bug where we would lose the first touch point when swiping out of
    the virtual key area.
    
    Fixed a bug where we would not send an ACTION_MOVE event in cases where
    individual pointers went down/up and the remaining pointers actually moved.
    This is important since many applications do not handle pointer movements
    during ACTION_POINTER_DOWN or ACTION_POINTER_UP.  In the case of
    ACTION_POINTER_UP the movement was completely lost since all pointers were
    dispatched using their old location rather than the new location.
    
    Improved motion event validation to check for duplicate pointer ids.
    
    Added an input source constant that was missing from the NDK api but
    defined in the framework api.
    
    Added a timestamp when reporting added/removed devices in EventHub.
    
    Bug: 3070082
    Change-Id: I3206a030f43b7616e2f48006e5a9d522c4d92e56
    Don't build framework tests for simulator target.
    
    Change-Id: I70f29c7eb307e4f3ec5702f4eb9d97b4342e2f36
    Even more native input dispatch work in progress.
    
    Added more tests.
    Fixed a regression in Vector.
    Fixed bugs in pointer tracking.
    Fixed a starvation issue in PollLoop when setting or removing callbacks.
    Fixed a couple of policy nits.
    
    Modified the internal representation of MotionEvent to be more
    efficient and more consistent.
    
    Added code to skip/cancel virtual key processing when there are multiple
    pointers down.  This helps to better disambiguate virtual key presses
    from stray touches (such as cheek presses).
    
    Change-Id: I2a7d2cce0195afb9125b23378baa94fd2fc6671c
    Support for multiple tests
    
    The build system enforces some invariants that were being ignored
    before.
    
    Change-Id: Ie7675042af7f961a507386c13b2a0b592b591af8
    Native input dispatch rewrite work in progress.
    
    The old dispatch mechanism has been left in place and continues to
    be used by default for now.  To enable native input dispatch,
    edit the ENABLE_NATIVE_DISPATCH constant in WindowManagerPolicy.
    
    Includes part of the new input event NDK API.  Some details TBD.
    
    To wire up input dispatch, as the ViewRoot adds a window to the
    window session it receives an InputChannel object as an output
    argument.  The InputChannel encapsulates the file descriptors for a
    shared memory region and two pipe end-points.  The ViewRoot then
    provides the InputChannel to the InputQueue.  Behind the
    scenes, InputQueue simply attaches handlers to the native PollLoop object
    that underlies the MessageQueue.  This way MessageQueue doesn't need
    to know anything about input dispatch per-se, it just exposes (in native
    code) a PollLoop that other components can use to monitor file descriptor
    state changes.
    
    There can be zero or more targets for any given input event.  Each
    input target is specified by its input channel and some parameters
    including flags, an X/Y coordinate offset, and the dispatch timeout.
    An input target can request either synchronous dispatch (for foreground apps)
    or asynchronous dispatch (fire-and-forget for wallpapers and "outside"
    targets).  Currently, finding the appropriate input targets for an event
    requires a call back into the WindowManagerServer from native code.
    In the future this will be refactored to avoid most of these callbacks
    except as required to handle pending focus transitions.
    
    End-to-end event dispatch mostly works!
    
    To do: event injection, rate limiting, ANRs, testing, optimization, etc.
    
    Change-Id: I8c36b2b9e0a2d27392040ecda0f51b636456de25
    eclair snapshot
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@126645
    Code drop from //branches/cupcake/...@124589
    Add createTJunctionFreeRegion
    
    T-junction free regions are useful for rendering regions with various
    geometric transformations, and the Region's span-ordered, sorted rect
    list supports T-junction free storage without modification.
    
    This approach creates a T-junction free region by splitting each
    rectangle that is part of a vertical T-junction. This approach is two
    pass (up and down) so that divisions can trickle up/down to other
    adjacent spans.
    
    Change-Id: Ifcf5e6fe0034c96b00ef09a4433b2b0fce8f4300
    vector and matrix classes for graphics use
    
    - this implements vec2, vec3, vec4, which are float vectors
    of size 2, 3 and 4 respectively.
    
    the code allows easy instantiation of vectors of a different
    type via the tvec{2|3|4}<T> template classes.
    
    - this also implements mat4 which is a float 4x4 matrix. the
    tmat44<T> template class allows easy instantiation of a
    4x4 matrix of a different value_type.
    
    The vector types have some minimal support for the
    glsl style swizzled access; for instance:
    
      vec4 u;
      vec3 v = u.xyz;
    
    only .x, .xy, .xyz and their .stpq / .rgba equivalent are
    supported.
    
    most operators are supported on both vector and matrices:
    arithmetic, unary, compound assignment and comparison
    (bit-wise operators NOT supported).
    
    - operations available on vectors include:
    dot, length, distance, normalize and cross
    
    - operations available on matrices include:
    transpose, inverse, trace
    
    - and a few utilities to create matrices:
    ortho, frustum, lookAt
    
    Change-Id: I64add89ae90fa78d3f2f59985b63495575378635
    vector and matrix classes for graphics use
    
    - this implements vec2, vec3, vec4, which are float vectors
    of size 2, 3 and 4 respectively.
    
    the code allows easy instantiation of vectors of a different
    type via the tvec{2|3|4}<T> template classes.
    
    - this also implements mat4 which is a float 4x4 matrix. the
    tmat44<T> template class allows easy instantiation of a
    4x4 matrix of a different value_type.
    
    The vector types have some minimal support for the
    glsl style swizzled access; for instance:
    
      vec4 u;
      vec3 v = u.xyz;
    
    only .x, .xy, .xyz and their .stpq / .rgba equivalent are
    supported.
    
    most operators are supported on both vector and matrices:
    arithmetic, unary, compound assignment and comparison
    (bit-wise operators NOT supported).
    
    - operations available on vectors include:
    dot, length, distance, normalize and cross
    
    - operations available on matrices include:
    transpose, inverse, trace
    
    - and a few utilities to create matrices:
    ortho, frustum, lookAt
    
    Change-Id: I64add89ae90fa78d3f2f59985b63495575378635
    binder: Turn on -Werror
    
    Change-Id: I0ee785927a7ae5f731b02176b0b781b87c22a24e
    Remove unused LOCAL_LDLIBS.
    
    Change-Id: I62904c410a66f256da8253764577acae18f964f8
    Use 64 bit binder interface if TARGET_USES_64_BIT_BINDER _or_ TARGET_IS_64_BIT is set.
    
    Change-Id: I46a29939fa29ec9421ab6dff3285502f69a31745
    Add BINDER_IPC_32BIT to CFLAGS unless TARGET_USES_64_BIT_BINDER is true
    
    Change-Id: I96c643123b0314c361b7f48a18d5c22c660d4ff5
    Cleanup Binder interface between sensorservice and BatteryStats
    
    Change-Id: Ia507160a2534059afe93849c8efc8407a046b50e
    libbinder: add libutils dependency
    
    Change-Id: I30c7291b04788c98faa43843a51b026b8a01932c
    libutils clean-up
    
    Change-Id: I6ff4cfc736751de2912c697f954e45e275f2d386
    App ops: new native access API.
    
    This is to help implementation of bug #8181262 and maybe
    bug #8181261
    
    Note the current code has not yet been tested; it is only
    known to compile at this point.
    
    Change-Id: I489674c96d0d3fc0ddacc92611931a19a9ee5230
    get rid of MemoryHeapPmem
    
    MemoryHeapPmem is not used any longer. PMEM is not a supported
    type of memory by the system anymore. a particular device might
    use PMEM and need something like MemoryHeapPmem, in this case this
    should be implemented in device specific code (HAL).
    
    This will most likely break older no longer supported targets.
    
    Change-Id: I434e4291219950018de8b793b0403bb2d92dd5cc
    move CursorWindow from libbinder to libandroidfw
    
    Change-Id: I3b304e4f74e0d0ec8b20c57296c62449c9a0f792
    PermissionCache caches permission checks
    
    This is intended to absorb the cost of the IPC
    to the permission controller.
    Cached permission checks cost about 3us, while
    full blown ones are two orders of magnitude slower.
    
    CAVEAT: PermissionCache can only handle system
    permissions safely for now, because the cache is
    not purged upon global permission changes.
    
    Change-Id: I8b8a5e71e191e3c01e8f792f253c379190eee62e
    Move CursorWindow class from core/jni to libbinder
    
    To allow use of the native CursorWindow class outside of the core framework jni
    
    Change-Id: I72e8dcb91a2c691130c33cdfd9a25d343da1c592
    Signed-off-by: Mike Lockwood <lockwood@android.com>
    Make static versions of libutils and libbinder.
    
    Fix some small static-initialization-order issues (and a static-
    initializers-missing issue) that result from doing so.  The static
    libraries don't actually get used for anything real at the moment --
    they're used for perf tests of bug 2660235.
    
    Bug: 2660235
    Change-Id: Iee2f38f79cc93b395e8d0a5a144ed92461f5ada0
    eclair snapshot
    keystore: remove old implementation and test.
    
    The new tests will be implemented in java.
    Add tests and misc fixes on keystore.
    
    * Refactor netkeystore.c to make client and server code testable.
    * Add a client test for setting new passwd and changing passwd.
    * Exclude "." and ".." from reset_keystore().
    * Change ServerCommand.executeCommand() to accept variable length of
      arguments and add convert() to marshalling the args to bytes.
    * Keystore.java is revised accordingly.
    donut snapshot
    donut snapshot
    Removed system/framework/android.awt.jar.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    binder: fix all warnings
    
    Fix warnings related to casting pointers to ints, using %d or %ld to
    print size_t/ssize_t, and unused parameters.
    
    Change-Id: I7a13ba83d402952989c1f795cd9e880a95b98d9e
    libutils clean-up
    
    Change-Id: I6ff4cfc736751de2912c697f954e45e275f2d386
    Fixed several 64-bit porting issues
    
    1. Use "%zu" instead of "%d" for size_t in printf
    2. Variable precision specifier (eg. "%.*s") in printf should be of type int.
       (iov_len is size_t which is 64-bit when compiled with -m64)
    3. Use PRId64 instead of "%lld" to print variables of type int64_t
    
    Change-Id: I2be40a6514b5dffa0038d62b9bccc3401b8756e6
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libutils clean-up
    
    Change-Id: I6ff4cfc736751de2912c697f954e45e275f2d386
    eclair snapshot
    move libbinder's header files under includes/binder
    checkpoint: split libutils into libutils + libbinder
    Fix broken error check in Parcel::readBlob
    
    mmap returns MAP_FAILED (which is -1) and not NULL on
    failure.
    
    Diagnosed by cferris.
    
    bug: 17909809
    
    Change-Id: I609788ebf94742ef88af002d2d3f3bc9b9e520ac
    Parcel: extra validation/debug code for writeDupFileDescriptor
    
    Temporary extra debug validation for b/17477219: a Parcel recipient is
    getting a positive but invalid fd unexpectedly. Trying to track down
    where it's coming from.
    
    Debug code for bug: 17477219
    Change-Id: Idb1e71621025a3928c7adc88fd44790e1abd2a01
    Parcel: extra validation/debug code for writeDupFileDescriptor
    
    Temporary extra debug validation for b/17477219: a Parcel recipient is
    getting a positive but invalid fd unexpectedly. Trying to track down
    where it's coming from.
    
    Debug code for bug: 17477219
    Change-Id: Idb1e71621025a3928c7adc88fd44790e1abd2a01
    Add more logging for dup(fd) failure
    
    Bug: 17477219
    Change-Id: Ide0ae16d777c9af783023c705c18a93c00999147
    Add more logging for dup(fd) failure
    
    Bug: 17477219
    Change-Id: Ide0ae16d777c9af783023c705c18a93c00999147
    Remove Parcel::writeIntPtr.
    
    All uses of this API have been removed. It should
    never have been made public in the first place.
    
    bug: 15424960
    Change-Id: Id07d24ec95b2b393e6da138a7e8a9a4ecebeca94
    Remove Parcel::writeIntPtr.
    
    All uses of this API have been removed. It should
    never have been made public in the first place.
    
    bug: 15424960
    
    (cherry picked from commit 7da40c0a84dd89e92201448dd5ed3387dc94df2b)
    
    Change-Id: I8d89f62dbdaee7149ef908e0c97417b85e0c48a2
    Fix mips build for libbinder.
    
    Mips specific code was using an uninitialized variable.
    
    (cherry picked from commit 2c68d380c9ef765a7d46e5a4735f39e6c27849f2)
    
    Change-Id: I6b562b3f6d2084b72e747736cbf43684c2049f8e
    Fix mips build for libbinder.
    
    Mips specific code was using an uninitialized variable.
    
    Change-Id: I445043c76ebfa420b26376ade60f8068b4ea0b11
    binder: Turn on -Werror
    
    Change-Id: I0ee785927a7ae5f731b02176b0b781b87c22a24e
    Add error message for hints when exceptions occur during binder transactions.
    
    It can help to detect some kind of error, such as why GraphicBuffer::flatten
    will crash when handle is null.
    
    Change-Id: I703cd035b96edb7afb324cf24d8230d4e55f4f52
    Signed-off-by: Jun Jiang <jun.a.jiang@intel.com>
    Check the padded size of the read byte array
    
    Bug: 13509200
    Change-Id: Id93894fcc617ec1cd4ce66921c6e1f1c3cf40b09
    Add support for writing byte arrays to parcels
    
    b/13418320
    
    Cherrypicked from f0190bff38b6c29abbfc4a877442f71fc3d7dad8
    https://googleplex-android-review.git.corp.google.com/#/c/433320/
    
    Change-Id: I2285df9e9d3dc8a6a54055b13b352b81660bf45d
    Add support for writing byte arrays to parcels
    
    b/13418320
    
    Change-Id: I2285df9e9d3dc8a6a54055b13b352b81660bf45d
    Binder: Make sure binder objects do not overlap
    
    Fixes crashing part of bug 11355082.
    The driver still leaks references.
    
    Change-Id: Ibc6a63b151c1fc1f7666237f25255ba781e02071
    Revert "Fix "Binder: Make sure binder objects do not overlap" to work old binder kernel interface"
    
    This branch has the new driver interface so it should not have this change.
    
    This reverts commit 6790329358d1c84af2fe9ba093bcfc1c6176e758.
    
    Change-Id: I9b6d0d653d98dbdb521ef964c5e7c2f14859d340
    Fix "Binder: Make sure binder objects do not overlap" to work old binder kernel interface
    
    DO NOT MERGE into any branch that uses the new interface
    
    Change-Id: Id54308a89327e69a389ac5916c052ad97f57cb28
    Binder: Fix some valgrind errors.
    
    When using 64 bit binder pointers, only initializing the 32 bit
    handle, in a stack allocated struct, will pass uninitialized stack
    data to the kernel and other processes.
    
    Change-Id: I3432d9d36bb251d8ddb0a863661aeb80aabb3d92
    Binder: Make sure binder objects do not overlap
    
    Fixes crashing part of bug 11355082.
    The driver still leaks references.
    
    Change-Id: Ibc6a63b151c1fc1f7666237f25255ba781e02071
    binder: fix all warnings
    
    Fix warnings related to casting pointers to ints, using %d or %ld to
    print size_t/ssize_t, and unused parameters.
    
    Change-Id: I7a13ba83d402952989c1f795cd9e880a95b98d9e
    Binder: Use 64 bit pointers in 32 processes if selected by the target
    
    Uses new kernel header where void * has been replaced by binder_uintptr_t
    
    Change-Id: Icfc67c2a279269f700343bd9246fd7cb94efe2c1
    Binder: Make binder portable
    
    Changes include
    - Binder attempts to cast pointers to a int datatype
      which is not sufficient on a 64-bit platform.
    
    - This patch introduces new read/write functions into
      Parcel that allow pointers to be written using the
      uintptr_t datatype for compile-time data type size
      selection.
    
    -  Change access specifier for the methods above.
    
    -  Binder uses the 64bit android_atomic_release_cas64
       (aka cmpxchg)
    
    Change-Id: I595280541e0ba1d19c94b2ca2127bf9d96efabf1
    Signed-off-by: Matthew Leach <matthew.leach@arm.com>
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    Native counterpart of new power manager method
    
    Cherrypicked from master.
    
    b/9464621
    
    Change-Id: I54c0ed50a57ac870da91db8589a73a2c792dbd8d
    Native counterpart of new power manager method
    
    Change-Id: I54c0ed50a57ac870da91db8589a73a2c792dbd8d
    Add support for sending and receiving ParcelFileDescriptors from native Binder code
    
    Change-Id: I7f308e28ebac0755628e19c9b4d0d7399341b435
    Make Flattenable not virtual
    
    Fallout from the Flattenable change, update all its uses.
    
    Additionnaly, fix/tighten size checks when (un)flatten()ing
    things.
    
    Removed the assumption by some flattenables (e.g.: Fence)
    that the size passed to them would be exact (it can
    and will be larger in some cases)
    
    The code in Parcel is a bit complicated so that we don't
    have to expose the full implementation (and also to
    keep the code smallish).
    
    Change-Id: I0bf1c8aca2a3128491b4f45510bc46667e566dde
    fix mem leak on error handling
    
    Change-Id: I40d8e371c46184aa701fa676246201a9d8f6e27d
    libutils clean-up
    
    Change-Id: I6ff4cfc736751de2912c697f954e45e275f2d386
    [MIPS] Avoid unaligned load/store for 64-bit doubles.
    
    Change-Id: Iefdcac8742f23fef31f63730b48698fc4205c3ad
    Signed-off-by: Douglas Leung <douglas@mips.com>
    Aligning native Parcel implementation to Java.
    
    The Java implementation of writing the RPC response header
    calculates the length of the header including the 4 bytes
    specifying the header length but the native implementation
    excludes the 4 bytes specifying the length from the header
    length.
    The native implementation has been aligned to the Java impl.
    
    Change-Id: I325bf272a63152d8fded4cf4e51a906b5a9bfe19
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)
    
    Change-Id: I26f76452ac49e2890b14d133c065493d8df0fb4a
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOG() to (IF_)ALOG()
    
    Change-Id: If49c81a2793182771c6160fbca93905daa6f44c1
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: Ib08fe86d23db91ee153e9f91a99a35c42b9208ea
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Fix possible leak in Parcel::writeDupFileDescriptor.
    
    Also, check the result of dup() just in case we got EMFILE
    or something.
    
    Change-Id: I18e627bd84f4c7941813fe1c2bad2cdd9e5afa83
    Fix a leak in Parcel::writeBlob.
    
    Was mistakenly assuming that Parcel::writeFileDescriptor took
    ownership of the fd that was passed in.  It does not!
    Added some comments and a default parameter to allow the caller
    to specify whether it wishes the Parcel to take ownership.
    
    Bug: 5563374
    Change-Id: I5a12f51d582bf246ce90133cce7690bb9bca93f6
    Fix a leak in Parcel::writeBlob.
    
    Was mistakenly assuming that Parcel::writeFileDescriptor took
    ownership of the fd that was passed in.  It does not!
    Added some comments and a default parameter to allow the caller
    to specify whether it wishes the Parcel to take ownership.
    
    Bug: 5563374
    Change-Id: I5a12f51d582bf246ce90133cce7690bb9bca93f6
    Revert "Use ashmem for CursorWindows."
    
    This reverts commit 0cde89f5f025b7826be009ebb9673b970e180e32.
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Rename (IF_)LOG() to (IF_)ALOG()  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/141576
    
    Bug: 5449033
    Change-Id: I42575e7c29cf1c0f465c357a5c97ab118df6f473
    Use ashmem for CursorWindows.
    Bug: 5332296
    
    The memory dealer introduces additional delays for reclaiming
    the memory owned by CursorWindows because the Binder object must
    be finalized.  Using ashmem instead gives CursorWindow more
    direct control over the lifetime of the shared memory region.
    
    The provider now allocates the CursorWindows and returns them
    to clients with a read-only protection bit set on the ashmem
    region.
    
    Improved the encapsulation of CursorWindow.  Callers shouldn't
    need to care about details like how string fields are allocated.
    
    Removed the compile-time configuration of string and numeric
    storage modes to remove some dead weight.
    
    Change-Id: I07c2bc2a9c573d7e435dcaecd269d25ea9807acd
    Fix handling of "allow fds" state.
    
    Didn't take into account nesting of bundles.  Boo.
    
    Change-Id: Ic8cf21ad8d6f4938a3e105128624c9d162310d01
    Transfer large bitmaps using ashmem.
    Bug: 5224703
    
    Change-Id: If385a66adf4c6179a0bb49c0e6d09a9567e23808
    Add mechanism for Parcel to not allow FDs to be written to it.
    
    This is to help implement issue #5224703.
    
    Change-Id: I026a5890495537d15b57fe61227a640aac806d46
    Revert "Transfer large bitmaps using ashmem. Bug: 5224703"
    
    This reverts commit 56c58f66b97d22fe7e7de1f7d9548bcbe1973029
    
    This CL was causing the browser to crash when adding bookmarks, visiting the bookmarks page, and sharing pages (see bug http://b/issue?id=5369231
    Revert "Transfer large bitmaps using ashmem. Bug: 5224703"
    
    This reverts commit 56c58f66b97d22fe7e7de1f7d9548bcbe1973029
    
    This CL was causing the browser to crash when adding bookmarks, visiting the bookmarks page, and sharing pages (see bug http://b/issue?id=5369231
    Transfer large bitmaps using ashmem.
    Bug: 5224703
    
    Change-Id: Ic7481dd9f173986f085a8bbdcc59bbe9830d7a44
    Rewrite battery history storage.
    
    We now write battery history directly into a buffer, instead of
    creating objects.  This allows for more efficient storage; later
    it can be even better because we can only write deltas.
    
    The old code is still there temporarily for validation.
    
    Change-Id: I9707d4d8ff30855be8ebdc93bc078911040d8e0b
    Parcel::appendFrom({const } Parcel *parcel, size_t, size_t)
    
    As far as I can tell "parcel" isn't actually modified by the implementation.
    
    Change-Id: Ib806eefdc13c97b932773e1dc9ca3a4aad4422b2
    Fix for writing empty strings to Parcel::writeString8()
    
    If writeString8 is called with the following sequence:
    
     writeString8(String8(""));
     writeString8(String8("TempString"));
    
    Then in the readString8, the 2nd String i.e. "TempString" is not read,
    instead an empty string is read.
    
    The bug comes because of the write call for String8("") where there are
    no String bytes present. In the write Statement, an extra ‘\0’ is
    written. During the Marshalling, Following bytes are written:
    
    1        2         3        4       5   ...
    0x0      0x0       0xB      ‘T’     ‘e’  ...
    
    The readString8 function has a check that, if String length is 0, don’t
    read anything. So the first byte is read as the length for the first
    string. The second byte i.e. ‘\0’ is read as the length for the second
    string and hence the second string becomes empty too.
    
    Change-Id: Id7acc0c80ae16e77be4331f1ddf69ea87e758420
    Don't propagate StrictMode over one-way Binder calls.
    
    This was causing stack stitching problems where a one-way call with
    violations followed by a two-way call without violations was getting
    the previous one-way call's violation stack stitched on to the second
    caller's stack.
    
    The solution is a little more indirect than I would've liked
    (preserving the binder's onTransact flags until enforceInterface) but
    was seemingly necessary to work without changing the AIDL compiler.
    It should also be sufficiently cheap, since no new calls to
    thread-local IPCThreadState lookups were required.  The additional
    work is just same-thread getter/setters on the existing
    IPCThreadState.
    
    Change-Id: I4b6db1d445c56e868e6d0d7be3ba6849f4ef23ae
    Replace several IPCThreadState::get() lookups with one.
    
    Also, make StrictMode's ThreadLocal final.
    
    Change-Id: I08d400ed254fa67bb7a3dae1227f205a54c00df0
    StrictMode: gather and return violating stacks in Binder replies
    
    Now, when Thread A has a strict mode policy in effect and does a
    Binder call to Thread B (most likely in another process), the strict
    mode policy is passed along, but with the GATHER penalty bit set which
    overrides other policies and instead gathers all offending stack
    traces to a threadlocal which are then written back in the Parcel's
    reply header.
    
    Change-Id: I7d4497032a0609b37b1a2a15855f5c929ba0584d
    More StrictMode work, keeping Binder & BlockGuard's thread-locals in-sync.
    
    Change-Id: Ia67cabcc17a73a0f15907ffea683d06bc41b90e5
    Add Parcel::readExceptionCode() and Parcel::writeNoException()
    
    Add native Parcel methods analogous to the Java versions.
    
    Currently, these don't do much, but upcoming StrictMode work changes
    the RPC calling conventions in some cases, so it's important that
    everybody uses these consistently, rather than having a lot of code
    trying to parse RPC responses out of Parcels themselves.
    
    As a summary, the current convention that Java Binder services use is
    to prepend the reply Parcel with an int32 signaling the exception
    status:
    
         0: no exception
         -1: Security exception
         -2: Bad Parcelable
         -3: ...
         -4: ...
         -5: ...
    
    ... followed by Parceled String if the exception code is non-zero.
    
    With an upcoming change, it'll be the case that a response Parcel can,
    non-exceptionally return rich data in the header, and also return data
    to the caller.  The important thing to note in this new case is that
    the first int32 in the reply parcel *will not be zero*, so anybody
    manually checking for it with reply.readInt32() will get false
    negative failures.
    
    Short summary: If you're calling into a Java service and manually
    checking the exception status with reply.readInt32(), change it to
    reply.readExceptionCode().
    
    Change-Id: I23f9a0e53a8cfbbd9759242cfde16723641afe04
    Start of work on passing around StrictMode policy over Binder calls.
    
    This is (intendend to be) a no-op change.
    
    At this stage, Binder RPCs just have an additional uint32 passed around
    in the header, right before the interface name.  But nothing is actually
    done with them yet.  That value should right now always be 0.
    
    This now boots and seems to work.
    
    Change-Id: I135b7c84f07575e6b9717fef2424d301a450df7b
    remove a dependency of GraphicBuffer (libui) on Parcel (libbinder).
    
    Add a Flattenable interface to libutils which can be used to flatten
    an object into bytestream + filedescriptor stream.
    Parcel is modified to handle Flattenable. And GraphicBuffer implements
    Flattenable.
    
    Except for the overlay classes libui is now independent of libbinder.
    eclair snapshot
    donut snapshot
    Fix a major bug in Bundle when unparcelling from AIDL.
    
    There was a serious problem in the Bundle(Parcel) and readFromParcel() methods,
    where it wasn't doing the copying of the Parcel that Parcel.readBundle() does
    and is a basic requirement for it to work correctly.
    
    This re-arranges the code to make all of these functions (hopefully) correct.
    
    Also fix a problem in Parcel where we were not duping fds when copying data from
    one Parcel to another.
    bring the native_handle stuff back from master_gl
    checkpoint: split libutils into libutils + libbinder
    Integrate from //sandbox/mathias/donut/...@145728
    
    SurfaceFlinger rework for new EGL driver model support.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Need to dup file descriptor when reading from the binder for native handles
    
    When reading a native handle that has passed through the binder,
    the fds have to be duped to prevent them from getting closed when the binder
    object is destructed.
    
    Signed-off-by: Rebecca Schultz Zavin <rebecca@android.com>
    auto import from //branches/cupcake/...@130745
    auto import from //branches/cupcake/...@127101
    Initial Contribution
    binder: fix all warnings
    
    Fix warnings related to casting pointers to ints, using %d or %ld to
    print size_t/ssize_t, and unused parameters.
    
    Change-Id: I7a13ba83d402952989c1f795cd9e880a95b98d9e
    improved CallStack a bit
    
    - added a ctor that updates and dumps the stack immediately
    - added a "logtag" parameter to dump()
    
    Change-Id: Ie51c256071d282591752243bdb4f68cf9ff8829d
    Revert "Add a compatibility symbol for the MemoryBase constructor."
    
    Cherry pick from AOSP to fix the build.
    See https://android-review.googlesource.com/#/c/53690/
    
    This reverts commit 7f974ff2f317ffbf9256579109f000ec876c3037
    
    Change-Id: I1b123f446d0ff41e11ff81d4ef5f1472b59cac93
    Revert "Add a compatibility symbol for the MemoryBase constructor."
    
    This reverts commit 7f974ff2f317ffbf9256579109f000ec876c3037
    
    Change-Id: I28ebfc5ac88bd025471b613aa7958d23749e6991
    Add a compatibility symbol for the MemoryBase constructor.
    
    Third-party libraries are currently trying to use the
    MemoryBase constructor but failing because we fixed the
    definition of ssize_t. This is a stop-gap for users of
    this private API until we can get them fixed.
    
    Bug: 8253769
    Change-Id: I8a19770f3252d88ee87023fde625cc6289924b0d
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    MemoryHeapBase: Save and binderize the offset
    
    The offset that is used in the creation of the MemoryHeapBase must be saved, so
    that it can be used to recreate the Heap when an IMemory object is passed
    across process boundary through the binder.
    
    Change-Id: Ie618fb5c0718e6711f55ed9235616fd801e648dc
    Signed-off-by: Anu Sundararajan <sanuradha@ti.com>
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    fix [2599939] "cannot play video" after open/close a video player a dozen of times
    
    get rid off the MAP_ONCE flag is MemoryHeapBase (as well as it's functionality),
    this feature should not be used anymore.
    
    the software renderer was incorrectly using the default ctor which set MAP_ONCE,
    causing the leak. the software renderer itself is incorrectly used while coming
    back from sleep.
    
    Change-Id: I123621f8d140550b864f352bbcd8a5729db12b57
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    binder: rm utils/Debug.h
    
    Change-Id: I16931919a26c16a0d701771c93fa7fe1c6f60ef8
    Add Parcel::readExceptionCode() and Parcel::writeNoException()
    
    Add native Parcel methods analogous to the Java versions.
    
    Currently, these don't do much, but upcoming StrictMode work changes
    the RPC calling conventions in some cases, so it's important that
    everybody uses these consistently, rather than having a lot of code
    trying to parse RPC responses out of Parcels themselves.
    
    As a summary, the current convention that Java Binder services use is
    to prepend the reply Parcel with an int32 signaling the exception
    status:
    
         0: no exception
         -1: Security exception
         -2: Bad Parcelable
         -3: ...
         -4: ...
         -5: ...
    
    ... followed by Parceled String if the exception code is non-zero.
    
    With an upcoming change, it'll be the case that a response Parcel can,
    non-exceptionally return rich data in the header, and also return data
    to the caller.  The important thing to note in this new case is that
    the first int32 in the reply parcel *will not be zero*, so anybody
    manually checking for it with reply.readInt32() will get false
    negative failures.
    
    Short summary: If you're calling into a Java service and manually
    checking the exception status with reply.readInt32(), change it to
    reply.readExceptionCode().
    
    Change-Id: I23f9a0e53a8cfbbd9759242cfde16723641afe04
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Revert "Second try at adding a compatibility symbol for the MemoryBase constructor."
    
    This reverts commit ddd286301b466b5cd10cfcdc0a5ee5729ef2e385, because the third-party library in question has now been fixed.
    
    Change-Id: Ic195a913f90b36268ed9d6e60be520decb4e198d
    am 7212ff29: am 20e154f1: Merge "Second try at adding a compatibility symbol for the MemoryBase constructor."
    
    * commit '7212ff29c6f4e4cd192fee6f072e80b36d8a728b':
      Second try at adding a compatibility symbol for the MemoryBase constructor.
    Revert "Add a compatibility symbol for the MemoryBase constructor."
    
    Cherry pick from AOSP to fix the build.
    See https://android-review.googlesource.com/#/c/53690/
    
    This reverts commit 7f974ff2f317ffbf9256579109f000ec876c3037
    
    Change-Id: I1b123f446d0ff41e11ff81d4ef5f1472b59cac93
    Second try at adding a compatibility symbol for the MemoryBase constructor.
    
    Third-party libraries are currently trying to use the
    MemoryBase constructor but failing because we fixed the
    definition of ssize_t. This is a stop-gap for users of
    this private API until we can get them fixed.
    
    Bug: 8253769
    Change-Id: Ie7c86f45fa39cb53539cab0ffe8585a585656714
    Revert "Add a compatibility symbol for the MemoryBase constructor."
    
    This reverts commit 7f974ff2f317ffbf9256579109f000ec876c3037
    
    Change-Id: I28ebfc5ac88bd025471b613aa7958d23749e6991
    Add a compatibility symbol for the MemoryBase constructor.
    
    Third-party libraries are currently trying to use the
    MemoryBase constructor but failing because we fixed the
    definition of ssize_t. This is a stop-gap for users of
    this private API until we can get them fixed.
    
    Bug: 8253769
    Change-Id: I8a19770f3252d88ee87023fde625cc6289924b0d
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Allow creation of heaps that are read-only to partner
    
    Change-Id: I3c2b3d9b1671da4b9d9c58dce27e291d30703b03
    binder: fix all warnings
    
    Fix warnings related to casting pointers to ints, using %d or %ld to
    print size_t/ssize_t, and unused parameters.
    
    Change-Id: I7a13ba83d402952989c1f795cd9e880a95b98d9e
    Binder: Make binder portable
    
    Changes include
    - Binder attempts to cast pointers to a int datatype
      which is not sufficient on a 64-bit platform.
    
    - This patch introduces new read/write functions into
      Parcel that allow pointers to be written using the
      uintptr_t datatype for compile-time data type size
      selection.
    
    -  Change access specifier for the methods above.
    
    -  Binder uses the 64bit android_atomic_release_cas64
       (aka cmpxchg)
    
    Change-Id: I595280541e0ba1d19c94b2ca2127bf9d96efabf1
    Signed-off-by: Matthew Leach <matthew.leach@arm.com>
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    Fix invalid madvise() during concurrent alloc/dealloc of MemoryDealer
    
    Currently, madvise(MADV_REMOVE) is called after deallocation.
    Another thread might allocate (and even write) the same region between
    deallocation and madvise(), in which case the new thread will fail to read
    what it have written.  So, call deallocate() after madvise(MADV_REMOVE).
    
    Bug: 5654596
    Change-Id: I26f36cd6013de499090768a0ddc68206a4a68219
    Simplify the MemoryDealer implementation
    
    At some point the implementation became complicated because of
    SurfaceFlinger's special needs, since we are now relying on gralloc
    we can go back to much simpler MemoryDealer.
    
    Removed HeapInterface and AllocatorInterface, since those don't need
    to be paramterized anymore. Merged SimpleMemory and Allocation.
    Made SimplisticAllocator non virtual.
    
    Removed MemoryDealer flags (READ_ONLY, PAGE_ALIGNED)
    
    Removed a lot of unneeded code.
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    binder: rm utils/Debug.h
    
    Change-Id: I16931919a26c16a0d701771c93fa7fe1c6f60ef8
    defaultServiceManager wait for service manager ready
    
    If the service manager is not ready when we attempt to create a local
    proxy, fail and retry.
    
    Change-Id: I7d7300bc07cd70608793479aa3da282d066da7f6
    Some hardening of isolated processes by restricting access to services.
    
    Services now must explicitly opt in to being accessed by isolated
    processes.  Currently only the activity manager and surface flinger
    allow this.  Activity manager is needed so that we can actually
    bring up the process; SurfaceFlinger is needed to be able to get the
    display information for creating the Configuration.  The SurfaceFlinger
    should be safe because the app doesn't have access to the window
    manager so can't actually get a surface to do anything with.
    
    The activity manager now protects most of its entry points against
    isolated processes.
    
    Change-Id: I0dad8cb2c873575c4c7659c3c2a7eda8e98f46b0
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)
    
    Change-Id: I26f76452ac49e2890b14d133c065493d8df0fb4a
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: Ib08fe86d23db91ee153e9f91a99a35c42b9208ea
    Add Parcel::readExceptionCode() and Parcel::writeNoException()
    
    Add native Parcel methods analogous to the Java versions.
    
    Currently, these don't do much, but upcoming StrictMode work changes
    the RPC calling conventions in some cases, so it's important that
    everybody uses these consistently, rather than having a lot of code
    trying to parse RPC responses out of Parcels themselves.
    
    As a summary, the current convention that Java Binder services use is
    to prepend the reply Parcel with an int32 signaling the exception
    status:
    
         0: no exception
         -1: Security exception
         -2: Bad Parcelable
         -3: ...
         -4: ...
         -5: ...
    
    ... followed by Parceled String if the exception code is non-zero.
    
    With an upcoming change, it'll be the case that a response Parcel can,
    non-exceptionally return rich data in the header, and also return data
    to the caller.  The important thing to note in this new case is that
    the first int32 in the reply parcel *will not be zero*, so anybody
    manually checking for it with reply.readInt32() will get false
    negative failures.
    
    Short summary: If you're calling into a Java service and manually
    checking the exception status with reply.readInt32(), change it to
    reply.readExceptionCode().
    
    Change-Id: I23f9a0e53a8cfbbd9759242cfde16723641afe04
    Start of work on passing around StrictMode policy over Binder calls.
    
    This is (intendend to be) a no-op change.
    
    At this stage, Binder RPCs just have an additional uint32 passed around
    in the header, right before the interface name.  But nothing is actually
    done with them yet.  That value should right now always be 0.
    
    This now boots and seems to work.
    
    Change-Id: I135b7c84f07575e6b9717fef2424d301a450df7b
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    libutils clean-up
    
    Change-Id: I6ff4cfc736751de2912c697f954e45e275f2d386
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    binder: rm utils/Debug.h
    
    Change-Id: I16931919a26c16a0d701771c93fa7fe1c6f60ef8
    App ops: new native access API.
    
    This is to help implementation of bug #8181262 and maybe
    bug #8181261
    
    Note the current code has not yet been tested; it is only
    known to compile at this point.
    
    Change-Id: I489674c96d0d3fc0ddacc92611931a19a9ee5230
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    binder: rm utils/Debug.h
    
    Change-Id: I16931919a26c16a0d701771c93fa7fe1c6f60ef8
    Follow framework change to track started ops by proc.
    
    Change-Id: Ibbce3bf6556f45751c74bab045b46377e56bff9b
    Fixes to native app ops services
    
    Bug: 8181262
    Change-Id: I3d3f20453f6c6f2756c988363c5b5453ef309cb6
    App ops: new native access API.
    
    This is to help implementation of bug #8181262 and maybe
    bug #8181261
    
    Note the current code has not yet been tested; it is only
    known to compile at this point.
    
    Change-Id: I489674c96d0d3fc0ddacc92611931a19a9ee5230
    Fix CAS argument type.
    
    Gcc apparently doesn't check; clang does.
    
    Bug:17067219
    Change-Id: I184084a5063131dbc857c63f97e70e78a05e1a76
    (cherry picked from commit 1ddaadb59883df5ca821b4b08fdd41a1720a3b6f)
    Revert "Revert "Revert "Revert "Remove incorrect android_atomic_...64 use.""""
    
    After fixing b/16874785.
    
    This reverts commit f010a05c7e9a23b6083294aff4a8183ab01f686e.
    
    Original comment, which actually describes the effect of this:
    
    Change the mExtras field in Binder.h to be a stdatomic.h atomic
    value, and replace references to it with proper stdatomic.h calls.
    This removes one of a small number of remaining 64 bit
    android_atomic references.  It also replaces the erroneously
    non-atomic read accesses to mExtras.
    
    It would be better if this used the C++11 <atomic> facility,
    but we don't quite have that yet.
    
    Fixes
    
    Bug:16513433
    
    Change-Id: I1645ca5d6f60595bf5d388913665ce4b8780b26d
    (cherry picked from commit 3effababf2980d029339522fdc914bdeb913d99b)
    binder: fix all warnings
    
    Fix warnings related to casting pointers to ints, using %d or %ld to
    print size_t/ssize_t, and unused parameters.
    
    Change-Id: I7a13ba83d402952989c1f795cd9e880a95b98d9e
    Binder: Make binder portable
    
    Changes include
    - Binder attempts to cast pointers to a int datatype
      which is not sufficient on a 64-bit platform.
    
    - This patch introduces new read/write functions into
      Parcel that allow pointers to be written using the
      uintptr_t datatype for compile-time data type size
      selection.
    
    -  Change access specifier for the methods above.
    
    -  Binder uses the 64bit android_atomic_release_cas64
       (aka cmpxchg)
    
    Change-Id: I595280541e0ba1d19c94b2ca2127bf9d96efabf1
    Signed-off-by: Matthew Leach <matthew.leach@arm.com>
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    Add callback hack to find out when to reload system properties.
    
    Every IBinder object can accept a new transaction to tell it that
    it might want to reload system properties, and in the process
    anyone can register a callback to be executed when this happens.
    
    Use this to reload the trace property.
    
    This is very much ONLY for debugging.
    
    Change-Id: I55c67c46f8f3fa9073bef0dfaab4577ed1d47eb4
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Make static versions of libutils and libbinder.
    
    Fix some small static-initialization-order issues (and a static-
    initializers-missing issue) that result from doing so.  The static
    libraries don't actually get used for anything real at the moment --
    they're used for perf tests of bug 2660235.
    
    Bug: 2660235
    Change-Id: Iee2f38f79cc93b395e8d0a5a144ed92461f5ada0
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Work on issue #17656716: Unhandled exception in Window Manager
    
    Try to clean up the code paths coming in and out of binder IPCs to
    plug any places where we could disrupt the gather flag of a thread,
    causing it to keep gathering stack crawls (which is the thing that
    is causing our strict mode data to become so large).
    
    We now take care of saving and restoring this state in the core
    IPC code path, not at the Java layer.
    
    Change-Id: I73d564778da127bdce00f304225930e7f2318293
    binder: rm utils/Debug.h
    
    Change-Id: I16931919a26c16a0d701771c93fa7fe1c6f60ef8
    Binder: Fix some valgrind errors.
    
    When using 64 bit binder pointers, only initializing the 32 bit
    handle, in a stack allocated struct, will pass uninitialized stack
    data to the kernel and other processes.
    
    Change-Id: I3432d9d36bb251d8ddb0a863661aeb80aabb3d92
    Binder: Don't cast directly from a pointer to binder_uintptr_t
    
    When using the 64 bit binder interface from a 32 bit process the
    pointer may get sign extended and cause the kernel to fail to read
    from it.
    
    Change-Id: I90fcf53880e2aa92e230a9723f9b3f7696170e32
    Binder: Disable attemptIncStrongHandle
    
    The driver does not support BC_ATTEMPT_ACQUIRE and will return an error.
    IPCThreadState does not handle driver errors, and will resend the failed
    command blocking all other commands.
    
    Change-Id: I643986037341821b27b62dc82df933844f4842b8
    binder: fix all warnings
    
    Fix warnings related to casting pointers to ints, using %d or %ld to
    print size_t/ssize_t, and unused parameters.
    
    Change-Id: I7a13ba83d402952989c1f795cd9e880a95b98d9e
    Binder: Use 64 bit pointers in 32 processes if selected by the target
    
    Uses new kernel header where void * has been replaced by binder_uintptr_t
    
    Change-Id: Icfc67c2a279269f700343bd9246fd7cb94efe2c1
    Binder: Make binder portable
    
    Changes include
    - Binder attempts to cast pointers to a int datatype
      which is not sufficient on a 64-bit platform.
    
    - This patch introduces new read/write functions into
      Parcel that allow pointers to be written using the
      uintptr_t datatype for compile-time data type size
      selection.
    
    -  Change access specifier for the methods above.
    
    -  Binder uses the 64bit android_atomic_release_cas64
       (aka cmpxchg)
    
    Change-Id: I595280541e0ba1d19c94b2ca2127bf9d96efabf1
    Signed-off-by: Matthew Leach <matthew.leach@arm.com>
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    Make getCallingUid/Pid const.
    
    Change-Id: I1853b21eaa45d85274189dfd72f73fec48d0d6b7
    binder: add polling / single-threaded operation
    
    This is currently safe to do only for processes that disallow any binder
    threads to be created: setThreadPoolMaxThreadCount(0).
    
    Change-Id: I8a27f3cf26f4d51edb7f222af487ac256cbcab65
    Prevent IPCThreadState::joinThreadPool from spinning on unexpected error
    
    Adds logging to help determine what is happening to the /dev/binder
    fd and dump the process state when it happens.
    
    bug: 8912673
    Change-Id: I2aa0c66fc499e91e0bf9ee4ae20404bec35adc82
    Prevent IPCThreadState::joinThreadPool from spinning on unexpected error
    
    Adds logging to help determine what is happening to the /dev/binder
    fd and dump the process state when it happens.
    
    bug: 8912673
    Change-Id: I2aa0c66fc499e91e0bf9ee4ae20404bec35adc82
    libutils clean-up
    
    Change-Id: I6ff4cfc736751de2912c697f954e45e275f2d386
    Revert "ugly, temporary, workaroung for a problem where a binder thread spins forever"
    
    This reverts commit 0845d0245e09548110cacb0f20e9934753388aab
    
    Change-Id: I395037cb9427cd11f7de6bb78fbdfa917fc6263a
    ugly, temporary, workaroung for a problem where a binder thread spins forever
    
    Bug: 7289992
    Change-Id: I0c3d482a1af57e5f444be2ba7f2751ac3e954af2
    ugly, temporary, workaroung for a problem where a binder thread spins forever
    
    Bug: 7289992
    Change-Id: I0c3d482a1af57e5f444be2ba7f2751ac3e954af2
    No longer need "original calling uid".
    
    Change-Id: Ifc4a89dd088609a5a8553f6ac6553174e09e8222
    Fix shutdown sequence to avoid SIGSEGV when running am command
    
    When the app_process is shutting down the main thread will close the
    binder fd while pool threads are executing an ioctl (in
    IPCThreadState::stopProcess called by AppRuntime::onStarted in
    app_main.c).
    
    The binder driver will then return all pending calls in ioctl
    without any error and with a command. One of the threads gets a
    BR_SPAWN_LOOPER which will create a new thread (the other thread
    gets a BR_NOOP). This new thread then calls
    vm->AttachCurrentThread. Usually this results in a log entry with
    "AndroidRuntime: NOTE: attach of thread 'Binder Thread #3' failed",
    but sometimes it also causes a SIGSEGV. This depends on the timing
    between the new thread an the main thread that calls DestroyJavaVM
    (in AndroidRuntime::start).
    
    If IPCThreadState.cpp is compiled with "#define LOG_NDEBUG 0" the
    pool thread will loop and hit the
    ALOG_ASSERT(mProcess->mDriverFD >= 0) in
    IPCThreadState::talkWithDriver.
    
    Crashes like this has been seen when running the am command and
    other commands that use the app_process.
    
    This fix makes sure that any command that is received when the driver
    fd is closed are ignored and IPCThreadState::talkWithDriver instead
    returns an error which will cause the pool thread to exit and detach
    itself from the vm. A check to avoid calling ioctl to a fd with -1
    was also added in IPCThreadState::threadDestructor.
    
    Another solution might be to change the binder driver so that it
    returns an error when the fd is closed (or atleast not a
    BR_SPAWN_LOOPER command). It might also be possible to call exit(0)
    which is done when System.exit(0) is called from java.
    
    Change-Id: I3d1f0ff64896c44be2a5994b3a90f7a06d27f429
    Scheduling group cleanup
    
    Remove C++ APIs androidSetThreadSchedulingGroup and
    androidGetThreadSchedulingGroup, and the ANDROID_TGROUP_* constants.
    
    Former callers of these should now use the C APIs set_sched_policy and
    get_sched_policy, and the SP_* constants.
    
    Note: debug.sys.noschedgroups is not supported by the C APIs,
    this needs to be discussed.
    
    Change-Id: I32bbfc539ef4090faf9ef0320380e8cca9eae07c
    Remove obsolete references to sched_policy.h
    
    As part of scheduling policy cleanup, remove or isolate
    all references to the scheduling policy APIs.
    
    Change-Id: Ia1ea2fe711a399039f25217309e061267744b856
    Multi-user - 1st major checkin
    
    Switching activity stacks
    Cache ContentProvider per user
    Long-press power to switch users (on phone)
    
    Added ServiceMap for separating services by user
    Launch PendingIntents on the correct user's uid
    Fix task switching from Recents list
    AppWidgetService is mostly working.
    
    Commands added to pm and am to allow creating and switching profiles.
    
    Change-Id: I15810e8cfbe50a04bd3323a7ef5a8ff4230870ed
    Rename LOG_ASSERT to ALOG_ASSERT
    
    Change-Id: Ie2c7ea6560656d65bad791a61996174c75677517
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)
    
    Change-Id: I26f76452ac49e2890b14d133c065493d8df0fb4a
    Rename (IF_)LOG() to (IF_)ALOG()
    
    Change-Id: If49c81a2793182771c6160fbca93905daa6f44c1
    Rename LOG_ASSERT to ALOG_ASSERT  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157519
    
    Bug: 5449033
    Change-Id: I8ceb2dba1b031a0fd68d15d146960d9ced62bbf3
    Rename (IF_)LOGI(_IF) to (IF_)ALOGI(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156801
    
    Bug: 5449033
    Change-Id: Ib08fe86d23db91ee153e9f91a99a35c42b9208ea
    Initialize bwr.read_buffer in IPCThreadState::talkWithDriver.
    
    I/valgrind( 1309): ==1310== Syscall param
    ioctl(BINDER_WRITE_READ).read_buffer points to uninitialised byte(s)
    I/valgrind( 1309): ==1310==    at 0x480E670: __ioctl (__ioctl.S:10)
    I/valgrind( 1309): ==1310==  Address 0xbda651b4 is on thread 1's stack
    
    Change-Id: I02893df7b5786b6b2dbd9659f5706d7171295ab2
    Rename (IF_)LOG() to (IF_)ALOG()  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/141576
    
    Bug: 5449033
    Change-Id: I42575e7c29cf1c0f465c357a5c97ab118df6f473
    Resurrect verbose binder logging
    
    Updated the command name lists, and masked off the additional bits in
    the command word when doing the name lookup.
    
    Made descriptor values easier to grep for and consistent with kernel
    output (i.e. decimal rather than hex).  Attempt to show transaction
    descriptors as such (they're in a union with a pointer).
    
    Also, the writeLines() function in Static was using a no-op
    logging call to write an iovec.  It looks like all callers are using
    N=1, so I just added a log for the first string.
    
    Bug 5155269
    
    Change-Id: I417b8d77da3eb6ee1d2069ba94047210f75738bc
    Make sure binder ioctl structs don't contain uninitialized values.
    
    Change-Id: I8a678f91262417bb120e65e32c244ce1512b46c2
    Framework-side support for Dalvik "isSensitiveThread" hook.
    
    Used in lock contention stats.
    
    Bug: 3226270
    Change-Id: Ie6f58d130a29079a59bdefad40b80304d9bc3623
    Some debugging support.
    
    - New feature to "am monitor" to have it automatically launch
      gdbserv for you when a crash/ANR happens, and tell you how to
      run the client.
    
    - Update dumpstate to match new location of binder debug logs
    
    - Various commented out logs that are being used to track down
      issues.
    
    Change-Id: Ia5dd0cd2df983a1fc6be697642a4590aa02a26a5
    Don't propagate StrictMode over one-way Binder calls.
    
    This was causing stack stitching problems where a one-way call with
    violations followed by a two-way call without violations was getting
    the previous one-way call's violation stack stitched on to the second
    caller's stack.
    
    The solution is a little more indirect than I would've liked
    (preserving the binder's onTransact flags until enforceInterface) but
    was seemingly necessary to work without changing the AIDL compiler.
    It should also be sufficiently cheap, since no new calls to
    thread-local IPCThreadState lookups were required.  The additional
    work is just same-thread getter/setters on the existing
    IPCThreadState.
    
    Change-Id: I4b6db1d445c56e868e6d0d7be3ba6849f4ef23ae
    More StrictMode work, keeping Binder & BlockGuard's thread-locals in-sync.
    
    Change-Id: Ia67cabcc17a73a0f15907ffea683d06bc41b90e5
    Start of work on passing around StrictMode policy over Binder calls.
    
    This is (intendend to be) a no-op change.
    
    At this stage, Binder RPCs just have an additional uint32 passed around
    in the header, right before the interface name.  But nothing is actually
    done with them yet.  That value should right now always be 0.
    
    This now boots and seems to work.
    
    Change-Id: I135b7c84f07575e6b9717fef2424d301a450df7b
    Ensure that binder incalls to the system process keep the fg cgroup
    
    On binder incalls, the handler thread is given the caller's priority by the
    driver, but not the caller's cgroup.  We have explicit code that sets the
    handler's cgroup to match the caller's, *except* that the system process
    explicitly disables this behavior.  This led to a siuation in which we were
    running binder incalls to the system process at nice=10 but cgroup=fg.
    
    That's fine as far as it goes, except that if a GC happened in the handler
    thread, it would be promoted to foreground priority and cgroup both, to avoid
    having the GC take forever.  Then, when GC finished, the original priority
    is reset, and the cgroup set *based on that priority*.  This would push the
    handler thread into nice=10 cgroup=bg_non_interactive -- which matches the
    caller, but is supposed to be impossible in the system process.
    
    The end result of this was that we could be running "lengthy" operations in
    the system process in the background.  Unfortunately, some of the operations
    that wound up like this would hold important global system locks for up to
    twenty seconds as a result, making the entire device unresponsive to input
    for that period.
    
    This CL fixes the binder incall setup to ensure that within the system process,
    a binder incall is always begun from the normal foreground priority as well
    as cgroup.  In practice now the device still becomes laggy/sluggish when the
    offending lock-holding time-consuming incall occurs, but since it still runs
    as a foreground task it is able to proceed to completion within a short time
    rather than taking 20 seconds.
    
    Fixes bug #2403717
    
    Change-Id: Id046aeabd0e80c48eef94accc37842835eab308d
    Propagate background scheduling class across processes.
    
    This is a very simply implementation: upon receiving an IPC, if the handling
    thread is at a background priority (the driver will have taken care of
    propagating this from the calling thread), then stick it in to the background
    scheduling group.  Plus an API to turn this off for the process, which is
    used by the system process.
    
    This also pulls some of the code for managing scheduling classes out of
    the Process JNI wrappers and in to some convenience methods in thread.h.
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Code drop from //branches/cupcake/...@124589
    Initial Contribution
    binder: Turn on -Werror
    
    Change-Id: I0ee785927a7ae5f731b02176b0b781b87c22a24e
    binder: fix all warnings
    
    Fix warnings related to casting pointers to ints, using %d or %ld to
    print size_t/ssize_t, and unused parameters.
    
    Change-Id: I7a13ba83d402952989c1f795cd9e880a95b98d9e
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Bring back overloading to print String8/16.
    
    Change-Id: Iecab20db2b8574d5f1e6fdefdc2c8d4ce6c37121
    libutils clean-up
    
    Change-Id: I6ff4cfc736751de2912c697f954e45e275f2d386
    eclair snapshot
    some work to try to reduce the code size of some native libraries
    
    - make sure that all binder Bn classes define a ctor and dtor in their respective library.
      This avoids duplication of the ctor/dtor in libraries where these objects are instantiated.
      This is also cleaner, should we want these ctor/dtor to do something one day.
    
    - same change as above for some Bp classes and various other non-binder classes
    
    - moved the definition of CHECK_INTERFACE() in IInterface.h instead of having it everywhere.
    
    - improved the CHECK_INTERFACE() macro so it calls a single method in Parcel, instead of inlining its code everywhere
    
    - IBinder::getInterfaceDescriptor() now returns a "const String16&" instead of String16, which saves calls to String16 and ~String16
    
    - implemented a cache for BpBinder::getInterfaceDescriptor(), since this does an IPC. HOWEVER, this method never seems to be called.
      The cache makes BpBinder bigger, so we need to figure out if we need this method at all.
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Remove references to obsolete pmem functionality.
    
    Change-Id: I5d3befd075e51614e6801115388a0a9f32fbb6ea
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    MemoryHeapBase: Save and binderize the offset
    
    The offset that is used in the creation of the MemoryHeapBase must be saved, so
    that it can be used to recreate the Heap when an IMemory object is passed
    across process boundary through the binder.
    
    Change-Id: Ie618fb5c0718e6711f55ed9235616fd801e648dc
    Signed-off-by: Anu Sundararajan <sanuradha@ti.com>
    Signed-off-by: Iliyan Malchev <malchev@google.com>
    Clean up use of HAVE_ANDROID_OS
    
    HAVE_ANDROID_OS was defined as "1" for targets, but never defined as "0"
    for non-targets. Changing them to #ifdef should be safe and matches
    all the other uses of HAVE_ANDROID_OS throughout the system.
    
    Change-Id: I82257325a8ae5e4e4371ddfc4dbf51cea8ea0abb
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    auto import from //branches/cupcake/...@125939
    Initial Contribution
    add noteResetVideo/Audio to IBatteryStats
    
    Bug: 12979595
    Change-Id: Ida474e539a3af0a85ec157a66bbf986430c8020e
    update battery status for audio/video
    
    Bug: 12979595
    
    Change-Id: Ic8e8d625becc6d1050f840ad63b7423f388eeba3
    binder: rm utils/Debug.h as unutilized
    
    Change-Id: I52eb8b64b71cec7ffd4560e902daf358fda98b4a
    Cleanup Binder interface between sensorservice and BatteryStats
    
    Change-Id: Ia507160a2534059afe93849c8efc8407a046b50e
    Fix AppOsManager missing mutex unlock.
    
    Need unlock the mutex after finish the getToken operation.
    
    Change-Id: Icd83b383913d06e4d60976857aa314c3008ebea1
    Follow framework change to track started ops by proc.
    
    Change-Id: Ibbce3bf6556f45751c74bab045b46377e56bff9b
    Fixes to native app ops services
    
    Bug: 8181262
    Change-Id: I3d3f20453f6c6f2756c988363c5b5453ef309cb6
    App ops: new native access API.
    
    This is to help implementation of bug #8181262 and maybe
    bug #8181261
    
    Note the current code has not yet been tested; it is only
    known to compile at this point.
    
    Change-Id: I489674c96d0d3fc0ddacc92611931a19a9ee5230
    Remove global variables from ProcessState.
    
    These weren't really being used and they make it
    very hard to reason about who looks at command line
    arguments.
    
    Processes started via app_process (this includes all
    zygote forks and the system_server) can get information
    about command line arguments from the AndroidRuntime
    class, which is available via a call to
    AndroidRuntime::getRuntime.
    
    bug: 13647418
    
    Change-Id: I6f92680c3619a68c6d4b0995db4cdc9adc788e36
    binder: fix all warnings
    
    Fix warnings related to casting pointers to ints, using %d or %ld to
    print size_t/ssize_t, and unused parameters.
    
    Change-Id: I7a13ba83d402952989c1f795cd9e880a95b98d9e
    fix valgrind ioctl warning.
    
    Initialize local variable to avoid syscall ioctl warning.
    
    Change-Id: I33a90917856018a8527305bb362948ef03bd734c
    Origin-Change-Id: I022ebce40b3774a815639a5af34bc7aeb2489936
    Signed-off-by: Jin Wei <wei.a.jin@intel.com>
    Signed-off-by: Jian Luo <jian.luo@intel.com>
    Signed-off-by: Bruce Beare <bruce.j.beare@intel.com>
    Signed-off-by: Jack Ren <jack.ren@intel.com>
    Author-tracking-BZ: 62797
    defaultServiceManager wait for service manager ready
    
    If the service manager is not ready when we attempt to create a local
    proxy, fail and retry.
    
    Change-Id: I7d7300bc07cd70608793479aa3da282d066da7f6
    rename binder services main thread to Binder_*
    
    When a binder service's main thread joins the thread pool
    it retains its name (whatever the exec name was), which is
    very confusing in systrace.
    
    we now rename that thread just like its friends in the
    thread pool.
    
    Change-Id: Ibb3b6ff07304b247cfc6fb1694e72350c579513e
    add set thread count
    
    Change-Id: I70f02908d8362a465eb8a2a24356f6989847f7ba
    double checked locking pattern is not safe on SMP
    
    Change-Id: Ie6dd564bdcd45647cb4d62ab259462e3db112576
    Shorten thread names
    
    prctl(PR_SET_NAME) limits to 15 characters.  Before we had names like
    "Binder Thread #" and the counter was cut off :-( Also remove redundant
    "thread" at end of name; it's always a thread.
    
    Change-Id: I1f99c2730ba0787ed9b59c15914356cddf698e2f
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)
    
    Change-Id: I1de629b4632a4b3187ca1a28d6416daccd35f924
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)
    
    Change-Id: I8fbdfa7a7581f481968dbb65aa40f7042936d7cb
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)
    
    Change-Id: I5321ebd12e9c6248a108529e82c4e1af2a4405e3
    Rename (IF_)LOGE(_IF) to (IF_)ALOGE(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/157220
    
    Bug: 5449033
    Change-Id: Ic9c19d30693bd56755f55906127cd6bd7126096c
    Rename (IF_)LOGW(_IF) to (IF_)ALOGW(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/157065
    
    Bug: 5449033
    Change-Id: I00a4b904f9449e6f93b7fd35eac28640d7929e69
    Rename (IF_)LOGV(_IF) to (IF_)ALOGV(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/#/c/143865
    
    Bug: 5449033
    Change-Id: I0122812ed6ff6f5b59fe4a43ab8bff0577adde0a
    Remove some #ifdef HAVE_ANDROID_OS that were needed for the simulator build
    
    Change-Id: I13d9f251f86c05ae5405f37adbf6b8e9660935ba
    Signed-off-by: Mike Lockwood <lockwood@android.com>
    Eliminate single-process mode.
    Bug: 5010576
    
    Change-Id: Id450dc83efed4897d1e4ff451530fed14457aace
    android-2.1_r1 snapshot
    eclair snapshot
    checkpoint: split libutils into libutils + libbinder
    auto import from //depot/cupcake/@135843
    auto import from //depot/cupcake/@135843
    Initial Contribution
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)
    
    Change-Id: I44f267700356967dc51e8f85ebf457dc85cfb229
    Rename (IF_)LOGD(_IF) to (IF_)ALOGD(_IF)  DO NOT MERGE
    
    See https://android-git.corp.google.com/g/156016
    
    Bug: 5449033
    Change-Id: I4c4e33bb9df3e39e11cd985e193e6fbab4635298
    PermissionCache caches permission checks
    
    This is intended to absorb the cost of the IPC
    to the permission controller.
    Cached permission checks cost about 3us, while
    full blown ones are two orders of magnitude slower.
    
    CAVEAT: PermissionCache can only handle system
    permissions safely for now, because the cache is
    not purged upon global permission changes.
    
    Change-Id: I8b8a5e71e191e3c01e8f792f253c379190eee62e
