    Create CODE_OF_CONDUCT.md
    readme: add @EnableWebMvc for Spring Boot if necessary
    Update typo in README.md
    
    Fix mistake in maven version tag.
    Updated sonar cloud badges
    
    (3348)
    Updated the readme
    Added sonar cloud badge
    Updated documentation and fixed the build
    Updated readme and renamed annotation for non-boot applications
    Add license scan report and status
    
    Signed-off-by: fossabot <badges@fossa.io>
    Restore original README.md.
    fix build command
    fix README
    fix typo on README
    doc(): add install chapter on README
    Fix markdown
    Fixed the in progress badge
    
    related to #1694
    Adjusted in progress badge
    
    Also ignored folders for code coverage.
    
    related to #1694
    Adjusted the range
    
    Also removed coveralls badge
    
    fixes #1694
    Added codecov badge
    
    (1694)
    Moved the badge
    add waffle.io badge
    Fixed the stale links
    
    fixes #1313
    Changed link text
    Fixed link to contribution guidelines
    Added Oloh badge
    Removed deprecated functional test which was based on 1.0.2
    Fixing contributing link
    Fixing typo
    Removing pre 2.0 note
    Post release tasks
    - Update bintray badge
    - Set next snapshot version
    - Reinsytate circleci tasks
    Cleaning up some documentation
    Detangle readme and move documentation out to reference manual
    Updating readme with operationId details
    
    Adding some documentation to detail how `operationId` is generated by default and how it can be overridden.
    Fixed reference to old class name
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Fixed earlier pre-2.0 related documentation
    Added Gitter badge
    Update README.md
    
    Remove commas in gradle dependencies for snapshot
    Update README.md
    
    Remove commas in gradle dependencies, there should not be commas inside dependencies block
    Updated the links to contributors page
    Fixed up the documentation regarding dependencies
    
    also added a core contributors document
    [#637] Adding note that 2.0.x has not yet been released
    Update documentation
    Post 2.0 CI
    - Publish snapshots from circleci build
    - remove travisci config
    - update readme with dependencies
    updated urls, links from wordnik.com to swagger.io
    Add premliminary documentation
    
    addresses #633
    updated urls, links from wordnik.com to swagger.io
    Update coveralls badge url
    Updated the badges
    Preparing for next iteration
    Doumentation reminder
    Find/replace springdox/springfox what could go wrong :)
    Updated the readme and change log
    Updated the coverage badge
    Updated the badges
    
    Badge points to spring dox
    Also updated the badges to be svg rather than png
    Drops mangofactory namespace and removes .idea backup
    Ready for 1.0.1-SNAPSHOT
    Updated the badge
    Preparing to release 0.9.5
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Upgraded guava to the latest version
    Caching gradle wrapper and upgrading spring-mvc-ui webjar
    Upgerades swagger-ui webjar version
    Prepares for next snapshot
    Preparing for release
    Slight re-wording of generic label customization
    fix typo
    update readme for #498
    Updated the required scala depdendency
    Update README.md
    Updated the scala library requirements
    Update README.md
    Update README.md
    Updates readme with latest release
    Adds link to swagger annotation docs
    Update README.md
    
    Adds support note
    Changing repositories to jcenter
    Hiding bintray badge until release process is moved over
    Update README.md
    Fix typo in README
    Changes reademe to uppercase
    Cleaning up readme and removing some maven stuff
    Updated release notes
    Updating readme to reflect the latest release
    Updating version info to 0.8.7
    Update readme.md
    Update documentation to reflect 0.8.6 release
    Updated development and contribution guidelines link
    Added contribution guidelines
    Fixes sections on core concepts section
    Fixes sections on core concepts section
    Updates plugin adapter to find custom plugins from ancestor spring contexts.
    - Adds a note regarding context paths and servlet url patterns.
    Upgrade snapshot version on the readme.md file
    
    Upgrade snapshot version on the readme.md file from 0.8.4-SNAPSHOT to the current 0.8.5-SNAPSHOT.
    Adding a note on swagger-springmvc json endpoints
    Update readme.md
    Adding 0.8.4 release readme.
    Moving one directory down for coveralls reporting.
    Coveralls badge
    Triggering build after failed pull requst
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Reverting library version as 0.8.4 isn't out yet
    Temp remove coverage badge
    #282 Adding back absolute urls for resource listings
    Updated styles
    Preparing documentation for 0.8.4 release
    Updating the notable dependencies
    
    Fixes #263
    Update readme.md
    Released version 0.8.3
    Update readme.md
    
    Added documentation for substitution types
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Implementation that supports alternate types
    Documenting ignorable method param annotations feature
    Updating ci build status to master
    Adding note for pre-commit builds
    Removing note about oauth limitation
    Updating readme
    Update readme.md
    Updating readme
    Initial model creation using swagger provided scala model parsing
    Updating readme
    Fixed documentation in regards to property placeholder configuration
    
    Closes #183
    Updating to latest swagger config
    Supporting operation parameter primitive data types
    Supporting allowable min and max ranges
    Updating doco
    Update readme.md
    Updating doco
    Bump swagger core version
    Adding ApiParameter support
    Changed to absolute uri's in api declarations and resources
    Changing paths on ApiListingReference to be relative to the swagger group to work with swagger UI.
    Changing base and resource uris. Base needs to be absolute for swagger ui and swagger code gen.
    Adding docco
    ApiOperation: using swagger annotation for position
    ApiOperation: using swagger annotation for summary
    First stab at ApiOperations.
    Added ApiDescription to ApiListingScanner. Added support for multiple swagger resource listings from the same project. Some refactoring and cleanup.
    Adding support for media types. Added ApiListing scanner to generate swagger ApiListings.
    Adding inclusion patterns on listing scanner - defaults to all paths
    Adding spring config. Adding scala support to jackson mapper.
    Increasing coverage and general cleanup. Added support for ignorable annotations on controller methods.
    Added tests to mirror the spring-mvc-example project
    Added default swagger controller. Resolved more dependency issues and moved to correct scala version.
    Initial ApiResource Listing. Checkstyle to fail during test phase
    Update readme.md
    Updated the documentation to 0.6.5
    Updated documentation for java configuration
    Added credits section
    Updated readme
    Updated documentation
    Getting ready for 0.6.2
    Preparing 0.6.1 release
    Upgraded library version and updated readme
    Updated the version to 0.5.3
    
    closes #99
    Incrementing version of library in the readme
    Updated the documenation
    Added travis status
    Updated the documentation
    Updated configuration info to reflect the changes in 0.5.0
    Updated the readme to reflect 0.5.0
    Update the license to Apache License
    
    License matches parent Wordnik license
    
    closes #47
    Update readme.md
    
    Updated documentation to the latest released version
    Fixed issues with non-standard RequestMappings
    
    - Added tests to fix the bug as demonstrated by ExampleServiceController in the ControllerAdapterTest
    - Updated the Readme
    - Changed the version to 0.3.1-SNAPSHOT for maintenance release
    Updated with new version
    Fixed issues with non-standard RequestMappings
    
    - Added tests to fix the bug as demonstrated by ExampleServiceController in the ControllerAdapterTest
    - Updated the Readme
    - Changed the version to 0.3.1-SNAPSHOT for maintenance release
    Updated with new version
    Updated the configuration to reflect the changes
    Reworked the extensibility of the library
    
    - Refactored the packages
    - Added intelligent defaults for when the service only has spring
      annotations
    - Added support for model and model schema
    - Added Swagger configration extensibility options
    - Moved to jackson 2
    - Updating git ignore
    - Updated documentation and the current version
    Updated version number in readme.md
    Updated version number in readme.md
    Updated version
    Added Maven dependency
    Fixed readme.md
    Updated with comments about errors
    Tidying up
    Added cyclic stucture tests
    
    (2022)
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Added functional contract tests
    
    (2022)
    Upgraded the dependencies
    
    Also fixes as a result of upgrading asciidoctor
    
    (2022)
    extracting common code for webflux and webmvc
    renamed to spring-integration-webmvc to make room for webflux
    first version which documents parameters for spring-integration webmvc, removed petstore and petstore-tests
    started work on springfox-spring-integration
    Fixed gradle deprecations
    
    (2688)
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Moved publishable projects
    
    (2503)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Added new module to support oas 3.0
    
    (2022)
    Removed static docs from the project
    
    Since we're not going to update/change the project. The library will not change until we move to jdk 8. The plan is to give it a new home as a separate project, but until then it is not providing any value in this library
    
    (1497)
    Added initial configuration support for spring-data-rest
    Initial commit
    Re-organized project ordering
    Integrated the bean validator library into publishables
    Adds a module for documented spring configurations
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Added staticdocs module
    - Removed a bunch of gradle apply language plugins
    - Reverted gralde idea copyright generation from copyright file
    Adds the swagger 2 webjar module
    Updated the build files
    Cleaning up snapshot publishing tasks
    - Turns off travisci caching to fix build (likely cause cached .gradle dir)
    Initial release work
    Renames modules to springdox-
    Added swagger common module
    [#538] Adds petstore module in preparation for swagger 2.0
    WIP
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Upgraded compiler to java 11
    
    Additional fixes
    Set the java version
    
    (2022)
    Updated java version
    Upgrading compiler to java 8
    
    (2394)
    fix for spring data rest 3.0.5.RELEASE while maintaining backward compartibility
    #1773 Initial dependency upgrade along with API compatibility modifications
    WIP
    Fixed the license header
    Upgraded versions
    
    fixes #906
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Updated the release command to release the docs
    Added the bump task back
    Added more logging to the bump and tag task
    
    Also allowed it to run when forced
    Removed bumpAndTag from task graph
    
    This way it can run independently
    Fixed the dry run flag
    Changed the command to include all as gradle properties
    Added release script to the repository
    Bump com.github.node-gradle.node from 2.2.3 to 2.2.4
    
    Bumps com.github.node-gradle.node from 2.2.3 to 2.2.4.
    
    Signed-off-by: dependabot-preview[bot] <support@dependabot.com>
    Bump de.undercouch.download from 4.0.4 to 4.1.0
    
    Bumps de.undercouch.download from 4.0.4 to 4.1.0.
    
    Signed-off-by: dependabot-preview[bot] <support@dependabot.com>
    Made the dependencies strictly provided only
    
    This way spring/jackson etc will always take the dependencies that were provided
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Updated swagger-ui version to 3.26.2
    
    (2022)
    Upgraded depdendencies
    
    Adjusted the logging from info => trace
    
    (2022)
    Updated the node version and plugin
    
    (2022)
    Upgraded the dependencies
    
    Also fixes as a result of upgrading asciidoctor
    
    (2022)
    Fixed the build script to exclude logback
    
    This was causing build failure
    
    (2022)
    Build scripts cleanup
    
    Used the new form for plugin definitions and removed unused script blocks and rearranged the dependencies
    
    (2022)
    Upgrade to version of swagger which fixes css injection vulnerability as defined in https://github.com/tarantula-team/CSS-injection-in-Swagger-UI
    Bump swagger-ui depdency
    
    Security fix detailed in swagger-ui's release notes.
    https://github.com/swagger-api/swagger-ui/releases/tag/v3.23.11
    Update swagger-ui
    
    fixes #2012
    Add sourcemap to springfox.js.
    
    Resolves #2955
    Updated swagger UI to 3.20.9
    
    Also fixed npm package audit failures and updated package references
    
    relates to #2022
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed the npm build to use ci option
    Upgraded node/npm and fixed npm audit for vulnerabilities
    Uncommented dependencies.
    Updated libraries
    
    (2503)
    Add csrf token support
    Updated swagger ui to 3.14
    
    (2394)
    Updated swagger-ui to 3.13.6
    
    #2350
    Updated Javascript dependencies
    Updated dependencies
    
    relates to #2350
    Switched to explicit doLast to put the right version on cache buster
    
    fixes #2357
    Upgraded swagger-ui to latest verison
    
    (2350)
    Upgraded dependencies
    
    (2350)
    Fixed the build target dependencies
    
    This fixes the generation of the webjar to include the swagger-ui resources
    
    (2309)
    Upgrading swagger-ui to 3.11.0
    Added support for IE 11 and Edge
    fix combine computation to not combine if two patterns are equals
    fix checkstyle
    fix(): update build.gradle for swagger-ui jar generation
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Upgraded libraries prior to release
    
    (1899)
    Updated to swagger-ui 3.9.1
    
    (2166)
    Added cache busting to the swagger scripts/resources
    
    (2166)
    Upgrading swagger-ui to 3.9.0
    Upgrading swagger-ui to 3.8.1
    Upgrading swagger-ui to 3.7.0
    Upgrading swagger-ui to 2.2.10
    
    fixes #1628
    Upgraded libraries before working on the story
    
    (1621)
    Updated swagger-ui version to 2.2.8
    Upgraded to swagger-ui 2.2.6
    
    related to #1523
    Updated swagger-ui.html and version to 2.2.5
    Updated swagger-ui version
    
    Also updated libraries
    Updated the swagger-ui library to 2.2.2
    
    fixes #1415
    upgrade to swagger-ui 2.2.0
    Upgradle to gradle 2.14
    Fixed the corrupted font files in swagger ui
    
    fixes #1194
    Upgraded to swagger-ui 2.1.4
    
    related to #1126
    Upgraded swagger-ui to 2.1.3
    
    related to #939
    Set the gradle options and upgrade to gradle 2.7
    
    related to #939
    Fixes references to the swagger-ui repo
    
    Also upgraded the swagger-ui dependency version
    
    fixes #928
    Bump swagger-ui zip to version 2.1.1
    Optimized the javascript build
    Upgrade swagger-ui to the latest version (2.1.0)
    
    related to #770
    Refactoring the release plugin so that it infers the version without
    
    needing to modify source control. Introduced two concepts to be part of
    the CD build workflow:
    
    First idea to use the git annotated tags as a way to generate version
    numbers, rather than a version.properties file. git describe and git
    describe --exact-match to the rescue.
    
    Git already has an idea of generating serial predictable commit
    descriptions (build numbers) given an annotated tag for e.g. the
    currently the version according to git in this branch is
    2.0.0-62-g8433c2b it has the format 2.0.0-<count>-g<sha> where:
    
    - 2.0.0 is the annotated tag
    - count is the number of commits after the annotated tag (62 commits since
    2.0.0!!)
    - sha is the commit sha. (8433c2b is the current sha)
    
    Second idea I introduced is a way to infer the snapshot build/ release
    build using the concept of a build number suffix. Rather than change the
    version decorator used.
    
    resolves #759
    closes #760
    Fixes javascript error in springfox.js
    
    Also upgraded to the latest swagger-ui
    
    fixes #713
    Moving html page out of deep webjar directory tree
    - Removing version from webjar path
    Adding javascript to discover swagger resources
    Removes jsp from swagger-ui
    - Adds an endpoint to list all of the swagger resources within a running application
    - Added a base class for swagger contract tests
    Adds a test for resource location
    Add resource discovery to swagger ui webjar
    - Changing webjar layout to match the webjar standard
    - Added gitter/circleci integration
    Removed spring dependencies that were introduced when experimenting
    Added SwaggerUiConfiguration to the swagger-ui library
    
    The main reason for doing this is that WebMvcAutoConfiguration is not loaded
    the moment any manual mvc configuration is done. For e.g. we use the WebMvcConfigurationAdapter
    to configure message converters in Swagger2DocumentationConfiguration and JacksonSwaggerSupport
    As a result the spring boot auto configuration will never kick in as it is a conditional bean
    
    Details here :https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java
    
    In any case, we need a way to tell spring to load webjars and resources from class path. Lifted some of the
    code from the WebMvcAutoConfiguration to facilitate that.
    
    related to #638 to support spring boot scenarios
    Upgrading swagger-ui version to 2.1.8-M1
    Fixes manifest attribute
    Adds the swagger 2 webjar module
    fix fmt
    
    swagger-ui .html   -> swagger-ui.html
    unnecessary space.
    Fixes references to the swagger-ui repo
    
    Also upgraded the swagger-ui dependency version
    
    fixes #928
    Update the swagger-ui related documentation
    Moving resource controller out of swagger-ui
    Formatting
    Adding some documentation
    Doumentation reminder
    Adds the swagger 2 webjar module
    Renaming swagger ui package name
    Moving resource controller out of swagger-ui
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Bump elliptic from 6.5.2 to 6.5.3 in /springfox-swagger-ui/src/web
    
    Bumps [elliptic](https://github.com/indutny/elliptic) from 6.5.2 to 6.5.3.
    - [Release notes](https://github.com/indutny/elliptic/releases)
    - [Commits](https://github.com/indutny/elliptic/compare/v6.5.2...v6.5.3)
    
    Signed-off-by: dependabot[bot] <support@github.com>
    Bump lodash from 4.17.15 to 4.17.19 in /springfox-swagger-ui/src/web
    
    Bumps [lodash](https://github.com/lodash/lodash) from 4.17.15 to 4.17.19.
    - [Release notes](https://github.com/lodash/lodash/releases)
    - [Commits](https://github.com/lodash/lodash/compare/4.17.15...4.17.19)
    
    Signed-off-by: dependabot[bot] <support@github.com>
    Fixed vulnerabilities in javascript assets
    Ran audit fix on the npm moduls
    
    (2022)
    Ran npm audit fix to update the packages
    
    (2022)
    WIP2
    Bump handlebars from 4.1.2 to 4.5.3 in /springfox-swagger-ui/src/web
    
    Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.
    - [Release notes](https://github.com/wycats/handlebars.js/releases)
    - [Changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md)
    - [Commits](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)
    
    Signed-off-by: dependabot[bot] <support@github.com>
    Bump mixin-deep from 1.3.1 to 1.3.2 in /springfox-swagger-ui/src/web
    
    Bumps [mixin-deep](https://github.com/jonschlinkert/mixin-deep) from 1.3.1 to 1.3.2.
    - [Release notes](https://github.com/jonschlinkert/mixin-deep/releases)
    - [Commits](https://github.com/jonschlinkert/mixin-deep/compare/1.3.1...1.3.2)
    
    Signed-off-by: dependabot[bot] <support@github.com>
    Bump lodash from 4.17.11 to 4.17.15 in /springfox-swagger-ui/src/web
    
    Bumps [lodash](https://github.com/lodash/lodash) from 4.17.11 to 4.17.15.
    - [Release notes](https://github.com/lodash/lodash/releases)
    - [Commits](https://github.com/lodash/lodash/compare/4.17.11...4.17.15)
    
    Signed-off-by: dependabot[bot] <support@github.com>
    Bump handlebars from 4.1.0 to 4.1.2 in /springfox-swagger-ui/src/web
    
    Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.0 to 4.1.2.
    - [Release notes](https://github.com/wycats/handlebars.js/releases)
    - [Changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md)
    - [Commits](https://github.com/wycats/handlebars.js/compare/v4.1.0...v4.1.2)
    
    Signed-off-by: dependabot[bot] <support@github.com>
    Bump js-yaml from 3.12.1 to 3.13.1 in /springfox-swagger-ui/src/web
    
    Bumps [js-yaml](https://github.com/nodeca/js-yaml) from 3.12.1 to 3.13.1.
    - [Release notes](https://github.com/nodeca/js-yaml/releases)
    - [Changelog](https://github.com/nodeca/js-yaml/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/nodeca/js-yaml/compare/3.12.1...3.13.1)
    
    Signed-off-by: dependabot[bot] <support@github.com>
    Updated swagger UI to 3.20.9
    
    Also fixed npm package audit failures and updated package references
    
    relates to #2022
    Upgraded node/npm and fixed npm audit for vulnerabilities
    Fix lodash CVE version
    
    (2688)
    Add csrf token support
    Updated Javascript dependencies
    Fixed the package name
    
    (2309)
    Upgrading swagger-ui to 3.11.0
    Added minify plugin
    Added support for IE 11 and Edge
    Updated swagger UI to 3.20.9
    
    Also fixed npm package audit failures and updated package references
    
    relates to #2022
    Remove babel preset stage-3
    Add csrf token support
    Added target browsers, removed dist file
    Added support for IE 11 and Edge
    Added target browsers, removed dist file
    Add sourcemap to springfox.js.
    
    Resolves #2955
    Updated Javascript dependencies
    Added minify plugin
    Added target browsers, removed dist file
    Added support for IE 11 and Edge
    Made the dependencies strictly provided only
    
    This way spring/jackson etc will always take the dependencies that were provided.
    
    Also this fixes the webjar to be more self contained that what it was.
    It was a nightmare getting all the paths to align so that UI renders
    correctly.
    Added cache busting to the swagger scripts/resources
    
    (2166)
    Upgrading swagger-ui to 3.7.0
    Modernized swagger-ui to work with 2.2.5
    Updated swagger-ui.html and version to 2.2.5
    [issues 1318] fixing favicon images urls
    Upgraded to swagger-ui 2.1.4
    
    related to #1126
    Setup base URL after Swagger is initialized #1126
    Added support to configure how the api key is sent
    
    It was hard-coded to send it via the query parameter only. With this change
    the library consumers can choose via a configuration how the api key needs to
    be sent to the services
    
    fixes #943
    Adjusted the indentation
    changed tabs to spaces
    fix async bug
    Re-added security definition check so as to initiate oauth only when it has valid values
    Updated the security configuration to support the improved oauth support in swagger-ui
    
    - Updated tests to improve coverage
    
    related to #928
    Updated the swagger-ui client to match the original as much as possible
    
    related to #928
    fix for issue #870. "click to authenticate" button not clickable
    More refactoring to tease out springfox specific initialization
    Matched swagger-ui.html with the index.html
    
    - Streamlined the springfox-ui.html to make it easy to diff and migrate changes
    
    fixes to #851
    Link to minified swagger-ui
    
    This reduces the amount of data that needs to be transferred by 2mb!
    Implemented ui configuration via spring beans
    
    fixes #796
    Implemented security configuration for swagger ui
    
    fixes to #788
    Removed unused javascript references
    Fixing static resource paths
    Moving html page out of deep webjar directory tree
    - Removing version from webjar path
    Adding javascript to discover swagger resources
    Removes jsp from swagger-ui
    - Adds an endpoint to list all of the swagger resources within a running application
    - Added a base class for swagger contract tests
    Add resource discovery to swagger ui webjar
    - Changing webjar layout to match the webjar standard
    - Added gitter/circleci integration
    Ran audit fix on the npm moduls
    
    (2022)
    Ran npm audit fix to update the packages
    
    (2022)
    Updated swagger UI to 3.20.9
    
    Also fixed npm package audit failures and updated package references
    
    relates to #2022
    Upgraded node/npm and fixed npm audit for vulnerabilities
    Fix lodash CVE version
    
    (2688)
    fix/remove apostrophe in package JSON description
    Add csrf token support
    Updated Javascript dependencies
    Fixed the package name
    
    (2309)
    Upgrading swagger-ui to 3.11.0
    Added minify plugin
    Added target browsers, removed dist file
    Added support for IE 11 and Edge
    Upgrading swagger-ui to 3.7.0
    Upgrading swagger-ui to 3.7.0
    Upgrading swagger-ui to 3.7.0
    Upgrading swagger-ui to 3.7.0
    Upgrading swagger-ui to 3.7.0
    Upgrading swagger-ui to 3.7.0
    Upgrading swagger-ui to 3.7.0
    Upgrading swagger-ui to 3.7.0
    Upgrading swagger-ui to 3.7.0
    Upgrading swagger-ui to 3.7.0
    Upgrading swagger-ui to 3.7.0
    Upgrading swagger-ui to 3.7.0
    Upgrading swagger-ui to 3.7.0
    Upgrading swagger-ui to 3.7.0
    Remove babel preset stage-3
    Add csrf token support
    Updated swagger UI to 3.20.9
    
    Also fixed npm package audit failures and updated package references
    
    relates to #2022
    Add csrf token support
    Fixed the base path for the oauth redirect
    
    fixes #3368
    Fixed the oauth redirect url to be absolute
    
    (3368)
    Fixed the CORS endpoint baseUrl
    
    NOTE: this will still give a 404 @ the /<context/>csrf endpoint, but spring will return the XSRF-TOKEN in a cookie with the 404 response.
    
    resolves #2603
    Fixed the swagger server generated
    
    This strips out the context path from the host name, which was causing it to make the try it out calls fail
    
    (3351)
    Swagger ui endpoints can be navigated at /swagger-ui/
    
    relates to #3345
    Made the dependencies strictly provided only
    
    This way spring/jackson etc will always take the dependencies that were provided.
    
    Also this fixes the webjar to be more self contained that what it was.
    It was a nightmare getting all the paths to align so that UI renders
    correctly.
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Expose the 'showCommonExtensions' configuration available in swagger-ui
    through springfox UiConfiguration and UiConfigurationBuilder
    
    It's available in swagger-ui since v3.14.0
    
    Co-authored-by: Ippei Nawate <saku.ni63@gmail.com>
    Co-authored-by: Benoit <b.wiart@ubik-ingenierie.com>
    Make csrf support optional
    Added accept and content-type headers
    
    This will force request to not use the default browser headers.
    
    fixes #2461
    Add csrf token support
    Added support for absolute resource url
    
    When resource urls are absolute, as in the case of aggregated endpoints, we need to not concatenate the base url.
    
    fixes #2235
    Upgrading swagger-ui to 3.11.0
    Use credentials on same origin
    Improved setting api to Swagger UI 3.x
    Upgrading swagger-ui to 3.7.0 with OAuth and error handling
    Upgrading swagger-ui to 3.7.0
    Reworded the comment
    
    (1988)
    custome the weg page title as swagger.title when had set it
    
    custome the weg page title as swagger.title when had set it
    Added ability to override the base url
    
    Since springfox relies on the position of swagger-ui.html in the URL, when that is not accurate in certain cases (#1615) or may be missing (#1707) we provide a prompt so the user can update the base url manually. This makes the UI useable even in cases where the api metadata is not available at the expected location.
    
    fixes #1615
    fixes #1707
    OAuth2 not initialized when clientSecret undefined
    
    When clientSecret is set to null on the server-side,
    the client-side doesn't initialize any OAuth2 values.
    Problem is that clientSecret is not used in some oauth2
    flow (i.e. implicit flow).
    
    The URL generated to initiate OAuth2 authentication flow
    contains an undefined client_id parameter.
    Added support for configuring the request timeout
    
    (#1523)
    Rearranged before working on this feature
    
    related to #1523
    Modernized swagger-ui to work with 2.2.5
    Modified how to set jsonEditor parameter
    fix for #1291
    Fixing missing single quote
    Only encode the API key when passed in URL query
    
    I am current passing tokens through the header. Everything is working using the current app but when trying it on Swagger UI, I noticed that the tokens changed.
    Added swagger-resource uri namspace around security and ui configuration
    
    needed for swagger-ui.
    
    fixes #1203
    Added a way to override for the name of the api key header
    
    resolves #1087
    Provided a way to supply a ui configuration bean
    
    Added additional properties to the UI configuration bean to override properties such as docExpansion, jsonEditor etc.
    
    fixes #1122
    Upgraded to swagger-ui 2.1.4
    
    related to #1126
    Setup base URL after Swagger is initialized #1126
    fix for issue #870. "click to authenticate" button not clickable
    Formatting indentation to match groovy indentation
    
    closes #851
    Allow loading of external urls specified in the swagger resource location
    
    resolves #843
    Added the oAuthRedirectUrl location relative to the baseUrl
    
    fixes #829
    Implemented ui configuration via spring beans
    
    fixes #796
    Implemented security configuration for swagger ui
    
    fixes to #788
    Fixes javascript error in springfox.js
    
    Also upgraded to the latest swagger-ui
    
    fixes #713
    Updated the script to work on reload
    
    fixes #713
    Removes redundant loop
    Fixing static resource paths
    Removing duplicate forward slash
    Removing javascript alert
    Adding javascript to discover swagger resources
    Removes jsp from swagger-ui
    - Adds an endpoint to list all of the swagger resources within a running application
    - Added a base class for swagger contract tests
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Upgrading swagger-ui to 3.7.0
    Bump rawhttp-core from 2.3.0 to 2.4.0
    
    Bumps [rawhttp-core](https://github.com/renatoathaydes/rawhttp) from 2.3.0 to 2.4.0.
    - [Release notes](https://github.com/renatoathaydes/rawhttp/releases)
    - [Commits](https://github.com/renatoathaydes/rawhttp/compare/core-2.3.0...core-2.4.0)
    
    Signed-off-by: dependabot-preview[bot] <support@dependabot.com>
    Bump rawhttp-core from 2.2.1 to 2.3.0
    
    Bumps [rawhttp-core](https://github.com/renatoathaydes/rawhttp) from 2.2.1 to 2.3.0.
    - [Release notes](https://github.com/renatoathaydes/rawhttp/releases)
    - [Commits](https://github.com/renatoathaydes/rawhttp/compare/core-2.2.1...core-2.3.0)
    
    Signed-off-by: dependabot-preview[bot] <support@dependabot.com>
    Fixed the straggler library dependencies
    
    Also updated to spring boot 2.3.1
    
    (2022)
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Upgraded the dependencies
    
    Also fixes as a result of upgrading asciidoctor
    
    (2022)
    Build scripts cleanup
    
    Used the new form for plugin definitions and removed unused script blocks and rearranged the dependencies
    
    (2022)
    Upgrade libraries and plugin versions
    
    (2022)
    parameters provider and operation builder plugin test
    define response body examples using spring-restdocs
    extracting common code for webflux and webmvc
    removed unnecessary classes, use their counterparts in webmvc and webflux instead, first working version of webflux integration
    renamed to spring-integration-webmvc to make room for webflux
    first version which documents parameters for spring-integration webmvc, removed petstore and petstore-tests
    started work on springfox-spring-integration
    Remove duplicated dependency.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Added dependency for validation annotations
    
    (1749)
    Added reflections library for annotation scanning
    
    This is in preparation for scanning for jackson annotations and
    serializers and deserializers.
    
    (1490)
    Upgraded libraries before working on the story
    
    (1621)
    Fixed the artifact based sharing of test code
    Updated the converage numbers
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Adjusted the spring dependencies to provided
    
    Also reverted to using the regular servlet api dependency
    Updated the build files
    Renamed modules and directories
    Renames modules to springdox-
    Updated the build scripts to publish all the publishable modules
    
    Also realized that nothing is pulling in the common module, so updated the configuration beans to import it
    Switched to using swagger 1.5 throughout the library
    WIP
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Added tests for allowable values
    
    - Made the test artificats use the testCompile rather than compile dependencies
    Removed all scala dependencies by group
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Setup scala library excludes
    [#463] Adding javadoc to publication
    Adds a preRelease task to prevent duplicate publishing of released artifact versions.
    Externalizes maven pom filtering and sets groovy-all dependency to test.
    Adds maven provided scope to pom dependencies
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    resolved checkstyle issues
    improved readme, removed TODO in code
    improved readme
    try to link to webmvc and webflux readmes
    improved readme
    define response body examples using spring-restdocs
    extracting common code for webflux and webmvc
    removed unnecessary classes, use their counterparts in webmvc and webflux instead, first working version of webflux integration
    renamed to spring-integration-webmvc to make room for webflux
    started work on springfox-spring-integration
    describe spring-restdocs usage for documenting webflux response bodies
    describe spring-restdocs usage for documenting webflux response bodies
    Fixed the build and also fixed depcration warnings
    Reformatted the code to match style guide
    
    Indents are 2 spaces and we splat static imports and dont splat regular imports (Should probably advertise this better)
    
    (2793)
    parameters provider and operation builder plugin test
    More reformatting to match existing style
    
    (2793)
    Reformatted the code to match style guide
    
    Indents are 2 spaces and we splat static imports and dont splat regular imports (Should probably advertise this better)
    
    (2793)
    test for request body type
    parameters provider and operation builder plugin test
    extracting common code for webflux and webmvc
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    define response body examples using spring-restdocs
    removed adoc frames from all springfox snippets
    define response body examples using spring-restdocs
    removed adoc frames from all springfox snippets
    define response body examples using spring-restdocs
    removed adoc frames from all springfox snippets
    define response body examples using spring-restdocs
    removed adoc frames from all springfox snippets
    define response body examples using spring-restdocs
    removed adoc frames from all springfox snippets
    define response body examples using spring-restdocs
    removed adoc frames from all springfox snippets
    define response body examples using spring-restdocs
    removed adoc frames from all springfox snippets
    define response body examples using spring-restdocs
    removed adoc frames from all springfox snippets
    define response body examples using spring-restdocs
    removed adoc frames from all springfox snippets
    define response body examples using spring-restdocs
    define response body examples using spring-restdocs
    define response body examples using spring-restdocs
    define response body examples using spring-restdocs
    removed adoc frames from all springfox snippets
    define response body examples using spring-restdocs
    define response body examples using spring-restdocs
    removed adoc frames from all springfox snippets
    define response body examples using spring-restdocs
    2967: disable standard DocumentationPluginsBootstrapper if spring-integration plugin is present, not if spring-integration is present
    checkstyle issue: line length
    removed duplications, documentation cleanup, some name changes for consistency
    extracting common code for webflux and webmvc
    renamed to spring-integration-webmvc to make room for webflux
    first version which documents parameters for spring-integration webmvc, removed petstore and petstore-tests
    Reformatted the code to match style guide
    
    Indents are 2 spaces and we splat static imports and dont splat regular imports (Should probably advertise this better)
    
    (2793)
    resolved checkstyle issues
    define response body examples using spring-restdocs
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed codacy complaints
    
    (2793)
    Reformatted the code to match style guide
    
    Indents are 2 spaces and we splat static imports and dont splat regular imports (Should probably advertise this better)
    
    (2793)
    parameters provider and operation builder plugin test
    extracting common code for webflux and webmvc
    resolved checkstyle issues
    removed unnecessary classes, use their counterparts in webmvc and webflux instead, first working version of webflux integration
    renamed to spring-integration-webmvc to make room for webflux
    first version which documents parameters for spring-integration webmvc, removed petstore and petstore-tests
    Fixed the package after dependency upgrade
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Reformatted the code to match style guide
    
    Indents are 2 spaces and we splat static imports and dont splat regular imports (Should probably advertise this better)
    
    (2793)
    use streams to map parameters in parameters provider
    removed duplications, documentation cleanup, some name changes for consistency
    extracting common code for webflux and webmvc
    resolved checkstyle issues
    removed unnecessary classes, use their counterparts in webmvc and webflux instead, first working version of webflux integration
    renamed to spring-integration-webmvc to make room for webflux
    first version which documents parameters for spring-integration webmvc, removed petstore and petstore-tests
    Fixed the build and also fixed depcration warnings
    Updated builder method
    
    (2022)
    Added changes relavant to spring integration
    
    (2022)
    Updated the signature of Headers
    
    (2022)
    Enriched Example and added builders
    
    Kept the constructors and deprecated them for backwards compatibility
    
    (2022)
    reéoved unused import
    fix for issue #3178
    
    replace  new FileInputStream(resource.getFile()) with https://github.com/springfox/springfox/issues/3178
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed codacy complaints
    
    (2793)
    Reformatted the code to match style guide
    
    Indents are 2 spaces and we splat static imports and dont splat regular imports (Should probably advertise this better)
    
    (2793)
    resolved checkstyle issues
    improved readme, removed TODO in code
    define response body examples using spring-restdocs
    Added anchors for section links.
    
    it makes it easy to link to documentation
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Upgraded the dependencies
    
    Also fixes as a result of upgrading asciidoctor
    
    (2022)
    Updated the grgit dependency
    
    This is to fix the broken build
    
    relates to #2022
    Changed to use https endpoint and configured GRGIT_USER/PASS
    
    relates to #2688
    Fixed the broken build
    
    relates to #2688
    Migrated to use 'org.ajoberstar.git-publish' plugin
    
    This is because the gh pages plugin is deprecated
    
    (2688)
    Updated the bumping/tagging task
    
    The command used to fail when releasing the software. As a result, decided to add and commit all changed files. This command should be equivalent. Also updated the logging to be accurate.
    
    #2350
    Standardized logging in build script for docs
    
    #2350
    Changed to push gh-pages to local repo
    
    #1505
    Simplified the documentation plugin
    
    Instead of manually doing all the work of staging the commits and pushing it, we rely on the gh pages plugin to do the needful. This greatly simplifies what we need to do by hand. This is the following that happens now.
    
    1. Docs are always published to snapshot which is no longer a symlink. It is a static destination
    2. When we call the releaseDocs task we create the release and stage it for the gh pages plugin to take over (via the createReleaseDocs task)
    3. The createReleaseDocs task creates a new folder with the released version symlinks it to current ready to be pushed up to github
    4. This should technically be done immediately after the release and immutable from there on out.
    
    (1505)
    Updated documentation for springfox-swagger-ui-rfc6570
    
    (#1523)
    Display all the commands that will be executed post documentation
    Fixed a bug with the document publishing
    
    related to #1334
    Logging the git commands during dryRun
    Fixed the release build check
    Preparing for next version
    Updated the asciidoc location and updated the plugin version
    'Releasing
    Added logging to the publishing task
    
    Also fixed the next version for release builds
    Added dry run support for document generation
    Fixed the references to ext properties and fixed tests
    Add a task to generate and open the docs
    Parameterized the versions in the documentation
    Revert the local user email and name once we're done publishing the documentation
    
    related to #759
    Version not propogating to the bintray publish
    
    - Adding publish version to the configured publications
    - Refactored the subprojects build
    Related to #759
    Refactoring the release plugin so that it infers the version without
    
    needing to modify source control. Introduced two concepts to be part of
    the CD build workflow:
    
    First idea to use the git annotated tags as a way to generate version
    numbers, rather than a version.properties file. git describe and git
    describe --exact-match to the rescue.
    
    Git already has an idea of generating serial predictable commit
    descriptions (build numbers) given an annotated tag for e.g. the
    currently the version according to git in this branch is
    2.0.0-62-g8433c2b it has the format 2.0.0-<count>-g<sha> where:
    
    - 2.0.0 is the annotated tag
    - count is the number of commits after the annotated tag (62 commits since
    2.0.0!!)
    - sha is the commit sha. (8433c2b is the current sha)
    
    Second idea I introduced is a way to infer the snapshot build/ release
    build using the concept of a build number suffix. Rather than change the
    version decorator used.
    
    resolves #759
    closes #760
    Adds task to update docs for released versions
    Remove symlink before updating
    Symlinks again
    Fixing symlinks
    Attempt to create correct symlinks when docs published
    Generating correct symlinks
    Publishing symlinks for documantation and javadoc
    Reinstating 2.0.0 version
    Symlinking published docs
    Cleanup
    Adds a basic starter example to the getting started guide
    Adding line feed
    Publishing javadoc
    Publish doc to a version directory
    Attempt to publish docs
    Generates and publishes asciidoc
    Reverted groovy/spock because of memory issues
    Upgraded to groovy 3 and spock 2.0
    Upgraded compiler to java 11
    
    Additional fixes
    Fixed the straggler library dependencies
    
    Also updated to spring boot 2.3.1
    
    (2022)
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Upgraded depdendencies
    
    Adjusted the logging from info => trace
    
    (2022)
    Updated to use the swagger open api library
    
    (2022)
    Upgraded the dependencies
    
    Also fixes as a result of upgrading asciidoctor
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Merging master
    Updated dependencies versions
    
    (2022)
    Added mapping support for servers and variables
    
    (2022)
    Upgrading the dependencies before starting on work
    
    (2022)
    mapstruct 1.3.1
    jackson 2.10.1
    #2932: Minor version upgrades of spring dependencies. Aligned contract tests with Spring HATEOAS 1.x. Fixed wrong client encoding used in tests.
    #2932: Fixed import for model test.
    #2932 - Spring Data REST 3.2.0.RELEASE
    #2932 - Spring HATEOAS 1.0.0.RELEASE
    Updated spring dependencies to spring 5.2.0 and spring boot 2.2.0, fixed changed interfaces
    Upgrade libraries and plugin versions
    
    (2022)
    Reformatted the code to match style guide
    
    Indents are 2 spaces and we splat static imports and dont splat regular imports (Should probably advertise this better)
    
    (2793)
    first version which documents parameters for spring-integration webmvc, removed petstore and petstore-tests
    started work on springfox-spring-integration
    fixup! Update dependency versions
    Update dependency versions
    
    (2688)
    Reformatting
    
    (1773)
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Fixes after initial merge.
    Migrate to ClassGraph (formerly FastClasspathScanner) 4.0.3
    Upgraded dependency versions and libraries
    
    Moved to spring boot 2.0
    
    (2516)
    migrate from guava Cache and removed Guava
    updating java to 1.8 and guava version that support 1.8
    Updated libraries
    
    (2503)
    Replace Reflections with FastClassPathScanner (#2243)
    Updated dependencies
    
    relates to #2350
    Upgraded dependencies
    
    (2350)
    Added conditional bean configuration support
    
    Before this springfox would load in integration tests where there is no web environment
    
    (2329)
    Merge fix
    Added tests to verify another nested/recursive defenition
    
    resolves #2282
    Added property to test the changes
    
    Also up-revved the swagger core library that contains the fix for rendering examples. Also updated the contract tests to reflect this change.
    
    (1964)
    #1773 springfox: spring-boot:2.0.0.RELEASE with other dependencies upgraded to match those in boot
    #1773 springfox: Adding Spring Boot 2 (RC2) globally
    #1773 contract-tests: adding Spring Boot 2
    #1773 Initial dependency upgrade along with API compatibility modifications
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Remove spring-web-mvc deps from core
    
    Add two interfaces :
       - NameValueExpression
       - PatternsRequestCondition
    
    Class from spring will be wrapped onto this classes
    Upgraded libraries prior to release
    
    (1899)
    Upgrading the dependencies before starting on work
    
    (2022)
    add some tests
    Incremented swagger-core library version
    
    (1864)
    Upgrade base library versions
    
    related to #1899
    Uprev dependency versions to the latest
    
    (1623)
    Added dependency for validation annotations
    
    (1749)
    Reverted to groovy 2.4.8
    
    #1505
    Updated the groovy library to 2.4.10
    
    (1505)
    Added convention to discover the jackson annotated
    
    This is to automatically pull in alternate type rules for jackson
    annotated classes i.e. classes annotated with `JsonSerialize(as)` or
    `JsonDeserialize(as)`.
    
    (1490)
    Added reflections library for annotation scanning
    
    This is in preparation for scanning for jackson annotations and
    serializers and deserializers.
    
    (1490)
    Introduced ByteBuddy dependency
    
    Since spock is not compatible with the latest version we need to force it to use CGLIB for mocking
    
    (1323)
    Updated library dependencies
    
    fixes #1644
    Upgraded libraries before working on the story
    
    (1621)
    Updated documentation for springfox-swagger-ui-rfc6570
    
    (#1523)
    Upgraded gradle to 3.1
    
    Also upgraded libraries and disabled the daemon on the CI build
    Added initial configuration support for spring-data-rest
    Updated swagger-ui version
    
    Also updated libraries
    Upgraded the libraries especially the contract tests
    Uprevved versions and removed commented code in build script
    Upgrade all dependencies to the latest version
    Alphabetized the dependencies and uprevved swagger-core
    Upgraded classmate library to 1.3.1
    
    fixes #1079
    Upgraded swagger library to 1.5.5
    
    related to #1086
    Removed dependency on spring-hateoas
    
    In addition upgraded the jackson libraries and the json assert libraries.
    This change is mainly to remove the dependency on spring-hateoas being available
    for this library.
    
    fixes #1104
    Upgraded the essential libraries before testing spring-boot 1.3 support
    
    related to #939
    Updated the dependencies
    
    related to #1055
    related to #927, #921, #938 (spring 3.x support)
    related to #939
    Upgraded swagger libraries to 2.5.4
    
    related to #939
    Changes to limit libraries
    Updated dependencies
    Removed aspectjrt dependency as it isnt required
    Upgraded to swagger-core 1.5.3
    Upgraded versions
    
    fixes #906
    Pruned the dependencies
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Since this is part of a dot release, backporting it to use spring 4.0.9 where
    
    cacheables do not expose a keyGenerator annotation attribute
    
    related to #682
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Upgraded dependencies and sanitized log messages used for initial debugging
    Updated the naive host/port resolution strategy
    Upgraded to swagger-core 1.5.3-M1
    
    Also upgraded other libraries. Addressed the security related changes
    in swagger models
    Formatting
    Fixing string interpolation issue
    Adjusted the spring dependencies to provided
    
    Also reverted to using the regular servlet api dependency
    Added support for rendering maps in swagger 2
    Upgraged to spring 4.0.x
    Upgraded Spock and groovy
    Upgraded to swagger 1.5.2-M1
    Switched to using swagger 1.5 throughout the library
    WIP
    Modularized the configuration
    
    - Also added bean ordering so that spring plugins are always run before the swagger plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Upgraded guava to the latest version
    Upgraded dependencies
    [#538] Introduced documentation plugins
    Upgraded dependencies
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#518] Changed the default content type to json
    
    fixes #518
    Updated dependency versions
    Update the swagger-core depdendency to a working version
    Fixed the broken build
    
    - Swagger 1.3.9 introduced a breaking change in the serialization of ApiListings
    - Uncommented ignored test
    - Updated few more dependencies
    Caught up with all the compatible versions
    Safe to build with java 1.6 now
    
    - Also some cleanup in the gradle scripts
    Revert "Depend on Swagger 1.3.8; Pass false to the ApiDescription constructor"
    Depend on Swagger 1.3.8; Missed the dependencies.gradle
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Upgrade to java 8
    
    (2516)
    updating java to 1.8 and guava version that support 1.8
    #1773 springfox: spring-boot:2.0.0.RELEASE with other dependencies upgraded to match those in boot
    Updated gradle to 3.0
    Added eclipse plugin
    Renamed idea specific file to ide build script to include eclipse plugin
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Generates and publishes asciidoc
    Removes jsp from swagger-ui
    - Adds an endpoint to list all of the swagger resources within a running application
    - Added a base class for swagger contract tests
    Added staticdocs module
    - Removed a bunch of gradle apply language plugins
    - Reverted gralde idea copyright generation from copyright file
    Add resource discovery to swagger ui webjar
    - Changing webjar layout to match the webjar standard
    - Added gitter/circleci integration
    Publishing - maiden flight to bintray
    Initial release work
    Relaxing linelength checkstyle rule
    Removes all IDE files and uses gradle idea plugin to configure the projects
    Optimized build to produce java 8 compatible source code
    Fixed the implementation version
    
    fixes #3341
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Made maven central sync a configured value
    
    related to #2504
    Close maven sync automatically
    
    relates to #2504
    Updated javadocs that are preventing publishing
    
    related to #2504
    Updated the publishing to use the artifactory plugin
    
    Also changed the bintray plugin to publish to maven central directly with local private key
    
    (2394)
    correct spelling, fix typos
    (issue #1896)
    Include generated sources in published artifact
    
    fixes #1407
    Fix for the snapshot builds not getting published during the CI build
    
    fixes #804
    Upgraded dependencies and sanitized log messages used for initial debugging
    Version was incorrect in the bintray config
    Configure rather than just setting the property
    Configure rather than just setting the property
    Consolidated the publishing related gradle scripts into the publishing script
    
    related to #759
    Version not propogating to the bintray publish
    
    - Adding publish version to the configured publications
    - Refactored the subprojects build
    Related to #759
    Refactoring the release plugin so that it infers the version without
    
    needing to modify source control. Introduced two concepts to be part of
    the CD build workflow:
    
    First idea to use the git annotated tags as a way to generate version
    numbers, rather than a version.properties file. git describe and git
    describe --exact-match to the rescue.
    
    Git already has an idea of generating serial predictable commit
    descriptions (build numbers) given an annotated tag for e.g. the
    currently the version according to git in this branch is
    2.0.0-62-g8433c2b it has the format 2.0.0-<count>-g<sha> where:
    
    - 2.0.0 is the annotated tag
    - count is the number of commits after the annotated tag (62 commits since
    2.0.0!!)
    - sha is the commit sha. (8433c2b is the current sha)
    
    Second idea I introduced is a way to infer the snapshot build/ release
    build using the concept of a build number suffix. Rather than change the
    version decorator used.
    
    resolves #759
    closes #760
    [#612] Release tasks WIP
    Disable java8's doclint
    Find/replace springdox/springfox what could go wrong :)
    Implementing pre-release tasks
    Publishing - maiden flight to bintray
    More release related tasks
    - Sets apps version to 'dangerous' for release testing
    - Saves version post release
    - Adds git/release tasks
    Initial release work
    Updated the build scripts to publish all the publishable modules
    
    Also realized that nothing is pulling in the common module, so updated the configuration beans to import it
    WIP
    [#440] Add support for generating models that are represented in the ApiResponse annotations
    
    closes #440
    Caught up with all the compatible versions
    [#463] Adding maven required pom attributes
    [#463] Adding javadoc to publication
    [#423] Fixing pom dependencies
    Rewords confusing publishing log message
    Publishing snapshots from CI build
    Adds a preRelease task to prevent duplicate publishing of released artifact versions.
    Publishes release artifacts to bintray
    Publishing to https://oss.jfrog.org (not yet bintray)
    Externalizes maven pom filtering and sets groovy-all dependency to test.
    Adds maven provided scope to pom dependencies
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Updated to use gradle 6.5
    
    (2022)
    Upgraded gradle to 6.4
    
    (2022)
    Upgraded gradle
    
    (2022)
    Upgraded to gradle 5.2.1
    
    (2022)
    Upgraded gradle to 5.2
    
    (2022)
    renamed to spring-integration-webmvc to make room for webflux
    Update gradle to 4.10.1
    
    (2688)
    Upgraded gradle wrapper
    
    (2328)
    Updated gradle to 4.8.1
    
    related to #2504
    Upgraded gradle wrapper
    
    (2350)
    fix for spring data rest 3.0.5.RELEASE while maintaining backward compartibility
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Upgraded gradle
    
    (1899)
    Upgrade base library versions
    
    related to #1899
    correct spelling, fix typos
    (issue #1896)
    Uprev gradle version to 3.5
    
    (1623)
    Cleaning up
    Adding vendor extensions to api info and documentationbuilder
    Updated gradle version and changed java opts
    
    #1505
    Updated gradle to 3.4
    
    (1623)
    Upgraded gradle to 3.1
    
    Also upgraded libraries and disabled the daemon on the CI build
    Updated gradle to 3.0
    Upgradle to gradle 2.14
    Upgraded gradle wrapper to 2.13
    Upgraded gradle to 2.9
    
    related to #1086
    Upgrade to gradle 2.8
    
    - Update spock version in buildSrc project
    - move memory options to gradle.properties
    Set the gradle options and upgrade to gradle 2.7
    
    related to #939
    Upgraded to gradle 2.4
    Revert "Trial with gradle 2.4"
    
    This reverts commit 165570fa0b4874a23fabb6adfde99411504cbcba.
    Trial with gradle 2.4
    Upgrades Gradle to v 2.3
    Safe to build with java 1.6 now
    
    - Also some cleanup in the gradle scripts
    Externalizes maven pom filtering and sets groovy-all dependency to test.
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Updated to use gradle 6.5
    
    (2022)
    Upgraded gradle to 6.4
    
    (2022)
    Upgraded to gradle 5.2.1
    
    (2022)
    Upgraded gradle to 5.2
    
    (2022)
    Update gradle to 4.10.1
    
    (2688)
    Upgraded gradle wrapper
    
    (2328)
    Updated gradle to 4.8.1
    
    related to #2504
    Upgraded gradle wrapper
    
    (2350)
    Upgraded gradle
    
    (1899)
    Upgrade base library versions
    
    related to #1899
    Uprev gradle version to 3.5
    
    (1623)
    Updated gradle version and changed java opts
    
    #1505
    Updated gradle to 3.4
    
    (1623)
    Upgraded gradle to 3.1
    
    Also upgraded libraries and disabled the daemon on the CI build
    Updated gradle to 3.0
    Upgradle to gradle 2.14
    Upgraded gradle wrapper to 2.13
    Upgraded gradle to 2.9
    
    related to #1086
    Upgrade to gradle 2.8
    
    - Update spock version in buildSrc project
    - move memory options to gradle.properties
    Set the gradle options and upgrade to gradle 2.7
    
    related to #939
    Revert "Trial with gradle 2.4"
    
    This reverts commit 165570fa0b4874a23fabb6adfde99411504cbcba.
    Trial with gradle 2.4
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Made the dependencies strictly provided only
    
    This way spring/jackson etc will always take the dependencies that were provided
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Build scripts cleanup
    
    Used the new form for plugin definitions and removed unused script blocks and rearranged the dependencies
    
    (2022)
    Fixes after initial merge.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated swagger-ui version
    
    Also updated libraries
    Fixed the artifact based sharing of test code
    Upgrade all dependencies to the latest version
    Updated the converage numbers
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Bumped up the coverage for swagger-common
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Adjusted the spring dependencies to provided
    
    Also reverted to using the regular servlet api dependency
    Updated the build files
    Renamed modules and directories
    Publishing - maiden flight to bintray
    Renames modules to springdox-
    Moved common readers to the swagger common module
    Added swagger common module
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Bumped up the coverage for swagger-common
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Fixed the temporal coupling int the name provider plugin
    
    Now the default name provider is no longer a component but truly a default type name provider. If there are no plugins registered the default is used
    Allow ApiModelProperties on methods to be discovered from superclasses
    
    Forgot to uncomment a test
    
    License header was missing
    Fixed issue where Resource<X> where X extends ResourceSupport crashes
    
    with duplicate key violation. This is because Resource itself is a subclass of
    ResourceSupport. This creating two link properties especially for return types. This
    is a side effect of the alternate type rule that substitutes Resource<T>
    
    fixes #1125
    Bumped up the coverage for swagger-common
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Fixed the temporal coupling int the name provider plugin
    
    Now the default name provider is no longer a component but truly a default type name provider. If there are no plugins registered the default is used
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Allow ApiModelProperties on methods to be discovered from superclasses
    
    Forgot to uncomment a test
    
    License header was missing
    Fixed the artifact based sharing of test code
    Fixed problem rendering properties with nested maps
    
    When encountering properties which are Map of Maps only the value map
    needs to be part of the model depdendencies. This fix skips the model that
    represents the map of maps so that the un-used models need not be part
    of the schema definition
    
    fixes #1186
    Bumped up the coverage for swagger-common
    Changes to allow for readOnly property in swagger 2
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Added support for overriding dataType via ApiModelProperty annotations
    
    The only stipulation, in order to get this to work is that the dataType
    is a package qualified class name.
    
    Granted that arrays and generic types will not be available for this kind
    of override. To guard from that situation if the type is only replacable
    if the replacement is more specific than the already specified value.
    
    fixes #602 and also addresses #554
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Honoring ApiModelProperty--author=fgaule <federico.gaule@gmail.com>
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Added support for vendor extensions on Parameters and ResponseModels
    
    fixes #1137
    Bumped up the coverage for swagger-common
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#469] Fixed the arrays inside generics problem
    
    fixes #469
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Bumped up the coverage for swagger-common
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Fixed the temporal coupling int the name provider plugin
    
    Now the default name provider is no longer a component but truly a default type name provider. If there are no plugins registered the default is used
    Refactored common logic to extract resolved type from swagger annotation
    
    There is still common logic, but the way we extract the resolved type is extracted to a common method `resolvedType`. Also suppresed duplicate check, for the remaining common logic.
    
    Updated mock tests annotation too have the responseContainer defined.
    
    (1944)
    Reformatting
    
    (1944)
    Simplified the operation context tests
    Updated the copyright notice dates
    make findApiResponsesAnnotations return a hard-typed list instead of a list of optional type
    Merge method-level and class-level @ApiResponses annotations. Fixes #1465
    Updated tests to proove multi-variable templated controllers work as expected
    
    closes #953
    Bumped up the coverage for swagger-common
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    WIP
    Using media type to determine correct param type when expanding parameter
    Fixed remaining signatures
    
    (1829)
    fixing tests
    Injected description resolver into Swagger annotation readers
    
    Modified tests to use the description resolvers.
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Fixed problem where @ApiParam was not working consistently
    
    each attribute was a seperate plugin and was doing it differently for
    each of the attributes. This fixes the performance issue where the same
    matrixed annotation was being queried multiple times for each attribute
    of the annotation.
    
    Consolidated the plugins into one plugin
    
    fixes #388
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Removed @ApiParam from RequestMappingContext
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#388] Added support to walk the method declaration graph to find specified annotations
    
    resolves #388
    Support for naming strategies
    Unfolding readers.operation.*
    Unfolding readers.operation.*
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Changing controller/request mapping groupings to accommodate longer paths
    Adding ApiParameter support
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrating from guava Strings
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Removed @ApiParam from RequestMappingContext
    [#388] Added support to walk the method declaration graph to find specified annotations
    
    resolves #388
    Formatting and cleanup
    
    (3002)
    Updated parameter plugins to use the examples builder methods
    
    (853)
    Fixed regression that renders allowEmptyValues in model properties
    
    Per 2.0 spec this is only rendered on parameters (not body parameters). So we add this to parameter and remove it from model properties.
    
    (2204)
    Added support for overriding the collection format
    
    fixes #1946
    fix test
    Fixed problem where @ApiParam was not working consistently
    
    each attribute was a seperate plugin and was doing it differently for
    each of the attributes. This fixes the performance issue where the same
    matrixed annotation was being queried multiple times for each attribute
    of the annotation.
    
    Consolidated the plugins into one plugin
    
    fixes #388
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    WIP
    Using media type to determine correct param type when expanding parameter
    Fixed remaining signatures
    
    (1829)
    fixing tests
    Added support for resolving placeholders on request params
    
    fixes #1423
    Injected description resolver into Swagger annotation readers
    
    Modified tests to use the description resolvers.
    Fixed formatting of the test
    fix test
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Fixed problem where @ApiParam was not working consistently
    
    each attribute was a seperate plugin and was doing it differently for
    each of the attributes. This fixes the performance issue where the same
    matrixed annotation was being queried multiple times for each attribute
    of the annotation.
    
    Consolidated the plugins into one plugin
    
    fixes #388
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Added Multipart request parameter builder test
    
    Also fixed all the tests
    
    (2022)
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    WIP
    Using media type to determine correct param type when expanding parameter
    Fixed remaining signatures
    
    (1829)
    fixing tests
    Injected description resolver into Swagger annotation readers
    
    Modified tests to use the description resolvers.
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Fixed problem where @ApiParam was not working consistently
    
    each attribute was a seperate plugin and was doing it differently for
    each of the attributes. This fixes the performance issue where the same
    matrixed annotation was being queried multiple times for each attribute
    of the annotation.
    
    Consolidated the plugins into one plugin
    
    fixes #388
    Uncommented the commented tests
    Mostly working stuff except for generic controllers with base classes
    Updated the security configuration to support the improved oauth support in swagger-ui
    
    - Updated tests to improve coverage
    
    related to #928
    Bumped up the coverage for swagger-common
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Removed @ApiParam from RequestMappingContext
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#388] Added support to walk the method declaration graph to find specified annotations
    
    resolves #388
    Support for naming strategies
    Unfolding readers.operation.*
    Unfolding readers.operation.*
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Changing controller/request mapping groupings to accommodate longer paths
    Operation parameter access support
    Adding ApiParameter support
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Changed the Either type to ParameterSpecification
    
    (2022)
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    WIP
    Using media type to determine correct param type when expanding parameter
    Fixed remaining signatures
    
    (1829)
    fixing tests
    Injected description resolver into Swagger annotation readers
    
    Modified tests to use the description resolvers.
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Fixed problem where @ApiParam was not working consistently
    
    each attribute was a seperate plugin and was doing it differently for
    each of the attributes. This fixes the performance issue where the same
    matrixed annotation was being queried multiple times for each attribute
    of the annotation.
    
    Consolidated the plugins into one plugin
    
    fixes #388
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Added RequestParameterBuilder to the ParameterContext
    
    (2022)
    Using media type to determine correct param type when expanding parameter
    Added a list of annotated elements to search annotations from
    
    Since we want to preserve the ability to lookup annotations from fields and accessors, we add the ability to set multiple sources for annotations and search on a first find first serve basis the annotaions in the find method.
    
    (1937)
    Refactored model parameter accessor to work with either fields or accessors
    
    Since the only thing we care about with the field is the way to access the annotations, we reduce this to AnnotationElement. This way the accessor can work with either fields or properties.
    
    (1937)
    Applied the parameter object refactoring to tests
    
    (1937)
    Deprecated the access to the raw field
    
    This can be based on interfaces that spring uses to resolve via resolvers e.g. Pageable. This is an incremental step to minimize the use of Field directly
    
    (1937)
    Added test to verify swagger annotation substitution
    
    resolves #2213
    More fixes
    
    (1829)
    fixing tests
    Injected description resolver into Swagger annotation readers
    
    Modified tests to use the description resolvers.
    Fixed the tests and the contracts to reflect the improved model attribute support
    Bumped up the coverage for swagger-common
    Formatting and cleanup
    
    (3002)
    Tightened the builder api
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Changed the Either type to ParameterSpecification
    
    (2022)
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Added RequestParameterBuilder to the ParameterContext
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    WIP
    Fixed to work with spaces when specifying ranges
    
    Added/modified tests excercised via ApiParamParameterBuilder
    
    (2446)
    Using media type to determine correct param type when expanding parameter
    Added ability to persist swagger 1.2 contracts
    
    When tests are run, contacts can be automatically persisted if the settings are turned on in the build script. Reformatted contracts via the automated tests when we enable the option in the build script.
    
    These contracts are the ones that are not materially affected by it.
    
    (1831)
    Fixed regression that renders allowEmptyValues in model properties
    
    Per 2.0 spec this is only rendered on parameters (not body parameters). So we add this to parameter and remove it from model properties.
    
    (2204)
    Added support for inclusive/exclusive and mixed range values
    
    resolves #1955
    Add support for exclusive ranges #2088
    Fixed remaining signatures
    
    (1829)
    fixing tests
    Injected description resolver into Swagger annotation readers
    
    Modified tests to use the description resolvers.
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    #1666 allowableValues blank for Optional<Enum> parameter
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Fixed problem where @ApiParam was not working consistently
    
    each attribute was a seperate plugin and was doing it differently for
    each of the attributes. This fixes the performance issue where the same
    matrixed annotation was being queried multiple times for each attribute
    of the annotation.
    
    Consolidated the plugins into one plugin
    
    fixes #388
    Updated the security configuration to support the improved oauth support in swagger-ui
    
    - Updated tests to improve coverage
    
    related to #928
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Removed @ApiParam from RequestMappingContext
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Support for naming strategies
    Unfolding readers.operation.*
    Unfolding readers.operation.*
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Automatically retrieve allowableValues and set allowMultiple for enum arrays
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Removing error log when api param allowable values contains a simple string
    Supporting allowable min and max ranges
    Parameter allowable values. Adding check for funky spring default value on @Request.. method parameter annotations
    Added support for extracting @Example annotations
    
    (853)
    Read the data type in order of precedence
    
    1. dataTypeClass
    2. dataType using forName
    3. explicit type and format
    
    (3388)
    Added api to contribute defaults
    
    The earlier defaults plugin API was janky and was not conducive to layering defaults and extensible. Added the apply API so that defaults can be contirbuted to via plugins
    
    (3354)
    Added compatibility  data type to migrate from Parameter => RequestParameter
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Removed the PathProviderFactory abstraction
    
    (1773)
    Removed deprecated api in PathProvider
    
    Also simplified the usages as a result of no longer needing servlet context to resolve the paths
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    Update tests with new factory for path provider. Remove unused code. Update headers with correct year.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Moved to use getters as a primary source for properties
    
    This is a departure from the initial assumption that bean properties with backing fields will only be supported. This causes types like Pageable which are interfaces to no longer be supported. With this change we use getters as the primary source of truth and optionally for backwards compatibility we also use the fields, if present as a source for annotations
    
    (1937)
    Added tests to verify another nested/recursive defenition
    
    resolves #2282
    Added tests around nested recursive types
    
    (1827)
    Reformatting
    
    (1827)
    More fixes
    
    (1829)
    fixing tests
    Fixed the model attribute expander for list of enums
    
    fixes #1571
    Extracted parameter object in order to provide context
    
    This is an intermediate step so that we can determine types that are seen or not seen before to prevent recursion
    
    (1603)
    Fixed the tests and the contracts to reflect the improved model attribute support
    Fixed the failing test
    
    The reason the test was failing was because the ModelAttributeParameterExpanderSpec in spring-web was trying to access a plugin that was in the swagger module. This creates an incorrect dependency link.
    
    swagger-modules --- depend on --> spring modules.
    
    This fix creates a new spec in the swagger module and removes the test
    in the spring-web module and everything is right in the world :)
    Migrated mixin based test support classes to traits
    
    (2022)
    Using media type to determine correct param type when expanding parameter
    Simplified the operation context tests
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Bumped up the coverage for swagger-common
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Using media type to determine correct param type when expanding parameter
    Simplified the operation context tests
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Removed the dependence on ResourceGroupingStrategy to get default tags
    
    also the ApiListingReference scanner no longer needs the resource grouping strategy to create
    resource groups
    
    relates to #454
    resolves #919
    Added support for tags to cascade from controllers to the operations
    Added support for rendering tags defined in @ApiOperation
    
    fixes #675
    Added test to ensure tag behavior
    
    (3402)
    Read the data type in order of precedence
    
    1. dataTypeClass
    2. dataType using forName
    3. explicit type and format
    
    (3388)
    Migrated mixin based test support classes to traits
    
    (2022)
    Using media type to determine correct param type when expanding parameter
    Simplified the operation context tests
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixed the unique operation name generation
    
    This is to align with the advertized expectation that when a nickname is
    supplied then the unique id for the operation would respect that intent
    as much as possible without sacrificing the ability to ONLY generate unique
    operation names.
    
    fixes #1066
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Bumped up the coverage for swagger-common
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    Updated copyright year
    
    (1082)
    Using media type to determine correct param type when expanding parameter
    Polished
    
    (2056)
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Test fixes for swagger core
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Merge method-level and class-level @ApiResponses annotations. Fixes #1465
    Bumped up the coverage for swagger-common
    Commented the test printLine
    Migrated mixin based test support classes to traits
    
    (2022)
    Using media type to determine correct param type when expanding parameter
    Simplified the operation context tests
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Added support for response messages
    
    (2022)
    Code cleanup before adding to test
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Formatting and code cleanup
    
    (1570)
    #1570 Add examples support
    Using media type to determine correct param type when expanding parameter
    Fixes for enums.
    correct spelling, fix typos
    (issue #1896)
    Fix all the TypeNameExtractor constructors
    
    (1829)
    fixing tests
    Fixed the broken test
    
    relates to #1651
    Simplified the operation context tests
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Added support for response header description
    
    fixes #1271
    Merge method-level and class-level @ApiResponses annotations. Fixes #1465
    Fixes exception when infering success status
    
    When we pass in arbitrary status codes we dont want the logic to throw the exception. Just report it as a failed status
    
    fixes #1380
    Added support for ResponseHeaders
    
    fixes #937
    Use non-spring 4.x api if possible
    
    fixes #901
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Bumped up the coverage for swagger-common
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Fixes the issue where the responseClass in ApiOperation is ignored
    
    fixes #805
    @ApiResponse maps to wrong ApiModel-definition name when overriden
    
    fixes #793
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Migrated mixin based test support classes to traits
    
    (2022)
    Using media type to determine correct param type when expanding parameter
    fixup! Added support for description lookup for operation notes and summary
    Added support for description lookup for operation notes and summary
    Simplified the operation context tests
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Bumped up the coverage for swagger-common
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Applying PR comments, removing nickname for uniqueId
    Adding ability to optionally populate nickname into operationId for swagger 2.0 implementations
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Migrated mixin based test support classes to traits
    
    (2022)
    Using media type to determine correct param type when expanding parameter
    Simplified the operation context tests
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Bumped up the coverage for swagger-common
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Provided type safe vendor extensibility rather than naked maps
    Migrated mixin based test support classes to traits
    
    (2022)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Using media type to determine correct param type when expanding parameter
    Simplified the operation context tests
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Bumped up the coverage for swagger-common
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Feature to support multiple security contexts
    
    Currently each docket only supports one class paths to apply a security
    context around. This fix makes it such that the Docket can be defined with
    multiple security contexts, on for each class of paths
    
    fixes #697
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Upgraded to swagger-core 1.5.3-M1
    
    Also upgraded other libraries. Addressed the security related changes
    in swagger models
    Replacing Auth* with Security* it seems very confusing the way it is currently named
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Moved interfaces to the root documentation packages
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Moved the operation test specs to their rightful home
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Supporting custom annotation readers
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Adding auth to top level resource listing and to each operation
    Initial authorization support
    Migrated mixin based test support classes to traits
    
    (2022)
    Using media type to determine correct param type when expanding parameter
    Fixes for enums.
    Fix all the TypeNameExtractor constructors
    
    (1829)
    fixing tests
    Simplified the operation context tests
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    #801 #810 Add proper support for enums in response values and in schema objects
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Bumped up the coverage for swagger-common
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Renamed plugins that had the same name
    Broke the cyclic dependency where the TypeNameExtractor depends on schema plugin manager
    
    This way the type name extract is responsible for its own plugins
    
    related to #702
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Fixed the logic to infer the operation type
    
    Currently the processor ignores the responseContainer. This fix simplifies
    the logic to inspect the annotations as well as handling void types has been
    improved. Also extracted the common logic to get the ResolvedType from the
    ApiOperation annotation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Replaced Opertion responseClass with responseModel
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Improved the coverage and bumped up the thresholds
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Improved tests for readability
    
    - Chipping away at the test refactoring
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#541] Attempt to clean up logic to handle bare enums in the response
    
    All this effort leads me back to why it wasnt supported in the first place! bare enums are not supported in
    swagger spec just like bare List types are not supported.
    
    closes #541
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Fixed the broken build
    [#383 #532] Using alternative generic ResponseEntity and HttpEntity
    [#469] Fixed the arrays inside generics problem
    
    fixes #469
    - Also fix unnecessary creation of Type Resolver #319
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Changing controller/request mapping groupings to accommodate longer paths
    Changing back to non package class names. Now correctly working model schema for sample responses but not puts and posts
    Changing response models and parameter models to fully qualified names
    Improving model support
    Fully qualifying response class names and adding test for annotated models
    Renamed MediaType -> Represenation
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Using media type to determine correct param type when expanding parameter
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Simplified the operation context tests
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Bumped up the coverage for swagger-common
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Read the data type in order of precedence
    
    1. dataTypeClass
    2. dataType using forName
    3. explicit type and format
    
    (3388)
    Fixed bugs to support contract tests
    
    (2022)
    Added support for aggregating/transforming content parameters to an object
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    add test
    Using media type to determine correct param type when expanding parameter
    Moved to use getters as a primary source for properties
    
    This is a departure from the initial assumption that bean properties with backing fields will only be supported. This causes types like Pageable which are interfaces to no longer be supported. With this change we use getters as the primary source of truth and optionally for backwards compatibility we also use the fields, if present as a source for annotations
    
    (1937)
    More fixes
    
    (1829)
    fixing tests
    Injected description resolver into Swagger annotation readers
    
    Modified tests to use the description resolvers.
    Improved coverage and upgraded compatibility with boot 1.3.6
    Simplified the operation context tests
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixed the tests and the contracts to reflect the improved model attribute support
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Bumped up the coverage for swagger-common
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Fix to merge parameter definitions and not duplicate the definitions
    
    fixes #813
    Fixed the plugin dependencies so that its not constructor injected
    
    This is so that circular bean dependencies can give spring a change to wire all the dependencies. In the case of application being run java application
    with a main method, spring boot is unable to wire in the dependencies as it infers the bean creation order.
    
    fixes #702
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Removed base classes and moved packages
    Made model attribute expander a bean
    
    - Also refactored test to be more readable
    [#538] Improved tests for readability
    
    - Chipping away at the test refactoring
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Moved the package for OperationParameterReader and adjusted visibility of classes
    Moved the operation test specs to their rightful home
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Supporting custom annotation readers
    Supporting constructor params as fields
    Improvements of #353
    
    @ApiImplicitParams & @ApiImplicitParam are now read on class interfaces
    and superclasses using Spring AnnotationUtils.findAnnotation.
    Adding test for implicit params
    Trying another approach using an utility checking spring versions. Moved it to the core so it could be available in other parts of the code. Also introduced a customer SpringVersion class return our own, made it a normal class so we can mock it for our tests. This should increase test coverage.
    Added a path adjuster for x-forward-prefix
    
    (2448)
    Splatted the static imports
    
    (2622)
    #2622 request getHeaders must return enumeration
    #2622 new spring removes x-forwarded headers and changes request accordingly. So if adjuster not make any changes, request information should be correct already.
    Consolidated duplicate code in HostNameProvider to swagger-common
    
    (2448)
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Fixed bugs to support contract tests
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Fixes for tests.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Renamed variable
    
    (1151)
    (868)
    Added support for swagger annotation based inheritance
    
    This doesnt include support for the parent annotation attribute
    
    (1151)
    (868)
    Updated tests to use the schema plugin for synthetic models
    
    (2311)
    Reformatting to match style guide
    
    (2311)
    Coverage and fixes.
    Fixes for ViewPlugin.
    Test fixes for swagger core
    More fixes
    
    (1829)
    fixing tests
    Enabled the api listing scanner plugin
    
    Without enabling the plugin in the plugin registry, the beans will not be registered with the plugin registry. Which explains why it was not getting picked up. Interestingly this is also a great example of how one can register fake operations, not represented/backed by the application.
    
    fixes #1767
    Injected description resolver into Swagger annotation readers
    
    Modified tests to use the description resolvers.
    Cleanup constructor for MediaTypeReader
    
    (1497)
    Added ApiListScannerPlugin to allow custom ApiDescriptions
    
    fixes #1335
    Renamed class
    Added support for tags as a first class concept
    
    Currently the tags are inferred based on a combination of @Api#value() and Class name.
    Going forward it can use the tags support built into the @Api annotations
    
    fixes #737
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Fix to merge parameter definitions and not duplicate the definitions
    
    fixes #813
    Fixed the plugin dependencies so that its not constructor injected
    
    This is so that circular bean dependencies can give spring a change to wire all the dependencies. In the case of application being run java application
    with a main method, spring boot is unable to wire in the dependencies as it infers the bean creation order.
    
    fixes #702
    Broke the cyclic dependency where the TypeNameExtractor depends on schema plugin manager
    
    This way the type name extract is responsible for its own plugins
    
    related to #702
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for default providers per documentation type
    [#538] Implemented the mappers
    [#538] Renamed ParameterExpanderPlugin
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Bumped up the coverage for swagger-common
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Fixed the temporal coupling int the name provider plugin
    
    Now the default name provider is no longer a component but truly a default type name provider. If there are no plugins registered the default is used
    Fixed bugs to support contract tests
    
    (2022)
    Added property name to the property specification builder constructor
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Initial model refactoring
    Unit tests.
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Polished
    
    (2056)
    Fixes for enums.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Allow ApiModelProperties on methods to be discovered from superclasses
    
    Forgot to uncomment a test
    
    License header was missing
    Test fixes for swagger common
    Fixed boxing/unboxing of booleans
    
    Caused properties to be null when that made no sense. Also fixed tests
    affected by this change.
    
    (1864)
    Fix all the TypeNameExtractor constructors
    
    (1829)
    fixing tests
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Injected description resolver into Swagger annotation readers
    
    Modified tests to use the description resolvers.
    Fixed the build
    
    related to #1514
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Fixed the artifact based sharing of test code
    Fixed problem rendering properties with nested maps
    
    When encountering properties which are Map of Maps only the value map
    needs to be part of the model depdendencies. This fix skips the model that
    represents the map of maps so that the un-used models need not be part
    of the schema definition
    
    fixes #1186
    Removed 'example' tests from a place where only Swagger 1.2 is tested
    Added a fix for 'example' field in @ApiModelProperty annotation
    Bumped up the coverage for swagger-common
    Changes to allow for readOnly property in swagger 2
    Broke the cyclic dependency where the TypeNameExtractor depends on schema plugin manager
    
    This way the type name extract is responsible for its own plugins
    
    related to #702
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Made the modelRef property of the ModelProperty a computed value
    
    Extracted the common logic to infer the modelRef given a resolved type. Also
    When the type was altered via the @ApiModelProperty annotation the model ref
    did not reflect the newly inferred model type.
    
    This fix makes removes the redundancy in the type and the modelRef attribute
    
    fixes #666
    Added support for overriding dataType via ApiModelProperty annotations
    
    The only stipulation, in order to get this to work is that the dataType
    is a package qualified class name.
    
    Granted that arrays and generic types will not be available for this kind
    of override. To guard from that situation if the type is only replacable
    if the replacement is more specific than the already specified value.
    
    fixes #602 and also addresses #554
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    Fixed bugs to support contract tests
    
    (2022)
    Unit tests.
    Fixes for tests.
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    fixing groovy static imports
    using more static imports
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Added support for swagger annotation based inheritance
    
    This doesnt include support for the parent annotation attribute
    
    (1151)
    (868)
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Test fixes for swagger common
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Fixed the build
    
    related to #1514
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Bumped up the coverage for swagger-common
    Cleaned up the ui configuration
    
    removed deprecations and improved the builders. Also added swagger-ui base path url in the configuration
    Expose the 'showCommonExtensions' configuration available in swagger-ui
    through springfox UiConfiguration and UiConfigurationBuilder
    
    It's available in swagger-ui since v3.14.0
    
    Co-authored-by: Ippei Nawate <saku.ni63@gmail.com>
    Co-authored-by: Benoit <b.wiart@ubik-ingenierie.com>
    Updated copyright year
    
    (1082)
    Made validator url always be rendered
    
    (2370)
    Re-added deprecated attributes to swagger resources
    
    In order to support the url-templated library (springfox-swagger-ui-rfc6570:1.0.0)
     that isnt yet upgraded to to swagger 3.x, we need to preserve some wire level
    compatiblity as well. As a result we restored some of the serialized parameters
    in order to support older swagger-ui hitting the new features implemented in this
    PR.
    
    Also general polish before the release
    
    (2166)
    Improved setting api to Swagger UI 3.x with compatibility
    Improved setting api to Swagger UI 3.x
    Fixed issue with object mapper configuration interfering
    
    UI configuration did not declare itself explicitly as with include rules. As a result the external object mapper definitions interfered with rendering it.
    
    fixes #1732
    Re-added deprecated attributes to swagger resources
    
    In order to support the url-templated library (springfox-swagger-ui-rfc6570:1.0.0)
     that isnt yet upgraded to to swagger 3.x, we need to preserve some wire level
    compatiblity as well. As a result we restored some of the serialized parameters
    in order to support older swagger-ui hitting the new features implemented in this
    PR.
    
    Also general polish before the release
    
    (2166)
    Improved setting api to Swagger UI 3.x with compatibility
    Improved setting api to Swagger UI 3.x
    Fixed issue with object mapper configuration interfering
    
    UI configuration did not declare itself explicitly as with include rules. As a result the external object mapper definitions interfered with rendering it.
    
    fixes #1732
    Changed the api docs endpoints to work better with swagger-ui
    
    With the swagger ui working well the services need to be configured to work better in concert with it.
    Tightened the builder api
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Expose the 'showCommonExtensions' configuration available in swagger-ui
    through springfox UiConfiguration and UiConfigurationBuilder
    
    It's available in swagger-ui since v3.14.0
    
    Co-authored-by: Ippei Nawate <saku.ni63@gmail.com>
    Co-authored-by: Benoit <b.wiart@ubik-ingenierie.com>
    Make csrf support optional
    Updated copyright year
    
    (1082)
    Upgrading swagger-ui to 3.11.0
    Fixed the failing test
    
    fixed #2166
    Re-added deprecated attributes to swagger resources
    
    In order to support the url-templated library (springfox-swagger-ui-rfc6570:1.0.0)
     that isnt yet upgraded to to swagger 3.x, we need to preserve some wire level
    compatiblity as well. As a result we restored some of the serialized parameters
    in order to support older swagger-ui hitting the new features implemented in this
    PR.
    
    Also general polish before the release
    
    (2166)
    Improved setting api to Swagger UI 3.x
    Replaced all the non-RequestMapping placeholders
    
    Use Environment to resolve properties where possible.
    
    (1770)
    Demonstrated intricate generics support
    
    resolves #1631
    Added support for configuring the request timeout
    
    (#1523)
    constant string arrays not initialized before constructor --> moved to extra static inner class, added new constructor UIConfiguration(String validatorUrl, String[] supportedSubmitMethods) for convenience
    fix for #1291
    Added swagger-resource uri namspace around security and ui configuration
    
    needed for swagger-ui.
    
    fixes #1203
    Extracted SwaggerResourcesProvider to an interface
    
    Also created an default In-memory swagger resources provider that will be
    available to be overridden by a @Primary bean implementation for providing
    aggregation of services
    
    closes #1189
    Added a way to override for the name of the api key header
    
    resolves #1087
    Provided a way to supply a ui configuration bean
    
    Added additional properties to the UI configuration bean to override properties such as docExpansion, jsonEditor etc.
    
    fixes #1122
    Added support to configure how the api key is sent
    
    It was hard-coded to send it via the query parameter only. With this change
    the library consumers can choose via a configuration how the api key needs to
    be sent to the services
    
    fixes #943
    Fix issue #767, duplicate @JsonProperty, fixed tests
    Updated the security configuration to support the improved oauth support in swagger-ui
    
    - Updated tests to improve coverage
    
    related to #928
    Fix to ensure that the property naming strategy does not affect the rendered property names
    
    that are used by swagger-ui.
    
    fixes #833
    Bumped up the coverage for swagger-common
    Improved setting api to Swagger UI 3.x with compatibility
    Improved setting api to Swagger UI 3.x
    Fixed issue with object mapper configuration interfering
    
    UI configuration did not declare itself explicitly as with include rules. As a result the external object mapper definitions interfered with rendering it.
    
    fixes #1732
    Migrating Ordering to Comparator
    Renamed class
    Removed redundant resource group
    Added support for tags as a first class concept
    
    Currently the tags are inferred based on a combination of @Api#value() and Class name.
    Going forward it can use the tags support built into the @Api annotations
    
    fixes #737
    Changed the api docs endpoints to work better with swagger-ui
    
    With the swagger ui working well the services need to be configured to work better in concert with it.
    Added configuration properties support
    
    This helps generate metadata for the application properties
    
    (2022)
    fixup! Properties WIP
    Properties WIP
    Fixed issues with rendering the base path
    
    (2022)
    Cleaned up the ui configuration
    
    removed deprecations and improved the builders. Also added swagger-ui base path url in the configuration
    Expose the 'showCommonExtensions' configuration available in swagger-ui
    through springfox UiConfiguration and UiConfigurationBuilder
    
    It's available in swagger-ui since v3.14.0
    
    Co-authored-by: Ippei Nawate <saku.ni63@gmail.com>
    Co-authored-by: Benoit <b.wiart@ubik-ingenierie.com>
    Fixed test for UiConfigurationBuilder
    
    relates to #2370
    Upgrading swagger-ui to 3.11.0
    Re-added deprecated attributes to swagger resources
    
    In order to support the url-templated library (springfox-swagger-ui-rfc6570:1.0.0)
     that isnt yet upgraded to to swagger 3.x, we need to preserve some wire level
    compatiblity as well. As a result we restored some of the serialized parameters
    in order to support older swagger-ui hitting the new features implemented in this
    PR.
    
    Also general polish before the release
    
    (2166)
    Improved setting api to Swagger UI 3.x with compatibility
    Improved setting api to Swagger UI 3.x
    Fixed issue with object mapper configuration interfering
    
    UI configuration did not declare itself explicitly as with include rules. As a result the external object mapper definitions interfered with rendering it.
    
    fixes #1732
    Added conditional PropertyPlaceholderConfigurer bean
    
    Verified that this solution also supports spring 3.2.x and up
    
    fixes #1514
    Reverted to using PropertyPlaceholderConfigurer
    
    Based on the recommendation from the spring folks changed from using PropertySourcesPlaceholderConfigurer
    
    fixes #1414
    Renamed local variable p
    
    Renamed local variable p to propertySourcesPlaceholderConfigurer.
    Fixed issue 677
    
    According to issue https://github.com/springfox/springfox/issues/677, set ignoreUnresolvablePlaceholders=true
    Fixed formatting
    Fixes the place holder configurer to be static
    
    based on http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/PropertySource.html
    this bean needs to be static. Fixes #638
    Adds todo around code causing ominous warning
    Prefer a random port for tests
    
    fixes #636
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Updated the build scripts to publish all the publishable modules
    
    Also realized that nothing is pulling in the common module, so updated the configuration beans to import it
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava lists
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Refactored common logic to extract resolved type from swagger annotation
    
    There is still common logic, but the way we extract the resolved type is extracted to a common method `resolvedType`. Also suppresed duplicate check, for the remaining common logic.
    
    Updated mock tests annotation too have the responseContainer defined.
    
    (1944)
    Reformatting
    
    (1944)
    Demonstrate interface annotation inference support
    
    Parameters annotations i.e. `@ApiParam` are not supported on interfaces because it can become a combinatorial problem when you nested/multi-interface subclassing controllers.
    
    relates to #1575
    Updated the copyright notice dates
    make findApiResponsesAnnotations return a hard-typed list instead of a list of optional type
    Merge method-level and class-level @ApiResponses annotations. Fixes #1465
    Added support for ResponseHeaders
    
    fixes #937
    Fix to walk the inheritance heirarchy to find method annoations
    
    fixes #852
    Bumped up the coverage for swagger-common
    Fixes the issue where the responseClass in ApiOperation is ignored
    
    fixes #805
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Fixed inadvertent import of the wrong List class
    Fixed the logic to infer the operation type
    
    Currently the processor ignores the responseContainer. This fix simplifies
    the logic to inspect the annotations as well as handling void types has been
    improved. Also extracted the common logic to get the ResolvedType from the
    ApiOperation annotation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Moved common readers to the swagger common module
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Fixed bugs to support contract tests
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava Predicate
    migrate from guava multimap
    migrating from guava Strings
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Updated parameter plugins to use the examples builder methods
    
    (853)
    Update parameter builders to add appropriate priorities
    
    (1831)
    Reformatting to style guide
    
    Splat static imports, method argument arrangement, code formatting and updating copyright date
    
    (1831)
    Replaced utility method with accessor on the ParameterExpansionContext
    
    Removed unsed method.
    (1937)
    Replaced accessing via the deperecated field accessor
    
    We use the field type instead of accesing the raw field.
    
    (1937)
    Added support to override the parameter name for model attributes
    
    resolves #1919
    More fixes
    
    (1829)
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    Injected description resolver into Swagger annotation readers
    
    Modified tests to use the description resolvers.
    fixup! Added classmate machinery to the model attribute expander
    Added functionality to handle hidden property of @ApiParam and @ApiModelProperty annotations.
    Fixed the expanded parameter plugin
    
    Currently the swagger plugin that overlays on top of the un-annotated property incorrectly also tries to set the model ref. Rather than duplicate the behavior from the vanila plugin, we simply ignore attributes not infered from the @ApiModelProperty and @ApiParam annotations
    
    fixes #1317
    Bumped up the coverage for swagger-common
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed the build by adding tests
    Moved common readers to the swagger common module
    Added model ref to parameters
    [#538] Renamed ParameterExpanderPlugin
    [#538] Removed the models package and collapsed it to the service package
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    [#538] Removed @ApiParam from RequestMappingContext
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    [#538] Moar tests and increased complexity coverage
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Fixes line length issues
    [#537] Adds builders for some of the primary swagger dtos
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#476] Allows specifying alternative types for expanded model attributes
    Normalized spaces and imports
    Moved the package for OperationParameterReader and adjusted visibility of classes
    Made the seed for the parent parameter name not a null value
    Refactored to seperate responsibility from OperationParameterReader
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Fixed bugs to support contract tests
    
    (2022)
    Added RequestParameterBuilder to the ParameterContext
    
    (2022)
    Enriched Example and added builders
    
    Kept the constructors and deprecated them for backwards compatibility
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava multimap
    migrating from guava Strings
    Added support for extracting @Example annotations
    
    (853)
    Added support for discerning models via annotations
    
    ApiParam  and Parameter annotations
    
    (3022)
    Formatting and cleanup
    
    (3002)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Renamed classes to be consistent
    
    (2022):
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    clean up static imports
    migrate from guava Predicate
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    migrate from guava lists
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Fixed problem where @ApiParam was not working consistently
    
    each attribute was a seperate plugin and was doing it differently for
    each of the attributes. This fixes the performance issue where the same
    matrixed annotation was being queried multiple times for each attribute
    of the annotation.
    
    Consolidated the plugins into one plugin
    
    fixes #388
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Moved common readers to the swagger common module
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Fixed the contract tests
    [#538] Removed @ApiParam from RequestMappingContext
    [#388] Added support to walk the method declaration graph to find specified annotations
    
    resolves #388
    Added support for discerning models via annotations
    
    ApiParam  and Parameter annotations
    
    (3022)
    Formatting and cleanup
    
    (3002)
    Tightened the builder api
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Fixed bugs to support contract tests
    
    (2022)
    Renamed implements EnumerationFacetBuilder -> EnumerationElementFacetBuilder
    
    (2022)
    Added Multipart request parameter builder test
    
    Also fixed all the tests
    
    (2022)
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Added RequestParameterBuilder to the ParameterContext
    
    (2022)
    Added parallel schema specificiations to the existing represenation
    
    This will allow parallel development of the richer representations
    
    (2022)
    Enriched Example and added builders
    
    Kept the constructors and deprecated them for backwards compatibility
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrating from guava Strings
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Updated parameter plugins to use the examples builder methods
    
    (853)
    Update parameter builders to add appropriate priorities
    
    (1831)
    Reformatting to style guide
    
    Splat static imports, method argument arrangement, code formatting and updating copyright date
    
    (1831)
    Fixed regression that renders allowEmptyValues in model properties
    
    Per 2.0 spec this is only rendered on parameters (not body parameters). So we add this to parameter and remove it from model properties.
    
    (2204)
    Added support for overriding the collection format
    
    fixes #1946
    Fixed remaining signatures
    
    (1829)
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    Injected description resolver into Swagger annotation readers
    
    Modified tests to use the description resolvers.
    #1666 allowableValues blank for Optional<Enum> parameter
    fix ApiParam hidden attribute
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Fixed problem where @ApiParam was not working consistently
    
    each attribute was a seperate plugin and was doing it differently for
    each of the attributes. This fixes the performance issue where the same
    matrixed annotation was being queried multiple times for each attribute
    of the annotation.
    
    Consolidated the plugins into one plugin
    
    fixes #388
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Moved common readers to the swagger common module
    [#538] Removed the models package and collapsed it to the service package
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Removed @ApiParam from RequestMappingContext
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#436] Enum values with JsonValue are not supported
    
    fixes #436
    Normalized spaces and imports
    Prefer enum types over swagger annotations
    
    - Also general cleanup
    Support for naming strategies
    Unfolding readers.operation.*
    Unfolding readers.operation.*
    Supporting constructor params as fields
    Adding test for implicit params
    Automatically retrieve allowableValues and set allowMultiple for enum arrays
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Removing error log when api param allowable values contains a simple string
    Removing dependency on lombok
    Supporting operation parameter primitive data types
    mend
    Supporting allowable min and max ranges
    Parameter allowable values. Adding check for funky spring default value on @Request.. method parameter annotations
    Parameter type exclusions. Change path variables to use curly braces as opposed to round braces.
    Adding ApiParameter support
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Code reformatting and cleanup
    
    (2022)
    New merging algorithm that can handle cyclic model references.
    Updated copyright year
    
    (1082)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixes for enums.
    New ModelContext is now available only through Context builder
    Initial support for projections.
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixes the violation of law of demeter
    
    (1196)
    Added ignorable types to model context
    
    This is to distinguish between seen types and ignorable types
    
    (1196)
    Centralized model ref creation and removed dupication
    Mostly working stuff except for generic controllers with base classes
    Formatting
    Fixes the issue where the responseClass in ApiOperation is ignored
    
    fixes #805
    Renamed plugins that had the same name
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Fixed the logic to infer the operation type
    
    Currently the processor ignores the responseContainer. This fix simplifies
    the logic to inspect the annotations as well as handling void types has been
    improved. Also extracted the common logic to get the ResolvedType from the
    ApiOperation annotation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for Map types in the models
    Moved common readers to the swagger common module
    Replaced Opertion responseClass with responseModel
    Introduced the model ref to response class as well as parameters
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Refactored the api model reader to be factored into plugins
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    Introduced pmd and addressed the violations
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    Normalized spaces and imports
    Supporting custom annotation readers
    Supporting custom annotation readers
    Supporting constructor params as fields
    Using Spring's AnnotationUtils to support Annotations at interfaces
    When response class is void dont return blank type
    
    Fixes #298
    Renaming path provider to absolute. Fixing typo in modelutils
    Fix the rendering of void responses
    
    Fixes #255
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    make findApiResponsesAnnotations return a hard-typed list instead of a list of optional type
    Merge method-level and class-level @ApiResponses annotations. Fixes #1465
    Mostly working stuff except for generic controllers with base classes
    Bumped up the coverage for swagger-common
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Adding more instrumentation around models and property inference
    
    To assist with problems like #688
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Fixed the logic to infer the operation type
    
    Currently the processor ignores the responseContainer. This fix simplifies
    the logic to inspect the annotations as well as handling void types has been
    improved. Also extracted the common logic to get the ResolvedType from the
    ApiOperation annotation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Moved common readers to the swagger common module
    [#538] Removed the asResolved method and inlined all the invocations
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    [#538] Refactored the api model reader to be factored into plugins
    Fixed checkstyle violations and code cleanup
    
    (2022)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Moved common readers to the swagger common module
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Normalized spaces and imports
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Removing dependency on lombok
    Adding deprecated attribute to operations
    ApiOperation: using swagger annotation for summary
    ApiOperation: using swagger annotation if supplied
    First stab at ApiOperations.
    Converted to alternate prior to mapping annotations
    
    (3343)
    Flattened access to ResponseHeader objects
    
    This way it will not matter if there response headers within an operation or held by a ApiResponses object or just bare.
    
    (2684)
    Set the missed example builde rproperties
    
    When media type is empty we turn into into a null
    
    (2767)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed the build and also fixed depcration warnings
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Fixed bugs to support contract tests
    
    (2022)
    Code reformatting and cleanup
    
    (2022)
    Renamed MediaType -> Represenation
    
    (2022)
    Added missing types that allow mapping to the new OpenAPI spec
    
    Also converted collection types to the lowest base type i.e. List -> Collection etc.
    
    (2022)
    Added encoding to media types
    
    (2022)
    Added support for response messages
    
    (2022)
    Enriched Example and added builders
    
    Kept the constructors and deprecated them for backwards compatibility
    
    (2022)
    New merging algorithm that can handle cyclic model references.
    Fixed checkstyle violations and code cleanup
    
    (2022)
    #1570 Add examples support
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Reformatting
    
    (1944)
    Fixes for enums.
    New ModelContext is now available only through Context builder
    Initial support for projections.
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Added support for response header description
    
    fixes #1271
    make findApiResponsesAnnotations return a hard-typed list instead of a list of optional type
    Merge method-level and class-level @ApiResponses annotations. Fixes #1465
    Fixes exception when infering success status
    
    When we pass in arbitrary status codes we dont want the logic to throw the exception. Just report it as a failed status
    
    fixes #1380
    Fixes the violation of law of demeter
    
    (1196)
    Added ignorable types to model context
    
    This is to distinguish between seen types and ignorable types
    
    (1196)
    Added support for ResponseHeaders
    
    fixes #937
    Centralized model ref creation and removed dupication
    Added model ref interface
    
    Also added two dimensional array substitution support
    Mostly working stuff except for generic controllers with base classes
    Use non-spring 4.x api if possible
    
    fixes #901
    Fixes the issue where the responseClass in ApiOperation is ignored
    
    fixes #805
    @ApiResponse maps to wrong ApiModel-definition name when overriden
    
    fixes #793
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Took care of low hanging TODOs
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Moved common readers to the swagger common module
    Replaced response class with response model
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Improved the coverage and bumped up the thresholds
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    Flattened access to ResponseHeader objects
    
    This way it will not matter if there response headers within an operation or held by a ApiResponses object or just bare.
    
    (2684)
    Polished the builder apis to be fluent
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted all builders to be consumer based
    
    (2022)
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Fixed bugs to support contract tests
    
    (2022)
    Updated the signature of Headers
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    handling order issues and equivalence equals
    all tests past
    migrate from guava Predicate
    migrating from guava Strings
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Added support for response header description
    
    fixes #1271
    Added support for ResponseHeaders
    
    fixes #937
    Reformatted per coding style
    
    (3402)
    fix class level Tags/Tag
    Renamed classes to be consistent
    
    (2022):
    Added Tags Support for OAS annotations
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava Predicate
    migrate from guava ImmutableMap, Joiner, Splitter
    migrating from guava Strings
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Moved common readers to the swagger common module
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixed the unique operation name generation
    
    This is to align with the advertized expectation that when a nickname is
    supplied then the unique id for the operation would respect that intent
    as much as possible without sacrificing the ability to ONLY generate unique
    operation names.
    
    fixes #1066
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Applying PR comments, removing nickname for uniqueId
    Adding ability to optionally populate nickname into operationId for swagger 2.0 implementations
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Moved common readers to the swagger common module
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixed codacy issues
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixed to get the annotation from the bean
    
    The declaring class is not always the right class to go to for annotations all the time
    
    fixes #1132
    Added support for tags to cascade from controllers to the operations
    Added support for rendering tags defined in @ApiOperation
    
    fixes #675
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Added support for description lookup for operation notes and summary
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Moved common readers to the swagger common module
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed bugs to support contract tests
    
    (2022)
    fix checkstyle error
    fix checkstyle error
    fix compile error
    support multiple ApiImplicitParameters
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    migrate from guava lists
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Injected description resolver into Swagger annotation readers
    
    Modified tests to use the description resolvers.
    Allow type overrides using ApiImplicitParams
    
    Currently if an ApiParamsImplicitType is supplied we coerce to a string if its not a base type. This allows the type to be overridden.
    
    Also the dataType specified must be a simple name of a class available
    in either the model definitions or supplied using
    docket#additionalModels.
    
    fixes #1545
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixed AllowableValues on Implicit Parameters
    
    There is still a case where the rendered output will not match the expectations if
    the ApiImplicitParam is trying to enrich the properties of a property that is already
    infered via springs machinery.
    
    For e.g. any property that is infered via a @ModelAttribute annotation will already do the right thing
    an infer the models before the @ApiImplicitPArameter values are overlayed. This is especially
    fraught with problems if the underlying model property is a list of scalars rather than just a plain scalar
    value... i.e. List<Enum>, List<String etc.
    
    fixes #902
    Bumped up the coverage for swagger-common
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Moved common readers to the swagger common module
    [#538] Removed the models package and collapsed it to the service package
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    [#538] Removed base classes and moved packages
    [#538] Removed base classes and moved packages
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Unfolding readers.operation.*
    Supporting custom annotation readers
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Moved common readers to the swagger common module
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    [#538] Removed base classes and moved packages
    Introduced pmd and addressed the violations
    [#447] Added support for @ApiOperation(hidden=[true|false])
    
    closes #447
    Normalized spaces and imports
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    ApiOperation: using swagger annotation for position
    First stab at ApiOperations.
    3390 add NumericFacetBuilder to OperationImplicitParamterReader
    Read the data type in order of precedence
    
    1. dataTypeClass
    2. dataType using forName
    3. explicit type and format
    
    (3388)
    Polished the builder apis to be fluent
    Tightened the builder api
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Fixed bugs to support contract tests
    
    (2022)
    fix using collectionFormat
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Used the build methods where applicable
    
    Also removed final modifiers on locals.
    
    (2273)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrating from guava Strings
    migrate from guava lists
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    removing MoreObjects, toString and firstNonNull
    Updated parameter plugins to use the examples builder methods
    
    (853)
    Update parameter builders to add appropriate priorities
    
    (1831)
    Reformatting to style guide
    
    Splat static imports, method argument arrangement, code formatting and updating copyright date
    
    (1831)
    Fixed the NPE where the param type was regressed
    
    When none of the inference plugins in the pipeline infer a particular parameter type it remains null rather than _blank_. This caused the NPE.
    
    fixes #2148
    related to #2029
    Injected description resolver into Swagger annotation readers
    
    Modified tests to use the description resolvers.
    Rearranged methods
    
    related to #1545
    Allow type overrides using ApiImplicitParams
    
    Currently if an ApiParamsImplicitType is supplied we coerce to a string if its not a base type. This allows the type to be overridden.
    
    Also the dataType specified must be a simple name of a class available
    in either the model definitions or supplied using
    docket#additionalModels.
    
    fixes #1545
    Fix code quality warning.
    Suggested fix for "Adding Models using ApiImplicitParam #468".  Allow class names in addition to base types.
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixed the issue with implicit collection params
    
    the model reference did not take into account the allowMultiples when rendering
    
    fixes #1209
    Fixed AllowableValues on Implicit Parameters
    
    There is still a case where the rendered output will not match the expectations if
    the ApiImplicitParam is trying to enrich the properties of a property that is already
    infered via springs machinery.
    
    For e.g. any property that is infered via a @ModelAttribute annotation will already do the right thing
    an infer the models before the @ApiImplicitPArameter values are overlayed. This is especially
    fraught with problems if the underlying model property is a list of scalars rather than just a plain scalar
    value... i.e. List<Enum>, List<String etc.
    
    fixes #902
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed the build by adding tests
    Moved common readers to the swagger common module
    Added model ref to parameters
    [#538] Implemented the mappers
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    [#538] Removed base classes and moved packages
    [#538] Removed base classes and moved packages
    [#538] Removed @ApiParam from RequestMappingContext
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds builders for some of the primary swagger dtos
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Normalized spaces and imports
    Prefer enum types over swagger annotations
    
    - Also general cleanup
    Support for naming strategies
    Cleanup before pushing pr
    
    - fix compile issue
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava Predicate
    migrating from guava Strings
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Created security reference selector based on OperationContext
    
    Also updated the tests to account for the new http method selector for security contexts
    
    (2256)
    Refactored to accurately override default security references
    
    (2194)
    Simplified the security references override logic
    
    (2194)
    Fixed the association of authorization reference
    
    We need to associate all the security references if possible and override it with the annotation based associations when present
    
    (2194)
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Feature to support multiple security contexts
    
    Currently each docket only supports one class paths to apply a security
    context around. This fix makes it such that the Docket can be defined with
    multiple security contexts, on for each class of paths
    
    fixes #697
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Replacing Auth* with Security* it seems very confusing the way it is currently named
    
    relates to #647
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Skip rendering empty api keys authorization scopes
    Moved common readers to the swagger common module
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    [#545] Fixed the ordering of the log statement
    [#545] Downgrade to debug, the line that logs the number of authorizations per operation.
    
    closes #545
    Reformatting
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Update the swagger-core depdendency to a working version
    Normalized spaces and imports
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Adding auth to top level resource listing and to each operation
    Initial authorization support
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrating from guava Strings
    migrate from guava lists
    migrated guava Function
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixed codacity indicated error prone code
    Provided type safe vendor extensibility rather than naked maps
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Added support for description lookup for operation notes and summary
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Moved common readers to the swagger common module
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed checkstyle violations and code cleanup
    
    (2022)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Moved common readers to the swagger common module
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    Renamed classes to be consistent
    
    (2022):
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava Predicate
    migrating from guava Strings
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Created security reference selector based on OperationContext
    
    Also updated the tests to account for the new http method selector for security contexts
    
    (2256)
    Refactored to accurately override default security references
    
    (2194)
    Simplified the security references override logic
    
    (2194)
    Fixed the association of authorization reference
    
    We need to associate all the security references if possible and override it with the annotation based associations when present
    
    (2194)
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Feature to support multiple security contexts
    
    Currently each docket only supports one class paths to apply a security
    context around. This fix makes it such that the Docket can be defined with
    multiple security contexts, on for each class of paths
    
    fixes #697
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Replacing Auth* with Security* it seems very confusing the way it is currently named
    
    relates to #647
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Skip rendering empty api keys authorization scopes
    Moved common readers to the swagger common module
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    [#545] Fixed the ordering of the log statement
    [#545] Downgrade to debug, the line that logs the number of authorizations per operation.
    
    closes #545
    Reformatting
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Update the swagger-core depdendency to a working version
    Normalized spaces and imports
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Adding auth to top level resource listing and to each operation
    Initial authorization support
    Simplified and cleaned up
    
    Autowired fields, simplified functions with method references and lambdas and renamed methods and finalized variables
    
    (3354)
    Set the missed example builde rproperties
    
    When media type is empty we turn into into a null
    
    (2767)
    Fixed the build and also fixed depcration warnings
    Renamed classes to be consistent
    
    (2022):
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Upgrade libraries and plugin versions
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    #2622 new spring removes x-forwarded headers and changes request accordingly. So if adjuster not make any changes, request information should be correct already.
    Updated copyright year
    
    (1082)
    Consolidated duplicate code in HostNameProvider to swagger-common
    
    (2448)
    Fixed x-forwarded-prefix concatenation to basePath. since spring 4.3.15/5.0.5 should replace instead. Added support for swagger1
    Appended the host name when overriden in the docket for swagger 1.2
    
    Before this change the host name had no effect on swagger 1.2 specs. We only append the host name if specified.
    
    fixes #1924
    Fixed the port resolution for X-Forwarded-Port header
    
    fixes #1706
    Polished
    
    (fixes 1435 and 1507)
    Removde duplicat StringUtils import
    Make Swagger2Controller respect basePath even if a host is not set
    
    This fixes #1435 and #1507
    Removed dependency on spring-hateoas
    
    In addition upgraded the jackson libraries and the json assert libraries.
    This change is mainly to remove the dependency on spring-hateoas being available
    for this library.
    
    fixes #1104
    Updated copyright year
    
    (1082)
    Trying another approach using an utility checking spring versions. Moved it to the core so it could be available in other parts of the code. Also introduced a customer SpringVersion class return our own, made it a normal class so we can mock it for our tests. This should increase test coverage.
    Added a path adjuster for x-forward-prefix
    
    (2448)
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Added support for response messages
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Provided type safe vendor extensibility rather than naked maps
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for rendering maps in swagger 2
    Fixed the build
    
    The models are not correct however :-o
    Moved the path and grouping strategy to common
    Moved common readers to the swagger common module
    [#538] Made all swagger plugins check if the documentationType is supported
    Fixed issue where null subclasses were added to the list
    
    (3436)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted all builders to be consumer based
    
    (2022)
    Fixed bugs to support contract tests
    
    (2022)
    Added support for swagger annotation based inheritance
    
    This doesnt include support for the parent annotation attribute
    
    (1151)
    (868)
    Bumped up the coverage for swagger-common
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Moved common readers to the swagger common module
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved packages around in swagger-models
    [#538] Renamed the schema plugins
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Fixed bugs to support contract tests
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixed regression that renders allowEmptyValues in model properties
    
    Per 2.0 spec this is only rendered on parameters (not body parameters). So we add this to parameter and remove it from model properties.
    
    (2204)
    Added support for allowEmptyValue
    
    (2021)
    Fixed unwrapping behavior
    
    Instead of being strict and checking the field or accessor directly
    for annotations, we delegate to the jackson databinding infrastructure
    to tell us if a property is unwrapped or not.
    
    (1740)
    Injected description resolver into Swagger annotation readers
    
    Modified tests to use the description resolvers.
    Added position to property builder
    
    fixes #1280
    Reformatted imports and code
    Added a fix for 'example' field in @ApiModelProperty annotation
    Changes to allow for readOnly property in swagger 2
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Added support for overriding dataType via ApiModelProperty annotations
    
    The only stipulation, in order to get this to work is that the dataType
    is a package qualified class name.
    
    Granted that arrays and generic types will not be available for this kind
    of override. To guard from that situation if the type is only replacable
    if the replacement is more specific than the already specified value.
    
    fixes #602 and also addresses #554
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Removed unecessary variable
    
    (2022)
    Simplified to not use Optional
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrating from guava Strings
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Moved common readers to the swagger common module
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Fixed the temporal coupling int the name provider plugin
    
    Now the default name provider is no longer a component but truly a default type name provider. If there are no plugins registered the default is used
    Added suppressions for regex sonar flags
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    clean up static imports
    migrating from guava Strings
    migrate from guava lists
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixed to work with spaces when specifying ranges
    
    Added/modified tests excercised via ApiParamParameterBuilder
    
    (2446)
    Remove replaceAll with trim
    Added support for inclusive/exclusive and mixed range values
    
    resolves #1955
    Added support for allowEmptyValue
    
    (2021)
    Allow ApiModelProperties on methods to be discovered from superclasses
    
    Forgot to uncomment a test
    
    License header was missing
    Add support for exclusive ranges #2088
    Injected description resolver into Swagger annotation readers
    
    Modified tests to use the description resolvers.
    Fixed Formatting and modified access modifiers on methods
    Fixed codacity indicated error prone code
    Added position to property builder
    
    fixes #1280
    Fixed bug where allowable values with spaces were not working
    
    resolves #1211
    Reformatted imports and code
    Added a fix for 'example' field in @ApiModelProperty annotation
    Changes to allow for readOnly property in swagger 2
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Added support for overriding dataType via ApiModelProperty annotations
    
    The only stipulation, in order to get this to work is that the dataType
    is a package qualified class name.
    
    Granted that arrays and generic types will not be available for this kind
    of override. To guard from that situation if the type is only replacable
    if the replacement is more specific than the already specified value.
    
    fixes #602 and also addresses #554
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Updated models so that allowable values are rendered
    Moved common readers to the swagger common module
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#514] Support ordering supplied via ApiModelProperty.position()
    
    resolves #514
    Added private constructors to *static* classes
    
    - Removed fake test to improve coverage
    - Added exceptions in the jacoco list to ignore coverage errors in static classes
    Enum values should trump ApiModeProperty annotations
    
    - Cleanup to move inline Functions to a Utility class
    Moved from using deprecated methods from Types
    
    (3348)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Renamed classes to be consistent
    
    (2022):
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    migrate from guava supplier
    removed more FuctionContractSpec tests
    Extracted SwaggerResourcesProvider to an interface
    
    Also created an default In-memory swagger resources provider that will be
    available to be overridden by a @Primary bean implementation for providing
    aggregation of services
    
    closes #1189
    Refactored the bootstrapper to take in a RequestHandlerProvider
    
    This is a step forward to support different request handler providers. It is also
    incidentally used to create a predictable ordering of request handlers that are
    processed by the bootstrapper
    
    related to #682, #825
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Improved setting api to Swagger UI 3.x with compatibility
    Improved setting api to Swagger UI 3.x
    Added support to configure how the api key is sent
    
    It was hard-coded to send it via the query parameter only. With this change
    the library consumers can choose via a configuration how the api key needs to
    be sent to the services
    
    fixes #943
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#436] Enum values with JsonValue are not supported
    
    fixes #436
    Changed the api docs endpoints to work better with swagger-ui
    
    With the swagger ui working well the services need to be configured to work better in concert with it.
    Update swagger-ui
    
    fixes #2012
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Make csrf support optional
    Updated javadocs that are preventing publishing
    
    related to #2504
    Improved setting api to Swagger UI 3.x
    Added better class loader aware determination of presence of flavor of specification
    
    (3366)
    Changed the api docs endpoints to work better with swagger-ui
    
    With the swagger ui working well the services need to be configured to work better in concert with it.
    Fixed issue where GET/HEAD/OPTION genering incorrect parms
    
    fixes #3338
    Renamed classes to be consistent
    
    (2022):
    Added configuration properties support
    
    This helps generate metadata for the application properties
    
    (2022)
    fixup! Properties WIP
    Properties WIP
    Fixed issues with rendering the base path
    
    (2022)
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Improved setting api to Swagger UI 3.x
    Replaced all the non-RequestMapping placeholders
    
    Use Environment to resolve properties where possible.
    
    (1770)
    Namespaced the property sources using placeholder prefix
    
    Instead of the default `${` we use `$SPRINGFOX{` this way the configurer does not interfere with library users.
    
    (1621)
    Added native support for Optional types
    
    resolves #1199
    Extracted SwaggerResourcesProvider to an interface
    
    Also created an default In-memory swagger resources provider that will be
    available to be overridden by a @Primary bean implementation for providing
    aggregation of services
    
    closes #1189
    Bumped up the coverage for swagger-common
    Implemented ui configuration via spring beans
    
    fixes #796
    Implemented security configuration for swagger ui
    
    fixes to #788
    Made the SwaggerResource#getLocation() return a path thats not qualified
    
    using the ?group=<group-name> query parameter. This is to prevent the bug in swagger-ui/ swagger.js
    where the api listing is resolved by appending the api url to the url on the swagger page.
    
    more details available @ https://github.com/swagger-api/swagger-ui/issues/1245
    
    related to #727
    Allow property override for host name
    
    created a property springfox.documentation.swagger.v2.host
    that can be overriden with a value. However if no value was supplied it
    falls back the existing mechanisms of inferring the host name
    
    fixes #689
    Renamed the swagger 1 controller for consistency
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Moving resource controller out of swagger-ui
    Removes jsp from swagger-ui
    - Adds an endpoint to list all of the swagger resources within a running application
    - Added a base class for swagger contract tests
    Changed the api docs endpoints to work better with swagger-ui
    
    With the swagger ui working well the services need to be configured to work better in concert with it.
    Added suppressions for regex sonar flags
    Added configuration properties support
    
    This helps generate metadata for the application properties
    
    (2022)
    fixup! Properties WIP
    Properties WIP
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Improved setting api to Swagger UI 3.x
    Make ApiResourceController methods public
    Added swagger-resource uri namspace around security and ui configuration
    
    needed for swagger-ui.
    
    fixes #1203
    Extracted SwaggerResourcesProvider to an interface
    
    Also created an default In-memory swagger resources provider that will be
    available to be overridden by a @Primary bean implementation for providing
    aggregation of services
    
    closes #1189
    Bumped up the coverage for swagger-common
    Implemented ui configuration via spring beans
    
    fixes #796
    Implemented security configuration for swagger ui
    
    fixes to #788
    Made the SwaggerResource#getLocation() return a path thats not qualified
    
    using the ?group=<group-name> query parameter. This is to prevent the bug in swagger-ui/ swagger.js
    where the api listing is resolved by appending the api url to the url on the swagger page.
    
    more details available @ https://github.com/swagger-api/swagger-ui/issues/1245
    
    related to #727
    Allow property override for host name
    
    created a property springfox.documentation.swagger.v2.host
    that can be overriden with a value. However if no value was supplied it
    falls back the existing mechanisms of inferring the host name
    
    fixes #689
    Renamed the swagger 1 controller for consistency
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Moving resource controller out of swagger-ui
    Removes jsp from swagger-ui
    - Adds an endpoint to list all of the swagger resources within a running application
    - Added a base class for swagger contract tests
    Update swagger-ui
    
    fixes #2012
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Make csrf support optional
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Updated javadocs that are preventing publishing
    
    related to #2504
    Re-added deprecated attributes to swagger resources
    
    In order to support the url-templated library (springfox-swagger-ui-rfc6570:1.0.0)
     that isnt yet upgraded to to swagger 3.x, we need to preserve some wire level
    compatiblity as well. As a result we restored some of the serialized parameters
    in order to support older swagger-ui hitting the new features implemented in this
    PR.
    
    Also general polish before the release
    
    (2166)
    Improved setting api to Swagger UI 3.x with compatibility
    Improved setting api to Swagger UI 3.x
    Fixed issue with object mapper configuration interfering
    
    UI configuration did not declare itself explicitly as with include rules. As a result the external object mapper definitions interfered with rendering it.
    
    fixes #1732
    Changed the names of fields/accessors to match
    
    When consumers use alternate json libraries to serialize json, we still
    want to serialize the correct shape of the configuration properties for
    UI and security. To fix this we match the fields/acessor names with the
    annotated @JsonProperty property names.
    
    fixes #1531
    Added a way to override for the name of the api key header
    
    resolves #1087
    Added support to configure how the api key is sent
    
    It was hard-coded to send it via the query parameter only. With this change
    the library consumers can choose via a configuration how the api key needs to
    be sent to the services
    
    fixes #943
    Fix issue #767, duplicate @JsonProperty
    Updated the security configuration to support the improved oauth support in swagger-ui
    
    - Updated tests to improve coverage
    
    related to #928
    Fix to ensure that the property naming strategy does not affect the rendered property names
    
    that are used by swagger-ui.
    
    fixes #833
    Implemented security configuration for swagger ui
    
    fixes to #788
    Improved setting api to Swagger UI 3.x with compatibility
    Improved setting api to Swagger UI 3.x
    Added support to configure how the api key is sent
    
    It was hard-coded to send it via the query parameter only. With this change
    the library consumers can choose via a configuration how the api key needs to
    be sent to the services
    
    fixes #943
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#436] Enum values with JsonValue are not supported
    
    fixes #436
    Remove usage of generic wildcard type
    Added support for reading OAS annotations to swagger-common
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrating from guava Strings
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Major changes to accomodate controller-less specs
    Added support for adding a set of tags that apply to a docket
    
    fixes #936
    The description is now working as expected
    Work to derive tags and description based on the
    
    ApiListingBuilderPlugin. This is work in preparation to deprecate the
    ResourceGroupingStrategy
    Renamed class
    Formatting
    Removed redundant resource group
    Added support for tags as a first class concept
    
    Currently the tags are inferred based on a combination of @Api#value() and Class name.
    Going forward it can use the tags support built into the @Api annotations
    
    fixes #737
    Improved setting api to Swagger UI 3.x with compatibility
    Improved setting api to Swagger UI 3.x
    Added support to configure how the api key is sent
    
    It was hard-coded to send it via the query parameter only. With this change
    the library consumers can choose via a configuration how the api key needs to
    be sent to the services
    
    fixes #943
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#436] Enum values with JsonValue are not supported
    
    fixes #436
    Cleaned up the ui configuration
    
    removed deprecations and improved the builders. Also added swagger-ui base path url in the configuration
    Expose the 'showCommonExtensions' configuration available in swagger-ui
    through springfox UiConfiguration and UiConfigurationBuilder
    
    It's available in swagger-ui since v3.14.0
    
    Co-authored-by: Ippei Nawate <saku.ni63@gmail.com>
    Co-authored-by: Benoit <b.wiart@ubik-ingenierie.com>
    Updated javadocs that are preventing publishing
    
    related to #2504
    Upgrading swagger-ui to 3.11.0
    Improved setting api to Swagger UI 3.x
    Improved setting api to Swagger UI 3.x with compatibility
    Improved setting api to Swagger UI 3.x
    Added support to configure how the api key is sent
    
    It was hard-coded to send it via the query parameter only. With this change
    the library consumers can choose via a configuration how the api key needs to
    be sent to the services
    
    fixes #943
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#436] Enum values with JsonValue are not supported
    
    fixes #436
    Improved setting api to Swagger UI 3.x with compatibility
    Improved setting api to Swagger UI 3.x
    Added support to configure how the api key is sent
    
    It was hard-coded to send it via the query parameter only. With this change
    the library consumers can choose via a configuration how the api key needs to
    be sent to the services
    
    fixes #943
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#436] Enum values with JsonValue are not supported
    
    fixes #436
    Updated copyright year
    
    (1082)
    migrate from guava ImmutableMap, Joiner, Splitter
    Updated javadocs that are preventing publishing
    
    related to #2504
    Re-added deprecated attributes to swagger resources
    
    In order to support the url-templated library (springfox-swagger-ui-rfc6570:1.0.0)
     that isnt yet upgraded to to swagger 3.x, we need to preserve some wire level
    compatiblity as well. As a result we restored some of the serialized parameters
    in order to support older swagger-ui hitting the new features implemented in this
    PR.
    
    Also general polish before the release
    
    (2166)
    Improved setting api to Swagger UI 3.x
    Fixed issue with object mapper configuration interfering
    
    UI configuration did not declare itself explicitly as with include rules. As a result the external object mapper definitions interfered with rendering it.
    
    fixes #1732
    Fix to ensure that the property naming strategy does not affect the rendered property names
    
    that are used by swagger-ui.
    
    fixes #833
    Moving resource controller out of swagger-ui
    Removes jsp from swagger-ui
    - Adds an endpoint to list all of the swagger resources within a running application
    - Added a base class for swagger contract tests
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Cleaned up the ui configuration
    
    removed deprecations and improved the builders. Also added swagger-ui base path url in the configuration
    Fixed sonar cloud blocker issues
    Expose the 'showCommonExtensions' configuration available in swagger-ui
    through springfox UiConfiguration and UiConfigurationBuilder
    
    It's available in swagger-ui since v3.14.0
    
    Co-authored-by: Ippei Nawate <saku.ni63@gmail.com>
    Co-authored-by: Benoit <b.wiart@ubik-ingenierie.com>
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrating from guava Strings
    Updated javadocs that are preventing publishing
    
    related to #2504
    Made validator url always be rendered
    
    (2370)
    Reformatting before work
    
    (2370)
    Formatting
    
    (2264)
    Upgrading swagger-ui to 3.11.0
    Re-added deprecated attributes to swagger resources
    
    In order to support the url-templated library (springfox-swagger-ui-rfc6570:1.0.0)
     that isnt yet upgraded to to swagger 3.x, we need to preserve some wire level
    compatiblity as well. As a result we restored some of the serialized parameters
    in order to support older swagger-ui hitting the new features implemented in this
    PR.
    
    Also general polish before the release
    
    (2166)
    Improved setting api to Swagger UI 3.x with compatibility
    Improved setting api to Swagger UI 3.x
    Fixed issue with object mapper configuration interfering
    
    UI configuration did not declare itself explicitly as with include rules. As a result the external object mapper definitions interfered with rendering it.
    
    fixes #1732
    Fixed the checkstyle issue with tabs
    
    (#1523)
    Added backwards compatible constructor
    
    Also added deprecation warning and updated documentation for javadocs
    
    (#1523)
    Added support for configuring the request timeout
    
    (#1523)
    Changed the names of fields/accessors to match
    
    When consumers use alternate json libraries to serialize json, we still
    want to serialize the correct shape of the configuration properties for
    UI and security. To fix this we match the fields/acessor names with the
    annotated @JsonProperty property names.
    
    fixes #1531
    constant string arrays not initialized before constructor --> moved to extra static inner class, added new constructor UIConfiguration(String validatorUrl, String[] supportedSubmitMethods) for convenience
    fix for #1291
    Provided a way to supply a ui configuration bean
    
    Added additional properties to the UI configuration bean to override properties such as docExpansion, jsonEditor etc.
    
    fixes #1122
    Fix to ensure that the property naming strategy does not affect the rendered property names
    
    that are used by swagger-ui.
    
    fixes #833
    @ApiResponse maps to wrong ApiModel-definition name when overriden
    
    fixes #793
    Implemented ui configuration via spring beans
    
    fixes #796
    Made the dependencies strictly provided only
    
    This way spring/jackson etc will always take the dependencies that were provided
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    jackson-dataformat-xml plugin springfox#2734
    Fixed the artifact based sharing of test code
    Updated the converage numbers
    Added staticdocs module
    - Removed a bunch of gradle apply language plugins
    - Reverted gralde idea copyright generation from copyright file
    Adds the swagger 2 webjar module
    Updated the build files
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#383 #532] Using alternative generic ResponseEntity and HttpEntity
    Remove line
    Add missing apache license preamble.
    Add support for api model property positions.
    Discovered bugs related to unwrapping fields/getters and setters
    
    Fixed the problem and updated the tests to improve coverage
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Accounts for aliases as a result of JsonProperty annotation
    
    Fixes #320
    #801 #810 Add proper support for enums in response values and in schema objects
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved packages around in swagger-models
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed checkstyle violations and code cleanup
    
    (2022)
    add license
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    add license
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Coverage.
    Discovered bugs related to unwrapping fields/getters and setters
    
    Fixed the problem and updated the tests to improve coverage
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#494] Add support for JsonGetter and JsonSetter annotations
    
    resolves #494
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Accounts for aliases as a result of JsonProperty annotation
    
    Fixes #320
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#494] Add support for JsonGetter and JsonSetter annotations
    
    resolves #494
    Added tests for estabilishing priority of JsonProperty
    
    resolves #1436
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Accounts for aliases as a result of JsonProperty annotation
    
    Fixes #320
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed rendering Maps that are subclasses of partially closed generic Maps.
    
    fixes #1062
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Initial work to re-write SDR support
    
    This work is loosely based on the grails work just to maintain
    consistency in the extensions.
    
    (1623)
    Discovered bugs related to unwrapping fields/getters and setters
    
    Fixed the problem and updated the tests to improve coverage
    Added optimized model properties provider
    
    fixes #806
    Tests added for field property provider
    
    related to #752
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#192] Fixed problem with @JsonUnwrapped not being respected
    
    - Added tests for unwrapped type and fixed coverage
    
    fixes #192
    Implemented naive basic implementation of OpenAPI mappers
    
    (2022)
    Added new test types to catch changes in prep for this fix
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Fixed the problem where properties that are of type Map<?,?> are not rendered correctly
    
    fixes #312
    #2932: Minor version upgrades of spring dependencies. Aligned contract tests with Spring HATEOAS 1.x. Fixed wrong client encoding used in tests.
    #2932 - Spring HATEOAS 1.0.0.RELEASE
    Fixed issue where Resource<X> where X extends ResourceSupport crashes
    
    with duplicate key violation. This is because Resource itself is a subclass of
    ResourceSupport. This creating two link properties especially for return types. This
    is a side effect of the alternate type rule that substitutes Resource<T>
    
    fixes #1125
    Bumped up the coverage for swagger-common
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Fixed the temporal coupling int the name provider plugin
    
    Now the default name provider is no longer a component but truly a default type name provider. If there are no plugins registered the default is used
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed the build and also fixed depcration warnings
    #2932: Minor version upgrades of spring dependencies. Aligned contract tests with Spring HATEOAS 1.x. Fixed wrong client encoding used in tests.
    #2932 - Spring HATEOAS 1.0.0.RELEASE
    Apply custom alternate rules before the default rules
    
    Since the rules are processed on a first rule matches strategy, the
    default rules need to be evaluated after all the library consumer
    supplied rules are evaluated.
    
    related to #1025
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Filtered out the void properties and collection of voids
    
    When mapping to swagger objects we filter out the voids, array of voids, or list of voids
    since it doesnt make sense anyways to be part of the model properties collection.
    
    Also fixed the coverage to not include mapstruct generated mappers
    
    fixes #1147
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Added tests to verify substitution rules for arrays and lists
    
    related to #1003
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Accounts for aliases as a result of JsonProperty annotation
    
    Fixes #320
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Fixed expansion of models with alternate types
    
    resolves #2165
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added support for vendor extensions on Parameters and ResponseModels
    
    fixes #1137
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#469] Fixed the arrays inside generics problem
    
    fixes #469
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Added tests to verify substitution rules for arrays and lists
    
    related to #1003
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Accounts for aliases as a result of JsonProperty annotation
    
    Fixes #320
    Discovered bugs related to unwrapping fields/getters and setters
    
    Fixed the problem and updated the tests to improve coverage
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Added tests to verify substitution rules for arrays and lists
    
    related to #1003
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#383 #532] Using alternative generic ResponseEntity and HttpEntity
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Added java.sql.Date as a native primitive type
    
    fixes #1162
    Fix to add UUID as a primitive type
    
    fixes #925
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#473] Add support for java.util.Currency
    
    closes #473
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Discovered bugs related to unwrapping fields/getters and setters
    
    Fixed the problem and updated the tests to improve coverage
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#494] Add support for JsonGetter and JsonSetter annotations
    
    resolves #494
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    the property providers use the naming strategy in both bean properties as well as fields
    
    closes #413
    Updated the test to reflect JsonProperty usecase in the constructor
    Added test to verify #283
    
    Closes #283 - not reproducible
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Fixed expansion of models with alternate types
    
    resolves #2165
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Added support for @JsonFormat annotation
    
    fixes #1021
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Fixed expansion of models with alternate types
    
    resolves #2165
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Coverage.
    Coverage and fixes.
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed the swagger json to match the currently supported output
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Discovered bugs related to unwrapping fields/getters and setters
    
    Fixed the problem and updated the tests to improve coverage
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#494] Add support for JsonGetter and JsonSetter annotations
    
    resolves #494
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#494] Add support for JsonGetter and JsonSetter annotations
    
    resolves #494
    Added new test types to catch changes in prep for this fix
    Added tests to verify substitution rules for arrays and lists
    
    related to #1003
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#469] Fixed the arrays inside generics problem
    
    fixes #469
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixes for typo and names.
    Coverage.
    Fixes and coverage.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Fixes for Type name extractor test
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Reduced code complexity in ModelDependencyProvider
    Made parameter use modelRef fully rather than just for the item types
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Reduced code complexity in ModelDependencyProvider
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Improved the coverage and bumped up the thresholds
    Migrated mixin based test support classes to traits
    
    (2022)
    #2932: Minor version upgrades of spring dependencies. Aligned contract tests with Spring HATEOAS 1.x. Fixed wrong client encoding used in tests.
    #2932 - fix hateos collectionModel rule
    #2932 - Spring HATEOAS 1.0.0.RELEASE
    Apply custom alternate rules before the default rules
    
    Since the rules are processed on a first rule matches strategy, the
    default rules need to be evaluated after all the library consumer
    supplied rules are evaluated.
    
    related to #1025
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the asResolved method and inlined all the invocations
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Added tests to support the usecase
    
    closes #347
    Accounts for aliases as a result of JsonProperty annotation
    
    Fixes #320
    Add plugin and adapter to simplify setup.
    Added default modelProvider to base spring configuration.
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Implementation that supports alternate types
    Schema adjustments based on rendering the contract tests
    
    (2022)
    Added support for simple types and complex types
    
    (2022)
    Fixed simple type specification
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Optimized imports per project style
    
    (1082)
    using more static imports
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixes for typo and names.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Fixes for Schema tests
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Added tests for estabilishing priority of JsonProperty
    
    resolves #1436
    Added java.sql.Date as a native primitive type
    
    fixes #1162
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Fix to add UUID as a primitive type
    
    fixes #925
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    Renamed the items property to modelRef, that way it can be repurposed
    
    for modelling collections as well as regular types. That way we wont need to do gymnastics to
    support swagger 2.0
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved packages around in swagger-models
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Adding more tests to fix the test coverage
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#473] Add support for java.util.Currency
    
    closes #473
    Accounts for aliases as a result of JsonProperty annotation
    
    Fixes #320
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    add license
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    Cleaned up deprecated api
    
    Also simplified the trait heirarchy
    
    (2022)
    Fixed simple type specification
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Fix all the TypeNameExtractor constructors
    
    (1829)
    fixing tests
    Added caching decorators for the models, model properties and dependencies
    Broke the cyclic dependency where the TypeNameExtractor depends on schema plugin manager
    
    This way the type name extract is responsible for its own plugins
    
    related to #702
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    Schema adjustments based on rendering the contract tests
    
    (2022)
    Added model key as a required attribute of a compound model
    
    (2022)
    Added discriminators to model key
    
    (2022)
    Added support for map reference types
    
    (2022)
    Added support for collection types
    
    (2022)
    Completed the Complex Type test suite
    
    (2022)
    Added support for simple types and complex types
    
    (2022)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Reduced code complexity in ModelDependencyProvider
    Added support for additional scalar types
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Schema adjustments based on rendering the contract tests
    
    (2022)
    Changed signature to return only the dependent ModelSpecifications. We dont care about the resolved types
    
    (2022)
    Added support for map reference types
    
    (2022)
    Added support for collection types
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Optimized imports per project style
    
    (1082)
    using more static imports
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixes for typo and names.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Fixes for Schema tests
    Fixes for tests.
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Fixed problem rendering properties with nested maps
    
    When encountering properties which are Map of Maps only the value map
    needs to be part of the model depdendencies. This fix skips the model that
    represents the map of maps so that the un-used models need not be part
    of the schema definition
    
    fixes #1186
    Added support for nested model references
    
    especially useful for 2D arrays
    Added model ref interface
    
    Also added two dimensional array substitution support
    Added alternate type rule
    Added new test types to catch changes in prep for this fix
    Added tests to verify substitution rules for arrays and lists
    
    related to #1003
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for default providers per documentation type
    Made parameter use modelRef fully rather than just for the item types
    Renamed the items property to modelRef, that way it can be repurposed
    
    for modelling collections as well as regular types. That way we wont need to do gymnastics to
    support swagger 2.0
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved packages around in swagger-models
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Fixed the tests because of the string literals not moved during the package rename
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed the broken build
    [#383 #532] Using alternative generic ResponseEntity and HttpEntity
    [#469] Fixed the arrays inside generics problem
    
    fixes #469
    Fixed the problem where properties that are of type Map<?,?> are not rendered correctly
    
    fixes #312
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Migrated mixin based test support classes to traits
    
    (2022)
    #2932: Minor version upgrades of spring dependencies. Aligned contract tests with Spring HATEOAS 1.x. Fixed wrong client encoding used in tests.
    #2932: Fixed import for model test.
    Unit tests.
    Optimized imports per project style
    
    (1082)
    fixing groovy static imports
    using more static imports
    migrating from guava Strings
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixes for typo and names.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Fixes for Schema tests
    Fixed rendering of Collection<T>
    
    (1623)
    Fixed unwrapping behavior
    
    Instead of being strict and checking the field or accessor directly
    for annotations, we delegate to the jackson databinding infrastructure
    to tell us if a property is unwrapped or not.
    
    (1740)
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Fixed issue where Resource<X> where X extends ResourceSupport crashes
    
    with duplicate key violation. This is because Resource itself is a subclass of
    ResourceSupport. This creating two link properties especially for return types. This
    is a side effect of the alternate type rule that substitutes Resource<T>
    
    fixes #1125
    Refactored GenericTypeSpec test to be more readable
    
    related to #1147
    Filtered out the void properties and collection of voids
    
    When mapping to swagger objects we filter out the voids, array of voids, or list of voids
    since it doesnt make sense anyways to be part of the model properties collection.
    
    Also fixed the coverage to not include mapstruct generated mappers
    
    fixes #1147
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Renamed the items property to modelRef, that way it can be repurposed
    
    for modelling collections as well as regular types. That way we wont need to do gymnastics to
    support swagger 2.0
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved packages around in swagger-models
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Fixed the tests because of the string literals not moved during the package rename
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed the broken build
    [#383 #532] Using alternative generic ResponseEntity and HttpEntity
    [#498] add coverage for new setter on ResolvedTypes
    [#469] Fixed the arrays inside generics problem
    
    fixes #469
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Completed the Complex Type test suite
    
    (2022)
    Added support for simple types and complex types
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Optimized imports per project style
    
    (1082)
    using more static imports
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixes for typo and names.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Fixes for Schema tests
    Fixes for tests.
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Added better support for BigDecimal & BigInteger
    
    fixes #1432
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Renamed the items property to modelRef, that way it can be repurposed
    
    for modelling collections as well as regular types. That way we wont need to do gymnastics to
    support swagger 2.0
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved packages around in swagger-models
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Fixed the tests because of the string literals not moved during the package rename
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Added support for vendor extensions on Parameters and ResponseModels
    
    fixes #1137
    Adding a test to test with 2 overloaded setters
    
    related to #726
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Reduced code complexity in ModelDependencyProvider
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    Schema adjustments based on rendering the contract tests
    
    (2022)
    Added tests for types with constructor
    
    (2022)
    Added support for enumerations
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixes for typo and names.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Fixes for Schema tests
    Fixes for tests.
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Renamed the items property to modelRef, that way it can be repurposed
    
    for modelling collections as well as regular types. That way we wont need to do gymnastics to
    support swagger 2.0
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved packages around in swagger-models
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Fixed the tests because of the string literals not moved during the package rename
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    fixing sorting list in multimap and adding test cases
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Relaxing linelength checkstyle rule
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    Migrated mixin based test support classes to traits
    
    (2022)
    Added new test types to catch changes in prep for this fix
    Added tests to verify substitution rules for arrays and lists
    
    related to #1003
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for Map types in the models
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Added tests for caching
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Fixes for Schema tests
    Fixes for tests.
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Fixed caching implementations such that exceptions are handled
    
    Logged the unhandled errrors as a warning and return empty sets and lists or in the
    case of Optionals return absent
    
    fixes #1193
    Updated the tests and removed unused key generators
    
    that were used for caching
    Added tests for caching
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    clean up static imports
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Fixes for Schema tests
    Fixes for tests.
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Fixed caching implementations such that exceptions are handled
    
    Logged the unhandled errrors as a warning and return empty sets and lists or in the
    case of Optionals return absent
    
    fixes #1193
    Updated the tests and removed unused key generators
    
    that were used for caching
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixes for typo and names.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Fixes for Schema tests
    Initial work to re-write SDR support
    
    This work is loosely based on the grails work just to maintain
    consistency in the extensions.
    
    (1623)
    Fixed unwrapping behavior
    
    Instead of being strict and checking the field or accessor directly
    for annotations, we delegate to the jackson databinding infrastructure
    to tell us if a property is unwrapped or not.
    
    (1740)
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Removed dependency on spring-hateoas
    
    In addition upgraded the jackson libraries and the json assert libraries.
    This change is mainly to remove the dependency on spring-hateoas being available
    for this library.
    
    fixes #1104
    Discovered bugs related to unwrapping fields/getters and setters
    
    Fixed the problem and updated the tests to improve coverage
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Renamed the items property to modelRef, that way it can be repurposed
    
    for modelling collections as well as regular types. That way we wont need to do gymnastics to
    support swagger 2.0
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved packages around in swagger-models
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#192] Fixed problem with @JsonUnwrapped not being respected
    
    - Added tests for unwrapped type and fixed coverage
    
    fixes #192
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Optimized imports per project style
    
    (1082)
    using more static imports
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixes for typo and names.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Fixes for Schema tests
    Fixed rendering of Collection<T>
    
    (1623)
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Fixed problem rendering properties with nested maps
    
    When encountering properties which are Map of Maps only the value map
    needs to be part of the model depdendencies. This fix skips the model that
    represents the map of maps so that the un-used models need not be part
    of the schema definition
    
    fixes #1186
    Added tests to verify substitution rules for arrays and lists
    
    related to #1003
    Added support for list of maps
    
    fixes #740
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for rendering maps in swagger 2
    Added support for default providers per documentation type
    [#538] Removed the asResolved method and inlined all the invocations
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved packages around in swagger-models
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#383 #532] Using alternative generic ResponseEntity and HttpEntity
    Reformatting code to meet coding style
    Fixed the problem where properties that are of type Map<?,?> are not rendered correctly
    
    fixes #312
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Schema adjustments based on rendering the contract tests
    
    (2022)
    Added tests for types with constructor
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Fixes for Schema tests
    Fixes for tests.
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Discovered bugs related to unwrapping fields/getters and setters
    
    Fixed the problem and updated the tests to improve coverage
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixes for typo and names.
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Fixes for Schema tests
    Fixed rendering of Collection<T>
    
    (1623)
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Fixed problem rendering properties with nested maps
    
    When encountering properties which are Map of Maps only the value map
    needs to be part of the model depdendencies. This fix skips the model that
    represents the map of maps so that the un-used models need not be part
    of the schema definition
    
    fixes #1186
    Added new test types to catch changes in prep for this fix
    Added tests to verify substitution rules for arrays and lists
    
    related to #1003
    Added support for list of maps
    
    fixes #740
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for rendering maps in swagger 2
    Added support for default providers per documentation type
    Made parameter use modelRef fully rather than just for the item types
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved packages around in swagger-models
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#383 #532] Using alternative generic ResponseEntity and HttpEntity
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Optimized imports per project style
    
    (1082)
    using more static imports
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixes for enums.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Fixes for Schema tests
    Fix all the TypeNameExtractor constructors
    
    (1829)
    fixing tests
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Fixed problem rendering properties with nested maps
    
    When encountering properties which are Map of Maps only the value map
    needs to be part of the model depdendencies. This fix skips the model that
    represents the map of maps so that the un-used models need not be part
    of the schema definition
    
    fixes #1186
    Moved from using deprecated methods from Types
    
    (3348)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    Migrated mixin based test support classes to traits
    
    (2022)
    Added tests for estabilishing priority of JsonProperty
    
    resolves #1436
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Cleanup and improved test coverage
    [#192] Fixed problem with @JsonUnwrapped not being respected
    
    - Added tests for unwrapped type and fixed coverage
    
    fixes #192
    Bean properties now support the property names as expected by the jackson serialization runtime
    
    Closes #400
    Support for naming strategies
    correct spelling, fix typos
    (issue #1896)
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixes for typo and names.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Fixes for Schema tests
    Fixes for tests.
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Modified the test to accommodate newly added rules.
    
    Since this test is not really testing precedence of rules, its ok to check the types with those that are expected from the newly added rules.
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Centralized model ref creation and removed dupication
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Renamed the items property to modelRef, that way it can be repurposed
    
    for modelling collections as well as regular types. That way we wont need to do gymnastics to
    support swagger 2.0
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Fixed the build and also fixed depcration warnings
    Refactored to use the shallow ModelSpecificationProvider
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Reformatting to match style guide
    
    (2311)
    Fixes for enums.
    Fixed ModelDependencyProvider, ModelProvider ParameterDataTypeReader
    
    Usages of the new enum type determiner did not propogate to tests.
    
    (1829)
    Fix all the TypeNameExtractor constructors
    
    (1829)
    fixing tests
    Initial work to re-write SDR support
    
    This work is loosely based on the grails work just to maintain
    consistency in the extensions.
    
    (1623)
    Added caching decorators for the models, model properties and dependencies
    Removed unused model property providers and specifications, also modified the
    
    test support to use the optimized provider instead
    Removed DefaultModelPropertiesProvider as it is no longer in commision
    Updated the model property resolution to use the accessors/factory methods
    
    and constructors from the bean that jackson infers. This fixes a problem where scala
    classes do not participate in the property inference. This also implements the long
    standing feature request to support constructor and @JsonCreator annotated factory methods
    that are the primary source for properties.
    Refactored the package name for property provider
    
    related to #806
    Broke the cyclic dependency where the TypeNameExtractor depends on schema plugin manager
    
    This way the type name extract is responsible for its own plugins
    
    related to #702
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    Renamed the items property to modelRef, that way it can be repurposed
    
    for modelling collections as well as regular types. That way we wont need to do gymnastics to
    support swagger 2.0
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Migrated mixin based test support classes to traits
    
    (2022)
    #2932: Minor version upgrades of spring dependencies. Aligned contract tests with Spring HATEOAS 1.x. Fixed wrong client encoding used in tests.
    #2932: Fixed import for model test.
    #2932 - Spring HATEOAS 1.0.0.RELEASE
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Fixed issue where Resource<X> where X extends ResourceSupport crashes
    
    with duplicate key violation. This is because Resource itself is a subclass of
    ResourceSupport. This creating two link properties especially for return types. This
    is a side effect of the alternate type rule that substitutes Resource<T>
    
    fixes #1125
    Filtered out the void properties and collection of voids
    
    When mapping to swagger objects we filter out the voids, array of voids, or list of voids
    since it doesnt make sense anyways to be part of the model properties collection.
    
    Also fixed the coverage to not include mapstruct generated mappers
    
    fixes #1147
    Polished the tests
    Fixed rendering Maps that are subclasses of partially closed generic Maps.
    
    fixes #1062
    Apply custom alternate rules before the default rules
    
    Since the rules are processed on a first rule matches strategy, the
    default rules need to be evaluated after all the library consumer
    supplied rules are evaluated.
    
    related to #1025
    Discovered bugs related to unwrapping fields/getters and setters
    
    Fixed the problem and updated the tests to improve coverage
    #801 #810 Add proper support for enums in response values and in schema objects
    Added support for list of maps
    
    fixes #740
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Relaxing linelength checkstyle rule
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Fixed the broken build
    [#383 #532] Using alternative generic ResponseEntity and HttpEntity
    [#494] Add support for JsonGetter and JsonSetter annotations
    
    resolves #494
    [#192] Fixed problem with @JsonUnwrapped not being respected
    
    - Added tests for unwrapped type and fixed coverage
    
    fixes #192
    [#469] Fixed the arrays inside generics problem
    
    fixes #469
    Added tests to support the usecase
    
    closes #347
    the property providers use the naming strategy in both bean properties as well as fields
    
    closes #413
    Fixed the problem where properties that are of type Map<?,?> are not rendered correctly
    
    fixes #312
    Honoring ApiModelProperty--author=fgaule <federico.gaule@gmail.com>
    Accounts for aliases as a result of JsonProperty annotation
    
    Fixes #320
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Add some continence methods for model substitution rules. Added some javadoc to SwaggerSpringMvcPlugin.java.
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Implementation that supports alternate types
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Migrated mixin based test support classes to traits
    
    (2022)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#192] Fixed problem with @JsonUnwrapped not being respected
    
    - Added tests for unwrapped type and fixed coverage
    
    fixes #192
    Migrated mixin based test support classes to traits
    
    (2022)
    Added support for vendor extensions on Parameters and ResponseModels
    
    fixes #1137
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the asResolved method and inlined all the invocations
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Cleanup and improved test coverage
    [#494] Add support for JsonGetter and JsonSetter annotations
    
    resolves #494
    the property providers use the naming strategy in both bean properties as well as fields
    
    closes #413
    Bean properties now support the property names as expected by the jackson serialization runtime
    
    Closes #400
    Changes to accept the pr
    
    - Moved Accessor to the right package and changed visibilityi.
    - Changed the ObjectMapper back to how it was currently being set in a
      bean PostConstruct.
    - Renamed PropertyUtils to BeanPropertyDefinitions to match guava
      convention
    - Changed Qualifier to default for the ModepPropertiesProvider bean
    - Re-instated the JacksonSwaggerSupport foo to set the ObjectMapper in
      the PostConstruct
    Moved property description code DefaultModelPropertiesProvider -> BeanModelProperty
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Schema adjustments based on rendering the contract tests
    
    (2022)
    Cleaned up deprecated api
    
    Also simplified the trait heirarchy
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Additional test for recursive types.
    Fixes for tests.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    migrate from guava lists
    Renamed variable
    
    (1151)
    (868)
    Updated tests to use the schema plugin for synthetic models
    
    (2311)
    Coverage and fixes.
    Fixes for ViewPlugin.
    Test fixes for Web
    Fixes for tests.
    Broke the cyclic dependency where the TypeNameExtractor depends on schema plugin manager
    
    This way the type name extract is responsible for its own plugins
    
    related to #702
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    fixing groovy static imports
    using more static imports
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Formatting changes
    
    (2182)
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Fixes for Schema tests
    Fixes for tests.
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Fixed caching implementations such that exceptions are handled
    
    Logged the unhandled errrors as a warning and return empty sets and lists or in the
    case of Optionals return absent
    
    fixes #1193
    Updated the tests and removed unused key generators
    
    that were used for caching
    migrated from guava equivalence
    removed another test from FunctionContractSpec
    Updated the method comparison to not be naive
    
    Currently it checks for method equality, but this can sometimes not be correct as the resolved method and the target of comparison might be on different classes in the class inheritance chain.
    
    fixes #1258
    Refactored to use the shallow ModelSpecificationProvider
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Fixes for tests.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    fixing groovy static imports
    using more static imports
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Formatting changes
    
    (2182)
    Fixes for enums.
    Coverage.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Fixes for Schema tests
    Fixes for tests.
    Fix all the TypeNameExtractor constructors
    
    (1829)
    fixing tests
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Added support for @JsonFormat annotation
    
    fixes #1021
    Fixes the violation of law of demeter
    
    (1196)
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Updated the model property resolution to use the accessors/factory methods
    
    and constructors from the bean that jackson infers. This fixes a problem where scala
    classes do not participate in the property inference. This also implements the long
    standing feature request to support constructor and @JsonCreator annotated factory methods
    that are the primary source for properties.
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Added optimized model properties provider
    
    fixes #806
    Schema adjustments based on rendering the contract tests
    
    (2022)
    Added property name to the property specification builder constructor
    
    (2022)
    Initial model refactoring
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Moved the package for the XmlModelPlugin
    
    (1152)
    Moved tests to the right place
    
    Also moved the type used for testing
    
    (2288)
    Schema adjustments based on rendering the contract tests
    
    (2022)
    Added property name to the property specification builder constructor
    
    (2022)
    Merging master
    jackson-dataformat-xml plugin springfox#2734
    using more static imports
    Added unit tests and updated contract tests
    
    (2182)
    Formatting changes
    
    (2182)
    correct spelling, fix typos
    (issue #1896)
    Added support for isRequired property from jackson
    
    fixes #1294
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    More coverage related smells
    Changes to accept the pr
    
    - Moved Accessor to the right package and changed visibilityi.
    - Changed the ObjectMapper back to how it was currently being set in a
      bean PostConstruct.
    - Renamed PropertyUtils to BeanPropertyDefinitions to match guava
      convention
    - Changed Qualifier to default for the ModepPropertiesProvider bean
    - Re-instated the JacksonSwaggerSupport foo to set the ObjectMapper in
      the PostConstruct
    Supporting constructor params as fields
    Updated the model property resolution to use the accessors/factory methods
    
    and constructors from the bean that jackson infers. This fixes a problem where scala
    classes do not participate in the property inference. This also implements the long
    standing feature request to support constructor and @JsonCreator annotated factory methods
    that are the primary source for properties.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#494] Add support for JsonGetter and JsonSetter annotations
    
    resolves #494
    Changes to accept the pr
    
    - Moved Accessor to the right package and changed visibilityi.
    - Changed the ObjectMapper back to how it was currently being set in a
      bean PostConstruct.
    - Renamed PropertyUtils to BeanPropertyDefinitions to match guava
      convention
    - Changed Qualifier to default for the ModepPropertiesProvider bean
    - Re-instated the JacksonSwaggerSupport foo to set the ObjectMapper in
      the PostConstruct
    Accounts for aliases as a result of JsonProperty annotation
    
    Fixes #320
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Code cleanup
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Optimized imports per project style
    
    (1082)
    fixing groovy static imports
    using more static imports
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Added unit tests and updated contract tests
    
    (2182)
    Fixes for typo and names.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Fixes for Schema tests
    Fixes for tests.
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Added support for vendor extensions on Parameters and ResponseModels
    
    fixes #1137
    Added support for isRequired property from jackson
    
    fixes #1294
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Fixed the tests because of the string literals not moved during the package rename
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Cleanup and improved test coverage
    [#494] Add support for JsonGetter and JsonSetter annotations
    
    resolves #494
    the property providers use the naming strategy in both bean properties as well as fields
    
    closes #413
    Bean properties now support the property names as expected by the jackson serialization runtime
    
    Closes #400
    Support for naming strategies
    Supporting constructor params as fields
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Optimized imports per project style
    
    (1082)
    fixing groovy static imports
    using more static imports
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixes for typo and names.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Fixes for Schema tests
    Fixes for tests.
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Schema adjustments based on rendering the contract tests
    
    (2022)
    Unit tests.
    Fixes for tests.
    Optimized imports per project style
    
    (1082)
    fixing groovy static imports
    using more static imports
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Added support for inferring Jackson based inheritance
    
    This is just limited supports of explicitly configured models, and doesnt take into account global default configuration in object mappers.
    
    (1151)
    (868)
    Upgraded to groovy 3 and spock 2.0
    jackson-dataformat-xml plugin springfox#2734
    Unit tests.
    Fixes for tests.
    Optimized imports per project style
    
    (1082)
    fixing groovy static imports
    using more static imports
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Moved the package for the XmlModelPlugin
    
    (1152)
    Moved tests to the right place
    
    Also moved the type used for testing
    
    (2288)
    Fixed rendering of xml examples
    
    The XmlRootElement wasnt taken into consideration when figuring out the xml root element name
    
    (2230)
    Schema adjustments based on rendering the contract tests
    
    (2022)
    Added property name to the property specification builder constructor
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Initial model refactoring
    Unit tests.
    Optimized imports per project style
    
    (1082)
    using more static imports
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Updated tests to use the schema plugin for synthetic models
    
    (2311)
    Fixes for typo and names.
    Fixes for ViewPlugin.
    Fixes for Schema tests
    Fixes for tests.
    Fix all the TypeNameExtractor constructors
    
    (1829)
    fixing tests
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Broke the cyclic dependency where the TypeNameExtractor depends on schema plugin manager
    
    This way the type name extract is responsible for its own plugins
    
    related to #702
    Added support for overriding dataType via ApiModelProperty annotations
    
    The only stipulation, in order to get this to work is that the dataType
    is a package qualified class name.
    
    Granted that arrays and generic types will not be available for this kind
    of override. To guard from that situation if the type is only replacable
    if the replacement is more specific than the already specified value.
    
    fixes #602 and also addresses #554
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Renamed plugin manager methods to be consistent with the other plugin managers
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    Unit tests.
    Fixes for tests.
    Optimized imports per project style
    
    (1082)
    fixing groovy static imports
    using more static imports
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Moved the package for the XmlModelPlugin
    
    (1152)
    Moved tests to the right place
    
    Also moved the type used for testing
    
    (2288)
    Fixed rendering of xml examples
    
    The XmlRootElement wasnt taken into consideration when figuring out the xml root element name
    
    (2230)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed the build and also fixed depcration warnings
    Added support for effective model
    
    The idea behind effective models is to capture whether a model actually used the discriminators or not. For e.g. if a model is marked with a view discriminator and the dependent model does not have any effect of the discriminator as in the model is isomorphic with respect to the view discriminator then we remove the view from the effective model key. This is useful, in this example, to distinguish when naming a model if it should have `View` as a prefix or not in this case.
    
    (2022)
    Fixed simple type specification
    
    (2022)
    Preparations for a new merging algorithm. Fixes .hashCode() collisions
    and Synthetic types.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava ImmutableMap, Joiner, Splitter
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    fixup! Breaking compat with subtypes
    Breaking compat with subtypes
    
    This is not an implemented feature so taking the risk of premature breaking of compat
    
    (1152)
    Made the spec that is generated compliant (as far as possible)
    
    Added xml attributes and removed content where it wasnt appropriate
    
    (2311)
    Added support to use synthetic models when available
    
    (2311)
    New comparison algorithm
    Removed the hardcoded xml trait in lieu of new model builder plugin
    
    (1907)
    add some tests
    Fixed ModelDependencyProvider, ModelProvider ParameterDataTypeReader
    
    Usages of the new enum type determiner did not propogate to tests.
    
    (1829)
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    Added convenience method to check if a type is a base type
    Fixed caching implementations such that exceptions are handled
    
    Logged the unhandled errrors as a warning and return empty sets and lists or in the
    case of Optionals return absent
    
    fixes #1193
    Reformatting
    Removed the caching aspect and preserved the cacheable and moved
    
    the annotation up to the interfaces
    Added caching decorators for the models, model properties and dependencies
    Discovered bugs related to unwrapping fields/getters and setters
    
    Fixed the problem and updated the tests to improve coverage
    Fixes problem where internal models marked hidden are not getting filtered
    
    fixes #873
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Since this is part of a dot release, backporting it to use spring 4.0.9 where
    
    cacheables do not expose a keyGenerator annotation attribute
    
    related to #682
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Additional test cases for read only flag
    
    Test case for read only flag in swagger 2, and no impact to swagger 1
    Changes to allow for readOnly property in swagger 2
    Added optimized model properties provider
    
    fixes #806
    Refactored the package name for property provider
    
    related to #806
    Fixes field properties provider issue found while fixing the code coverage build issue
    
    Uncovered the fact that the field model properties provider was working
    incorrectly. This fixes that problem also removed some ignored tests.
    
    related to #752
    Added support for list of maps
    
    fixes #740
    Adding more instrumentation around models and property inference
    
    To assist with problems like #688
    Shorted the static imports and formatting
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for rendering maps in swagger 2
    Renamed plugin manager methods to be consistent with the other plugin managers
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved packages around in swagger-models
    [#538] Renamed the schema plugins
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Adding more tests to fix the test coverage
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#538] Cleanup
    [#537] Adds more builders and updates changelog for release
    [#537] Adds builders for some of the primary swagger dtos
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#514] Support ordering supplied via ApiModelProperty.position()
    
    resolves #514
    [#192] Fixed problem with @JsonUnwrapped not being respected
    
    - Added tests for unwrapped type and fixed coverage
    
    fixes #192
    Normalized spaces and imports
    Fixed the problem where properties that are of type Map<?,?> are not rendered correctly
    
    fixes #312
    Changes to accept the pr
    
    - Moved Accessor to the right package and changed visibilityi.
    - Changed the ObjectMapper back to how it was currently being set in a
      bean PostConstruct.
    - Renamed PropertyUtils to BeanPropertyDefinitions to match guava
      convention
    - Changed Qualifier to default for the ModepPropertiesProvider bean
    - Re-instated the JacksonSwaggerSupport foo to set the ObjectMapper in
      the PostConstruct
    Supporting constructor params as fields
    Property provider was flipped with respect to the return types vs parameters
    
    fixes #322
    - Also fix unnecessary creation of Type Resolver #319
    Autowired the ObjectMapper ...
    
    Set up components that have the object mapper wired in as a dependency
    
    fixes #272
    When substituting types the base types should not be included as models
    
    Fixes #254
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Added utility method to lookup the unwrapping prefix
    
    (2182)
    Formatting changes
    
    (2182)
    Fixed unwrapping behavior
    
    Instead of being strict and checking the field or accessor directly
    for annotations, we delegate to the jackson databinding infrastructure
    to tell us if a property is unwrapped or not.
    
    (1740)
    Fixes field properties provider issue found while fixing the code coverage build issue
    
    Uncovered the fact that the field model properties provider was working
    incorrectly. This fixes that problem also removed some ignored tests.
    
    related to #752
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Reduced code complexity in ModelDependencyProvider
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#192] Fixed problem with @JsonUnwrapped not being respected
    
    - Added tests for unwrapped type and fixed coverage
    
    fixes #192
    [#463] Adding maven required pom attributes
    Normalized spaces and imports
    Fixes the leaking response messages for status code 200
    
    fixes #332
    Refactored to seperate responsibility from OperationParameterReader
    Honoring ApiModelProperty--author=fgaule <federico.gaule@gmail.com>
    Fixed issue where ApiModelProperty wasn't being respected for required
    
    * Added generic property annotation find logic under Annotations
    * Changed BeanModelProperty to use property annotation for description and required
    * Updated BeanModelPropertySpec to reflect change in behavior
    Made all the logging debug
    
    (2022)
    Returning cache to life.
    Enhancement of merging algorithm.
    New merging algorithm that can handle cyclic model references.
    Preparations for a new merging algorithm. Fixes .hashCode() collisions
    and Synthetic types.
    Fixes and coverage.
    Moving logic from TypeNameAdapter to TypeNameExtractor.
    Renamed TypeNameAdjuster to TypeNameAdapter
    Test fixes for Web
    Fixes
    Type name adjuster registers only complex types.
    class to keeps all conditions for types
    Removed unused method
    
    (3373)
    Removed explictly setting max/min properties
    
    Consumers can override if required
    
    (2613)
    Polished the builders to not expose constructors
    
    (3351)
    Removed unused facet property
    
    (3348)
    Moved from using deprecated methods from Types
    
    (3348)
    Polished the builder apis to be fluent
    Additional builder logic cleanup
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted all builders to be consumer based
    
    (2022)
    Renamed builder method
    
    (2022)
    Schema adjustments based on rendering the contract tests
    
    (2022)
    Changed signature to return only the dependent ModelSpecifications. We dont care about the resolved types
    
    (2022)
    Added the notion of model registry
    
    When an api model spec reader reads models specifications these are registered with the registry so that they can answer some interesting questions about the models registered
    
    (2022)
    Added support for effective model
    
    The idea behind effective models is to capture whether a model actually used the discriminators or not. For e.g. if a model is marked with a view discriminator and the dependent model does not have any effect of the discriminator as in the model is isomorphic with respect to the view discriminator then we remove the view from the effective model key. This is useful, in this example, to distinguish when naming a model if it should have `View` as a prefix or not in this case.
    
    (2022)
    Added model key as a required attribute of a compound model
    
    (2022)
    Added discriminators to model key
    
    (2022)
    Added Multipart request parameter builder test
    
    Also fixed all the tests
    
    (2022)
    Refactored to use the shallow ModelSpecificationProvider
    
    (2022)
    Renamed the builder properties
    
    Reformatted the code and added check style suppressions
    
    (2022)
    Removed hard coded names of types
    
    (2022)
    Added support for simple types and complex types
    
    (2022)
    Initial model refactoring
    Preparations for a new merging algorithm. Fixes .hashCode() collisions
    and Synthetic types.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava ImmutableMap, Joiner, Splitter
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    fixup! Breaking compat with subtypes
    Breaking compat with subtypes
    
    This is not an implemented feature so taking the risk of premature breaking of compat
    
    (1152)
    Made the spec that is generated compliant (as far as possible)
    
    Added xml attributes and removed content where it wasnt appropriate
    
    (2311)
    Added support to use synthetic models when available
    
    (2311)
    New comparison algorithm
    Removed the hardcoded xml trait in lieu of new model builder plugin
    
    (1907)
    add some tests
    Fixed ModelDependencyProvider, ModelProvider ParameterDataTypeReader
    
    Usages of the new enum type determiner did not propogate to tests.
    
    (1829)
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    Added convenience method to check if a type is a base type
    Fixed caching implementations such that exceptions are handled
    
    Logged the unhandled errrors as a warning and return empty sets and lists or in the
    case of Optionals return absent
    
    fixes #1193
    Reformatting
    Removed the caching aspect and preserved the cacheable and moved
    
    the annotation up to the interfaces
    Added caching decorators for the models, model properties and dependencies
    Discovered bugs related to unwrapping fields/getters and setters
    
    Fixed the problem and updated the tests to improve coverage
    Fixes problem where internal models marked hidden are not getting filtered
    
    fixes #873
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Since this is part of a dot release, backporting it to use spring 4.0.9 where
    
    cacheables do not expose a keyGenerator annotation attribute
    
    related to #682
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Additional test cases for read only flag
    
    Test case for read only flag in swagger 2, and no impact to swagger 1
    Changes to allow for readOnly property in swagger 2
    Added optimized model properties provider
    
    fixes #806
    Refactored the package name for property provider
    
    related to #806
    Fixes field properties provider issue found while fixing the code coverage build issue
    
    Uncovered the fact that the field model properties provider was working
    incorrectly. This fixes that problem also removed some ignored tests.
    
    related to #752
    Added support for list of maps
    
    fixes #740
    Adding more instrumentation around models and property inference
    
    To assist with problems like #688
    Shorted the static imports and formatting
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for rendering maps in swagger 2
    Renamed plugin manager methods to be consistent with the other plugin managers
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved packages around in swagger-models
    [#538] Renamed the schema plugins
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Adding more tests to fix the test coverage
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#538] Cleanup
    [#537] Adds more builders and updates changelog for release
    [#537] Adds builders for some of the primary swagger dtos
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#514] Support ordering supplied via ApiModelProperty.position()
    
    resolves #514
    [#192] Fixed problem with @JsonUnwrapped not being respected
    
    - Added tests for unwrapped type and fixed coverage
    
    fixes #192
    Normalized spaces and imports
    Fixed the problem where properties that are of type Map<?,?> are not rendered correctly
    
    fixes #312
    Changes to accept the pr
    
    - Moved Accessor to the right package and changed visibilityi.
    - Changed the ObjectMapper back to how it was currently being set in a
      bean PostConstruct.
    - Renamed PropertyUtils to BeanPropertyDefinitions to match guava
      convention
    - Changed Qualifier to default for the ModepPropertiesProvider bean
    - Re-instated the JacksonSwaggerSupport foo to set the ObjectMapper in
      the PostConstruct
    Supporting constructor params as fields
    Property provider was flipped with respect to the return types vs parameters
    
    fixes #322
    - Also fix unnecessary creation of Type Resolver #319
    Autowired the ObjectMapper ...
    
    Set up components that have the object mapper wired in as a dependency
    
    fixes #272
    When substituting types the base types should not be included as models
    
    Fixes #254
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Changed signature to return only the dependent ModelSpecifications. We dont care about the resolved types
    
    (2022)
    Initial model refactoring
    Preparations for a new merging algorithm. Fixes .hashCode() collisions
    and Synthetic types.
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Updated the tests and removed unused key generators
    
    that were used for caching
    Removed the caching aspect and preserved the cacheable and moved
    
    the annotation up to the interfaces
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved packages around in swagger-models
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Updated the tests and removed unused key generators
    
    that were used for caching
    Added caching decorators for the models, model properties and dependencies
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Since this is part of a dot release, backporting it to use spring 4.0.9 where
    
    cacheables do not expose a keyGenerator annotation attribute
    
    related to #682
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Added optimized model properties provider
    
    fixes #806
    Refactored the package name for property provider
    
    related to #806
    Adding more instrumentation around models and property inference
    
    To assist with problems like #688
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Reduced code complexity in ModelDependencyProvider
    Added support for rendering maps in swagger 2
    Added support for Map types in the models
    [#538] Implemented the mappers
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved packages around in swagger-models
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Changes to accept the pr
    
    - Moved Accessor to the right package and changed visibilityi.
    - Changed the ObjectMapper back to how it was currently being set in a
      bean PostConstruct.
    - Renamed PropertyUtils to BeanPropertyDefinitions to match guava
      convention
    - Changed Qualifier to default for the ModepPropertiesProvider bean
    - Re-instated the JacksonSwaggerSupport foo to set the ObjectMapper in
      the PostConstruct
    Supporting constructor params as fields
    Property provider was flipped with respect to the return types vs parameters
    
    fixes #322
    - Also fix unnecessary creation of Type Resolver #319
    Autowired the ObjectMapper ...
    
    Set up components that have the object mapper wired in as a dependency
    
    fixes #272
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Added support for FilePart type
    
    (3364)
    Moved from using deprecated methods from Types
    
    (3348)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Returning cache to life.
    Enhancement of merging algorithm.
    New merging algorithm that can handle cyclic model references.
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Preparations for a new merging algorithm. Fixes .hashCode() collisions
    and Synthetic types.
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    clean up static imports
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixes for enums.
    Coverage and fixes.
    Bug fixes.
    Fixes for Model Refs.
    Fixed bug involving complex params in multipart requests
    
    When we receive multipart form variables of complex types we were not rendering the complex types that would come as json payloads in the body. This fixes that. It also addresses handling multiple files in a multipart request.
    
    (1965)
    Model reference provider infers model id to model reference
    Changed the internal represenation of file
    
    This way if we encounter a type called File we resolve to the right type
    
    (1632)
    Added support for nested model references
    
    especially useful for 2D arrays
    Moved from using deprecated methods from Types
    
    (3348)
    Fix all the TypeNameExtractor constructors
    
    (1829)
    add license
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    add license
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    Added support for FilePart type
    
    (3364)
    Moved from using deprecated methods from Types
    
    (3348)
    Schema adjustments based on rendering the contract tests
    
    (2022)
    Added parallel schema specificiations to the existing represenation
    
    This will allow parallel development of the richer representations
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Optimized imports per project style
    
    (1082)
    using more static imports
    clean up static imports
    migrate from guava ImmutableMap, Joiner, Splitter
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Added native UUID support
    
    fixes #2314
    Changes for extracting type names
    WIP
    Changed the internal represenation of file
    
    This way if we encounter a type called File we resolve to the right type
    
    (1632)
    Added better support for BigDecimal & BigInteger
    
    fixes #1432
    Added convenience method to check if a type is a base type
    java.sql.Date should become a "date" in JSON Schema output, according to documentation
    Added java.sql.Date as a native primitive type
    
    fixes #1162
    Added MultipartFile as a primitive swagger base type
    
    This so that when we have a parameter of type MultipartFile[] we want it
    to not try and create a model for this type.
    
    In the long term this primitive needs to be configured per format.
    
    fixes #1282
    Fix to add UUID as a primitive type
    
    fixes #925
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Reduced code complexity in ModelDependencyProvider
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#473] Add support for java.util.Currency
    
    closes #473
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    fixup! Renamed classes
    jackson-dataformat-xml plugin springfox#2734
    Conditionally load the xml plugins
    
    In JDK 9+ jaxb is not part of the runtime. So we need to check if jaxb
    is even on the classpath before pullingin a bean defnition.
    
    (2226)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#498] add support for generic type naming strategies
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Fixed the temporal coupling int the name provider plugin
    
    Now the default name provider is no longer a component but truly a default type name provider. If there are no plugins registered the default is used
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    Initial model refactoring
    Preparations for a new merging algorithm. Fixes .hashCode() collisions
    and Synthetic types.
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Updated the tests and removed unused key generators
    
    that were used for caching
    Removed the caching aspect and preserved the cacheable and moved
    
    the annotation up to the interfaces
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved packages around in swagger-models
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Moved from using deprecated methods from Types
    
    (3348)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Unit tests.
    Preparations for a new merging algorithm. Fixes .hashCode() collisions
    and Synthetic types.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixes for enums.
    General formatting and cleanup
    Added support for nested model references
    
    especially useful for 2D arrays
    Centralized model ref creation and removed dupication
    Added model ref interface
    
    Also added two dimensional array substitution support
    Added new test types to catch changes in prep for this fix
    #801 #810 Add proper support for enums in response values and in schema objects
    Adding more instrumentation around models and property inference
    
    To assist with problems like #688
    Shorted the static imports and formatting
    Made the modelRef property of the ModelProperty a computed value
    
    Extracted the common logic to infer the modelRef given a resolved type. Also
    When the type was altered via the @ApiModelProperty annotation the model ref
    did not reflect the newly inferred model type.
    
    This fix makes removes the redundancy in the type and the modelRef attribute
    
    fixes #666
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Removed the asResolved method and inlined all the invocations
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed the broken build
    [#498] add support for generic type naming strategies
    [#436] Enum values with JsonValue are not supported
    
    fixes #436
    [#469] Fixed the arrays inside generics problem
    
    fixes #469
    Reformatting code to meet coding style
    Fixed the problem where properties that are of type Map<?,?> are not rendered correctly
    
    fixes #312
    More coverage related smells
    Fix Enum allowable list does not display in the Swagger Model
    Include array element type for method parameters
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Updated spring dependencies to spring 5.2.0 and spring boot 2.2.0, fixed changed interfaces
    New merging algorithm that can handle cyclic model references.
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixes and coverage.
    Bug fixes.
    Moving logic from TypeNameAdapter to TypeNameExtractor.
    Fixes
    fixes for name extractor
    Changes for extracting type names
    Added algorithm to compare model names.
    Fix all the TypeNameExtractor constructors
    
    (1829)
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    Broke the cyclic dependency where the TypeNameExtractor depends on schema plugin manager
    
    This way the type name extract is responsible for its own plugins
    
    related to #702
    Shorted the static imports and formatting
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for Map types in the models
    Made parameter use modelRef fully rather than just for the item types
    Renamed the items property to modelRef, that way it can be repurposed
    
    for modelling collections as well as regular types. That way we wont need to do gymnastics to
    support swagger 2.0
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    Added support for map reference types
    
    (2022)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for Map types in the models
    Added null check
    
    This prevents NPE
    
    (2022)
    Added support for collection types
    
    (2022)
    Fixed rendering of Collection<T>
    
    (1623)
    Fixed codacity indicated error prone code
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for Map types in the models
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix for controller methods returning non-generic List type causes initialization error
    
     fixes #389
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Remove usage of generic wildcard type
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed the build and also fixed depcration warnings
    Schema adjustments based on rendering the contract tests
    
    (2022)
    Added support for effective model
    
    The idea behind effective models is to capture whether a model actually used the discriminators or not. For e.g. if a model is marked with a view discriminator and the dependent model does not have any effect of the discriminator as in the model is isomorphic with respect to the view discriminator then we remove the view from the effective model key. This is useful, in this example, to distinguish when naming a model if it should have `View` as a prefix or not in this case.
    
    (2022)
    Process sets rather than lists
    
    This way we process types only once
    
    (2022)
    Fix for endless recursion #2407.
    Fix for #2407.
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrated from guava Predicat
    migrate from guava Predicate
    migrate from guava lists
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Added support to pull in subclasses as dependent models
    
    (1151)
    (868)
    Added support to use synthetic models when available
    
    (2311)
    Added support for resolving Map types specifically
    
    Because HashMaps do not have getters/setters that determine key or value types, and since closed generic types do not have type parameters, this lead to the bug that certain types in nested Map types would not show up in the model definitions.
    
    (2203)
    Fixed ModelDependencyProvider, ModelProvider ParameterDataTypeReader
    
    Usages of the new enum type determiner did not propogate to tests.
    
    (1829)
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    Added MultipartFile as a primitive swagger base type
    
    This so that when we have a parameter of type MultipartFile[] we want it
    to not try and create a model for this type.
    
    In the long term this primitive needs to be configured per format.
    
    fixes #1282
    bug fix : missing models when return type is 'array'
    Fixed problem rendering properties with nested maps
    
    When encountering properties which are Map of Maps only the value map
    needs to be part of the model depdendencies. This fix skips the model that
    represents the map of maps so that the un-used models need not be part
    of the schema definition
    
    fixes #1186
    Removed the caching aspect and preserved the cacheable and moved
    
    the annotation up to the interfaces
    Added caching decorators for the models, model properties and dependencies
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Since this is part of a dot release, backporting it to use spring 4.0.9 where
    
    cacheables do not expose a keyGenerator annotation attribute
    
    related to #682
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Added optimized model properties provider
    
    fixes #806
    Refactored the package name for property provider
    
    related to #806
    Adding more instrumentation around models and property inference
    
    To assist with problems like #688
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Reduced code complexity in ModelDependencyProvider
    Added support for rendering maps in swagger 2
    Added support for Map types in the models
    [#538] Implemented the mappers
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved packages around in swagger-models
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Changes to accept the pr
    
    - Moved Accessor to the right package and changed visibilityi.
    - Changed the ObjectMapper back to how it was currently being set in a
      bean PostConstruct.
    - Renamed PropertyUtils to BeanPropertyDefinitions to match guava
      convention
    - Changed Qualifier to default for the ModepPropertiesProvider bean
    - Re-instated the JacksonSwaggerSupport foo to set the ObjectMapper in
      the PostConstruct
    Supporting constructor params as fields
    Property provider was flipped with respect to the return types vs parameters
    
    fixes #322
    - Also fix unnecessary creation of Type Resolver #319
    Autowired the ObjectMapper ...
    
    Set up components that have the object mapper wired in as a dependency
    
    fixes #272
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Changed signature to return only the dependent ModelSpecifications. We dont care about the resolved types
    
    (2022)
    Added tests for caching
    
    (2022)
    Preparations for a new merging algorithm. Fixes .hashCode() collisions
    and Synthetic types.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava Cache and removed Guava
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixed caching implementations such that exceptions are handled
    
    Logged the unhandled errrors as a warning and return empty sets and lists or in the
    case of Optionals return absent
    
    fixes #1193
    Added caching decorators for the models, model properties and dependencies
    fixup! Renamed classes
    jackson-dataformat-xml plugin springfox#2734
    Initial model refactoring
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    migrate from guava Cache and removed Guava
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixed caching implementations such that exceptions are handled
    
    Logged the unhandled errrors as a warning and return empty sets and lists or in the
    case of Optionals return absent
    
    fixes #1193
    Updated the tests and removed unused key generators
    
    that were used for caching
    Added caching decorators for the models, model properties and dependencies
    Refactored the view provider plugin
    
    (2022)
    Added support for simple types and complex types
    
    (2022)
    Fixes for ViewPlugin.
    JsonView is not supported for ModelAttributes
    Code cleanings.
    Renamed projection into a view.
    Optimization of ProjectionProviderPlugin.
    Added projection support for ModelAttribute parameters.
    Improvements for projections plugin.
    Initial support for projections.
    Registered the SyntheticModelProviderPllugin
    
    We register with the schema plugin manager and also created methods
    to help with handling generating the models/properties and dependent
    model types.
    
    (2311)
    Fixes for ViewPlugin.
    Renamed projection into a view.
    Added projection support for ModelAttribute parameters.
    Improvements for projections plugin.
    Initial support for projections.
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Fixed the bug where the caching was incorrect for operations without
    
    specific http method
    - Renamed the configuration class
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Modularized the configuration
    
    - Also added bean ordering so that spring plugins are always run before the swagger plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Updated javadocs that are preventing publishing
    
    related to #2504
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Initial model refactoring
    Updated the tests and removed unused key generators
    
    that were used for caching
    Removed the caching aspect and preserved the cacheable and moved
    
    the annotation up to the interfaces
    Refactored the package name for property provider
    
    related to #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    [#538] Moved packages around in swagger-models
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Changes to accept the pr
    
    - Moved Accessor to the right package and changed visibilityi.
    - Changed the ObjectMapper back to how it was currently being set in a
      bean PostConstruct.
    - Renamed PropertyUtils to BeanPropertyDefinitions to match guava
      convention
    - Changed Qualifier to default for the ModepPropertiesProvider bean
    - Re-instated the JacksonSwaggerSupport foo to set the ObjectMapper in
      the PostConstruct
    Supporting constructor params as fields
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    migrated guava Function
    Added overload to account for name prefix
    
    (2182)
    Added jackson 2.6 and 2.7 support
    
    2.7 introduced a breaking change. Added a check to see if 2.6 or 2.7 is in the path and instantiate the POJOPropertyBuilder using the appropriate constructor
    Discovered bugs related to unwrapping fields/getters and setters
    
    Fixed the problem and updated the tests to improve coverage
    Filter properties that are marked as ignorable
    
    fixes #752
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Caught up with all the compatible versions
    the property providers use the naming strategy in both bean properties as well as fields
    
    closes #413
    Bean properties now support the property names as expected by the jackson serialization runtime
    
    Closes #400
    Formatting cleanup
    More coverage related smells
    Changes to accept the pr
    
    - Moved Accessor to the right package and changed visibilityi.
    - Changed the ObjectMapper back to how it was currently being set in a
      bean PostConstruct.
    - Renamed PropertyUtils to BeanPropertyDefinitions to match guava
      convention
    - Changed Qualifier to default for the ModepPropertiesProvider bean
    - Re-instated the JacksonSwaggerSupport foo to set the ObjectMapper in
      the PostConstruct
    Supporting constructor params as fields
    Fixed reliability sonar bugs
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Schema adjustments based on rendering the contract tests
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrating from guava Strings
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Conditionally load the xml plugins
    
    In JDK 9+ jaxb is not part of the runtime. So we need to check if jaxb
    is even on the classpath before pullingin a bean defnition.
    
    (2226)
    add Bean Property Definition presence check
    Added support for xml traits in properties
    
    Modified the sample contract test and also handled the case where names and namespaces were not specified.
    
    (1907)
    Fixed formatting
    
    (3373)
    Removed unused method
    
    (3373)
    Formatting change
    
    (3348)
    Fixed reliability sonar bugs
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Schema adjustments based on rendering the contract tests
    
    (2022)
    Fixed short circuiting the property is not in active view
    
    (2022)
    Renamed implements EnumerationFacetBuilder -> EnumerationElementFacetBuilder
    
    (2022)
    Added property name to the property specification builder constructor
    
    (2022)
    Refactored to use the shallow ModelSpecificationProvider
    
    (2022)
    Added support for all the bean validation facets and udpated the tests
    
    (2022)
    Renamed the builder properties
    
    Reformatted the code and added check style suppressions
    
    (2022)
    Removed hard coded names of types
    
    (2022)
    Added support for enumerations
    
    (2022)
    Reformatted and removed superfluous finals
    
    (2022)
    Extracted commonly used method
    
    (2022)
    Removed unused method
    
    (2022)
    Added support for collection types
    
    (2022)
    Added support for simple types and complex types
    
    (2022)
    Fixed simple type specification
    
    (2022)
    WIP 3 compiled successfully
    Initial model refactoring
    Merge fix
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    clean up static imports
    migrated from guava equivalence
    removed another test from FunctionContractSpec
    migrate from guava Predicate
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    migrate from guava lists
    migrated guava Function
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Added support to use synthetic models when available
    
    (2311)
    Reformatting to match style guide
    
    (2311)
    Added support for adding name prefixes to unwrapped types
    
    This can also be applied to nested types... e.g. prefix1_prefix2_...propertyName. This change is thanks to implementation by @jcarnus.
    
    (2182)
    Formatting changes
    
    (2182)
    Fixes for Jackson 2.9
    #1773 jackson-binding:2.9 fix for setterless properties being picked up
    Fixes for enums.
    Coverage.
    Coverage and fixes.
    Checkstyle fixes
    JsonView is not supported for ModelAttributes
    Code cleanings.
    Renamed projection into a view.
    Optimization of ProjectionProviderPlugin.
    Added projection support for ModelAttribute parameters.
    Initial support for projections.
    Used the type factory in the serializer
    
    Rather than use the hardcoded instantiated type factory we use the one
    that comes with the serializer and the de-serializer
    
    (1623)
    Fixed unwrapping behavior
    
    Instead of being strict and checking the field or accessor directly
    for annotations, we delegate to the jackson databinding infrastructure
    to tell us if a property is unwrapped or not.
    
    (1740)
    Added support for @JsonFormat annotation
    
    fixes #1021
    Added support for isRequired property from jackson
    
    fixes #1294
    General formatting and cleanup
    Fixes a bug where bidirectional recursive types end up with missing properties
    
    Before this change we ended up ignoring types that were seen. This should not be the case. We need to handle all the properties seen or unseen, so that properties are reflected correctly in the rendered schema. This change is so that we ignore ONLY the types that are ignorable.
    
    (1196)
    Updated the method comparison to not be naive
    
    Currently it checks for method equality, but this can sometimes not be correct as the resolved method and the target of comparison might be on different classes in the class inheritance chain.
    
    fixes #1258
    Added native support for Optional types
    
    resolves #1199
    Fixed issue where Resource<X> where X extends ResourceSupport crashes
    
    with duplicate key violation. This is because Resource itself is a subclass of
    ResourceSupport. This creating two link properties especially for return types. This
    is a side effect of the alternate type rule that substitutes Resource<T>
    
    fixes #1125
    Fixed to better handle indeterminate primary member
    
    when there are multiple accessors or mutators the parsing of model properties crashes... atleast as of jackson 2.6.x
    
    fixes #1129
    Reformatting
    Removed unused variables and method calls
    Removed the caching aspect and preserved the cacheable and moved
    
    the annotation up to the interfaces
    Added caching decorators for the models, model properties and dependencies
    Discovered bugs related to unwrapping fields/getters and setters
    
    Fixed the problem and updated the tests to improve coverage
    Updated the model property resolution to use the accessors/factory methods
    
    and constructors from the bean that jackson infers. This fixes a problem where scala
    classes do not participate in the property inference. This also implements the long
    standing feature request to support constructor and @JsonCreator annotated factory methods
    that are the primary source for properties.
    Fixes problem where internal models marked hidden are not getting filtered
    
    fixes #873
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Since this is part of a dot release, backporting it to use spring 4.0.9 where
    
    cacheables do not expose a keyGenerator annotation attribute
    
    related to #682
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Formatting
    Added optimized model properties provider
    
    fixes #806
    Schema adjustments based on rendering the contract tests
    
    (2022)
    Added discriminators to model key
    
    (2022)
    Extracted commonly used method
    
    (2022)
    Polished the builders to not expose constructors
    
    (3351)
    Polished the builder apis to be fluent
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Converted all builders to be consumer based
    
    (2022)
    Schema adjustments based on rendering the contract tests
    
    (2022)
    Code reformatting and cleanup
    
    (2022)
    Added model key as a required attribute of a compound model
    
    (2022)
    Removed source identifier as a required attribute to construct a model
    
    (2022)
    Added discriminators to model key
    
    (2022)
    Extracted shallow model specification creator
    
    This is a light weight provider or model specification without having to parse the properties
    
    (2022)
    clean up static imports
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Reduced logging chatter related to instantiating jackson 2.6 types
    
    fixes #2252
    Log jackson 2.6 error as debug rather than error
    
    fixes #1253
    Added jackson 2.6 and 2.7 support
    
    2.7 introduced a breaking change. Added a check to see if 2.6 or 2.7 is in the path and instantiate the POJOPropertyBuilder using the appropriate constructor
    Changes to allow for readOnly property in swagger 2
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved packages around in swagger-models
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#514] Support ordering supplied via ApiModelProperty.position()
    
    resolves #514
    Normalized spaces and imports
    Supporting constructor params as fields
    Accounts for aliases as a result of JsonProperty annotation
    
    Fixes #320
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Polished the builder apis to be fluent
    Schema adjustments based on rendering the contract tests
    
    (2022)
    Extracted shallow model specification creator
    
    This is a light weight provider or model specification without having to parse the properties
    
    (2022)
    Renamed the builder properties
    
    Reformatted the code and added check style suppressions
    
    (2022)
    Extracted commonly used method
    
    (2022)
    Added support for collection types
    
    (2022)
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Added support for vendor extensions on Parameters and ResponseModels
    
    fixes #1137
    Added support for @JsonFormat annotation
    
    fixes #1021
    Added support for isRequired property from jackson
    
    fixes #1294
    Added native support for Optional types
    
    resolves #1199
    Updated the model property resolution to use the accessors/factory methods
    
    and constructors from the bean that jackson infers. This fixes a problem where scala
    classes do not participate in the property inference. This also implements the long
    standing feature request to support constructor and @JsonCreator annotated factory methods
    that are the primary source for properties.
    Changes to allow for readOnly property in swagger 2
    Shorted the static imports and formatting
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved packages around in swagger-models
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#514] Support ordering supplied via ApiModelProperty.position()
    
    resolves #514
    [#436] Enum values with JsonValue are not supported
    
    fixes #436
    Bean properties now support the property names as expected by the jackson serialization runtime
    
    Closes #400
    Support for naming strategies
    Enum values should trump ApiModeProperty annotations
    
    - Cleanup to move inline Functions to a Utility class
    Honoring ApiModelProperty--author=fgaule <federico.gaule@gmail.com>
    Remove usage of generic wildcard type
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava Predicate
    migrate from guava lists
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Uprev dependency versions to the latest
    
    (1623)
    Updated the model property resolution to use the accessors/factory methods
    
    and constructors from the bean that jackson infers. This fixes a problem where scala
    classes do not participate in the property inference. This also implements the long
    standing feature request to support constructor and @JsonCreator annotated factory methods
    that are the primary source for properties.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Bean properties now support the property names as expected by the jackson serialization runtime
    
    Closes #400
    Fixed reliability sonar bugs
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Schema adjustments based on rendering the contract tests
    
    (2022)
    checkstyle fix
    jackson-dataformat-xml plugin springfox#2734
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    clean up static imports
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Formatting changes
    
    (2182)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Bean properties now support the property names as expected by the jackson serialization runtime
    
    Closes #400
    migrated from guava equivalence
    removed another test from FunctionContractSpec
    Updated the method comparison to not be naive
    
    Currently it checks for method equality, but this can sometimes not be correct as the resolved method and the target of comparison might be on different classes in the class inheritance chain.
    
    fixes #1258
    Extracted shallow model specification creator
    
    This is a light weight provider or model specification without having to parse the properties
    
    (2022)
    Renamed the builder properties
    
    Reformatted the code and added check style suppressions
    
    (2022)
    Added support for map reference types
    
    (2022)
    Extracted commonly used method
    
    (2022)
    Added support for collection types
    
    (2022)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Initial model refactoring
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    migrate from guava Cache and removed Guava
    migrate from guava lists
    Fixed caching implementations such that exceptions are handled
    
    Logged the unhandled errrors as a warning and return empty sets and lists or in the
    case of Optionals return absent
    
    fixes #1193
    Added caching decorators for the models, model properties and dependencies
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Supporting constructor params as fields
    Autowired the ObjectMapper ...
    
    Set up components that have the object mapper wired in as a dependency
    
    fixes #272
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Added support for @JsonFormat annotation
    
    fixes #1021
    Added support for isRequired property from jackson
    
    fixes #1294
    Shorted the static imports and formatting
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    the property providers use the naming strategy in both bean properties as well as fields
    
    closes #413
    Refactored to seperate responsibility from OperationParameterReader
    Bean properties now support the property names as expected by the jackson serialization runtime
    
    Closes #400
    Support for naming strategies
    Honoring ApiModelProperty--author=fgaule <federico.gaule@gmail.com>
    Supporting constructor params as fields
    Accounts for aliases as a result of JsonProperty annotation
    
    Fixes #320
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava Predicate
    migrate from guava lists
    Migraiting from FluentIterable
    Shortened the static imports
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Changes to accept the pr
    
    - Moved Accessor to the right package and changed visibilityi.
    - Changed the ObjectMapper back to how it was currently being set in a
      bean PostConstruct.
    - Renamed PropertyUtils to BeanPropertyDefinitions to match guava
      convention
    - Changed Qualifier to default for the ModepPropertiesProvider bean
    - Re-instated the JacksonSwaggerSupport foo to set the ObjectMapper in
      the PostConstruct
    Supporting constructor params as fields
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrating from guava Strings
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Updated the model property resolution to use the accessors/factory methods
    
    and constructors from the bean that jackson infers. This fixes a problem where scala
    classes do not participate in the property inference. This also implements the long
    standing feature request to support constructor and @JsonCreator annotated factory methods
    that are the primary source for properties.
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#494] Add support for JsonGetter and JsonSetter annotations
    
    resolves #494
    Normalized spaces and imports
    Changes to accept the pr
    
    - Moved Accessor to the right package and changed visibilityi.
    - Changed the ObjectMapper back to how it was currently being set in a
      bean PostConstruct.
    - Renamed PropertyUtils to BeanPropertyDefinitions to match guava
      convention
    - Changed Qualifier to default for the ModepPropertiesProvider bean
    - Re-instated the JacksonSwaggerSupport foo to set the ObjectMapper in
      the PostConstruct
    Supporting constructor params as fields
    Accounts for aliases as a result of JsonProperty annotation
    
    Fixes #320
    Removed worked around to account for classmate bug
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Added support for @JsonFormat annotation
    
    fixes #1021
    Added support for isRequired property from jackson
    
    fixes #1294
    Fixed the classmate bug for recursively generic types
    
    The the problem was the classmate would resolve Resource#links as List<Link<String>> rather than List<Link> causing the type substitution to not work
    
    fixes #1440
    Removed unused variables and method calls
    Shortened the static imports
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    the property providers use the naming strategy in both bean properties as well as fields
    
    closes #413
    Bean properties now support the property names as expected by the jackson serialization runtime
    
    Closes #400
    Support for naming strategies
    Honoring ApiModelProperty--author=fgaule <federico.gaule@gmail.com>
    Supporting constructor params as fields
    Fixed #374 - Fixed ApiModelProperty code to cover both getter/setter
    
    * Removed ApiModelProperty description extraction from BeanModelProperty
    * Added ApiModelProperty desc code to DefaultModelPropertiesProvider
    * ApiModelProperty annotation code now covers getter and setter of a property
    * Updated BeanModelPropertySpec for new constructor
    Accounts for aliases as a result of JsonProperty annotation
    
    Fixes #320
    Fix to support for alternates in model propertiesi
    
    fixes #315
    - Also fix unnecessary creation of Type Resolver #319
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed the issue where the parameter requiredness was incorrect
    
    Delegates to the base jackson property to tell us if a parameter property is required or not
    
    fixes #1727
    Added support for @JsonFormat annotation
    
    fixes #1021
    Added support for isRequired property from jackson
    
    fixes #1294
    Added native support for Optional types
    
    resolves #1199
    Updated the model property resolution to use the accessors/factory methods
    
    and constructors from the bean that jackson infers. This fixes a problem where scala
    classes do not participate in the property inference. This also implements the long
    standing feature request to support constructor and @JsonCreator annotated factory methods
    that are the primary source for properties.
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Converted all builders to be consumer based
    
    (2022)
    Schema adjustments based on rendering the contract tests
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixes for tests.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrating from guava Strings
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Added support for inferring Jackson based inheritance
    
    This is just limited supports of explicitly configured models, and doesnt take into account global default configuration in object mappers.
    
    (1151)
    (868)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed the build and also fixed depcration warnings
    Merging master
    Initial model refactoring
    #2932 - Removed trailing space
    Updated spring dependencies to spring 5.2.0 and spring boot 2.2.0, fixed changed interfaces
    clean up static imports
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Registered the SyntheticModelProviderPllugin
    
    We register with the schema plugin manager and also created methods
    to help with handling generating the models/properties and dependent
    model types.
    
    (2311)
    Fixes for ViewPlugin.
    Renamed projection into a view.
    Added projection support for ModelAttribute parameters.
    Broke the cyclic dependency where the TypeNameExtractor depends on schema plugin manager
    
    This way the type name extract is responsible for its own plugins
    
    related to #702
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Renamed plugin manager methods to be consistent with the other plugin managers
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Fixed the temporal coupling int the name provider plugin
    
    Now the default name provider is no longer a component but truly a default type name provider. If there are no plugins registered the default is used
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved packages around in swagger-models
    [#538] Renamed the schema plugins
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted all builders to be consumer based
    
    (2022)
    Schema adjustments based on rendering the contract tests
    
    (2022)
    jackson-dataformat-xml plugin springfox#2734
    Updated copyright year
    
    (1082)
    Moved the package for the XmlModelPlugin
    
    (1152)
    Conditionally load the xml plugins
    
    In JDK 9+ jaxb is not part of the runtime. So we need to check if jaxb
    is even on the classpath before pullingin a bean defnition.
    
    (2226)
    Fixed rendering of xml examples
    
    The XmlRootElement wasnt taken into consideration when figuring out the xml root element name
    
    (2230)
    Added support for xml traits in properties
    
    Modified the sample contract test and also handled the case where names and namespaces were not specified.
    
    (1907)
    Added XmlModelPlugin to infer xml traits on models
    
    (1907)
    Bumped up the coverage for swagger-common
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Moved common readers to the swagger common module
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved packages around in swagger-models
    [#538] Renamed the schema plugins
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    Added the json ignores model plugin
    
    Also added backing tests that demonstrate this feature
    
    (2613)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted all builders to be consumer based
    
    (2022)
    Schema adjustments based on rendering the contract tests
    
    (2022)
    jackson-dataformat-xml plugin springfox#2734
    Updated copyright year
    
    (1082)
    Moved the package for the XmlModelPlugin
    
    (1152)
    Conditionally load the xml plugins
    
    In JDK 9+ jaxb is not part of the runtime. So we need to check if jaxb
    is even on the classpath before pullingin a bean defnition.
    
    (2226)
    Fixed rendering of xml examples
    
    The XmlRootElement wasnt taken into consideration when figuring out the xml root element name
    
    (2230)
    Added support for xml traits in properties
    
    Modified the sample contract test and also handled the case where names and namespaces were not specified.
    
    (1907)
    Added XmlModelPlugin to infer xml traits on models
    
    (1907)
    Bumped up the coverage for swagger-common
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Moved common readers to the swagger common module
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved packages around in swagger-models
    [#538] Renamed the schema plugins
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted all builders to be consumer based
    
    (2022)
    Schema adjustments based on rendering the contract tests
    
    (2022)
    Updated copyright year
    
    (1082)
    Moved the package for the XmlModelPlugin
    
    (1152)
    Conditionally load the xml plugins
    
    In JDK 9+ jaxb is not part of the runtime. So we need to check if jaxb
    is even on the classpath before pullingin a bean defnition.
    
    (2226)
    Fixed rendering of xml examples
    
    The XmlRootElement wasnt taken into consideration when figuring out the xml root element name
    
    (2230)
    Added support for xml traits in properties
    
    Modified the sample contract test and also handled the case where names and namespaces were not specified.
    
    (1907)
    Added XmlModelPlugin to infer xml traits on models
    
    (1907)
    Bumped up the coverage for swagger-common
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Moved common readers to the swagger common module
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved packages around in swagger-models
    [#538] Renamed the schema plugins
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Upgraded the dependencies
    
    Also fixes as a result of upgrading asciidoctor
    
    (2022)
    migrate from guava Cache and removed Guava
    updating java to 1.8 and guava version that support 1.8
    Use Guava 20.0 throughout the project
    Uprev dependency versions to the latest
    
    (1623)
    Upgraded libraries before working on the story
    
    (1621)
    Upgradle to gradle 2.14
    Upgrade to gradle 2.8
    
    - Update spock version in buildSrc project
    - move memory options to gradle.properties
    Refactoring the release plugin so that it infers the version without
    
    needing to modify source control. Introduced two concepts to be part of
    the CD build workflow:
    
    First idea to use the git annotated tags as a way to generate version
    numbers, rather than a version.properties file. git describe and git
    describe --exact-match to the rescue.
    
    Git already has an idea of generating serial predictable commit
    descriptions (build numbers) given an annotated tag for e.g. the
    currently the version according to git in this branch is
    2.0.0-62-g8433c2b it has the format 2.0.0-<count>-g<sha> where:
    
    - 2.0.0 is the annotated tag
    - count is the number of commits after the annotated tag (62 commits since
    2.0.0!!)
    - sha is the commit sha. (8433c2b is the current sha)
    
    Second idea I introduced is a way to infer the snapshot build/ release
    build using the concept of a build number suffix. Rather than change the
    version decorator used.
    
    resolves #759
    closes #760
    Initial release work
    Release task version bumping
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    More release related tasks
    - Sets apps version to 'dangerous' for release testing
    - Saves version post release
    - Adds git/release tasks
    Fixed buildSrc package issue
    Initial release work
    'Releasing
    Fixed the references to ext properties and fixed tests
    Replaced logger with gradle native logger
    Re-invigorated the file based versioning approach
    Updated the contents of the version file to the latest version
    Refactoring the release plugin so that it infers the version without
    
    needing to modify source control. Introduced two concepts to be part of
    the CD build workflow:
    
    First idea to use the git annotated tags as a way to generate version
    numbers, rather than a version.properties file. git describe and git
    describe --exact-match to the rescue.
    
    Git already has an idea of generating serial predictable commit
    descriptions (build numbers) given an annotated tag for e.g. the
    currently the version according to git in this branch is
    2.0.0-62-g8433c2b it has the format 2.0.0-<count>-g<sha> where:
    
    - 2.0.0 is the annotated tag
    - count is the number of commits after the annotated tag (62 commits since
    2.0.0!!)
    - sha is the commit sha. (8433c2b is the current sha)
    
    Second idea I introduced is a way to infer the snapshot build/ release
    build using the concept of a build number suffix. Rather than change the
    version decorator used.
    
    resolves #759
    closes #760
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    Implementing pre-release tasks
    More release related tasks
    - Sets apps version to 'dangerous' for release testing
    - Saves version post release
    - Adds git/release tasks
    Fixed buildSrc package issue
    Refactoring the release plugin so that it infers the version without
    
    needing to modify source control. Introduced two concepts to be part of
    the CD build workflow:
    
    First idea to use the git annotated tags as a way to generate version
    numbers, rather than a version.properties file. git describe and git
    describe --exact-match to the rescue.
    
    Git already has an idea of generating serial predictable commit
    descriptions (build numbers) given an annotated tag for e.g. the
    currently the version according to git in this branch is
    2.0.0-62-g8433c2b it has the format 2.0.0-<count>-g<sha> where:
    
    - 2.0.0 is the annotated tag
    - count is the number of commits after the annotated tag (62 commits since
    2.0.0!!)
    - sha is the commit sha. (8433c2b is the current sha)
    
    Second idea I introduced is a way to infer the snapshot build/ release
    build using the concept of a build number suffix. Rather than change the
    version decorator used.
    
    resolves #759
    closes #760
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Fixed build properties for plugin
    Renamed springdox package to springfox
    Implementing pre-release tasks
    Fixed typo (#3161)
    allow importing into eclipse
    Standardized release plugin logging
    
    #2350
    Improved build logs
    
    #2350
    Fixed bug with versioning in files
    
    (cherry picked from commit d8df2416aeb0a1583b79c4e3b0e03b6b26977b82)
    'Releasing
    Refactored the versioning to be more explicit
    Refactoring the release plugin so that it infers the version without
    
    needing to modify source control. Introduced two concepts to be part of
    the CD build workflow:
    
    First idea to use the git annotated tags as a way to generate version
    numbers, rather than a version.properties file. git describe and git
    describe --exact-match to the rescue.
    
    Git already has an idea of generating serial predictable commit
    descriptions (build numbers) given an annotated tag for e.g. the
    currently the version according to git in this branch is
    2.0.0-62-g8433c2b it has the format 2.0.0-<count>-g<sha> where:
    
    - 2.0.0 is the annotated tag
    - count is the number of commits after the annotated tag (62 commits since
    2.0.0!!)
    - sha is the commit sha. (8433c2b is the current sha)
    
    Second idea I introduced is a way to infer the snapshot build/ release
    build using the concept of a build number suffix. Rather than change the
    version decorator used.
    
    resolves #759
    closes #760
    Updated the build instructions
    
    Also updated the bintray credentials check
    
    (2394)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    Publishig snapshots on successful travisci builds
    Implementing pre-release tasks
    More release related tasks
    - Sets apps version to 'dangerous' for release testing
    - Saves version post release
    - Adds git/release tasks
    Fixed buildSrc package issue
    Initial release work
    Added more logging to the bump and tag task
    
    Also allowed it to run when forced
    removing MoreObjects, toString and firstNonNull
    Fixed the release tag generation
    
    Also changed the order in which the new versions are persisted in the database
    Simplified the release tag calculation
    Fixed bug with versioning in files
    
    (cherry picked from commit d8df2416aeb0a1583b79c4e3b0e03b6b26977b82)
    'Releasing
    Refactored the versioning to be more explicit
    Updated the contents of the version file to the latest version
    Updated build to replace deprecated guava api also added logging
    Refactoring the release plugin so that it infers the version without
    
    needing to modify source control. Introduced two concepts to be part of
    the CD build workflow:
    
    First idea to use the git annotated tags as a way to generate version
    numbers, rather than a version.properties file. git describe and git
    describe --exact-match to the rescue.
    
    Git already has an idea of generating serial predictable commit
    descriptions (build numbers) given an annotated tag for e.g. the
    currently the version according to git in this branch is
    2.0.0-62-g8433c2b it has the format 2.0.0-<count>-g<sha> where:
    
    - 2.0.0 is the annotated tag
    - count is the number of commits after the annotated tag (62 commits since
    2.0.0!!)
    - sha is the commit sha. (8433c2b is the current sha)
    
    Second idea I introduced is a way to infer the snapshot build/ release
    build using the concept of a build number suffix. Rather than change the
    version decorator used.
    
    resolves #759
    closes #760
    Fixed typo
    Fixed issues with rendering the base path
    
    (2022)
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Publishing pet store as its used by the springfox-demos project
    Added initial configuration support for spring-data-rest
    Version not propogating to the bintray publish
    
    - Adding publish version to the configured publications
    - Refactored the subprojects build
    Related to #759
    Added a Builder to Swagger2MarkupResultHandler.
    Added PropertiesLoaderUtils from Spring.
    Cleaned gradle dependencies.
    
    Fixes build issues
    
    Building with java 1.7
    
    Removing redundant code
    
    Removed DocumentationProperties inner class.
    Added debug logging and error logging.
    Supports AsciiDoc generation via MockMVC and Swagger2Markup
    Adds a module for documented spring configurations
    Publishing javadoc
    Initial release work
    Standardized release plugin logging
    
    #2350
    'Releasing
    Added support for dryRun for check tasks
    Adds task to verify release branch
    Adding some release related tasks
    handling order issues and equivalence equals
    all tests past
    fixup! Updated the credentials check
    fixup! Updated the credentials check
    Reorganized the task graph
    
    (2394)
    Updated the credentials check
    
    Also wired the check to the release task
    
    (2394)
    Updated the build instructions
    
    Also updated the bintray credentials check
    
    (2394)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    Publishig snapshots on successful travisci builds
    Implementing pre-release tasks
    More release related tasks
    - Sets apps version to 'dangerous' for release testing
    - Saves version post release
    - Adds git/release tasks
    Fixed buildSrc package issue
    Initial release work
    Standardized release plugin logging
    
    #2350
    'Releasing
    Added support for dryRun for check tasks
    Adding some release related tasks
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    Cleaning up snapshot publishing tasks
    - Turns off travisci caching to fix build (likely cause cached .gradle dir)
    Implementing pre-release tasks
    More release related tasks
    - Sets apps version to 'dangerous' for release testing
    - Saves version post release
    - Adds git/release tasks
    Fixed buildSrc package issue
    Initial release work
    Standardized release plugin logging
    
    #2350
    Improved build logs
    
    #2350
    'Releasing
    Added dry run support for document generation
    Refactored the versioning to be more explicit
    Fixed the versioning strategies to use project.exec instead
    Eliminate the tag duplicates
    
    fixes #771
    Added little more logging around BumpAndTagTasks as it doesnt tag currently
    Refactoring the release plugin so that it infers the version without
    
    needing to modify source control. Introduced two concepts to be part of
    the CD build workflow:
    
    First idea to use the git annotated tags as a way to generate version
    numbers, rather than a version.properties file. git describe and git
    describe --exact-match to the rescue.
    
    Git already has an idea of generating serial predictable commit
    descriptions (build numbers) given an annotated tag for e.g. the
    currently the version according to git in this branch is
    2.0.0-62-g8433c2b it has the format 2.0.0-<count>-g<sha> where:
    
    - 2.0.0 is the annotated tag
    - count is the number of commits after the annotated tag (62 commits since
    2.0.0!!)
    - sha is the commit sha. (8433c2b is the current sha)
    
    Second idea I introduced is a way to infer the snapshot build/ release
    build using the concept of a build number suffix. Rather than change the
    version decorator used.
    
    resolves #759
    closes #760
    Adds task to update docs for released versions
    [#612] Release tasks WIP
    Clean up release tasks
    Release task version bumping
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    Publishig snapshots on successful travisci builds
    Implementing pre-release tasks
    More release related tasks
    - Sets apps version to 'dangerous' for release testing
    - Saves version post release
    - Adds git/release tasks
    Fixed buildSrc package issue
    Initial release work
    Adds intermediary tasks to release group
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    Implementing pre-release tasks
    More release related tasks
    - Sets apps version to 'dangerous' for release testing
    - Saves version post release
    - Adds git/release tasks
    Fixed buildSrc package issue
    Initial release work
    Added the bump task back
    Standardized release plugin logging
    
    #2350
    'Releasing
    Refactored the versioning to be more explicit
    Changed all the dry run messages to warning
    Fixed dryRun of pushing release tag to origin
    Fixed the versioning strategies to use project.exec instead
    Removed suprious quotes in the release bumping and tagging task
    updated the BumpAndTag and Release tasks to fix errors
    Push the release tag explicitly
    
    related to #759
    Refactoring the release plugin so that it infers the version without
    
    needing to modify source control. Introduced two concepts to be part of
    the CD build workflow:
    
    First idea to use the git annotated tags as a way to generate version
    numbers, rather than a version.properties file. git describe and git
    describe --exact-match to the rescue.
    
    Git already has an idea of generating serial predictable commit
    descriptions (build numbers) given an annotated tag for e.g. the
    currently the version according to git in this branch is
    2.0.0-62-g8433c2b it has the format 2.0.0-<count>-g<sha> where:
    
    - 2.0.0 is the annotated tag
    - count is the number of commits after the annotated tag (62 commits since
    2.0.0!!)
    - sha is the commit sha. (8433c2b is the current sha)
    
    Second idea I introduced is a way to infer the snapshot build/ release
    build using the concept of a build number suffix. Rather than change the
    version decorator used.
    
    resolves #759
    closes #760
    [#612] Release tasks WIP
    Clean up release tasks
    Release task version bumping
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    Publishig snapshots on successful travisci builds
    Implementing pre-release tasks
    More release related tasks
    - Sets apps version to 'dangerous' for release testing
    - Saves version post release
    - Adds git/release tasks
    Fixed buildSrc package issue
    Initial release work
    allow importing into eclipse
    'Releasing
    Refactored the versioning to be more explicit
    Fixed the versioning strategies to use project.exec instead
    Refactoring the release plugin so that it infers the version without
    
    needing to modify source control. Introduced two concepts to be part of
    the CD build workflow:
    
    First idea to use the git annotated tags as a way to generate version
    numbers, rather than a version.properties file. git describe and git
    describe --exact-match to the rescue.
    
    Git already has an idea of generating serial predictable commit
    descriptions (build numbers) given an annotated tag for e.g. the
    currently the version according to git in this branch is
    2.0.0-62-g8433c2b it has the format 2.0.0-<count>-g<sha> where:
    
    - 2.0.0 is the annotated tag
    - count is the number of commits after the annotated tag (62 commits since
    2.0.0!!)
    - sha is the commit sha. (8433c2b is the current sha)
    
    Second idea I introduced is a way to infer the snapshot build/ release
    build using the concept of a build number suffix. Rather than change the
    version decorator used.
    
    resolves #759
    closes #760
    Added message back and executing an array
    Fixed the issue running commands with quotes in them
    Added more logging to the bump and tag task
    
    Also allowed it to run when forced
    allow importing into eclipse
    Added better error reporting for the release shell commands
    
    #2394
    Updated the bumping/tagging task
    
    The command used to fail when releasing the software. As a result, decided to add and commit all changed files. This command should be equivalent. Also updated the logging to be accurate.
    
    #2350
    Standardized release plugin logging
    
    #2350
    Fixed the release tag generation
    
    Also changed the order in which the new versions are persisted in the database
    Fixed bug with versioning in files
    
    (cherry picked from commit d8df2416aeb0a1583b79c4e3b0e03b6b26977b82)
    Fixed the build to not generate spurious commmit messages
    'Releasing
    Added logging to the publishing task
    
    Also fixed the next version for release builds
    Fixed the references to ext properties and fixed tests
    Refactored the versioning to be more explicit
    Changed all the dry run messages to warning
    Added tagging support to file based versioning
    
    Extracted common code and refactored the existing code to be more readable
    Re-invigorated the file based versioning approach
    Updated the contents of the version file to the latest version
    Fixed the versioning strategies to use project.exec instead
    Refactoring the release plugin so that it infers the version without
    
    needing to modify source control. Introduced two concepts to be part of
    the CD build workflow:
    
    First idea to use the git annotated tags as a way to generate version
    numbers, rather than a version.properties file. git describe and git
    describe --exact-match to the rescue.
    
    Git already has an idea of generating serial predictable commit
    descriptions (build numbers) given an annotated tag for e.g. the
    currently the version according to git in this branch is
    2.0.0-62-g8433c2b it has the format 2.0.0-<count>-g<sha> where:
    
    - 2.0.0 is the annotated tag
    - count is the number of commits after the annotated tag (62 commits since
    2.0.0!!)
    - sha is the commit sha. (8433c2b is the current sha)
    
    Second idea I introduced is a way to infer the snapshot build/ release
    build using the concept of a build number suffix. Rather than change the
    version decorator used.
    
    resolves #759
    closes #760
    allow importing into eclipse
    'Releasing
    Refactored the versioning to be more explicit
    Added tagging support to file based versioning
    
    Extracted common code and refactored the existing code to be more readable
    Fixed the versioning strategies to use project.exec instead
    Removed suprious quotes in the release bumping and tagging task
    Added error logging to the git versioning strategy persistence
    Added little more logging around BumpAndTagTasks as it doesnt tag currently
    updated the BumpAndTag and Release tasks to fix errors
    Fixed the command to be in a single line
    Refactoring the release plugin so that it infers the version without
    
    needing to modify source control. Introduced two concepts to be part of
    the CD build workflow:
    
    First idea to use the git annotated tags as a way to generate version
    numbers, rather than a version.properties file. git describe and git
    describe --exact-match to the rescue.
    
    Git already has an idea of generating serial predictable commit
    descriptions (build numbers) given an annotated tag for e.g. the
    currently the version according to git in this branch is
    2.0.0-62-g8433c2b it has the format 2.0.0-<count>-g<sha> where:
    
    - 2.0.0 is the annotated tag
    - count is the number of commits after the annotated tag (62 commits since
    2.0.0!!)
    - sha is the commit sha. (8433c2b is the current sha)
    
    Second idea I introduced is a way to infer the snapshot build/ release
    build using the concept of a build number suffix. Rather than change the
    version decorator used.
    
    resolves #759
    closes #760
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    More release related tasks
    - Sets apps version to 'dangerous' for release testing
    - Saves version post release
    - Adds git/release tasks
    Fixed buildSrc package issue
    Initial release work
    Added message back and executing an array
    Fixed the issue running commands with quotes in them
    Added more logging to the bump and tag task
    
    Also allowed it to run when forced
    Added more logging to the bump and tag task
    
    Also allowed it to run when forced
    Unit tests.
    allow importing into eclipse
    Added better error reporting for the release shell commands
    
    #2394
    Updated the bumping/tagging task
    
    The command used to fail when releasing the software. As a result, decided to add and commit all changed files. This command should be equivalent. Also updated the logging to be accurate.
    
    #2350
    Standardized release plugin logging
    
    #2350
    'Releasing
    Refactored the versioning to be more explicit
    Changed all the dry run messages to warning
    Added tagging support to file based versioning
    
    Extracted common code and refactored the existing code to be more readable
    'Releasing
    Refactored the versioning to be more explicit
    Refactoring the release plugin so that it infers the version without
    
    needing to modify source control. Introduced two concepts to be part of
    the CD build workflow:
    
    First idea to use the git annotated tags as a way to generate version
    numbers, rather than a version.properties file. git describe and git
    describe --exact-match to the rescue.
    
    Git already has an idea of generating serial predictable commit
    descriptions (build numbers) given an annotated tag for e.g. the
    currently the version according to git in this branch is
    2.0.0-62-g8433c2b it has the format 2.0.0-<count>-g<sha> where:
    
    - 2.0.0 is the annotated tag
    - count is the number of commits after the annotated tag (62 commits since
    2.0.0!!)
    - sha is the commit sha. (8433c2b is the current sha)
    
    Second idea I introduced is a way to infer the snapshot build/ release
    build using the concept of a build number suffix. Rather than change the
    version decorator used.
    
    resolves #759
    closes #760
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    More release related tasks
    - Sets apps version to 'dangerous' for release testing
    - Saves version post release
    - Adds git/release tasks
    Fixed buildSrc package issue
    Initial release work
    'Releasing
    Refactored the versioning to be more explicit
    Refactoring the release plugin so that it infers the version without
    
    needing to modify source control. Introduced two concepts to be part of
    the CD build workflow:
    
    First idea to use the git annotated tags as a way to generate version
    numbers, rather than a version.properties file. git describe and git
    describe --exact-match to the rescue.
    
    Git already has an idea of generating serial predictable commit
    descriptions (build numbers) given an annotated tag for e.g. the
    currently the version according to git in this branch is
    2.0.0-62-g8433c2b it has the format 2.0.0-<count>-g<sha> where:
    
    - 2.0.0 is the annotated tag
    - count is the number of commits after the annotated tag (62 commits since
    2.0.0!!)
    - sha is the commit sha. (8433c2b is the current sha)
    
    Second idea I introduced is a way to infer the snapshot build/ release
    build using the concept of a build number suffix. Rather than change the
    version decorator used.
    
    resolves #759
    closes #760
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    Implementing pre-release tasks
    More release related tasks
    - Sets apps version to 'dangerous' for release testing
    - Saves version post release
    - Adds git/release tasks
    Fixed buildSrc package issue
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava ImmutableMap, Joiner, Splitter
    migrating from guava Strings
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Refactoring the release plugin so that it infers the version without
    
    needing to modify source control. Introduced two concepts to be part of
    the CD build workflow:
    
    First idea to use the git annotated tags as a way to generate version
    numbers, rather than a version.properties file. git describe and git
    describe --exact-match to the rescue.
    
    Git already has an idea of generating serial predictable commit
    descriptions (build numbers) given an annotated tag for e.g. the
    currently the version according to git in this branch is
    2.0.0-62-g8433c2b it has the format 2.0.0-<count>-g<sha> where:
    
    - 2.0.0 is the annotated tag
    - count is the number of commits after the annotated tag (62 commits since
    2.0.0!!)
    - sha is the commit sha. (8433c2b is the current sha)
    
    Second idea I introduced is a way to infer the snapshot build/ release
    build using the concept of a build number suffix. Rather than change the
    version decorator used.
    
    resolves #759
    closes #760
    Made the dependencies strictly provided only
    
    This way spring/jackson etc will always take the dependencies that were provided
    Added build tasks to the dependencies rather than check
    Added the bump task back
    Removed bumpAndTag from task graph
    
    This way it can run independently
    Fixed gradle deprecation warnings
    
    (2688)
    Consolidated repeated tasks
    
    (2394)
    Reorganized the task graph
    
    (2394)
    Removed redundant tasks that arent required
    
    (2394)
    Updated the credentials check
    
    Also wired the check to the release task
    
    (2394)
    Standardized release plugin logging
    
    #2350
    Improved build logs
    
    #2350
    Remove confusing log statements
    Fixed the build task dependency
    Fixed the build to not generate spurious commmit messages
    'Releasing
    Fixed the references to ext properties and fixed tests
    Refactored the versioning to be more explicit
    Added support for dryRun for check tasks
    Replaced logger with gradle native logger
    Added tagging support to file based versioning
    
    Extracted common code and refactored the existing code to be more readable
    Re-invigorated the file based versioning approach
    Added little more logging around BumpAndTagTasks as it doesnt tag currently
    Fix for the snapshot builds not getting published during the CI build
    
    fixes #804
    Added daemon option to deployment commands
    Updated build to replace deprecated guava api also added logging
    Upgraded dependencies and sanitized log messages used for initial debugging
    Configure rather than just setting the property
    Added release logging
    Version not propogating to the bintray publish
    
    - Adding publish version to the configured publications
    - Refactored the subprojects build
    Related to #759
    Refactoring the release plugin so that it infers the version without
    
    needing to modify source control. Introduced two concepts to be part of
    the CD build workflow:
    
    First idea to use the git annotated tags as a way to generate version
    numbers, rather than a version.properties file. git describe and git
    describe --exact-match to the rescue.
    
    Git already has an idea of generating serial predictable commit
    descriptions (build numbers) given an annotated tag for e.g. the
    currently the version according to git in this branch is
    2.0.0-62-g8433c2b it has the format 2.0.0-<count>-g<sha> where:
    
    - 2.0.0 is the annotated tag
    - count is the number of commits after the annotated tag (62 commits since
    2.0.0!!)
    - sha is the commit sha. (8433c2b is the current sha)
    
    Second idea I introduced is a way to infer the snapshot build/ release
    build using the concept of a build number suffix. Rather than change the
    version decorator used.
    
    resolves #759
    closes #760
    Adds intermediary tasks to release group
    [#612] Release tasks WIP
    Release task version bumping
    Adding some release related tasks
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    Cleaning up snapshot publishing tasks
    - Turns off travisci caching to fix build (likely cause cached .gradle dir)
    Publishig snapshots on successful travisci builds
    Some cleanup and depending on check instead of build
    Implementing pre-release tasks
    Bump slf4j-simple from 1.6.1 to 1.7.30
    
    Bumps [slf4j-simple](https://github.com/qos-ch/slf4j) from 1.6.1 to 1.7.30.
    - [Release notes](https://github.com/qos-ch/slf4j/releases)
    - [Commits](https://github.com/qos-ch/slf4j/compare/v_1.6.1...v_1.7.30)
    
    Signed-off-by: dependabot-preview[bot] <support@dependabot.com>
    Sorted the model properties by position and name
    
    resolves #3087
    Added tests and configuration to demonstrate Iterable
    
    resolves #3371, #3022
    Updated the tests
    
    (3377)
    Added test to demonstrate optional
    
    (2831)
    Fixed issue allow allowable values to be overriden
    
    fixes #3321
    Fixed issue rendering uuid size
    
    fixes #3329
    Added better support for x-forward header interpretation
    
    (2022)
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Sorted responses and build works
    
    (2022)
    Consolidated the annotations
    
    (2022)
    '
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Added functional contract tests
    
    (2022)
    Upgraded the dependencies
    
    Also fixes as a result of upgrading asciidoctor
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Build scripts cleanup
    
    Used the new form for plugin definitions and removed unused script blocks and rearranged the dependencies
    
    (2022)
    #2932: Minor version upgrades of spring dependencies. Aligned contract tests with Spring HATEOAS 1.x. Fixed wrong client encoding used in tests.
    Updated spring dependencies to spring 5.2.0 and spring boot 2.2.0, fixed changed interfaces
    Upgrade libraries and plugin versions
    
    (2022)
    Fix dependencies and exclusions.
    Upgraded dependency versions and libraries
    
    Moved to spring boot 2.0
    
    (2516)
    Updated dependencies
    
    relates to #2350
    Updated documentation on how to update contracts
    
    (1944)
    Moved the maybeWriteToFile above the assertion
    
    This way when there is an assertion failure we still write the changed contract file to disk. Also update the contracts based on the refresh after adding the new test
    
    (2219)
    Added ability to bulk update contract files
    
    (1937)
    #1773 springfox: spring-boot:2.0.0.RELEASE with other dependencies upgraded to match those in boot
    #1773 springfox: Adding Spring Boot 2 (RC2) globally
    #1773 contract-tests: adding Spring Boot 2
    #1773 Initial dependency upgrade along with API compatibility modifications
    Upgraded libraries prior to release
    
    (1899)
    Upgrading the dependencies before starting on work
    
    (2022)
    Added breaking test to demonstrate nullable expandable parameters
    
    Fixed the contracts accordingly
    
    (1864)
    Upgrade base library versions
    
    related to #1899
    Introduced spring data rest endpoints
    
    This is in preparation to create a contract test to watch the contract evolving and also serve as a safety net for breaking changes
    
    (1623)
    Upgraded libraries before working on the story
    
    (1621)
    Upgraded gradle to 3.1
    
    Also upgraded libraries and disabled the daemon on the CI build
    Updated gradle to 3.0
    Updated swagger-ui version
    
    Also updated libraries
    Upgraded the libraries especially the contract tests
    Changed the library to determine uptodate versions
    Uprevved versions and removed commented code in build script
    Fixed the artifact based sharing of test code
    Removed dependency on spring-hateoas
    
    In addition upgraded the jackson libraries and the json assert libraries.
    This change is mainly to remove the dependency on spring-hateoas being available
    for this library.
    
    fixes #1104
    Upgraded gradle to 2.8
    Changes to limit libraries
    Upgraded gradle to 2.8
    Added support for rendering tags defined in @ApiOperation
    
    fixes #675
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Version not propogating to the bintray publish
    
    - Adding publish version to the configured publications
    - Refactored the subprojects build
    Related to #759
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Removes jsp from swagger-ui
    - Adds an endpoint to list all of the swagger resources within a running application
    - Added a base class for swagger contract tests
    Updated the build files
    Renames modules to springdox-
    Upgraded spring boot
    Wired up the v2 spec with the v2 application context
    
    Unable to figure out how to bootstrap the v2 spec as only one main method is allowed
    [#538] Adds bare contract spec for swagger 2.0
    - Uses swagger groups to split petstore api from out test case apis
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Added tests for allowable values
    
    - Made the test artificats use the testCompile rather than compile dependencies
    Caching gradle wrapper and upgrading spring-mvc-ui webjar
    Upgerades swagger-ui webjar version
    [#496] Adds jstl dependencies to fix webjar context path
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    Removes unnecessary exclude
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Added test to demonstrate optional
    
    (2831)
    Added the json ignores model plugin
    
    Also added backing tests that demonstrate this feature
    
    (2613)
    Added the json ignores model plugin
    
    Also added backing tests that demonstrate this feature
    
    (2613)
    Added support for discerning models via annotations
    
    ApiParam  and Parameter annotations
    
    (3022)
    Added contract tests for the actual issue
    
    (3351)
    Fixed issue rendering uuid size
    
    fixes #3329
    Fixed issue where GET/HEAD/OPTION genering incorrect parms
    
    fixes #3338
    Sorted responses and build works
    
    (2022)
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Added functional contract tests
    
    (2022)
    Sorted the model properties by position and name
    
    resolves #3087
    Fixed issue rendering file input as model attribute
    
    fixes #1370
    Fixed the mapping for form variables and updated the contracts
    
    (3353)
    Updated the tests for multipart support
    
    (3364)
    Added tests and configuration to demonstrate Iterable
    
    resolves #3371, #3022
    Updated the tests
    
    (3377)
    Added example to demonstrate non error messages in logs
    
    (3380)
    Added tests to demonstrate the fixes
    
    (2684)
    Updated the bug examples
    
    (2767)
    Added bug example for hiding based on @ApiModelProperty
    
    relates to #2982
    Added contract tests for the actual issue
    
    (3351)
    Demonstrated fix to 3348
    
    (3348)
    Fixed issue allow allowable values to be overriden
    
    fixes #3321
    Fixed issue rendering uuid size
    
    fixes #3329
    Fixed issue where GET/HEAD/OPTION genering incorrect parms
    
    fixes #3338
    Added the json ignores model plugin
    
    Also added backing tests that demonstrate this feature
    
    (2613)
    Formatting and cleanup
    
    (3002)
    Changed the api docs endpoints to work better with swagger-ui
    
    With the swagger ui working well the services need to be configured to work better in concert with it.
    Fixed issue where GET/HEAD/OPTION genering incorrect parms
    
    fixes #3338
    Renamed classes to be consistent
    
    (2022):
    Added configuration properties support
    
    This helps generate metadata for the application properties
    
    (2022)
    fixup! Properties WIP
    Properties WIP
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Added functional contract tests
    
    (2022)
    Moved union of mvc and flux configurations to a shared configuration class
    
    Since we are protected by conditionals, moving it to a shared configuration class helps collapse the anotation to a single annotation regardless of paradigm. Also left the variants of swagger2 so that it doesnt break existing users.
    
    (3366)
    fixup! Added open api variants for mvc and webflux for open api
    Updated documentation and fixed the build
    Renamed classes to be consistent
    
    (2022):
    Added functional contract tests
    
    (2022)
    Added functional contract tests
    
    (2022)
    Updated the ApiListingScanner extensibility example
    
    The example used a new caching operation generator, so the name space of operations would not be accurate when the contracts are generated. Changed the example, the documentation and the affected tests
    
    (2278)
    Added ability to bulk update contract files
    
    (1937)
    #2257 - fix test failures related to using default system charset when reading files
    
    Fixes 2 tests on Windows:
    * FunctionContractSpec. should honor api v1.2 contract [declaration-concrete-controller.json] at endpoint [/default/concrete-controller]
    * FunctionContractSpec. should honor api v1.2 contract [declaration-pet-service.json] at endpoint [/default/pet-service]
    #2257 - refactor: use explicit syntax (to add another parameter with next commit)
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Added swagger2 contract and fixed bug with operations not getting rendered
    [#538] Adds bare contract spec for swagger 2.0
    - Uses swagger groups to split petstore api from out test case apis
    Added functional contract tests
    
    (2022)
    Fix compiler warnings
    
    (2688)
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Fixed the artifact based sharing of test code
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Fixed the swagger server generated
    
    This strips out the context path from the host name, which was causing it to make the try it out calls fail
    
    (3351)
    Added configuration properties support
    
    This helps generate metadata for the application properties
    
    (2022)
    fixup! Properties WIP
    Properties WIP
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Added functional contract tests
    
    (2022)
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Added tests and configuration to demonstrate Iterable
    
    resolves #3371, #3022
    Added the json ignores model plugin
    
    Also added backing tests that demonstrate this feature
    
    (2613)
    Fixed the swagger server generated
    
    This strips out the context path from the host name, which was causing it to make the try it out calls fail
    
    (3351)
    Demonstrated fix to 3348
    
    (3348)
    Fixed issue rendering uuid size
    
    fixes #3329
    Fixed issue where GET/HEAD/OPTION genering incorrect parms
    
    fixes #3338
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Added functional contract tests
    
    (2022)
    Renamed classes to be consistent
    
    (2022):
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Added functional contract tests
    
    (2022)
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    reverted changes to SwaggerApplication
    added springfox-spring-integration, petstore and petstore-tests
    Introduced spring data rest endpoints
    
    This is in preparation to create a contract test to watch the contract evolving and also serve as a safety net for breaking changes
    
    (1623)
    Fixed the artifact based sharing of test code
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Fixed the build
    
    The models are not correct however :-o
    Wired up the v2 spec with the v2 application context
    
    Unable to figure out how to bootstrap the v2 spec as only one main method is allowed
    [#538] Adds bare contract spec for swagger 2.0
    - Uses swagger groups to split petstore api from out test case apis
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Fixed the build and also fixed depcration warnings
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Fixed the build and also fixed depcration warnings
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Added tests for password field
    
    (3002)
    Formatting and cleanup
    
    (3002)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Fixed the swagger server generated
    
    This strips out the context path from the host name, which was causing it to make the try it out calls fail
    
    (3351)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Added the json ignores model plugin
    
    Also added backing tests that demonstrate this feature
    
    (2613)
    Fixed formatting
    
    (3373)
    Added test to demonstrate optional
    
    (2831)
    Added the json ignores model plugin
    
    Also added backing tests that demonstrate this feature
    
    (2613)
    Fixed the mapping for form variables and updated the contracts
    
    (3353)
    Updated the tests for multipart support
    
    (3364)
    Sorted the model properties by position and name
    
    resolves #3087
    Fixed issue rendering file input as model attribute
    
    fixes #1370
    Fixed the mapping for form variables and updated the contracts
    
    (3353)
    Updated the tests for multipart support
    
    (3364)
    Added tests and configuration to demonstrate Iterable
    
    resolves #3371, #3022
    Added example to demonstrate non error messages in logs
    
    (3380)
    Added tests to demonstrate the fixes
    
    (2684)
    Updated the bug examples
    
    (2767)
    Added bug example for hiding based on @ApiModelProperty
    
    relates to #2982
    Added contract tests for the actual issue
    
    (3351)
    Demonstrated fix to 3348
    
    (3348)
    Fixed issue allow allowable values to be overriden
    
    fixes #3321
    Fixed issue rendering uuid size
    
    fixes #3329
    Fixed issue where GET/HEAD/OPTION genering incorrect parms
    
    fixes #3338
    Sorted the model properties by position and name
    
    resolves #3087
    Fixed issue rendering file input as model attribute
    
    fixes #1370
    Added bug example for hiding based on @ApiModelProperty
    
    relates to #2982
    Updated the tests for multipart support
    
    (3364)
    Fixed issue allow allowable values to be overriden
    
    fixes #3321
    Updated the bug examples
    
    (2767)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Fixed the build and also fixed depcration warnings
    Updated sample OAS service
    
    This is to develop the against a fixed contract that we're expecting in the end
    
    (2022)
    Added issue/pr/contributing templates
    correct spelling, fix typos
    (issue #1896)
    Added issue/pr/contributing templates
    Detangle readme and move documentation out to reference manual
    Create CONTRIBUTING.md
    Updated rules for stale bot
    Adding Probot to close older issues
    
    (2022)
    Added message about starring the repository
    Added issue/pr/contributing templates
    Optimized build to produce java 8 compatible source code
    Made the dependencies strictly provided only
    
    This way spring/jackson etc will always take the dependencies that were provided
    Fixed the straggler library dependencies
    
    Also updated to spring boot 2.3.1
    
    (2022)
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Consolidated the annotations
    
    (2022)
    '
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Changes to map service model to OAS
    
    (2022)
    Merged changes from model enhancements
    Moved apt plugins to the projects that use mapstruct
    
    This is so that the IDE can navigate to generated classes
    
    (2022)
    Build scripts cleanup
    
    Used the new form for plugin definitions and removed unused script blocks and rearranged the dependencies
    
    (2022)
    Added new module to support oas 3.0
    
    (2022)
    Updated swagger-ui version
    
    Also updated libraries
    Fixed the artifact based sharing of test code
    Upgrade all dependencies to the latest version
    Updated the converage numbers
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Bumped up the coverage for swagger-common
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Adjusted the spring dependencies to provided
    
    Also reverted to using the regular servlet api dependency
    Updated the build files
    Renamed modules and directories
    Publishing - maiden flight to bintray
    Renames modules to springdox-
    Moved common readers to the swagger common module
    Added swagger common module
    Fixed the OAS integration
    
    Lots more to do here.
    
    (2022)
    Updated the end to end model tests
    
    Extracted common logic and removed duplication and simplified the tests
    
    (2022)
    Implemented naive basic implementation of OpenAPI mappers
    
    (2022)
    Changes to map service model to OAS
    
    (2022)
    Updated the end to end model tests
    
    Extracted common logic and removed duplication and simplified the tests
    
    (2022)
    Fixed the tests
    
    Also fixed a bug where we werent returning the object schema correctly
    
    (2022)
    Implemented naive basic implementation of OpenAPI mappers
    
    (2022)
    Added tests for password field
    
    (3002)
    Formatting and cleanup
    
    (3002)
    Changes to map service model to OAS
    
    (2022)
    Adusted to handle duplicate names post processing
    
    (2022)
    Updated the end to end model tests
    
    Extracted common logic and removed duplication and simplified the tests
    
    (2022)
    Implemented naive basic implementation of OpenAPI mappers
    
    (2022)
    Changed signature to return only the dependent ModelSpecifications. We dont care about the resolved types
    
    (2022)
    Updated the end to end model tests
    
    Extracted common logic and removed duplication and simplified the tests
    
    (2022)
    Fixed the mappers to render the examples correctly
    
    (2767)
    Polished the builder apis to be fluent
    Changes to map service model to OAS
    
    (2022)
    Updated to use the swagger open api library
    
    (2022)
    Update mappers to use the spring component model
    
    (2022)
    Added new parallel richer schema backing models
    
    (2022)
    Formatting change
    
    (3348)
    Fixed the OAS integration
    
    Lots more to do here.
    
    (2022)
    Added name resolution of reference types to the mappers
    
    (2022)
    Implemented naive basic implementation of OpenAPI mappers
    
    (2022)
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Updated to use the swagger open api library
    
    (2022)
    Update mappers to use the spring component model
    
    (2022)
    Added new parallel richer schema backing models
    
    (2022)
    Added tests for password field
    
    (3002)
    Added support for additional scalar types
    Upgraded compiler to java 11
    
    Additional fixes
    Fixed the OAS integration
    
    Lots more to do here.
    
    (2022)
    Implemented naive basic implementation of OpenAPI mappers
    
    (2022)
    Changes to map service model to OAS
    
    (2022)
    Polished the builder apis to be fluent
    Changes to map service model to OAS
    
    (2022)
    Added name resolution of reference types to the mappers
    
    (2022)
    Fixed the tests
    
    Also fixed a bug where we werent returning the object schema correctly
    
    (2022)
    Implemented naive basic implementation of OpenAPI mappers
    
    (2022)
    Changes to map service model to OAS
    
    (2022)
    Fixed reliability sonar bugs
    Added name resolution of reference types to the mappers
    
    (2022)
    Implemented naive basic implementation of OpenAPI mappers
    
    (2022)
    Implemented naive basic implementation of OpenAPI mappers
    
    (2022)
    Fixed the mappers to render the examples correctly
    
    (2767)
    Formatting change
    
    (3348)
    Fixed reliability sonar bugs
    Fixed issue where GET/HEAD/OPTION genering incorrect parms
    
    fixes #3338
    Polished the builder apis to be fluent
    Additional builder logic cleanup
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Renamed classes to be consistent
    
    (2022):
    Made all the logging debug
    
    (2022)
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Changes to map service model to OAS
    
    (2022)
    Code reformatting and cleanup
    
    (2022)
    Added Multipart request parameter builder test
    
    Also fixed all the tests
    
    (2022)
    Renamed MediaType -> Represenation
    
    (2022)
    Code cleanup
    
    - removed generics when not needed.
    - removed unintended depcrecations
    - reformatted
    - removed dead code
    
    (2022)
    Added missing types that allow mapping to the new OpenAPI spec
    
    Also converted collection types to the lowest base type i.e. List -> Collection etc.
    
    (2022)
    Moved to appropriate package
    
    Also added equals/hashCode and toString methods
    
    (2022)
    Updated to use the swagger open api library
    
    (2022)
    Update mappers to use the spring component model
    
    (2022)
    Added new parallel richer schema backing models
    
    (2022)
    Added mapping support for external docs
    
    (2022)
    Added mapping support for servers and variables
    
    (2022)
    Created an empty shell based on swagger 2.0
    
    (2022)
    Sorted the model properties by position and name
    
    resolves #3087
    Fixed formatting
    
    (3373)
    Additional builder logic cleanup
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed the build and also fixed depcration warnings
    Fixed coverage report error
    Changes to map service model to OAS
    
    (2022)
    Fixed the OAS integration
    
    Lots more to do here.
    
    (2022)
    Added name resolution of reference types to the mappers
    
    (2022)
    Implemented naive basic implementation of OpenAPI mappers
    
    (2022)
    Updated to use the swagger open api library
    
    (2022)
    Update mappers to use the spring component model
    
    (2022)
    Added new parallel richer schema backing models
    
    (2022)
    Changes to map service model to OAS
    
    (2022)
    Updated the mappers to use the new schema/service models
    
    (2022)
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Updated to use the swagger open api library
    
    (2022)
    Update mappers to use the spring component model
    
    (2022)
    Created an empty shell based on swagger 2.0
    
    (2022)
    Don't include a license object when both license and licenseUrl are empty.
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Standardized method names to map[Type]
    
    for methods that did not map to equivalent types called out the source and target
    types in the method name.
    
    Adjusted the visibility of methods
    
    Extracted inner classes so that they can be testable
    Updated the swagger2 mappers to not use expressions
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Changes to map service model to OAS
    
    (2022)
    Added missing types that allow mapping to the new OpenAPI spec
    
    Also converted collection types to the lowest base type i.e. List -> Collection etc.
    
    (2022)
    Formatted for consistency
    
    (2022)
    Update mappers to use the spring component model
    
    (2022)
    Reformatted and fixed checkstyles
    
    (2022)
    Created an empty shell based on swagger 2.0
    
    (2022)
    Fixed the ordering of the elements to be stable
    
    (1623)
    Added mapping support for list vendor extensions
    
    The vendor extension mapper now can map extensions that have a list value. Also appropriately modified the respective security scheme mappers to use it.
    
    (1636)
    Provided type safe vendor extensibility rather than naked maps
    Fixed the OAS integration
    
    Lots more to do here.
    
    (2022)
    Added name resolution of reference types to the mappers
    
    (2022)
    Implemented naive basic implementation of OpenAPI mappers
    
    (2022)
    Consolidated the annotations
    
    (2022)
    '
    Fixed the mappers to render the examples correctly
    
    (2767)
    Changes to map service model to OAS
    
    (2022)
    Updated to use the swagger open api library
    
    (2022)
    Reformatted and fixed checkstyles
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrated guava Function
    Updated the contracts after upgrade to latest swagger library
    
    (2503)
    Added better support for rendering examples
    
    (2249)
    General cleanup and polish
    
    (1941)
    add some tests
    fix code style issues from codacy
    fixes #1941
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Extracted common logic to setup the JsonSerializer
    
    Also made the JsonSerialzer a component, that way every controller does not need to do the object mapper setup boilerplate code.
    
    related to #701
    Include License in the list of mixins used to customize the swagger2 models
    
    fixes #672
    Removed all the WebMvcConfigurerAdapters and created a BeanPostProcessor
    
    that can assist with finding all the relavent ObjectMappers in play. This
    technique is less intrusive than the WebMvcConfigurationAdapter + @EnableWebMvc
    technique because spring-boot assumes that when one of those or an implementation
    of WebMvcConfigurationSupport implementation is in play, it will refuse to particpate
    in the auto configuration.
    
    related to #638
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for tags
    
    Also adjusted the swagger.json to account for the tags not having all the elements
    Added support for customized object mapper
    
    Also fixed the output to be as close to the reference output as possible
    Added webmvc/webflux varaints of transformation filter plugins
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Added webmvc/webflux varaints of transformation filter plugins
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Added webmvc/webflux varaints of transformation filter plugins
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Moved union of mvc and flux configurations to a shared configuration class
    
    Since we are protected by conditionals, moving it to a shared configuration class helps collapse the anotation to a single annotation regardless of paradigm. Also left the variants of swagger2 so that it doesnt break existing users.
    
    (3366)
    Consolidated the annotations
    
    (2022)
    '
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Changes to map service model to OAS
    
    (2022)
    Reformatted and fixed checkstyles
    
    (2022)
    Created an empty shell based on swagger 2.0
    
    (2022)
    Removed the property sources configurer yay!
    
    Since we now resolve imperatively it is no longer required to have this defined. Also remove the *web package from component scan so that we can manually register the two controllers using new PropertySourcedRequestMappingHandler.
    
    (1770)
    Fixed the bug where the caching was incorrect for operations without
    
    specific http method
    - Renamed the configuration class
    Extracted common logic to setup the JsonSerializer
    
    Also made the JsonSerialzer a component, that way every controller does not need to do the object mapper setup boilerplate code.
    
    related to #701
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Removing some redunant packages and renamed swagger 1.2
    
    configuration to match the convention in swagger 2.0
    
    related to #667
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Removed all the WebMvcConfigurerAdapters and created a BeanPostProcessor
    
    that can assist with finding all the relavent ObjectMappers in play. This
    technique is less intrusive than the WebMvcConfigurationAdapter + @EnableWebMvc
    technique because spring-boot assumes that when one of those or an implementation
    of WebMvcConfigurationSupport implementation is in play, it will refuse to particpate
    in the auto configuration.
    
    related to #638
    Removed all the EnableWebMvc annotations
    
    related to #638
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    Updated the build scripts to publish all the publishable modules
    
    Also realized that nothing is pulling in the common module, so updated the configuration beans to import it
    Added support for customized object mapper
    
    Also fixed the output to be as close to the reference output as possible
    Fixed the build
    
    The models are not correct however :-o
    Wired up the v2 spec with the v2 application context
    
    Unable to figure out how to bootstrap the v2 spec as only one main method is allowed
    Added controller for swagger v2
    Moved union of mvc and flux configurations to a shared configuration class
    
    Since we are protected by conditionals, moving it to a shared configuration class helps collapse the anotation to a single annotation regardless of paradigm. Also left the variants of swagger2 so that it doesnt break existing users.
    
    (3366)
    Added open api variants for mvc and webflux for open api
    
    (3366)
    Updated readme and renamed annotation for non-boot applications
    Renamed classes to be consistent
    
    (2022):
    Consolidated the annotations
    
    (2022)
    '
    Changes to map service model to OAS
    
    (2022)
    Added functional contract tests
    
    (2022)
    Created an empty shell based on swagger 2.0
    
    (2022)
    Fixed documentation errors
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    [#613] Renamed DocumentConfigurer to Docket
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Wired up the v2 spec with the v2 application context
    
    Unable to figure out how to bootstrap the v2 spec as only one main method is allowed
    Modularized the configuration
    
    - Also added bean ordering so that spring plugins are always run before the swagger plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#463] Adding javadoc to publication
    Testing xml based swaggerspringmvc plugin. Adding draft documentation for 0.8.4 release.
    Add plugin and adapter to simplify setup.
    Added default modelProvider to base spring configuration.
    Fixed the server url calculation
    
    (3366)
    Fixed the swagger server generated
    
    This strips out the context path from the host name, which was causing it to make the try it out calls fail
    
    (3351)
    Added better support for x-forward header interpretation
    
    (2022)
    Added webmvc/webflux varaints of transformation filter plugins
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Fixed the server url calculation
    
    (3366)
    Added vanilla conditions around open api annotations
    
    (3366)
    Fixed the swagger server generated
    
    This strips out the context path from the host name, which was causing it to make the try it out calls fail
    
    (3351)
    Changed the api docs endpoints to work better with swagger-ui
    
    With the swagger ui working well the services need to be configured to work better in concert with it.
    Added better support for x-forward header interpretation
    
    (2022)
    Renamed classes to be consistent
    
    (2022):
    Added configuration properties support
    
    This helps generate metadata for the application properties
    
    (2022)
    fixup! Properties WIP
    Properties WIP
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Added better support for x-forward header interpretation
    
    (2022)
    Added webmvc/webflux varaints of transformation filter plugins
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Added webmvc/webflux varaints of transformation filter plugins
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Fixed the server url calculation
    
    (3366)
    Added vanilla conditions around open api annotations
    
    (3366)
    Fixed the swagger server generated
    
    This strips out the context path from the host name, which was causing it to make the try it out calls fail
    
    (3351)
    Added better support for x-forward header interpretation
    
    (2022)
    Renamed classes to be consistent
    
    (2022):
    Added configuration properties support
    
    This helps generate metadata for the application properties
    
    (2022)
    fixup! Properties WIP
    Properties WIP
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Added webmvc/webflux varaints of transformation filter plugins
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Added webmvc/webflux varaints of transformation filter plugins
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Added webmvc/webflux varaints of transformation filter plugins
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Added webmvc/webflux varaints of transformation filter plugins
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Added webmvc/webflux varaints of transformation filter plugins
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Added webmvc/webflux varaints of transformation filter plugins
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Made the dependencies strictly provided only
    
    This way spring/jackson etc will always take the dependencies that were provided
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    tests for the handlers and handler providers
    removed duplications, documentation cleanup, some name changes for consistency
    removed unnecessary classes, use their counterparts in webmvc and webflux instead, first working version of webflux integration
    renamed to spring-integration-webmvc to make room for webflux
    first version which documents parameters for spring-integration webmvc, removed petstore and petstore-tests
    started work on springfox-spring-integration
    Remove duplicated dependency.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Added dependency for validation annotations
    
    (1749)
    Added reflections library for annotation scanning
    
    This is in preparation for scanning for jackson annotations and
    serializers and deserializers.
    
    (1490)
    Upgraded libraries before working on the story
    
    (1621)
    Fixed the artifact based sharing of test code
    Updated the converage numbers
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Adjusted the spring dependencies to provided
    
    Also reverted to using the regular servlet api dependency
    Updated the build files
    Renamed modules and directories
    Renames modules to springdox-
    Updated the build scripts to publish all the publishable modules
    
    Also realized that nothing is pulling in the common module, so updated the configuration beans to import it
    Switched to using swagger 1.5 throughout the library
    WIP
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Added tests for allowable values
    
    - Made the test artificats use the testCompile rather than compile dependencies
    Removed all scala dependencies by group
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Setup scala library excludes
    [#463] Adding javadoc to publication
    Adds a preRelease task to prevent duplicate publishing of released artifact versions.
    Externalizes maven pom filtering and sets groovy-all dependency to test.
    Adds maven provided scope to pom dependencies
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Update README.md
    Update README.md
    
    typo
    Update README.md
    Corrected dependency
    checkstyle issue: line length
    describe spring-restdocs usage for documenting webflux response bodies
    define response body examples using spring-restdocs
    removed unnecessary classes, use their counterparts in webmvc and webflux instead, first working version of webflux integration
    renamed to spring-integration-webmvc to make room for webflux
    started work on springfox-spring-integration
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Reformatted the code to match style guide
    
    Indents are 2 spaces and we splat static imports and dont splat regular imports (Should probably advertise this better)
    
    (2793)
    tests for the handlers and handler providers
    Reformatted the code to match style guide
    
    Indents are 2 spaces and we splat static imports and dont splat regular imports (Should probably advertise this better)
    
    (2793)
    tests for the handlers and handler providers
    removed unnecessary classes, use their counterparts in webmvc and webflux instead, first working version of webflux integration
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    removed duplications, documentation cleanup, some name changes for consistency
    resolved checkstyle issues
    removed unnecessary classes, use their counterparts in webmvc and webflux instead, first working version of webflux integration
    renamed to spring-integration-webmvc to make room for webflux
    first version which documents parameters for spring-integration webmvc, removed petstore and petstore-tests
    Simplified and cleaned up
    
    Autowired fields, simplified functions with method references and lambdas and renamed methods and finalized variables
    
    (3354)
    Fixed codacy complaints
    
    (2793)
    Reformatted the code to match style guide
    
    Indents are 2 spaces and we splat static imports and dont splat regular imports (Should probably advertise this better)
    
    (2793)
    use streams to map parameters in parameters provider
    define response body examples using spring-restdocs
    removed duplications, documentation cleanup, some name changes for consistency
    removed unnecessary classes, use their counterparts in webmvc and webflux instead, first working version of webflux integration
    renamed to spring-integration-webmvc to make room for webflux
    first version which documents parameters for spring-integration webmvc, removed petstore and petstore-tests
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Reformatted the code to match style guide
    
    Indents are 2 spaces and we splat static imports and dont splat regular imports (Should probably advertise this better)
    
    (2793)
    removed duplications, documentation cleanup, some name changes for consistency
    resolved checkstyle issues
    removed unnecessary classes, use their counterparts in webmvc and webflux instead, first working version of webflux integration
    renamed to spring-integration-webmvc to make room for webflux
    first version which documents parameters for spring-integration webmvc, removed petstore and petstore-tests
    added springfox-spring-integration, petstore and petstore-tests
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Made the dependencies strictly provided only
    
    This way spring/jackson etc will always take the dependencies that were provided
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Build scripts cleanup
    
    Used the new form for plugin definitions and removed unused script blocks and rearranged the dependencies
    
    (2022)
    Applied the parameter object refactoring to tests
    
    (1937)
    Added dependency for validation annotations
    
    (1749)
    Added ReflectionSupport to facilitate getting fields in a class
    
    Also fixed incorrect tests
    Removed swagger specific references from the bean library
    Moved description resolver to spring-web
    Fixed all the tests
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Updated the converage numbers
    Integrated the bean validator library into publishables
    Moved the directories
    Added Bean Validations API support for @NotNull, @Min, @Max, @Size
    
    https://github.com/springfox/springfox/issues/356
    Added staticdocs module
    - Removed a bunch of gradle apply language plugins
    - Reverted gralde idea copyright generation from copyright file
    Publishing petstore api
    Adjusted the spring dependencies to provided
    
    Also reverted to using the regular servlet api dependency
    Renamed modules and directories
    Implementing pre-release tasks
    Renames modules to springdox-
    Updated the build scripts to publish all the publishable modules
    
    Also realized that nothing is pulling in the common module, so updated the configuration beans to import it
    Added support to query pets repository
    Switched to using swagger 1.5 throughout the library
    [#538] Adds petstore module in preparation for swagger 2.0
    Added getters and setters to test models
    
    This is so that the code-style warnings are fixed
    
    related to #1517
    Updated copyright year and tidied up unnecessary casting
    Updated plugins for @Min/@Max/@DecimalMin/@DecimalMax to set the exclusiveMin/exclusiveMax properties
    Added bean validation support for @DecimalMin/@DecimalMax
    Added tests for the bean validator plugins
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    improved tests
    improved tests
    Added tests for @NotBlank.
    correct spelling, fix typos
    (issue #1896)
    Added getters and setters to test models
    
    This is so that the code-style warnings are fixed
    
    related to #1517
    Added tests for the bean validator plugins
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Cleanup and code formatting
    Added support for composed bean validation constraints
    
    * Using Spring's AnnotationUtils to find annotations
    * Added new extractAnnotation() method to BeanValidators as it's common to all plugins
    * Refactored all plugins to use extractAnnotation() - so they now all support composed constraints
    Added getters and setters to test models
    
    This is so that the code-style warnings are fixed
    
    related to #1517
    Updated the copyright date
    #1296: Adding Pattern annotation support
    Added tests for the bean validator plugins
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Added getters and setters to test models
    
    This is so that the code-style warnings are fixed
    
    related to #1517
    Added tests for the bean validator plugins
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Added getters and setters to test models
    
    This is so that the code-style warnings are fixed
    
    related to #1517
    Added tests for the bean validator plugins
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    More release related tasks
    - Sets apps version to 'dangerous' for release testing
    - Saves version post release
    - Adds git/release tasks
    Fixed buildSrc package issue
    Initial release work
    Added getters and setters to test models
    
    This is so that the code-style warnings are fixed
    
    related to #1517
    Updated the copyright date
    #1296: Added file headers with license.
    #1296: Test for Size and Pattern annotations applied together on property and getter
    fixed import
    improved code coverage
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    fixing sorting list in multimap and adding test cases
    Provide proprty pattern annotation support
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Fixed all the tests
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Added ReflectionSupport to facilitate getting fields in a class
    
    Also fixed incorrect tests
    Fixed the bean validators to work with the new schema/service models
    
    (2022)
    Added property name to the property specification builder constructor
    
    (2022)
    Initial model refactoring
    Moved tests to the right place
    
    Also moved the type used for testing
    
    (2288)
    remove unneeded import
    add test case for Bean Property Definition presence check
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Cleanup and code formatting
    Added support for composed bean validation constraints
    
    * Using Spring's AnnotationUtils to find annotations
    * Added new extractAnnotation() method to BeanValidators as it's common to all plugins
    * Refactored all plugins to use extractAnnotation() - so they now all support composed constraints
    Fixed an issue where getter or field might be null
    
    related to #356
    
    thanks @jfiala
    added isNull to annotation support
    Added tests for @NotBlank.
    Provide proprty pattern annotation support
    Added tests for parameter plugins
    
    Plus general cleanup of comments and un-needed code
    Collapsed the Util classes to one class
    
    Also made the class purely static and added a test to ensure that.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Reduced code complexity in ModelDependencyProvider
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Improved the coverage and bumped up the thresholds
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    WIP
    Updated the copyright headers, cleanup, reformatting
    
    and polish!
    
    (1901)
    Provide proprty pattern annotation support
    Added tests for parameter plugins
    
    Plus general cleanup of comments and un-needed code
    Added RequestParameterBuilder to the ParameterContext
    
    (2022)
    Using media type to determine correct param type when expanding parameter
    Added a list of annotated elements to search annotations from
    
    Since we want to preserve the ability to lookup annotations from fields and accessors, we add the ability to set multiple sources for annotations and search on a first find first serve basis the annotaions in the find method.
    
    (1937)
    Refactored model parameter accessor to work with either fields or accessors
    
    Since the only thing we care about with the field is the way to access the annotations, we reduce this to AnnotationElement. This way the accessor can work with either fields or properties.
    
    (1937)
    Applied the parameter object refactoring to tests
    
    (1937)
    Deprecated the access to the raw field
    
    This can be based on interfaces that spring uses to resolve via resolvers e.g. Pageable. This is an incremental step to minimize the use of Field directly
    
    (1937)
    Updated the copyright headers, cleanup, reformatting
    
    and polish!
    
    (1901)
    Provide proprty pattern annotation support
    Added tests for expansion parameters
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Updated the bean validator specs
    
    (2022)
    Changed the Either type to ParameterSpecification
    
    (2022)
    Added support for Size attribute
    
    (2022)
    WIP
    Added ReflectionSupport to facilitate getting fields in a class
    
    Also fixed incorrect tests
    Added tests for parameter plugins
    
    Plus general cleanup of comments and un-needed code
    Tightened the builder api
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Updated the bean validator specs
    
    (2022)
    Changed the Either type to ParameterSpecification
    
    (2022)
    Added support for numeric facets
    
    (2022)
    WIP
    Added tests for parameter plugins
    
    Plus general cleanup of comments and un-needed code
    Tightened the builder api
    Updated the bean validator specs
    
    (2022)
    Changed the Either type to ParameterSpecification
    
    (2022)
    Added support for numeric facets
    
    (2022)
    Added RequestParameterBuilder to the ParameterContext
    
    (2022)
    Using media type to determine correct param type when expanding parameter
    Added a list of annotated elements to search annotations from
    
    Since we want to preserve the ability to lookup annotations from fields and accessors, we add the ability to set multiple sources for annotations and search on a first find first serve basis the annotaions in the find method.
    
    (1937)
    Refactored model parameter accessor to work with either fields or accessors
    
    Since the only thing we care about with the field is the way to access the annotations, we reduce this to AnnotationElement. This way the accessor can work with either fields or properties.
    
    (1937)
    Applied the parameter object refactoring to tests
    
    (1937)
    Reformatting tests
    
    (1937)
    Deprecated the access to the raw field
    
    This can be based on interfaces that spring uses to resolve via resolvers e.g. Pageable. This is an incremental step to minimize the use of Field directly
    
    (1937)
    Added tests for expansion parameters
    Upgraded to groovy 3 and spock 2.0
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Updated the bean validator specs
    
    (2022)
    Added support for all the bean validation facets and udpated the tests
    
    (2022)
    Merging master
    Added tests for @NotBlank.
    Added ReflectionSupport to facilitate getting fields in a class
    
    Also fixed incorrect tests
    Added tests for parameter plugins
    
    Plus general cleanup of comments and un-needed code
    Upgraded to groovy 3 and spock 2.0
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Updated the bean validator specs
    
    (2022)
    Added support for all the bean validation facets and udpated the tests
    
    (2022)
    WIP
    Added ReflectionSupport to facilitate getting fields in a class
    
    Also fixed incorrect tests
    Added tests for parameter plugins
    
    Plus general cleanup of comments and un-needed code
    Added RequestParameterBuilder to the ParameterContext
    
    (2022)
    Using media type to determine correct param type when expanding parameter
    Added a list of annotated elements to search annotations from
    
    Since we want to preserve the ability to lookup annotations from fields and accessors, we add the ability to set multiple sources for annotations and search on a first find first serve basis the annotaions in the find method.
    
    (1937)
    Refactored model parameter accessor to work with either fields or accessors
    
    Since the only thing we care about with the field is the way to access the annotations, we reduce this to AnnotationElement. This way the accessor can work with either fields or properties.
    
    (1937)
    Applied the parameter object refactoring to tests
    
    (1937)
    Reformatting tests
    
    (1937)
    Deprecated the access to the raw field
    
    This can be based on interfaces that spring uses to resolve via resolvers e.g. Pageable. This is an incremental step to minimize the use of Field directly
    
    (1937)
    Added tests for expansion parameters
    Added RequestParameterBuilder to the ParameterContext
    
    (2022)
    Added tests for @NotBlank.
    Using media type to determine correct param type when expanding parameter
    Added a list of annotated elements to search annotations from
    
    Since we want to preserve the ability to lookup annotations from fields and accessors, we add the ability to set multiple sources for annotations and search on a first find first serve basis the annotaions in the find method.
    
    (1937)
    Refactored model parameter accessor to work with either fields or accessors
    
    Since the only thing we care about with the field is the way to access the annotations, we reduce this to AnnotationElement. This way the accessor can work with either fields or properties.
    
    (1937)
    Applied the parameter object refactoring to tests
    
    (1937)
    Reformatting tests
    
    (1937)
    Deprecated the access to the raw field
    
    This can be based on interfaces that spring uses to resolve via resolvers e.g. Pageable. This is an incremental step to minimize the use of Field directly
    
    (1937)
    Added tests for expansion parameters
    Added RequestParameterBuilder to the ParameterContext
    
    (2022)
    Added tests for @NotBlank.
    Using media type to determine correct param type when expanding parameter
    Added a list of annotated elements to search annotations from
    
    Since we want to preserve the ability to lookup annotations from fields and accessors, we add the ability to set multiple sources for annotations and search on a first find first serve basis the annotaions in the find method.
    
    (1937)
    Refactored model parameter accessor to work with either fields or accessors
    
    Since the only thing we care about with the field is the way to access the annotations, we reduce this to AnnotationElement. This way the accessor can work with either fields or properties.
    
    (1937)
    Applied the parameter object refactoring to tests
    
    (1937)
    Reformatting tests
    
    (1937)
    Deprecated the access to the raw field
    
    This can be based on interfaces that spring uses to resolve via resolvers e.g. Pageable. This is an incremental step to minimize the use of Field directly
    
    (1937)
    Added tests for expansion parameters
    Fixed the bean validators to work with the new schema/service models
    
    (2022)
    Added property name to the property specification builder constructor
    
    (2022)
    Added support for all the bean validation facets and udpated the tests
    
    (2022)
    Added support for numeric facets
    
    (2022)
    Initial model refactoring
    Moved the tests to the right package
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Removed default min/max values for @Min/@Max/@DecimalMin/@DecimalMax for #1521
    Updated copyright year and tidied up unnecessary casting
    Updated plugins for @Min/@Max/@DecimalMin/@DecimalMax to set the exclusiveMin/exclusiveMax properties
    Added bean validation support for @DecimalMin/@DecimalMax
    Fixes issue with allowable ranges e.g. infinity
    
    fixes #1504
    Added tests for the bean validator plugins
    Fixed the bean validators to work with the new schema/service models
    
    (2022)
    Added property name to the property specification builder constructor
    
    (2022)
    Initial model refactoring
    Updated the copyright headers, cleanup, reformatting
    
    and polish!
    
    (1901)
    Moved the tests to the right package
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Updated the copyright date
    #1296: Adding Pattern annotation support
    Added tests for the bean validator plugins
    Fixed the bean validators to work with the new schema/service models
    
    (2022)
    Added property name to the property specification builder constructor
    
    (2022)
    Initial model refactoring
    Fixed boxing/unboxing of booleans
    
    Caused properties to be null when that made no sense. Also fixed tests
    affected by this change.
    
    (1864)
    correct spelling, fix typos
    (issue #1896)
    Moved the tests to the right package
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Fixed all the tests
    Added tests for the bean validator plugins
    Fixed the broken test
    review: try to get more code coverage
    Fixed boxing/unboxing of booleans
    
    Caused properties to be null when that made no sense. Also fixed tests
    affected by this change.
    
    (1864)
    correct spelling, fix typos
    (issue #1896)
    Moved the tests to the right package
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Fixed all the tests
    Added tests for the bean validator plugins
    Fixed the bean validators to work with the new schema/service models
    
    (2022)
    Added property name to the property specification builder constructor
    
    (2022)
    Initial model refactoring
    Moved the tests to the right package
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Updated the copyright date
    #1296: Added file headers with license.
    #1296: Test for Size and Pattern annotations applied together on property and getter
    #1296: Adding Pattern annotation support
    Added tests for the bean validator plugins
    Fixed the bean validators to work with the new schema/service models
    
    (2022)
    Added property name to the property specification builder constructor
    
    (2022)
    Initial model refactoring
    Moved the tests to the right package
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Added tests for the bean validator plugins
    Fixed the bean validators to work with the new schema/service models
    
    (2022)
    Added property name to the property specification builder constructor
    
    (2022)
    Added support for numeric facets
    
    (2022)
    Initial model refactoring
    Moved the tests to the right package
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Removed default min/max values for @Min/@Max/@DecimalMin/@DecimalMax for #1521
    Updated plugins for @Min/@Max/@DecimalMin/@DecimalMax to set the exclusiveMin/exclusiveMax properties
    Fixes issue with allowable ranges e.g. infinity
    
    fixes #1504
    Added tests for the bean validator plugins
    Fixed the bean validators to work with the new schema/service models
    
    (2022)
    Added property name to the property specification builder constructor
    
    (2022)
    Merging master
    Added tests for @NotBlank.
    Fixed boxing/unboxing of booleans
    
    Caused properties to be null when that made no sense. Also fixed tests
    affected by this change.
    
    (1864)
    correct spelling, fix typos
    (issue #1896)
    Moved the tests to the right package
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Fixed all the tests
    Added tests for the bean validator plugins
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Added better guards around spring boot auto configuration
    Fixed checkstyle violations
    
    (2719)
    added IsNullAnnotationPlugin
    Fixes #2719 partially by setting the required flag when @NotBlank is used.
    Provide proprty pattern annotation support
    Added missing plugins in the configuration
    
    (1864)
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Added bean validation support for @DecimalMin/@DecimalMax
    #1296: Adding Pattern annotation support
    Added convenience configuration to bring in the plugins
    
    related to #356
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Fixed the build
    
    The models are not correct however :-o
    Wired up the v2 spec with the v2 application context
    
    Unable to figure out how to bootstrap the v2 spec as only one main method is allowed
    [#538] Adds bare contract spec for swagger 2.0
    - Uses swagger groups to split petstore api from out test case apis
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Made the code compatible with java 8
    
    Seems like this is a bug in java 11 that it fails with a weird error
    Remove usage of generic wildcard type
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Replaced utility method with accessor on the ParameterExpansionContext
    
    Removed unsed method.
    (1937)
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Added support for composed bean validation constraints
    
    * Using Spring's AnnotationUtils to find annotations
    * Added new extractAnnotation() method to BeanValidators as it's common to all plugins
    * Refactored all plugins to use extractAnnotation() - so they now all support composed constraints
    Fixed an issue where getter or field might be null
    
    related to #356
    
    thanks @jfiala
    Split the plugin into seperate plugins for each of the annotations
    Integrated the bean validator library into publishables
    Moved the directories
    Replaced constructor with builder
    
    (2022)
    Added support for numeric facets
    
    (2022)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Collapsed the Util classes to one class
    
    Also made the class purely static and added a test to ensure that.
    Fixed all the tests
    Added support for bean validations
    
    Specifically on Request Parameters
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Fixed the bean validators to work with the new schema/service models
    
    (2022)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Replaced utility method with accessor on the ParameterExpansionContext
    
    Removed unsed method.
    (1937)
    Collapsed the Util classes to one class
    
    Also made the class purely static and added a test to ensure that.
    Added tests for parameter plugins
    
    Plus general cleanup of comments and un-needed code
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Added support for bean validations
    
    Specifically on Request Parameters
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Added support for all the bean validation facets and udpated the tests
    
    (2022)
    Removed unused import.
    Fixes #2719 partially by setting the required flag when @NotBlank is used.
    Optimized imports per project style
    
    (1082)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Added tests for parameter plugins
    
    Plus general cleanup of comments and un-needed code
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Added support for bean validations
    
    Specifically on Request Parameters
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Fixed the bean validators to work with the new schema/service models
    
    (2022)
    Added support for Size attribute
    
    (2022)
    Optimized imports per project style
    
    (1082)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Remove output related to fixed issue #1244
    Reduced log chatter @ info level
    
    fixes #2212
    Collapsed the Util classes to one class
    
    Also made the class purely static and added a test to ensure that.
    Added tests for parameter plugins
    
    Plus general cleanup of comments and un-needed code
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Added support for bean validations
    
    Specifically on Request Parameters
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Added support for all the bean validation facets and udpated the tests
    
    (2022)
    Added support for numeric facets
    
    (2022)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Replaced utility method with accessor on the ParameterExpansionContext
    
    Removed unsed method.
    (1937)
    Collapsed the Util classes to one class
    
    Also made the class purely static and added a test to ensure that.
    Added tests for parameter plugins
    
    Plus general cleanup of comments and un-needed code
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Added support for bean validations
    
    Specifically on Request Parameters
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Added support for all the bean validation facets and udpated the tests
    
    (2022)
    Optimized imports per project style
    
    (1082)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Added tests for parameter plugins
    
    Plus general cleanup of comments and un-needed code
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Added support for bean validations
    
    Specifically on Request Parameters
    Fixed the bean validators to work with the new schema/service models
    
    (2022)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Replaced utility method with accessor on the ParameterExpansionContext
    
    Removed unsed method.
    (1937)
    Added tests for parameter plugins
    
    Plus general cleanup of comments and un-needed code
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Added support for bean validations
    
    Specifically on Request Parameters
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Added support for all the bean validation facets and udpated the tests
    
    (2022)
    Optimized imports per project style
    
    (1082)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Updated the copyright headers, cleanup, reformatting
    
    and polish!
    
    (1901)
    Provide proprty pattern annotation support
    Added tests for parameter plugins
    
    Plus general cleanup of comments and un-needed code
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Added support for bean validations
    
    Specifically on Request Parameters
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Fixed the bean validators to work with the new schema/service models
    
    (2022)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Replaced utility method with accessor on the ParameterExpansionContext
    
    Removed unsed method.
    (1937)
    Updated the copyright headers, cleanup, reformatting
    
    and polish!
    
    (1901)
    Provide proprty pattern annotation support
    Added tests for parameter plugins
    
    Plus general cleanup of comments and un-needed code
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Added support for bean validations
    
    Specifically on Request Parameters
    Fixed the bean validators to work with the new schema/service models
    
    (2022)
    Fixes #2719 partially by setting the required flag when @NotBlank is used.
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Replaced utility method with accessor on the ParameterExpansionContext
    
    Removed unsed method.
    (1937)
    Added tests for parameter plugins
    
    Plus general cleanup of comments and un-needed code
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Added support for bean validations
    
    Specifically on Request Parameters
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Added support for all the bean validation facets and udpated the tests
    
    (2022)
    Added support for numeric facets
    
    (2022)
    Optimized imports per project style
    
    (1082)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Remove output related to fixed issue #1244
    Collapsed the Util classes to one class
    
    Also made the class purely static and added a test to ensure that.
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Added support for bean validations
    
    Specifically on Request Parameters
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed the bean validators to work with the new schema/service models
    
    (2022)
    Fixed checkstyle violations
    
    (2719)
    Fixes #2719 partially by setting the required flag when @NotBlank is used.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    If the @NotNull annotation is not present, don't do anything
    
    (1864)
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Added support for bean validations
    
    Specifically on Request Parameters
    Cleanup and code formatting
    Added support for composed bean validation constraints
    
    * Using Spring's AnnotationUtils to find annotations
    * Added new extractAnnotation() method to BeanValidators as it's common to all plugins
    * Refactored all plugins to use extractAnnotation() - so they now all support composed constraints
    Extracted methods for testability
    Split the plugin into seperate plugins for each of the annotations
    Integrated the bean validator library into publishables
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Fixed the bean validators to work with the new schema/service models
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Collapsed the Util classes to one class
    
    Also made the class purely static and added a test to ensure that.
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Added support for bean validations
    
    Specifically on Request Parameters
    Cleanup and code formatting
    Added support for composed bean validation constraints
    
    * Using Spring's AnnotationUtils to find annotations
    * Added new extractAnnotation() method to BeanValidators as it's common to all plugins
    * Refactored all plugins to use extractAnnotation() - so they now all support composed constraints
    Added tests for the bean validator plugins
    Extracted methods for testability
    Split the plugin into seperate plugins for each of the annotations
    Integrated the bean validator library into publishables
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed the bean validators to work with the new schema/service models
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    If the @NotNull annotation is not present, don't do anything
    
    (1864)
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Added support for bean validations
    
    Specifically on Request Parameters
    Cleanup and code formatting
    Added support for composed bean validation constraints
    
    * Using Spring's AnnotationUtils to find annotations
    * Added new extractAnnotation() method to BeanValidators as it's common to all plugins
    * Refactored all plugins to use extractAnnotation() - so they now all support composed constraints
    Extracted methods for testability
    Split the plugin into seperate plugins for each of the annotations
    Integrated the bean validator library into publishables
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Fixed the bean validators to work with the new schema/service models
    
    (2022)
    Replaced constructor with builder
    
    (2022)
    Added support for numeric facets
    
    (2022)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Cleanup and code formatting
    Added support for composed bean validation constraints
    
    * Using Spring's AnnotationUtils to find annotations
    * Added new extractAnnotation() method to BeanValidators as it's common to all plugins
    * Refactored all plugins to use extractAnnotation() - so they now all support composed constraints
    Removed default min/max values for @Min/@Max/@DecimalMin/@DecimalMax for #1521
    Updated copyright year and tidied up unnecessary casting
    Updated plugins for @Min/@Max/@DecimalMin/@DecimalMax to set the exclusiveMin/exclusiveMax properties
    Added bean validation support for @DecimalMin/@DecimalMax
    Fixes issue with allowable ranges e.g. infinity
    
    fixes #1504
    Extracted methods for testability
    Split the plugin into seperate plugins for each of the annotations
    Integrated the bean validator library into publishables
    checkstyle removed unused imports
    #review: removed fully qualified name
    code format
    fixed extractAnnotation
    fixed file header
    added IsNullAnnotationPlugin
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Fixed the bean validators to work with the new schema/service models
    
    (2022)
    Optimized imports per project style
    
    (1082)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Cleanup and code formatting
    Added support for composed bean validation constraints
    
    * Using Spring's AnnotationUtils to find annotations
    * Added new extractAnnotation() method to BeanValidators as it's common to all plugins
    * Refactored all plugins to use extractAnnotation() - so they now all support composed constraints
    Updated the copyright date
    #1296: Adding Pattern annotation support
    Extracted methods for testability
    Split the plugin into seperate plugins for each of the annotations
    Integrated the bean validator library into publishables
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Fixed the bean validators to work with the new schema/service models
    
    (2022)
    Added support for all the bean validation facets and udpated the tests
    
    (2022)
    Added support for numeric facets
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Collapsed the Util classes to one class
    
    Also made the class purely static and added a test to ensure that.
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Added support for bean validations
    
    Specifically on Request Parameters
    Cleanup and code formatting
    Added support for composed bean validation constraints
    
    * Using Spring's AnnotationUtils to find annotations
    * Added new extractAnnotation() method to BeanValidators as it's common to all plugins
    * Refactored all plugins to use extractAnnotation() - so they now all support composed constraints
    Removed default min/max values for @Min/@Max/@DecimalMin/@DecimalMax for #1521
    Updated plugins for @Min/@Max/@DecimalMin/@DecimalMax to set the exclusiveMin/exclusiveMax properties
    Fixes issue with allowable ranges e.g. infinity
    
    fixes #1504
    Extracted methods for testability
    Split the plugin into seperate plugins for each of the annotations
    Integrated the bean validator library into publishables
    Made the dependencies strictly provided only
    
    This way spring/jackson etc will always take the dependencies that were provided
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Moved apt plugins to the projects that use mapstruct
    
    This is so that the IDE can navigate to generated classes
    
    (2022)
    Build scripts cleanup
    
    Used the new form for plugin definitions and removed unused script blocks and rearranged the dependencies
    
    (2022)
    Upgrade libraries and plugin versions
    
    (2022)
    Fixed gradle deprecations
    
    (2688)
    Update dependency versions
    
    (2688)
    Upgraded dependency versions and libraries
    
    Moved to spring boot 2.0
    
    (2516)
    Updated libraries
    
    (2503)
    Fixed documentation/compiler warnings
    
    #1232
    Upgraded dependencies
    
    (2350)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Upgraded libraries prior to release
    
    (1899)
    Isolated the integration tests
    
    This is because circleci seems to be choking on these integration tests. To run the integration tests :springfox-swagger1:integrationTest
    
    (1694)
    Upgraded libraries before working on the story
    
    (1621)
    Include generated sources in published artifact
    
    fixes #1407
    Removed mapstruct gradle script in lieu of apt plugin
    Fixed the artifact based sharing of test code
    Updated the converage numbers
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Adjusted the spring dependencies to provided
    
    Also reverted to using the regular servlet api dependency
    Updated the build files
    Renamed modules and directories
    Renames modules to springdox-
    Updated the build scripts to publish all the publishable modules
    
    Also realized that nothing is pulling in the common module, so updated the configuration beans to import it
    Switched to using swagger 1.5 throughout the library
    Added swagger common module
    WIP
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Added tests for allowable values
    
    - Made the test artificats use the testCompile rather than compile dependencies
    Removed all scala dependencies by group
    [#538] Use the new DTOs in the controller
    Setup scala library excludes
    [#463] Adding javadoc to publication
    Adds a preRelease task to prevent duplicate publishing of released artifact versions.
    Publishing to https://oss.jfrog.org (not yet bintray)
    Externalizes maven pom filtering and sets groovy-all dependency to test.
    Adds maven provided scope to pom dependencies
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Isolated the integration tests
    
    This is because circleci seems to be choking on these integration tests. To run the integration tests :springfox-swagger1:integrationTest
    
    (1694)
    Made JsonSupport a trait
    
    Also code-reformatting
    (1694)
    Fixed an issue where Maps as parameters were not rendered correctly
    
    fixes #1306
    #801 #810 Add proper support for enums in response values and in schema objects
    Add tests to demonstrate using groovy models for services
    
    related to #752
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed the build
    
    The models are not correct however :-o
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#478] Adds a contract test for root api endpoints and removes redundant serrvices integ test
    [#434] Added support for filtering operations based on include patterns
    
    fixex #434
    Fix for abstract base types with open generic type with no constraint
    
    not working correctly. fixes #313. Thanks @jtheuer!
    Supporting constructor params as fields
    Testing xml custom configuration with new plugin
    
    mend
    Testing xml based swaggerspringmvc plugin. Adding draft documentation for 0.8.4 release.
    Isolated the integration tests
    
    This is because circleci seems to be choking on these integration tests. To run the integration tests :springfox-swagger1:integrationTest
    
    (1694)
    Made JsonSupport a trait
    
    Also code-reformatting
    (1694)
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed the build
    
    The models are not correct however :-o
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Supporting constructor params as fields
    Testing xml custom configuration with new plugin
    
    mend
    Testing xml based swaggerspringmvc plugin. Adding draft documentation for 0.8.4 release.
    Isolated the integration tests
    
    This is because circleci seems to be choking on these integration tests. To run the integration tests :springfox-swagger1:integrationTest
    
    (1694)
    Made JsonSupport a trait
    
    Also code-reformatting
    (1694)
    Fixed an issue where Maps as parameters were not rendered correctly
    
    fixes #1306
    #801 #810 Add proper support for enums in response values and in schema objects
    Add tests to demonstrate using groovy models for services
    
    related to #752
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Removed all the EnableWebMvc annotations
    
    related to #638
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    Fixed the build
    
    The models are not correct however :-o
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#478] Adds a contract test for root api endpoints and removes redundant serrvices integ test
    [#434] Added support for filtering operations based on include patterns
    
    fixex #434
    Fix for abstract base types with open generic type with no constraint
    
    not working correctly. fixes #313. Thanks @jtheuer!
    Supporting constructor params as fields
    Testing xml custom configuration with new plugin
    
    mend
    Testing xml based swaggerspringmvc plugin. Adding draft documentation for 0.8.4 release.
    Isolated the integration tests
    
    This is because circleci seems to be choking on these integration tests. To run the integration tests :springfox-swagger1:integrationTest
    
    (1694)
    Made JsonSupport a trait
    
    Also code-reformatting
    (1694)
    Cleanup dead code
    
    (1621)
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed the build
    
    The models are not correct however :-o
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Supporting constructor params as fields
    - Also fix unnecessary creation of Type Resolver #319
    Testing xml custom configuration with new plugin
    
    mend
    Testing xml based swaggerspringmvc plugin. Adding draft documentation for 0.8.4 release.
    Isolated the integration tests
    
    This is because circleci seems to be choking on these integration tests. To run the integration tests :springfox-swagger1:integrationTest
    
    (1694)
    Made JsonSupport a trait
    
    Also code-reformatting
    (1694)
    [#677] Adds a failing test for property placeholder issue
    Isolated the integration tests
    
    This is because circleci seems to be choking on these integration tests. To run the integration tests :springfox-swagger1:integrationTest
    
    (1694)
    Made JsonSupport a trait
    
    Also code-reformatting
    (1694)
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Supporting constructor params as fields
     #367 Fixes issue with application context having multiple RequestMappingHandlerAdapters
    
     #367 Uses equals to compare class name
    
    Reproduces issue #367
    
    Fails test when adapter is an autowire candidate
    [#677] Adds a failing test for property placeholder issue
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Testing xml custom configuration with new plugin
    
    mend
    Testing xml based swaggerspringmvc plugin. Adding draft documentation for 0.8.4 release.
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Find/replace springdox/springfox what could go wrong :)
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Supporting constructor params as fields
    Testing xml custom configuration with new plugin
    
    mend
    Testing xml based swaggerspringmvc plugin. Adding draft documentation for 0.8.4 release.
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    [#677] Adds a failing test for property placeholder issue
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Removed all the EnableWebMvc annotations
    
    related to #638
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    Modularized the configuration
    
    - Also added bean ordering so that spring plugins are always run before the swagger plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Testing xml custom configuration with new plugin
    
    mend
    Testing xml based swaggerspringmvc plugin. Adding draft documentation for 0.8.4 release.
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    Changes to accept the pr
    
    - Moved Accessor to the right package and changed visibilityi.
    - Changed the ObjectMapper back to how it was currently being set in a
      bean PostConstruct.
    - Renamed PropertyUtils to BeanPropertyDefinitions to match guava
      convention
    - Changed Qualifier to default for the ModepPropertiesProvider bean
    - Re-instated the JacksonSwaggerSupport foo to set the ObjectMapper in
      the PostConstruct
    Supporting constructor params as fields
    Testing xml based swaggerspringmvc plugin. Adding draft documentation for 0.8.4 release.
    Add plugin and adapter to simplify setup.
    Added default modelProvider to base spring configuration.
    Fix compiler warnings
    
    (2688)
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Formatting fixes
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Removed all the EnableWebMvc annotations
    
    related to #638
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    [#613] Renamed DocumentConfigurer to Docket
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Introduced documentation plugins
    Changes to accept the pr
    
    - Moved Accessor to the right package and changed visibilityi.
    - Changed the ObjectMapper back to how it was currently being set in a
      bean PostConstruct.
    - Renamed PropertyUtils to BeanPropertyDefinitions to match guava
      convention
    - Changed Qualifier to default for the ModepPropertiesProvider bean
    - Re-instated the JacksonSwaggerSupport foo to set the ObjectMapper in
      the PostConstruct
    Supporting constructor params as fields
    Added apiInfo method to plugin. Updating documentation.
    Testing xml custom configuration with new plugin
    
    mend
    Testing xml based swaggerspringmvc plugin. Adding draft documentation for 0.8.4 release.
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Removed all the EnableWebMvc annotations
    
    related to #638
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Fixing checkstyle issue
    [#677] Adds a failing test for property placeholder issue
    Publishing javadoc
    Initial release work
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Using only Annotations utility class instead of AnnotationUtils in DefaultResponseMessageReader
    Enabling lookup of ApiResponses annotation through entire inheritance hierarchy
    Migrated mixin based test support classes to traits
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava multimap
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Using media type to determine correct param type when expanding parameter
    tests were failing under windows because of line feed characters
    Initial work to re-write SDR support
    
    This work is loosely based on the grails work just to maintain
    consistency in the extensions.
    
    (1623)
    Fixed the ordering of the elements to be stable
    
    (1623)
    Fix test failures on windows (issue with newlines /r)
    Refactored ApiListingReferenceScanner to be a post processor
    
    That way all the properties needed for it are infered after we create
    the ApiListing itself and not the other way aroundi.
    Fixed all the tests after refactoring the ApiListingReferenceScanner
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Upgraded to swagger-core 1.5.3-M1
    
    Also upgraded other libraries. Addressed the security related changes
    in swagger models
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Removed AbsolutePathProvider as it had quite a few hardcoded values
    
    that don't make sense if we try to use this generically across swagger 1.2
    and swagger 2.0. The paths provided don't make sense. For e.g. getAppRoot
    has a hard coded host:port. Also the DOCUMENTATION_BASE_PATH is not the
    same across swagger 1.2 and swagger 2.0.
    
    related to #159
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed AuthorizationType to have a name property that represents the configuration name of the authorization scheme
    Renamed variable
    Renamed related classes to Documentation*
    Renamed Group to Documentation
    [#538] Removed the models package and collapsed it to the service package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Sorted api listing and api listing references in the models
    
    - Also applied defaultIfEmpty to builders
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Improved tests for readability
    
    - Chipping away at the test refactoring
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Introduced documentation plugins
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#434] Added support for filtering operations based on include patterns
    
    fixex #434
    the property providers use the naming strategy in both bean properties as well as fields
    
    closes #413
    #343 Sets swagger resourcePath on ApiListings
    Bean properties now support the property names as expected by the jackson serialization runtime
    
    Closes #400
    Support for naming strategies
    Supporting custom annotation readers
    Supporting custom annotation readers
    Changes to accept the pr
    
    - Moved Accessor to the right package and changed visibilityi.
    - Changed the ObjectMapper back to how it was currently being set in a
      bean PostConstruct.
    - Renamed PropertyUtils to BeanPropertyDefinitions to match guava
      convention
    - Changed Qualifier to default for the ModepPropertiesProvider bean
    - Re-instated the JacksonSwaggerSupport foo to set the ObjectMapper in
      the PostConstruct
    Supporting constructor params as fields
    Accounts for aliases as a result of JsonProperty annotation
    
    Fixes #320
    Using setter based autowiring on DefaultModelPropertyProvider to avoid BeanCurrentlyInCreationException/circular dependency.
    Fix to support for alternates in model propertiesi
    
    fixes #315
    - Also fix unnecessary creation of Type Resolver #319
    #317 Bug with ResourceGroup position
    #317 Positioning ResourceListing based on @Api.position()
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Providing a a default and relative swagger path provider
    Renaming path provider to absolute. Fixing typo in modelutils
    #282 Adding back absolute urls for resource listings
    #282 Reinstate swagger group concept
    Autowired the ObjectMapper ...
    
    Set up components that have the object mapper wired in as a dependency
    
    fixes #272
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Simplifying resource grouping strategy
    Changing controller/request mapping groupings to accommodate longer paths
    Upgrade to swagger core 3.2
    Testing accessors to fix coverage
    Adding http response codes and messages to api operations
    Changed to absolute uri's in api declarations and resources
    Changing paths on ApiListingReference to be relative to the swagger group to work with swagger UI.
    Introduced Swagger cache to simplify configuration.
    Changing base and resource uris. Base needs to be absolute for swagger ui and swagger code gen.
    Added ApiDescription to ApiListingScanner. Added support for multiple swagger resource listings from the same project. Some refactoring and cleanup.
    Adding support for media types. Added ApiListing scanner to generate swagger ApiListings.
    Adding spring config. Adding scala support to jackson mapper.
    Increasing coverage and general cleanup. Added support for ignorable annotations on controller methods.
    Added default swagger controller. Resolved more dependency issues and moved to correct scala version.
    Added default swagger controller. Resolved more dependency issues and moved to correct scala version.
    Initial ApiResource Listing. Checkstyle to fail during test phase
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Replaced WebMvc/WebFlux path providers with DefaultPathProvider
    
    (1773)
    Removed deprecated api in PathProvider
    
    Also simplified the usages as a result of no longer needing servlet context to resolve the paths
    
    (1773)
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    Code cleanup and reformatting
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrated from guava Predicat
    migrate from guava Predicate
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Using media type to determine correct param type when expanding parameter
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    Major changes to accomodate controller-less specs
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Removed the dependence on ResourceGroupingStrategy to get default tags
    
    also the ApiListingReference scanner no longer needs the resource grouping strategy to create
    resource groups
    
    relates to #454
    resolves #919
    Refactored ApiListingReferenceScanner to be a post processor
    
    That way all the properties needed for it are infered after we create
    the ApiListing itself and not the other way aroundi.
    Fixed all the tests after refactoring the ApiListingReferenceScanner
    Added support for tags as a first class concept
    
    Currently the tags are inferred based on a combination of @Api#value() and Class name.
    Going forward it can use the tags support built into the @Api annotations
    
    fixes #737
    Added a test to verify the behavior when sorting dockets
    
    fixes #855
    Moved the path related classes to the path package
    Refactored the bootstrapper to take in a RequestHandlerProvider
    
    This is a step forward to support different request handler providers. It is also
    incidentally used to create a predictable ordering of request handlers that are
    processed by the bootstrapper
    
    related to #682, #825
    Renamed handlerMappings requestHandlers
    
    related to #682, #825
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Removed AbsolutePathProvider as it had quite a few hardcoded values
    
    that don't make sense if we try to use this generically across swagger 1.2
    and swagger 2.0. The paths provided don't make sense. For e.g. getAppRoot
    has a hard coded host:port. Also the DOCUMENTATION_BASE_PATH is not the
    same across swagger 1.2 and swagger 2.0.
    
    related to #159
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed the build
    
    The models are not correct however :-o
    [#538] Removed the models package and collapsed it to the service package
    [#538] Moved interfaces to the root documentation packages
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#538] Improved tests for readability
    
    - Chipping away at the test refactoring
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Introduced documentation plugins
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Cleanup and improved test coverage
    [#434] Added support for filtering operations based on include patterns
    
    fixex #434
    Adding the posibility of ignoring an entire controller
     - Ingoring all methods of a controller by adding an excluded annotation
        on class level
     - @ApiIgnore can now be specified on Type, but also on Parameter and has
       been added to the defaultIgnorableParameterTypes Set
    #317 Bug with ResourceGroup position
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Making path provider a template and moving more path related logic into SwaggerPathProvider
    Providing a a default and relative swagger path provider
    Renaming path provider to absolute. Fixing typo in modelutils
    #282 Adding back absolute urls for resource listings
    When substituting types the base types should not be included as models
    
    Fixes #254
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    #208 Allowing relative urls
    Simplifying resource grouping strategy
    Changing controller/request mapping groupings to accommodate longer paths
    Changing jackson version. Setting correct paths on ApiDescriptions. Overriding api group with @Api annotation
    Adding ability to skip url path portions for api groupings
    Changed to absolute uri's in api declarations and resources
    Changing paths on ApiListingReference to be relative to the swagger group to work with swagger UI.
    Changed to use regex path matcher instead of ant.
    Cleanup
    Introduced Swagger cache to simplify configuration.
    Changing base and resource uris. Base needs to be absolute for swagger ui and swagger code gen.
    Added ApiDescription to ApiListingScanner. Added support for multiple swagger resource listings from the same project. Some refactoring and cleanup.
    Adding support for media types. Added ApiListing scanner to generate swagger ApiListings.
    Adding inclusion patterns on listing scanner - defaults to all paths
    Adding spring config. Adding scala support to jackson mapper.
    Increasing coverage and general cleanup. Added support for ignorable annotations on controller methods.
    Added default swagger controller. Resolved more dependency issues and moved to correct scala version.
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Removed the PathProviderFactory abstraction
    
    (1773)
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    Update tests with new factory for path provider. Remove unused code. Update headers with correct year.
    Updated copyright year
    
    (1082)
    Using media type to determine correct param type when expanding parameter
    Updated tests to use the schema plugin for synthetic models
    
    (2311)
    Reformatting to match style guide
    
    (2311)
    Fixed the other test
    
    Looks like the model count differs and does seem like the test was validating an invalid model count.
    
    (2056)
    Fixes for enums.
    Fixes and coverage.
    Fixes for tests.
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Merge method-level and class-level @ApiResponses annotations. Fixes #1465
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Fixes field properties provider issue found while fixing the code coverage build issue
    
    Uncovered the fact that the field model properties provider was working
    incorrectly. This fixes that problem also removed some ignored tests.
    
    related to #752
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Took care of low hanging TODOs
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for default providers per documentation type
    Renamed the items property to modelRef, that way it can be repurposed
    
    for modelling collections as well as regular types. That way we wont need to do gymnastics to
    support swagger 2.0
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Made ApiModelReader, ApiDescriptionReader and ApiOperationReader return concrete results
    [#538] Refactored the api model reader to be factored into plugins
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Improved tests for readability
    
    - Chipping away at the test refactoring
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Introduced documentation plugins
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#440] Add support for generating models that are represented in the ApiResponse annotations
    
    closes #440
    Caught up with all the compatible versions
    Revert "Depend on Swagger 1.3.8; Pass false to the ApiDescription constructor"
    Depend on Swagger 1.3.8; Pass false to the ApiDescription constructor
    Fix for abstract base types with open generic type with no constraint
    
    not working correctly. fixes #313. Thanks @jtheuer!
    Fine-grained tests to check if #409 was responsible of #413
    Added test to verify #283
    
    Closes #283 - not reproducible
    Added test to demonstrate issue #378: missing serialize only properties during scan
    
    * Added spec to ApiModelReaderSpec.groovy
    * Added test data model with serialize only property
    * Added resource method using data model as return and request param
    
    Conflicts:
    
            swagger-springmvc/src/test/groovy/com/mangofactory/swagger/readers/ApiModelReaderSpec.groovy
    
    Conflicts:
            swagger-springmvc/src/test/groovy/com/mangofactory/swagger/readers/ApiModelReaderSpec.groovy
    Supporting constructor params as fields
    Added specification covering ApiModelProperty description (issue #374)
    - Also fix unnecessary creation of Type Resolver #319
    Code cleanup
    Removing jackson scala module
    When substituting types the base types should not be included as models
    
    Fixes #254
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    filter by annotation @RequestBody added
    tests Added
    Removing use of swagger ModelUtil to generate models - flaky
    Changing back to non package class names. Now correctly working model schema for sample responses but not puts and posts
    Changing response models and parameter models to fully qualified names
    Improving model support
    Fully qualifying response class names and adding test for annotated models
    Initial model creation using swagger provided scala model parsing
    Migrated mixin based test support classes to traits
    
    (2022)
    Made MapperSupport a trait
    
    (1621)
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Un-nested the jackson and mappers package
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Adding more tests to fix the test coverage
    [#538] Added tests for allowable values
    
    - Made the test artificats use the testCompile rather than compile dependencies
    Tightened the builder api
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Updated tests to account for the change from Map to VenderExtensions
    
    (1636)
    Made MapperSupport a trait
    
    (1621)
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed AuthorizationType to have a name property that represents the configuration name of the authorization scheme
    Un-nested the jackson and mappers package
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Adding more tests to fix the test coverage
    Removed deprecrations prior to 3.x
    
    (2022)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixes for ModelDTO.
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Made MapperSupport a trait
    
    (1621)
    Added support for Contact as a first class object
    Fixed the unique operation name generation
    
    This is to align with the advertized expectation that when a nickname is
    supplied then the unique id for the operation would respect that intent
    as much as possible without sacrificing the ability to ONLY generate unique
    operation names.
    
    fixes #1066
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Nickname is back
    
    related to #659
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Made the modelRef property of the ModelProperty a computed value
    
    Extracted the common logic to infer the modelRef given a resolved type. Also
    When the type was altered via the @ApiModelProperty annotation the model ref
    did not reflect the newly inferred model type.
    
    This fix makes removes the redundancy in the type and the modelRef attribute
    
    fixes #666
    Upgraded to swagger-core 1.5.3-M1
    
    Also upgraded other libraries. Addressed the security related changes
    in swagger models
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed the build by adding tests
    Add a top level documentation object
    
    Documentation object is a service level model, that now plays host to
    media types the service produces and consumes. the schemes the service
    supports and also the base path of the api
    Un-nested the jackson and mappers package
    Made parameter use modelRef fully rather than just for the item types
    Made ModelProperty exclusively use ModelRef rather than typeName
    Replaced Opertion responseClass with responseModel
    Replaced response class with response model
    Updated the model properties to model ref
    Renamed the items property to modelRef, that way it can be repurposed
    
    for modelling collections as well as regular types. That way we wont need to do gymnastics to
    support swagger 2.0
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Removed the asResolved method and inlined all the invocations
    [#538] Sorted api listing and api listing references in the models
    
    - Also applied defaultIfEmpty to builders
    [#538] This is a superfluous ordering support as most request mappings do not include multiple patterns
    
    In any case, this provides a way to sort the operations within an api
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Adding more tests to fix the test coverage
    Made MapperSupport a trait
    
    (1621)
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Made MapperSupport a trait
    
    (1621)
    Correctly represent byte arrays
    
    fixes #1430
    Added support for nested model references
    
    especially useful for 2D arrays
    Added model ref interface
    
    Also added two dimensional array substitution support
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    Un-nested the jackson and mappers package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Adding more tests to fix the test coverage
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Cleanup and fixes as a result of changes in core
    
    (2022)
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    WIP
    Using media type to determine correct param type when expanding parameter
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Removed @ApiParam from RequestMappingContext
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#388] Added support to walk the method declaration graph to find specified annotations
    
    resolves #388
    Support for naming strategies
    Unfolding readers.operation.*
    Unfolding readers.operation.*
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Changing controller/request mapping groupings to accommodate longer paths
    Adding ApiParameter support
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Added support for aggregating/transforming content parameters to an object
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Removed the PathProviderFactory abstraction
    
    (1773)
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    Update tests with new factory for path provider. Remove unused code. Update headers with correct year.
    Updated copyright year
    
    (1082)
    Using media type to determine correct param type when expanding parameter
    Formatting
    
    (1937)
    Moved to use getters as a primary source for properties
    
    This is a departure from the initial assumption that bean properties with backing fields will only be supported. This causes types like Pageable which are interfaces to no longer be supported. With this change we use getters as the primary source of truth and optionally for backwards compatibility we also use the fields, if present as a source for annotations
    
    (1937)
    Polished
    
    (2056)
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    More fixes
    
    (1829)
    fixing tests
    Relaxed the requirement for getters/setters on expandables
    
    Since we have a check for recursively defined model attributes, there is no need for this check any more.
    
    (1603)
    Improved coverage and upgraded compatibility with boot 1.3.6
    Simplified the operation context tests
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixed the tests and the contracts to reflect the improved model attribute support
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Additional test cases for read only flag
    
    Test case for read only flag in swagger 2, and no impact to swagger 1
    Fix to merge parameter definitions and not duplicate the definitions
    
    fixes #813
    Fixed the plugin dependencies so that its not constructor injected
    
    This is so that circular bean dependencies can give spring a change to wire all the dependencies. In the case of application being run java application
    with a main method, spring boot is unable to wire in the dependencies as it infers the bean creation order.
    
    fixes #702
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for default providers per documentation type
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    Made model attribute expander a bean
    
    - Also refactored test to be more readable
    [#538] Improved tests for readability
    
    - Chipping away at the test refactoring
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#476] Allows specifying alternative types for expanded model attributes
    ModelAttribute expansion for collection extensions
    
    Fixes a bug where ModelAttributeParameterExpander
    was incorrectly handling parameters that were extensions
    of collections. For example, any custom extension of a HashSet should
    be treated as a Set but instead it was being treated as a custom type.
    Check if field is of same type as parent when expanding ModelAttribute
    
    To avoid StackOverflowError when expanding ModelAttributes,
    skip call to `expand` when a treeish field is encountered. #465
    @ModelAttribute Flattening Improvements
    
    When complex objects marked with @ModelAttribute in a controller method
    are flattened into individual parameters:
    1) Only consider properties that have a getter and setter.
    This makes it easy for someone to exclude any parameter
    that is not supposed to be set by a request param or has
    a derived value.
    2) Include properties from parent objects so that we
    don’t alienate coders who have form beans with an
    inheritance hierarchy
    Moved the package for OperationParameterReader and adjusted visibility of classes
    Fixed allowableValues not getting set for enum
    
    Fixed bug where the allowableValues were not getting
    set on enums when the enum property in a container
    object had an ApiParam annotation. Apparently, if you
    declare an ApiParam and don’t put any configuration in
    for the allowableValues, the allowableValues will be a
    blank String instead of null. The bug was that the code
    was checking for a null allowableValues but not for a
    blank String.
    @ModelAttribute expansion must add enum values
    
    @ModelAttribute flattening on controller method params
    will now automatically add allowableValues for enum
    types.
    Fixes and code coverage
    
    Added code coverage and small fixes discovered by
    better testing
    @ModelAttribute Request Params Now Expanded
    
    Spring controller request params that are marked with @ModelAttribute
    will now be flattened. In other words, instead of generating an
    operation model that contains a complex object in the request, the
    operation model will
    appear to have been defined as accepting individual
    simple type request parameters.
    
    Using the @ModelAttribute on a controller method param
    declares that Spring should bind request parameters to
    the model object. As such, the Swagger model should
    really show individual parameters, and not a complex
    object type.
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Supporting custom annotation readers
    Added support to populate parameters from the parameter request conditions
    
    resolves 277
    - Also fix unnecessary creation of Type Resolver #319
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Documenting ignorable method param annotations feature
    changed test to cover feature logic
    Changing controller/request mapping groupings to accommodate longer paths
    Adding http response codes and messages to api operations
    Refactor to use SwaggerGlobalSettings as opposed to adding to map context each time
    Supporting operation parameter primitive data types
    Parameter type exclusions. Change path variables to use curly braces as opposed to round braces.
    Adding ApiParameter support
    Migrated mixin based test support classes to traits
    
    (2022)
    Made MapperSupport a trait
    
    (1621)
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Removed mapping expressions used for swagger1
    
    Also removed reference to Impl; These classes shouldnt be refered to directly
    Also reverted the mapstruct library upgrade to beta4 as it isnt
    available on jcenter yet.
    Un-nested the jackson and mappers package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Fixed the api listing grouping issue with swagger 1.2
    
    fixes #727
    Removed PropertySourcedMapping
    
    This is no longer needed to support property driven mapping resolution
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    migrate from guava multimap
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Using media type to determine correct param type when expanding parameter
    Added tests around exception handling
    
    (1983)
    Appended the host name when overriden in the docket for swagger 1.2
    
    Before this change the host name had no effect on swagger 1.2 specs. We only append the host name if specified.
    
    fixes #1924
    fix remapping placeholder issue
    Made JsonSupport a trait
    
    Also code-reformatting
    (1694)
    Modified the controller tests to be unit tests
    
    Since the gradle builds were timing out, this makes it easier and quicker to test rather than loading up the spring context.
    
    related to #1621
    Updated the tests to use the random port
    
    For some reason these were not failing tests :-o!!
    
    (1621)
    Made the controllers constructor injected
    
    Also fixed the test to use the spring 1.4.x testing improvements
    
    (1621)
    Refactored ApiListingReferenceScanner to be a post processor
    
    That way all the properties needed for it are infered after we create
    the ApiListing itself and not the other way aroundi.
    Fixed all the tests after refactoring the ApiListingReferenceScanner
    Fixes the problem when multiple api listings are associated with the same api declaration
    
    Swagger 1.2 does not support this model, hacked to only return the first api listing. This needs
    to be fixed to merge the api listings by group, but thats for a different commit. This only
    fixes the problem effectively for 2.0 of the spec, and spec 1.2 is no worse than it was before this
    fix.
    
    related to #727
    Extracted common logic to setup the JsonSerializer
    
    Also made the JsonSerialzer a component, that way every controller does not need to do the object mapper setup boilerplate code.
    
    related to #701
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Renamed related classes to Documentation*
    Renamed GroupBuilder to DocumentationBuilder
    Renamed Group to Documentation
    Fixed the build
    
    The models are not correct however :-o
    Un-nested the jackson and mappers package
    Renamed the group builder method to reflect what it is
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Improved tests for readability
    
    - Chipping away at the test refactoring
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Introduced documentation plugins
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Supporting constructor params as fields
    Refactor JacksonSwaggerSupport to use and autowired bean: springsMessageConverterObjectMapper.
    #317 Positioning ResourceListing based on @Api.position()
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    #282 Reinstate swagger group concept
    Added request mapping to the default controller to ignore swagger groups ...
    
    ... when looking up api listing by resource key
    
    Fixes #241
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Changing serialization of swagger models to produce correct authorization json format
    Adding jackson serialiaer to deserialize swagger AuthorizationTypes
    Fixing incorrect import
    Adding auth to top level resource listing and to each operation
    Introduced Swagger cache to simplify configuration.
    Added ApiDescription to ApiListingScanner. Added support for multiple swagger resource listings from the same project. Some refactoring and cleanup.
    Increasing coverage and general cleanup. Added support for ignorable annotations on controller methods.
    Updating groovy and spock version
    Added default swagger controller. Resolved more dependency issues and moved to correct scala version.
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Replaced WebMvc/WebFlux path providers with DefaultPathProvider
    
    (1773)
    Code cleanup and reformatting
    
    (1773)
    Updated copyright year
    
    (1082)
    Using media type to determine correct param type when expanding parameter
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fix for @ApiOperation(hidden=true) not being honored
    
    fixes #995
    Added ApiDescriptionLookup to help with hypermedia support going forward
    
    The idea is that once this infrastructure is in place, when can then do interesting things
    with spring-hateoas to provide access to ControllerLinkBuilder implementations to access
    api descriptions based on controller method
    Fixed the bug where the caching was incorrect for operations without
    
    specific http method
    - Renamed the configuration class
    Moved the path related classes to the path package
    Made the sanitizer a path decorator
    Added support for uri templates in query params
    Added incubating feature for providing path decorators as plugins
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Removed AbsolutePathProvider as it had quite a few hardcoded values
    
    that don't make sense if we try to use this generically across swagger 1.2
    and swagger 2.0. The paths provided don't make sense. For e.g. getAppRoot
    has a hard coded host:port. Also the DOCUMENTATION_BASE_PATH is not the
    same across swagger 1.2 and swagger 2.0.
    
    related to #159
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Address a few low hanging todos
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Sorted api listing and api listing references in the models
    
    - Also applied defaultIfEmpty to builders
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Made ApiModelReader, ApiDescriptionReader and ApiOperationReader return concrete results
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Improved tests for readability
    
    - Chipping away at the test refactoring
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#434] Added support for filtering operations based on include patterns
    
    fixex #434
    test that fails when more than one parameter
    
    created test that fails when more than ONE parameter of type foo:{foo}
    Supporting custom annotation readers
    Supporting custom annotation readers
    - Also fix unnecessary creation of Type Resolver #319
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Providing a a default and relative swagger path provider
    Moving sanitize request mapping out to the only class that uses it
    Renaming path provider to absolute. Fixing typo in modelutils
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Simplifying resource grouping strategy
    Changing jackson version. Setting correct paths on ApiDescriptions. Overriding api group with @Api annotation
    Adding http response codes and messages to api operations
    Parameter type exclusions. Change path variables to use curly braces as opposed to round braces.
    Introduced Swagger cache to simplify configuration.
    Changing base and resource uris. Base needs to be absolute for swagger ui and swagger code gen.
    First stab at ApiOperations.
    Changed the internal represenation of file
    
    This way if we encounter a type called File we resolve to the right type
    
    (1632)
    Added better support for BigDecimal & BigInteger
    
    fixes #1432
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Adding more tests to fix the test coverage
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Optimized build to produce java 8 compatible source code
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    migrate from guava lists
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    updated urls, links from wordnik.com to swagger.io
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    Optimized build to produce java 8 compatible source code
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    updated urls, links from wordnik.com to swagger.io
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed the swagger json to match the currently supported output
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Optimized build to produce java 8 compatible source code
    Fixes for ModelDTO.
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Optimized build to produce java 8 compatible source code
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Optimized build to produce java 8 compatible source code
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Optimized build to produce java 8 compatible source code
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Optimized build to produce java 8 compatible source code
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Replaced Opertion responseClass with responseModel
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds builders for some of the primary swagger dtos
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    Optimized build to produce java 8 compatible source code
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds builders for some of the primary swagger dtos
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Optimized build to produce java 8 compatible source code
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Optimized build to produce java 8 compatible source code
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds builders for some of the primary swagger dtos
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Code cleanup and reformatting
    
    (1773)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixes for ModelDTO.
    Fixed the api listing grouping issue with swagger 1.2
    
    fixes #727
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Took care of low hanging TODOs
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds builders for some of the primary swagger dtos
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Optimized build to produce java 8 compatible source code
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Optimized build to produce java 8 compatible source code
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Optimized build to produce java 8 compatible source code
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    clean up static imports
    Filtered out the void properties and collection of voids
    
    When mapping to swagger objects we filter out the voids, array of voids, or list of voids
    since it doesnt make sense anyways to be part of the model properties collection.
    
    Also fixed the coverage to not include mapstruct generated mappers
    
    fixes #1147
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    Fix test failures on windows (issue with newlines /r)
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Un-nested the jackson and mappers package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    updated urls, links from wordnik.com to swagger.io
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Un-nested the jackson and mappers package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Extracted common logic to setup the JsonSerializer
    
    Also made the JsonSerialzer a component, that way every controller does not need to do the object mapper setup boilerplate code.
    
    related to #701
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Upgraded compiler to java 11
    
    Additional fixes
    Cleanup and fixes as a result of changes in core
    
    (2022)
    Removed the PathProviderFactory abstraction
    
    (1773)
    Replaced WebMvc/WebFlux path providers with DefaultPathProvider
    
    (1773)
    Reformatted test
    
    (1773)
    Removed deprecated api in PathProvider
    
    Also simplified the usages as a result of no longer needing servlet context to resolve the paths
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    Fix some of the tests after changes.
    Update tests with new factory for path provider. Remove unused code. Update headers with correct year.
    #1570 Add examples support
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Using media type to determine correct param type when expanding parameter
    Updated tests and contracts to account for the new rules
    add native support for jdk8 jsr310 date types
    
    Fix #1544
    Added support for vendor extensions on Parameters and ResponseModels
    
    fixes #1137
    Fixed the tests that break when building with jdk 8
    
    fixes #1332
    Revert "fixed tests"
    
    This reverts commit 79d280c9b4474c70086d782866814d0c1c4c9d82.
    fixed tests
    Added native support for Optional types
    
    resolves #1199
    Added support for ResponseHeaders
    
    fixes #937
    Fixed the test coverage for #1046
    Added support for Contact as a first class object
    Added support for nested model references
    
    especially useful for 2D arrays
    Added model ref interface
    
    Also added two dimensional array substitution support
    Moved the path related classes to the path package
    Feature to support multiple security contexts
    
    Currently each docket only supports one class paths to apply a security
    context around. This fix makes it such that the Docket can be defined with
    multiple security contexts, on for each class of paths
    
    fixes #697
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    [#667] Allowing for Dockets with a null groupName
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Replacing Auth* with Security* it seems very confusing the way it is currently named
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    [#613] Renamed DocumentConfigurer to Docket
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for default providers per documentation type
    [#538] Removed the models package and collapsed it to the service package
    [#538] Moved interfaces to the root documentation packages
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Sorted api listing and api listing references in the models
    
    - Also applied defaultIfEmpty to builders
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Introduced documentation plugins
    Upgraded dependencies
    [#539] Prevents excludeAnnotations from modifying the defaults in SpringSwaggerConfig
    [#539] Prevents excludeAnnotations from modifying the defaults in SpringSwaggerConfig
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed the broken build
    [#383 #532] Using alternative generic ResponseEntity and HttpEntity
    [#438] Reworked the response message readers
    
    - Deprecated class that will go away in a future version
    - Introduced the a configuration in the plugin to turn on or off the
      default response message status codes
    
    fixes #349, #451, #457
    Supporting constructor params as fields
    #317 Providing a means to sort the ApiDescriptions within an ApiListing.
    - Also fix unnecessary creation of Type Resolver #319
    Added test for directModelSubstitute(..)
    Add some continence methods for model substitution rules. Added some javadoc to SwaggerSpringMvcPlugin.java.
    #317 Positioning ResourceListing based on @Api.position()
    Allowing configuration of apiVersion string.
    Added apiInfo method to plugin. Updating documentation.
    Add plugin and adapter to simplify setup.
    Added default modelProvider to base spring configuration.
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixes for typo and names.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Test fixes for swagger 1
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Added support for vendor extensions on Parameters and ResponseModels
    
    fixes #1137
    Added support for isRequired property from jackson
    
    fixes #1294
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved packages around in swagger-models
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Fixed the tests because of the string literals not moved during the package rename
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Cleanup and improved test coverage
    [#469] Fixed the arrays inside generics problem
    
    fixes #469
    the property providers use the naming strategy in both bean properties as well as fields
    
    closes #413
    Bean properties now support the property names as expected by the jackson serialization runtime
    
    Closes #400
    Support for naming strategies
    Supporting constructor params as fields
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Migrated mixin based test support classes to traits
    
    (2022)
    Unit tests.
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Added unit tests and updated contract tests
    
    (2182)
    Fixes for typo and names.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Test fixes for swagger 1
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Added support for vendor extensions on Parameters and ResponseModels
    
    fixes #1137
    Added support for isRequired property from jackson
    
    fixes #1294
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Removed unused variables and method calls
    Updated the model property resolution to use the accessors/factory methods
    
    and constructors from the bean that jackson infers. This fixes a problem where scala
    classes do not participate in the property inference. This also implements the long
    standing feature request to support constructor and @JsonCreator annotated factory methods
    that are the primary source for properties.
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Relaxing linelength checkstyle rule
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Fixed the tests because of the string literals not moved during the package rename
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Cleanup and improved test coverage
    [#494] Add support for JsonGetter and JsonSetter annotations
    
    resolves #494
    the property providers use the naming strategy in both bean properties as well as fields
    
    closes #413
    Bean properties now support the property names as expected by the jackson serialization runtime
    
    Closes #400
    Support for naming strategies
    Enum values should trump ApiModeProperty annotations
    
    - Cleanup to move inline Functions to a Utility class
    Honoring ApiModelProperty--author=fgaule <federico.gaule@gmail.com>
    Changes to accept the pr
    
    - Moved Accessor to the right package and changed visibilityi.
    - Changed the ObjectMapper back to how it was currently being set in a
      bean PostConstruct.
    - Renamed PropertyUtils to BeanPropertyDefinitions to match guava
      convention
    - Changed Qualifier to default for the ModepPropertiesProvider bean
    - Re-instated the JacksonSwaggerSupport foo to set the ObjectMapper in
      the PostConstruct
    Supporting constructor params as fields
    Fixed #374 - Fixed ApiModelProperty code to cover both getter/setter
    
    * Removed ApiModelProperty description extraction from BeanModelProperty
    * Added ApiModelProperty desc code to DefaultModelPropertiesProvider
    * ApiModelProperty annotation code now covers getter and setter of a property
    * Updated BeanModelPropertySpec for new constructor
    Accounts for aliases as a result of JsonProperty annotation
    
    Fixes #320
    Fix to support for alternates in model propertiesi
    
    fixes #315
    - Also fix unnecessary creation of Type Resolver #319
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava multimap
    migrating from guava Strings
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    Consolidated duplicate code in HostNameProvider to swagger-common
    
    (2448)
    Appended the host name when overriden in the docket for swagger 1.2
    
    Before this change the host name had no effect on swagger 1.2 specs. We only append the host name if specified.
    
    fixes #1924
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Fixed the build and also fixed depcration warnings
    Fixed coverage report error
    Added support to render subtypes in swagger1 and swagger2 libraries
    
    (1151)
    (868)
    Formatting fix
    
    (1151)
    (868)
    Added support for Contact as a first class object
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Nickname is back
    
    related to #659
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Upgraded to swagger-core 1.5.3-M1
    
    Also upgraded other libraries. Addressed the security related changes
    in swagger models
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Fixed the build and also fixed depcration warnings
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Correctly represent byte arrays
    
    fixes #1430
    Added model ref interface
    
    Also added two dimensional array substitution support
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    Removed mapping expressions used for swagger1
    
    Also removed reference to Impl; These classes shouldnt be refered to directly
    Also reverted the mapstruct library upgrade to beta4 as it isnt
    available on jcenter yet.
    WIP
    Un-nested the jackson and mappers package
    Made ModelProperty exclusively use ModelRef rather than typeName
    Replaced Opertion responseClass with responseModel
    Replaced response class with response model
    Updated the model properties to model ref
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Removed PropertySourcedMapping
    
    This is no longer needed to support property driven mapping resolution
    
    (2022)
    Removed the PathProviderFactory abstraction
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    Update tests with new factory for path provider. Remove unused code. Update headers with correct year.
    Removed the property sources configurer yay!
    
    Since we now resolve imperatively it is no longer required to have this defined. Also remove the *web package from component scan so that we can manually register the two controllers using new PropertySourcedRequestMappingHandler.
    
    (1770)
    Fixed the bug where the caching was incorrect for operations without
    
    specific http method
    - Renamed the configuration class
    Extracted common logic to setup the JsonSerializer
    
    Also made the JsonSerialzer a component, that way every controller does not need to do the object mapper setup boilerplate code.
    
    related to #701
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Removing some redunant packages and renamed swagger 1.2
    
    configuration to match the convention in swagger 2.0
    
    related to #667
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Removed all the WebMvcConfigurerAdapters and created a BeanPostProcessor
    
    that can assist with finding all the relavent ObjectMappers in play. This
    technique is less intrusive than the WebMvcConfigurationAdapter + @EnableWebMvc
    technique because spring-boot assumes that when one of those or an implementation
    of WebMvcConfigurationSupport implementation is in play, it will refuse to particpate
    in the auto configuration.
    
    related to #638
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Updated copyright year
    
    (1082)
    General cleanup and polish
    
    (1941)
    Extracted common logic to setup the JsonSerializer
    
    Also made the JsonSerialzer a component, that way every controller does not need to do the object mapper setup boilerplate code.
    
    related to #701
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Removing some redunant packages and renamed swagger 1.2
    
    configuration to match the convention in swagger 2.0
    
    related to #667
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    [#613] Renamed DocumentConfigurer to Docket
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Modularized the configuration
    
    - Also added bean ordering so that spring plugins are always run before the swagger plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#463] Adding javadoc to publication
    Testing xml based swaggerspringmvc plugin. Adding draft documentation for 0.8.4 release.
    Add plugin and adapter to simplify setup.
    Added default modelProvider to base spring configuration.
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrating from guava Strings
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Moved common readers to the swagger common module
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Removed @ApiParam from RequestMappingContext
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixed the api listing grouping issue with swagger 1.2
    
    fixes #727
    Added api to contribute defaults
    
    The earlier defaults plugin API was janky and was not conducive to layering defaults and extensible. Added the apply API so that defaults can be contirbuted to via plugins
    
    (3354)
    Formatting change
    
    (3348)
    Removed the PathProviderFactory abstraction
    
    (1773)
    Update tests with new factory for path provider. Remove unused code. Update headers with correct year.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Removed the property sources configurer yay!
    
    Since we now resolve imperatively it is no longer required to have this defined. Also remove the *web package from component scan so that we can manually register the two controllers using new PropertySourcedRequestMappingHandler.
    
    (1770)
    Formatting related to #939
    Fixes the default rules such that Map<String, String> is not rendered as
    
    an Object. fixes #747
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for default providers per documentation type
    Removed PropertySourcedMapping
    
    This is no longer needed to support property driven mapping resolution
    
    (2022)
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Cleanup and fixes as a result of changes in core
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava multimap
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Appended the host name when overriden in the docket for swagger 1.2
    
    Before this change the host name had no effect on swagger 1.2 specs. We only append the host name if specified.
    
    fixes #1924
    Introduced the new property sourced mapping annotation
    
    Adjusted the request mapping to now use the default url as the path mapping. If the property sourced mapping is not resolvable we use this default value.
    
    (1770)
    Namespaced the property sources using placeholder prefix
    
    Instead of the default `${` we use `$SPRINGFOX{` this way the configurer does not interfere with library users.
    
    (1621)
    Made the controllers constructor injected
    
    Also fixed the test to use the spring 1.4.x testing improvements
    
    (1621)
    Added support for tags as a first class concept
    
    Currently the tags are inferred based on a combination of @Api#value() and Class name.
    Going forward it can use the tags support built into the @Api annotations
    
    fixes #737
    Made the SwaggerResource#getLocation() return a path thats not qualified
    
    using the ?group=<group-name> query parameter. This is to prevent the bug in swagger-ui/ swagger.js
    where the api listing is resolved by appending the api url to the url on the swagger page.
    
    more details available @ https://github.com/swagger-api/swagger-ui/issues/1245
    
    related to #727
    Fixed the api listing grouping issue with swagger 1.2
    
    fixes #727
    Edited todo item to merge api-listings for swagger 1.2
    
    related to #727
    Fixes the problem when multiple api listings are associated with the same api declaration
    
    Swagger 1.2 does not support this model, hacked to only return the first api listing. This needs
    to be fixed to merge the api listings by group, but thats for a different commit. This only
    fixes the problem effectively for 2.0 of the spec, and spec 1.2 is no worse than it was before this
    fix.
    
    related to #727
    Extracted common logic to setup the JsonSerializer
    
    Also made the JsonSerialzer a component, that way every controller does not need to do the object mapper setup boilerplate code.
    
    related to #701
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Removes jsp from swagger-ui
    - Adds an endpoint to list all of the swagger resources within a running application
    - Added a base class for swagger contract tests
    Fixes the type in the controller path configuration property
    
    fixes #645
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Renamed related classes to Documentation*
    Renamed Group to Documentation
    Moved the path and grouping strategy to common
    Un-nested the jackson and mappers package
    [#538] Removed the models package and collapsed it to the service package
    [#538] Moved interfaces to the root documentation packages
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Introduced documentation plugins
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Normalized spaces and imports
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    #282 Reinstate swagger group concept
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Added request mapping to the default controller to ignore swagger groups ...
    
    ... when looking up api listing by resource key
    
    Fixes #241
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Introduced Swagger cache to simplify configuration.
    Changing base and resource uris. Base needs to be absolute for swagger ui and swagger code gen.
    Added ApiDescription to ApiListingScanner. Added support for multiple swagger resource listings from the same project. Some refactoring and cleanup.
    Ignore documentation  controller so it does not appear on swagger ui
    Adding spring config. Adding scala support to jackson mapper.
    Increasing coverage and general cleanup. Added support for ignorable annotations on controller methods.
    Added default swagger controller. Resolved more dependency issues and moved to correct scala version.
    clean up static imports
    migrate from guava Cache and removed Guava
    Updated mappers to support 2d arrays for swagger2
    
    swagger 1.2 does not (and will not support) 2d arrays
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    [#538] Removed unused methods
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Took care of low hanging TODOs
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Use the new DTOs in the controller
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixes for ModelDTO.
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Model properties are sorted alpabetically
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed the swagger json to match the currently supported output
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava ImmutableMap, Joiner, Splitter
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    migrate from guava lists
    migrated guava Function
    Migraiting from FluentIterable
    Added ability to persist swagger 1.2 contracts
    
    When tests are run, contacts can be automatically persisted if the settings are turned on in the build script. Reformatted contracts via the automated tests when we enable the option in the build script.
    
    These contracts are the ones that are not materially affected by it.
    
    (1831)
    Added sorting of paths and parameters
    
    This is so that the contracts generated are always predictable in order.
    
    (1831)
    #773 Don't provide a default values for operation notes/description.
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Made parameter use modelRef fully rather than just for the item types
    Replaced Opertion responseClass with responseModel
    [#538] Sort response messages by code
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Fixes rendering of Authorization collection on operations
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Added suppressions for regex sonar flags
    model classes having names containing integers are not detected as array
    Changed the internal represenation of file
    
    This way if we encounter a type called File we resolve to the right type
    
    (1632)
    Added better support for BigDecimal & BigInteger
    
    fixes #1432
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Fixed the logic to infer the operation type
    
    Currently the processor ignores the responseContainer. This fix simplifies
    the logic to inspect the annotations as well as handling void types has been
    improved. Also extracted the common logic to get the ResolvedType from the
    ApiOperation annotation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    [#538] Adding more tests to fix the test coverage
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Sorted the consumes/produces/protocols/models
    
    This leads to predictable generation of contracts for swagger 1.2
    contracts.
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Migraiting from FluentIterable
    Sorted the contracts by path
    
    Also sorted the parameters by name. These are the contacts that were materially affected by the change.
    
    Also includes, Changes that prioritize the parameter merge priority. For e.g. request condition parameters have lower priority on determining types than actual parameters.
    
    NOTE: swagger 1.2 contracts also sort by description, to make it more
    consistent
    
    (1831)
    Added sorting of paths and parameters
    
    This is so that the contracts generated are always predictable in order.
    
    (1831)
    Fixed the api listing grouping issue with swagger 1.2
    
    fixes #727
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Sorted api listing and api listing references in the models
    
    - Also applied defaultIfEmpty to builders
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Removed unused methods
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed checkstyle violations and code cleanup
    
    (2022)
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Removed unused class
    [#538] Replicated the dto structure
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed checkstyle violations and code cleanup
    
    (2022)
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed checkstyle violations and code cleanup
    
    (2022)
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed the swagger json to match the currently supported output
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed checkstyle violations and code cleanup
    
    (2022)
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed the swagger json to match the currently supported output
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Made the dependencies strictly provided only
    
    This way spring/jackson etc will always take the dependencies that were provided
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    tests for the handlers and handler providers
    fixed whitespace and removed commented out import in build.gradle
    extracting common code for webflux and webmvc
    removed unnecessary classes, use their counterparts in webmvc and webflux instead, first working version of webflux integration
    renamed to spring-integration-webmvc to make room for webflux
    first version which documents parameters for spring-integration webmvc, removed petstore and petstore-tests
    started work on springfox-spring-integration
    Remove duplicated dependency.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Added dependency for validation annotations
    
    (1749)
    Added reflections library for annotation scanning
    
    This is in preparation for scanning for jackson annotations and
    serializers and deserializers.
    
    (1490)
    Upgraded libraries before working on the story
    
    (1621)
    Fixed the artifact based sharing of test code
    Updated the converage numbers
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Adjusted the spring dependencies to provided
    
    Also reverted to using the regular servlet api dependency
    Updated the build files
    Renamed modules and directories
    Renames modules to springdox-
    Updated the build scripts to publish all the publishable modules
    
    Also realized that nothing is pulling in the common module, so updated the configuration beans to import it
    Switched to using swagger 1.5 throughout the library
    WIP
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Added tests for allowable values
    
    - Made the test artificats use the testCompile rather than compile dependencies
    Removed all scala dependencies by group
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Setup scala library excludes
    [#463] Adding javadoc to publication
    Adds a preRelease task to prevent duplicate publishing of released artifact versions.
    Externalizes maven pom filtering and sets groovy-all dependency to test.
    Adds maven provided scope to pom dependencies
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Update README.md
    Update README.md
    checkstyle issue: line length
    improved readme
    clarification that multiple examples per status code and mediatype are supported in OpenApi 3, but not in OpenApi 2
    define response body examples using spring-restdocs
    renamed to spring-integration-webmvc to make room for webflux
    started work on springfox-spring-integration
    More reformatting to match existing style
    
    (2793)
    Reformatted the code to match style guide
    
    Indents are 2 spaces and we splat static imports and dont splat regular imports (Should probably advertise this better)
    
    (2793)
    tests for the handlers and handler providers
    Reformatted the code to match style guide
    
    Indents are 2 spaces and we splat static imports and dont splat regular imports (Should probably advertise this better)
    
    (2793)
    tests for the handlers and handler providers
    renamed to spring-integration-webmvc to make room for webflux
    added springfox-spring-integration, petstore and petstore-tests
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    removed duplications, documentation cleanup, some name changes for consistency
    resolved checkstyle issues
    removed unnecessary classes, use their counterparts in webmvc and webflux instead, first working version of webflux integration
    renamed to spring-integration-webmvc to make room for webflux
    first version which documents parameters for spring-integration webmvc, removed petstore and petstore-tests
    Reformatted the code to match style guide
    
    Indents are 2 spaces and we splat static imports and dont splat regular imports (Should probably advertise this better)
    
    (2793)
    use streams to map parameters in parameters provider
    define response body examples using spring-restdocs
    removed duplications, documentation cleanup, some name changes for consistency
    extracting common code for webflux and webmvc
    resolved checkstyle issues
    removed unnecessary classes, use their counterparts in webmvc and webflux instead, first working version of webflux integration
    renamed to spring-integration-webmvc to make room for webflux
    first version which documents parameters for spring-integration webmvc, removed petstore and petstore-tests
    Reformatted the code to match style guide
    
    Indents are 2 spaces and we splat static imports and dont splat regular imports (Should probably advertise this better)
    
    (2793)
    removed duplications, documentation cleanup, some name changes for consistency
    extracting common code for webflux and webmvc
    removed unnecessary classes, use their counterparts in webmvc and webflux instead, first working version of webflux integration
    renamed to spring-integration-webmvc to make room for webflux
    first version which documents parameters for spring-integration webmvc, removed petstore and petstore-tests
    added springfox-spring-integration, petstore and petstore-tests
    Fixing typo
    
    applicaiton -> application
    Remove some repeated info and add to release notes
    Detangle readme and move documentation out to reference manual
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Update transitioning-to-v2.md
    
    I think the reference to the methods or() and regex() could be clearer. I solved that by adding the static imports.
    Update transitioning-to-v2.md
    
    Fixes #662
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Fixes the type in the controller path configuration property
    
    fixes #645
    Fixed the tabular layout
    Edited documentation to add placeholders for documenting extensibility
    Added more documentation related to ObjectMapper
    
    How to override the model property datatypes
    How to override the documentation endpoints
    Also a stab at javadocs
    
    relates to #635
    Removed extraneous characters
    Formatting links
    Added headings and provided links to examples
    Formatting fixes
    Add premliminary documentation
    
    addresses #633
    Updated release notes
    
    fixes #2504
    Updated release notes
    
    #2372
    Updated the release notes
    
    relates to #2186
    Added an implemented feature from the backlog
    
    #1824
    Updated release notes
    
    related to #1824
    Updated the release notes for 2.6.1
    
    closes #1564
    Updated release notes in preparation for 2.6.0
    Updated the 2.5.0 release notes
    Updated the release notes
    
    resolves #1201
    Consolidated Release Notes
    Added 2D array support issue to release notes
    Updated release notes
    
    closes #1118
    Updated release notes
    
    related to #1084
    Preparing for 2.2.0 release
    Fixes problem where internal models marked hidden are not getting filtered
    
    fixes #873
    Updated the release notes
    
    closes #869
    Updated the release notes
    Update release-notes.md
    Update release-notes.md
    Updated release notes
    Updated release notes for 2.0.3
    Updated release notes and closing the 2.0.2 release
    
    closes #800
    Updated release notes formatting
    Updated release notes with changes and attribution for contributors
    Mention RobWins contribution
    Remove some repeated info and add to release notes
    WIP release notes
    Adding more contributors
    Detangle readme and move documentation out to reference manual
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Updated legacy documentation
    
    (2361)
    correct spelling, fix typos
    (issue #1896)
    Moved the asciidoc folder under docs
    Clarify the documentation regarding the need for @EnableWebMvc in non-springboot apps
    
    fixes #776
    Re-organized the documentation
    
    related to #531
    Added more documentation to the asciidoc template class
    
    related to #531
    Added basePackage predicate to help with selecting request handlers by package
    
    Also updated documentation formatting
    fixes #698
    Removed linebreak
    Fixed swagger documentation formatting
    Some docco tidy up
    Cleaning up some documentation
    Detangle readme and move documentation out to reference manual
    Some documentation on swagger
    Adds a basic starter example to the getting started guide
    Generates and publishes asciidoc
    Added missing backtick
    Fixed documenation
    
    #1232
    Cleaned up documenation
    
    #1232
    Added documentation on externalizing descriptions to properties
    
    resolves #1232
    Added documentation regarding auto-startup
    
    (2361)
    Added documentation on oauth demo
    
    Thanks @mojaiq
    
    resolves #1913
    Fixed the broken document that failed the build
    
    related to #2029
    Added documentation regarding ApiImplicitParam#datatype
    
    related to #2029
    correct spelling, fix typos
    (issue #1896)
    Fix Swagger version error in documentation
    
    In `Customizing the swagger endpoints` section, second line in the first table has Swagger version `2.0`, but it should be `1.2`.
    Fixed documentation and gearing for 2.7.0
    
    related to #1505
    Added support for resolving placeholders on request params
    
    fixes #1423
    Added documentation about swagger2markup
    
    related to #1497
    Updated the documentation to reflect the new feature
    Rework docs a little to move usage guides out of the dependencies section
    Added documentation regarding customizing swagger-ui
    
    Also documented the rfc6570 support
    
    fixes #1263
    Moved the asciidoc folder under docs
    Fixes inacurate documentation regarding includePatterns
    
    fixes #1174
    Updated the Docket XML Configuration Documentation
    Updated the documentation to reflect caching changes
    Added security overview to the documentation
    
    resolves #821
    Fixes documentation glitch
    
    resolves #827
    Updated documentation to reflect the caching improvements
    Added note on @EnableWebMvvc conflict when using Spring Boot
    Fix the documentation links and also provided an indirection for the hard-coded version numbers
    Clarify the documentation regarding the need for @EnableWebMvc in non-springboot apps
    
    fixes #776
    Updated documentation to show an example of springfox-staticdocs
    
    Updated documentation to show an example of springfox-staticdocs.
    Updated some broken URLs and code examples.
    Formatted the architecture diagram to fit with 80 characters
    
    Also fixed a couple of typos. Related to #531
    More documentation restructuring
    
    related to #531
    Fixed the asciidoctor formatting error
    Re-organized the documentation
    
    related to #531
    Remove some repeated info and add to release notes
    Detangle readme and move documentation out to reference manual
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Update transitioning-to-v2.md
    
    I think the reference to the methods or() and regex() could be clearer. I solved that by adding the static imports.
    Update transitioning-to-v2.md
    
    Fixes #662
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Fixes the type in the controller path configuration property
    
    fixes #645
    Fixed the tabular layout
    Edited documentation to add placeholders for documenting extensibility
    Added more documentation related to ObjectMapper
    
    How to override the model property datatypes
    How to override the documentation endpoints
    Also a stab at javadocs
    
    relates to #635
    Removed extraneous characters
    Formatting links
    Added headings and provided links to examples
    Formatting fixes
    Add premliminary documentation
    
    addresses #633
    replacement miss
    Update swagger-ui URL location.
    
    There are some documents which refers that swagger-ui location is `http://{host}/swagger-ui.html`.
    This PR fixes those issues.
    docs: add @EnableWebMvc for Spring Boot if necessary
    Updated the documentation
    
    Polished the javadocs for the configuration properties
    
    fixes #3378
    Moved union of mvc and flux configurations to a shared configuration class
    
    Since we are protected by conditionals, moving it to a shared configuration class helps collapse the anotation to a single annotation regardless of paradigm. Also left the variants of swagger2 so that it doesnt break existing users.
    
    (3366)
    fixup! Added open api variants for mvc and webflux for open api
    Updated documentation and fixed the build
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Documentation for 3.3. Springfox Spring Data Rest
    
    Documentation for 3.3. Springfox Spring Data Rest - make 2 steps clear
    added adoc section pointing to springfox-spring-integration
    Fixed documentation/compiler warnings
    
    #1232
    Updated documenation with example of how to secure swagger-ui
    
    Updated with example provided by @evser
    
    resolves #2191
    Fix several typos in the documentation
    
    The most severe is that the nested list in the callouts list was hidden
    before. Now it is shown.
    Explanation line of Docket moved to correct location
    Converted the plugin example to java
    
    Also added documentation on how to implement the plugin.
    
    resolves #1767
    Use double backtick to preven miss parsing
    
    Backticks don't work ok when not followed by a space. Double backticks do.
    Fixed documentation and gearing for 2.7.0
    
    related to #1505
    Rework docs a little to move usage guides out of the dependencies section
    Updated documentation for springfox-swagger-ui-rfc6570
    
    (#1523)
    Added note about moving group id
    Updated the documentation with new version of swagger-ui
    
     Added new version of library with rfc6570 support
    Added documentation for spring data rest
    
    (699)
    Added documentation regarding customizing swagger-ui
    
    Also documented the rfc6570 support
    
    fixes #1263
    Fixed the document reference to the Swagger2SpringBoot file
    Moved the asciidoc folder under docs
    Documented tags and additional models
    
    related to #735, #936
    Updated the documentation to use the jsr-303 plugin
    
    related to #356
    Added a way to override for the name of the api key header
    
    resolves #1087
    Upgraded classmate library to 1.3.1
    
    fixes #1079
    More documentation formatting fixes
    
    related to #1086
    Addressed confusion in documentation as a result of using guava in the code snippets
    
    fixes #1117
    Added support to configure how the api key is sent
    
    It was hard-coded to send it via the query parameter only. With this change
    the library consumers can choose via a configuration how the api key needs to
    be sent to the services
    
    fixes #943
    Fix 2 minor typos in the documentation
    Adding documenation for Feature #861 / #845
    DOC - Fixing path to Swagger UI image
    Fixes references to the swagger-ui repo
    
    Also upgraded the swagger-ui dependency version
    
    fixes #928
    Clarified docket configuration and created a heading for the explanation
    Fix typos.
    Documentation related to supporting RFC 6570
    Added security overview to the documentation
    
    resolves #821
    Updated documentation regarding swagger ui configuration
    
    related to #788, #796
    Updated the url for webjars and springmvc
    Update the swagger-ui related documentation
    Parameterized the versions in the documentation
    More documentation restructuring
    
    related to #531
    Added more documentation to the asciidoc template class
    
    related to #531
    Post release tasks
    - Update bintray badge
    - Set next snapshot version
    - Reinsytate circleci tasks
    Added basePackage predicate to help with selecting request handlers by package
    
    Also updated documentation formatting
    fixes #698
    Some docco tidy up
    Adding correct jcenter uri
    Updating artifact uri's
    Some documentation on swagger
    Adds a basic starter example to the getting started guide
    Adds a module for documented spring configurations
    Added some more docs
    Generates and publishes asciidoc
    fix typo
    Moved the asciidoc folder under docs
    More documentation restructuring
    
    related to #531
    Re-organized the documentation
    
    related to #531
    Added more documentation to the asciidoc template class
    
    related to #531
    Added basePackage predicate to help with selecting request handlers by package
    
    Also updated documentation formatting
    fixes #698
    Removed linebreak
    Fixed swagger documentation formatting
    Some docco tidy up
    Cleaning up some documentation
    Detangle readme and move documentation out to reference manual
    Some documentation on swagger
    Adds a basic starter example to the getting started guide
    Generates and publishes asciidoc
    Fix several typos in the documentation
    
    The most severe is that the nested list in the callouts list was hidden
    before. Now it is shown.
    Fixed documentation and gearing for 2.7.0
    
    related to #1505
    Remove for e.g.s and beautfy diagram
    Moved the asciidoc folder under docs
    Formatted the architecture diagram to fit with 80 characters
    
    Also fixed a couple of typos. Related to #531
    More documentation restructuring
    
    related to #531
    Some documentation on swagger
    Generates and publishes asciidoc
    Rework docs a little to move usage guides out of the dependencies section
    Added extensibility documentation to help with plugin creation
    
    closes #1180
    Moved the asciidoc folder under docs
    Added documentation surrounding answers to common problems and questions
    Parameterized the versions in the documentation
    More documentation restructuring
    
    related to #531
    Added more documentation to the asciidoc template class
    
    related to #531
    Some docco tidy up
    Adding version number to documentation
    Adds a basic starter example to the getting started guide
    Adds a module for documented spring configurations
    Generates and publishes asciidoc
    Updated documentation around dataTypeClass
    
    (3388)
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Updated CORS registration example
    
    resolves #2215
    Added documentation on how to override loose body params
    
    This is to document cases where we losely document method parameters that come is as stringified json but are actual types internal to the service.
    
    fixes #2031
    Documented problem viewing swagger-ui.html
    
    resolves #1865
    Documented AlternateTypeRuleConvention
    
    Also conditions on why some properties might be missing on certain occasions.
    
    resolves #1904
    Added documentation on how to use springfox with vavr
    
    resolves #1971
    correct spelling, fix typos
    (issue #1896)
    Added documentation regarding documenting file implicit param
    
    resolves #1718
    Added documentation for immutables
    
    resolves #1639
    Added Cors setup documentation
    
    resolves #1530
    Fix a typo
    Added documentation for problems configuring non-boot apps
    
    resolves #1340
    Fixed the link to point to the right comment
    
    related to #822
    Fixed typo
    Update spelling, grammer and formatting
    Update common-problems.adoc
    Added documentation on how tags work
    
    fixes #1302
    Added documentation to customize swagger-ui endpoint
    
    fixes #1080
    Added Q&A for infinte loop due to recursive types
    
    fixes #1121
    Documented ObjectMapper weirdness in spring-boot
    
    fixes #1140
    Updated Java Dates and Java 8 Date handling documentation
    
    fixes #1161
    Moved the asciidoc folder under docs
    More documentation formatting fixes
    
    related to #1086
    Fixed documentation formatting
    
    related to #1086
    Fixed documentation and added anchors to the Q&A
    
    related to #1086
    Documented overriding host name
    
    related to #939
    closes #1030
    Documented steps to creating a model/property plugin
    
    related to #939
    closes #1028
    Document xml spring configuration setup
    
    related to #939
    closes #1017
    Documented support for documentation to indicate schemes
    
    supported by the api
    
    related #939
    closes #1010
    Documented subsitution rules for arrays and lists of a given type
    
    related to #939
    closes #1003
    Documented additional steps for aggregating services
    
    related to #939
    closes #1001
    Documented how to setup swagger-ui when running a spring-mvc app
    
    related to #939
    closes #983
    Document how to partition api documentation
    
    Usually encounter such situaions when versioning apis.
    
    related to #939
    closes #963
    Documented why some operations may be missing
    
    especially when methos have the same path but might differ in query params
    
    related to #939
    closes #949
    Documented layering of information via plugins
    
    related to #939
    closes #945
    Documented aggregating swagger-ui
    
    related to #939
    closes #942
    Document resolution of multiple object mapper conflicts
    
    related to #939
    closes #890
    Elaborated the reasoning behind bean property requirement
    
    For @ModelAttributes to render the properties
    
    related to #939
    closes  #881
    Preparing for 2.2.0 release
    Reformatted code
    Added FAQ regarding java 8 types
    
    fixes #914
    Added documentation on trouble-shooting tips
    
    fixes #784
    Added documentation surrounding answers to common problems and questions
    Updated the release process documentation
    
    relates to #2504
    Updated release process documentation
    
    #2394
    Updated the build instructions
    
    Also updated the bintray credentials check
    
    (2394)
    Updated documentation on how to update contracts
    
    (1944)
    Updated documentation released to documentation
    
    (1505)
    Added note about git repository requirement for building locally
    
    resolves #1359
    Stated goals of this project
    
    Especially in regards to the use of annotations for documentation
    
    fixes #1231
    Updated document for instructions on publishing snapshot builds to maven local
    
    fixes #1255
    Moved the asciidoc folder under docs
    Add a task to generate and open the docs
    Fix 2 minor typos in the documentation
    Fix typos.
    Updated the release/snapshot steps to reflect the changes in #759
    More documentation restructuring
    
    related to #531
    Added basePackage predicate to help with selecting request handlers by package
    
    Also updated documentation formatting
    fixes #698
    Generates and publishes asciidoc
     Added documentation about the avilability of the plugins
    
    (3030)
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Replace Reflections with FastClassPathScanner (#2243)
    Added AWS extensibility example
    
    relates to #1212
    Fixed documentation
    
    (2361)
    Updated the ApiListingScanner extensibility example
    
    The example used a new caching operation generator, so the name space of operations would not be accurate when the contracts are generated. Changed the example, the documentation and the affected tests
    
    (2278)
    Added a contract test for explicitly specifying group
    
    When we specify a group in the additional apis we need to handle it correctly
    
    (2219)
    Made org.reflections:reflections a provided dependency
    
    Also updated the documentation to reflect the new requirement to add a dependency in order to use the .
    
    resolves #2243
    Documented multiple swagger aggregation
    
    resolves #1954
    Fixed asciidoc warnings
    
    resolves #1904
    Documented AlternateTypeRuleConvention
    
    Also conditions on why some properties might be missing on certain occasions.
    
    resolves #1904
    correct spelling, fix typos
    (issue #1896)
    Updated extensibility documentation
    
    (1623)
    Documented example implementation of ParameterBuilderPlugin
    
    resolves #1683
    Converted the plugin example to java
    
    Also added documentation on how to implement the plugin.
    
    resolves #1767
    Added documentation on the newly introduced extensibility point
    
    (1367)
    Added ApiListScannerPlugin to allow custom ApiDescriptions
    
    fixes #1335
    Fix mistype
    
    Bean validation refers JSR-303 not JSR-302
    Fixed some wrong asciidoc typos
    Added extensibility documentation to help with plugin creation
    
    closes #1180
    Moved the asciidoc folder under docs
    Adds a basic starter example to the getting started guide
    Moved the asciidoc folder under docs
    Added springfox-staticdocs example image
    Moved the asciidoc folder under docs
    Detangle readme and move documentation out to reference manual
    Updating readme
    Moved the design templates under docs
    Adds design doc samples to encourage discussion from contributors prior to implementation
    Moved the design templates under docs
    Adds design doc samples to encourage discussion from contributors prior to implementation
    Bump slf4j-simple from 1.6.1 to 1.7.30
    
    Bumps [slf4j-simple](https://github.com/qos-ch/slf4j) from 1.6.1 to 1.7.30.
    - [Release notes](https://github.com/qos-ch/slf4j/releases)
    - [Commits](https://github.com/qos-ch/slf4j/compare/v_1.6.1...v_1.7.30)
    
    Signed-off-by: dependabot-preview[bot] <support@dependabot.com>
    Sorted the model properties by position and name
    
    resolves #3087
    Adjusted logging
    
    (3366)
    Upgraded to groovy 3 and spock 2.0
    Polished the builder apis to be fluent
    Added better support for x-forward header interpretation
    
    (2022)
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Sorted responses and build works
    
    (2022)
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Fixed the build script to exclude logback
    
    This was causing build failure
    
    (2022)
    Build scripts cleanup
    
    Used the new form for plugin definitions and removed unused script blocks and rearranged the dependencies
    
    (2022)
    #2932: Minor version upgrades of spring dependencies. Aligned contract tests with Spring HATEOAS 1.x. Fixed wrong client encoding used in tests.
    Updated spring dependencies to spring 5.2.0 and spring boot 2.2.0, fixed changed interfaces
    Upgrade libraries and plugin versions
    
    (2022)
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Fix dependencies and exclusions.
    Upgraded dependency versions and libraries
    
    Moved to spring boot 2.0
    
    (2516)
    Updated dependencies
    
    relates to #2350
    Updated documentation on how to update contracts
    
    (1944)
    Moved the maybeWriteToFile above the assertion
    
    This way when there is an assertion failure we still write the changed contract file to disk. Also update the contracts based on the refresh after adding the new test
    
    (2219)
    Added ability to bulk update contract files
    
    (1937)
    #1773 springfox: spring-boot:2.0.0.RELEASE with other dependencies upgraded to match those in boot
    #1773 springfox: Adding Spring Boot 2 (RC2) globally
    #1773 contract-tests: adding Spring Boot 2
    #1773 Initial dependency upgrade along with API compatibility modifications
    Upgraded libraries prior to release
    
    (1899)
    Upgrading the dependencies before starting on work
    
    (2022)
    Added breaking test to demonstrate nullable expandable parameters
    
    Fixed the contracts accordingly
    
    (1864)
    Upgrade base library versions
    
    related to #1899
    Introduced spring data rest endpoints
    
    This is in preparation to create a contract test to watch the contract evolving and also serve as a safety net for breaking changes
    
    (1623)
    Upgraded libraries before working on the story
    
    (1621)
    Upgraded gradle to 3.1
    
    Also upgraded libraries and disabled the daemon on the CI build
    Updated gradle to 3.0
    Updated swagger-ui version
    
    Also updated libraries
    Upgraded the libraries especially the contract tests
    Changed the library to determine uptodate versions
    Uprevved versions and removed commented code in build script
    Fixed the artifact based sharing of test code
    Removed dependency on spring-hateoas
    
    In addition upgraded the jackson libraries and the json assert libraries.
    This change is mainly to remove the dependency on spring-hateoas being available
    for this library.
    
    fixes #1104
    Upgraded gradle to 2.8
    Changes to limit libraries
    Upgraded gradle to 2.8
    Added support for rendering tags defined in @ApiOperation
    
    fixes #675
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Version not propogating to the bintray publish
    
    - Adding publish version to the configured publications
    - Refactored the subprojects build
    Related to #759
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Removes jsp from swagger-ui
    - Adds an endpoint to list all of the swagger resources within a running application
    - Added a base class for swagger contract tests
    Updated the build files
    Renames modules to springdox-
    Upgraded spring boot
    Wired up the v2 spec with the v2 application context
    
    Unable to figure out how to bootstrap the v2 spec as only one main method is allowed
    [#538] Adds bare contract spec for swagger 2.0
    - Uses swagger groups to split petstore api from out test case apis
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Added tests for allowable values
    
    - Made the test artificats use the testCompile rather than compile dependencies
    Caching gradle wrapper and upgrading spring-mvc-ui webjar
    Upgerades swagger-ui webjar version
    [#496] Adds jstl dependencies to fix webjar context path
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    Removes unnecessary exclude
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    [#538] Adds bare contract spec for swagger 2.0
    - Uses swagger groups to split petstore api from out test case apis
    [#496] Adds jstl dependencies to fix webjar context path
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    Updated the tests to demonstrate fix
    
    (3343)
    Updated the tests to demonstrate fix
    
    (3343)
    Updated the tests for multipart support
    
    (3364)
    Removed previous manual rules configuration for webflux
    
    Allowed the plugins to apply the defaults and added feature demonstration controller to demonstrate the effects
    
    (3354)
    Regenerated the contracts after removing extraneous properties
    
    (2022)
    Merged changes from model enhancements
    Updated webflux contract tests docs with actual state produced by code (instead of expected).
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Updated the contracts after upgrade to latest swagger library
    
    (2503)
    Added support for ordering of parameters
    
    Regenerated the contract files to bulk update with the new alphabetically ordered parameters
    
    (1937)
    Fixed regression that renders allowEmptyValues in model properties
    
    Per 2.0 spec this is only rendered on parameters (not body parameters). So we add this to parameter and remove it from model properties.
    
    (2204)
    Added support for allowEmptyValue
    
    (2021)
    Made title synonmous with name for models
    
    fixes #2139
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Fixed all the contract tests that failed due to the change.
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Synced the contracts with the output
    Added support for Contact as a first class object
    Reformatted the spec output files to match the style guide
    Updated the model mapping to be spec compliant
    Fixed issue where the global produces/consumes did not propogate
    
    fixes #1115
    Fixed behavior on operations differing only by ParamsConditionRequest
    
    When operations only differ by parmams condition with set value e.g. a=1 and a=2 then the operations were collapsed
    
    fixes #1114
    Updated the tests
    
    (3377)
    Regenerated the contracts after removing extraneous properties
    
    (2022)
    Updated the contract tests
    
    The contracts are 95% the same, except for some bug fixes that the old model had
    
    (2022)
    Added support for implicit parameter determination
    
    This is so that we can parallelly construct the parameter to the new model. Made the existing OperationBuilderPlugins also infer the RequestParameters
    
    (2022)
    Got the contracts for swagger2 to pass
    
    (2022)
    Merged changes from model enhancements
    #182
    
    Fix Webflux tests.
    Updated webflux contract tests docs with actual state produced by code (instead of expected).
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Updated the contracts after upgrade to latest swagger library
    
    (2503)
    Updated the contract tests to respect allowEmptyValue constraint
    
    Only query/formData parameters should render allowEmptyValue settings
    
    (2419)
    Fixed allowable range on string properties
    
    For string properties the allowable ranges should be rendered as max length and min length properties
    
    (2415)
    Added support for ordering of parameters
    
    Regenerated the contract files to bulk update with the new alphabetically ordered parameters
    
    (1937)
    Updated tests with properties that were missing
    
    When properties needed to be backed by fields, some properties were not rendered. This fixes that
    
    (1937)
    Fixes for contract tests.
    Fixed regression that renders allowEmptyValues in model properties
    
    Per 2.0 spec this is only rendered on parameters (not body parameters). So we add this to parameter and remove it from model properties.
    
    (2204)
    Fixed the model and model property comparison
    
    In the course of fixing the tests, fixed the equals and hashcode implementation of model and property, this is important in limiiting the litering of models in the spec if this is incorrect.
    
    (2056)
    Fixes for contract tests.
    Added support for allowEmptyValue
    
    (2021)
    Made title synonmous with name for models
    
    fixes #2139
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Fixed all the contract tests that failed due to the change.
    Added breaking test to demonstrate nullable expandable parameters
    
    Fixed the contracts accordingly
    
    (1864)
    correct spelling, fix typos
    (issue #1896)
    Fixed legacy tests to expand parameters
    
    Because these parameters had an annotation, these parameters were treated as request body. This fixes that.
    
    (1749)
    Fixed formatting
    
    (1749)
    Demonstrated intricate generics support
    
    resolves #1631
    Fixed the issue where the parameter requiredness was incorrect
    
    Delegates to the base jackson property to tell us if a parameter property is required or not
    
    fixes #1727
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Made headers collection a sortable map
    
    Because plain hashmaps dont guarantee order we use a tree map to preseve the ordering based on header key.
    
    (1651)
    Synced the contracts with the output
    Added support for allowable range values
    
    fixes #1244
    Added support for Contact as a first class object
    Reformatted the spec output files to match the style guide
    Updated the model mapping to be spec compliant
    Fixed issue where the global produces/consumes did not propogate
    
    fixes #1115
    add unit tests
    Pulled all the functional tests into one test so that it
    
    does not incur the overhead of starting up tomcat twice
    Removed the dependence on ResourceGroupingStrategy to get default tags
    
    also the ApiListingReference scanner no longer needs the resource grouping strategy to create
    resource groups
    
    relates to #454
    resolves #919
    Added support for rendering tags defined in @ApiOperation
    
    fixes #675
    Updated the model property resolution to use the accessors/factory methods
    
    and constructors from the bean that jackson infers. This fixes a problem where scala
    classes do not participate in the property inference. This also implements the long
    standing feature request to support constructor and @JsonCreator annotated factory methods
    that are the primary source for properties.
    Made the swagger contract tests consistent with respect to method name generation
    
    Over different runs the ordering of the operations determined the names
    of the operations in the case of multiple operations with the same name
    
    related to #682, #825
    Fixes the issue where the responseClass in ApiOperation is ignored
    
    fixes #805
    #773 Don't provide a default values for operation notes/description.
    #675 Initial approach to adding @Api(description) to the tags output
    Fixed the issue rendering parameters that are either enums or arrays of enums
    
    fixes #664
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Fixing json whitespace
    Applying PR comments, removing nickname for uniqueId
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Prefer a random port for tests
    
    fixes #636
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Skip rendering empty api keys authorization scopes
    Skip rendering void models
    Fixed the swagger json to match the currently supported output
    Updated models so that allowable values are rendered
    Added support for rendering security definitions and authorizations for operations
    Added support for tags
    
    Also adjusted the swagger.json to account for the tags not having all the elements
    Fixed syntax error in json
    Updated the swagger.json contract with further refinements
    Adjusted the expected swagger.json based on the example in petstore.swagger.io
    Fixed for the responses not getting populated
    
    Also 200-OK messages needed to use the operations return type if nothing was specified in the response message
    Fix the mappers to not be create new Paths for every operation
    Added swagger2 contract and fixed bug with operations not getting rendered
    Updated the tests to demonstrate fix
    
    (3343)
    Removed previous manual rules configuration for webflux
    
    Allowed the plugins to apply the defaults and added feature demonstration controller to demonstrate the effects
    
    (3354)
    Renamed classes
    
    (3366)
    Fixed coverage report error
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Move webflux petstore to separate package to allow coverage report creation.
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Moved union of mvc and flux configurations to a shared configuration class
    
    Since we are protected by conditionals, moving it to a shared configuration class helps collapse the anotation to a single annotation regardless of paradigm. Also left the variants of swagger2 so that it doesnt break existing users.
    
    (3366)
    Fixed coverage report error
    Fixed the issue with code coverage report generation
    
    (2022)
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    correct spelling, fix typos
    (issue #1896)
    Fixed the property resolution regression in spring boot
    
    fixes #1698
    Made the controllers constructor injected
    
    Also fixed the test to use the spring 1.4.x testing improvements
    
    (1621)
    Changes to limit libraries
    Clarify the documentation regarding the need for @EnableWebMvc in non-springboot apps
    
    fixes #776
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Fixed coverage report error
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Updated the ApiListingScanner extensibility example
    
    The example used a new caching operation generator, so the name space of operations would not be accurate when the contracts are generated. Changed the example, the documentation and the affected tests
    
    (2278)
    Added ability to bulk update contract files
    
    (1937)
    #2257 - fix test failures related to using default system charset when reading files
    
    Fixes 2 tests on Windows:
    * FunctionContractSpec. should honor api v1.2 contract [declaration-concrete-controller.json] at endpoint [/default/concrete-controller]
    * FunctionContractSpec. should honor api v1.2 contract [declaration-pet-service.json] at endpoint [/default/pet-service]
    #2257 - refactor: use explicit syntax (to add another parameter with next commit)
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Added swagger2 contract and fixed bug with operations not getting rendered
    [#538] Adds bare contract spec for swagger 2.0
    - Uses swagger groups to split petstore api from out test case apis
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Fixed the logger properties
    
    Removed unused log4j config files and renamed file to use slf4j simple logger binding
    
    (1770)
    Updated the tests for multipart support
    
    (3364)
    Removed previous manual rules configuration for webflux
    
    Allowed the plugins to apply the defaults and added feature demonstration controller to demonstrate the effects
    
    (3354)
    Updated the tests to demonstrate fix
    
    (3343)
    Removed previous manual rules configuration for webflux
    
    Allowed the plugins to apply the defaults and added feature demonstration controller to demonstrate the effects
    
    (3354)
    Simplified and cleaned up
    
    Autowired fields, simplified functions with method references and lambdas and renamed methods and finalized variables
    
    (3354)
    Fixed coverage report error
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Moved union of mvc and flux configurations to a shared configuration class
    
    Since we are protected by conditionals, moving it to a shared configuration class helps collapse the anotation to a single annotation regardless of paradigm. Also left the variants of swagger2 so that it doesnt break existing users.
    
    (3366)
    Fixed coverage report error
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Fixed the issue with code coverage report generation
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    reverted changes to SwaggerApplication
    added springfox-spring-integration, petstore and petstore-tests
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Introduced spring data rest endpoints
    
    This is in preparation to create a contract test to watch the contract evolving and also serve as a safety net for breaking changes
    
    (1623)
    Fixed the artifact based sharing of test code
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Fixed the build
    
    The models are not correct however :-o
    Wired up the v2 spec with the v2 application context
    
    Unable to figure out how to bootstrap the v2 spec as only one main method is allowed
    [#538] Adds bare contract spec for swagger 2.0
    - Uses swagger groups to split petstore api from out test case apis
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Fixed coverage report error
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Fixed coverage report error
    Fix compiler warnings
    
    (2688)
    Fixed the artifact based sharing of test code
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Updated the tests to demonstrate fix
    
    (3343)
    Updated the tests to demonstrate fix
    
    (3343)
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Build scripts cleanup
    
    Used the new form for plugin definitions and removed unused script blocks and rearranged the dependencies
    
    (2022)
    #1773 springfox: spring-boot:2.0.0.RELEASE with other dependencies upgraded to match those in boot
    #1773 springfox: Adding Spring Boot 2 (RC2) globally
    Updated swagger-ui version
    
    Also updated libraries
    Uprevved versions and removed commented code in build script
    Adds a module for documented spring configurations
    Adds a module for documented spring configurations
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Adds a module for documented spring configurations
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Adds a module for documented spring configurations
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Major changes to accomodate controller-less specs
    Documented example implementation of ParameterBuilderPlugin
    
    resolves #1683
    Demonstrated intricate generics support
    
    resolves #1631
    Fixed a bug with unbounded generic parameters and return types
    
    Updated the examples to demonstrate the issue. The downside to this fix is that alternate type
    rules will not apply to these unbounded types. The upside is however we avoid an NPE!
    
    fixes #953
    Updated tests to proove multi-variable templated controllers work as expected
    
    closes #953
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Fix for abstract base types with open generic type with no constraint
    
    not working correctly. fixes #313. Thanks @jtheuer!
    Moved union of mvc and flux configurations to a shared configuration class
    
    Since we are protected by conditionals, moving it to a shared configuration class helps collapse the anotation to a single annotation regardless of paradigm. Also left the variants of swagger2 so that it doesnt break existing users.
    
    (3366)
    Polished the builder apis to be fluent
    Tightened the builder api
    Fixed the build and also fixed depcration warnings
    Expose the 'showCommonExtensions' configuration available in swagger-ui
    through springfox UiConfiguration and UiConfigurationBuilder
    
    It's available in swagger-ui since v3.14.0
    
    Co-authored-by: Ippei Nawate <saku.ni63@gmail.com>
    Co-authored-by: Benoit <b.wiart@ubik-ingenierie.com>
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Make csrf support optional
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Fixed documentation/compiler warnings
    
    #1232
    Fix several typos in the documentation
    
    The most severe is that the nested list in the callouts list was hidden
    before. Now it is shown.
    Upgrading swagger-ui to 3.11.0
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Re-added deprecated attributes to swagger resources
    
    In order to support the url-templated library (springfox-swagger-ui-rfc6570:1.0.0)
     that isnt yet upgraded to to swagger 3.x, we need to preserve some wire level
    compatiblity as well. As a result we restored some of the serialized parameters
    in order to support older swagger-ui hitting the new features implemented in this
    PR.
    
    Also general polish before the release
    
    (2166)
    Improved setting api to Swagger UI 3.x
    Added support for configuring the request timeout
    
    (#1523)
    constant string arrays not initialized before constructor --> moved to extra static inner class, added new constructor UIConfiguration(String validatorUrl, String[] supportedSubmitMethods) for convenience
    fix for #1291
    Documented tags and additional models
    
    related to #735, #936
    Added a way to override for the name of the api key header
    
    resolves #1087
    Updated documentation related to UI configuration support
    
    related to #1122
    Added support to configure how the api key is sent
    
    It was hard-coded to send it via the query parameter only. With this change
    the library consumers can choose via a configuration how the api key needs to
    be sent to the services
    
    fixes #943
    Adding documenation for Feature #861 / #845
    Updated the security configuration to support the improved oauth support in swagger-ui
    
    - Updated tests to improve coverage
    
    related to #928
    Documentation related to supporting RFC 6570
    Updated documentation regarding swagger ui configuration
    
    related to #788, #796
    Version not propogating to the bintray publish
    
    - Adding publish version to the configured publications
    - Refactored the subprojects build
    Related to #759
    Fixed the build
    More documentation restructuring
    
    related to #531
    Fixed the build
    Added more documentation to the asciidoc template class
    
    related to #531
    Adds a basic starter example to the getting started guide
    Adds a module for documented spring configurations
    Updated copyright year
    
    (1082)
    Documented example implementation of ParameterBuilderPlugin
    
    resolves #1683
    Added ignore reason for parameter/operation being ignored
    
    resolves #1494
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Moved interfaces to the root documentation packages
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    Normalized spaces and imports
    Adding the posibility of ignoring an entire controller
     - Ingoring all methods of a controller by adding an excluded annotation
        on class level
     - @ApiIgnore can now be specified on Type, but also on Parameter and has
       been added to the defaultIgnorableParameterTypes Set
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Adding spring config. Adding scala support to jackson mapper.
    Updating groovy and spock version
    Added groovy compiler for spock testing
    Support for included/ignored annotations to make skipping documenting resources easier
    
    closes #45
    Reworked the extensibility of the library
    
    - Refactored the packages
    - Added intelligent defaults for when the service only has spring
      annotations
    - Added support for model and model schema
    - Added Swagger configration extensibility options
    - Moved to jackson 2
    - Updating git ignore
    - Updated documentation and the current version
    Tightened the builder api
    Fixed the build and also fixed depcration warnings
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Removed source identifier as a required attribute to construct a model
    
    (2022)
    Added RequestParameterBuilder to the ParameterContext
    
    (2022)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Documented example implementation of ParameterBuilderPlugin
    
    resolves #1683
    Fixed the license header
    Documented tags and additional models
    
    related to #735, #936
    Added sonarqube conditionally
    Disabled sonarqube as it doesnt work for pull requests
    Ignored the offending test and reset the CI settings
    Increased the heap size for circle ci
    Added more memory to the build VM
    Copied the openapi test results
    Switched the order of sonarqube
    Upgraded compiler to java 11
    
    Additional fixes
    Fixed to filters section
    Added the filter section
    Moved the branch filter
    Fixed circle ci script
    Fixed typo and added sonar cloud support
    Improved caching and fixed reporting to include webflux
    
    (2022)
    Ported circleci 2.0 config from master.
    Added gradle directory to the caches and ignored gh-pages
    
    (2328)
    Adding auto-generated CircleCI 2.0 config file
    Made the dependencies strictly provided only
    
    This way spring/jackson etc will always take the dependencies that were provided
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Moved apt plugins to the projects that use mapstruct
    
    This is so that the IDE can navigate to generated classes
    
    (2022)
    Upgrade libraries and plugin versions
    
    (2022)
    Update dependency versions
    
    (2688)
    Upgraded dependency versions and libraries
    
    Moved to spring boot 2.0
    
    (2516)
    Updated libraries
    
    (2503)
    Fixed documentation/compiler warnings
    
    #1232
    Upgraded dependencies
    
    (2350)
    Added conditional bean configuration support
    
    Before this springfox would load in integration tests where there is no web environment
    
    (2329)
    fix checkstyle
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Upgraded libraries prior to release
    
    (1899)
    Upgraded libraries before working on the story
    
    (1621)
    Reduced coverage temporarily to fix build
    
    fixes #1562
    Include generated sources in published artifact
    
    fixes #1407
    Removed mapstruct gradle script in lieu of apt plugin
    Fixed the artifact based sharing of test code
    Updated the converage numbers
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    add support for vendor extensions in operations
    
    
    
    Fixes #824
    Added support for list of maps
    
    fixes #740
    Adjusted coverage numbers and removed the conditional skip failure for swagger2
    
    related to #673
    Adjusted the spring dependencies to provided
    
    Also reverted to using the regular servlet api dependency
    Updated the build files
    Renamed modules and directories
    Renames modules to springdox-
    Updated the build scripts to publish all the publishable modules
    
    Also realized that nothing is pulling in the common module, so updated the configuration beans to import it
    Added swagger common module
    WIP
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Added tests for allowable values
    
    - Made the test artificats use the testCompile rather than compile dependencies
    Removed all scala dependencies by group
    [#538] Use the new DTOs in the controller
    Setup scala library excludes
    [#463] Adding javadoc to publication
    Adds a preRelease task to prevent duplicate publishing of released artifact versions.
    Publishing to https://oss.jfrog.org (not yet bintray)
    Externalizes maven pom filtering and sets groovy-all dependency to test.
    Adds maven provided scope to pom dependencies
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright year
    
    (1082)
    General cleanup and polish
    
    (1941)
    more tests
    add some tests
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    More test cases for parameter Mapper spec
    
    Signed-off-by: Martin Kremers <info@martinkremers.de>
    Fix #2822 related to @ApiParam(example="..") not working for @RequestBody
    Adapted behavior of ParameterMapper and added tests.
    Correctly represent byte arrays
    
    fixes #1430
    Added support for nested model references
    
    especially useful for 2D arrays
    Added model ref interface
    
    Also added two dimensional array substitution support
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Migrated mixin based test support classes to traits
    
    (2022)
    Returning cache to life.
    Unit tests.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    migrate from guava supplier
    removed more FuctionContractSpec tests
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixes for typo and names.
    Fixed the other test
    
    Looks like the model count differs and does seem like the test was validating an invalid model count.
    
    (2056)
    Polished
    
    (2056)
    Fixes for tests.
    Added support for allowEmptyValue
    
    (2021)
    Reformatted the test
    
    (1974)
    Re-ordered constructor args
    
    (1974)
    add some tests
    First commit with added defaultValue
    tests supporting
    Adding vendor extensions support to model property
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Fixes issue with allowable ranges e.g. infinity
    
    fixes #1504
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    #1296: Adding Pattern annotation support
    Filtered out the void properties and collection of voids
    
    When mapping to swagger objects we filter out the voids, array of voids, or list of voids
    since it doesnt make sense anyways to be part of the model properties collection.
    
    Also fixed the coverage to not include mapstruct generated mappers
    
    fixes #1147
    Added support for nested model references
    
    especially useful for 2D arrays
    Polished the tests
    Add support for api model property positions.
    Groovy tests
    
    Add code coverage tests for minLength and maxLength to StringProperty
    when mapping with ModelMapper
    Fixed rendering Maps that are subclasses of partially closed generic Maps.
    
    fixes #1062
    Added a fix for 'example' field in @ApiModelProperty annotation
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Fixes field properties provider issue found while fixing the code coverage build issue
    
    Uncovered the fact that the field model properties provider was working
    incorrectly. This fixes that problem also removed some ignored tests.
    
    related to #752
    Added support for list of maps
    
    fixes #740
    Fixed an NPE when generating models for generic types with Void as one of its type bindings
    
    fixes #728
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Add test for the case that ApiInfo contains just a license url.
    Don't include a license object when both license and licenseUrl are empty.
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Tightened the builder api
    Fixed the build and also fixed depcration warnings
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Updated the mappers to use the new schema/service models
    
    (2022)
    Formatted for consistency
    
    (2022)
    #1570 Add examples support
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava supplier
    removed more FuctionContractSpec tests
    migrate from guava multimap
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fix #2293
    Fixes for ModelDTO.
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Added support for adding a set of tags that apply to a docket
    
    fixes #936
    Added support for ResponseHeaders
    
    fixes #937
    Added support for Contact as a first class object
    Fixed the unique operation name generation
    
    This is to align with the advertized expectation that when a nickname is
    supplied then the unique id for the operation would respect that intent
    as much as possible without sacrificing the ability to ONLY generate unique
    operation names.
    
    fixes #1066
    add unit tests
    Added support for tags as a first class concept
    
    Currently the tags are inferred based on a combination of @Api#value() and Class name.
    Going forward it can use the tags support built into the @Api annotations
    
    fixes #737
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Provided type safe vendor extensibility rather than naked maps
    add support for vendor extensions in operations
    
    
    
    Fixes #824
    Added support for list of maps
    
    fixes #740
    Fixes the problem when multiple api listings are associated with the same api declaration
    
    Swagger 1.2 does not support this model, hacked to only return the first api listing. This needs
    to be fixed to merge the api listings by group, but thats for a different commit. This only
    fixes the problem effectively for 2.0 of the spec, and spec 1.2 is no worse than it was before this
    fix.
    
    related to #727
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Fix the incorrectly mapped key name
    
    For ApiKey tokens the key name was incorrectly mapped.
    
    fixes #1569
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Updated the mappers to use the new schema/service models
    
    (2022)
    Fix conversion of byte to integer with max / min
    Fixed the conversion of byte[] to string with byte format
    
    (1605)
    Added better support for BigDecimal & BigInteger
    
    fixes #1432
    Fixed the bug with rendering responses with Map of Lists
    
    fixes #1475
    Added tests for item property creation
    
    Also rearranged methods to put public methods on top
    
    related to #956
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Updated copyright year
    
    (1082)
    correct spelling, fix typos
    (issue #1896)
    Updated tests to account for the change from Map to VenderExtensions
    
    (1636)
    Adding vendorExtensions in apiKey class
    
    (1636)
    Updated the mappers to use the new schema/service models
    
    (2022)
    Provided type safe vendor extensibility rather than naked maps
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Added native UUID support
    
    fixes #2314
    Correctly represent byte arrays
    
    fixes #1430
    Added support for nested model references
    
    especially useful for 2D arrays
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Fixed the issue rendering parameters that are either enums or arrays of enums
    
    fixes #664
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    feat: Add test method
    Changed to use verifyAll
    
    (2415)
    Fixed allowable range on string properties
    
    For string properties the allowable ranges should be rendered as max length and min length properties
    
    (2415)
    Map exclusive min / max in EnumMapper
    Fix swagger library upgrade breaking change
    
    (1621)
    Added support for allowable range values
    
    fixes #1244
    Fixed the enums in parameters
    
    fixes #1037
    handle any extension type
    Updated copyright year
    
    (1082)
    Updated tests to account for the change from Map to VenderExtensions
    
    (1636)
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Provided type safe vendor extensibility rather than naked maps
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    correct spelling, fix typos
    (issue #1896)
    add ResourceOwnerPasswordCredentialsGrant and ClientCredentialsGrant to GrantTypes
    
    Fix #789
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Formatting and code cleanup
    
    (1570)
    #1570 Add examples support
    Upgraded to groovy 3 and spock 2.0
    Added better support for rendering examples
    
    (2249)
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Extracted common logic to setup the JsonSerializer
    
    Also made the JsonSerialzer a component, that way every controller does not need to do the object mapper setup boilerplate code.
    
    related to #701
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Added two plugins to help customize the host/basePath
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Fixed the swagger base path
    
    (3351)
    Migrated mixin based test support classes to traits
    
    (2022)
    Removed the PathProviderFactory abstraction
    
    (1773)
    Removed deprecated api in PathProvider
    
    Also simplified the usages as a result of no longer needing servlet context to resolve the paths
    
    (1773)
    Code cleanup and reformatting
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    Update tests with new factory for path provider. Remove unused code. Update headers with correct year.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    migrate from guava multimap
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Migrating Ordering to Comparator
    If forwarded prefix is specified it should always replace context path in respective spring versions
    Fixed x-forwarded-prefix concatenation to basePath. since spring 4.3.15/5.0.5 should replace instead. Added support for swagger1
    Using media type to determine correct param type when expanding parameter
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Replaced all the non-RequestMapping placeholders
    
    Use Environment to resolve properties where possible.
    
    (1770)
    Make Swagger2Controller respect basePath even if a host is not set
    
    This fixes #1435 and #1507
    Made JsonSupport a trait
    
    Also code-reformatting
    (1694)
    Modified the controller tests to be unit tests
    
    Since the gradle builds were timing out, this makes it easier and quicker to test rather than loading up the spring context.
    
    related to #1621
    Made the controllers constructor injected
    
    Also fixed the test to use the spring 1.4.x testing improvements
    
    (1621)
    adds basePath from x-forwarded-prefix
    Refactored ApiListingReferenceScanner to be a post processor
    
    That way all the properties needed for it are infered after we create
    the ApiListing itself and not the other way aroundi.
    Fixed all the tests after refactoring the ApiListingReferenceScanner
    Extracted common logic to setup the JsonSerializer
    
    Also made the JsonSerialzer a component, that way every controller does not need to do the object mapper setup boilerplate code.
    
    related to #701
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Added a test to verify the case when the port number is -1
    
    related to #692
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Added two plugins to help customize the host/basePath
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Migrated mixin based test support classes to traits
    
    (2022)
    added test for coverage
    Formatting and code cleanup
    
    (1570)
    #1570 Add examples support
    Added vendor extensions to all security schemes
    
    Also migrated from using `Map<String, Object>` to using `VendorExtension<T>`. This allows the internal models to be strongly typed and yet use the common VenderExtensionsMapper to map it to the swagger library native Map representation.
    
    (1636)
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed AuthorizationType to have a name property that represents the configuration name of the authorization scheme
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Updated copyright year
    
    (1082)
    Added mapping support for list vendor extensions
    
    The vendor extension mapper now can map extensions that have a list value. Also appropriately modified the respective security scheme mappers to use it.
    
    (1636)
    Adding vendorExtensions in apiKey class
    
    (1636)
    Fix the incorrectly mapped key name
    
    For ApiKey tokens the key name was incorrectly mapped.
    
    fixes #1569
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Standardized method names to map[Type]
    
    for methods that did not map to equivalent types called out the source and target
    types in the method name.
    
    Adjusted the visibility of methods
    
    Extracted inner classes so that they can be testable
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Polished the builder apis to be fluent
    Updated the mappers to use the new schema/service models
    
    (2022)
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Updated the mappers to use the new schema/service models
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    migrate from guava ImmutableMap, Joiner, Splitter
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Added mapping support for list vendor extensions
    
    The vendor extension mapper now can map extensions that have a list value. Also appropriately modified the respective security scheme mappers to use it.
    
    (1636)
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Upgraded to swagger-core 1.5.3-M1
    
    Also upgraded other libraries. Addressed the security related changes
    in swagger models
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Made the authorization types list an covariant list
    
    Also fixed the bug where the security definition was mapped to the wrong key
    
    fixes #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Standardized method names to map[Type]
    
    for methods that did not map to equivalent types called out the source and target
    types in the method name.
    
    Adjusted the visibility of methods
    
    Extracted inner classes so that they can be testable
    Fixed the swagger json to match the currently supported output
    Added support for rendering security definitions and authorizations for operations
    Adjusted packages so that swagger implementations can co-exist
    Somewhat working
    Fixed reliability sonar bugs
    Fixed the build and also fixed depcration warnings
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Updated the mappers to use the new schema/service models
    
    (2022)
    Fixed checkstyle issues in ParameterMapper.java
    
    Signed-off-by: Martin Kremers <info@martinkremers.de>
    Updated swagger UI to 3.20.9
    
    Also fixed npm package audit failures and updated package references
    
    relates to #2022
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fix #2822 related to @ApiParam(example="..") not working for @RequestBody
    Fix contract tests.
    Adapted behavior of ParameterMapper and added tests.
    Create a FormParameter model object instead of BodyParameter for fields that are part of a multipart form (in=formData).
    Updated copyright year
    
    (1082)
    migrate from guava multimap
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Added mapper support for parameter vendor extensions
    
    fixes #2347
    Updated the mappers to render the examples in parameters
    
    (853)
    Fixed bug involving complex params in multipart requests
    
    When we receive multipart form variables of complex types we were not rendering the complex types that would come as json payloads in the body. This fixes that. It also addresses handling multiple files in a multipart request.
    
    (1965)
    Updated the copyright headers, cleanup, reformatting
    
    and polish!
    
    (1901)
    Provide proprty pattern annotation support
    Correctly represent byte arrays
    
    fixes #1430
    Added support for allowable range values
    
    fixes #1244
    Fixed the enums in parameters
    
    fixes #1037
    Added support for list of enums in "serializable parameters"
    
    fixes #1037
    Updated mappers to support 2d arrays for swagger2
    
    swagger 1.2 does not (and will not support) 2d arrays
    Added support for nested model references
    
    especially useful for 2D arrays
    Centralized model ref creation and removed dupication
    Added model ref interface
    
    Also added two dimensional array substitution support
    Fix generation of "schema" section for a "body" parameter to contain correct "type" & "format"
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Shorted the static imports and formatting
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for rendering maps in swagger 2
    Added support for Map types in the models
    Render primitive body parameters correctly
    Standardized method names to map[Type]
    
    for methods that did not map to equivalent types called out the source and target
    types in the method name.
    
    Adjusted the visibility of methods
    
    Extracted inner classes so that they can be testable
    Added support for customized object mapper
    
    Also fixed the output to be as close to the reference output as possible
    Adjusted packages so that swagger implementations can co-exist
    Fixed the parameter mapper for swagger2
    [#538] Implemented the mappers
    Somewhat working
    Fixed the mappers for swagger 2 for better multipart support
    
    (3364)
    Added support for additional scalar types
    Upgraded compiler to java 11
    
    Additional fixes
    Updated the mappers to use the new schema/service models
    
    (2022)
    Moved from using deprecated methods from Types
    
    (3348)
    Remove usage of generic wildcard type
    Fixed reliability sonar bugs
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed the build and also fixed depcration warnings
    Updated the mappers to use the new schema/service models
    
    (2022)
    Code cleanup
    
    Converted anonymous methods into lambdas
    Also added sorting to model names
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Optimized imports per project style
    
    (1082)
    using more static imports
    clean up static imports
    migrated from guava Predicat
    migrate from guava Predicate
    migrate from guava ImmutableMap, Joiner, Splitter
    migrating from guava Strings
    migrated guava Function
    Migrating Ordering to Comparator
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fix conversion of byte to integer with max / min
    Changed the internal represenation of file
    
    This way if we encounter a type called File we resolve to the right type
    
    (1632)
    Fixed the conversion of byte[] to string with byte format
    
    (1605)
    Added better support for BigDecimal & BigInteger
    
    fixes #1432
    Fixed the bug with rendering responses with Map of Lists
    
    fixes #1475
    Added support for allowable range values
    
    fixes #1244
    Fixed the enums in parameters
    
    fixes #1037
    Filtered out the void properties and collection of voids
    
    When mapping to swagger objects we filter out the voids, array of voids, or list of voids
    since it doesnt make sense anyways to be part of the model properties collection.
    
    Also fixed the coverage to not include mapstruct generated mappers
    
    fixes #1147
    Fixed use of non-1.6 compatible api
    
    related to #1086
    Added tests for item property creation
    
    Also rearranged methods to put public methods on top
    
    related to #956
    Updated mappers to support 2d arrays for swagger2
    
    swagger 1.2 does not (and will not support) 2d arrays
    Polished the comparison of properties
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Fixed the rendering of MultipartFile
    
    fixes #768
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Additional builder logic cleanup
    Updated the mappers to use the new schema/service models
    
    (2022)
    Fixed the build and also fixed depcration warnings
    Updated the mappers to use the new schema/service models
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Added support to determine if a model has a super class
    
    This is useful for the model mapper to construct a composed model vs a regular model
    
    (1151)
    (868)
    Sorted the model properties by position and name
    
    resolves #3087
    Additional builder logic cleanup
    Updated the mappers to use the new schema/service models
    
    (2022)
    Fixed reliability sonar bugs
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed the build and also fixed depcration warnings
    Updated the mappers to use the new schema/service models
    
    (2022)
    Code cleanup
    
    Converted anonymous methods into lambdas
    Also added sorting to model names
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fix compiler warnings
    
    (2688)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    clean up static imports
    handling order issues and equivalence equals
    all tests past
    migrated from guava Predicat
    migrate from guava Predicate
    migrate from guava multimap
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    migrated guava Function
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixed documentation/compiler warnings
    
    #1232
    Added support to render subtypes in swagger1 and swagger2 libraries
    
    (1151)
    (868)
    Added support for allowEmptyValue
    
    (2021)
    Made title synonmous with name for models
    
    fixes #2139
    Re-ordered constructor args
    
    (1974)
    Setting _default in StringProperty to match new defaultValue from
    ModelProperty
    Setting _default in StringProperty to match new defaultValue from
    ModelProperty
    codestyle fix
    add xml names and attributes supporting for models
    Removed spurious unused method call
    
    Reformatting to coding style.
    Adding vendor extensions support to model property
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Fixed the conversion of byte[] to string with byte format
    
    (1605)
    Made the check for map type parameter count strict
    
    fixes #1594
    Fix swagger library upgrade breaking change
    
    (1621)
    Fixed issue with non-generic Map types
    
    fixes #1562
    Updated copyright year and tidied up unnecessary casting
    Updated plugins for @Min/@Max/@DecimalMin/@DecimalMax to set the exclusiveMin/exclusiveMax properties
    Fixes issue with allowable ranges e.g. infinity
    
    fixes #1504
    Fixed the bug with rendering responses with Map of Lists
    
    fixes #1475
    Added support for allowable range values
    
    fixes #1244
    #1296: Adding Pattern annotation support
    Removed un-needed mapper reference
    
    related to #1037
    Fixed the enums in parameters
    
    fixes #1037
    Updated the model mapping to be spec compliant
    Filtered out the void properties and collection of voids
    
    When mapping to swagger objects we filter out the voids, array of voids, or list of voids
    since it doesnt make sense anyways to be part of the model properties collection.
    
    Also fixed the coverage to not include mapstruct generated mappers
    
    fixes #1147
    Updated mappers to support 2d arrays for swagger2
    
    swagger 1.2 does not (and will not support) 2d arrays
    Added model ref interface
    
    Also added two dimensional array substitution support
    Polished the comparison of properties
    Fixed formatting
    Align to swagger spec and sort before mapping to Property object.
    Add support for api model property positions.
    Add minLength and maxLength support from StringProperty
    Fixed rendering Maps that are subclasses of partially closed generic Maps.
    
    fixes #1062
    Added a temporary fix to add the type to a model
    
    While all models need to have type=object set, this is a breaking change
    to existing behavior. For now setting this for only interfaces gets over
    the immediate bug. Setting it to object for all models will be addressed
     as part of 2.4.
    
    fixes #1063
    Added a fix for 'example' field in @ApiModelProperty annotation
    #801 #810 Add proper support for enums in response values and in schema objects
    Changes to allow for readOnly property in swagger 2
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Added support for list of maps
    
    fixes #740
    Fixed an NPE when generating models for generic types with Void as one of its type bindings
    
    fixes #728
    Fixes the problem when multiple api listings are associated with the same api declaration
    
    Swagger 1.2 does not support this model, hacked to only return the first api listing. This needs
    to be fixed to merge the api listings by group, but thats for a different commit. This only
    fixes the problem effectively for 2.0 of the spec, and spec 1.2 is no worse than it was before this
    fix.
    
    related to #727
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Took care of low hanging TODOs
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for Map types in the models
    Skip rendering void models
    Standardized method names to map[Type]
    
    for methods that did not map to equivalent types called out the source and target
    types in the method name.
    
    Adjusted the visibility of methods
    
    Extracted inner classes so that they can be testable
    Rearranged methods so that the private methods are at the bottom
    Updated the swagger2 mappers to not use expressions
    Updated models so that allowable values are rendered
    Fixed bug with rendering model properties correctly
    Sorted properties alphabetically
    Turned off the checkstyle that creates properties
    Added support for customized object mapper
    
    Also fixed the output to be as close to the reference output as possible
    Fixed the build
    
    The models are not correct however :-o
    Adjusted packages so that swagger implementations can co-exist
    Fixed the parameter mapper for swagger2
    Made ModelProperty exclusively use ModelRef rather than typeName
    Replaced response class with response model
    [#538] Implemented the mappers
    Replaced NotImplementedException with UnsupportedOperation
    Compiles without security stuff
    compiling now
    Somewhat working
    Fixed issue rendering file input as model attribute
    
    fixes #1370
    Fixed the mapping for form variables and updated the contracts
    
    (3353)
    Fixed the mappers for swagger 2 for better multipart support
    
    (3364)
    Upgraded compiler to java 11
    
    Additional fixes
    Fixed reliability sonar bugs
    Additional builder logic cleanup
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Updated the mappers to use the new schema/service models
    
    (2022)
    Added mapping support for list vendor extensions
    
    The vendor extension mapper now can map extensions that have a list value. Also appropriately modified the respective security scheme mappers to use it.
    
    (1636)
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Standardized method names to map[Type]
    
    for methods that did not map to equivalent types called out the source and target
    types in the method name.
    
    Adjusted the visibility of methods
    
    Extracted inner classes so that they can be testable
    Added mapping support for list vendor extensions
    
    The vendor extension mapper now can map extensions that have a list value. Also appropriately modified the respective security scheme mappers to use it.
    
    (1636)
    add ResourceOwnerPasswordCredentialsGrant and ClientCredentialsGrant to GrantTypes
    
    Fix #789
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Took care of low hanging TODOs
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Standardized method names to map[Type]
    
    for methods that did not map to equivalent types called out the source and target
    types in the method name.
    
    Adjusted the visibility of methods
    
    Extracted inner classes so that they can be testable
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Updated the mappers to use the new schema/service models
    
    (2022)
    Fixed reliability sonar bugs
    Fixed the build and also fixed depcration warnings
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    clean up static imports
    migrated from guava Predicat
    migrate from guava ImmutableMap, Joiner, Splitter
    migrating from guava Strings
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixed allowable range on string properties
    
    For string properties the allowable ranges should be rendered as max length and min length properties
    
    (2415)
    Added mapper support for parameter vendor extensions
    
    fixes #2347
    Updated the mappers to render the examples in parameters
    
    (853)
    Fixed regression that renders allowEmptyValues in model properties
    
    Per 2.0 spec this is only rendered on parameters (not body parameters). So we add this to parameter and remove it from model properties.
    
    (2204)
    Fixed the NPE when rendering complex path variable
    
    When we have a complex path variable that is ignored via @ApiIgnore. Then the parameter type resolution falls back to using the ApiImplicitParam annotation value for parameter type (query, form etc.) As a result when its empty it ends up with a null value. The right thing to happen in this case is for the developer to fill in the type correctly to fix the problem.
    
    This address that case of the NPE but doesnt try to provide a clever solution. Thus the example will render the operation to indicate that the bar parameter is a body parameter.
    
    resolves #2148
    Added support for overriding the collection format
    
    fixes #1946
    Updated the copyright headers, cleanup, reformatting
    
    and polish!
    
    (1901)
    Provide proprty pattern annotation support
    Correctly represent byte arrays
    
    fixes #1430
    Fixed an issue where Maps as parameters were not rendered correctly
    
    fixes #1306
    Added support for allowable range values
    
    fixes #1244
    Simplified the enum mappers and made the api consistent
    
    related to #1037
    Fixed the enums in parameters
    
    fixes #1037
    Fixes rendering of expanding List of scalar types including enums
    
    fixed #969 and reverted fix for #1037
    Added support for list of enums in "serializable parameters"
    
    fixes #1037
    Updated mappers to support 2d arrays for swagger2
    
    swagger 1.2 does not (and will not support) 2d arrays
    Centralized model ref creation and removed dupication
    Added model ref interface
    
    Also added two dimensional array substitution support
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Fixes population of default values in serializable parameters
    
    fixes #933
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Fixed the issue rendering parameters that are either enums or arrays of enums
    
    fixes #664
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Updated the mappers to use the new schema/service models
    
    (2022)
    Updated the mappers to use the new schema/service models
    
    (2022)
    Fixed issue where GET/HEAD/OPTION genering incorrect parms
    
    fixes #3338
    Updated the mappers to use the new schema/service models
    
    (2022)
    fix: follow the original import style
    fix: fix for @Size annotation does not work properly on List
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrated guava Function
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixed allowable range on string properties
    
    For string properties the allowable ranges should be rendered as max length and min length properties
    
    (2415)
    Map exclusive min / max in EnumMapper
    Externalized descriptions of apis
    
    Externalized descriptions of apis/models/properties
    
    (#1232)
    Added support for bean validations
    
    Specifically on Request Parameters
    Fix swagger library upgrade breaking change
    
    (1621)
    Removed default min/max values for @Min/@Max/@DecimalMin/@DecimalMax for #1521
    Added support for allowable range values
    
    fixes #1244
    Simplified the enum mappers and made the api consistent
    
    related to #1037
    Fixed the enums in parameters
    
    fixes #1037
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Standardized method names to map[Type]
    
    for methods that did not map to equivalent types called out the source and target
    types in the method name.
    
    Adjusted the visibility of methods
    
    Extracted inner classes so that they can be testable
    Fixed the mappers for swagger 2 for better multipart support
    
    (3364)
    Formatting change
    
    (3348)
    Fixed the build and also fixed depcration warnings
    Made all the logging debug
    
    (2022)
    Updated the mappers to use the new schema/service models
    
    (2022)
    Upgrade libraries and plugin versions
    
    (2022)
    #1570 Add examples support
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    handling order issues and equivalence equals
    all tests past
    migrate from guava multimap
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Formatting fix
    
    (1151)
    (868)
    Fix #2293
    Fixed the ordering of the elements to be stable
    
    (1623)
    Adding vendor extensions to api info and documentationbuilder
    Made the map backing the Paths sortable
    
    Currently the map data structure backing the paths collection is a simple Map. Changing this to a TreeMap makes the order of the paths predictable.
    
    fixes #1648
    Added support for vendor extensions on Parameters and ResponseModels
    
    fixes #1137
    Added support for response header description
    
    fixes #1271
    Fixed the enums in parameters
    
    fixes #1037
    Added support for ResponseHeaders
    
    fixes #937
    Added support for Contact as a first class object
    Added model ref interface
    
    Also added two dimensional array substitution support
    add host() method to docket
    
    Fixes #764
    Upgraded swagger libraries to 2.5.4
    
    related to #939
    Upgraded to swagger-core 1.5.3
    Fixed the bug where the caching was incorrect for operations without
    
    specific http method
    - Renamed the configuration class
    Provided type safe vendor extensibility rather than naked maps
    add support for vendor extensions in operations
    
    
    
    Fixes #824
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Fixes the problem when multiple api listings are associated with the same api declaration
    
    Swagger 1.2 does not support this model, hacked to only return the first api listing. This needs
    to be fixed to merge the api listings by group, but thats for a different commit. This only
    fixes the problem effectively for 2.0 of the spec, and spec 1.2 is no worse than it was before this
    fix.
    
    related to #727
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Applying PR comments, removing nickname for uniqueId
    Adding ability to optionally populate nickname into operationId for swagger 2.0 implementations
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Upgraded to swagger-core 1.5.3-M1
    
    Also upgraded other libraries. Addressed the security related changes
    in swagger models
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Skip rendering void models
    Rearranged methods so that the private methods are at the bottom
    Renamed methods to be more consistent
    Updated the swagger2 mappers to not use expressions
    Add a top level documentation object
    
    Documentation object is a service level model, that now plays host to
    media types the service produces and consumes. the schemes the service
    supports and also the base path of the api
    Renamed Group to Documentation
    Added support for rendering security definitions and authorizations for operations
    Added support for tags
    
    Also adjusted the swagger.json to account for the tags not having all the elements
    Fixed for the responses not getting populated
    
    Also 200-OK messages needed to use the operations return type if nothing was specified in the response message
    Fix the mappers to not be create new Paths for every operation
    Added swagger2 contract and fixed bug with operations not getting rendered
    Adjusted packages so that swagger implementations can co-exist
    Replaced response class with response model
    [#538] Implemented the mappers
    Fixed the method collision because of type erasure
    Compiles without security stuff
    compiling now
    Somewhat working
    WIP
    Updated the mappers to use the new schema/service models
    
    (2022)
    Fixed the build and also fixed depcration warnings
    Added configuration properties support
    
    This helps generate metadata for the application properties
    
    (2022)
    Updated the mappers to use the new schema/service models
    
    (2022)
    Don't include a license object when both license and licenseUrl are empty.
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Standardized method names to map[Type]
    
    for methods that did not map to equivalent types called out the source and target
    types in the method name.
    
    Adjusted the visibility of methods
    
    Extracted inner classes so that they can be testable
    Updated the swagger2 mappers to not use expressions
    Updated the mappers to use the new schema/service models
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    handle any extension type
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrating from guava Strings
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    Migraiting from FluentIterable
    Fixed the ordering of the elements to be stable
    
    (1623)
    Added mapping support for list vendor extensions
    
    The vendor extension mapper now can map extensions that have a list value. Also appropriately modified the respective security scheme mappers to use it.
    
    (1636)
    Provided type safe vendor extensibility rather than naked maps
    Fixed the build and also fixed depcration warnings
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Standardized method names to map[Type]
    
    for methods that did not map to equivalent types called out the source and target
    types in the method name.
    
    Adjusted the visibility of methods
    
    Extracted inner classes so that they can be testable
    Added two plugins to help customize the host/basePath
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Added two plugins to help customize the host/basePath
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Added suppressions for regex sonar flags
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrated guava Function
    Updated the contracts after upgrade to latest swagger library
    
    (2503)
    Added better support for rendering examples
    
    (2249)
    General cleanup and polish
    
    (1941)
    add some tests
    fix code style issues from codacy
    fixes #1941
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Extracted common logic to setup the JsonSerializer
    
    Also made the JsonSerialzer a component, that way every controller does not need to do the object mapper setup boilerplate code.
    
    related to #701
    Include License in the list of mixins used to customize the swagger2 models
    
    fixes #672
    Removed all the WebMvcConfigurerAdapters and created a BeanPostProcessor
    
    that can assist with finding all the relavent ObjectMappers in play. This
    technique is less intrusive than the WebMvcConfigurationAdapter + @EnableWebMvc
    technique because spring-boot assumes that when one of those or an implementation
    of WebMvcConfigurationSupport implementation is in play, it will refuse to particpate
    in the auto configuration.
    
    related to #638
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for tags
    
    Also adjusted the swagger.json to account for the tags not having all the elements
    Added support for customized object mapper
    
    Also fixed the output to be as close to the reference output as possible
    Added two plugins to help customize the host/basePath
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Removed PropertySourcedMapping
    
    This is no longer needed to support property driven mapping resolution
    
    (2022)
    Consolidated the annotations
    
    (2022)
    '
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Revert "Moved the ConditionalOnWeb annotation"
    
    This reverts commit 1ea0369b49bfb3ca2b49ca083c7de433ef1605e6.
    Moved the ConditionalOnWeb annotation
    
    based on suggestion from AndyW from the spring team, moving it to the actual configuration rather than in the annotation.
    
    fixes #2438
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Removed the property sources configurer yay!
    
    Since we now resolve imperatively it is no longer required to have this defined. Also remove the *web package from component scan so that we can manually register the two controllers using new PropertySourcedRequestMappingHandler.
    
    (1770)
    Fixed the bug where the caching was incorrect for operations without
    
    specific http method
    - Renamed the configuration class
    Extracted common logic to setup the JsonSerializer
    
    Also made the JsonSerialzer a component, that way every controller does not need to do the object mapper setup boilerplate code.
    
    related to #701
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Removing some redunant packages and renamed swagger 1.2
    
    configuration to match the convention in swagger 2.0
    
    related to #667
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Removed all the WebMvcConfigurerAdapters and created a BeanPostProcessor
    
    that can assist with finding all the relavent ObjectMappers in play. This
    technique is less intrusive than the WebMvcConfigurationAdapter + @EnableWebMvc
    technique because spring-boot assumes that when one of those or an implementation
    of WebMvcConfigurationSupport implementation is in play, it will refuse to particpate
    in the auto configuration.
    
    related to #638
    Removed all the EnableWebMvc annotations
    
    related to #638
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    Updated the build scripts to publish all the publishable modules
    
    Also realized that nothing is pulling in the common module, so updated the configuration beans to import it
    Added support for customized object mapper
    
    Also fixed the output to be as close to the reference output as possible
    Fixed the build
    
    The models are not correct however :-o
    Wired up the v2 spec with the v2 application context
    
    Unable to figure out how to bootstrap the v2 spec as only one main method is allowed
    Added controller for swagger v2
    Moved union of mvc and flux configurations to a shared configuration class
    
    Since we are protected by conditionals, moving it to a shared configuration class helps collapse the anotation to a single annotation regardless of paradigm. Also left the variants of swagger2 so that it doesnt break existing users.
    
    (3366)
    Adjusted the configuration using the Conditional annotations
    
    (3366)
    Removed PropertySourcedMapping
    
    This is no longer needed to support property driven mapping resolution
    
    (2022)
    Consolidated the annotations
    
    (2022)
    '
    Fixes after initial merge.
    fix checkstyle
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Fixed documentation errors
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    [#613] Renamed DocumentConfigurer to Docket
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Wired up the v2 spec with the v2 application context
    
    Unable to figure out how to bootstrap the v2 spec as only one main method is allowed
    Modularized the configuration
    
    - Also added bean ordering so that spring plugins are always run before the swagger plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#463] Adding javadoc to publication
    Testing xml based swaggerspringmvc plugin. Adding draft documentation for 0.8.4 release.
    Add plugin and adapter to simplify setup.
    Added default modelProvider to base spring configuration.
    Moved union of mvc and flux configurations to a shared configuration class
    
    Since we are protected by conditionals, moving it to a shared configuration class helps collapse the anotation to a single annotation regardless of paradigm. Also left the variants of swagger2 so that it doesnt break existing users.
    
    (3366)
    Added open api variants for mvc and webflux for open api
    
    (3366)
    Updated readme and renamed annotation for non-boot applications
    Renamed classes to be consistent
    
    (2022):
    Consolidated the annotations
    
    (2022)
    '
    Changes to map service model to OAS
    
    (2022)
    Added functional contract tests
    
    (2022)
    Created an empty shell based on swagger 2.0
    
    (2022)
    Fixed documentation errors
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    [#613] Renamed DocumentConfigurer to Docket
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Wired up the v2 spec with the v2 application context
    
    Unable to figure out how to bootstrap the v2 spec as only one main method is allowed
    Modularized the configuration
    
    - Also added bean ordering so that spring plugins are always run before the swagger plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#463] Adding javadoc to publication
    Testing xml based swaggerspringmvc plugin. Adding draft documentation for 0.8.4 release.
    Add plugin and adapter to simplify setup.
    Added default modelProvider to base spring configuration.
    Moved union of mvc and flux configurations to a shared configuration class
    
    Since we are protected by conditionals, moving it to a shared configuration class helps collapse the anotation to a single annotation regardless of paradigm. Also left the variants of swagger2 so that it doesnt break existing users.
    
    (3366)
    Adjusted the configuration using the Conditional annotations
    
    (3366)
    Removed PropertySourcedMapping
    
    This is no longer needed to support property driven mapping resolution
    
    (2022)
    Consolidated the annotations
    
    (2022)
    '
    fix checkstyle
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Fixed documentation errors
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    [#613] Renamed DocumentConfigurer to Docket
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Wired up the v2 spec with the v2 application context
    
    Unable to figure out how to bootstrap the v2 spec as only one main method is allowed
    Modularized the configuration
    
    - Also added bean ordering so that spring plugins are always run before the swagger plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#463] Adding javadoc to publication
    Testing xml based swaggerspringmvc plugin. Adding draft documentation for 0.8.4 release.
    Add plugin and adapter to simplify setup.
    Added default modelProvider to base spring configuration.
    Added two plugins to help customize the host/basePath
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Added two plugins to help customize the host/basePath
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Added two plugins to help customize the host/basePath
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Adjusted the configuration using the Conditional annotations
    
    (3366)
    Fixed the swagger base path
    
    (3351)
    Fixed issue with swagger2 duplicating the context path
    
    fixes #3351
    Changed the api docs endpoints to work better with swagger-ui
    
    With the swagger ui working well the services need to be configured to work better in concert with it.
    Removed PropertySourcedMapping
    
    This is no longer needed to support property driven mapping resolution
    
    (2022)
    Fixes after initial merge.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Introduced the new property sourced mapping annotation
    
    Adjusted the request mapping to now use the default url as the path mapping. If the property sourced mapping is not resolvable we use this default value.
    
    (1770)
    Replaced all the non-RequestMapping placeholders
    
    Use Environment to resolve properties where possible.
    
    (1770)
    Moved setting the base path outside the host name check
    
    fixes #1772
    Polished
    
    (fixes 1435 and 1507)
    Make Swagger2Controller respect basePath even if a host is not set
    
    This fixes #1435 and #1507
    Namespaced the property sources using placeholder prefix
    
    Instead of the default `${` we use `$SPRINGFOX{` this way the configurer does not interfere with library users.
    
    (1621)
    Made the controllers constructor injected
    
    Also fixed the test to use the spring 1.4.x testing improvements
    
    (1621)
    adds basePath from x-forwarded-prefix
    Fixed unused import
    
    related to #1109
    Replaced media types with constants and added HAL support
    
    related to #1109
    - modified mapping with produces={application/json} to ensure that responseponse has Content-type set to 'application/json'
    Removed dependency on spring-hateoas
    
    In addition upgraded the jackson libraries and the json assert libraries.
    This change is mainly to remove the dependency on spring-hateoas being available
    for this library.
    
    fixes #1104
    add host() method to docket
    
    Fixes #764
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Made the SwaggerResource#getLocation() return a path thats not qualified
    
    using the ?group=<group-name> query parameter. This is to prevent the bug in swagger-ui/ swagger.js
    where the api listing is resolved by appending the api url to the url on the swagger page.
    
    more details available @ https://github.com/swagger-api/swagger-ui/issues/1245
    
    related to #727
    Extracted common logic to setup the JsonSerializer
    
    Also made the JsonSerialzer a component, that way every controller does not need to do the object mapper setup boilerplate code.
    
    related to #701
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Update Swagger2Controller.java
    
    uri.getPort() returns -1 if port is not specified.
    That's create an error in json spec:
    {
    "swagger": "2.0",
    "info": {
    "version": "0.1",
    "title": "",
    "contact": {},
    "license": {}
    },
    "host": "localhost:-1",
    "basePath": "/rest",
    ......
    
    Which swaggerui doesn't repair and it doesn't work properly.
    Allow property override for host name
    
    created a property springfox.documentation.swagger.v2.host
    that can be overriden with a value. However if no value was supplied it
    falls back the existing mechanisms of inferring the host name
    
    fixes #689
    Updated the naive host/port resolution strategy
    Removes jsp from swagger-ui
    - Adds an endpoint to list all of the swagger resources within a running application
    - Added a base class for swagger contract tests
    Adds a test for resource location
    Add resource discovery to swagger ui webjar
    - Changing webjar layout to match the webjar standard
    - Added gitter/circleci integration
    Fixes the type in the controller path configuration property
    
    fixes #645
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Ignore the swagger 2 controller by default
    
    fixes #626
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Renamed methods to be more consistent
    Fixed the swagger json to match the currently supported output
    Renamed related classes to Documentation*
    Renamed Group to Documentation
    Fixed the build
    
    The models are not correct however :-o
    Added controller for swagger v2
    Added two plugins to help customize the host/basePath
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Added two plugins to help customize the host/basePath
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Added two plugins to help customize the host/basePath
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Added vanilla conditions around open api annotations
    
    (3366)
    Adjusted the configuration using the Conditional annotations
    
    (3366)
    Fixed the swagger base path
    
    (3351)
    Fixed issue with swagger2 duplicating the context path
    
    fixes #3351
    Changed the api docs endpoints to work better with swagger-ui
    
    With the swagger ui working well the services need to be configured to work better in concert with it.
    Removed PropertySourcedMapping
    
    This is no longer needed to support property driven mapping resolution
    
    (2022)
    Set the basePath using the request context path if present
    
    This allows the X-Forwarded-Prefix header to work correctly
    Code cleanup and reformatting
    
    (1773)
    Cleaned up for Java 8
    
    (1773)
    Make sure webflux context is conditional on webflux specific class.
    Fixes after initial merge.
    Use real host instead of localhost:8080
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Introduced the new property sourced mapping annotation
    
    Adjusted the request mapping to now use the default url as the path mapping. If the property sourced mapping is not resolvable we use this default value.
    
    (1770)
    Replaced all the non-RequestMapping placeholders
    
    Use Environment to resolve properties where possible.
    
    (1770)
    Moved setting the base path outside the host name check
    
    fixes #1772
    Polished
    
    (fixes 1435 and 1507)
    Make Swagger2Controller respect basePath even if a host is not set
    
    This fixes #1435 and #1507
    Namespaced the property sources using placeholder prefix
    
    Instead of the default `${` we use `$SPRINGFOX{` this way the configurer does not interfere with library users.
    
    (1621)
    Made the controllers constructor injected
    
    Also fixed the test to use the spring 1.4.x testing improvements
    
    (1621)
    adds basePath from x-forwarded-prefix
    Fixed unused import
    
    related to #1109
    Replaced media types with constants and added HAL support
    
    related to #1109
    - modified mapping with produces={application/json} to ensure that responseponse has Content-type set to 'application/json'
    Removed dependency on spring-hateoas
    
    In addition upgraded the jackson libraries and the json assert libraries.
    This change is mainly to remove the dependency on spring-hateoas being available
    for this library.
    
    fixes #1104
    add host() method to docket
    
    Fixes #764
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Made the SwaggerResource#getLocation() return a path thats not qualified
    
    using the ?group=<group-name> query parameter. This is to prevent the bug in swagger-ui/ swagger.js
    where the api listing is resolved by appending the api url to the url on the swagger page.
    
    more details available @ https://github.com/swagger-api/swagger-ui/issues/1245
    
    related to #727
    Extracted common logic to setup the JsonSerializer
    
    Also made the JsonSerialzer a component, that way every controller does not need to do the object mapper setup boilerplate code.
    
    related to #701
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Update Swagger2Controller.java
    
    uri.getPort() returns -1 if port is not specified.
    That's create an error in json spec:
    {
    "swagger": "2.0",
    "info": {
    "version": "0.1",
    "title": "",
    "contact": {},
    "license": {}
    },
    "host": "localhost:-1",
    "basePath": "/rest",
    ......
    
    Which swaggerui doesn't repair and it doesn't work properly.
    Allow property override for host name
    
    created a property springfox.documentation.swagger.v2.host
    that can be overriden with a value. However if no value was supplied it
    falls back the existing mechanisms of inferring the host name
    
    fixes #689
    Updated the naive host/port resolution strategy
    Removes jsp from swagger-ui
    - Adds an endpoint to list all of the swagger resources within a running application
    - Added a base class for swagger contract tests
    Adds a test for resource location
    Add resource discovery to swagger ui webjar
    - Changing webjar layout to match the webjar standard
    - Added gitter/circleci integration
    Fixes the type in the controller path configuration property
    
    fixes #645
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Ignore the swagger 2 controller by default
    
    fixes #626
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Renamed methods to be more consistent
    Fixed the swagger json to match the currently supported output
    Renamed related classes to Documentation*
    Renamed Group to Documentation
    Fixed the build
    
    The models are not correct however :-o
    Added controller for swagger v2
    Added two plugins to help customize the host/basePath
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Added two plugins to help customize the host/basePath
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    #2932 - Spring HATEOAS 1.0.0.RELEASE
    Fixes after initial merge.
    fix test for springfox-core
    Remove spring-web-mvc deps from core
    
    Add two interfaces :
       - NameValueExpression
       - PatternsRequestCondition
    
    Class from spring will be wrapped onto this classes
    Introduced ByteBuddy dependency
    
    Since spock is not compatible with the latest version we need to force it to use CGLIB for mocking
    
    (1323)
    Fixed the artifact based sharing of test code
    Updated the converage numbers
    Added staticdocs module
    - Removed a bunch of gradle apply language plugins
    - Reverted gralde idea copyright generation from copyright file
    Adjusted the spring dependencies to provided
    
    Also reverted to using the regular servlet api dependency
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#436] Enum values with JsonValue are not supported
    
    fixes #436
    add some tests
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#498] add support for generic type naming strategies
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#436] Enum values with JsonValue are not supported
    
    fixes #436
    Fixed the license header
    Added basePackage predicate to help with selecting request handlers by package
    
    Also updated documentation formatting
    fixes #698
    Fix #2247 adds missing file header
    Fix #2247 maps enum values to name() rather than toString()
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Adding unit tests for new Property field - defaultValue
    Improved coverage and upgraded compatibility with boot 1.3.6
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    Upped the coverage in the core module
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Move into package without uppercase letters.
    fix checkstyle
    refactor(): remove dependencies to spring-mvc on swagger core
    Remove spring-web-mvc deps from core
    
    Add two interfaces :
       - NameValueExpression
       - PatternsRequestCondition
    
    Class from spring will be wrapped onto this classes
    Trying another approach using an utility checking spring versions. Moved it to the core so it could be available in other parts of the code. Also introduced a customer SpringVersion class return our own, made it a normal class so we can mock it for our tests. This should increase test coverage.
    Upped the coverage in the core module
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Provided type safe vendor extensibility rather than naked maps
    Coverage.
    Added a ListVendorExtension to support list types
    
    This is to support list properties. While swagger annotations do not support this. It is still a valid use case as demonstrated by the Amazon gateway extension. e.g. to rendering something like this.
    
     ```json
          "x-amazon-apigateway-authtype": "cognito_user_pools",
          "x-amazon-apigateway-authorizer": {
            "type": "cognito_user_pools",
            "providerARNs": [
                "arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}"
            ]
          }
    ```
    (1636)
    Fixed the test coverage for #1046
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Provided type safe vendor extensibility rather than naked maps
    Support explicit ordering for Tags
    Improved code-coverage and improved formatting
    Added support for tags as a first class concept
    
    Currently the tags are inferred based on a combination of @Api#value() and Class name.
    Going forward it can use the tags support built into the @Api annotations
    
    fixes #737
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed the build by adding tests
    Fixed issue where the global produces/consumes did not propogate
    
    fixes #1115
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava multimap
    Migraiting from FluentIterable
    Support explicit ordering for Tags
    Added support for adding a set of tags that apply to a docket
    
    fixes #936
    Added support for tags as a first class concept
    
    Currently the tags are inferred based on a combination of @Api#value() and Class name.
    Going forward it can use the tags support built into the @Api annotations
    
    fixes #737
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Major changes to accomodate controller-less specs
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    add unit test on ClientCredentials classes
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed AuthorizationType to have a name property that represents the configuration name of the authorization scheme
    [#538] Removed the models package and collapsed it to the service package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Coverage.
    Add bean tests for exclusive min / max
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    add unit test on ClientCredentials classes
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed AuthorizationType to have a name property that represents the configuration name of the authorization scheme
    [#538] Removed the models package and collapsed it to the service package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Coverage.
    Updated tests to account for the change from Map to VenderExtensions
    
    (1636)
    Adding vendorExtensions in apiKey class
    
    (1636)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed AuthorizationType to have a name property that represents the configuration name of the authorization scheme
    [#538] Removed the models package and collapsed it to the service package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Fixed a bug with unbounded generic parameters and return types
    
    Updated the examples to demonstrate the issue. The downside to this fix is that alternate type
    rules will not apply to these unbounded types. The upside is however we avoid an NPE!
    
    fixes #953
    Fixed a bug/TODO where replacables did not work on erased types
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Unit tests.
    fixing sorting list in multimap and adding test cases
    Coverage.
    Added support for nested model references
    
    especially useful for 2D arrays
    Added model ref interface
    
    Also added two dimensional array substitution support
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for Map types in the models
    Fixed the model and model property comparison
    
    In the course of fixing the tests, fixed the equals and hashcode implementation of model and property, this is important in limiiting the litering of models in the spec if this is incorrect.
    
    (2056)
    Coverage.
    Fixed the model and model property comparison
    
    In the course of fixing the tests, fixed the equals and hashcode implementation of model and property, this is important in limiiting the litering of models in the spec if this is incorrect.
    
    (2056)
    Coverage.
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixed codacity indicated error prone code
    Added native support for Optional types
    
    resolves #1199
    Introduced rule priorities for alternate types
    
    Before this all rules have the same priorities which is not idea. As demonstrated by #1558, we expect custom rules to take highest priority followed by generic type rules, followed by direct substitutions.
    
    With this fix the following priority will be applied to rules (highest
    priority to lowest)
    - Custom rules specified by docket#alternateTypeRules
    - Custom rules specified by docket#genericModelSubstitutes
    - Custom rules specifed by docet#directModelSubstitutes
    - Default rules that come built-in to springfox
    
    fixes #1558
    Added model ref interface
    
    Also added two dimensional array substitution support
    Added alternate type rule
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Fix #2247 maps enum values to name() rather than toString()
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    remove duplicate enum values
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#436] Enum values with JsonValue are not supported
    
    fixes #436
    Tightened the builder api
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Tightened the builder api
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Fixed issues with the underlying models
    
    (2022)
    Removed source identifier as a required attribute to construct a model
    
    (2022)
    Modified the builders to make it conducive to making changes given the uses
    
    These builders are implementations of nested builders now. While they do the job, they need some work to make it intuitve. This leads to a bunch of yields in the builder and based on formatting its not really easy to dicern what the yield is returning. This needs to be reworked
    
    (2022)
    Improved code-coverage and improved formatting
    Added support for overriding dataType via ApiModelProperty annotations
    
    The only stipulation, in order to get this to work is that the dataType
    is a package qualified class name.
    
    Granted that arrays and generic types will not be available for this kind
    of override. To guard from that situation if the type is only replacable
    if the replacement is more specific than the already specified value.
    
    fixes #602 and also addresses #554
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Improved code-coverage and improved formatting
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    migrate from guava Predicate
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Added basePackage predicate to help with selecting request handlers by package
    
    Also updated documentation formatting
    fixes #698
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    Remove usage of generic wildcard type
    Move into package without uppercase letters.
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    refactor(): remove dependencies to spring-mvc on swagger core
    Remove spring-web-mvc deps from core
    
    Add two interfaces :
       - NameValueExpression
       - PatternsRequestCondition
    
    Class from spring will be wrapped onto this classes
    Improvements for projections plugin.
    Initial support for projections.
    Implemented entity search services documentation
    Improved coverage and upgraded compatibility with boot 1.3.6
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixed test for Core
    Added 'example' to core/builders tests
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Upgraded to swagger-core 1.5.3-M1
    
    Also upgraded other libraries. Addressed the security related changes
    in swagger models
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Tightened the builder api
    Added properties to increase coverage
    
    (2022)
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Added basic builder infrastructure for synthetic models
    
    This is not an exhaustive solution to create models e.g. doesn’t support enum creation.
    
    (1323)
    Merged changes from model enhancements
    Sorted the consumes/produces/protocols/models
    
    This leads to predictable generation of contracts for swagger 1.2
    contracts.
    
    (2022)
    Sorted properties alphabetically for operations and models
    
    (2022)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Migrating Ordering to Comparator
    Added support for adding a set of tags that apply to a docket
    
    fixes #936
    add unit tests
    Added support for tags as a first class concept
    
    Currently the tags are inferred based on a combination of @Api#value() and Class name.
    Going forward it can use the tags support built into the @Api annotations
    
    fixes #737
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Add a top level documentation object
    
    Documentation object is a service level model, that now plays host to
    media types the service produces and consumes. the schemes the service
    supports and also the base path of the api
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Added properties to increase coverage
    
    (2022)
    migrated from guava Predicat
    Migrating Ordering to Comparator
    Improved code-coverage and improved formatting
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Coverage.
    Adding vendor extensions support to model property
    Fixed AllowableValues on Implicit Parameters
    
    There is still a case where the rendered output will not match the expectations if
    the ApiImplicitParam is trying to enrich the properties of a property that is already
    infered via springs machinery.
    
    For e.g. any property that is infered via a @ModelAttribute annotation will already do the right thing
    an infer the models before the @ApiImplicitPArameter values are overlayed. This is especially
    fraught with problems if the underlying model property is a list of scalars rather than just a plain scalar
    value... i.e. List<Enum>, List<String etc.
    
    fixes #902
    Added 'example' to core/builders tests
    #801 #810 Add proper support for enums in response values and in schema objects
    Changes to allow for readOnly property in swagger 2
    Made the modelRef property of the ModelProperty a computed value
    
    Extracted the common logic to infer the modelRef given a resolved type. Also
    When the type was altered via the @ApiModelProperty annotation the model ref
    did not reflect the newly inferred model type.
    
    This fix makes removes the redundancy in the type and the modelRef attribute
    
    fixes #666
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Made ModelProperty exclusively use ModelRef rather than typeName
    Renamed the items property to modelRef, that way it can be repurposed
    
    for modelling collections as well as regular types. That way we wont need to do gymnastics to
    support swagger 2.0
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Removed deprecrations prior to 3.x
    
    (2022)
    Updating tests
    Cleaning up
    Improved code-coverage and improved formatting
    Added support for Contact as a first class object
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava Predicate
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Added parallel schema specificiations to the existing represenation
    
    This will allow parallel development of the richer representations
    
    (2022)
    Reformatted and fixed checkstyles
    
    (2022)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Builder builds the parameter with correct allowEmptyValue
    
    fixes #2419
    Reformatting before starting work
    
    (2419)
    Provide proprty pattern annotation support
    correct spelling, fix typos
    (issue #1896)
    Fixed AllowableValues on Implicit Parameters
    
    There is still a case where the rendered output will not match the expectations if
    the ApiImplicitParam is trying to enrich the properties of a property that is already
    infered via springs machinery.
    
    For e.g. any property that is infered via a @ModelAttribute annotation will already do the right thing
    an infer the models before the @ApiImplicitPArameter values are overlayed. This is especially
    fraught with problems if the underlying model property is a list of scalars rather than just a plain scalar
    value... i.e. List<Enum>, List<String etc.
    
    fixes #902
    Added model ref interface
    
    Also added two dimensional array substitution support
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed the build by adding tests
    Made parameter use modelRef fully rather than just for the item types
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Removed deprecrations prior to 3.x
    
    (2022)
    Updated the builders based on testing feedback
    
    (2022)
    Modified the builders to make it conducive to making changes given the uses
    
    These builders are implementations of nested builders now. While they do the job, they need some work to make it intuitve. This leads to a bunch of yields in the builder and based on formatting its not really easy to dicern what the yield is returning. This needs to be reworked
    
    (2022)
    Formatting and code cleanup
    
    (1570)
    #1570 Add examples support
    Updated copyright year
    
    (1082)
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Added support for response header description
    
    fixes #1271
    Added model ref interface
    
    Also added two dimensional array substitution support
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Replaced response class with response model
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Tightened the builder api
    Sorted properties alphabetically for operations and models
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    fixing sorting list in multimap and adding test cases
    migrate from guava multimap
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Polish
    Preserve tags order in documentation builder
    Cleaning up
    Adding vendor extensions to api info and documentationbuilder
    add unit tests
    Fixes the problem when multiple api listings are associated with the same api declaration
    
    Swagger 1.2 does not support this model, hacked to only return the first api listing. This needs
    to be fixed to merge the api listings by group, but thats for a different commit. This only
    fixes the problem effectively for 2.0 of the spec, and spec 1.2 is no worse than it was before this
    fix.
    
    related to #727
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed the build by adding tests
    Renamed related classes to Documentation*
    Renamed GroupBuilder to DocumentationBuilder
    [#538] Fix the test as a result of renaming the builder method
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Used parameter order to determine merge survivor
    
    (1831)
    Fixed regression that renders allowEmptyValues in model properties
    
    Per 2.0 spec this is only rendered on parameters (not body parameters). So we add this to parameter and remove it from model properties.
    
    (2204)
    Fix to merge parameter definitions and not duplicate the definitions
    
    fixes #813
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Renamed spurious springdox package
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Replaced response class with response model
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Tightened the builder api
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    migrate from guava multimap
    Fixes the problem when multiple api listings are associated with the same api declaration
    
    Swagger 1.2 does not support this model, hacked to only return the first api listing. This needs
    to be fixed to merge the api listings by group, but thats for a different commit. This only
    fixes the problem effectively for 2.0 of the spec, and spec 1.2 is no worse than it was before this
    fix.
    
    related to #727
    Upgraded to swagger-core 1.5.3-M1
    
    Also upgraded other libraries. Addressed the security related changes
    in swagger models
    Renamed spurious springdox package
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed AuthorizationType to have a name property that represents the configuration name of the authorization scheme
    Renamed related classes to Documentation*
    Renamed GroupBuilder to DocumentationBuilder
    Renamed Group to Documentation
    Renamed the group builder method to reflect what it is
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moar tests and increased complexity coverage
    Renamed spurious springdox package
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed AuthorizationType to have a name property that represents the configuration name of the authorization scheme
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    Reformatted the code to match style guide
    
    Indents are 2 spaces and we splat static imports and dont splat regular imports (Should probably advertise this better)
    
    (2793)
    test to ensure examples are not lost
    Sort parameters by their order before sorting them by their name.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Added support for list of enums in "serializable parameters"
    
    fixes #1037
    Added model ref interface
    
    Also added two dimensional array substitution support
    Added support for rendering tags defined in @ApiOperation
    
    fixes #675
    Added tests to improve coverage
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Fix to merge parameter definitions and not duplicate the definitions
    
    fixes #813
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Upgraded to swagger-core 1.5.3-M1
    
    Also upgraded other libraries. Addressed the security related changes
    in swagger models
    Renamed spurious springdox package
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Replaced Opertion responseClass with responseModel
    Replaced response class with response model
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Remove usage of generic wildcard type
    fixing sorting list in multimap and adding test cases
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Migrating guava Objects to util Objects
    Added additional logging around duplicate detection
    
    Unable to reproduce the reported issue. Added additional logging around duplicates.
    
    resolves #1894
    Implemented entity search services documentation
    Upped the coverage in the core module
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Remove usage of generic wildcard type
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Move into package without uppercase letters.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Made RequestHandler comparable
    
    This is to give predictable combination of request handlers
    
    (2516)
    
    (cherry picked from commit 82a4aff3bd0a4bb172d416c5e9777aca7faea79b)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixed documentation/compiler warnings
    
    #1232
    refactor(): remove dependencies to spring-mvc on swagger core
    Remove spring-web-mvc deps from core
    
    Add two interfaces :
       - NameValueExpression
       - PatternsRequestCondition
    
    Class from spring will be wrapped onto this classes
    Improvements for projections plugin.
    Initial support for projections.
    Major changes to accomodate controller-less specs
    Implemented entity search services documentation
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    More release related tasks
    - Sets apps version to 'dangerous' for release testing
    - Saves version post release
    - Adds git/release tasks
    Fixed buildSrc package issue
    Initial release work
    Removed deprecated api in PathProvider
    
    Also simplified the usages as a result of no longer needing servlet context to resolve the paths
    
    (1773)
    Made Basepath always be root
    
    (1773)
    Fixed documentation/compiler warnings
    
    #1232
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Moved interfaces to the root documentation packages
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#463] Adding javadoc to publication
    [#423] Removes any potential duplicate forward slashes
    Normalized spaces and imports
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Making path provider a template and moving more path related logic into SwaggerPathProvider
    Providing a a default and relative swagger path provider
    Move into package without uppercase letters.
    fix checkstyle
    refactor(): remove dependencies to spring-mvc on swagger core
    Remove spring-web-mvc deps from core
    
    Add two interfaces :
       - NameValueExpression
       - PatternsRequestCondition
    
    Class from spring will be wrapped onto this classes
    Move into package without uppercase letters.
    fix checkstyle
    refactor(): remove dependencies to spring-mvc on swagger core
    Remove spring-web-mvc deps from core
    
    Add two interfaces :
       - NameValueExpression
       - PatternsRequestCondition
    
    Class from spring will be wrapped onto this classes
    Clean up the RequestMappingInfo todo. Remove unused class.
    Move into package without uppercase letters.
    fix checkstyle
    refactor(): remove dependencies to spring-mvc on swagger core
    Updated the tests and removed unused key generators
    
    that were used for caching
    Updated the comment on Cacheable
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Added incubating feature for providing path decorators as plugins
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Moved interfaces to the root documentation packages
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    Normalized spaces and imports
    Adding the posibility of ignoring an entire controller
     - Ingoring all methods of a controller by adding an excluded annotation
        on class level
     - @ApiIgnore can now be specified on Type, but also on Parameter and has
       been added to the defaultIgnorableParameterTypes Set
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Adding spring config. Adding scala support to jackson mapper.
    Updating groovy and spock version
    Added groovy compiler for spock testing
    Support for included/ignored annotations to make skipping documenting resources easier
    
    closes #45
    Reworked the extensibility of the library
    
    - Refactored the packages
    - Added intelligent defaults for when the service only has spring
      annotations
    - Added support for model and model schema
    - Added Swagger configration extensibility options
    - Moved to jackson 2
    - Updating git ignore
    - Updated documentation and the current version
    Updated javadocs that are preventing publishing
    
    related to #2504
    Added ignore reason for parameter/operation being ignored
    
    resolves #1494
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Moved interfaces to the root documentation packages
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    Normalized spaces and imports
    Adding the posibility of ignoring an entire controller
     - Ingoring all methods of a controller by adding an excluded annotation
        on class level
     - @ApiIgnore can now be specified on Type, but also on Parameter and has
       been added to the defaultIgnorableParameterTypes Set
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Adding spring config. Adding scala support to jackson mapper.
    Updating groovy and spock version
    Added groovy compiler for spock testing
    Support for included/ignored annotations to make skipping documenting resources easier
    
    closes #45
    Reworked the extensibility of the library
    
    - Refactored the packages
    - Added intelligent defaults for when the service only has spring
      annotations
    - Added support for model and model schema
    - Added Swagger configration extensibility options
    - Moved to jackson 2
    - Updating git ignore
    - Updated documentation and the current version
    Uprevved the default incubating version
    
    (2311)
    Added ApiDescriptionLookup to help with hypermedia support going forward
    
    The idea is that once this infrastructure is in place, when can then do interesting things
    with spring-hateoas to provide access to ControllerLinkBuilder implementations to access
    api descriptions based on controller method
    Added incubating feature for providing path decorators as plugins
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Moved interfaces to the root documentation packages
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    Normalized spaces and imports
    Adding the posibility of ignoring an entire controller
     - Ingoring all methods of a controller by adding an excluded annotation
        on class level
     - @ApiIgnore can now be specified on Type, but also on Parameter and has
       been added to the defaultIgnorableParameterTypes Set
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Adding spring config. Adding scala support to jackson mapper.
    Updating groovy and spock version
    Added groovy compiler for spock testing
    Support for included/ignored annotations to make skipping documenting resources easier
    
    closes #45
    Reworked the extensibility of the library
    
    - Refactored the packages
    - Added intelligent defaults for when the service only has spring
      annotations
    - Added support for model and model schema
    - Added Swagger configration extensibility options
    - Moved to jackson 2
    - Updating git ignore
    - Updated documentation and the current version
    Added missing types that allow mapping to the new OpenAPI spec
    
    Also converted collection types to the lowest base type i.e. List -> Collection etc.
    
    (2022)
    Added conditional support to enable beans in non-boot environments
    
    (3366)
    Renamed classes
    
    (3366)
    Updated builder method
    
    (2022)
    jackson-dataformat-xml plugin springfox#2734
    Conditionally load the xml plugins
    
    In JDK 9+ jaxb is not part of the runtime. So we need to check if jaxb
    is even on the classpath before pullingin a bean defnition.
    
    (2226)
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Solving style error
    Trying to solve style check error
    Adding author line
    Trying another approach using an utility checking spring versions. Moved it to the core so it could be available in other parts of the code. Also introduced a customer SpringVersion class return our own, made it a normal class so we can mock it for our tests. This should increase test coverage.
    Added equals/hashCode/toString
    
    This is for convenience of testing
    
    (2022)
    Added new parallel richer schema backing models
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Trying another approach using an utility checking spring versions. Moved it to the core so it could be available in other parts of the code. Also introduced a customer SpringVersion class return our own, made it a normal class so we can mock it for our tests. This should increase test coverage.
    Reverting SpringVersionCapability as not usuable for this case
    Solving bug that was breaking compatibility with earlier versions of Spring 4. Using annotation utils instead of newer annotation attribute calls.
    Added version utility to help compare versions
    
    This code is from spring source code, so assumption is that the Version class is tested.
    
    (2448)
    Provided type safe vendor extensibility rather than naked maps
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Applied explicit ordering to swagger related plugins
    
    fixes #648
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for rendering maps in swagger 2
    Fixed the build
    
    The models are not correct however :-o
    Moved the path and grouping strategy to common
    Moved common readers to the swagger common module
    [#538] Made all swagger plugins check if the documentationType is supported
    Trying another approach using an utility checking spring versions. Moved it to the core so it could be available in other parts of the code. Also introduced a customer SpringVersion class return our own, made it a normal class so we can mock it for our tests. This should increase test coverage.
    Updated javadocs that are preventing publishing
    
    related to #2504
    Added version utility to help compare versions
    
    This code is from spring source code, so assumption is that the Version class is tested.
    
    (2448)
    Renamed classes
    
    (3366)
    Updated builder method
    
    (2022)
    jackson-dataformat-xml plugin springfox#2734
    Conditionally load the xml plugins
    
    In JDK 9+ jaxb is not part of the runtime. So we need to check if jaxb
    is even on the classpath before pullingin a bean defnition.
    
    (2226)
    Added compatibility  data type to migrate from Parameter => RequestParameter
    
    (2022)
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Fixed issues with the underlying models
    
    (2022)
    Renamed MediaType -> Represenation
    
    (2022)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Added support for the new security schemes in OAS
    
    (2022)
    Code reformatting and cleanup
    
    (2022)
    Added mapping support for external docs
    
    (2022)
    Added mapping support for servers and variables
    
    (2022)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Modified the builders to make it conducive to making changes given the uses
    
    These builders are implementations of nested builders now. While they do the job, they need some work to make it intuitve. This leads to a bunch of yields in the builder and based on formatting its not really easy to dicern what the yield is returning. This needs to be reworked
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    migrate from guava lists
    Updated javadocs that are preventing publishing
    
    related to #2504
    Adding vendor extensions to api info and documentationbuilder
    Fixed the test coverage for #1046
    Added support for Contact as a first class object
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Added a model names registry
    
    This is a post processor that provides names based on a model registry. It comes with a very naive implementation today
    - Models with different namespaces but same name have a numeric suffix distinguishing them
    - Models with different validation groups will have "_#" appended to it to distinguish it from same models
    - Models with request and responses for the same key have Req/Res suffixed to it
    - Otherwise If the models have a view the models are suffixed with View instead.
    
    (2022)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Made the fields final and implemented hashcode/equals/toString
    
    (2022)
    Added missing types that allow mapping to the new OpenAPI spec
    
    Also converted collection types to the lowest base type i.e. List -> Collection etc.
    
    (2022)
    Added mapping support for servers and variables
    
    (2022)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Provided type safe vendor extensibility rather than naked maps
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Renamed MediaType -> Represenation
    
    (2022)
    Added new parallel richer schema backing models
    
    (2022)
    Added vendor extensions to all security schemes
    
    Also migrated from using `Map<String, Object>` to using `VendorExtension<T>`. This allows the internal models to be strongly typed and yet use the common VenderExtensionsMapper to map it to the swagger library native Map representation.
    
    (1636)
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed AuthorizationType to have a name property that represents the configuration name of the authorization scheme
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Added support for the new security schemes in OAS
    
    (2022)
    Cleanup deprecations related to security context
    
    Renamed newer methods on the context
    
    (2482)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Updated the core models to support OAS data points
    
    (2022)
    Adjusted the models
    
    (2022)
    Added support for response messages
    
    (2022)
    Migrating guava Objects to util Objects
    removing MoreObjects, toString and firstNonNull
    Added support for response header description
    
    fixes #1271
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Provided type safe vendor extensibility rather than naked maps
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Replaced response class with response model
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Fixed the contract tests
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Code cleanup
    
    - removed generics when not needed.
    - removed unintended depcrecations
    - reformatted
    - removed dead code
    
    (2022)
    Added missing types that allow mapping to the new OpenAPI spec
    
    Also converted collection types to the lowest base type i.e. List -> Collection etc.
    
    (2022)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    Updated javadocs that are preventing publishing
    
    related to #2504
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Added Group Name to ApiDescription
    
    (2219)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed reliability sonar bugs
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Sorted responses and build works
    
    (2022)
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Updated the core models to support OAS data points
    
    (2022)
    Re-arranged the fields so its easy to remove deprecated types in the future
    
    (2022)
    Added missing types that allow mapping to the new OpenAPI spec
    
    Also converted collection types to the lowest base type i.e. List -> Collection etc.
    
    (2022)
    Added parallel schema specificiations to the existing represenation
    
    This will allow parallel development of the richer representations
    
    (2022)
    Added new Response type
    
    this is so that the response is more expressive in terms of OAS
    
    (2022)
    Sorted properties alphabetically for operations and models
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Sort parameters by their order before sorting them by their name.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    migrated guava Function
    Migraiting from FluentIterable
    Added sorting of paths and parameters
    
    This is so that the contracts generated are always predictable in order.
    
    (1831)
    Added support for ordering of parameters
    
    Regenerated the contract files to bulk update with the new alphabetically ordered parameters
    
    (1937)
    Added model ref interface
    
    Also added two dimensional array substitution support
    Provided type safe vendor extensibility rather than naked maps
    add support for vendor extensions in operations
    
    
    
    Fixes #824
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Applying PR comments, removing nickname for uniqueId
    Adding ability to optionally populate nickname into operationId for swagger 2.0 implementations
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Upgraded to swagger-core 1.5.3-M1
    
    Also upgraded other libraries. Addressed the security related changes
    in swagger models
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for tags
    
    Also adjusted the swagger.json to account for the tags not having all the elements
    Replaced Opertion responseClass with responseModel
    Introduced the model ref to response class as well as parameters
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    [#538] Fixed the contract tests
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Fixes rendering of Authorization collection on operations
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    WIP
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Migrating guava Objects to util Objects
    Fix NPE when controller is null
    
    (2219)
    Reformatting
    
    (1943)
    Major changes to accomodate controller-less specs
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Normalized spaces and imports
    #317 Positioning ResourceListing based on @Api.position()
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Added support for the new security schemes in OAS
    
    (2022)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Added new Response type
    
    this is so that the response is more expressive in terms of OAS
    
    (2022)
    #1570 Add examples support
    Added support for vendor extensions on Parameters and ResponseModels
    
    fixes #1137
    Added support for response header description
    
    fixes #1271
    Added support for ResponseHeaders
    
    fixes #937
    Added model ref interface
    
    Also added two dimensional array substitution support
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Replaced response class with response model
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Fixed the contract tests
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Code cleanup
    
    - removed generics when not needed.
    - removed unintended depcrecations
    - reformatted
    - removed dead code
    
    (2022)
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Added parallel schema specificiations to the existing represenation
    
    This will allow parallel development of the richer representations
    
    (2022)
    Added attributes to the parameter object and builder
    
    (2022)
    Upgraded compiler to java 11
    
    Additional fixes
    Fixed sonar cloud blocker issues
    Added equals/hashcode
    
    (2022)
    Moved to appropriate package
    
    Also added equals/hashCode and toString methods
    
    (2022)
    add ResourceOwnerPasswordCredentialsGrant and ClientCredentialsGrant to GrantTypes
    
    Fix #789
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Made the fields final and implemented hashcode/equals/toString
    
    (2022)
    Added missing types that allow mapping to the new OpenAPI spec
    
    Also converted collection types to the lowest base type i.e. List -> Collection etc.
    
    (2022)
    Added mapping support for servers and variables
    
    (2022)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    add ResourceOwnerPasswordCredentialsGrant and ClientCredentialsGrant to GrantTypes
    
    Fix #789
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Fixed issues with the underlying models
    
    (2022)
    Adjusted the models
    
    (2022)
    Moved to appropriate package
    
    Also added equals/hashCode and toString methods
    
    (2022)
    Added support for Contact as a first class object
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    add ResourceOwnerPasswordCredentialsGrant and ClientCredentialsGrant to GrantTypes
    
    Fix #789
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed AuthorizationType to have a name property that represents the configuration name of the authorization scheme
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Added support for numeric facets
    
    (2022)
    .equals and .hashCode methods for AllowableValues
    Updated plugins for @Min/@Max/@DecimalMin/@DecimalMax to set the exclusiveMin/exclusiveMax properties
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Fixed issues with the underlying models
    
    (2022)
    Changed the Either type to ParameterSpecification
    
    (2022)
    Updated the request parameter object to reflect separation between parameters and content
    
    (2022)
    Moved to appropriate package
    
    Also added equals/hashCode and toString methods
    
    (2022)
    Added support for implicit parameter determination
    
    This is so that we can parallelly construct the parameter to the new model. Made the existing OperationBuilderPlugins also infer the RequestParameters
    
    (2022)
    Added new parallel richer schema backing models
    
    (2022)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava Predicate
    migrated guava Function
    Migraiting from FluentIterable
    Fixed issue where the global produces/consumes did not propogate
    
    fixes #1115
    .equals and .hashCode methods for AllowableValues
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed reliability sonar bugs
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava multimap
    migrating from guava Strings
    migrate from guava lists
    Migrating guava Objects to util Objects
    Splatted static imports per code style
    
    (2293)
    Fix #2293
    Support explicit ordering for Tags
    Improved code-coverage and improved formatting
    Added support for tags as a first class concept
    
    Currently the tags are inferred based on a combination of @Api#value() and Class name.
    Going forward it can use the tags support built into the @Api annotations
    
    fixes #737
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for tags
    
    Also adjusted the swagger.json to account for the tags not having all the elements
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    clean up static imports
    migrated from guava equivalence
    removed another test from FunctionContractSpec
    migrate from guava lists
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Added tests around path combination of same operations
    
    (1367)
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed issues with the underlying models
    
    (2022)
    Adjusted the models
    
    (2022)
    Added support for all the bean validation facets and udpated the tests
    
    (2022)
    Added support for numeric facets
    
    (2022)
    Moved to appropriate package
    
    Also added equals/hashCode and toString methods
    
    (2022)
    Updated the core models to support OAS data points
    
    (2022)
    allow security scheme of same type in resource listing
    
    Fix #959
    Upgraded to swagger-core 1.5.3-M1
    
    Also upgraded other libraries. Addressed the security related changes
    in swagger models
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Adding more tests to fix the test coverage
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Updated the core models to support OAS data points
    
    (2022)
    Added support for model specifications in Api listings
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Migraiting from FluentIterable
    Added sorting of paths and parameters
    
    This is so that the contracts generated are always predictable in order.
    
    (1831)
    WIP
    Added support for adding a set of tags that apply to a docket
    
    fixes #936
    add host() method to docket
    
    Fixes #764
    Added support for tags as a first class concept
    
    Currently the tags are inferred based on a combination of @Api#value() and Class name.
    Going forward it can use the tags support built into the @Api annotations
    
    fixes #737
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Add a top level documentation object
    
    Documentation object is a service level model, that now plays host to
    media types the service produces and consumes. the schemes the service
    supports and also the base path of the api
    [#538] Removed the models package and collapsed it to the service package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Sorted responses and build works
    
    (2022)
    Fixed issues with the underlying models
    
    (2022)
    Renamed MediaType -> Represenation
    
    (2022)
    Added support for response messages
    
    (2022)
    Added parallel schema specificiations to the existing represenation
    
    This will allow parallel development of the richer representations
    
    (2022)
    Added new Response type
    
    this is so that the response is more expressive in terms of OAS
    
    (2022)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed the issue with code coverage report generation
    
    (2022)
    Added parallel schema specificiations to the existing represenation
    
    This will allow parallel development of the richer representations
    
    (2022)
    Added attributes to the parameter object and builder
    
    (2022)
    Made type not stored as an optional
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    migrate from guava multimap
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Added scalar/complex parameter example support
    
    (853)
    Added order attribute to Parameter
    
    This allows us to prioritize the merging of parameters. i.e. parameters that have higher precedence survive the merge.
    
    (1831)
    Added toString for easier test debugging
    
    (1937)
    Fixed regression that renders allowEmptyValues in model properties
    
    Per 2.0 spec this is only rendered on parameters (not body parameters). So we add this to parameter and remove it from model properties.
    
    (2204)
    Added support for overriding the collection format
    
    fixes #1946
    Updated the copyright headers, cleanup, reformatting
    
    and polish!
    
    (1901)
    Provide proprty pattern annotation support
    Added support for vendor extensions on Parameters and ResponseModels
    
    fixes #1137
    Replaced tab characters.
    Added functionality to handle hidden property of @ApiParam and @ApiModelProperty annotations.
    Added model ref interface
    
    Also added two dimensional array substitution support
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Made parameter use modelRef fully rather than just for the item types
    Introduced the model ref to response class as well as parameters
    [#538] Implemented the mappers
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    [#538] Fixed the contract tests
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Updated the core models to support OAS data points
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    migrate from guava Predicate
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    migrate from guava lists
    Migraiting from FluentIterable
    Added vendor extensions to all security schemes
    
    Also migrated from using `Map<String, Object>` to using `VendorExtension<T>`. This allows the internal models to be strongly typed and yet use the common VenderExtensionsMapper to map it to the swagger library native Map representation.
    
    (1636)
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed AuthorizationType to have a name property that represents the configuration name of the authorization scheme
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    migrate from guava Predicate
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    migrate from guava lists
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Migrating guava Objects to util Objects
    removing MoreObjects, toString and firstNonNull
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Provided type safe vendor extensibility rather than naked maps
    Tightened the builder api
    Added better support for x-forward header interpretation
    
    (2022)
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Updated the core models to support OAS data points
    
    (2022)
    Merged changes from model enhancements
    Added mapping support for external docs
    
    (2022)
    Added mapping support for servers and variables
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava multimap
    migrate from guava lists
    Added mapping support for external docs
    
    (2022)
    Added mapping support for servers and variables
    
    (2022)
    Adding vendor extensions to api info and documentationbuilder
    Improved code-coverage and improved formatting
    add host() method to docket
    
    Fixes #764
    Fixes the problem when multiple api listings are associated with the same api declaration
    
    Swagger 1.2 does not support this model, hacked to only return the first api listing. This needs
    to be fixed to merge the api listings by group, but thats for a different commit. This only
    fixes the problem effectively for 2.0 of the spec, and spec 1.2 is no worse than it was before this
    fix.
    
    related to #727
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Add a top level documentation object
    
    Documentation object is a service level model, that now plays host to
    media types the service produces and consumes. the schemes the service
    supports and also the base path of the api
    Renamed Group to Documentation
    Added support for tags
    
    Also adjusted the swagger.json to account for the tags not having all the elements
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Introduced documentation plugins
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Migrating guava Objects to util Objects
    removing MoreObjects, toString and firstNonNull
    Moved tests to swagger-common and adjusted the coverage numbers
    
    discovered that the swagger-common module was completely un-tested in terms of
    coverage. Increased the coverage to a modest amount by moving relevant tests from swagger1
    Provided type safe vendor extensibility rather than naked maps
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Replaced response class with response model
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Fixed the contract tests
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Code cleanup
    
    - removed generics when not needed.
    - removed unintended depcrecations
    - reformatted
    - removed dead code
    
    (2022)
    Added vendor extensions to all security schemes
    
    Also migrated from using `Map<String, Object>` to using `VendorExtension<T>`. This allows the internal models to be strongly typed and yet use the common VenderExtensionsMapper to map it to the swagger library native Map representation.
    
    (1636)
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed AuthorizationType to have a name property that represents the configuration name of the authorization scheme
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Added encoding to media types
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    migrate from guava lists
    .equals and .hashCode for Extension
    Added a ListVendorExtension to support list types
    
    This is to support list properties. While swagger annotations do not support this. It is still a valid use case as demonstrated by the Amazon gateway extension. e.g. to rendering something like this.
    
     ```json
          "x-amazon-apigateway-authtype": "cognito_user_pools",
          "x-amazon-apigateway-authorizer": {
            "type": "cognito_user_pools",
            "providerARNs": [
                "arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}"
            ]
          }
    ```
    (1636)
    Added support for Contact as a first class object
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Updated the core models to support OAS data points
    
    (2022)
    Added parallel schema specificiations to the existing represenation
    
    This will allow parallel development of the richer representations
    
    (2022)
    Added attributes to the parameter object and builder
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava Predicate
    migrate from guava multimap
    migrating from guava Strings
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    Migrating Ordering to Comparator
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Polish
    
    reduced complexity of the comparator
    
    (1900)
    Support explicit ordering for Tags
    Added support for adding a set of tags that apply to a docket
    
    fixes #936
    Added support for tags as a first class concept
    
    Currently the tags are inferred based on a combination of @Api#value() and Class name.
    Going forward it can use the tags support built into the @Api annotations
    
    fixes #737
    Added vendor extensions to all security schemes
    
    Also migrated from using `Map<String, Object>` to using `VendorExtension<T>`. This allows the internal models to be strongly typed and yet use the common VenderExtensionsMapper to map it to the swagger library native Map representation.
    
    (1636)
    Adding vendorExtensions in apiKey class
    
    (1636)
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed AuthorizationType to have a name property that represents the configuration name of the authorization scheme
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moar tests and increased complexity coverage
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    nullpointerexception
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Added equals/hashCode/toString
    
    This is for convenience of testing
    
    (2022)
    Added parallel schema specificiations to the existing represenation
    
    This will allow parallel development of the richer representations
    
    (2022)
    Enriched Example and added builders
    
    Kept the constructors and deprecated them for backwards compatibility
    
    (2022)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Added support for extracting @Example annotations
    
    (853)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Fixed issues with the underlying models
    
    (2022)
    Code reformatting and cleanup
    
    (2022)
    Added equals/hascode/toString methods
    
    This makes testing easier, especially since these are immutable
    (2022)
    WIP
    Added new parallel richer schema backing models
    
    (2022)
    Fixed issues with the underlying models
    
    (2022)
    Renamed implements EnumerationFacetBuilder -> EnumerationElementFacetBuilder
    
    (2022)
    Added equals/hascode/toString methods
    
    This makes testing easier, especially since these are immutable
    (2022)
    Added request parameter merging support
    
    (2022)
    Created supporting classes for nested element facets
    
    (2022)
    Added support for enumerations
    
    (2022)
    Added new parallel richer schema backing models
    
    (2022)
    Additional builder logic cleanup
    Fixed issues with the underlying models
    
    (2022)
    Added support for effective model
    
    The idea behind effective models is to capture whether a model actually used the discriminators or not. For e.g. if a model is marked with a view discriminator and the dependent model does not have any effect of the discriminator as in the model is isomorphic with respect to the view discriminator then we remove the view from the effective model key. This is useful, in this example, to distinguish when naming a model if it should have `View` as a prefix or not in this case.
    
    (2022)
    Removed source identifier as a required attribute to construct a model
    
    (2022)
    Added equals/hashCode/toString
    
    This is for convenience of testing
    
    (2022)
    Finalized immutable variables
    
    (2022)
    Added support for simple types and complex types
    
    (2022)
    Fixed simple type specification
    
    (2022)
    Initial model refactoring
    WIP
    Added new parallel richer schema backing models
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Introduced rule priorities for alternate types
    
    Before this all rules have the same priorities which is not idea. As demonstrated by #1558, we expect custom rules to take highest priority followed by generic type rules, followed by direct substitutions.
    
    With this fix the following priority will be applied to rules (highest
    priority to lowest)
    - Custom rules specified by docket#alternateTypeRules
    - Custom rules specified by docket#genericModelSubstitutes
    - Custom rules specifed by docet#directModelSubstitutes
    - Default rules that come built-in to springfox
    
    fixes #1558
    Added alternate type rule
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Changing git tag. Making AlternativeTypeRule public.
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Implementation that supports alternate types
    Polished the builder apis to be fluent
    Adusted to handle duplicate names post processing
    
    (2022)
    Fixed the build
    
    (2022)
    Used model key builder instead of constructor
    
    (2022)
    Fixed issues with the underlying models
    
    (2022)
    Added a model names registry
    
    This is a post processor that provides names based on a model registry. It comes with a very naive implementation today
    - Models with different namespaces but same name have a numeric suffix distinguishing them
    - Models with different validation groups will have "_#" appended to it to distinguish it from same models
    - Models with request and responses for the same key have Req/Res suffixed to it
    - Otherwise If the models have a view the models are suffixed with View instead.
    
    (2022)
    Used model key builder instead of constructor
    
    (2022)
    Added discriminators to model key
    
    (2022)
    Added support for simple types and complex types
    
    (2022)
    WIP
    Fixed issues with the underlying models
    
    (2022)
    Added support for effective model
    
    The idea behind effective models is to capture whether a model actually used the discriminators or not. For e.g. if a model is marked with a view discriminator and the dependent model does not have any effect of the discriminator as in the model is isomorphic with respect to the view discriminator then we remove the view from the effective model key. This is useful, in this example, to distinguish when naming a model if it should have `View` as a prefix or not in this case.
    
    (2022)
    Added model key as a required attribute of a compound model
    
    (2022)
    Added equals/hashcode
    
    (2022)
    Initial model refactoring
    Added new parallel richer schema backing models
    
    (2022)
    Added request parameter merging support
    
    (2022)
    Added support for numeric facets
    
    (2022)
    Added new parallel richer schema backing models
    
    (2022)
    Added new parallel richer schema backing models
    
    (2022)
    Added request parameter merging support
    
    (2022)
    Added new parallel richer schema backing models
    
    (2022)
    Formatting and cleanup
    
    (3002)
    Added support for additional scalar types
    Fixed sonar cloud blocker issues
    Updated the core models to support OAS data points
    
    (2022)
    Fixed issues with the underlying models
    
    (2022)
    Added support for simple types and complex types
    
    (2022)
    Added new parallel richer schema backing models
    
    (2022)
    Fixed the build and also fixed depcration warnings
    New merging algorithm that can handle cyclic model references.
    Preparations for a new merging algorithm. Fixes .hashCode() collisions
    and Synthetic types.
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    added modelId to ModelReference
    Updated mappers to support 2d arrays for swagger2
    
    swagger 1.2 does not (and will not support) 2d arrays
    Added support for nested model references
    
    especially useful for 2D arrays
    Centralized model ref creation and removed dupication
    Added model ref interface
    
    Also added two dimensional array substitution support
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Accounts for aliases as a result of JsonProperty annotation
    
    Fixes #320
    Used model key builder instead of constructor
    
    (2022)
    Fixed issues with the underlying models
    
    (2022)
    Fixed NPE when hidden attribute is not set
    
    (2022)
    Code reformatting and cleanup
    
    (2022)
    Added equals/hashcode
    
    (2022)
    Added support for all the bean validation facets and udpated the tests
    
    (2022)
    Added support for simple types and complex types
    
    (2022)
    Fixed simple type specification
    
    (2022)
    Added new parallel richer schema backing models
    
    (2022)
    Added interface to create alternate type rules
    
    The idea here is to start the germ of the idea to create conventions for certain classes of rules e.g. Java 8, Spring-Data-Rest, Grails etc.
    
    (1323)
    Collapsed the Util classes to one class
    
    Also made the class purely static and added a test to ensure that.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Reduced code complexity in ModelDependencyProvider
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Improved the coverage and bumped up the thresholds
    Added better class loader aware determination of presence of flavor of specification
    
    (3366)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixed codacity indicated error prone code
    Added native support for Optional types
    
    resolves #1199
    Updated the tests and removed unused key generators
    
    that were used for caching
    Added caching decorators for the models, model properties and dependencies
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Since this is part of a dot release, backporting it to use spring 4.0.9 where
    
    cacheables do not expose a keyGenerator annotation attribute
    
    related to #682
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Added optimized model properties provider
    
    fixes #806
    Refactored the package name for property provider
    
    related to #806
    Adding more instrumentation around models and property inference
    
    To assist with problems like #688
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Reduced code complexity in ModelDependencyProvider
    Added support for rendering maps in swagger 2
    Added support for Map types in the models
    [#538] Implemented the mappers
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved packages around in swagger-models
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Changes to accept the pr
    
    - Moved Accessor to the right package and changed visibilityi.
    - Changed the ObjectMapper back to how it was currently being set in a
      bean PostConstruct.
    - Renamed PropertyUtils to BeanPropertyDefinitions to match guava
      convention
    - Changed Qualifier to default for the ModepPropertiesProvider bean
    - Re-instated the JacksonSwaggerSupport foo to set the ObjectMapper in
      the PostConstruct
    Supporting constructor params as fields
    Property provider was flipped with respect to the return types vs parameters
    
    fixes #322
    - Also fix unnecessary creation of Type Resolver #319
    Autowired the ObjectMapper ...
    
    Set up components that have the object mapper wired in as a dependency
    
    fixes #272
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Added equals/hascode/toString methods
    
    This makes testing easier, especially since these are immutable
    (2022)
    Added request parameter merging support
    
    (2022)
    Added new parallel richer schema backing models
    
    (2022)
    3390 add NumericFacetBuilder to OperationImplicitParamterReader
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Fixed issues with the underlying models
    
    (2022)
    Code reformatting and cleanup
    
    (2022)
    Added request parameter merging support
    
    (2022)
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Created supporting classes for nested element facets
    
    (2022)
    Polished the builder apis to be fluent
    Added equals/hashCode/toString
    
    This is for convenience of testing
    
    (2022)
    Added new parallel richer schema backing models
    
    (2022)
    Added equals/hascode/toString methods
    
    This makes testing easier, especially since these are immutable
    (2022)
    Added request parameter merging support
    
    (2022)
    Added new parallel richer schema backing models
    
    (2022)
    Remove usage of generic wildcard type
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    New merging algorithm that can handle cyclic model references.
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    fixing sorting list in multimap and adding test cases
    migrate from guava lists
    migrated guava Function
    Made example an Object for models and model properties
    
    This allows us to increase the fidelity of the examples object.
    
    (853)
    Fixed the model and model property comparison
    
    In the course of fixing the tests, fixed the equals and hashcode implementation of model and property, this is important in limiiting the litering of models in the spec if this is incorrect.
    
    (2056)
    Added support for allowEmptyValue
    
    (2021)
    .equals and .hashCode for ModelProperty
    Re-ordered constructor args
    
    (1974)
    First commit with added defaultValue
    add xml names and attributes supporting for models
    Fixed boxing/unboxing of booleans
    
    Caused properties to be null when that made no sense. Also fixed tests
    affected by this change.
    
    (1864)
    Adding vendor extensions support to model property
    #1296: Adding Pattern annotation support
    Added model ref interface
    
    Also added two dimensional array substitution support
    Reformatted imports and code
    Added a fix for 'example' field in @ApiModelProperty annotation
    Made the boolean fields boxed variables so that they allow null
    Changes to allow for readOnly property in swagger 2
    Made the modelRef property of the ModelProperty a computed value
    
    Extracted the common logic to infer the modelRef given a resolved type. Also
    When the type was altered via the @ApiModelProperty annotation the model ref
    did not reflect the newly inferred model type.
    
    This fix makes removes the redundancy in the type and the modelRef attribute
    
    fixes #666
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Made ModelProperty exclusively use ModelRef rather than typeName
    Renamed the items property to modelRef, that way it can be repurposed
    
    for modelling collections as well as regular types. That way we wont need to do gymnastics to
    support swagger 2.0
    [#538] Removed the models package and collapsed it to the service package
    [#538] Address a few low hanging todos
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Code reformatting and cleanup
    
    (2022)
    Added new parallel richer schema backing models
    
    (2022)
    Added support for FilePart type
    
    (3364)
    Formatting and cleanup
    
    (3002)
    Added support for additional scalar types
    Formatting change
    
    (3348)
    Fixed issues with the underlying models
    
    (2022)
    Added support for simple types and complex types
    
    (2022)
    Merged changes from model enhancements
    WIP
    Reordered the rules to make space for conventions
    
    Also automatically applied conventions in the bootstrappers
    
    (1490)
    Introduced rule priorities for alternate types
    
    Before this all rules have the same priorities which is not idea. As demonstrated by #1558, we expect custom rules to take highest priority followed by generic type rules, followed by direct substitutions.
    
    With this fix the following priority will be applied to rules (highest
    priority to lowest)
    - Custom rules specified by docket#alternateTypeRules
    - Custom rules specified by docket#genericModelSubstitutes
    - Custom rules specifed by docet#directModelSubstitutes
    - Default rules that come built-in to springfox
    
    fixes #1558
    Removed experimental 2d array substitution rule support
    Added alternate type rule
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Implementation that supports alternate types
    Migrating guava Objects to util Objects
    codestyle fix
    add xml names and attributes supporting for models
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava Predicate
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    migrate from guava lists
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixed a bug with unbounded generic parameters and return types
    
    Updated the examples to demonstrate the issue. The downside to this fix is that alternate type
    rules will not apply to these unbounded types. The upside is however we avoid an NPE!
    
    fixes #953
    Upgraded classmate library to 1.3.1
    
    fixes #1079
    Removed experimental 2d array substitution rule support
    Added alternate type rule
    Fixed a bug/TODO where replacables did not work on erased types
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    ooops! checkstyle
    [#538] Adds bare contract spec for swagger 2.0
    - Uses swagger groups to split petstore api from out test case apis
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    check WildCardType also in "nested" generics
    Implementation that supports alternate types
    Fixed the build and also fixed depcration warnings
    Returning cache to life.
    New merging algorithm that can handle cyclic model references.
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Preparations for a new merging algorithm. Fixes .hashCode() collisions
    and Synthetic types.
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Bug fixes.
    Fixes for Model Refs.
    .equals and .hashCode for ModelRef
    Added tests for item property creation
    
    Also rearranged methods to put public methods on top
    
    related to #956
    Updated mappers to support 2d arrays for swagger2
    
    swagger 1.2 does not (and will not support) 2d arrays
    Added support for nested model references
    
    especially useful for 2D arrays
    Centralized model ref creation and removed dupication
    Added model ref interface
    
    Also added two dimensional array substitution support
    #801 #810 Add separate ModelRef constructor to avoid passing an explicit null
    #801 #810 Add proper support for enums in response values and in schema objects
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for Map types in the models
    Renamed the items property to modelRef, that way it can be repurposed
    
    for modelling collections as well as regular types. That way we wont need to do gymnastics to
    support swagger 2.0
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Added support for copy construction for model specifications
    
    Made model facets builder aware of parent builder and added copy constructor
    
    (2022)
    Fix #2247 maps enum values to name() rather than toString()
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrating from guava Strings
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    remove duplicate enum values
    Shorted the static imports and formatting
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#436] Enum values with JsonValue are not supported
    
    fixes #436
    Added equals/hascode/toString methods
    
    This makes testing easier, especially since these are immutable
    (2022)
    Fixed NPE when adding facets and extensions
    
    (2022)
    Added new parallel richer schema backing models
    
    (2022)
    Initial model refactoring
    Added parallel schema specificiations to the existing represenation
    
    This will allow parallel development of the richer representations
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    fixup! Breaking compat with subtypes
    Breaking compat with subtypes
    
    This is not an implemented feature so taking the risk of premature breaking of compat
    
    (1152)
    Made example an Object for models and model properties
    
    This allows us to increase the fidelity of the examples object.
    
    (853)
    .equals method for Model
    add xml names and attributes supporting for models
    Reformatted imports and code
    Added a fix for 'example' field in @ApiModelProperty annotation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed issues with the underlying models
    
    (2022)
    Removed unused facet property
    
    (3348)
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Fixed issues with the underlying models
    
    (2022)
    Changed CompoundModelSpecificationBuilder logic
    
    Rather than check for properties, which may be empty in the case of errors, we check for model key being set. Also add toString and code cleanup
    
    (2022)
    Code reformatting and cleanup
    
    (2022)
    Added equals/hascode/toString methods
    
    This makes testing easier, especially since these are immutable
    (2022)
    WIP 3 compiled successfully
    Initial model refactoring
    Added new parallel richer schema backing models
    
    (2022)
    Updated the builders to fix issues with rendering the models
    
    This also includes some reformatting and sanitiizing the inputs the builders receive.
    
    (2022)
    Added support to generate parameters appropriately after all the builders are done
    
    This is just a way to construct valid request parameters despite how it has been built. This is a way to discard, invalid configurations.
    
    (2022)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Removed deprecrations prior to 3.x
    
    (2022)
    Initial model refactoring
    [fix issue 3118] discriminator not set to discriminator from model
    Fix bug with duplicates subTypes.
    New merging algorithm that can handle cyclic model references.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrating from guava Strings
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    fixup! Breaking compat with subtypes
    Breaking compat with subtypes
    
    This is not an implemented feature so taking the risk of premature breaking of compat
    
    (1152)
    Made example an Object for models and model properties
    
    This allows us to increase the fidelity of the examples object.
    
    (853)
    New comparison algorithm
    Changed the xml name to default to the model name when missing
    
    (1907)
    Reformatting
    
    (1907)
    add xml names and attributes supporting for models
    correct spelling, fix typos
    (issue #1896)
    Reformatted imports and code
    Added a fix for 'example' field in @ApiModelProperty annotation
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Applied default value to builders when the new values are null
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds builders for some of the primary swagger dtos
    Upgraded compiler to java 11
    
    Additional fixes
    Fixed sonar cloud blocker issues
    Added support to generate parameters appropriately after all the builders are done
    
    This is just a way to construct valid request parameters despite how it has been built. This is a way to discard, invalid configurations.
    
    (2022)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Removed deprecrations prior to 3.x
    
    (2022)
    Updated the builders based on testing feedback
    
    (2022)
    New merging algorithm that can handle cyclic model references.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrating from guava Strings
    migrate from guava lists
    Updated javadocs that are preventing publishing
    
    related to #2504
    Made example an Object for models and model properties
    
    This allows us to increase the fidelity of the examples object.
    
    (853)
    Added support for allowEmptyValue
    
    (2021)
    Changed the xml name to default to the model name when missing
    
    (1907)
    Re-ordered constructor args
    
    (1974)
    Changed defaultValue setter to match other setters
    First commit with added defaultValue
    add xml names and attributes supporting for models
    Fixed boxing/unboxing of booleans
    
    Caused properties to be null when that made no sense. Also fixed tests
    affected by this change.
    
    (1864)
    Removed spurious unused method call
    
    Reformatting to coding style.
    Adding vendor extensions support to model property
    #1296: Adding Pattern annotation support
    Fixed AllowableValues on Implicit Parameters
    
    There is still a case where the rendered output will not match the expectations if
    the ApiImplicitParam is trying to enrich the properties of a property that is already
    infered via springs machinery.
    
    For e.g. any property that is infered via a @ModelAttribute annotation will already do the right thing
    an infer the models before the @ApiImplicitPArameter values are overlayed. This is especially
    fraught with problems if the underlying model property is a list of scalars rather than just a plain scalar
    value... i.e. List<Enum>, List<String etc.
    
    fixes #902
    Reformatted imports and code
    Added a fix for 'example' field in @ApiModelProperty annotation
    Made the boolean fields boxed variables so that they allow null
    Changes to allow for readOnly property in swagger 2
    Allowable values are not retained
    
    subsequent plugins end up overwriting the non-null values. This fix puts the
    defaultIfAbsent check on the newer value for allowableValues as well
    
    fixes #667
    Made the modelRef property of the ModelProperty a computed value
    
    Extracted the common logic to infer the modelRef given a resolved type. Also
    When the type was altered via the @ApiModelProperty annotation the model ref
    did not reflect the newly inferred model type.
    
    This fix makes removes the redundancy in the type and the modelRef attribute
    
    fixes #666
    Update documentation
    Added support for overriding dataType via ApiModelProperty annotations
    
    The only stipulation, in order to get this to work is that the dataType
    is a package qualified class name.
    
    Granted that arrays and generic types will not be available for this kind
    of override. To guard from that situation if the type is only replacable
    if the replacement is more specific than the already specified value.
    
    fixes #602 and also addresses #554
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Made ModelProperty exclusively use ModelRef rather than typeName
    Renamed the items property to modelRef, that way it can be repurposed
    
    for modelling collections as well as regular types. That way we wont need to do gymnastics to
    support swagger 2.0
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Applied default value to builders when the new values are null
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Adding more tests to fix the test coverage
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    Polished the builder apis to be fluent
    Updated javadocs
    Added conditional builder methods
    
    Also polished the javadocs as the APIs have become firm
    
    (2613)
    Added tests for password field
    
    (3002)
    Polished the builders to not expose constructors
    
    (3351)
    Fixed typo and added sonar cloud support
    Polished the builder apis to be fluent
    Additional builder logic cleanup
    Tightened the builder api
    Converted all builders to be consumer based
    
    (2022)
    Updated the builders to fix issues with rendering the models
    
    This also includes some reformatting and sanitiizing the inputs the builders receive.
    
    (2022)
    Changed CompoundModelSpecificationBuilder logic
    
    Rather than check for properties, which may be empty in the case of errors, we check for model key being set. Also add toString and code cleanup
    
    (2022)
    Code reformatting and cleanup
    
    (2022)
    Removed source identifier as a required attribute to construct a model
    
    (2022)
    Modified the builders to make it conducive to making changes given the uses
    
    These builders are implementations of nested builders now. While they do the job, they need some work to make it intuitve. This leads to a bunch of yields in the builder and based on formatting its not really easy to dicern what the yield is returning. This needs to be reworked
    
    (2022)
    Added support for copy construction for model specifications
    
    Made model facets builder aware of parent builder and added copy constructor
    
    (2022)
    Renamed the builder properties
    
    Reformatted the code and added check style suppressions
    
    (2022)
    Added support for collection types
    
    (2022)
    Added support for simple types and complex types
    
    (2022)
    Initial model refactoring
    WIP
    Added support to generate parameters appropriately after all the builders are done
    
    This is just a way to construct valid request parameters despite how it has been built. This is a way to discard, invalid configurations.
    
    (2022)
    Polished the builders to not expose constructors
    
    (3351)
    Tightened the builder api
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Converted all builders to be consumer based
    
    (2022)
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Updated the builders based on testing feedback
    
    (2022)
    Updated the builders to fix issues with rendering the models
    
    This also includes some reformatting and sanitiizing the inputs the builders receive.
    
    (2022)
    Code reformatting and cleanup
    
    (2022)
    Modified the builders to make it conducive to making changes given the uses
    
    These builders are implementations of nested builders now. While they do the job, they need some work to make it intuitve. This leads to a bunch of yields in the builder and based on formatting its not really easy to dicern what the yield is returning. This needs to be reworked
    
    (2022)
    Added support for all the bean validation facets and udpated the tests
    
    (2022)
    Added support for numeric facets
    
    (2022)
    Added support for simple types and complex types
    
    (2022)
    Initial model refactoring
    Removed deprecrations prior to 3.x
    
    (2022)
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Updated javadocs that are preventing publishing
    
    related to #2504
    Cleaning up
    Adding vendor extensions to api info and documentationbuilder
    Added support for Contact as a first class object
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds builders for some of the primary swagger dtos
    Tightened the builder api
    Added validator support for parameter
    
    (2022)
    Added missing types that allow mapping to the new OpenAPI spec
    
    Also converted collection types to the lowest base type i.e. List -> Collection etc.
    
    (2022)
    Remove usage of generic wildcard type
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Created supporting classes for nested element facets
    
    (2022)
    Added support for the new security schemes in OAS
    
    (2022)
    Set the missed example builde rproperties
    
    When media type is empty we turn into into a null
    
    (2767)
    Removed deprecrations prior to 3.x
    
    (2022)
    Standardized the builder method names
    
    (2022)
    Updated the builders based on testing feedback
    
    (2022)
    Updated the builders to fix issues with rendering the models
    
    This also includes some reformatting and sanitiizing the inputs the builders receive.
    
    (2022)
    Enriched Example and added builders
    
    Kept the constructors and deprecated them for backwards compatibility
    
    (2022)
    Tightened the builder api
    Converted all builders to be consumer based
    
    (2022)
    Changed CompoundModelSpecificationBuilder logic
    
    Rather than check for properties, which may be empty in the case of errors, we check for model key being set. Also add toString and code cleanup
    
    (2022)
    Removed source identifier as a required attribute to construct a model
    
    (2022)
    Added support to generate parameters appropriately after all the builders are done
    
    This is just a way to construct valid request parameters despite how it has been built. This is a way to discard, invalid configurations.
    
    (2022)
    Fixed the build and also fixed depcration warnings
    Updated the builders to fix issues with rendering the models
    
    This also includes some reformatting and sanitiizing the inputs the builders receive.
    
    (2022)
    Modified the builders to make it conducive to making changes given the uses
    
    These builders are implementations of nested builders now. While they do the job, they need some work to make it intuitve. This leads to a bunch of yields in the builder and based on formatting its not really easy to dicern what the yield is returning. This needs to be reworked
    
    (2022)
    Added support for response messages
    
    (2022)
    Renamed the builder methods
    
    Removed the with prefix
    
    (2022)
    Added new Response type
    
    this is so that the response is more expressive in terms of OAS
    
    (2022)
    Added deprecation annotations
    Tightened the builder api
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Added support for annotating manufactured types
    
    resolves #2090
    related to https://github.com/springfox/springfox-grails-integration/issues/20
    Fixed parameter re-assignment
    Fixed parameter re-assignment
    
    (1490)
    Added basic builder infrastructure for synthetic models
    
    This is not an exhaustive solution to create models e.g. doesn’t support enum creation.
    
    (1323)
    Fixed sonar cloud blocker issues
    Added support to generate parameters appropriately after all the builders are done
    
    This is just a way to construct valid request parameters despite how it has been built. This is a way to discard, invalid configurations.
    
    (2022)
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Updated the builders to fix issues with rendering the models
    
    This also includes some reformatting and sanitiizing the inputs the builders receive.
    
    (2022)
    Modified the builders to make it conducive to making changes given the uses
    
    These builders are implementations of nested builders now. While they do the job, they need some work to make it intuitve. This leads to a bunch of yields in the builder and based on formatting its not really easy to dicern what the yield is returning. This needs to be reworked
    
    (2022)
    Added request parameter merging support
    
    (2022)
    Added support to generate parameters appropriately after all the builders are done
    
    This is just a way to construct valid request parameters despite how it has been built. This is a way to discard, invalid configurations.
    
    (2022)
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Code reformatting and cleanup
    
    (2022)
    Added request parameter merging support
    
    (2022)
    Created supporting classes for nested element facets
    
    (2022)
    Remove usage of generic wildcard type
    Updated the builders based on testing feedback
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    correct spelling, fix typos
    (issue #1896)
    Upgraded to swagger-core 1.5.3-M1
    
    Also upgraded other libraries. Addressed the security related changes
    in swagger models
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Made the authorization types list an covariant list
    
    Also fixed the bug where the security definition was mapped to the wrong key
    
    fixes #647
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Applied default value to builders when the new values are null
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Adding more tests to fix the test coverage
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    Polished the builders to not expose constructors
    
    (3351)
    Tightened the builder api
    Converted all builders to be consumer based
    
    (2022)
    Updated the builders to fix issues with rendering the models
    
    This also includes some reformatting and sanitiizing the inputs the builders receive.
    
    (2022)
    Removed source identifier as a required attribute to construct a model
    
    (2022)
    Added support to generate parameters appropriately after all the builders are done
    
    This is just a way to construct valid request parameters despite how it has been built. This is a way to discard, invalid configurations.
    
    (2022)
    Removed unused facet property
    
    (3348)
    Additional builder logic cleanup
    Tightened the builder api
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Converted all builders to be consumer based
    
    (2022)
    Updated the builders based on testing feedback
    
    (2022)
    Updated the builders to fix issues with rendering the models
    
    This also includes some reformatting and sanitiizing the inputs the builders receive.
    
    (2022)
    Added support for copy construction for model specifications
    
    Made model facets builder aware of parent builder and added copy constructor
    
    (2022)
    Fixed NPE when adding facets and extensions
    
    (2022)
    Initial model refactoring
    Added support for the new security schemes in OAS
    
    (2022)
    Tightened the builder api
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Sorted properties alphabetically for operations and models
    
    (2022)
    Added mapping support for servers and variables
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    fixing sorting list in multimap and adding test cases
    migrate from guava multimap
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Migrating Ordering to Comparator
    Fixed documentation/compiler warnings
    
    #1232
    Added mapping support for external docs
    
    (2022)
    Added mapping support for servers and variables
    
    (2022)
    Took the opportunity to order the other elements
    
    produces/consumes/tags etc. also could use preserving of the order of elements
    Remove unused import
    Preserve tags order in documentation builder
    Cleaning up
    Adding vendor extensions to api info and documentationbuilder
    Improved code-coverage and improved formatting
    add host() method to docket
    
    Fixes #764
    Fixes the problem when multiple api listings are associated with the same api declaration
    
    Swagger 1.2 does not support this model, hacked to only return the first api listing. This needs
    to be fixed to merge the api listings by group, but thats for a different commit. This only
    fixes the problem effectively for 2.0 of the spec, and spec 1.2 is no worse than it was before this
    fix.
    
    related to #727
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Add a top level documentation object
    
    Documentation object is a service level model, that now plays host to
    media types the service produces and consumes. the schemes the service
    supports and also the base path of the api
    Renamed GroupBuilder to DocumentationBuilder
    Renamed Group to Documentation
    Added support for tags
    
    Also adjusted the swagger.json to account for the tags not having all the elements
    Renamed the group builder method to reflect what it is
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Applied default value to builders when the new values are null
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Introduced documentation plugins
    Polished the builder apis to be fluent
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Applied default value to builders when the new values are null
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Added support for the new security schemes in OAS
    
    (2022)
    Tightened the builder api
    Added missing types that allow mapping to the new OpenAPI spec
    
    Also converted collection types to the lowest base type i.e. List -> Collection etc.
    
    (2022)
    Added two plugins to help customize the host/basePath
    
    the idea behind these filters are to provide an open extensibility for
    consumers to transform the generated specification. Out of the box it
    comes with one plugin that sets the host name and base path correctly.
    
    (3030)
    Updated the builders based on testing feedback
    
    (2022)
    Added missing types that allow mapping to the new OpenAPI spec
    
    Also converted collection types to the lowest base type i.e. List -> Collection etc.
    
    (2022)
    Fixed the build and also fixed depcration warnings
    Removed deprecrations prior to 3.x
    
    (2022)
    Updated the builders based on testing feedback
    
    (2022)
    Updated the builders to fix issues with rendering the models
    
    This also includes some reformatting and sanitiizing the inputs the builders receive.
    
    (2022)
    Modified the builders to make it conducive to making changes given the uses
    
    These builders are implementations of nested builders now. While they do the job, they need some work to make it intuitve. This leads to a bunch of yields in the builder and based on formatting its not really easy to dicern what the yield is returning. This needs to be reworked
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Formatting and code cleanup
    
    (1570)
    #1570 Add examples support
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    migrate from guava lists
    Fixed documentation/compiler warnings
    
    #1232
    Made headers collection a sortable map
    
    Because plain hashmaps dont guarantee order we use a tree map to preseve the ordering based on header key.
    
    (1651)
    Added support for vendor extensions on Parameters and ResponseModels
    
    fixes #1137
    Added support for response header description
    
    fixes #1271
    Added support for ResponseHeaders
    
    fixes #937
    Added model ref interface
    
    Also added two dimensional array substitution support
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Replaced response class with response model
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Applied default value to builders when the new values are null
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Added method to provide null safe arrays
    
    (2022)
    Added utility method to make comparator null safe
    
    (2022)
    Enriched Example and added builders
    
    Kept the constructors and deprecated them for backwards compatibility
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    clean up static imports
    migrate from guava multimap
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixed codacity indicated error prone code
    Improved code-coverage and improved formatting
    Fixed AllowableValues on Implicit Parameters
    
    There is still a case where the rendered output will not match the expectations if
    the ApiImplicitParam is trying to enrich the properties of a property that is already
    infered via springs machinery.
    
    For e.g. any property that is infered via a @ModelAttribute annotation will already do the right thing
    an infer the models before the @ApiImplicitPArameter values are overlayed. This is especially
    fraught with problems if the underlying model property is a list of scalars rather than just a plain scalar
    value... i.e. List<Enum>, List<String etc.
    
    fixes #902
    Fixed the api listing grouping issue with swagger 1.2
    
    fixes #727
    Fixes the problem when multiple api listings are associated with the same api declaration
    
    Swagger 1.2 does not support this model, hacked to only return the first api listing. This needs
    to be fixed to merge the api listings by group, but thats for a different commit. This only
    fixes the problem effectively for 2.0 of the spec, and spec 1.2 is no worse than it was before this
    fix.
    
    related to #727
    Update documentation
    Added support for overriding dataType via ApiModelProperty annotations
    
    The only stipulation, in order to get this to work is that the dataType
    is a package qualified class name.
    
    Granted that arrays and generic types will not be available for this kind
    of override. To guard from that situation if the type is only replacable
    if the replacement is more specific than the already specified value.
    
    fixes #602 and also addresses #554
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Applied default value to builders when the new values are null
    Tightened the builder api
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    migrate from guava lists
    Added support for annotating manufactured types
    
    resolves #2090
    related to https://github.com/springfox/springfox-grails-integration/issues/20
    Added basic builder infrastructure for synthetic models
    
    This is not an exhaustive solution to create models e.g. doesn’t support enum creation.
    
    (1323)
    Fixed reliability sonar bugs
    Tightened the builder api
    Fixed the build and also fixed depcration warnings
    Removed deprecrations prior to 3.x
    
    (2022)
    Updated the builders based on testing feedback
    
    (2022)
    Updated the builders to fix issues with rendering the models
    
    This also includes some reformatting and sanitiizing the inputs the builders receive.
    
    (2022)
    Modified the builders to make it conducive to making changes given the uses
    
    These builders are implementations of nested builders now. While they do the job, they need some work to make it intuitve. This leads to a bunch of yields in the builder and based on formatting its not really easy to dicern what the yield is returning. This needs to be reworked
    
    (2022)
    Re-arranged the fields so its easy to remove deprecated types in the future
    
    (2022)
    Added missing types that allow mapping to the new OpenAPI spec
    
    Also converted collection types to the lowest base type i.e. List -> Collection etc.
    
    (2022)
    Added request parameter merging support
    
    (2022)
    Added utility method to make comparator null safe
    
    (2022)
    Renamed the builder properties
    
    Reformatted the code and added check style suppressions
    
    (2022)
    Code Cleanup prior to working on implicit parameters
    
    Standardized builder names,
    finalized variables
    reformatted files
    Added parallel schema specificiations to the existing represenation
    
    This will allow parallel development of the richer representations
    
    (2022)
    Added new Response type
    
    this is so that the response is more expressive in terms of OAS
    
    (2022)
    Sorted properties alphabetically for operations and models
    
    (2022)
    Adjusted imports to coding style
    
    (2778)
    preserve examples
    two spaces instead of tabs
    tabs instead of spaces
    do not drop examples when merging ResponseMessages
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    clean up static imports
    migrating from guava Strings
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Refactored to accurately override default security references
    
    (2194)
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Simplified the header merge logic
    
    (2011)
    Fix for https://github.com/springfox/springfox/issues/2011
    Took the opportunity to order the other elements
    
    produces/consumes/tags etc. also could use preserving of the order of elements
    correct spelling, fix typos
    (issue #1896)
    Added support for vendor extensions on Parameters and ResponseModels
    
    fixes #1137
    Added support for response header description
    
    fixes #1271
    Added support for ResponseHeaders
    
    fixes #937
    Added model ref interface
    
    Also added two dimensional array substitution support
    Fixed the unique operation name generation
    
    This is to align with the advertized expectation that when a nickname is
    supplied then the unique id for the operation would respect that intent
    as much as possible without sacrificing the ability to ONLY generate unique
    operation names.
    
    fixes #1066
    Added support for rendering tags defined in @ApiOperation
    
    fixes #675
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Provided type safe vendor extensibility rather than naked maps
    merge extensions from several plugins instead of replacing
    
    
    
    Fixes #824
    add support for vendor extensions in operations
    
    
    
    Fixes #824
    Fix to merge parameter definitions and not duplicate the definitions
    
    fixes #813
    Fixes the inverted merge logic for response messages
    
    fixes #733
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Applying PR comments, removing nickname for uniqueId
    Adding ability to optionally populate nickname into operationId for swagger 2.0 implementations
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Relaxing linelength checkstyle rule
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for tags
    
    Also adjusted the swagger.json to account for the tags not having all the elements
    Replaced Opertion responseClass with responseModel
    Replaced response class with response model
    Introduced the model ref to response class as well as parameters
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Applied default value to builders when the new values are null
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    [#538] Fixed the contract tests
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Fixes line length issues
    [#537] Adds builders for some of the primary swagger dtos
    Added validator support for parameter
    
    (2022)
    Tightened the builder api
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Converted all builders to be consumer based
    
    (2022)
    Updated the builders based on testing feedback
    
    (2022)
    Updated the builders to fix issues with rendering the models
    
    This also includes some reformatting and sanitiizing the inputs the builders receive.
    
    (2022)
    Removed source identifier as a required attribute to construct a model
    
    (2022)
    Renamed MediaType -> Represenation
    
    (2022)
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed AuthorizationType to have a name property that represents the configuration name of the authorization scheme
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed the build and also fixed depcration warnings
    Added request parameter merging support
    
    (2022)
    fix using collectionFormat
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Updated parameter plugins to use the examples builder methods
    
    (853)
    Update parameter builders to add appropriate priorities
    
    (1831)
    Used parameter order to determine merge survivor
    
    (1831)
    Reformatting to style guide
    
    Splat static imports, method argument arrangement, code formatting and updating copyright date
    
    (1831)
    Fix to merge parameter definitions and not duplicate the definitions
    
    fixes #813
    Fixed the mapping for form variables and updated the contracts
    
    (3353)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Added support for model specifications in Api listings
    
    (2022)
    Code reformatting and cleanup
    
    (2022)
    Sorted properties alphabetically for operations and models
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    Migrating Ordering to Comparator
    Migraiting from FluentIterable
    Fixed documentation/compiler warnings
    
    #1232
    Support explicit ordering for Tags
    correct spelling, fix typos
    (issue #1896)
    Added support for adding a set of tags that apply to a docket
    
    fixes #936
    add host() method to docket
    
    Fixes #764
    Added support for tags as a first class concept
    
    Currently the tags are inferred based on a combination of @Api#value() and Class name.
    Going forward it can use the tags support built into the @Api annotations
    
    fixes #737
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Add a top level documentation object
    
    Documentation object is a service level model, that now plays host to
    media types the service produces and consumes. the schemes the service
    supports and also the base path of the api
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Applied default value to builders when the new values are null
    [#538] Sorted api listing and api listing references in the models
    
    - Also applied defaultIfEmpty to builders
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Fixes line length issues
    [#537] Adds builders for some of the primary swagger dtos
    Made multi the default for collection formats
    
    (3377)
    Updated javadocs
    Fixed the handling of empty values from ApiParam
    
    (3002)
    Formatting and cleanup
    
    (3002)
    Additional builder logic cleanup
    Made model builder lazy
    Tightened the builder api
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Converted all builders to be consumer based
    
    (2022)
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Updated the builders based on testing feedback
    
    (2022)
    Updated the builders to fix issues with rendering the models
    
    This also includes some reformatting and sanitiizing the inputs the builders receive.
    
    (2022)
    Modified the builders to make it conducive to making changes given the uses
    
    These builders are implementations of nested builders now. While they do the job, they need some work to make it intuitve. This leads to a bunch of yields in the builder and based on formatting its not really easy to dicern what the yield is returning. This needs to be reworked
    
    (2022)
    Code cleanup
    
    - removed generics when not needed.
    - removed unintended depcrecations
    - reformatted
    - removed dead code
    
    (2022)
    Added support for all the bean validation facets and udpated the tests
    
    (2022)
    Moved to appropriate package
    
    Also added equals/hashCode and toString methods
    
    (2022)
    Polished the builder apis to be fluent
    Fixed the build and also fixed depcration warnings
    Converted all builders to be consumer based
    
    (2022)
    Updated the builders to fix issues with rendering the models
    
    This also includes some reformatting and sanitiizing the inputs the builders receive.
    
    (2022)
    Modified the builders to make it conducive to making changes given the uses
    
    These builders are implementations of nested builders now. While they do the job, they need some work to make it intuitve. This leads to a bunch of yields in the builder and based on formatting its not really easy to dicern what the yield is returning. This needs to be reworked
    
    (2022)
    Moved to appropriate package
    
    Also added equals/hashCode and toString methods
    
    (2022)
    Added support for the new security schemes in OAS
    
    (2022)
    Tightened the builder api
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Converted all builders to be consumer based
    
    (2022)
    Updated the builders based on testing feedback
    
    (2022)
    Removed source identifier as a required attribute to construct a model
    
    (2022)
    Added support to generate parameters appropriately after all the builders are done
    
    This is just a way to construct valid request parameters despite how it has been built. This is a way to discard, invalid configurations.
    
    (2022)
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Tightened the builder api
    Converted all builders to be consumer based
    
    (2022)
    Updated the builders based on testing feedback
    
    (2022)
    Modified the builders to make it conducive to making changes given the uses
    
    These builders are implementations of nested builders now. While they do the job, they need some work to make it intuitve. This leads to a bunch of yields in the builder and based on formatting its not really easy to dicern what the yield is returning. This needs to be reworked
    
    (2022)
    Added encoding to media types
    
    (2022)
    Updated the builders to fix issues with rendering the models
    
    This also includes some reformatting and sanitiizing the inputs the builders receive.
    
    (2022)
    Added support to generate parameters appropriately after all the builders are done
    
    This is just a way to construct valid request parameters despite how it has been built. This is a way to discard, invalid configurations.
    
    (2022)
    Fixed documentation/compiler warnings
    
    #1232
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Applied default value to builders when the new values are null
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    Fixed issue allow allowable values to be overriden
    
    fixes #3321
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Updated the builders to fix issues with rendering the models
    
    This also includes some reformatting and sanitiizing the inputs the builders receive.
    
    (2022)
    Renamed implements EnumerationFacetBuilder -> EnumerationElementFacetBuilder
    
    (2022)
    Added request parameter merging support
    
    (2022)
    Created supporting classes for nested element facets
    
    (2022)
    Updated the builders to fix issues with rendering the models
    
    This also includes some reformatting and sanitiizing the inputs the builders receive.
    
    (2022)
    Modified the builders to make it conducive to making changes given the uses
    
    These builders are implementations of nested builders now. While they do the job, they need some work to make it intuitve. This leads to a bunch of yields in the builder and based on formatting its not really easy to dicern what the yield is returning. This needs to be reworked
    
    (2022)
    Added request parameter merging support
    
    (2022)
    fix using collectionFormat
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Updated parameter plugins to use the examples builder methods
    
    (853)
    Update parameter builders to add appropriate priorities
    
    (1831)
    Used parameter order to determine merge survivor
    
    (1831)
    Reformatting to style guide
    
    Splat static imports, method argument arrangement, code formatting and updating copyright date
    
    (1831)
    Fix to merge parameter definitions and not duplicate the definitions
    
    fixes #813
    Tightened the builder api
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Updated the builders to fix issues with rendering the models
    
    This also includes some reformatting and sanitiizing the inputs the builders receive.
    
    (2022)
    Added request parameter merging support
    
    (2022)
    Created supporting classes for nested element facets
    
    (2022)
    migrate from guava Predicate
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    Reworked the parameter datatype reader
    
    Added the ability to render exploded items for OAS 3. and let the parameter type remain for earlier versions of the spec. Also used the new scalar type convenience to determine scalar types.
    
    This change is to mainly extract one place where we handle request parameter types.
    
    (3377)
    Fixed the handling of empty values from ApiParam
    
    (3002)
    Added better handling of representations
    
    We actively use the parameter type to determine default accept media types. Also we ensure the content model applies to all the relevant media types. We upped the precedence of the ParameterTypeReader so as to determine the media type before the parameter type has a chance to weigh in.
    
    (3351)
    Remove usage of generic wildcard type
    Fixed reliability sonar bugs
    Tightened the builder api
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Converted all builders to be consumer based
    
    (2022)
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Updated the builders based on testing feedback
    
    (2022)
    Updated the builders to fix issues with rendering the models
    
    This also includes some reformatting and sanitiizing the inputs the builders receive.
    
    (2022)
    Modified the builders to make it conducive to making changes given the uses
    
    These builders are implementations of nested builders now. While they do the job, they need some work to make it intuitve. This leads to a bunch of yields in the builder and based on formatting its not really easy to dicern what the yield is returning. This needs to be reworked
    
    (2022)
    Added validator support for parameter
    
    (2022)
    Added request parameter merging support
    
    (2022)
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Added support for all the bean validation facets and udpated the tests
    
    (2022)
    Updated the request parameter object to reflect separation between parameters and content
    
    (2022)
    Moved to appropriate package
    
    Also added equals/hashCode and toString methods
    
    (2022)
    Added support for implicit parameter determination
    
    This is so that we can parallelly construct the parameter to the new model. Made the existing OperationBuilderPlugins also infer the RequestParameters
    
    (2022)
    Code Cleanup prior to working on implicit parameters
    
    Standardized builder names,
    finalized variables
    reformatted files
    WIP
    Updated the builders based on testing feedback
    
    (2022)
    Updated the builders to fix issues with rendering the models
    
    This also includes some reformatting and sanitiizing the inputs the builders receive.
    
    (2022)
    Added validator support for parameter
    
    (2022)
    Made multi the default for collection formats
    
    (3377)
    Formatting and cleanup
    
    (3002)
    Fixed sonar cloud blocker issues
    Updated the builders based on testing feedback
    
    (2022)
    Updated the builders to fix issues with rendering the models
    
    This also includes some reformatting and sanitiizing the inputs the builders receive.
    
    (2022)
    Added support to generate parameters appropriately after all the builders are done
    
    This is just a way to construct valid request parameters despite how it has been built. This is a way to discard, invalid configurations.
    
    (2022)
    Polished the builder apis to be fluent
    Fixed the handling of empty values from ApiParam
    
    (3002)
    Formatting and cleanup
    
    (3002)
    Cleanup documentation and depecations
    
    (3351)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Renamed the builder properties
    
    Reformatted the code and added check style suppressions
    
    (2022)
    Upgraded the dependencies
    
    Also fixes as a result of upgrading asciidoctor
    
    (2022)
    Added parallel schema specificiations to the existing represenation
    
    This will allow parallel development of the richer representations
    
    (2022)
    Added attributes to the parameter object and builder
    
    (2022)
    Made type not stored as an optional
    
    (2022)
    fix using collectionFormat
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava multimap
    migrate from guava lists
    Updated javadocs that are preventing publishing
    
    related to #2504
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Builder builds the parameter with correct allowEmptyValue
    
    fixes #2419
    Added scalar/complex parameter example support
    
    (853)
    Reformatting to style guide
    
    Splat static imports, method argument arrangement, code formatting and updating copyright date
    
    (1831)
    Added order attribute to Parameter
    
    This allows us to prioritize the merging of parameters. i.e. parameters that have higher precedence survive the merge.
    
    (1831)
    Fixed regression that renders allowEmptyValues in model properties
    
    Per 2.0 spec this is only rendered on parameters (not body parameters). So we add this to parameter and remove it from model properties.
    
    (2204)
    Fixed the NPE where the param type was regressed
    
    When none of the inference plugins in the pipeline infer a particular parameter type it remains null rather than _blank_. This caused the NPE.
    
    fixes #2148
    related to #2029
    Fixed an issue with render ApiImplicitParams
    
    When the api implicit params does not indicate the type the parameter is rendered as (cookie, header, query etc.) it treats it as a body type. This fixes to not update the parameter type if its blank.
    
    In addition this example demonstrates how to fix the reported issue via a contract test.
    
    fixes #2029
    Added support for overriding the collection format
    
    fixes #1946
    Updated the copyright headers, cleanup, reformatting
    
    and polish!
    
    (1901)
    Provide proprty pattern annotation support
    correct spelling, fix typos
    (issue #1896)
    Added support for vendor extensions on Parameters and ResponseModels
    
    fixes #1137
    Added functionality to handle hidden property of @ApiParam and @ApiModelProperty annotations.
    Fixed AllowableValues on Implicit Parameters
    
    There is still a case where the rendered output will not match the expectations if
    the ApiImplicitParam is trying to enrich the properties of a property that is already
    infered via springs machinery.
    
    For e.g. any property that is infered via a @ModelAttribute annotation will already do the right thing
    an infer the models before the @ApiImplicitPArameter values are overlayed. This is especially
    fraught with problems if the underlying model property is a list of scalars rather than just a plain scalar
    value... i.e. List<Enum>, List<String etc.
    
    fixes #902
    Added model ref interface
    
    Also added two dimensional array substitution support
    Fix to merge parameter definitions and not duplicate the definitions
    
    fixes #813
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Removed the TODO, verified that both the properties are required
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed the build by adding tests
    Made parameter use modelRef fully rather than just for the item types
    Introduced the model ref to response class as well as parameters
    Added model ref to parameters
    [#538] Implemented the mappers
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Applied default value to builders when the new values are null
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    [#538] Fixed the contract tests
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds builders for some of the primary swagger dtos
    Adjusted logging
    
    (3366)
    Updated the builders based on testing feedback
    
    (2022)
    Added validator support for parameter
    
    (2022)
    Remove usage of generic wildcard type
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava Predicate
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Utilized springs util for package name
    
    this way we dont rely on traversing properties to access the name.
    Major changes to accomodate controller-less specs
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Added basePackage predicate to help with selecting request handlers by package
    
    Also updated documentation formatting
    fixes #698
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Applied default value to builders when the new values are null
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    Polished the builder apis to be fluent
    Updated javadocs
    Added conditional builder methods
    
    Also polished the javadocs as the APIs have become firm
    
    (2613)
    Polished the builders to not expose constructors
    
    (3351)
    Converted all builders to be consumer based
    
    (2022)
    Updated the builders to fix issues with rendering the models
    
    This also includes some reformatting and sanitiizing the inputs the builders receive.
    
    (2022)
    Changed CompoundModelSpecificationBuilder logic
    
    Rather than check for properties, which may be empty in the case of errors, we check for model key being set. Also add toString and code cleanup
    
    (2022)
    Added support for effective model
    
    The idea behind effective models is to capture whether a model actually used the discriminators or not. For e.g. if a model is marked with a view discriminator and the dependent model does not have any effect of the discriminator as in the model is isomorphic with respect to the view discriminator then we remove the view from the effective model key. This is useful, in this example, to distinguish when naming a model if it should have `View` as a prefix or not in this case.
    
    (2022)
    Added model key as a required attribute of a compound model
    
    (2022)
    Added support to generate parameters appropriately after all the builders are done
    
    This is just a way to construct valid request parameters despite how it has been built. This is a way to discard, invalid configurations.
    
    (2022)
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Added missing types that allow mapping to the new OpenAPI spec
    
    Also converted collection types to the lowest base type i.e. List -> Collection etc.
    
    (2022)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrated from guava Predicat
    migrated guava Function
    Migrating Ordering to Comparator
    Updated javadocs that are preventing publishing
    
    related to #2504
    Added Group Name to ApiDescription
    
    (2219)
    Added support for uri templates in query params
    Added support for servlet path mapping
    
    closes #665
    Update documentation
    Added more documentation related to ObjectMapper
    
    How to override the model property datatypes
    How to override the documentation endpoints
    Also a stab at javadocs
    
    relates to #635
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Applied default value to builders when the new values are null
    [#538] This is a superfluous ordering support as most request mappings do not include multiple patterns
    
    In any case, this provides a way to sort the operations within an api
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Build scripts cleanup
    
    Used the new form for plugin definitions and removed unused script blocks and rearranged the dependencies
    
    (2022)
    Remove duplicated dependency.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Added dependency for validation annotations
    
    (1749)
    Added reflections library for annotation scanning
    
    This is in preparation for scanning for jackson annotations and
    serializers and deserializers.
    
    (1490)
    Upgraded libraries before working on the story
    
    (1621)
    Fixed the artifact based sharing of test code
    Updated the converage numbers
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Adjusted the spring dependencies to provided
    
    Also reverted to using the regular servlet api dependency
    Updated the build files
    Renamed modules and directories
    Renames modules to springdox-
    Updated the build scripts to publish all the publishable modules
    
    Also realized that nothing is pulling in the common module, so updated the configuration beans to import it
    Switched to using swagger 1.5 throughout the library
    WIP
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Added tests for allowable values
    
    - Made the test artificats use the testCompile rather than compile dependencies
    Removed all scala dependencies by group
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Setup scala library excludes
    [#463] Adding javadoc to publication
    Adds a preRelease task to prevent duplicate publishing of released artifact versions.
    Externalizes maven pom filtering and sets groovy-all dependency to test.
    Adds maven provided scope to pom dependencies
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Add tests to demonstrate using groovy models for services
    
    related to #752
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Filter properties that are marked as ignorable
    
    fixes #752
    Add tests to demonstrate using groovy models for services
    
    related to #752
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Cleaned up variable names and reformatted
    
    Also refactored equals/hashcode
    
    (1773)
    Inlined WebFluxPatternUtil
    
    (1773)
    Fix code quality issues.
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    Use unqualified classes.
    Move into package without uppercase letters.
    fix combine computation to not combine if two patterns are equals
    fix checkstyle
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    refactor(): remove dependencies to spring-mvc on swagger core
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Consolidated the annotations
    
    (2022)
    '
    Reformatting
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Fixed the object mapper configurer use the correct instance
    
    This is a naive fix to the problem. Simply reversing the order in which the message processors are
    iterated over will fix 80% of the reported issues with not using the correct object mapper.
    
    fixes #1051, #1140
    Removed all the WebMvcConfigurerAdapters and created a BeanPostProcessor
    
    that can assist with finding all the relavent ObjectMappers in play. This
    technique is less intrusive than the WebMvcConfigurationAdapter + @EnableWebMvc
    technique because spring-boot assumes that when one of those or an implementation
    of WebMvcConfigurationSupport implementation is in play, it will refuse to particpate
    in the auto configuration.
    
    related to #638
    Added conditional support to enable beans in non-boot environments
    
    (3366)
    Cleaned up variable names and reformatted
    
    Also refactored equals/hashcode
    
    (1773)
    Replaced loops with Java8 idioms
    
    Cleaned up unescessary casting
    
    (1773)
    Reformatting
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    Move into package without uppercase letters.
    Add missing equals and hashCode.
    fix checkstyle
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    refactor(): remove dependencies to spring-mvc on swagger core
    Added defaults plugin for webflux
    
    (3354)
    Adjusted the configuration using the Conditional annotations
    
    (3366)
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Consolidated the annotations
    
    (2022)
    '
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    Update tests with new factory for path provider. Remove unused code. Update headers with correct year.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    refactor(): remove dependencies to spring-mvc on swagger core
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    Added projection support for ModelAttribute parameters.
    Improvements for projections plugin.
    Removed the property sources configurer yay!
    
    Since we now resolve imperatively it is no longer required to have this defined. Also remove the *web package from component scan so that we can manually register the two controllers using new PropertySourcedRequestMappingHandler.
    
    (1770)
    Enabled the api listing scanner plugin
    
    Without enabling the plugin in the plugin registry, the beans will not be registered with the plugin registry. Which explains why it was not getting picked up. Interestingly this is also a great example of how one can register fake operations, not represented/backed by the application.
    
    fixes #1767
    Fixed the property resolution regression in spring boot
    
    fixes #1698
    Added DescriptionResolver bean to the configuration
    Namespaced the property sources using placeholder prefix
    
    Instead of the default `${` we use `$SPRINGFOX{` this way the configurer does not interfere with library users.
    
    (1621)
    Added conditional PropertyPlaceholderConfigurer bean
    
    Verified that this solution also supports spring 3.2.x and up
    
    fixes #1514
    Removed the aspecj autoproxy requirement
    
    `@EnableAspectJAutoProxy` was no longer required since we're not using
    it to generate caching proxies.
    
    related to #1055
    related to #927, #921, #938 (spring 3.x support)
    related to #939
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Fixed the bug where the caching was incorrect for operations without
    
    specific http method
    - Renamed the configuration class
    Added decorator for query parameters
    Added incubating feature for providing path decorators as plugins
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Extracted common logic to setup the JsonSerializer
    
    Also made the JsonSerialzer a component, that way every controller does not need to do the object mapper setup boilerplate code.
    
    related to #701
    Removed all the WebMvcConfigurerAdapters and created a BeanPostProcessor
    
    that can assist with finding all the relavent ObjectMappers in play. This
    technique is less intrusive than the WebMvcConfigurationAdapter + @EnableWebMvc
    technique because spring-boot assumes that when one of those or an implementation
    of WebMvcConfigurationSupport implementation is in play, it will refuse to particpate
    in the auto configuration.
    
    related to #638
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Remove usage of generic wildcard type
    Redid the toString with StringJoiner
    
    (1773)
    Inlined WebFluxPatternUtil
    
    (1773)
    Reformatting
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    Move into package without uppercase letters.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    refactor(): remove dependencies to spring-mvc on swagger core
    Added additional logging around duplicate detection
    
    Unable to reproduce the reported issue. Added additional logging around duplicates.
    
    resolves #1894
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    Improvements for projections plugin.
    Optimise HandlerMethodResolver.getMemberMethods
    
    Time of generating documentation greatly increases with number
    of methods in controller. This fixes the problem by caching
    the resolved methods for already processed controller classes.
    Initial support for projections.
    Implemented entity search services documentation
    Improved coverage and upgraded compatibility with boot 1.3.6
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Moved the web mvc request handler to the right module
    Added subclass for webmvc request handler mapping
    Added a failing test for bidirectional recursive types
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Adjusted the configuration using the Conditional annotations
    
    (3366)
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Fixed issues with rendering the base path
    
    (2022)
    Reformatted the code to match style guide
    
    Indents are 2 spaces and we splat static imports and dont splat regular imports (Should probably advertise this better)
    
    (2793)
    filter out WebFluxIntegrationRequestMappingHandlerMapping
    Replaced loops with Java8 idioms
    
    Cleaned up unescessary casting
    
    (1773)
    Reformatting
    
    (1773)
    Fixes after initial merge.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    Cleanup and adjusting access modifiers
    
    (1367)
    Moved the web mvc request handler to the right module
    Added subclass for webmvc request handler mapping
    Added a builder for request handlers
    Fixed the issue with the cache key generator algorithm in addition
    
    to sorting the RequestHandlers to facilitate a predictable ordering of operations
    
    related to #682, #825
    Refactored the bootstrapper to take in a RequestHandlerProvider
    
    This is a step forward to support different request handler providers. It is also
    incidentally used to create a predictable ordering of request handlers that are
    processed by the bootstrapper
    
    related to #682, #825
    Adjusted the default rule order
    
    Now goes from most specific to least specific
    
    (3343)
    Fixed default for Flux types
    
    (3364)
    Added defaults plugin for webflux
    
    (3354)
    Increased the heap size for circle ci
    Made the dependencies strictly provided only
    
    This way spring/jackson etc will always take the dependencies that were provided
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Build scripts cleanup
    
    Used the new form for plugin definitions and removed unused script blocks and rearranged the dependencies
    
    (2022)
    #2932 - Spring HATEOAS 1.0.0.RELEASE
    Migrate to ClassGraph (formerly FastClasspathScanner) 4.0.3
    Replace Reflections with FastClassPathScanner (#2243)
    Made org.reflections:reflections a provided dependency
    
    Also updated the documentation to reflect the new requirement to add a dependency in order to use the .
    
    resolves #2243
    Added dependency for validation annotations
    
    (1749)
    Added reflections library for annotation scanning
    
    This is in preparation for scanning for jackson annotations and
    serializers and deserializers.
    
    (1490)
    Upgraded libraries before working on the story
    
    (1621)
    Fixed the artifact based sharing of test code
    Updated the converage numbers
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Adjusted the spring dependencies to provided
    
    Also reverted to using the regular servlet api dependency
    Updated the build files
    Renamed modules and directories
    Renames modules to springdox-
    Updated the build scripts to publish all the publishable modules
    
    Also realized that nothing is pulling in the common module, so updated the configuration beans to import it
    Switched to using swagger 1.5 throughout the library
    WIP
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Added tests for allowable values
    
    - Made the test artificats use the testCompile rather than compile dependencies
    Removed all scala dependencies by group
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Setup scala library excludes
    [#463] Adding javadoc to publication
    Adds a preRelease task to prevent duplicate publishing of released artifact versions.
    Externalizes maven pom filtering and sets groovy-all dependency to test.
    Adds maven provided scope to pom dependencies
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Added tests for model names generation esply for recursive types
    
    (2022)
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Additional types for tests.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    correct spelling, fix typos
    (issue #1896)
    Added support for ResponseHeaders
    
    fixes #937
    Updated copyright year
    
    (1082)
    Added resource path provider
    
    This is responsible for extracting the resource path given a resource group
    
    (1943)
    add tests for #1880
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    #317 Positioning ResourceListing based on @Api.position()
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Changing jackson version. Setting correct paths on ApiDescriptions. Overriding api group with @Api annotation
    add support for deprecated controllers
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    #317 Positioning ResourceListing based on @Api.position()
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Changing jackson version. Setting correct paths on ApiDescriptions. Overriding api group with @Api annotation
    #1570 Add examples support
    Fixed expansion of models with alternate types
    
    resolves #2165
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    fix tests
    Added support for rendering tags defined in @ApiOperation
    
    fixes #675
    Added support for tags as a first class concept
    
    Currently the tags are inferred based on a combination of @Api#value() and Class name.
    Going forward it can use the tags support built into the @Api annotations
    
    fixes #737
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    #317 Positioning ResourceListing based on @Api.position()
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Changing jackson version. Setting correct paths on ApiDescriptions. Overriding api group with @Api annotation
    Added tests for model names generation esply for recursive types
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed expansion of models with alternate types
    
    resolves #2165
    Added tests to verify substitution rules for arrays and lists
    
    related to #1003
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Accounts for aliases as a result of JsonProperty annotation
    
    Fixes #320
    Added tests for model names generation esply for recursive types
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Additional types for tests.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Added tests for model names generation esply for recursive types
    
    (2022)
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Additional contract test.
    Code style fixes.
    Additional types for tests.
    Added a failing test for bidirectional recursive types
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Updated copyright year
    
    (1082)
    Added resource path provider
    
    This is responsible for extracting the resource path given a resource group
    
    (1943)
    add tests for #1880
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    #317 Positioning ResourceListing based on @Api.position()
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Changing jackson version. Setting correct paths on ApiDescriptions. Overriding api group with @Api annotation
    Added tests for model names generation esply for recursive types
    
    (2022)
    Updated copyright year
    
    (1082)
    Major changes to accomodate controller-less specs
    Added additional relationships
    fix code quality issue
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    #317 Positioning ResourceListing based on @Api.position()
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Changing jackson version. Setting correct paths on ApiDescriptions. Overriding api group with @Api annotation
    Added tests for model names generation esply for recursive types
    
    (2022)
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated copyright year
    
    (1082)
    Major changes to accomodate controller-less specs
    Added additional relationships
    Added tests for model names generation esply for recursive types
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Enhancement of merging algorithm.
    Fix for #3014, #3243, #2345, #3211, #3082
    #182
    
    Fix checkstyle.
    #182
    
    Fix sort ordering.
    add test
    Additional test for recursive types.
    Unit tests.
    Fixed checkstyle violations and code cleanup
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Coverage.
    Coverage and fixes.
    Fixed expansion of models with alternate types
    
    resolves #2165
    Additional types for tests.
    Fix to prevent expansion of request/path params
    
    (2114)
    correct spelling, fix typos
    (issue #1896)
    Fixed the conversion of byte[] to string with byte format
    
    (1605)
    Fixed codacy issues
    Improved coverage and upgraded compatibility with boot 1.3.6
    Merge method-level and class-level @ApiResponses annotations. Fixes #1465
    Added a failing test for bidirectional recursive types
    Fixed the method resolution for overloaded methods
    
    Before this fix we would match by argument count. This is not accurate
    for overloaded methods that are not covariant. This fix identifies the method
    that came in with the handler method based on equality when there arent any
    co-variant method to match
    Proper handling of @ResponseStatus with default reason().
    - Javadoc for @ResponseStatus.reason() says that if no value is given, the
      default message from HttpStatus will be used.
    Bumped up the coverage for swagger-common
    Provided type safe vendor extensibility rather than naked maps
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Fixes field properties provider issue found while fixing the code coverage build issue
    
    Uncovered the fact that the field model properties provider was working
    incorrectly. This fixes that problem also removed some ignored tests.
    
    related to #752
    Adding ability to optionally populate nickname into operationId for swagger 2.0 implementations
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    Fixed builds for jdk7 and jdk8
    [#538] Moved interfaces to the root documentation packages
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Use @ApiModel.value as alternate type name for serialization
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#541] Attempt to clean up logic to handle bare enums in the response
    
    All this effort leads me back to why it wasnt supported in the first place! bare enums are not supported in
    swagger spec just like bare List types are not supported.
    
    closes #541
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#440] Add support for generating models that are represented in the ApiResponse annotations
    
    closes #440
    [#447] Added support for @ApiOperation(hidden=[true|false])
    
    closes #447
    [#469] Fixed the arrays inside generics problem
    
    fixes #469
    Check if field is of same type as parent when expanding ModelAttribute
    
    To avoid StackOverflowError when expanding ModelAttributes,
    skip call to `expand` when a treeish field is encountered. #465
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Normalized spaces and imports
    Added test to verify #283
    
    Closes #283 - not reproducible
    @ModelAttribute Request Params Now Expanded
    
    Spring controller request params that are marked with @ModelAttribute
    will now be flattened. In other words, instead of generating an
    operation model that contains a complex object in the request, the
    operation model will
    appear to have been defined as accepting individual
    simple type request parameters.
    
    Using the @ModelAttribute on a controller method param
    declares that Spring should bind request parameters to
    the model object. As such, the Swagger model should
    really show individual parameters, and not a complex
    object type.
    Added test to demonstrate issue #378: missing serialize only properties during scan
    
    * Added spec to ApiModelReaderSpec.groovy
    * Added test data model with serialize only property
    * Added resource method using data model as return and request param
    
    Conflicts:
    
            swagger-springmvc/src/test/groovy/com/mangofactory/swagger/readers/ApiModelReaderSpec.groovy
    
    Conflicts:
            swagger-springmvc/src/test/groovy/com/mangofactory/swagger/readers/ApiModelReaderSpec.groovy
    Supporting constructor params as fields
    Added specification covering ApiModelProperty description (issue #374)
    Improvements of #353
    
    @ApiImplicitParams & @ApiImplicitParam are now read on class interfaces
    and superclasses using Spring AnnotationUtils.findAnnotation.
    Adding test for implicit params
    Adding the posibility of ignoring an entire controller
     - Ingoring all methods of a controller by adding an excluded annotation
        on class level
     - @ApiIgnore can now be specified on Type, but also on Parameter and has
       been added to the defaultIgnorableParameterTypes Set
    Added support to populate parameters from the parameter request conditions
    
    resolves 277
    #106 Adding file upload support.
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Automatically retrieve allowableValues and set allowMultiple for enum arrays
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    changed test to cover feature logic
    filter by annotation @RequestBody added
    tests Added
    Initial authorization support
    Changing jackson version. Setting correct paths on ApiDescriptions. Overriding api group with @Api annotation
    Changing back to non package class names. Now correctly working model schema for sample responses but not puts and posts
    Changing response models and parameter models to fully qualified names
    Improving model support
    Fully qualifying response class names and adding test for annotated models
    Initial model creation using swagger provided scala model parsing
    Adding http response codes and messages to api operations
    Supporting operation parameter primitive data types
    Parameter allowable values. Adding check for funky spring default value on @Request.. method parameter annotations
    Parameter type exclusions. Change path variables to use curly braces as opposed to round braces.
    Adding ApiParameter support
    Adding deprecated attribute to operations
    Adding support for multiple media types on ApiOperation annotation
    ApiOperation: using swagger annotation for position
    ApiOperation: using swagger annotation for summary
    ApiOperation: using swagger annotation if supplied
    Increasing coverage and general cleanup. Added support for ignorable annotations on controller methods.
    Added default swagger controller. Resolved more dependency issues and moved to correct scala version.
    Fixed the build and also fixed depcration warnings
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Added missing types that allow mapping to the new OpenAPI spec
    
    Also converted collection types to the lowest base type i.e. List -> Collection etc.
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Added tests for api listings with no backing controller
    
    Also simplified the existing tests
    
    (2219)
    Added a contract test for explicitly specifying group
    
    When we specify a group in the additional apis we need to handle it correctly
    
    (2219)
    Converted the plugin example to java
    
    Also added documentation on how to implement the plugin.
    
    resolves #1767
    Added tests for model names generation esply for recursive types
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright year
    
    (1082)
    Major changes to accomodate controller-less specs
    Added additional relationships
    Introduced spring data rest endpoints
    
    This is in preparation to create a contract test to watch the contract evolving and also serve as a safety net for breaking changes
    
    (1623)
    Fixed the model attribute expander for list of enums
    
    fixes #1571
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added resource path provider
    
    This is responsible for extracting the resource path given a resource group
    
    (1943)
    Added contract tests to verify conventions work
    
    Here we add `PetWithSerializer` type in various contexts and verify that
    it is always honors the jackson annotations.
    
    (1490)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Fixed an issue where the @Api#description wasnt being honored
    
    closes #373
    Added tests for model names generation esply for recursive types
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Unit tests.
    Additional contract test.
    add tests for #1880
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    #317 Positioning ResourceListing based on @Api.position()
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Changing jackson version. Setting correct paths on ApiDescriptions. Overriding api group with @Api annotation
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Use @ApiModel.value as alternate type name for serialization
    Made model attribute expander a bean
    
    - Also refactored test to be more readable
    Normalized spaces and imports
    Fixed ModelWithSerializeOnlyProperty to work with jackson 2.0 introspector
    Added test to demonstrate issue #378: missing serialize only properties during scan
    
    * Added spec to ApiModelReaderSpec.groovy
    * Added test data model with serialize only property
    * Added resource method using data model as return and request param
    
    Conflicts:
    
            swagger-springmvc/src/test/groovy/com/mangofactory/swagger/readers/ApiModelReaderSpec.groovy
    
    Conflicts:
            swagger-springmvc/src/test/groovy/com/mangofactory/swagger/readers/ApiModelReaderSpec.groovy
    Property provider was flipped with respect to the return types vs parameters
    
    fixes #322
    Code cleanup
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Supporting constructor params as fields
     #367 Fixes issue with application context having multiple RequestMappingHandlerAdapters
    
     #367 Uses equals to compare class name
    
    Reproduces issue #367
    
    Fails test when adapter is an autowire candidate
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#440] Add support for generating models that are represented in the ApiResponse annotations
    
    closes #440
    Added tests for model names generation esply for recursive types
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Updated example model object used in test
    
    (2368)
    Re-arranged code
    
    (2368)
    Added contract tests for example based features
    
    (853)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Additional test cases for read only flag
    
    Test case for read only flag in swagger 2, and no impact to swagger 1
    Added optimized model properties provider
    
    fixes #806
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moar tests and increased complexity coverage
    [#476] Allows specifying alternative types for expanded model attributes
    ModelAttribute expansion for collection extensions
    
    Fixes a bug where ModelAttributeParameterExpander
    was incorrectly handling parameters that were extensions
    of collections. For example, any custom extension of a HashSet should
    be treated as a Set but instead it was being treated as a custom type.
    Normalized spaces and imports
    @ModelAttribute Flattening Improvements
    
    When complex objects marked with @ModelAttribute in a controller method
    are flattened into individual parameters:
    1) Only consider properties that have a getter and setter.
    This makes it easy for someone to exclude any parameter
    that is not supposed to be set by a request param or has
    a derived value.
    2) Include properties from parent objects so that we
    don’t alienate coders who have form beans with an
    inheritance hierarchy
    Fixed allowableValues not getting set for enum
    
    Fixed bug where the allowableValues were not getting
    set on enums when the enum property in a container
    object had an ApiParam annotation. Apparently, if you
    declare an ApiParam and don’t put any configuration in
    for the allowableValues, the allowableValues will be a
    blank String instead of null. The bug was that the code
    was checking for a null allowableValues but not for a
    blank String.
    Fixed the build
    @ModelAttribute flattening should ignore statics
    
    - Added fix to ignore static fields when flattening objects
    marked with @ModelAttribute
    - Added code coverage to prove the fix works
    Support @ApiModelProperty
    
    Added support for @ApiModelProperty annotations found on ModelAttribute
    class properties
    Fixes and code coverage
    
    Added code coverage and small fixes discovered by
    better testing
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Added contract tests for inhertance
    
    (1151)
    (868)
    Additional types for tests.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Updated copyright year
    
    (1082)
    Fixed the model attribute expander for list of enums
    
    fixes #1571
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Bumped up the coverage for swagger-common
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#469] Fixed the arrays inside generics problem
    
    fixes #469
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Enhancement of merging algorithm.
    Updated mappers to support 2d arrays for swagger2
    
    swagger 1.2 does not (and will not support) 2d arrays
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Enhancement of merging algorithm.
    Fix for #3014, #3243, #2345, #3211, #3082
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Fixes the default rules such that Map<String, String> is not rendered as
    
    an Object. fixes #747
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fix for #3014, #3243, #2345, #3211, #3082
    Enhancement of merging algorithm.
    Enhancement of merging algorithm.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Fixed the stack overflow affecting model attributes
    
    (1603)
    Extracted parameter object in order to provide context
    
    This is an intermediate step so that we can determine types that are seen or not seen before to prevent recursion
    
    (1603)
    #801 #810 Add proper support for enums in response values and in schema objects
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Reformatted code
    
    Related to #1603
    Extracted parameter object in order to provide context
    
    This is an intermediate step so that we can determine types that are seen or not seen before to prevent recursion
    
    (1603)
    Check if collections are recursive
    
    A class of the following type Class { List<Class> children} causes a
    stack overflow exception
    
    fixes #1513
    Adjusted copyright year
    Added Copyright info.
    Little code style fixations.
    Added model for test.
    #801 #810 Add proper support for enums in response values and in schema objects
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed rendering of xml examples
    
    The XmlRootElement wasnt taken into consideration when figuring out the xml root element name
    
    (2230)
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#476] Allows specifying alternative types for expanded model attributes
    Normalized spaces and imports
    @ModelAttribute Flattening Improvements
    
    When complex objects marked with @ModelAttribute in a controller method
    are flattened into individual parameters:
    1) Only consider properties that have a getter and setter.
    This makes it easy for someone to exclude any parameter
    that is not supposed to be set by a request param or has
    a derived value.
    2) Include properties from parent objects so that we
    don’t alienate coders who have form beans with an
    inheritance hierarchy
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Additional types for tests.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Additional contract test.
    Code style fixes.
    Additional types for tests.
    Added a failing test for bidirectional recursive types
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Unit tests.
    Updated copyright year
    
    (1082)
    Fixed the model attribute expander for list of enums
    
    fixes #1571
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Enhancement of merging algorithm.
    Fix for #3014, #3243, #2345, #3211, #3082
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Enhancement of merging algorithm.
    Coverage.
    Coverage and fixes.
    Additional types for tests.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fix check style.
    Additional test for recursive types.
    Enhancement of merging algorithm.
    Fix for #3014, #3243, #2345, #3211, #3082
    Unit tests.
    Updated copyright year
    
    (1082)
    Fixed the model attribute expander for list of enums
    
    fixes #1571
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Enhancement of merging algorithm.
    Unit tests.
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    ModelAttribute expansion for collection extensions
    
    Fixes a bug where ModelAttributeParameterExpander
    was incorrectly handling parameters that were extensions
    of collections. For example, any custom extension of a HashSet should
    be treated as a Set but instead it was being treated as a custom type.
    Updated copyright year
    
    (1082)
    Fixed the model attribute expander for list of enums
    
    fixes #1571
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright year
    
    (1082)
    Added contract tests to verify conventions work
    
    Here we add `PetWithSerializer` type in various contexts and verify that
    it is always honors the jackson annotations.
    
    (1490)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Updated copyright year
    
    (1082)
    Added test for demonstrating 1749
    
    (1749)
    Added contract tests for inhertance
    
    (1151)
    (868)
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Unit tests.
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Fixed expansion of models with alternate types
    
    resolves #2165
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Enhancement of merging algorithm.
    Fixed the stack overflow affecting model attributes
    
    (1603)
    Extracted parameter object in order to provide context
    
    This is an intermediate step so that we can determine types that are seen or not seen before to prevent recursion
    
    (1603)
    Added a failing test for bidirectional recursive types
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Enhancement of merging algorithm.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Added a failing test for bidirectional recursive types
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixes problem where internal models marked hidden are not getting filtered
    
    fixes #873
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Fixed the temporal coupling int the name provider plugin
    
    Now the default name provider is no longer a component but truly a default type name provider. If there are no plugins registered the default is used
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Discovered bugs related to unwrapping fields/getters and setters
    
    Fixed the problem and updated the tests to improve coverage
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#494] Add support for JsonGetter and JsonSetter annotations
    
    resolves #494
    Enhancement of merging algorithm.
    Unit tests.
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Enhancement of merging algorithm.
    Unit tests.
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Enhancement of merging algorithm.
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Fixed expansion of models with alternate types
    
    resolves #2165
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added contract tests for inhertance
    
    (1151)
    (868)
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Reworked the ModelAttributeParameterExpander
    
    Reduced complexity in the class and also uncovered a bug where the
    treeish classes were partially rendering the expansion.
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Check if field is of same type as parent when expanding ModelAttribute
    
    To avoid StackOverflowError when expanding ModelAttributes,
    skip call to `expand` when a treeish field is encountered. #465
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Unit tests.
    Additional contract test.
    Enhancement of merging algorithm.
    Unit tests.
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Fixed rendering of xml examples
    
    The XmlRootElement wasnt taken into consideration when figuring out the xml root element name
    
    (2230)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Fixed expansion of models with alternate types
    
    resolves #2165
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Fixed checkstyle violations and code cleanup
    
    (2022)
    integration tests with errors
    add license
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    Added a failing test for bidirectional recursive types
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Fixed to better handle indeterminate primary member
    
    when there are multiple accessors or mutators the parsing of model properties crashes... atleast as of jackson 2.6.x
    
    fixes #1129
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Formatting
    
    (1937)
    correct spelling, fix typos
    (issue #1896)
    Fixed the failing test
    
    The reason the test was failing was because the ModelAttributeParameterExpanderSpec in spring-web was trying to access a plugin that was in the swagger module. This creates an incorrect dependency link.
    
    swagger-modules --- depend on --> spring modules.
    
    This fix creates a new spec in the swagger module and removes the test
    in the spring-web module and everything is right in the world :)
    Back unit test to life.
    Added class for tests.
    Unit tests.
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Updated the test to reflect JsonProperty usecase in the constructor
    Added test to verify #283
    
    Closes #283 - not reproducible
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Fixed rendering of xml examples
    
    The XmlRootElement wasnt taken into consideration when figuring out the xml root element name
    
    (2230)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Additional types for tests.
    Fixed the stack overflow affecting model attributes
    
    (1603)
    Extracted parameter object in order to provide context
    
    This is an intermediate step so that we can determine types that are seen or not seen before to prevent recursion
    
    (1603)
    Added a failing test for bidirectional recursive types
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Coverage and fixes.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright year
    
    (1082)
    Updated the copyright headers, cleanup, reformatting
    
    and polish!
    
    (1916)
    Added missing copyright header to ConsumesProducesService
    Added additional contract tests to test behaviour of when you have a consumes and/or produces defined on the document level and when only on the operation level
    Updated copyright year
    
    (1082)
    Demonstrated intricate generics support
    
    resolves #1631
    Added contract tests to verify conventions work
    
    Here we add `PetWithSerializer` type in various contexts and verify that
    it is always honors the jackson annotations.
    
    (1490)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    #2932 - Spring HATEOAS 1.0.0.RELEASE
    Fixed a bug with unbounded generic parameters and return types
    
    Updated the examples to demonstrate the issue. The downside to this fix is that alternate type
    rules will not apply to these unbounded types. The upside is however we avoid an NPE!
    
    fixes #953
    Updated tests to proove multi-variable templated controllers work as expected
    
    closes #953
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Fix for abstract base types with open generic type with no constraint
    
    not working correctly. fixes #313. Thanks @jtheuer!
    Fixed the build and also fixed depcration warnings
    Service model changes to better support open api 3.0
    
    (2022)
    #2932 - Spring HATEOAS 1.0.0.RELEASE
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fix #2822 related to @ApiParam(example="..") not working for @RequestBody
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Demonstrated resolution for string examples
    
    When providing an example for string based properties, they need to be single quoted. Also fixed the build
    
    related to #2469
    Added support for public model attribute fields
    
    In the process unearth an example to support anyOf (related to #2490).
    
    fixes #2423
    Fixed allowable range on string properties
    
    For string properties the allowable ranges should be rendered as max length and min length properties
    
    (2415)
    Demonstrates support for properties of the same type on a model
    
    (2479)
    Fixed formatting
    
    (2479)
    Verified renaming of model attributes
    
    (2391)
    Verified the behavior of uppercased properties
    
    (2378)
    Updated the contract tests
    
    (2376)
    Updated contract tests
    
    (2368)
    Updated the contract tests
    
    (1944)
    Updated contract tests
    
    Contract tests to demonstrate required-ness handling of path variables
    
    (2220)
    Added example for multiple levels of nested wrapped types
    
    relates to #2182
    Added unit tests and updated contract tests
    
    (2182)
    Fixed rendering of xml examples
    
    The XmlRootElement wasnt taken into consideration when figuring out the xml root element name
    
    (2230)
    Added tests to verify another nested/recursive defenition
    
    resolves #2282
    Added tests around nested recursive types
    
    (1827)
    Re-arranged methods and fields
    
    (1964)
    Added property to test the changes
    
    Also up-revved the swagger core library that contains the fix for rendering examples. Also updated the contract tests to reflect this change.
    
    (1964)
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Demonstrated bug where request params were marked required
    
    This test demonstrates that the request param comes back as not required given the scenario describes in the issue
    
    (2268)
    Demonstrated reported issue is working as designed
    
    relates to #1881
    Added better support for rendering examples
    
    (2249)
    Added example to demonstrate overriding example value
    
    resolves #2161
    Fixed the NPE when rendering complex path variable
    
    When we have a complex path variable that is ignored via @ApiIgnore. Then the parameter type resolution falls back to using the ApiImplicitParam annotation value for parameter type (query, form etc.) As a result when its empty it ends up with a null value. The right thing to happen in this case is for the developer to fill in the type correctly to fix the problem.
    
    This address that case of the NPE but doesnt try to provide a clever solution. Thus the example will render the operation to indicate that the bar parameter is a body parameter.
    
    resolves #2148
    Fixed an issue with render ApiImplicitParams
    
    When the api implicit params does not indicate the type the parameter is rendered as (cookie, header, query etc.) it treats it as a body type. This fixes to not update the parameter type if its blank.
    
    In addition this example demonstrates how to fix the reported issue via a contract test.
    
    fixes #2029
    Test to prove ConstructorProperties works
    
    (1926)
    Changed the type reader to treat request part as formData
    
    (1965)
    Fixed bug involving complex params in multipart requests
    
    When we receive multipart form variables of complex types we were not rendering the complex types that would come as json payloads in the body. This fixes that. It also addresses handling multiple files in a multipart request.
    
    (1965)
    Issue with not respecting response classes
    
    Demonstrates that issue #1887 is not reproducable. The only change to this example is the fact that we return ResponseEntity rather than a CompletableFuture which is a java 7/8 construct. In any case those can be replaced with ResponseEntity using an alternate type rule
    
    fixes #1887
    Fixed codacy violations
    
    #1894
    Added additional logging around duplicate detection
    
    Unable to reproduce the reported issue. Added additional logging around duplicates.
    
    resolves #1894
    Added test for complex type as path variable or request param
    
    (2107)
    Added tests to prove the problem is fixed
    
    (2096)
    Fixed parameter type for params with multiple annoations
    
    When a parameter is annotated with a RequestBody and a ModelAttribute we prioritize the model to appear as if it were a request body. When that happens we should not try and process the parameter as a model attribute. When this happens we log a warning and treat it as a body parameter regardless.
    
    (2118)
    Fix to prevent expansion of request/path params
    
    (2114)
    Add tests for the #2081
    Added support for xml traits in properties
    
    Modified the sample contract test and also handled the case where names and namespaces were not specified.
    
    (1907)
    Added contract test for xml models
    
    (1907)
    Demonstrates @RequestParam(required=true|false)
    
    resolves #1939
    Fixed bug with tags not showing up on combied request handlers
    
    This was because we were not using the controller annotations and looking at operation annotations incorrectly.
    
    (1841)
    Added breaking test to demonstrate nullable expandable parameters
    
    Fixed the contracts accordingly
    
    (1864)
    Added tests to demonstrate nested enums
    
    resolves #1819
    Added test for demonstrating 1749
    
    (1749)
    Added test for multiple model attributes in controller
    
    resolves #1778
    Demonstrated rendering of Double model property
    
    resolves #1777
    Added test to demonstrate response type precedence
    
    Demonstrates how  `@ApiOperation#response` contributes to responses overriding what is specified in `@ApiResponse#response`.
    
    resolves #1750
    formatting;
    method renamed to match bug number;
    1740 @JsonUnwrappred is ignored by Schema generation
    Added test to prove default values work
    
    resolves #1734
    Demonstrates fix for void responses
    
    (1722)
    closes #1722
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Demonstration that it is working as expected
    
    (1697)
    Add tests for custom File type
    
    (1632)
    Demonstrates api model property for 1676
    
    closes #1676
    Fixed the conversion of byte[] to string with byte format
    
    (1605)
    Fixed the bug with rendering responses with Map of Lists
    
    fixes #1475
    Fixed the classmate bug for recursively generic types
    
    The the problem was the classmate would resolve Resource#links as List<Link<String>> rather than List<Link> causing the type substitution to not work
    
    fixes #1440
    Added global tags to the documentation
    
    fixes #1420
    Demonstrated the springfox for Type->Primitive works as expected
    
    resolves #1376
    Updated the example to return a map of string -> string
    
    resolves #1324
    Added java.sql.Date as a native primitive type
    
    fixes #1162
    Fixed the issue with implicit collection params
    
    the model reference did not take into account the allowMultiples when rendering
    
    fixes #1209
    Fixed an issue where Maps as parameters were not rendered correctly
    
    fixes #1306
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Demonstrate interface annotation inference support
    
    Parameters annotations i.e. `@ApiParam` are not supported on interfaces because it can become a combinatorial problem when you nested/multi-interface subclassing controllers.
    
    relates to #1575
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed the build and also fixed depcration warnings
    Updated copyright year
    
    (1082)
    Demonstrated intricate generics support
    
    resolves #1631
    Fixed a bug with unbounded generic parameters and return types
    
    Updated the examples to demonstrate the issue. The downside to this fix is that alternate type
    rules will not apply to these unbounded types. The upside is however we avoid an NPE!
    
    fixes #953
    Updated tests to proove multi-variable templated controllers work as expected
    
    closes #953
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Fix for abstract base types with open generic type with no constraint
    
    not working correctly. fixes #313. Thanks @jtheuer!
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    #2932 - Spring HATEOAS 1.0.0.RELEASE
    Fixed the tests and the contracts to reflect the improved model attribute support
    Fixed a bug with unbounded generic parameters and return types
    
    Updated the examples to demonstrate the issue. The downside to this fix is that alternate type
    rules will not apply to these unbounded types. The upside is however we avoid an NPE!
    
    fixes #953
    Updated tests to proove multi-variable templated controllers work as expected
    
    closes #953
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Fix for abstract base types with open generic type with no constraint
    
    not working correctly. fixes #313. Thanks @jtheuer!
    Updated copyright year
    
    (1082)
    Demonstrated intricate generics support
    
    resolves #1631
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Fixed the feature demonstration tests
    
    (2022)
    #1570 Add examples support
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Added contract tests for inhertance
    
    (1151)
    (868)
    Added contract tests for example based features
    
    (853)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Added documentation on how to override loose body params
    
    This is to document cases where we losely document method parameters that come is as stringified json but are actual types internal to the service.
    
    fixes #2031
    Added documentation on how to use springfox with vavr
    
    resolves #1971
    correct spelling, fix typos
    (issue #1896)
    removing inused import
    integration tests with errors
    Fixed the issue where the parameter requiredness was incorrect
    
    Delegates to the base jackson property to tell us if a parameter property is required or not
    
    fixes #1727
    Added contract tests to verify conventions work
    
    Here we add `PetWithSerializer` type in various contexts and verify that
    it is always honors the jackson annotations.
    
    (1490)
    Updated the tests to demonstrate operation combination
    
    Here we introduce two operations that differ only by media type and accordingly expect the changes to reflect in the contracts.
    
    (1367)
    Correctly represent byte arrays
    
    fixes #1430
    Fixed the tests and the contracts to reflect the improved model attribute support
    Fixed an issue where Maps as parameters were not rendered correctly
    
    fixes #1306
    Fixed to better handle indeterminate primary member
    
    when there are multiple accessors or mutators the parsing of model properties crashes... atleast as of jackson 2.6.x
    
    fixes #1129
    Updated mappers to support 2d arrays for swagger2
    
    swagger 1.2 does not (and will not support) 2d arrays
    Added a test for a primitive body parameter that does not have a format
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Tests to verify Map<String, Map<String, Example>> is rendered correctly
    
    resolves #817
    Reverted the changes so that the contracts are the same as pre-this change
    
    related to #682
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Provided type safe vendor extensibility rather than naked maps
    Fixes the rendering of api which allows uploading of multiple multipart files
    
    fixes #837
    add support for vendor extensions in operations
    
    
    
    Fixes #824
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Added support for list of maps
    
    fixes #740
    Fixes the default rules such that Map<String, String> is not rendered as
    
    an Object. fixes #747
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added test for action without any request mapping value
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Enhancement of merging algorithm.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    @ApiResponse maps to wrong ApiModel-definition name when overriden
    
    fixes #793
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Adding ability to optionally populate nickname into operationId for swagger 2.0 implementations
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed builds for jdk7 and jdk8
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#541] Attempt to clean up logic to handle bare enums in the response
    
    All this effort leads me back to why it wasnt supported in the first place! bare enums are not supported in
    swagger spec just like bare List types are not supported.
    
    closes #541
    [#478] Fixes issue where the @Api value is just a /
    
    closes #478
    [#528] Updated the test business controller to render oauth authorizations
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    Normalized spaces and imports
    When substituting types the base types should not be included as models
    
    Fixes #254
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    migrate from guava lists
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Add support for exclusive ranges #2088
    correct spelling, fix typos
    (issue #1896)
    Fixed the tests and the contracts to reflect the improved model attribute support
    Reverted the changes so that the contracts are the same as pre-this change
    
    related to #682
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Fix to merge parameter definitions and not duplicate the definitions
    
    fixes #813
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Normalized spaces and imports
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    #801 #810 Add proper support for enums in response values and in schema objects
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#478] Adds a contract test for root api endpoints and removes redundant serrvices integ test
    Updated copyright year
    
    (1082)
    Added test for demonstrating 1749
    
    (1749)
    Demonstrated intricate generics support
    
    resolves #1631
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Demonstrate interface annotation inference support
    
    Parameters annotations i.e. `@ApiParam` are not supported on interfaces because it can become a combinatorial problem when you nested/multi-interface subclassing controllers.
    
    relates to #1575
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Moved interfaces to the root documentation packages
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#434] Added support for filtering operations based on include patterns
    
    fixex #434
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright year
    
    (1082)
    Demonstrated intricate generics support
    
    resolves #1631
    Fixed a bug with unbounded generic parameters and return types
    
    Updated the examples to demonstrate the issue. The downside to this fix is that alternate type
    rules will not apply to these unbounded types. The upside is however we avoid an NPE!
    
    fixes #953
    Updated tests to proove multi-variable templated controllers work as expected
    
    closes #953
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Fix for abstract base types with open generic type with no constraint
    
    not working correctly. fixes #313. Thanks @jtheuer!
    Additional contract test.
    Fixed the tests and the contracts to reflect the improved model attribute support
    Fixed a bug with unbounded generic parameters and return types
    
    Updated the examples to demonstrate the issue. The downside to this fix is that alternate type
    rules will not apply to these unbounded types. The upside is however we avoid an NPE!
    
    fixes #953
    Updated tests to proove multi-variable templated controllers work as expected
    
    closes #953
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Fix for abstract base types with open generic type with no constraint
    
    not working correctly. fixes #313. Thanks @jtheuer!
    Updated copyright year
    
    (1082)
    Demonstrated intricate generics support
    
    resolves #1631
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Moved test back to correct package.
    Move tests back into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Mostly working stuff except for generic controllers with base classes
    adding unit tests for changes
    Move tests back into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Added cache clear method to documentation cache
    
    Added tests around stopping and starting the bootstrapper
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Renamed related classes to Documentation*
    Renamed GroupBuilder to DocumentationBuilder
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    #3189 - return default value if property not found in environment
    #3189 - handle defaults in Spring placeholders
    Move tests back into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Moved description resolver to spring-web
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Move tests back into springfox-spring-web.
    Update tests with new factory for path provider. Remove unused code. Update headers with correct year.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Fixed the bug where the caching was incorrect for operations without
    
    specific http method
    - Renamed the configuration class
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Added support for servlet path mapping
    
    closes #665
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Move tests back into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moar tests and increased complexity coverage
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Increasing coverage and general cleanup. Added support for ignorable annotations on controller methods.
    Move tests back into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    Move tests back into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Extracted common logic to setup the JsonSerializer
    
    Also made the JsonSerialzer a component, that way every controller does not need to do the object mapper setup boilerplate code.
    
    related to #701
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Reduced code complexity in ModelDependencyProvider
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Improved the coverage and bumped up the thresholds
    Created parameter type determiner
    
    This is to reuse the same logic across, parameter expansion as well as request params
    
    (2376)
    Service model changes to better support open api 3.0
    
    (2022)
    Added RequestParameterBuilder to the ParameterContext
    
    (2022)
    Move remaining tests into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    WIP
    More fixes
    
    (1829)
    fixing tests
    Fixed all the tests
    Fixed the tests and the contracts to reflect the improved model attribute support
    Fixes rendering of expanding List of scalar types including enums
    
    fixed #969 and reverted fix for #1037
    Reverted groovy/spock because of memory issues
    Ignored the offending test and reset the CI settings
    Added compatibility  data type to migrate from Parameter => RequestParameter
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Move remaining tests into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    More fixes
    
    (1829)
    fixing tests
    Fixed the model attribute expander for list of enums
    
    fixes #1571
    Relaxed the requirement for getters/setters on expandables
    
    Since we have a check for recursively defined model attributes, there is no need for this check any more.
    
    (1603)
    Fixed the stack overflow affecting model attributes
    
    (1603)
    Extracted parameter object in order to provide context
    
    This is an intermediate step so that we can determine types that are seen or not seen before to prevent recursion
    
    (1603)
    Fixed the tests and the contracts to reflect the improved model attribute support
    Fixed the failing test
    
    The reason the test was failing was because the ModelAttributeParameterExpanderSpec in spring-web was trying to access a plugin that was in the swagger module. This creates an incorrect dependency link.
    
    swagger-modules --- depend on --> spring modules.
    
    This fix creates a new spec in the swagger module and removes the test
    in the spring-web module and everything is right in the world :)
    Added tests.
    Replaced [#ind] on [0]
    Added import of ModelAttributeComplexTypeExample
    Added Copyright info.
    Little code style fixations.
    Added functionality to unwrap Lists of objects.
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Additional test cases for read only flag
    
    Test case for read only flag in swagger 2, and no impact to swagger 1
    Fixed the plugin dependencies so that its not constructor injected
    
    This is so that circular bean dependencies can give spring a change to wire all the dependencies. In the case of application being run java application
    with a main method, spring boot is unable to wire in the dependencies as it infers the bean creation order.
    
    fixes #702
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    [#538] Removed @ApiParam from RequestMappingContext
    Made model attribute expander a bean
    
    - Also refactored test to be more readable
    [#538] Moar tests and increased complexity coverage
    [#538] Introduced documentation plugins
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#476] Allows specifying alternative types for expanded model attributes
    Move remaining tests into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed AuthorizationType to have a name property that represents the configuration name of the authorization scheme
    [#538] Removed the models package and collapsed it to the service package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    Move remaining tests into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    correct spelling, fix typos
    (issue #1896)
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Fixed the method resolution for overloaded methods
    
    Before this fix we would match by argument count. This is not accurate
    for overloaded methods that are not covariant. This fix identifies the method
    that came in with the handler method based on equality when there arent any
    co-variant method to match
    Mostly working stuff except for generic controllers with base classes
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Upgraded Spock and groovy
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moar tests and increased complexity coverage
    Fix for abstract base types with open generic type with no constraint
    
    not working correctly. fixes #313. Thanks @jtheuer!
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Updated the tests
    
    (2482)
    Migrated mixin based test support classes to traits
    
    (2022)
    Move tests back into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Feature to support multiple security contexts
    
    Currently each docket only supports one class paths to apply a security
    context around. This fix makes it such that the Docket can be defined with
    multiple security contexts, on for each class of paths
    
    fixes #697
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Replacing Auth* with Security* it seems very confusing the way it is currently named
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Moved interfaces to the root documentation packages
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Optimized build to produce java 8 compatible source code
    Migrated mixin based test support classes to traits
    
    (2022)
    Move tests back into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Changing serialization of swagger models to produce correct authorization json format
    Adding jackson serializer to deserialize swagger Authorization - again different to model
    Adding jackson serialiaer to deserialize swagger AuthorizationTypes
    Migrated mixin based test support classes to traits
    
    (2022)
    Move tests back into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Cleanup and improved test coverage
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Increasing coverage and general cleanup. Added support for ignorable annotations on controller methods.
    Fixed the build and also fixed depcration warnings
    Removed unecessary variable
    
    (2022)
    Fixed the tests
    
    Also fixed a bug where we werent returning the object schema correctly
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Returning cache to life.
    Move tests back into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Fixes for enums.
    Coverage and fixes.
    Fixed ModelDependencyProvider, ModelProvider ParameterDataTypeReader
    
    Usages of the new enum type determiner did not propogate to tests.
    
    (1829)
    Fix all the TypeNameExtractor constructors
    
    (1829)
    fixing tests
    Added caching decorators for the models, model properties and dependencies
    Removed unused model property providers and specifications, also modified the
    
    test support to use the optimized provider instead
    Removed DefaultModelPropertiesProvider as it is no longer in commision
    Refactored the package name for property provider
    
    related to #806
    Broke the cyclic dependency where the TypeNameExtractor depends on schema plugin manager
    
    This way the type name extract is responsible for its own plugins
    
    related to #702
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Added missing types that allow mapping to the new OpenAPI spec
    
    Also converted collection types to the lowest base type i.e. List -> Collection etc.
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Move tests back into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Caught up with all the compatible versions
    Revert "Depend on Swagger 1.3.8; Pass false to the ApiDescription constructor"
    Depend on Swagger 1.3.8; Pass false to the ApiDescription constructor
    #343 Sets swagger resourcePath on ApiListings
    Fixes to handle the multipart files better
    
    (2022)
    Wired in the processing of models using ApiModelReader and the registries
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Move tests back into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    add host() method to docket
    
    Fixes #764
    Added support for tags as a first class concept
    
    Currently the tags are inferred based on a combination of @Api#value() and Class name.
    Going forward it can use the tags support built into the @Api annotations
    
    fixes #737
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Add a top level documentation object
    
    Documentation object is a service level model, that now plays host to
    media types the service produces and consumes. the schemes the service
    supports and also the base path of the api
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Introduced documentation plugins
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    #317 Positioning ResourceListing based on @Api.position()
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Changing serialization of swagger models to produce correct authorization json format
    Adding auth to top level resource listing and to each operation
    Added ApiDescription to ApiListingScanner. Added support for multiple swagger resource listings from the same project. Some refactoring and cleanup.
    Move tests back into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    correct spelling, fix typos
    (issue #1896)
    Fixed the method resolution for overloaded methods
    
    Before this fix we would match by argument count. This is not accurate
    for overloaded methods that are not covariant. This fix identifies the method
    that came in with the handler method based on equality when there arent any
    co-variant method to match
    Mostly working stuff except for generic controllers with base classes
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Upgraded Spock and groovy
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moar tests and increased complexity coverage
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Updated the tests
    
    (2482)
    Migrated mixin based test support classes to traits
    
    (2022)
    Move tests back into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    updated urls, links from wordnik.com to swagger.io
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed AuthorizationType to have a name property that represents the configuration name of the authorization scheme
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Introduced documentation plugins
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    [#528] Fixes rendering of Authorization collection on operations
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed the broken build
    
    - Swagger 1.3.9 introduced a breaking change in the serialization of ApiListings
    - Uncommented ignored test
    - Updated few more dependencies
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Changing serialization of swagger models to produce correct authorization json format
    Adding auth to top level resource listing and to each operation
    Initial authorization support
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Service model changes to better support open api 3.0
    
    (2022)
    Added the name registry plugin
    
    (2022)
    Fixed the tests
    
    Also fixed a bug where we werent returning the object schema correctly
    
    (2022)
    Added a test for the new request parameter model
    
    Also updated the deprecated apis
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Move tests back into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Test fixes for Web
    More fixes
    
    (1829)
    fixing tests
    Cleanup constructor for MediaTypeReader
    
    (1497)
    Added ApiListScannerPlugin to allow custom ApiDescriptions
    
    fixes #1335
    Fixed the failing test
    
    The reason the test was failing was because the ModelAttributeParameterExpanderSpec in spring-web was trying to access a plugin that was in the swagger module. This creates an incorrect dependency link.
    
    swagger-modules --- depend on --> spring modules.
    
    This fix creates a new spec in the swagger module and removes the test
    in the spring-web module and everything is right in the world :)
    Added class import.
    Back unit test to life.
    The description is now working as expected
    Made the OperationPath also a PathDecorator
    Added support for uri templates in query params
    Added incubating feature for providing path decorators as plugins
    Fix to merge parameter definitions and not duplicate the definitions
    
    fixes #813
    Fixed the plugin dependencies so that its not constructor injected
    
    This is so that circular bean dependencies can give spring a change to wire all the dependencies. In the case of application being run java application
    with a main method, spring boot is unable to wire in the dependencies as it infers the bean creation order.
    
    fixes #702
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for default providers per documentation type
    [#538] Implemented the mappers
    [#538] Renamed ParameterExpanderPlugin
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Move tests back into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Moved the path related classes to the path package
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Relaxing linelength checkstyle rule
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moar tests and increased complexity coverage
    Move tests back into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Made the OperationPath also a PathDecorator
    Made the sanitizer a path decorator
    Added support for uri templates in query params
    Move tests back into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    correct spelling, fix typos
    (issue #1896)
    Fixed behavior on operations differing only by ParamsConditionRequest
    
    When operations only differ by parmams condition with set value e.g. a=1 and a=2 then the operations were collapsed
    
    fixes #1114
    Added support for uri templates in query params
    Move tests back into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Added support for uri templates in query params
    Code cleanup and reformatting
    
    (1773)
    Move tests back into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Made the OperationPath also a PathDecorator
    Made the sanitizer a path decorator
    Added support for uri templates in query params
    Move remaining tests into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Added decorator for query parameters
    Added support for servlet path mapping
    
    closes #665
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Fixed the temporal coupling int the name provider plugin
    
    Now the default name provider is no longer a component but truly a default type name provider. If there are no plugins registered the default is used
    migrate from guava Predicate
    Updated the belongs method to take in a group name
    
    this makes it more reusable
    
    (2219)
    Added tests for resource groups
    
    (2219)
    Added tests for model names generation esply for recursive types
    
    (2022)
    Changed signature to return only the dependent ModelSpecifications. We dont care about the resolved types
    
    (2022)
    Updated the end to end model tests
    
    Extracted common logic and removed duplication and simplified the tests
    
    (2022)
    Move remaining tests into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    [#667] Allowing for Dockets with a null groupName
    Ensure that the group names specified in Dockets are unique
    Migrated mixin based test support classes to traits
    
    (2022)
    Removed the PathProviderFactory abstraction
    
    (1773)
    Renamed AbstractPathProvider
    
    This is so that we can eliminate the web mvc/flux path providers which are essentially the same
    
    (1773)
    Removed deprecated api in PathProvider
    
    Also simplified the usages as a result of no longer needing servlet context to resolve the paths
    
    (1773)
    Consolidated the ROOT constant
    
    (1773)
    Fix some of the tests after changes.
    Move tests back into springfox-spring-web.
    Update tests with new factory for path provider. Remove unused code. Update headers with correct year.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Renamed handlerMappings requestHandlers
    
    related to #682, #825
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    [#613] Renamed DocumentConfigurer to Docket
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for default providers per documentation type
    [#538] Refactored the DocumentationConfigurer to return the Documentation Context as part of the configure method
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Move remaining tests into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Added convention to discover the jackson annotated
    
    This is to automatically pull in alternate type rules for jackson
    annotated classes i.e. classes annotated with `JsonSerialize(as)` or
    `JsonDeserialize(as)`.
    
    (1490)
    Added api to contribute defaults
    
    The earlier defaults plugin API was janky and was not conducive to layering defaults and extensible. Added the apply API so that defaults can be contirbuted to via plugins
    
    (3354)
    Removed the PathProviderFactory abstraction
    
    (1773)
    Move remaining tests into springfox-spring-web.
    Update tests with new factory for path provider. Remove unused code. Update headers with correct year.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Fixed the bootstrapper to allow for no conventions
    
    When there are no conventions defined the bootstrapper shouldnt fail
    because no beans can be autowired.
    
    (1490)
    Added conditional PropertyPlaceholderConfigurer bean
    
    Verified that this solution also supports spring 3.2.x and up
    
    fixes #1514
    Added cache clear method to documentation cache
    
    Added tests around stopping and starting the bootstrapper
    Fixed test
    Attempted fix for the context refresh ordering issue
    Skip events from child application context, fixes #1207
    Introduced multiple request handler providers
    Refactored the bootstrapper to take in a RequestHandlerProvider
    
    This is a step forward to support different request handler providers. It is also
    incidentally used to create a predictable ordering of request handlers that are
    processed by the bootstrapper
    
    related to #682, #825
    Added a predictable order in which the dockets are evaluated
    
    related to #825
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    [#613] Renamed DocumentConfigurer to Docket
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for default providers per documentation type
    Renamed related classes to Documentation*
    Renamed Group to Documentation
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    Move remaining tests into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Fixed the doHashCode methods and added tests
    
    (1367)
    Added tests around path combination of same operations
    
    (1367)
    Unit tests.
    Move remaining tests into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Test fixes for web
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Remove usage of generic wildcard type
    #182
    
    Fix sort ordering.
    Move tests back into springfox-spring-web.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Added a test to verify the behavior when sorting dockets
    
    fixes #855
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Made all the logging debug
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    UrlUtils no longer throughs an exception
    
    (2516)
    #1773 springfox: spring-boot:2.0.0.RELEASE with other dependencies upgraded to match those in boot
    Fixed codacity indicated error prone code
    Removed the dependence on ResourceGroupingStrategy to get default tags
    
    also the ApiListingReference scanner no longer needs the resource grouping strategy to create
    resource groups
    
    relates to #454
    resolves #919
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moar tests and increased complexity coverage
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Removing dependency on lombok
    Increasing coverage and general cleanup. Added support for ignorable annotations on controller methods.
    Updating groovy and spock version
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Added cache clear method to documentation cache
    
    Added tests around stopping and starting the bootstrapper
    Updated the tests and removed unused key generators
    
    that were used for caching
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Removes jsp from swagger-ui
    - Adds an endpoint to list all of the swagger resources within a running application
    - Added a base class for swagger contract tests
    Add resource discovery to swagger ui webjar
    - Changing webjar layout to match the webjar standard
    - Added gitter/circleci integration
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Renamed related classes to Documentation*
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Added the name registry plugin
    
    (2022)
    Incorporated response builder plugin and provided default no-op implementation
    
    (2022)
    Removed the PathProviderFactory abstraction
    
    (1773)
    Update tests with new factory for path provider. Remove unused code. Update headers with correct year.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    refactor(): remove dependencies to spring-mvc on swagger core
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    Added projection support for ModelAttribute parameters.
    Improvements for projections plugin.
    Removed the property sources configurer yay!
    
    Since we now resolve imperatively it is no longer required to have this defined. Also remove the *web package from component scan so that we can manually register the two controllers using new PropertySourcedRequestMappingHandler.
    
    (1770)
    Enabled the api listing scanner plugin
    
    Without enabling the plugin in the plugin registry, the beans will not be registered with the plugin registry. Which explains why it was not getting picked up. Interestingly this is also a great example of how one can register fake operations, not represented/backed by the application.
    
    fixes #1767
    Fixed the property resolution regression in spring boot
    
    fixes #1698
    Added DescriptionResolver bean to the configuration
    Namespaced the property sources using placeholder prefix
    
    Instead of the default `${` we use `$SPRINGFOX{` this way the configurer does not interfere with library users.
    
    (1621)
    Added conditional PropertyPlaceholderConfigurer bean
    
    Verified that this solution also supports spring 3.2.x and up
    
    fixes #1514
    Removed the aspecj autoproxy requirement
    
    `@EnableAspectJAutoProxy` was no longer required since we're not using
    it to generate caching proxies.
    
    related to #1055
    related to #927, #921, #938 (spring 3.x support)
    related to #939
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Fixed the bug where the caching was incorrect for operations without
    
    specific http method
    - Renamed the configuration class
    Added decorator for query parameters
    Added incubating feature for providing path decorators as plugins
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Extracted common logic to setup the JsonSerializer
    
    Also made the JsonSerialzer a component, that way every controller does not need to do the object mapper setup boilerplate code.
    
    related to #701
    Removed all the WebMvcConfigurerAdapters and created a BeanPostProcessor
    
    that can assist with finding all the relavent ObjectMappers in play. This
    technique is less intrusive than the WebMvcConfigurationAdapter + @EnableWebMvc
    technique because spring-boot assumes that when one of those or an implementation
    of WebMvcConfigurationSupport implementation is in play, it will refuse to particpate
    in the auto configuration.
    
    related to #638
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Added suppressions for regex sonar flags
    Renamed the builder properties
    
    Reformatted the code and added check style suppressions
    
    (2022)
    #3189 - return default value if property not found in environment
    #3189 - handle defaults in Spring placeholders
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrating from guava Strings
    Added support for resolving placeholders on request params
    
    fixes #1423
    Added DescriptionResolver bean to the configuration
    Moved description resolver to spring-web
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Fixed reliability sonar bugs
    Fixed checkstyle violations and code cleanup
    
    (2022)
    handling order issues and equivalence equals
    all tests past
    migrate from guava Cache and removed Guava
    migrated from guava equivalence
    removed another test from FunctionContractSpec
    Migrating guava Objects to util Objects
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixes the violation of law of demeter
    
    (1196)
    Removed an accidental reference to java.util.Objects
    
    This is a java 7 class. This fix is so that the library works with java 6 users
    
    related to #1086
    Reworked the caching of the operation reader
    
    to use handrolled caching rather than rely on the aspects
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#436] Enum values with JsonValue are not supported
    
    fixes #436
    Extracted common logic to setup the JsonSerializer
    
    Also made the JsonSerialzer a component, that way every controller does not need to do the object mapper setup boilerplate code.
    
    related to #701
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    More release related tasks
    - Sets apps version to 'dangerous' for release testing
    - Saves version post release
    - Adds git/release tasks
    Fixed buildSrc package issue
    Initial release work
    Fixes the problem when multiple api listings are associated with the same api declaration
    
    Swagger 1.2 does not support this model, hacked to only return the first api listing. This needs
    to be fixed to merge the api listings by group, but thats for a different commit. This only
    fixes the problem effectively for 2.0 of the spec, and spec 1.2 is no worse than it was before this
    fix.
    
    related to #727
    Extracted common logic to setup the JsonSerializer
    
    Also made the JsonSerialzer a component, that way every controller does not need to do the object mapper setup boilerplate code.
    
    related to #701
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Caught up with all the compatible versions
    Revert "Depend on Swagger 1.3.8; Pass false to the ApiDescription constructor"
    Depend on Swagger 1.3.8; Pass false to the ApiDescription constructor
    #343 Sets swagger resourcePath on ApiListings
    Reworked the parameter datatype reader
    
    Added the ability to render exploded items for OAS 3. and let the parameter type remain for earlier versions of the spec. Also used the new scalar type convenience to determine scalar types.
    
    This change is to mainly extract one place where we handle request parameter types.
    
    (3377)
    Added better handling of representations
    
    We actively use the parameter type to determine default accept media types. Also we ensure the content model applies to all the relevant media types. We upped the precedence of the ParameterTypeReader so as to determine the media type before the parameter type has a chance to weigh in.
    
    (3351)
    Polished the builders to not expose constructors
    
    (3351)
    Tightened the builder api
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Added cyclic stucture tests
    
    (2022)
    Converted all builders to be consumer based
    
    (2022)
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Fixes to handle the multipart files better
    
    (2022)
    Code reformatting and cleanup
    
    (2022)
    Removed source identifier as a required attribute to construct a model
    
    (2022)
    Refactored the view provider plugin
    
    (2022)
    Added Multipart request parameter builder test
    
    Also fixed all the tests
    
    (2022)
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Added RequestParameterBuilder to the ParameterContext
    
    (2022)
    Code Cleanup prior to working on implicit parameters
    
    Standardized builder names,
    finalized variables
    reformatted files
    Added support for simple types and complex types
    
    (2022)
    WIP 3 compiled successfully
    Merged changes from model enhancements
    WIP
    New merging algorithm that can handle cyclic model references.
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixes for enums.
    Fixes for ViewPlugin.
    New ModelContext is now available only through Context builder
    Renamed projection into a view.
    Optimization of ProjectionProviderPlugin.
    Improvements for projections plugin.
    Initial support for projections.
    Fixed ModelDependencyProvider, ModelProvider ParameterDataTypeReader
    
    Usages of the new enum type determiner did not propogate to tests.
    
    (1829)
    Fix all the TypeNameExtractor constructors
    
    (1829)
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Added support for inferring model attributes even when annotation is missing
    Fixes the violation of law of demeter
    
    (1196)
    Added ignorable types to model context
    
    This is to distinguish between seen types and ignorable types
    
    (1196)
    Added support for maps as request params
    Updated the parameter data type inference to prefer string
    
    In certain cases, the path variables and query strings should automatically
    resolve to a string data type, even if the method argument might suggest otherwise.
    This fixes the issue where that is the case.
    Centralized model ref creation and removed dupication
    Added model ref interface
    
    Also added two dimensional array substitution support
    Fixes the rendering of api which allows uploading of multiple multipart files
    
    fixes #837
    Applied highest precedence to the spring web plugins
    
    that way any plugins that are defined by swagger/swagger 2 will only
    overlay on top of them
    
    relates to #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for Map types in the models
    Fixed the build by adding tests
    Added model ref to parameters
    [#538] Implemented the mappers
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Removed @ApiParam from RequestMappingContext
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#541] Attempt to clean up logic to handle bare enums in the response
    
    All this effort leads me back to why it wasnt supported in the first place! bare enums are not supported in
    swagger spec just like bare List types are not supported.
    
    closes #541
    Normalized spaces and imports
    Support for naming strategies
    Unfolding readers.operation.*
    Unfolding readers.operation.*
    #106 Adding file upload support.
    Renaming path provider to absolute. Fixing typo in modelutils
    Added support for multipart file
    
    - Also optimized the creation of command pipeline
    
    fixes #70 again!
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Remove usage of generic wildcard type
    Created parameter type determiner
    
    This is to reuse the same logic across, parameter expansion as well as request params
    
    (2376)
    Made multi the default for collection formats
    
    (3377)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Fixes to handle the multipart files better
    
    (2022)
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Modularized the configuration
    
    - Also added bean ordering so that spring plugins are always run before the swagger plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    [#538] Removed @ApiParam from RequestMappingContext
    Normalized spaces and imports
    Support for naming strategies
    Unfolding readers.operation.*
    Unfolding readers.operation.*
    Automatically retrieve allowableValues and set allowMultiple for enum arrays
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Supporting operation parameter primitive data types
    Parameter type exclusions. Change path variables to use curly braces as opposed to round braces.
    Adding ApiParameter support
    Made multi the default for collection formats
    
    (3377)
    Polished the builder apis to be fluent
    Tightened the builder api
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Converted all builders to be consumer based
    
    (2022)
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Service model changes to better support open api 3.0
    
    (2022)
    Renamed implements EnumerationFacetBuilder -> EnumerationElementFacetBuilder
    
    (2022)
    Removed source identifier as a required attribute to construct a model
    
    (2022)
    Added support for all the bean validation facets and udpated the tests
    
    (2022)
    Added RequestParameterBuilder to the ParameterContext
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrating from guava Strings
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Using media type to determine correct param type when expanding parameter
    Update parameter builders to add appropriate priorities
    
    (1831)
    Replaced accessing via the deperecated field accessor
    
    We use the field type instead of accesing the raw field.
    
    (1937)
    More fixes
    
    (1829)
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    Added classmate machinery to the model attribute expander
    
    This is to get higher fidelity over rendering generic types
    Fixed model attribute expander to handle enums
    
    fixes #1310
    Fixed the expanded parameter plugin
    
    Currently the swagger plugin that overlays on top of the un-annotated property incorrectly also tries to set the model ref. Rather than duplicate the behavior from the vanila plugin, we simply ignore attributes not infered from the @ApiModelProperty and @ApiParam annotations
    
    fixes #1317
    Fixes rendering of expanding List of scalar types including enums
    
    fixed #969 and reverted fix for #1037
    Updated mappers to support 2d arrays for swagger2
    
    swagger 1.2 does not (and will not support) 2d arrays
    Added support for nested model references
    
    especially useful for 2D arrays
    Formatting
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Applied highest precedence to the spring web plugins
    
    that way any plugins that are defined by swagger/swagger 2 will only
    overlay on top of them
    
    relates to #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed the build by adding tests
    Added model ref to parameters
    [#538] Implemented the mappers
    [#538] Renamed ParameterExpanderPlugin
    Reformatting
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Removed @ApiParam from RequestMappingContext
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrating from guava Strings
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Take the parameter name from attribute @RequestPart value
    Fixed Formatting and modified access modifiers on methods
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Improved coverage and upgraded compatibility with boot 1.3.6
    Added additional checks for parameter name matching
    
    related to #1128
    Fix Nullpointer exception when spring framework failed to get paramter name
    Prefer spring 3 classes for parameter names
    
    This fix looks for the spring 4 DefaultParameterNameDiscoverer and if
    its found uses it. If not it tries to use the spring 3 version
    
    related to #1055
    related to #927, #921, #938 (spring 3.x support)
    related to #939
    Mostly working stuff except for generic controllers with base classes
    Applied highest precedence to the spring web plugins
    
    that way any plugins that are defined by swagger/swagger 2 will only
    overlay on top of them
    
    relates to #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Removed @ApiParam from RequestMappingContext
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#388] Added support to walk the method declaration graph to find specified annotations
    
    resolves #388
    Normalized spaces and imports
    Support for naming strategies
    Unfolding readers.operation.*
    Unfolding readers.operation.*
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Parameter type exclusions. Change path variables to use curly braces as opposed to round braces.
    ApiParams - adding data type reader
    Adding ApiParameter support
    Added support for FilePart type
    
    (3364)
    Added better handling of representations
    
    We actively use the parameter type to determine default accept media types. Also we ensure the content model applies to all the relevant media types. We upped the precedence of the ParameterTypeReader so as to determine the media type before the parameter type has a chance to weigh in.
    
    (3351)
    Polished the builders to not expose constructors
    
    (3351)
    Fixed sonar cloud blocker issues
    Fixed issue where GET/HEAD/OPTION genering incorrect parms
    
    fixes #3338
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixes to handle the multipart files better
    
    (2022)
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Used the parmeter type determiner to decide the parameter type
    
    (2376)
    Changed the type reader to treat request part as formData
    
    (1965)
    Fixed bug involving complex params in multipart requests
    
    When we receive multipart form variables of complex types we were not rendering the complex types that would come as json payloads in the body. This fixes that. It also addresses handling multiple files in a multipart request.
    
    (1965)
    Fixed parameter type for params with multiple annoations
    
    When a parameter is annotated with a RequestBody and a ModelAttribute we prioritize the model to appear as if it were a request body. When that happens we should not try and process the parameter as a model attribute. When this happens we log a warning and treat it as a body parameter regardless.
    
    (2118)
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Added support for inferring model attributes even when annotation is missing
    Incorporate the @RequestPart changes that were accepted in a pull request back in v1
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Applied highest precedence to the spring web plugins
    
    that way any plugins that are defined by swagger/swagger 2 will only
    overlay on top of them
    
    relates to #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Removed @ApiParam from RequestMappingContext
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    Normalized spaces and imports
    Support for naming strategies
    Unfolding readers.operation.*
    Unfolding readers.operation.*
    #106 Adding file upload support.
    Added support for multipart file
    
    - Also optimized the creation of command pipeline
    
    fixes #70 again!
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Parameter allowable values. Adding check for funky spring default value on @Request.. method parameter annotations
    Parameter type exclusions. Change path variables to use curly braces as opposed to round braces.
    ApiParams - adding data type reader
    Adding ApiParameter support
    Upgraded compiler to java 11
    
    Additional fixes
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Trying another approach using an utility checking spring versions. Moved it to the core so it could be available in other parts of the code. Also introduced a customer SpringVersion class return our own, made it a normal class so we can mock it for our tests. This should increase test coverage.
    Solving bug that was breaking compatibility with earlier versions of Spring 4. Using annotation utils instead of newer annotation attribute calls.
    clean up static imports
    migrating from guava Strings
    fixing tests for Optional in definition
    Need to ensure that Optional setting is correct in Defaults and ParameterRequiredReader
    Are both java and guava Optional supported?
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    removing MoreObjects, toString and firstNonNull
    Added logic to take the request path pattern into account
    
    This is to address the case where there might be an endpoint with two request mapping one with the the parameter present in the url template and one without, in conjunction with the path variable marked as not required. As in the example below.
    
    ```java
    @RequestMapping({"/foo", "/foo/{bar}"})
    public void foo(@PathVariable(value = "bar", required = false) String bar)
    ...
    ```
    
    Added additional tests to cover the different use cases for the path variables
    
    (2220)
    Fixed determination of when request param is required
    
    Only the DEFAULT_NONE value should signal that the parameter is required. Any other default value should be treated as a valid value
    
    (2276)
    Added support for resolving placeholders on request params
    
    fixes #1423
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Fixed problem where @ApiParam was not working consistently
    
    each attribute was a seperate plugin and was doing it differently for
    each of the attributes. This fixes the performance issue where the same
    matrixed annotation was being queried multiple times for each attribute
    of the annotation.
    
    Consolidated the plugins into one plugin
    
    fixes #388
    Incorporate the @RequestPart changes that were accepted in a pull request back in v1
    Simplified the isRequired logic so that its more readable
    #778 Take @RequestParam(defaultValue) in to account when marking parameter required.
    Fixes the rendering of request bodies that are required by default
    
    fixes #734
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    Modularized the configuration
    
    - Also added bean ordering so that spring plugins are always run before the swagger plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Removed @ApiParam from RequestMappingContext
    Support for JDK8's Optional in request headers and parameters
    Support for naming strategies
    Unfolding readers.operation.*
    Unfolding readers.operation.*
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    217 methods with PathVariables shoudl always be required
    Operation parameter access support
    Supporting operation parameter primitive data types
    Using spring @Request annotations for parameter required and param default
    Adding ApiParameter support
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Added support for resolving placeholders on request params
    
    fixes #1423
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Applied highest precedence to the spring web plugins
    
    that way any plugins that are defined by swagger/swagger 2 will only
    overlay on top of them
    
    relates to #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Removed @ApiParam from RequestMappingContext
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Normalized spaces and imports
    Support for naming strategies
    Unfolding readers.operation.*
    Unfolding readers.operation.*
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Parameter allowable values. Adding check for funky spring default value on @Request.. method parameter annotations
    Using spring @Request annotations for parameter required and param default
    Adding ApiParameter support
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrated guava Function
    Migraiting from FluentIterable
    Added resolved memebers collection
    
    Rather than hold on to just one, we hold on to a primary and secondary source for annotations. This allows us to get a list we can scan/search for annotations like ApiParam
    
    (1937)
    Deprecated the access to the raw field
    
    This can be based on interfaces that spring uses to resolve via resolvers e.g. Pageable. This is an incremental step to minimize the use of Field directly
    
    (1937)
    Added classmate machinery to the model attribute expander
    
    This is to get higher fidelity over rendering generic types
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Reworked the ModelAttributeParameterExpander
    
    Reduced complexity in the class and also uncovered a bug where the
    treeish classes were partially rendering the expansion.
    Addressed sonar warnings
    
    (3436)
    Added ability to filter ignorable types prior to expansion
    
    (2684)
    Added methods to that we don't allow downstream consumers violating demeter
    
    (2684)
    Moved from using deprecated methods from Types
    
    (3348)
    Formatting change
    
    (3348)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Added compatibility  data type to migrate from Parameter => RequestParameter
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    handling order issues and equivalence equals
    all tests past
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Migrating guava Objects to util Objects
    Added support for public model attribute fields
    
    In the process unearth an example to support anyOf (related to #2490).
    
    fixes #2423
    Used the parmeter type determiner to decide the parameter type
    
    (2376)
    Reformatting and optmized imports
    
    (2376)
    Using media type to determine correct param type when expanding parameter
    Filtered parameters that are of type void
    
    (2368)
    Moved to use getters as a primary source for properties
    
    This is a departure from the initial assumption that bean properties with backing fields will only be supported. This causes types like Pageable which are interfaces to no longer be supported. With this change we use getters as the primary source of truth and optionally for backwards compatibility we also use the fields, if present as a source for annotations
    
    (1937)
    Refactored model parameter accessor to work with either fields or accessors
    
    Since the only thing we care about with the field is the way to access the annotations, we reduce this to AnnotationElement. This way the accessor can work with either fields or properties.
    
    (1937)
    Refactored ParameterObject to use ParameterMetadataAccessor
    
    (1937)
    Deprecated the access to the raw field
    
    This can be based on interfaces that spring uses to resolve via resolvers e.g. Pageable. This is an incremental step to minimize the use of Field directly
    
    (1937)
    Fixed expansion of recursive types
    
    We dont expand collection item types we've already seen
    
    (1827)
    Reformatting
    
    (1827)
    JsonView is not supported for ModelAttributes
    Renamed projection into a view.
    Optimization of ProjectionProviderPlugin.
    Added projection support for ModelAttribute parameters.
    Utilized springs util for package name
    
    this way we dont rely on traversing properties to access the name.
    More fixes
    
    (1829)
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    Fixed the model attribute expander for list of enums
    
    fixes #1571
    Relaxed the requirement for getters/setters on expandables
    
    Since we have a check for recursively defined model attributes, there is no need for this check any more.
    
    (1603)
    Fixed the stack overflow affecting model attributes
    
    (1603)
    Extracted parameter object in order to provide context
    
    This is an intermediate step so that we can determine types that are seen or not seen before to prevent recursion
    
    (1603)
    Check if collections are recursive
    
    A class of the following type Class { List<Class> children} causes a
    stack overflow exception
    
    fixes #1513
    Changed model attribute expander to use the generics supported expansion
    A little fixes.
    Replaced tab characters.
    Added functionality to handle hidden property of @ApiParam and @ApiModelProperty annotations.
    Replaced [#ind] on [0]
    Fixed codacity indicated error prone code
    Little code style fixations.
    Added model for test.
    Added functionality to unwrap Lists of objects.
    Added java.sql.Date as a native primitive type
    
    fixes #1162
    Fixes rendering of expanding List of scalar types including enums
    
    fixed #969 and reverted fix for #1037
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Fixed the plugin dependencies so that its not constructor injected
    
    This is so that circular bean dependencies can give spring a change to wire all the dependencies. In the case of application being run java application
    with a main method, spring boot is unable to wire in the dependencies as it infers the bean creation order.
    
    fixes #702
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Reworked the ModelAttributeParameterExpander
    
    Reduced complexity in the class and also uncovered a bug where the
    treeish classes were partially rendering the expansion.
    [#538] Removed the asResolved method and inlined all the invocations
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    [#538] Removed @ApiParam from RequestMappingContext
    Made model attribute expander a bean
    
    - Also refactored test to be more readable
    [#538] Moar tests and increased complexity coverage
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#476] Allows specifying alternative types for expanded model attributes
    ModelAttribute expansion for collection extensions
    
    Fixes a bug where ModelAttributeParameterExpander
    was incorrectly handling parameters that were extensions
    of collections. For example, any custom extension of a HashSet should
    be treated as a Set but instead it was being treated as a custom type.
    Check if field is of same type as parent when expanding ModelAttribute
    
    To avoid StackOverflowError when expanding ModelAttributes,
    skip call to `expand` when a treeish field is encountered. #465
    Normalized spaces and imports
    @ModelAttribute Flattening Improvements
    
    When complex objects marked with @ModelAttribute in a controller method
    are flattened into individual parameters:
    1) Only consider properties that have a getter and setter.
    This makes it easy for someone to exclude any parameter
    that is not supposed to be set by a request param or has
    a derived value.
    2) Include properties from parent objects so that we
    don’t alienate coders who have form beans with an
    inheritance hierarchy
    Moved the package for OperationParameterReader and adjusted visibility of classes
    Refactored to seperate responsibility from OperationParameterReader
    Added methods to that we don't allow downstream consumers violating demeter
    
    (2684)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Migrating guava Objects to util Objects
    Reformatting and optmized imports
    
    (2376)
    Using media type to determine correct param type when expanding parameter
    Renamed variable
    
    (1827)
    JsonView is not supported for ModelAttributes
    Fix child expansion context creation, because currently it modifies the parent expansion context's seenTypes collections,
    this cause problems with parameters like:
     class SomeFilter {
       LongFilter id;
       LongFilter user;
     }
    
    In this case, the user field was not expanded.
    Renamed projection into a view.
    Added projection support for ModelAttribute parameters.
    Fixed the stack overflow affecting model attributes
    
    (1603)
    Extracted parameter object in order to provide context
    
    This is an intermediate step so that we can determine types that are seen or not seen before to prevent recursion
    
    (1603)
    clean up static imports
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Added a list of annotated elements to search annotations from
    
    Since we want to preserve the ability to lookup annotations from fields and accessors, we add the ability to set multiple sources for annotations and search on a first find first serve basis the annotaions in the find method.
    
    (1937)
    Refactored model parameter accessor to work with either fields or accessors
    
    Since the only thing we care about with the field is the way to access the annotations, we reduce this to AnnotationElement. This way the accessor can work with either fields or properties.
    
    (1937)
    Replaced accessor method with UnsupportedOperationException
    
    Since this is a new interface there shouldnt be anyone using it. If they
    do, it should throw an unsupported operation exception.
    
    (1937)
    Added method to search of annotations given a type
    
    (1937)
    Created an abstraction to access model attribute metadata
    
    (1937)
    Deprecated the access to the raw field
    
    This can be based on interfaces that spring uses to resolve via resolvers e.g. Pageable. This is an incremental step to minimize the use of Field directly
    
    (1937)
    Added classmate machinery to the model attribute expander
    
    This is to get higher fidelity over rendering generic types
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Reworked the ModelAttributeParameterExpander
    
    Reduced complexity in the class and also uncovered a bug where the
    treeish classes were partially rendering the expansion.
    Removed unused media type attribute
    
    (2022)
    Refactored the view provider plugin
    
    (2022)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Coverage and fixes.
    Fixes for ViewPlugin.
    JsonView is not supported for ModelAttributes
    Renamed projection into a view.
    Optimization of ProjectionProviderPlugin.
    Improvements for projections plugin.
    Initial support for projections.
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixes the violation of law of demeter
    
    (1196)
    Added support for additional models
    Mostly working stuff except for generic controllers with base classes
    Incorporate the @RequestPart changes that were accepted in a pull request back in v1
    Adding more instrumentation around models and property inference
    
    To assist with problems like #688
    Applied highest precedence to the spring web plugins
    
    that way any plugins that are defined by swagger/swagger 2 will only
    overlay on top of them
    
    relates to #648
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the api model reader to be factored into plugins
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Simplified the operation to use a decorator as well rather than dynamic proxies
    Reworked the caching of the operation reader
    
    to use handrolled caching rather than rely on the aspects
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Fixed the bug where the caching was incorrect for operations without
    
    specific http method
    - Renamed the configuration class
    Made the sanitizer a path decorator
    Added support for uri templates in query params
    Since this is part of a dot release, backporting it to use spring 4.0.9 where
    
    cacheables do not expose a keyGenerator annotation attribute
    
    related to #682
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Made ApiModelReader, ApiDescriptionReader and ApiOperationReader return concrete results
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Removed base classes and moved packages
    Introduced pmd and addressed the violations
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds builders for some of the primary swagger dtos
    [#528] Fixes rendering of Authorization collection on operations
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#534] Fixes problem of duplicate response messages with the same status code
    
    When operations do not specify a http method, it causes response messages to be duplicated.
    This fix makes the responseMessages a Set rather than a List
    
    fixes #534
    [#530] Orders http operations and adds contract tests for 1.2 spec
    [#438] Reworked the response message readers
    
    - Deprecated class that will go away in a future version
    - Introduced the a configuration in the plugin to turn on or off the
      default response message status codes
    
    fixes #349, #451, #457
    Update the swagger-core depdendency to a working version
    [#447] Added support for @ApiOperation(hidden=[true|false])
    
    closes #447
    Normalized spaces and imports
    Moved the package for OperationParameterReader and adjusted visibility of classes
    Cleanup before pushing pr
    
    - fix compile issue
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Cleanup before pushing pr
    
    - fix compile issue
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Supporting constructor params as fields
    Adding test for implicit params
    Adding reader for @ApiImplicitParams and @ApiImplicitParam
    Added support to populate parameters from the parameter request conditions
    
    resolves 277
    #317 Providing a means to sort the ApiDescriptions within an ApiListing.
    #317 Ordering operations within an ApiListing by numerical position.
    #106 Adding file upload support.
    Optimized usage of commands
    
    partly addresses #270
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    217 methods with PathVariables shoudl always be required
    Initial authorization support
    Initial model creation using swagger provided scala model parsing
    Adding http response codes and messages to api operations
    Refactor to use SwaggerGlobalSettings as opposed to adding to map context each time
    Adding parameterDataTypes to operation command context
    Parameter type exclusions. Change path variables to use curly braces as opposed to round braces.
    ApiParams - adding data type reader
    Adding deprecated attribute to operations
    Setting operations position to either annotation or next logical position
    Adding support for multiple media types on ApiOperation annotation
    ApiOperation: using swagger annotation for position
    ApiOperation: using swagger annotation for summary
    ApiOperation: using swagger annotation if supplied
    First stab at ApiOperations.
    Updated the tests and removed unused key generators
    
    that were used for caching
    Reworked the caching of the operation reader
    
    to use handrolled caching rather than rely on the aspects
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Remove usage of generic wildcard type
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava Predicate
    migrate from guava ImmutableMap, Joiner, Splitter
    migrating from guava Strings
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    migrate from guava lists
    migrated guava Function
    Migrating Ordering to Comparator
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Optimise HandlerMethodResolver.getMemberMethods
    
    Time of generating documentation greatly increases with number
    of methods in controller. This fixes the problem by caching
    the resolved methods for already processed controller classes.
    correct spelling, fix typos
    (issue #1896)
    Added qualified Optional
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Re-ordered methods
    Fixed the method resolution for overloaded methods
    
    Before this fix we would match by argument count. This is not accurate
    for overloaded methods that are not covariant. This fix identifies the method
    that came in with the handler method based on equality when there arent any
    co-variant method to match
    Fixed the tests that were failing because the contra-variant and co-variant method
    
    when @RequestMapping is annotated on a base class method with an open generic type
    Mostly working stuff except for generic controllers with base classes
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Removed the asResolved method and inlined all the invocations
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moar tests and increased complexity coverage
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Fix for abstract base types with open generic type with no constraint
    
    not working correctly. fixes #313. Thanks @jtheuer!
    Prevented ArrayOutOfBoundsException and added logging to help diagnose fail condition
    
    fixes #303
    Reformat code before fixing #303
    Removed TypeResolver creations and delegating to the bean instead
    
    fixes #319
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Polished the builders to not expose constructors
    
    (3351)
    Polished the builder apis to be fluent
    Made all the logging debug
    
    (2022)
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Converted all builders to be consumer based
    
    (2022)
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Fixes to handle the multipart files better
    
    (2022)
    Service model changes to better support open api 3.0
    
    (2022)
    Used model key builder instead of constructor
    
    (2022)
    Added model key as a required attribute of a compound model
    
    (2022)
    Removed source identifier as a required attribute to construct a model
    
    (2022)
    Added content aggregator
    
    For parameters that are all in the body, OpenAPI requires them to be coalesed as if it were an object with properties. This aggregator implementation does just that
    
    (2022)
    Changed to use modern scalar type to determine base type
    
    Going forward Types is deprecated
    
    (3380)
    Cleanup deprecations related to security context
    
    Renamed newer methods on the context
    
    (2482)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Made all the logging debug
    
    (2022)
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Service model changes to better support open api 3.0
    
    (2022)
    Added support for aggregating/transforming content parameters to an object
    
    (2022)
    Incorporated response builder plugin and provided default no-op implementation
    
    (2022)
    Added support for global request parameters
    
    (2022)
    Added compatibility  data type to migrate from Parameter => RequestParameter
    
    (2022)
    WIP
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrated from guava Predicat
    migrate from guava Predicate
    migrate from guava lists
    Migraiting from FluentIterable
    Using media type to determine correct param type when expanding parameter
    Fixed expansion of models with alternate types
    
    resolves #2165
    Fix to prevent expansion of request/path params
    
    (2114)
    New ModelContext is now available only through Context builder
    Code cleanings.
    Renamed projection into a view.
    Optimization of ProjectionProviderPlugin.
    Added projection support for ModelAttribute parameters.
    More fixes
    
    (1829)
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    Fixed the parameter expansion logic
    
    Really as long as a parameter is not annotated we should treat it as a model attribute. So we just exclude RequestPart and RequestBody annotations
    
    (1749)
    Extracted parameter object in order to provide context
    
    This is an intermediate step so that we can determine types that are seen or not seen before to prevent recursion
    
    (1603)
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Improved coverage and upgraded compatibility with boot 1.3.6
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixed the tests and the contracts to reflect the improved model attribute support
    Added support for inferring model attributes even when annotation is missing
    General formatting and cleanup
    A little fixes.
    Added functionality to handle hidden property of @ApiParam and @ApiModelProperty annotations.
    Fixes the violation of law of demeter
    
    (1196)
    Springfox #845: Configuration for global Request-Parameters.
    Added support for configuration of global operation parameters.
    Fix to merge parameter definitions and not duplicate the definitions
    
    fixes #813
    Fixed the plugin dependencies so that its not constructor injected
    
    This is so that circular bean dependencies can give spring a change to wire all the dependencies. In the case of application being run java application
    with a main method, spring boot is unable to wire in the dependencies as it infers the bean creation order.
    
    fixes #702
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Applied highest precedence to the spring web plugins
    
    that way any plugins that are defined by swagger/swagger 2 will only
    overlay on top of them
    
    relates to #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    [#538] Removed base classes and moved packages
    [#538] Removed @ApiParam from RequestMappingContext
    Made model attribute expander a bean
    
    - Also refactored test to be more readable
    [#538] Removed the swagger global settings class
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    Reformatting
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds builders for some of the primary swagger dtos
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#476] Allows specifying alternative types for expanded model attributes
    Moved the package for OperationParameterReader and adjusted visibility of classes
    Made the seed for the parent parameter name not a null value
    Refactored to seperate responsibility from OperationParameterReader
    Method extraction to make the code clear
    Reformatted code to normalize spacing
    Prefer enum types over swagger annotations
    
    - Also general cleanup
    Fixed allowableValues not getting set for enum
    
    Fixed bug where the allowableValues were not getting
    set on enums when the enum property in a container
    object had an ApiParam annotation. Apparently, if you
    declare an ApiParam and don’t put any configuration in
    for the allowableValues, the allowableValues will be a
    blank String instead of null. The bug was that the code
    was checking for a null allowableValues but not for a
    blank String.
    @ModelAttribute expansion must add enum values
    
    @ModelAttribute flattening on controller method params
    will now automatically add allowableValues for enum
    types.
    @ModelAttribute flattening should ignore statics
    
    - Added fix to ignore static fields when flattening objects
    marked with @ModelAttribute
    - Added code coverage to prove the fix works
    Support for naming strategies
    Support @ApiModelProperty
    
    Added support for @ApiModelProperty annotations found on ModelAttribute
    class properties
    Fixes and code coverage
    
    Added code coverage and small fixes discovered by
    better testing
    @ModelAttribute Request Params Now Expanded
    
    Spring controller request params that are marked with @ModelAttribute
    will now be flattened. In other words, instead of generating an
    operation model that contains a complex object in the request, the
    operation model will
    appear to have been defined as accepting individual
    simple type request parameters.
    
    Using the @ModelAttribute on a controller method param
    declares that Spring should bind request parameters to
    the model object. As such, the Swagger model should
    really show individual parameters, and not a complex
    object type.
    Cleanup before pushing pr
    
    - fix compile issue
    Unfolding readers.operation.*
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Additional builder logic cleanup
    Tightened the builder api
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Fixed allowEmpty values being set
    
    (2022)
    Renamed implements EnumerationFacetBuilder -> EnumerationElementFacetBuilder
    
    (2022)
    Removed source identifier as a required attribute to construct a model
    
    (2022)
    Added Multipart request parameter builder test
    
    Also fixed all the tests
    
    (2022)
    Added request parameter merging support
    
    (2022)
    Added RequestParameterBuilder to the ParameterContext
    
    (2022)
    Moved to appropriate package
    
    Also added equals/hashCode and toString methods
    
    (2022)
    Added support for implicit parameter determination
    
    This is so that we can parallelly construct the parameter to the new model. Made the existing OperationBuilderPlugins also infer the RequestParameters
    
    (2022)
    Move into package without uppercase letters.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrating from guava Strings
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    migrate from guava lists
    Update parameter builders to add appropriate priorities
    
    (1831)
    Reformatting to style guide
    
    Splat static imports, method argument arrangement, code formatting and updating copyright date
    
    (1831)
    refactor(): remove dependencies to spring-mvc on swagger core
    Added support for documenting headers in @RequestMapping
    Fixes to handle the multipart files better
    
    (2022)
    add support for deprecated controllers
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Reverted the solution such that both 3.x and 4.2.x are happy
    
    related to #1055
    Pass the class name rather than the Class itself
    
    Since  is a jdk annotation it is probably not available
    in the classloader that the HandlerMethod#getMethodAnnotation uses to
    search for annotations on the handler method
    
    fixes #1055
    Applied highest precedence to the spring web plugins
    
    that way any plugins that are defined by swagger/swagger 2 will only
    overlay on top of them
    
    relates to #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    Normalized spaces and imports
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Changing serialization of swagger models to produce correct authorization json format
    Adding deprecated attribute to operations
    First stab at ApiOperations.
    Updated the tests
    
    (2482)
    Made all the logging debug
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Added support for implicit parameter determination
    
    This is so that we can parallelly construct the parameter to the new model. Made the existing OperationBuilderPlugins also infer the RequestParameters
    
    (2022)
    Move into package without uppercase letters.
    refactor(): remove dependencies to spring-mvc on swagger core
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Refactored common code into abstract class
    Fix to merge parameter definitions and not duplicate the definitions
    
    fixes #813
    Applied highest precedence to the spring web plugins
    
    that way any plugins that are defined by swagger/swagger 2 will only
    overlay on top of them
    
    relates to #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed the build by adding tests
    Added model ref to parameters
    [#538] Implemented the mappers
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds builders for some of the primary swagger dtos
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Normalized spaces and imports
    Supporting custom annotation readers
    Supporting custom annotation readers
    Added support to populate parameters from the parameter request conditions
    
    resolves 277
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    #773 Don't provide a default values for operation notes/description.
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Modularized the configuration
    
    - Also added bean ordering so that spring plugins are always run before the swagger plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Added support for implicit parameter determination
    
    This is so that we can parallelly construct the parameter to the new model. Made the existing OperationBuilderPlugins also infer the RequestParameters
    
    (2022)
    Move into package without uppercase letters.
    refactor(): remove dependencies to spring-mvc on swagger core
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Added support for documenting headers in @RequestMapping
    Refactored common code into abstract class
    Fix to merge parameter definitions and not duplicate the definitions
    
    fixes #813
    Applied highest precedence to the spring web plugins
    
    that way any plugins that are defined by swagger/swagger 2 will only
    overlay on top of them
    
    relates to #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed the build by adding tests
    Added model ref to parameters
    [#538] Implemented the mappers
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds builders for some of the primary swagger dtos
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Normalized spaces and imports
    Supporting custom annotation readers
    Supporting custom annotation readers
    Added support to populate parameters from the parameter request conditions
    
    resolves 277
    Simplified and cleaned up
    
    Autowired fields, simplified functions with method references and lambdas and renamed methods and finalized variables
    
    (3354)
    Moved from using deprecated methods from Types
    
    (3348)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed the build and also fixed depcration warnings
    Service model changes to better support open api 3.0
    
    (2022)
    Refactored the view provider plugin
    
    (2022)
    Renamed MediaType -> Represenation
    
    (2022)
    Added missing types that allow mapping to the new OpenAPI spec
    
    Also converted collection types to the lowest base type i.e. List -> Collection etc.
    
    (2022)
    Added encoding to media types
    
    (2022)
    Fixed the tests
    
    Also fixed a bug where we werent returning the object schema correctly
    
    (2022)
    $563
    New merging algorithm that can handle cyclic model references.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixes for enums.
    New ModelContext is now available only through Context builder
    Initial support for projections.
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    General cleanup of unused fields/constructor params
    
    (1605)
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixes the violation of law of demeter
    
    (1196)
    Added ignorable types to model context
    
    This is to distinguish between seen types and ignorable types
    
    (1196)
    Centralized model ref creation and removed dupication
    Added model ref interface
    
    Also added two dimensional array substitution support
    Proper handling of @ResponseStatus with default reason().
    - Javadoc for @ResponseStatus.reason() says that if no value is given, the
      default message from HttpStatus will be used.
    Mostly working stuff except for generic controllers with base classes
    Fixes the issue where the responseClass in ApiOperation is ignored
    
    fixes #805
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for Map types in the models
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    Made parameter use modelRef fully rather than just for the item types
    Replaced response class with response model
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    Modularized the configuration
    
    - Also added bean ordering so that spring plugins are always run before the swagger plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Refactored the api model reader to be factored into plugins
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Refactored the view provider plugin
    
    (2022)
    New merging algorithm that can handle cyclic model references.
    Updated copyright year
    
    (1082)
    Fixes for enums.
    Fixes for ViewPlugin.
    New ModelContext is now available only through Context builder
    Renamed projection into a view.
    Optimization of ProjectionProviderPlugin.
    Improvements for projections plugin.
    Initial support for projections.
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    General cleanup of unused fields/constructor params
    
    (1605)
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixes the violation of law of demeter
    
    (1196)
    Added ignorable types to model context
    
    This is to distinguish between seen types and ignorable types
    
    (1196)
    Centralized model ref creation and removed dupication
    Mostly working stuff except for generic controllers with base classes
    #801 #810 Add proper support for enums in response values and in schema objects
    Fixes the issue where the responseClass in ApiOperation is ignored
    
    fixes #805
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for Map types in the models
    Replaced Opertion responseClass with responseModel
    Introduced the model ref to response class as well as parameters
    Modularized the configuration
    
    - Also added bean ordering so that spring plugins are always run before the swagger plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Refactored the api model reader to be factored into plugins
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    Added Tags Support for OAS annotations
    
    (2022)
    Added support for adding a set of tags that apply to a docket
    
    fixes #936
    Added support for rendering tags defined in @ApiOperation
    
    fixes #675
    Fixed the plugin dependencies so that its not constructor injected
    
    This is so that circular bean dependencies can give spring a change to wire all the dependencies. In the case of application being run java application
    with a main method, spring boot is unable to wire in the dependencies as it infers the bean creation order.
    
    fixes #702
    Always use plugin manager to resolve plugins
    
    Switched the resource group strategy to be looked up form the plugin manager
    
    fixes #707
    Applied highest precedence to the spring web plugins
    
    that way any plugins that are defined by swagger/swagger 2 will only
    overlay on top of them
    
    relates to #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for tags
    
    Also adjusted the swagger.json to account for the tags not having all the elements
    Added content aggregator
    
    For parameters that are all in the body, OpenAPI requires them to be coalesed as if it were an object with properties. This aggregator implementation does just that
    
    (2022)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Cleanup
    
    (2022)
    Code cleanup
    
    - removed generics when not needed.
    - removed unintended depcrecations
    - reformatted
    - removed dead code
    
    (2022)
    Added breadcrumbs to fix the path decorators
    
    (2022)
    Renamed the builder properties
    
    Reformatted the code and added check style suppressions
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    handling order issues and equivalence equals
    all tests past
    migrated from guava Predicat
    migrate from guava Predicate
    migrate from guava ImmutableMap, Joiner, Splitter
    migrating from guava Strings
    migrated guava Function
    Migraiting from FluentIterable
    Sorted the url template variables alphabetically
    
    (1937)
    Fixed behavior on operations differing only by ParamsConditionRequest
    
    When operations only differ by parmams condition with set value e.g. a=1 and a=2 then the operations were collapsed
    
    fixes #1114
    Restricted access to path components by making them package private
    Made the OperationPath also a PathDecorator
    Made the sanitizer a path decorator
    Added support for uri templates in query params
    Added decorator for query parameters
    Code cleanup and reformatting
    
    (1773)
    migrated guava Function
    Restricted access to path components by making them package private
    Moved the path related classes to the path package
    Made the OperationPath also a PathDecorator
    Renamed method to reflect what its doing
    Made the sanitizer a path decorator
    Added support for uri templates in query params
    Added decorator for query parameters
    Added incubating feature for providing path decorators as plugins
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Restricted access to path components by making them package private
    Added decorator for query parameters
    Added incubating feature for providing path decorators as plugins
    Added support for servlet path mapping
    
    closes #665
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for default providers per documentation type
    Added breadcrumbs to fix the path decorators
    
    (2022)
    migrated guava Function
    Restricted access to path components by making them package private
    Made the OperationPath also a PathDecorator
    Made the sanitizer a path decorator
    Added support for uri templates in query params
    Added decorator for query parameters
    Added incubating feature for providing path decorators as plugins
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Replaced WebMvc/WebFlux path providers with DefaultPathProvider
    
    (1773)
    Renamed AbstractPathProvider
    
    This is so that we can eliminate the web mvc/flux path providers which are essentially the same
    
    (1773)
    Removed deprecated api in PathProvider
    
    Also simplified the usages as a result of no longer needing servlet context to resolve the paths
    
    (1773)
    Updated javadocs that are preventing publishing
    
    related to #2504
    Fixed documentation errors
    Moved the path related classes to the path package
    Renamed method to reflect what its doing
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Moved interfaces to the root documentation packages
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#463] Adding javadoc to publication
    [#423] Removes any potential duplicate forward slashes
    Normalized spaces and imports
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Making path provider a template and moving more path related logic into SwaggerPathProvider
    Providing a a default and relative swagger path provider
    Added suppressions for regex sonar flags
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    Code cleanup and reformatting
    
    (1773)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrating from guava Strings
    Updated javadocs that are preventing publishing
    
    related to #2504
    Removed redundant escape sequence
    
    And added an additional test
    
    (2177)
    Change regex in Paths.java
    
    resolve #2177
    add new test cases in ApiDescriptionReaderSpec.groovy
    Fix handling of RequestMapping values that include regex with quantifier(s).
    
    Fixes #991
    Work to derive tags and description based on the
    
    ApiListingBuilderPlugin. This is work in preparation to deprecate the
    ResourceGroupingStrategy
    Moved the path related classes to the path package
    Renamed method to reflect what its doing
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    [#538] Address a few low hanging todos
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Reformatting and replacing anonymous classes with lamda
    
    (1773)
    migrated guava Function
    Restricted access to path components by making them package private
    Made the OperationPath also a PathDecorator
    Made the sanitizer a path decorator
    Added support for uri templates in query params
    Added decorator for query parameters
    Added incubating feature for providing path decorators as plugins
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Fixed checkstyle violations and code cleanup
    
    (2022)
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Major changes to accomodate controller-less specs
    Work to derive tags and description based on the
    
    ApiListingBuilderPlugin. This is work in preparation to deprecate the
    ResourceGroupingStrategy
    Added support for rendering tags defined in @ApiOperation
    
    fixes #675
    Fixed the plugin dependencies so that its not constructor injected
    
    This is so that circular bean dependencies can give spring a change to wire all the dependencies. In the case of application being run java application
    with a main method, spring boot is unable to wire in the dependencies as it infers the bean creation order.
    
    fixes #702
    Always use plugin manager to resolve plugins
    
    Switched the resource group strategy to be looked up form the plugin manager
    
    fixes #707
    Applied highest precedence to the spring web plugins
    
    that way any plugins that are defined by swagger/swagger 2 will only
    overlay on top of them
    
    relates to #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for tags
    
    Also adjusted the swagger.json to account for the tags not having all the elements
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava Predicate
    migrated guava Function
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Updated the belongs method to take in a group name
    
    this makes it more reusable
    
    (2219)
    Fixed formatting
    
    (2219)
    Extracted ResourceGroup related utility methods
    
    (2219)
    Reformatting to code standard
    
    (3014, 3243, 2345, 3211, 3082, 563)
    Refactoring after merging with master.
    New merging algorithm that can handle cyclic model references.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Removed reference to spring-hateoas related documentation links
    
    related to #1104
    Added ApiDescriptionLookup to help with hypermedia support going forward
    
    The idea is that once this infrastructure is in place, when can then do interesting things
    with spring-hateoas to provide access to ControllerLinkBuilder implementations to access
    api descriptions based on controller method
    migrate from guava Cache and removed Guava
    migrated from guava equivalence
    removed another test from FunctionContractSpec
    Simplified the operation to use a decorator as well rather than dynamic proxies
    Reworked the caching of the operation reader
    
    to use handrolled caching rather than rely on the aspects
    Migrating Ordering to Comparator
    Formatting
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Sorted api listing and api listing references in the models
    
    - Also applied defaultIfEmpty to builders
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Service model changes to better support open api 3.0
    
    (2022)
    Wired in the processing of models using ApiModelReader and the registries
    
    (2022)
    Returning cache to life.
    New merging algorithm that can handle cyclic model references.
    Preparations for a new merging algorithm. Fixes .hashCode() collisions
    and Synthetic types.
    Consolidated the ROOT constant
    
    (1773)
    Reformatted
    
    (1773)
    Made Basepath always be root
    
    (1773)
    Cleaned up for Java 8
    
    (1773)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrated from guava Predicat
    migrate from guava Predicate
    migrate from guava multimap
    migrate from guava ImmutableMap, Joiner, Splitter
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Updated to pass in the group name
    
    (2219)
    Fixed the filtering of additional listings
    
    The filter needs to be a composite predicate rather than individual filter predicates. Also simplified the sorting of apis
    
    (2219)
    Changed the processing of additional api descriptions
    
    We create resource groups for explicitly defined api descriptions. This way we include them in the processing of *all* resource groups which is the bug that we're trying to fix.
    
    We also add additional apis to only if it belongs to the current resource group
    
    (2219)
    Extracted ResourceGroup related utility methods
    
    (2219)
    Extracted the additional api listings outside the for loop
    
    This is just an optimization so that we run through the plugins just once outside the loop
    
    (2219)
    Fixd formatting
    
    (2219)
    Polished
    
    (2056)
    Fixes and coverage.
    Fixes for ApiListingScanner.
    Test fixes for Web
    New comparison algorithm
    Reworked ApiListingScanner to use the ResourcePathProvider
    
    Also fixed the tests
    
    (1943)
    add tests for #1880
    fix optional
    fix optional class
    Fix issue "wrong API resource path" #1880
    Fixed codacy warning
    
    (1767)
    Enabled the api listing scanner plugin
    
    Without enabling the plugin in the plugin registry, the beans will not be registered with the plugin registry. Which explains why it was not getting picked up. Interestingly this is also a great example of how one can register fake operations, not represented/backed by the application.
    
    fixes #1767
    Added ApiListScannerPlugin to allow custom ApiDescriptions
    
    fixes #1335
    Added support for adding a set of tags that apply to a docket
    
    fixes #936
    add host() method to docket
    
    Fixes #764
    Work to derive tags and description based on the
    
    ApiListingBuilderPlugin. This is work in preparation to deprecate the
    ResourceGroupingStrategy
    Formatting
    Removed redundant resource group
    Added support for tags as a first class concept
    
    Currently the tags are inferred based on a combination of @Api#value() and Class name.
    Going forward it can use the tags support built into the @Api annotations
    
    fixes #737
    Added decorator for query parameters
    Added incubating feature for providing path decorators as plugins
    Made the swagger contract tests consistent with respect to method name generation
    
    Over different runs the ordering of the operations determined the names
    of the operations in the case of multiple operations with the same name
    
    related to #682, #825
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    #675 Revert change to ResourceGroupingStrategy interface per comment from @dilipkrish https://github.com/springfox/springfox/pull/772#issuecomment-109778705
    #675 Initial approach to adding @Api(description) to the tags output
    Fixes the problem when multiple api listings are associated with the same api declaration
    
    Swagger 1.2 does not support this model, hacked to only return the first api listing. This needs
    to be fixed to merge the api listings by group, but thats for a different commit. This only
    fixes the problem effectively for 2.0 of the spec, and spec 1.2 is no worse than it was before this
    fix.
    
    related to #727
    Feature to support multiple security contexts
    
    Currently each docket only supports one class paths to apply a security
    context around. This fix makes it such that the Docket can be defined with
    multiple security contexts, on for each class of paths
    
    fixes #697
    Added support for servlet path mapping
    
    closes #665
    Optimized the ApiModelReader to cache
    
    Within the scope of a controller the model reader did not need to read the models
    for each and every operation with a fresh slate. This fix memoizes the inferred
    models within the scope of an api listing (Controller)
    
    related to #567
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Replacing Auth* with Security* it seems very confusing the way it is currently named
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Add a top level documentation object
    
    Documentation object is a service level model, that now plays host to
    media types the service produces and consumes. the schemes the service
    supports and also the base path of the api
    [#538] Removed the models package and collapsed it to the service package
    [#538] Moved interfaces to the root documentation packages
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Sorted api listing and api listing references in the models
    
    - Also applied defaultIfEmpty to builders
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Made ApiModelReader, ApiDescriptionReader and ApiOperationReader return concrete results
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Removed @ApiParam from RequestMappingContext
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds builders for some of the primary swagger dtos
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Cleanup and improved test coverage
    [#434] Added support for filtering operations based on include patterns
    
    fixex #434
    #343 Sets swagger resourcePath on ApiListings
    Cleanup before pushing pr
    
    - fix compile issue
    Supporting custom annotation readers
    Cleanup before pushing pr
    
    - fix compile issue
    Supporting custom annotation readers
    Cleanup project files
    
    - Removed warning
    Adding plugin method for resourceGrouping
    #317 Providing a means to sort the ApiDescriptions within an ApiListing.
    #317 Positioning ResourceListing based on @Api.position()
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Making path provider a template and moving more path related logic into SwaggerPathProvider
    Providing a a default and relative swagger path provider
    Fixed an issue with the ClassOrApiAnnotationResourceGrouping that was making a cases sensitive compare
    Removes the duplication of controller naming strategy being set
    
    Fixes #259 and also address issue #256
    #257 bug - slow scanner
    Added request mapping to the default controller to ignore swagger groups ...
    
    ... when looking up api listing by resource key
    
    Fixes #241
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    #208 Allowing relative urls
    Changing serialization of swagger models to produce correct authorization json format
    Simplifying resource grouping strategy
    Adding jackson serializer to deserialize swagger Authorization - again different to model
    Adding auth to top level resource listing and to each operation
    Initial authorization support
    Changing controller/request mapping groupings to accommodate longer paths
    Changing jackson version. Setting correct paths on ApiDescriptions. Overriding api group with @Api annotation
    Changing back to non package class names. Now correctly working model schema for sample responses but not puts and posts
    Improving model support
    Initial model creation using swagger provided scala model parsing
    Removing dependency on lombok
    Refactor to use SwaggerGlobalSettings as opposed to adding to map context each time
    Supporting operation parameter primitive data types
    Parameter type exclusions. Change path variables to use curly braces as opposed to round braces.
    Changed to absolute uri's in api declarations and resources
    Changing paths on ApiListingReference to be relative to the swagger group to work with swagger UI.
    Cleanup
    Introduced Swagger cache to simplify configuration.
    Changing base and resource uris. Base needs to be absolute for swagger ui and swagger code gen.
    First stab at ApiOperations.
    Added ApiDescription to ApiListingScanner. Added support for multiple swagger resource listings from the same project. Some refactoring and cleanup.
    Adding support for media types. Added ApiListing scanner to generate swagger ApiListings.
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrating from guava Strings
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Added resource path provider
    
    This is responsible for extracting the resource path given a resource group
    
    (1943)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Added support for effective model
    
    The idea behind effective models is to capture whether a model actually used the discriminators or not. For e.g. if a model is marked with a view discriminator and the dependent model does not have any effect of the discriminator as in the model is isomorphic with respect to the view discriminator then we remove the view from the effective model key. This is useful, in this example, to distinguish when naming a model if it should have `View` as a prefix or not in this case.
    
    (2022)
    Removed superfluous final to improve readability
    
    (2022)
    Cleanup
    
    (2022)
    Returning cache to life.
    #3303
    
    Check if model exists in listing. A fuse to prevent NPE.
    Refactoring to fix  NPath Complexity
    NPathComplexity exclusion for only one method.
    Enhancement of merging algorithm.
    Reformatting to code standard
    
    (3014, 3243, 2345, 3211, 3082, 563)
    #3014, #3243, #2345, #3211, #3082
    Fix for #3014, #3243, #2345, #3211, #3082
    Refactoring after merging with master.
    Optimization.
    Removed extra check.
    Fix for redundant circles in known models.
    Fix bug with duplicates subTypes.
    New merging algorithm that can handle cyclic model references.
    Fix for ApiModelReader.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Moved the package for the XmlModelPlugin
    
    (1152)
    Reformatting to match style guide
    
    (2311)
    Fixes for enums.
    Coverage.
    Fixes and coverage.
    Coverage and fixes.
    Bug fixes.
    Changed ResolvedType to String representation of type to assume equality
    of two types without parameters.
    Code style fixes.
    Fixes for ApiModelReader and additional tests.
    Test fixes for Web
    Checkstyle fixes
    New comparison algorithm
    Add 'example' in merged model
    Fixes the violation of law of demeter
    
    (1196)
    Added caching decorators for the models, model properties and dependencies
    Adding more instrumentation around models and property inference
    
    To assist with problems like #688
    Optimized the ApiModelReader to cache
    
    Within the scope of a controller the model reader did not need to read the models
    for each and every operation with a fresh slate. This fix memoizes the inferred
    models within the scope of an api listing (Controller)
    
    related to #567
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Renamed Group to Documentation
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Removed the asResolved method and inlined all the invocations
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Made ApiModelReader, ApiDescriptionReader and ApiOperationReader return concrete results
    [#538] Refactored the api model reader to be factored into plugins
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds builders for some of the primary swagger dtos
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Cleanup and improved test coverage
    [#440] Add support for generating models that are represented in the ApiResponse annotations
    
    closes #440
    Normalized spaces and imports
    Added comment regd. scala copy constructor
    Fixing unsupported operation exception
    Added test to verify #283
    
    Closes #283 - not reproducible
    Added mergeModelMap to ApiModelReader; fixed #378
    Removed TypeResolver creations and delegating to the bean instead
    
    fixes #319
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Refactored ApiListingReferenceScanner to be a post processor
    
    That way all the properties needed for it are infered after we create
    the ApiListing itself and not the other way aroundi.
    Fixed all the tests after refactoring the ApiListingReferenceScanner
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    Remove usage of generic wildcard type
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Updated the copyright headers, cleanup, reformatting
    
    and polish!
    
    (1916)
    Fix for issue 1916 where document level consumes and produces media types are always added to resource level consumes and produces media types. This change won't add those media types anymore but will make sure default media types are set when no document level media types are defined.
    Major changes to accomodate controller-less specs
    Cleanup constructor for MediaTypeReader
    
    (1497)
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Applied highest precedence to the spring web plugins
    
    that way any plugins that are defined by swagger/swagger 2 will only
    overlay on top of them
    
    relates to #648
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    [#538] Removed @ApiParam from RequestMappingContext
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#538] Removed @ApiOperation from RequestMappingContext
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#518] Changed the default content type to json
    
    fixes #518
    [#506] Fixed media type reader to use default media type (all) when none is specified
    
    fixes #506
    Normalized spaces and imports
    Supporting custom annotation readers
    Supporting custom annotation readers
    #106 Adding file upload support.
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Adding support for multiple media types on ApiOperation annotation
    Adding support for media types. Added ApiListing scanner to generate swagger ApiListings.
    Remove usage of generic wildcard type
    Tightened the builder api
    Fixes to handle the multipart files better
    
    (2022)
    Consolidated the ROOT constant
    
    (1773)
    Made Basepath always be root
    
    (1773)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava multimap
    migrate from guava ImmutableMap, Joiner, Splitter
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    Migraiting from FluentIterable
    Fixed the ordering of the elements to be stable
    
    (1623)
    Enabled the api listing scanner plugin
    
    Without enabling the plugin in the plugin registry, the beans will not be registered with the plugin registry. Which explains why it was not getting picked up. Interestingly this is also a great example of how one can register fake operations, not represented/backed by the application.
    
    fixes #1767
    Adding vendor extensions to api info and documentationbuilder
    Added global tags to the documentation
    
    fixes #1420
    add host() method to docket
    
    Fixes #764
    Refactored ApiListingReferenceScanner to be a post processor
    
    That way all the properties needed for it are infered after we create
    the ApiListing itself and not the other way aroundi.
    Fixed all the tests after refactoring the ApiListingReferenceScanner
    Formatting
    Added support for tags as a first class concept
    
    Currently the tags are inferred based on a combination of @Api#value() and Class name.
    Going forward it can use the tags support built into the @Api annotations
    
    fixes #737
    Eliminate the tag duplicates
    
    fixes #771
    Made sure that the api listing references are not duplicated as a result
    
    of having listings span multiple controllers.
    
    related to #727
    Fixes the problem when multiple api listings are associated with the same api declaration
    
    Swagger 1.2 does not support this model, hacked to only return the first api listing. This needs
    to be fixed to merge the api listings by group, but thats for a different commit. This only
    fixes the problem effectively for 2.0 of the spec, and spec 1.2 is no worse than it was before this
    fix.
    
    related to #727
    Upgraded to swagger-core 1.5.3-M1
    
    Also upgraded other libraries. Addressed the security related changes
    in swagger models
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    Add a top level documentation object
    
    Documentation object is a service level model, that now plays host to
    media types the service produces and consumes. the schemes the service
    supports and also the base path of the api
    Renamed related classes to Documentation*
    Renamed GroupBuilder to DocumentationBuilder
    Renamed Group to Documentation
    Added support for tags
    
    Also adjusted the swagger.json to account for the tags not having all the elements
    Renamed the group builder method to reflect what it is
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    Introduced pmd and addressed the violations
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Introduced documentation plugins
    Collapsed one branch of logic
    [#538] Adding more tests to fix the test coverage
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#434] Added support for filtering operations based on include patterns
    
    fixex #434
    Supporting custom annotation readers
    Supporting custom annotation readers
    Supporting constructor params as fields
    Fix NullPointerException if API Description is not provided.
    #317 Providing a means to sort the ApiDescriptions within an ApiListing.
    #317 Bug with ResourceGroup position
    Removing comment
    #317 Positioning ResourceListing based on @Api.position()
    Allowing configuration of apiVersion string.
    Testing xml based swaggerspringmvc plugin. Adding draft documentation for 0.8.4 release.
    Add plugin and adapter to simplify setup.
    Added default modelProvider to base spring configuration.
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Providing a a default and relative swagger path provider
    #282 Reinstate swagger group concept
    Autowired the ObjectMapper ...
    
    Set up components that have the object mapper wired in as a dependency
    
    fixes #272
    Removes the duplication of controller naming strategy being set
    
    Fixes #259 and also address issue #256
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Adding auth to top level resource listing and to each operation
    Removing dependency on lombok
    Refactor to use SwaggerGlobalSettings as opposed to adding to map context each time
    Defaulting param type to string when not a primitive type (until model schema is implemented)
    Supporting operation parameter primitive data types
    Parameter type exclusions. Change path variables to use curly braces as opposed to round braces.
    Changing paths on ApiListingReference to be relative to the swagger group to work with swagger UI.
    Introduced Swagger cache to simplify configuration.
    Changing base and resource uris. Base needs to be absolute for swagger ui and swagger code gen.
    Added ApiDescription to ApiListingScanner. Added support for multiple swagger resource listings from the same project. Some refactoring and cleanup.
    Adding support for media types. Added ApiListing scanner to generate swagger ApiListings.
    Adding spring config. Adding scala support to jackson mapper.
    Changing java version and adding coverage report
    Added default swagger controller. Resolved more dependency issues and moved to correct scala version.
    Added default swagger controller. Resolved more dependency issues and moved to correct scala version.
    Initial ApiResource Listing. Checkstyle to fail during test phase
    Fixed reliability sonar bugs
    Fixed issue with using 5.2+ features
    
    fixes #3340
    Upgraded depdendencies
    
    Adjusted the logging from info => trace
    
    (2022)
    Added tests for model names generation esply for recursive types
    
    (2022)
    Service model changes to better support open api 3.0
    
    (2022)
    Added the notion of model registry
    
    When an api model spec reader reads models specifications these are registered with the registry so that they can answer some interesting questions about the models registered
    
    (2022)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Returning cache to life.
    Removed unused method.
    Refactoring to fix  NPath Complexity
    Enhancement of merging algorithm.
    Reformatting to code standard
    
    (3014, 3243, 2345, 3211, 3082, 563)
    Refactoring after merging with master.
    New merging algorithm that can handle cyclic model references.
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Added model dependencies to the spec registry
    
    (2022)
    Created an ApiModelSpecificationReader
    
    This is a separate path to read the model specifications
    
    (2022)
    Added view name to disambiguate multiple views on same model
    
    (3373)
    Converted all builders to be consumer based
    
    (2022)
    Service model changes to better support open api 3.0
    
    (2022)
    Fixed name collisions
    
    At this point if the names are the same, the models will be the same.
    
    (2022)
    Adusted to handle duplicate names post processing
    
    (2022)
    Fixed the build
    
    (2022)
    Added a model names registry
    
    This is a post processor that provides names based on a model registry. It comes with a very naive implementation today
    - Models with different namespaces but same name have a numeric suffix distinguishing them
    - Models with different validation groups will have "_#" appended to it to distinguish it from same models
    - Models with request and responses for the same key have Req/Res suffixed to it
    - Otherwise If the models have a view the models are suffixed with View instead.
    
    (2022)
    Made all the logging debug
    
    (2022)
    Preparations for a new merging algorithm. Fixes .hashCode() collisions
    and Synthetic types.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava multimap
    Migraiting from FluentIterable
    Fixed formatting
    
    (2219)
    Fixes for typo and names.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Type name adjuster registers only complex types.
    Initialization for type name adjuster
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Removed the dependence on ResourceGroupingStrategy to get default tags
    
    also the ApiListingReference scanner no longer needs the resource grouping strategy to create
    resource groups
    
    relates to #454
    resolves #919
    Refactored ApiListingReferenceScanner to be a post processor
    
    That way all the properties needed for it are infered after we create
    the ApiListing itself and not the other way aroundi.
    Fixed all the tests after refactoring the ApiListingReferenceScanner
    Added support for tags as a first class concept
    
    Currently the tags are inferred based on a combination of @Api#value() and Class name.
    Going forward it can use the tags support built into the @Api annotations
    
    fixes #737
    Added decorator for query parameters
    Added incubating feature for providing path decorators as plugins
    Fixed the issue with the cache key generator algorithm in addition
    
    to sorting the RequestHandlers to facilitate a predictable ordering of operations
    
    related to #682, #825
    Refactored the bootstrapper to take in a RequestHandlerProvider
    
    This is a step forward to support different request handler providers. It is also
    incidentally used to create a predictable ordering of request handlers that are
    processed by the bootstrapper
    
    related to #682, #825
    Updated to use base class RequestMappingInfoHandlerMapping where possible
    
    related to #682, #825
    Reformatted the code to match existing styles
    #675 Revert change to ResourceGroupingStrategy interface per comment from @dilipkrish https://github.com/springfox/springfox/pull/772#issuecomment-109778705
    #675 Initial approach to adding @Api(description) to the tags output
    Added support for servlet path mapping
    
    closes #665
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for tags
    
    Also adjusted the swagger.json to account for the tags not having all the elements
    [#538] Removed the models package and collapsed it to the service package
    [#538] Moved interfaces to the root documentation packages
    [#538] Sorted api listing and api listing references in the models
    
    - Also applied defaultIfEmpty to builders
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Introduced documentation plugins
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Cleanup and improved test coverage
    [#434] Added support for filtering operations based on include patterns
    
    fixex #434
    Normalized spaces and imports
    Adding the posibility of ignoring an entire controller
     - Ingoring all methods of a controller by adding an excluded annotation
        on class level
     - @ApiIgnore can now be specified on Type, but also on Parameter and has
       been added to the defaultIgnorableParameterTypes Set
    #317 Bug with ResourceGroup position
    #317 Positioning ResourceListing based on @Api.position()
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Making path provider a template and moving more path related logic into SwaggerPathProvider
    Providing a a default and relative swagger path provider
    #282 Adding back absolute urls for resource listings
    #282 Reinstate swagger group concept
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixes to handle the multipart files better
    
    (2022)
    New merging algorithm that can handle cyclic model references.
    Reformatting
    
    (1773)
    Move into package without uppercase letters.
    Fixes after initial merge.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Added group name when inferring api descriptions
    
    (2219)
    refactor(): remove dependencies to spring-mvc on swagger core
    Polish
    
    Fixed formatting and error message
    
    (1983)
    fix the :Avoid throwing raw exception types.
    format
    add try/catch error and log for easy find Cycles in Java classes cause infinite loop in ModelAttributeParameterExpander StackOverflowError
    add try/catch error and log for easy find Cycles in Java classes cause infinite loop in ModelAttributeParameterExpander StackOverflowError
    Added ApiListScannerPlugin to allow custom ApiDescriptions
    
    fixes #1335
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fix for @ApiOperation(hidden=true) not being honored
    
    fixes #995
    Simplified the operation to use a decorator as well rather than dynamic proxies
    Reworked the caching of the operation reader
    
    to use handrolled caching rather than rely on the aspects
    Added ApiDescriptionLookup to help with hypermedia support going forward
    
    The idea is that once this infrastructure is in place, when can then do interesting things
    with spring-hateoas to provide access to ControllerLinkBuilder implementations to access
    api descriptions based on controller method
    Reformatted code
    Fixed the bug where the caching was incorrect for operations without
    
    specific http method
    - Renamed the configuration class
    Made the OperationPath also a PathDecorator
    Made the sanitizer a path decorator
    Added support for uri templates in query params
    Added decorator for query parameters
    Added incubating feature for providing path decorators as plugins
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Added support for servlet path mapping
    
    closes #665
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Moved interfaces to the root documentation packages
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Address a few low hanging todos
    [#538] This is a superfluous ordering support as most request mappings do not include multiple patterns
    
    In any case, this provides a way to sort the operations within an api
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Made ApiModelReader, ApiDescriptionReader and ApiOperationReader return concrete results
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Cleanup and improved test coverage
    [#434] Added support for filtering operations based on include patterns
    
    fixex #434
    Caught up with all the compatible versions
    fixes problem when cleaning a path with spring regular expressions, it used to delete second colon separated param:{value} .
    Revert "Depend on Swagger 1.3.8; Pass false to the ApiDescription constructor"
    Depend on Swagger 1.3.8; Pass false to the ApiDescription constructor
    Supporting custom annotation readers
    Supporting custom annotation readers
    #317 Ordering operations within an ApiListing by numerical position.
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Providing a a default and relative swagger path provider
    Moving sanitize request mapping out to the only class that uses it
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Simplified and cleaned up
    
    Autowired fields, simplified functions with method references and lambdas and renamed methods and finalized variables
    
    (3354)
    Made all the logging debug
    
    (2022)
    2967: disable standard DocumentationPluginsBootstrapper if spring-integration plugin is present, not if spring-integration is present
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Reformatted the code to match style guide
    
    Indents are 2 spaces and we splat static imports and dont splat regular imports (Should probably advertise this better)
    
    (2793)
    first version which documents parameters for spring-integration webmvc, removed petstore and petstore-tests
    Removed the PathProviderFactory abstraction
    
    (1773)
    Move DefaultConfiguration and DocumentationPluginsBootstrapper into common place.
    Introduce new factory for path provider and inject it where needed.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Added error handling around documentation scanning
    
    This way we atleast do not crash the application when the documentation plugin does not startup correctly.
    
    fixes #2111
    Fixed the bootstrapper to allow for no conventions
    
    When there are no conventions defined the bootstrapper shouldnt fail
    because no beans can be autowired.
    
    (1490)
    Reordered the rules to make space for conventions
    
    Also automatically applied conventions in the bootstrappers
    
    (1490)
    Use the request handler combiner in the bootstrapper
    
    (1367)
    Added cache clear method to documentation cache
    
    Added tests around stopping and starting the bootstrapper
    Attempted fix for the context refresh ordering issue
    Skip events from child application context, fixes #1207
    Introduced multiple request handler providers
    Fixing logging error
    Fixed documentation errors
    Refactored the bootstrapper to take in a RequestHandlerProvider
    
    This is a step forward to support different request handler providers. It is also
    incidentally used to create a predictable ordering of request handlers that are
    processed by the bootstrapper
    
    related to #682, #825
    Renamed handlerMappings requestHandlers
    
    related to #682, #825
    Added a predictable order in which the dockets are evaluated
    
    related to #825
    Ordering the plugins to make it more predictable
    
    related to #825
    Ensure that the group names specified in Dockets are unique
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for default providers per documentation type
    Renamed related classes to Documentation*
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactored the DocumentationConfigurer to return the Documentation Context as part of the configure method
    [#538] Added support for default configuration
    
    This is so that the DefaultContextBuilder no longer needs to know about the Defaults. Also allows the Bootstrapper to load defaults via delegation rather than doing it by itself
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    [#538] Formatting and added a TODO
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Introduced documentation plugins
    [#538] Use the new DTOs in the controller
    Removes javadoc markup
    [#446] [#448] Makes plugin initialization more thread safe
    [#513] Added hook to disable/enable the swagger plugin via external configuration
    
    resolves #513
    Cleanup and improved test coverage
    [#463] Adding javadoc to publication
    Normalized spaces and imports
    Allows detection of customs SwaggerSpringMvcPlugins when using SpringBoot
    Testing xml based swaggerspringmvc plugin. Adding draft documentation for 0.8.4 release.
    Testing plugin adapter
    Only initialize SwaggerSpringMvcPlugins once. Unlikely to happen but no unheard of for applications to force context refreshes.
    Add plugin and adapter to simplify setup.
    Added default modelProvider to base spring configuration.
    Added api to contribute defaults
    
    The earlier defaults plugin API was janky and was not conducive to layering defaults and extensible. Added the apply API so that defaults can be contirbuted to via plugins
    
    (3354)
    Added methods to that we don't allow downstream consumers violating demeter
    
    (2684)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed issues with rendering the base path
    
    (2022)
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Added the name registry plugin
    
    (2022)
    Incorporated response builder plugin and provided default no-op implementation
    
    (2022)
    Added compatibility  data type to migrate from Parameter => RequestParameter
    
    (2022)
    Updated spring dependencies to spring 5.2.0 and spring boot 2.2.0, fixed changed interfaces
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    migrated guava Function
    Migraiting from FluentIterable
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    JsonView is not supported for ModelAttributes
    Renamed projection into a view.
    Improvements for projections plugin.
    Enabled the api listing scanner plugin
    
    Without enabling the plugin in the plugin registry, the beans will not be registered with the plugin registry. Which explains why it was not getting picked up. Interestingly this is also a great example of how one can register fake operations, not represented/backed by the application.
    
    fixes #1767
    Reordered the rules to make space for conventions
    
    Also automatically applied conventions in the bootstrappers
    
    (1490)
    Added ApiListScannerPlugin to allow custom ApiDescriptions
    
    fixes #1335
    Fixed the bug with rendering responses with Map of Lists
    
    fixes #1475
    Fixed codacity indicated error prone code
    Added support for uri templates in query params
    Applied the url templated decorator to pet service
    Added incubating feature for providing path decorators as plugins
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Fixed the plugin dependencies so that its not constructor injected
    
    This is so that circular bean dependencies can give spring a change to wire all the dependencies. In the case of application being run java application
    with a main method, spring boot is unable to wire in the dependencies as it infers the bean creation order.
    
    fixes #702
    Ensure that the group names specified in Dockets are unique
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    [#613] Renamed DocumentConfigurer to Docket
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for default providers per documentation type
    [#538] Renamed ParameterExpanderPlugin
    [#538] Removed the models package and collapsed it to the service package
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the api model reader to be factored into plugins
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    [#538] Removed @ApiParam from RequestMappingContext
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#538] Cleaned up PluginsManager
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Introduced documentation plugins
    Added api to contribute defaults
    
    The earlier defaults plugin API was janky and was not conducive to layering defaults and extensible. Added the apply API so that defaults can be contirbuted to via plugins
    
    (3354)
    Simplified and cleaned up
    
    Autowired fields, simplified functions with method references and lambdas and renamed methods and finalized variables
    
    (3354)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Incorporated response builder plugin and provided default no-op implementation
    
    (2022)
    Removed the PathProviderFactory abstraction
    
    (1773)
    Reformatting and replacing anonymous classes with lamda
    
    (1773)
    Move DefaultConfiguration and DocumentationPluginsBootstrapper into common place.
    Introduce new factory for path provider and inject it where needed.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Moved the path related classes to the path package
    Added incubating feature for providing path decorators as plugins
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for default providers per documentation type
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Added support for default configuration
    
    This is so that the DefaultContextBuilder no longer needs to know about the Defaults. Also allows the Bootstrapper to load defaults via delegation rather than doing it by itself
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    handling order issues and equivalence equals
    all tests past
    migrate from guava ImmutableMap, Joiner, Splitter
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    migrated guava Function
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    [#667] Allowing for Dockets with a null groupName
    Ensure that the group names specified in Dockets are unique
    Incorporated response builder plugin and provided default no-op implementation
    
    (2022)
    Simplified and cleaned up
    
    Autowired fields, simplified functions with method references and lambdas and renamed methods and finalized variables
    
    (3354)
    Formatting change
    
    (3348)
    Remove usage of generic wildcard type
    Made all the logging debug
    
    (2022)
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    More reformatting to match existing style
    
    (2793)
    Reformatted the code to match style guide
    
    Indents are 2 spaces and we splat static imports and dont splat regular imports (Should probably advertise this better)
    
    (2793)
    resolved checkstyle issues
    first version which documents parameters for spring-integration webmvc, removed petstore and petstore-tests
    Fixed reliability sonar bugs
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright year
    
    (1082)
    handling order issues and equivalence equals
    all tests past
    migrated from guava equivalence
    removed another test from FunctionContractSpec
    Migrating guava Objects to util Objects
    Added equivalence comparators for request handlers
    
    This is to compare two request handlers using a custom criteria.
    
    (1367)
    Remove usage of generic wildcard type
    Updated copyright year
    
    (1082)
    Replaced StringBuffer with StringBuilder
    
    (2516)
    
    (cherry picked from commit ebeb20da28d39ee0e409cad0137fc2e1149ce95e)
    Added predictable handling of order of combined request handlers
    
    Also we use the sorted paths to get a consistent key for the same combination of paths regardless of order
    
    (2516)
    
    (cherry picked from commit 07a9225538465bc66d23fd2f41edd9ca5db75708)
    Migrated code to java 8 and simplified by removing anonymous classes
    
    Also general cleanup of imports and code
    (2516)
    
    (cherry picked from commit 2eb93cbd46ba7467786e09ab1f3f177728bc726c)
    handling order issues and equivalence equals
    all tests past
    migrated from guava equivalence
    removed another test from FunctionContractSpec
    migrate from guava multimap
    migrate from guava lists
    migrated guava Function
    Migrating Ordering to Comparator
    Stabilized the ordering of operations
    
    (2415)
    Updated logging back to debug
    
    (2394)
    Made the request handler combination deterministic
    
    (2394)
    Fixed codacy violations
    
    #1894
    Added additional logging around duplicate detection
    
    Unable to reproduce the reported issue. Added additional logging around duplicates.
    
    resolves #1894
    Skipping combination when right and left are the same
    
    (1841)
    Optimized combiner logic
    
    We only need to combine grouped entries that have more than one request handler.
    
    related to #1780
    Reworked the logic to combine request handlers
    
    (1780)
    It no longer uses iterators, which in some cases was causing a ConcurrentModificationException.
    
    fixes #1780
    Added tests around path combination of same operations
    
    (1367)
    Added a request handler combiner
    
    Also added a default implementation. The purpose of this class is to combine request handler using a certain algorithm to combine operations with the same path. This is so that we don’t drop operations which differ only be media type.
    
    (1367)
    Fixed reliability sonar bugs
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright year
    
    (1082)
    Added predictable handling of order of combined request handlers
    
    Also we use the sorted paths to get a consistent key for the same combination of paths regardless of order
    
    (2516)
    
    (cherry picked from commit 07a9225538465bc66d23fd2f41edd9ca5db75708)
    Migrated code to java 8 and simplified by removing anonymous classes
    
    Also general cleanup of imports and code
    (2516)
    
    (cherry picked from commit 2eb93cbd46ba7467786e09ab1f3f177728bc726c)
    handling order issues and equivalence equals
    all tests past
    migrated from guava equivalence
    removed another test from FunctionContractSpec
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    Migraiting from FluentIterable
    Migrating guava Objects to util Objects
    Fixed formatting
    
    (2415)
    Fixed the logic that is used to combine similar endpoints
    
    (2039)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    refactor(): remove dependencies to spring-mvc on swagger core
    Fixed the doHashCode methods and added tests
    
    (1367)
    Added tests around path combination of same operations
    
    (1367)
    Added equivalence comparators for request handlers
    
    This is to compare two request handlers using a custom criteria.
    
    (1367)
    2967: disable standard DocumentationPluginsBootstrapper if spring-integration plugin is present, not if spring-integration is present
    More reformatting to match existing style
    
    (2793)
    Reformatted the code to match style guide
    
    Indents are 2 spaces and we splat static imports and dont splat regular imports (Should probably advertise this better)
    
    (2793)
    first version which documents parameters for spring-integration webmvc, removed petstore and petstore-tests
    Conditionally load the xml plugins
    
    In JDK 9+ jaxb is not part of the runtime. So we need to check if jaxb
    is even on the classpath before pullingin a bean defnition.
    
    (2226)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    migrated from guava Predicat
    migrate from guava Predicate
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    Reformatted
    
    (2582)
    Migrate to ClassGraph (formerly FastClasspathScanner) 4.0.3
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    handling order issues and equivalence equals
    all tests past
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Replace Reflections with FastClassPathScanner (#2243)
    Added convention to discover the jackson annotated
    
    This is to automatically pull in alternate type rules for jackson
    annotated classes i.e. classes annotated with `JsonSerialize(as)` or
    `JsonDeserialize(as)`.
    
    (1490)
    Remove usage of generic wildcard type
    Fixed issue where default builder value wasnt working
    
    fixes #3327
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed the build and also fixed depcration warnings
    Added support for Severs
    
    (2022)
    Incorporated response builder plugin and provided default no-op implementation
    
    (2022)
    Added support for global request parameters
    
    (2022)
    3062: Remove unnecessary import
    3062: Change Set type for produces and consumes Docket attributes
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Renamed AbstractPathProvider
    
    This is so that we can eliminate the web mvc/flux path providers which are essentially the same
    
    (1773)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    Removed warning in javadoc
    
    related to #2504
    Migrating Ordering to Comparator
    Updated javadocs that are preventing publishing
    
    related to #2504
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    correct spelling, fix typos
    (issue #1896)
    Update Docket.java
    Updating tests
    Cleaning up
    Adding vendor extensions to api info and documentationbuilder
    Fixed javadoc reference
    Fixed javadoc errors prior to release
    Introduced rule priorities for alternate types
    
    Before this all rules have the same priorities which is not idea. As demonstrated by #1558, we expect custom rules to take highest priority followed by generic type rules, followed by direct substitutions.
    
    With this fix the following priority will be applied to rules (highest
    priority to lowest)
    - Custom rules specified by docket#alternateTypeRules
    - Custom rules specified by docket#genericModelSubstitutes
    - Custom rules specifed by docet#directModelSubstitutes
    - Default rules that come built-in to springfox
    
    fixes #1558
    Added support for adding a set of tags that apply to a docket
    
    fixes #936
    Added support for additional models
    Re-ordered fields
    Apply custom alternate rules before the default rules
    
    Since the rules are processed on a first rule matches strategy, the
    default rules need to be evaluated after all the library consumer
    supplied rules are evaluated.
    
    related to #1025
    Formatting related to #939
    add unit tests
    add host() method to docket
    
    Fixes #764
    fix javadoc
    Fixed documentation errors
    Added default empty list behaviour when supplied with null value
    Springfox #845: Configuration for global Request-Parameters.
    Added support for configuration of global operation parameters.
    Added a test to verify the behavior when sorting dockets
    
    fixes #855
    Fixed the regression causing NPE when using default dockets
    
    or dockets with no groupName initialized
    
    related to #855
    Adjusted the incubation feature versions in preparation for the release
    Moved the path related classes to the path package
    Applied the url templated decorator to pet service
    Added a note in javadocs as to why sorting of api descriptions and listing references might
    
    be working as expected in swagger 2.0
    
    related to #732
    Made the SwaggerResource#getLocation() return a path thats not qualified
    
    using the ?group=<group-name> query parameter. This is to prevent the bug in swagger-ui/ swagger.js
    where the api listing is resolved by appending the api url to the url on the swagger page.
    
    more details available @ https://github.com/swagger-api/swagger-ui/issues/1245
    
    related to #727
    Feature to support multiple security contexts
    
    Currently each docket only supports one class paths to apply a security
    context around. This fix makes it such that the Docket can be defined with
    multiple security contexts, on for each class of paths
    
    fixes #697
    [#667] Allowing for Dockets with a null groupName
    Ensure that the group names specified in Dockets are unique
    Added support for servlet path mapping
    
    closes #665
    Updated generic model substitution documentation
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Replacing Auth* with Security* it seems very confusing the way it is currently named
    
    relates to #647
    Made the authorization types list an covariant list
    
    Also fixed the bug where the security definition was mapped to the wrong key
    
    fixes #647
    Find/replace springdox/springfox what could go wrong :)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Work to replace the include expression with predicates
    
    closes #613
    [#613] Renamed DocumentConfigurer to Docket
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for default providers per documentation type
    Add a top level documentation object
    
    Documentation object is a service level model, that now plays host to
    media types the service produces and consumes. the schemes the service
    supports and also the base path of the api
    [#538] Removed the models package and collapsed it to the service package
    [#538] Moved interfaces to the root documentation packages
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Refactored the DocumentationConfigurer to return the Documentation Context as part of the configure method
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Sorted api listing and api listing references in the models
    
    - Also applied defaultIfEmpty to builders
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Cleaned up PluginsManager
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Introduced documentation plugins
    Disables auto html paragraphs for blank lines in javadoc.
    [#539] Prevents excludeAnnotations from modifying the defaults in SpringSwaggerConfig
    Disables auto html paragraphs for blank lines in javadoc.
    [#539] Prevents excludeAnnotations from modifying the defaults in SpringSwaggerConfig
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    [#537] Fixes line length issues
    [#537] Adds builders for some of the primary swagger dtos
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed the broken build
    [#498] add support for generic type naming strategies
    [#513] Added hook to disable/enable the swagger plugin via external configuration
    
    resolves #513
    Cleanup and improved test coverage
    [#434] Added support for filtering operations based on include patterns
    
    fixex #434
    [#438] Reworked the response message readers
    
    - Deprecated class that will go away in a future version
    - Introduced the a configuration in the plugin to turn on or off the
      default response message status codes
    
    fixes #349, #451, #457
    [#463] Adding maven required pom attributes
    [#463] Adding javadoc to publication
    Supporting custom annotation readers
    Supporting custom annotation readers
    Adding plugin method for resourceGrouping
    Adding some more documentation
    
    Plugin javadoc
    #317 Adding documentation to order ApiDescriptions.
    #317 Providing a means to sort the ApiDescriptions within an ApiListing.
    Removed TypeResolver creations and delegating to the bean instead
    
    fixes #319
    Javadoc
    Added test for directModelSubstitute(..)
    Add some continence methods for model substitution rules. Added some javadoc to SwaggerSpringMvcPlugin.java.
    #317 Positioning ResourceListing based on @Api.position()
    Allowing configuration of apiVersion string.
    Making init method protected. Adding some more documentation
    Added apiInfo method to plugin. Updating documentation.
    Add plugin and adapter to simplify setup.
    Added default modelProvider to base spring configuration.
    Remove usage of generic wildcard type
    Redid the toString with StringJoiner
    
    (1773)
    Reformatting before redoing the toString on RequestHandlers
    
    (1773)
    Move into package without uppercase letters.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    handling order issues and equivalence equals
    all tests past
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Safely combined produces and consumes
    
    (2394)
    refactor(): remove dependencies to spring-mvc on swagger core
    Added additional logging around duplicate detection
    
    Unable to reproduce the reported issue. Added additional logging around duplicates.
    
    resolves #1894
    Improvements for projections plugin.
    Initial support for projections.
    Fixed bug with tags not showing up on combied request handlers
    
    This was because we were not using the controller annotations and looking at operation annotations incorrectly.
    
    (1841)
    Tidied up the the combination logic
    
    (1367)
    Moved the combined request handler up
    
    This is so that it can be reused by other bindings i.e. grails
    
    (1367)
    Implemented entity search services documentation
    Improved coverage and upgraded compatibility with boot 1.3.6
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Updated checkstyle
    
    (2022)
    NPathComplexity exclusion for only one method.
    Enhancement of merging algorithm.
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Checkstyle.
    Updated the checkstyle plugin to use regex instead of literal text
    
    fixes #1322
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Relaxing linelength checkstyle rule
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    #317 Providing a means to sort the ApiDescriptions within an ApiListing.
    First stab at ApiOperations.
    Added checkstyle so that PR validation can be automated
    Updated the method comparison to not be naive
    
    Currently it checks for method equality, but this can sometimes not be correct as the resolved method and the target of comparison might be on different classes in the class inheritance chain.
    
    fixes #1258
    Updated the checkstyle plugin to use regex instead of literal text
    
    fixes #1322
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Added configuration properties support
    
    This helps generate metadata for the application properties
    
    (2022)
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Changed the api docs endpoints to work better with swagger-ui
    
    With the swagger ui working well the services need to be configured to work better in concert with it.
    Conditionally enable swagger-ui
    
    (2022)
    Getting swagger ui to play nice with both mvc and webflux
    
    (2022)
    Updated the documentation
    
    Polished the javadocs for the configuration properties
    
    fixes #3378
    Swagger ui endpoints can be navigated at /swagger-ui/
    
    relates to #3345
    Changed the api docs endpoints to work better with swagger-ui
    
    With the swagger ui working well the services need to be configured to work better in concert with it.
    Fixed issues with rendering the UI for webflux
    
    (2022)
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Swagger ui endpoints can be navigated at /swagger-ui/
    
    relates to #3345
    Changed the api docs endpoints to work better with swagger-ui
    
    With the swagger ui working well the services need to be configured to work better in concert with it.
    Conditionally enable swagger-ui
    
    (2022)
    Getting swagger ui to play nice with both mvc and webflux
    
    (2022)
    Renamed and consolidated
    
    (2022)
    Fixed issues with rendering the UI for webflux
    
    (2022)
    Updated the documentation
    
    Polished the javadocs for the configuration properties
    
    fixes #3378
    Swagger ui endpoints can be navigated at /swagger-ui/
    
    relates to #3345
    Changed the api docs endpoints to work better with swagger-ui
    
    With the swagger ui working well the services need to be configured to work better in concert with it.
    Renamed and consolidated
    
    (2022)
    Fixed issues with rendering the UI for webflux
    
    (2022)
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Updated the documentation
    
    Polished the javadocs for the configuration properties
    
    fixes #3378
    Added auto-startup property to the properties
    
    (3030)
    Removed PropertySourcedMapping
    
    This is no longer needed to support property driven mapping resolution
    
    (2022)
    Added configuration properties support
    
    This helps generate metadata for the application properties
    
    (2022)
    Added better guards around spring boot auto configuration
    Getting swagger ui to play nice with both mvc and webflux
    
    (2022)
    Added configuration properties support
    
    This helps generate metadata for the application properties
    
    (2022)
    fixup! Properties WIP
    Added controls around enabling and disabling springfox
    
    (2022)
    Renamed and consolidated
    
    (2022)
    Fixed issues with rendering the UI for webflux
    
    (2022)
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Fixed issues with rendering the base path
    
    (2022)
    Consolidated the annotations
    
    (2022)
    '
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Build scripts cleanup
    
    Used the new form for plugin definitions and removed unused script blocks and rearranged the dependencies
    
    (2022)
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Fix dependencies and exclusions.
    Upgrade to java 8
    
    (2516)
    updating java to 1.8 and guava version that support 1.8
    #1773 springfox: spring-boot:2.0.0.RELEASE with other dependencies upgraded to match those in boot
    Moved the petstore docket configuration to its own module
    
    Demonstrates that the issue 1890 is not reproducable.
    
    fixes #1890
    Added staticdocs module
    - Removed a bunch of gradle apply language plugins
    - Reverted gralde idea copyright generation from copyright file
    Publishing petstore api
    Adjusted the spring dependencies to provided
    
    Also reverted to using the regular servlet api dependency
    Renamed modules and directories
    Implementing pre-release tasks
    Renames modules to springdox-
    Updated the build scripts to publish all the publishable modules
    
    Also realized that nothing is pulling in the common module, so updated the configuration beans to import it
    Added support to query pets repository
    Switched to using swagger 1.5 throughout the library
    [#538] Adds petstore module in preparation for swagger 2.0
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Moved the class to native package
    
    (3354)
    Simplified and cleaned up
    
    Autowired fields, simplified functions with method references and lambdas and renamed methods and finalized variables
    
    (3354)
    Move webflux petstore to separate package to allow coverage report creation.
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Move webflux petstore to separate package to allow coverage report creation.
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Moved the class to native package
    
    (3354)
    Formatting change
    
    (3348)
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Move webflux petstore to separate package to allow coverage report creation.
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Move webflux petstore to separate package to allow coverage report creation.
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Move webflux petstore to separate package to allow coverage report creation.
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Move webflux petstore to separate package to allow coverage report creation.
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Fixed the issue where the parameter requiredness was incorrect
    
    Delegates to the base jackson property to tell us if a parameter property is required or not
    
    fixes #1727
    Added test to prove that 2.0 works for @JsonCreator
    
    annotated factory methods on models
    
    closes #653
    Updated models to verify an issue with @JsonCreator annotation
    
    fixes #586
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Move webflux petstore to separate package to allow coverage report creation.
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Fixed the build and also fixed depcration warnings
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fix code quality issues.
    Move webflux petstore to separate package to allow coverage report creation.
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    correct spelling, fix typos
    (issue #1896)
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds bare contract spec for swagger 2.0
    - Uses swagger groups to split petstore api from out test case apis
    [#538] Adds petstore module in preparation for swagger 2.0
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fix code quality issues.
    Move webflux petstore to separate package to allow coverage report creation.
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    correct spelling, fix typos
    (issue #1896)
    Made headers collection a sortable map
    
    Because plain hashmaps dont guarantee order we use a tree map to preseve the ordering based on header key.
    
    (1651)
    Fix for @ApiOperation(hidden=true) not being honored
    
    fixes #995
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated models to verify an issue with @JsonCreator annotation
    
    fixes #586
    Took care of low hanging TODOs
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for rendering security definitions and authorizations for operations
    Added support to query pets repository
    [#538] Adds petstore module in preparation for swagger 2.0
    Fix code quality issues.
    Move webflux petstore to separate package to allow coverage report creation.
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fix code quality issues.
    Move webflux petstore to separate package to allow coverage report creation.
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    correct spelling, fix typos
    (issue #1896)
    Fixes rendering of expanding List of scalar types including enums
    
    fixed #969 and reverted fix for #1037
    Fixed behavior on operations differing only by ParamsConditionRequest
    
    When operations only differ by parmams condition with set value e.g. a=1 and a=2 then the operations were collapsed
    
    fixes #1114
    Added support for rendering tags defined in @ApiOperation
    
    fixes #675
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Move webflux petstore to separate package to allow coverage report creation.
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Move webflux petstore to separate package to allow coverage report creation.
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Move webflux petstore to separate package to allow coverage report creation.
    Initial draft of tests for webflux. Fixes of publishables. Additional test fixes/cases.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava Predicate
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    Migraiting from FluentIterable
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support to query pets repository
    [#538] Adds petstore module in preparation for swagger 2.0
    Made the dependencies strictly provided only
    
    This way spring/jackson etc will always take the dependencies that were provided
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Added tests for Defaults
    
    (1773)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Added staticdocs module
    - Removed a bunch of gradle apply language plugins
    - Reverted gralde idea copyright generation from copyright file
    Updated the build files
    Renamed modules and directories
    Renames modules to springdox-
    Fixed issue with Security Context Builder
    
    fixes #3361
    Added tests for Defaults
    
    (1773)
    Deprecated SPRING_WEB
    
    There is really no documentation type that is SPRING_WEB, it has to be one of the flavors of swagger/open api.
    
    Deprecated for removal
    
    (3354)
    Fixed simple type specification
    
    (2022)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for rendering maps in swagger 2
    Fixed the build
    
    The models are not correct however :-o
    [#538] Made all swagger plugins check if the documentationType is supported
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Introduced documentation plugins
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Refactored model parameter accessor to work with either fields or accessors
    
    Since the only thing we care about with the field is the way to access the annotations, we reduce this to AnnotationElement. This way the accessor can work with either fields or properties.
    
    (1937)
    Replaced accessor method with UnsupportedOperationException
    
    Since this is a new interface there shouldnt be anyone using it. If they
    do, it should throw an unsupported operation exception.
    
    (1937)
    Added method to search of annotations given a type
    
    (1937)
    Created an abstraction to access model attribute metadata
    
    (1937)
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Fixed expansion of models with alternate types
    
    resolves #2165
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added Service Provider interface to be able to process the Response
    
    Response is a new object model to support open api spec. This also adds support for an extensibility model for customizing the Response objects. Added support for intelligent defaults for responses.
    
    (2022)
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Added api to contribute defaults
    
    The earlier defaults plugin API was janky and was not conducive to layering defaults and extensible. Added the apply API so that defaults can be contirbuted to via plugins
    
    (3354)
    Updated javadocs that are preventing publishing
    
    related to #2504
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for default providers per documentation type
    Refactored the bootstrapper to take in a RequestHandlerProvider
    
    This is a step forward to support different request handler providers. It is also
    incidentally used to create a predictable ordering of request handlers that are
    processed by the bootstrapper
    
    related to #682, #825
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Updated copyright year
    
    (1082)
    Added a request handler combiner
    
    Also added a default implementation. The purpose of this class is to combine request handler using a certain algorithm to combine operations with the same path. This is so that we don’t drop operations which differ only be media type.
    
    (1367)
    Refactored the bootstrapper to take in a RequestHandlerProvider
    
    This is a step forward to support different request handler providers. It is also
    incidentally used to create a predictable ordering of request handlers that are
    processed by the bootstrapper
    
    related to #682, #825
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    correct spelling, fix typos
    (issue #1896)
    Added ApiListScannerPlugin to allow custom ApiDescriptions
    
    fixes #1335
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for default providers per documentation type
    Added a model names registry
    
    This is a post processor that provides names based on a model registry. It comes with a very naive implementation today
    - Models with different namespaces but same name have a numeric suffix distinguishing them
    - Models with different validation groups will have "_#" appended to it to distinguish it from same models
    - Models with request and responses for the same key have Req/Res suffixed to it
    - Otherwise If the models have a view the models are suffixed with View instead.
    
    (2022)
    Ensure that the group names specified in Dockets are unique
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Remove usage of generic wildcard type
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Added support for Severs
    
    (2022)
    Fixed javadocs
    
    (2022)
    Added Service Provider interface to be able to process the Response
    
    Response is a new object model to support open api spec. This also adds support for an extensibility model for customizing the Response objects. Added support for intelligent defaults for responses.
    
    (2022)
    Added support for global request parameters
    
    (2022)
    3062: Change Set type for produces and consumes Docket attributes
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    Migrating Ordering to Comparator
    Updated javadocs that are preventing publishing
    
    related to #2504
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Support explicit ordering for Tags
    correct spelling, fix typos
    (issue #1896)
    Adding vendor extensions to api info and documentationbuilder
    Introduced rule priorities for alternate types
    
    Before this all rules have the same priorities which is not idea. As demonstrated by #1558, we expect custom rules to take highest priority followed by generic type rules, followed by direct substitutions.
    
    With this fix the following priority will be applied to rules (highest
    priority to lowest)
    - Custom rules specified by docket#alternateTypeRules
    - Custom rules specified by docket#genericModelSubstitutes
    - Custom rules specifed by docet#directModelSubstitutes
    - Default rules that come built-in to springfox
    
    fixes #1558
    Added support for adding a set of tags that apply to a docket
    
    fixes #936
    Added support for additional models
    Apply custom alternate rules before the default rules
    
    Since the rules are processed on a first rule matches strategy, the
    default rules need to be evaluated after all the library consumer
    supplied rules are evaluated.
    
    related to #1025
    add host() method to docket
    
    Fixes #764
    Added deprecation notice
    
    relates to #454
    resolves #919
    Added default empty list behaviour when supplied with null value
    Springfox #845: Configuration for global Request-Parameters.
    Added support for configuration of global operation parameters.
    Added incubating feature for providing path decorators as plugins
    Refactored the bootstrapper to take in a RequestHandlerProvider
    
    This is a step forward to support different request handler providers. It is also
    incidentally used to create a predictable ordering of request handlers that are
    processed by the bootstrapper
    
    related to #682, #825
    Updated to use base class RequestMappingInfoHandlerMapping where possible
    
    related to #682, #825
    Renamed handlerMappings requestHandlers
    
    related to #682, #825
    Feature to support multiple security contexts
    
    Currently each docket only supports one class paths to apply a security
    context around. This fix makes it such that the Docket can be defined with
    multiple security contexts, on for each class of paths
    
    fixes #697
    Added support for servlet path mapping
    
    closes #665
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Replacing Auth* with Security* it seems very confusing the way it is currently named
    
    relates to #647
    Made the authorization types list an covariant list
    
    Also fixed the bug where the security definition was mapped to the wrong key
    
    fixes #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Work to replace the include expression with predicates
    
    closes #613
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for default providers per documentation type
    Add a top level documentation object
    
    Documentation object is a service level model, that now plays host to
    media types the service produces and consumes. the schemes the service
    supports and also the base path of the api
    [#538] Removed the models package and collapsed it to the service package
    [#538] Moved interfaces to the root documentation packages
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Added support for default configuration
    
    This is so that the DefaultContextBuilder no longer needs to know about the Defaults. Also allows the Bootstrapper to load defaults via delegation rather than doing it by itself
    [#538] Applied default value to builders when the new values are null
    [#538] Sorted api listing and api listing references in the models
    
    - Also applied defaultIfEmpty to builders
    [#538] This is a superfluous ordering support as most request mappings do not include multiple patterns
    
    In any case, this provides a way to sort the operations within an api
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Fixed the package name of the ignorable types
    
    (2684)
    Adjusted logging
    
    (3366)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Added Service Provider interface to be able to process the Response
    
    Response is a new object model to support open api spec. This also adds support for an extensibility model for customizing the Response objects. Added support for intelligent defaults for responses.
    
    (2022)
    Extracted commonly used method
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Remove duplicated line.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Migrating Ordering to Comparator
    Updated javadocs that are preventing publishing
    
    related to #2504
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    add native support for joda and threetenbp date types
    add native support for jdk8 jsr310 date types
    
    Fix #1544
    Added the ApiIgnore to the list of ignored types
    
    This fixes a regression where the parameters with the annotation no longer get ignored
    
    fixes #1346
    Reinstated ApiIgnore as an ignorable type
    
    This is to allow for ignoring parameters explicitly
    
    fixes #1346
    Added MultipartFile as a primitive swagger base type
    
    This so that when we have a parameter of type MultipartFile[] we want it
    to not try and create a model for this type.
    
    In the long term this primitive needs to be configured per format.
    
    fixes #1282
    Added native support for Optional types
    
    resolves #1199
    Added support for nested model references
    
    especially useful for 2D arrays
    Added alternate type rule
    Fixes the default rules such that Map<String, String> is not rendered as
    
    an Object. fixes #747
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for default providers per documentation type
    [#538] Removed the models package and collapsed it to the service package
    [#538] Moved interfaces to the root documentation packages
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Renamed variables
    [#538] Applied default value to builders when the new values are null
    [#538] Sorted api listing and api listing references in the models
    
    - Also applied defaultIfEmpty to builders
    [#538] This is a superfluous ordering support as most request mappings do not include multiple patterns
    
    In any case, this provides a way to sort the operations within an api
    Modularized the configuration
    
    - Also added bean ordering so that spring plugins are always run before the swagger plugins
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Introduced documentation plugins
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#537] Adds more builders and updates changelog for release
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Cleanup and improved test coverage
    Fix the relative swagger path provider to use the context path as the root
    
    fixes #411
    Fixed issue with incorrect NO_CONTENT reason phrase
    
    closes #341
    Support for naming strategies
    Cleanup before pushing pr
    
    - fix compile issue
    Removing qualifier annotation because this bean will never be fx consumer supplied
    Supporting custom annotation readers
    Cleanup before pushing pr
    
    - fix compile issue
    Removing qualifier annotation because this bean will never be fx consumer supplied
    Supporting custom annotation readers
    Fixed broken build
    
    - Removed unused import
    - Updated failing test
    
    closes #370
    Changes to accept the pr
    
    - Moved Accessor to the right package and changed visibilityi.
    - Changed the ObjectMapper back to how it was currently being set in a
      bean PostConstruct.
    - Renamed PropertyUtils to BeanPropertyDefinitions to match guava
      convention
    - Changed Qualifier to default for the ModepPropertiesProvider bean
    - Re-instated the JacksonSwaggerSupport foo to set the ObjectMapper in
      the PostConstruct
    Supporting constructor params as fields
    Adding the posibility of ignoring an entire controller
     - Ingoring all methods of a controller by adding an excluded annotation
        on class level
     - @ApiIgnore can now be specified on Type, but also on Parameter and has
       been added to the defaultIgnorableParameterTypes Set
    Adding some more documentation
    
    Plugin javadoc
    Delay tampering with spring's object mapper.
    Trying @Depends on annotation to create springsMessageConverterObjectMapper before ModelPropertiesProvider.
    Using setter based autowiring on DefaultModelPropertyProvider to avoid BeanCurrentlyInCreationException/circular dependency.
    - Also fix unnecessary creation of Type Resolver #319
    Refactor JacksonSwaggerSupport to use and autowired bean: springsMessageConverterObjectMapper.
    First cut at providing springsMessageConverterObjectMapper to model provider.
    Add some continence methods for model substitution rules. Added some javadoc to SwaggerSpringMvcPlugin.java.
    Add plugin and adapter to simplify setup.
    Added default modelProvider to base spring configuration.
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Providing a a default and relative swagger path provider
    Renaming path provider to absolute. Fixing typo in modelutils
    Autowired the ObjectMapper ...
    
    Set up components that have the object mapper wired in as a dependency
    
    fixes #272
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed issue with Security Context Builder
    
    fixes #3361
    Improved API around security context specifications
    
    related to #2482
    Cleanup deprecations related to security context
    
    Renamed newer methods on the context
    
    (2482)
    migrated from guava Predicat
    migrate from guava Predicate
    Updated javadocs that are preventing publishing
    
    related to #2504
    Fixed potential NPE when evaluating security contexts
    
    Rather than returning null, we return an empty list when no security references are found.
    
    fixes #2502
    Fixed documenation
    
    #1232
    Created security reference selector based on OperationContext
    
    Also updated the tests to account for the new http method selector for security contexts
    
    (2256)
    Added builders and properties to filter by http method
    
    (2256)
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Replacing Auth* with Security* it seems very confusing the way it is currently named
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Moved interfaces to the root documentation packages
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Normalized spaces and imports
    Adding some more documentation
    
    Plugin javadoc
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Adding jackson serializer to deserialize swagger Authorization - again different to model
    Initial authorization support
    Fixed issue with Security Context Builder
    
    fixes #3361
    Updated the tests
    
    (2482)
    Improved API around security context specifications
    
    related to #2482
    Cleanup deprecations related to security context
    
    Renamed newer methods on the context
    
    (2482)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    clean up static imports
    migrate from guava Predicate
    migrate from guava lists
    Created security reference selector based on OperationContext
    
    Also updated the tests to account for the new http method selector for security contexts
    
    (2256)
    Added builders and properties to filter by http method
    
    (2256)
    Feature to support multiple security contexts
    
    Currently each docket only supports one class paths to apply a security
    context around. This fix makes it such that the Docket can be defined with
    multiple security contexts, on for each class of paths
    
    fixes #697
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Replacing Auth* with Security* it seems very confusing the way it is currently named
    
    relates to #647
    Improved code-coverage and improved formatting
    Removed redundant resource group
    Added support for tags as a first class concept
    
    Currently the tags are inferred based on a combination of @Api#value() and Class name.
    Going forward it can use the tags support built into the @Api annotations
    
    fixes #737
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Updated the context and the registry api
    
    We no longer need the effective key as it is not possible to infer what the library consumers do with the models
    
    (2022)
    Added the notion of model registry
    
    When an api model spec reader reads models specifications these are registered with the registry so that they can answer some interesting questions about the models registered
    
    (2022)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Added RequestParameterBuilder to the ParameterContext
    
    (2022)
    Updated copyright year
    
    (1082)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Using media type to determine correct param type when expanding parameter
    Replaced accessor method with UnsupportedOperationException
    
    Since this is a new interface there shouldnt be anyone using it. If they
    do, it should throw an unsupported operation exception.
    
    (1937)
    Added method to search of annotations given a type
    
    (1937)
    Refactored ParameterObject to use ParameterMetadataAccessor
    
    (1937)
    Deprecated the access to the raw field
    
    This can be based on interfaces that spring uses to resolve via resolvers e.g. Pageable. This is an incremental step to minimize the use of Field directly
    
    (1937)
    Added ReflectionSupport to facilitate getting fields in a class
    
    Also fixed incorrect tests
    Added classmate machinery to the model attribute expander
    
    This is to get higher fidelity over rendering generic types
    Added support for nested model references
    
    especially useful for 2D arrays
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    [#538] Removed @ApiParam from RequestMappingContext
    Fixed reliability sonar bugs
    Updated the context and the registry api
    
    We no longer need the effective key as it is not possible to infer what the library consumers do with the models
    
    (2022)
    Returning cache to life.
    New merging algorithm that can handle cyclic model references.
    Preparations for a new merging algorithm. Fixes .hashCode() collisions
    and Synthetic types.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixes for typo and names.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Type name adjuster registers only complex types.
    New ModelContext is now available only through Context builder
    Renamed projection into a view.
    Initial support for projections.
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Added ignorable types to model context
    
    This is to distinguish between seen types and ignorable types
    
    (1196)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Applied default value to builders when the new values are null
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Remove usage of generic wildcard type
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Initial model refactoring
    New merging algorithm that can handle cyclic model references.
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Preparations for a new merging algorithm. Fixes .hashCode() collisions
    and Synthetic types.
    Move into package without uppercase letters.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    using more static imports
    migrate from guava ImmutableMap, Joiner, Splitter
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Migrating Ordering to Comparator
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixes for typo and names.
    refactor(): remove dependencies to spring-mvc on swagger core
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Required changes for Request mapping context
    Improvements for projections plugin.
    Initial support for projections.
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixes the violation of law of demeter
    
    (1196)
    Added ignorable types to model context
    
    This is to distinguish between seen types and ignorable types
    
    (1196)
    Reworked the caching of the operation reader
    
    to use handrolled caching rather than rely on the aspects
    Added support for uri templates in query params
    Added incubating feature for providing path decorators as plugins
    Optimized the ApiModelReader to cache
    
    Within the scope of a controller the model reader did not need to read the models
    for each and every operation with a fresh slate. This fix memoizes the inferred
    models within the scope of an api listing (Controller)
    
    related to #567
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] This is a superfluous ordering support as most request mappings do not include multiple patterns
    
    In any case, this provides a way to sort the operations within an api
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Made ApiModelReader, ApiDescriptionReader and ApiOperationReader return concrete results
    [#538] Refactored the api model reader to be factored into plugins
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Removed @ApiParam from RequestMappingContext
    [#538] Removed @ApiOperation from RequestMappingContext
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    #182
    
    Fix sort ordering.
    Migrated code to java 8 and simplified by removing anonymous classes
    
    Also general cleanup of imports and code
    (2516)
    
    (cherry picked from commit 2eb93cbd46ba7467786e09ab1f3f177728bc726c)
    clean up static imports
    migrating from guava Strings
    Migrating Ordering to Comparator
    Stabilized the ordering of operations
    
    (2415)
    Fixed formatting
    
    (2415)
    refactor(): remove dependencies to spring-mvc on swagger core
    Cleanup and adjusting access modifiers
    
    (1367)
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Added a builder for request handlers
    Made the swagger contract tests consistent with respect to method name generation
    
    Over different runs the ordering of the operations determined the names
    of the operations in the case of multiple operations with the same name
    
    related to #682, #825
    Fixed the issue with the cache key generator algorithm in addition
    
    to sorting the RequestHandlers to facilitate a predictable ordering of operations
    
    related to #682, #825
    Added a predictable order in which the dockets are evaluated
    
    related to #825
    Ordering the plugins to make it more predictable
    
    related to #825
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    [#538] Removed the models package and collapsed it to the service package
    [#538] Sorted api listing and api listing references in the models
    
    - Also applied defaultIfEmpty to builders
    Remove usage of generic wildcard type
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Added support for Severs
    
    (2022)
    Added Service Provider interface to be able to process the Response
    
    Response is a new object model to support open api spec. This also adds support for an extensibility model for customizing the Response objects. Added support for intelligent defaults for responses.
    
    (2022)
    Added support for global request parameters
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Migrating Ordering to Comparator
    Updated javadocs that are preventing publishing
    
    related to #2504
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    correct spelling, fix typos
    (issue #1896)
    Updating tests
    Adding vendor extensions to api info and documentationbuilder
    Added support for adding a set of tags that apply to a docket
    
    fixes #936
    Added support for additional models
    add host() method to docket
    
    Fixes #764
    Added deprecation notice
    
    relates to #454
    resolves #919
    Springfox #845: Configuration for global Request-Parameters.
    Added support for configuration of global operation parameters.
    Adjusted the incubation feature versions in preparation for the release
    Added incubating feature for providing path decorators as plugins
    Refactored the bootstrapper to take in a RequestHandlerProvider
    
    This is a step forward to support different request handler providers. It is also
    incidentally used to create a predictable ordering of request handlers that are
    processed by the bootstrapper
    
    related to #682, #825
    Updated to use base class RequestMappingInfoHandlerMapping where possible
    
    related to #682, #825
    Feature to support multiple security contexts
    
    Currently each docket only supports one class paths to apply a security
    context around. This fix makes it such that the Docket can be defined with
    multiple security contexts, on for each class of paths
    
    fixes #697
    Added support for servlet path mapping
    
    closes #665
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Replacing Auth* with Security* it seems very confusing the way it is currently named
    
    relates to #647
    Made the authorization types list an covariant list
    
    Also fixed the bug where the security definition was mapped to the wrong key
    
    fixes #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Work to replace the include expression with predicates
    
    closes #613
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Add a top level documentation object
    
    Documentation object is a service level model, that now plays host to
    media types the service produces and consumes. the schemes the service
    supports and also the base path of the api
    [#538] Removed the models package and collapsed it to the service package
    [#538] Moved interfaces to the root documentation packages
    [#538] This is a superfluous ordering support as most request mappings do not include multiple patterns
    
    In any case, this provides a way to sort the operations within an api
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the api model reader to be factored into plugins
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Added Service Provider interface to be able to process the Response
    
    Response is a new object model to support open api spec. This also adds support for an extensibility model for customizing the Response objects. Added support for intelligent defaults for responses.
    
    (2022)
    Added breadcrumbs to fix the path decorators
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    migrate from guava lists
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Added incubation annotation to the path context
    Made the OperationPath also a PathDecorator
    Added support for uri templates in query params
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Use the new DTOs in the controller
    [#538] Replicated the dto structure
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Added methods to that we don't allow downstream consumers violating demeter
    
    (2684)
    Cleanup documentation and depecations
    
    (3351)
    Improved API around security context specifications
    
    related to #2482
    Cleanup deprecations related to security context
    
    Renamed newer methods on the context
    
    (2482)
    Remove usage of generic wildcard type
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed the build and also fixed depcration warnings
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Fixed javadocs
    
    (2022)
    Added Service Provider interface to be able to process the Response
    
    Response is a new object model to support open api spec. This also adds support for an extensibility model for customizing the Response objects. Added support for intelligent defaults for responses.
    
    (2022)
    Added support for global request parameters
    
    (2022)
    New merging algorithm that can handle cyclic model references.
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Move into package without uppercase letters.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava Predicate
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixed potential NPE when evaluating security contexts
    
    Rather than returning null, we return an empty list when no security references are found.
    
    fixes #2502
    Fixed the association of authorization reference
    
    We need to associate all the security references if possible and override it with the annotation based associations when present
    
    (2194)
    refactor(): remove dependencies to spring-mvc on swagger core
    Operation model builder is available outside Operation Context
    Improvements for projections plugin.
    Initial support for projections.
    Fix for issue 1916 where document level consumes and produces media types are always added to resource level consumes and produces media types. This change won't add those media types anymore but will make sure default media types are set when no document level media types are defined.
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixes the violation of law of demeter
    
    (1196)
    Fixed issue where the global produces/consumes did not propogate
    
    fixes #1115
    Added default empty list behaviour when supplied with null value
    Springfox #845: Configuration for global Request-Parameters.
    Added support for configuration of global operation parameters.
    Added security related contract tests
    
    related to #697
    Feature to support multiple security contexts
    
    Currently each docket only supports one class paths to apply a security
    context around. This fix makes it such that the Docket can be defined with
    multiple security contexts, on for each class of paths
    
    fixes #697
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Replacing Auth* with Security* it seems very confusing the way it is currently named
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    migrated from guava Predicat
    migrate from guava Predicate
    Added predicate to ignore @ApiIgnore on method anotations as well
    
    fixes #703
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    Fixed the build and also fixed depcration warnings
    Added support for Severs
    
    (2022)
    Added Service Provider interface to be able to process the Response
    
    Response is a new object model to support open api spec. This also adds support for an extensibility model for customizing the Response objects. Added support for intelligent defaults for responses.
    
    (2022)
    WIP
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixed documentation/compiler warnings
    
    #1232
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Fixes the violation of law of demeter
    
    (1196)
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    [#538] Removed @ApiParam from RequestMappingContext
    Cleanup documentation and depecations
    
    (3351)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed the build and also fixed depcration warnings
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Added Multipart request parameter builder test
    
    Also fixed all the tests
    
    (2022)
    WIP
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Fixed documentation/compiler warnings
    
    #1232
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Made DescriptionResolver use environment
    
    Instead of having explicit references to property files we use the environment that existin property files can contribute to.
    
    Also refactored packages and class names and fixed the tests accordingly.
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Fixes the violation of law of demeter
    
    (1196)
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages around in swagger-models
    [#538] Fixed the contract tests
    [#538] Removed @ApiParam from RequestMappingContext
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#498] add support for generic type naming strategies
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Refactored the view provider plugin
    
    (2022)
    Moved ViewProviderPlugin
    JsonView is not supported for ModelAttributes
    Renamed projection into a view.
    Optimization of ProjectionProviderPlugin.
    Added projection support for ModelAttribute parameters.
    Improvements for projections plugin.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava Predicate
    migrate from guava lists
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Implementation that supports alternate types
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    Fixed javadoc error. This is already fixed in openapi branch
    Returning cache to life.
    New merging algorithm that can handle cyclic model references.
    Preparations for a new merging algorithm. Fixes .hashCode() collisions
    and Synthetic types.
    Moving logic from TypeNameAdapter to TypeNameExtractor.
    Renamed TypeNameAdjuster to TypeNameAdapter
    Checkstyle fixes
    Type name adjuster registers only complex types.
    class to keeps all conditions for types
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Initial model refactoring
    Added extensibility for creating sythetic models
    
    The motivation for this extesibility point is to create custom models that require a custom serializer and cannot help with a schema by just creating an alternate type rule e.g. HAL serialization format
    
    (2311)
    Updated the context and the registry api
    
    We no longer need the effective key as it is not possible to infer what the library consumers do with the models
    
    (2022)
    Fixed simple type specification
    
    (2022)
    Merging master
    Initial model refactoring
    clean up static imports
    Updated javadocs that are preventing publishing
    
    related to #2504
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Split the plugin into seperate plugins for each of the annotations
    Update documentation
    Added support for overriding dataType via ApiModelProperty annotations
    
    The only stipulation, in order to get this to work is that the dataType
    is a package qualified class name.
    
    Granted that arrays and generic types will not be available for this kind
    of override. To guard from that situation if the type is only replacable
    if the replacement is more specific than the already specified value.
    
    fixes #602 and also addresses #554
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Improved the coverage and bumped up the thresholds
    [#538] Moved packages around in swagger-models
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    Removed unused method
    
    (3373)
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Updated the context and the registry api
    
    We no longer need the effective key as it is not possible to infer what the library consumers do with the models
    
    (2022)
    Added support for effective model
    
    The idea behind effective models is to capture whether a model actually used the discriminators or not. For e.g. if a model is marked with a view discriminator and the dependent model does not have any effect of the discriminator as in the model is isomorphic with respect to the view discriminator then we remove the view from the effective model key. This is useful, in this example, to distinguish when naming a model if it should have `View` as a prefix or not in this case.
    
    (2022)
    Removed source identifier as a required attribute to construct a model
    
    (2022)
    Removed unecessary variable
    
    (2022)
    Returning cache to life.
    Initial model refactoring
    Returning cache to life.
    Enhancement of merging algorithm.
    New merging algorithm that can handle cyclic model references.
    Preparations for a new merging algorithm. Fixes .hashCode() collisions
    and Synthetic types.
    Fix ModelContext constructor visibility.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Updated javadocs that are preventing publishing
    
    related to #2504
    Migrating guava Objects to util Objects
    removing MoreObjects, toString and firstNonNull
    Fixes for typo and names.
    Fixes and coverage.
    Moving logic from TypeNameAdapter to TypeNameExtractor.
    Fixes
    Type name adjuster registers only complex types.
    New ModelContext is now available only through Context builder
    Renamed projection into a view.
    Initial support for projections.
    correct spelling, fix typos
    (issue #1896)
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Cleanup and adjusting access modifiers
    
    (1367)
    Added ignorable types to model context
    
    This is to distinguish between seen types and ignorable types
    
    (1196)
    Fixed caching implementations such that exceptions are handled
    
    Logged the unhandled errrors as a warning and return empty sets and lists or in the
    case of Optionals return absent
    
    fixes #1193
    Updated the tests and removed unused key generators
    
    that were used for caching
    Added caching decorators for the models, model properties and dependencies
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Made parameter use modelRef fully rather than just for the item types
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Refactored the api model reader to be factored into plugins
    [#538] Moved packages around in swagger-models
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#538] More refactoring to remove @ApiModel annotations
    
    Removed @ApiModel from the core processing logic
    
    - Delegated the processing of the annotation to plugins
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    Made model attribute expander a bean
    
    - Also refactored test to be more readable
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Removed TypeResolver creations and delegating to the bean instead
    
    fixes #319
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Added incubating feature for providing path decorators as plugins
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    migrated guava Function
    Adjusted the incubation feature versions in preparation for the release
    Added support for uri templates in query params
    Added incubating feature for providing path decorators as plugins
    Update documentation
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Made the dependencies strictly provided only
    
    This way spring/jackson etc will always take the dependencies that were provided
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Build scripts cleanup
    
    Used the new form for plugin definitions and removed unused script blocks and rearranged the dependencies
    
    (2022)
    Remove duplicated dependency.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Added dependency for validation annotations
    
    (1749)
    Added reflections library for annotation scanning
    
    This is in preparation for scanning for jackson annotations and
    serializers and deserializers.
    
    (1490)
    Upgraded libraries before working on the story
    
    (1621)
    Fixed the artifact based sharing of test code
    Updated the converage numbers
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Adjusted the spring dependencies to provided
    
    Also reverted to using the regular servlet api dependency
    Updated the build files
    Renamed modules and directories
    Renames modules to springdox-
    Updated the build scripts to publish all the publishable modules
    
    Also realized that nothing is pulling in the common module, so updated the configuration beans to import it
    Switched to using swagger 1.5 throughout the library
    WIP
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Added tests for allowable values
    
    - Made the test artificats use the testCompile rather than compile dependencies
    Removed all scala dependencies by group
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Setup scala library excludes
    [#463] Adding javadoc to publication
    Adds a preRelease task to prevent duplicate publishing of released artifact versions.
    Externalizes maven pom filtering and sets groovy-all dependency to test.
    Adds maven provided scope to pom dependencies
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Added support for servlet path mapping
    
    closes #665
    Removed all the WebMvcConfigurerAdapters and created a BeanPostProcessor
    
    that can assist with finding all the relavent ObjectMappers in play. This
    technique is less intrusive than the WebMvcConfigurationAdapter + @EnableWebMvc
    technique because spring-boot assumes that when one of those or an implementation
    of WebMvcConfigurationSupport implementation is in play, it will refuse to particpate
    in the auto configuration.
    
    related to #638
    Remove usage of generic wildcard type
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    Move into package without uppercase letters.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    refactor(): remove dependencies to spring-mvc on swagger core
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Test fixes for Web
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    Improvements for projections plugin.
    Initial support for projections.
    Implemented entity search services documentation
    Improved coverage and upgraded compatibility with boot 1.3.6
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Reworked the caching of the operation reader
    
    to use handrolled caching rather than rely on the aspects
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Add tests to demonstrate using groovy models for services
    
    related to #752
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Filter properties that are marked as ignorable
    
    fixes #752
    Add tests to demonstrate using groovy models for services
    
    related to #752
    Renamed MediaType -> Represenation
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Updated the copyright headers, cleanup, reformatting
    
    and polish!
    
    (1916)
    Add tests for behaviour in MediaTypeReader when no consumes or produces are set in the document and operation context
    Cleanup constructor for MediaTypeReader
    
    (1497)
    Simplified the operation context tests
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    Code cleanup and reformatting
    
    (1773)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Test fixes for Web
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    #773 Don't provide a default values for operation notes/description.
    Feature to support multiple security contexts
    
    Currently each docket only supports one class paths to apply a security
    context around. This fix makes it such that the Docket can be defined with
    multiple security contexts, on for each class of paths
    
    fixes #697
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Upgraded to swagger-core 1.5.3-M1
    
    Also upgraded other libraries. Addressed the security related changes
    in swagger models
    Replacing Auth* with Security* it seems very confusing the way it is currently named
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Made ApiModelReader, ApiDescriptionReader and ApiOperationReader return concrete results
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Removed @ApiParam from RequestMappingContext
    Made model attribute expander a bean
    
    - Also refactored test to be more readable
    [#538] Improved tests for readability
    
    - Chipping away at the test refactoring
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#447] Added support for @ApiOperation(hidden=[true|false])
    
    closes #447
    Supporting constructor params as fields
    - Also fix unnecessary creation of Type Resolver #319
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Initial authorization support
    Adding http response codes and messages to api operations
    Parameter type exclusions. Change path variables to use curly braces as opposed to round braces.
    ApiOperation: using swagger annotation for position
    ApiOperation: using swagger annotation for summary
    First stab at ApiOperations.
    Code reformatting and cleanup
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Returning cache to life.
    Refactoring to fix  NPath Complexity
    Enhancement of merging algorithm.
    Reformatting to code standard
    
    (3014, 3243, 2345, 3211, 3082, 563)
    #3014, #3243, #2345, #3211, #3082
    Fix for #3014, #3243, #2345, #3211, #3082
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    refactor(): remove dependencies to spring-mvc on swagger core
    Fixes for enums.
    Coverage.
    Fixes and coverage.
    Coverage and fixes.
    Code style fixes.
    Fixes for ApiModelReader and additional tests.
    Test fixes for Web
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    Simplified the operation context tests
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Added a failing test for bidirectional recursive types
    Incorporate the @RequestPart changes that were accepted in a pull request back in v1
    Took care of low hanging TODOs
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for default providers per documentation type
    Renamed the items property to modelRef, that way it can be repurposed
    
    for modelling collections as well as regular types. That way we wont need to do gymnastics to
    support swagger 2.0
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Made ApiModelReader, ApiDescriptionReader and ApiOperationReader return concrete results
    [#538] Refactored the api model reader to be factored into plugins
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Remove @ApiModelProperty and introduced a plugin
    
    - Externalized the swagger specific stuff from the model processors
    - Introduced a plugin to handle processing annotations custom to swagger
    - Fixed the mappers
    - Getting contracts to pass
    - Rid of swagger annotations from model processing
    - Successfully removed @ApiModelProperty and introduced a plugin to do that
    [#538] Improved tests for readability
    
    - Chipping away at the test refactoring
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Introduced documentation plugins
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#440] Add support for generating models that are represented in the ApiResponse annotations
    
    closes #440
    Caught up with all the compatible versions
    Revert "Depend on Swagger 1.3.8; Pass false to the ApiDescription constructor"
    Depend on Swagger 1.3.8; Pass false to the ApiDescription constructor
    Fix for abstract base types with open generic type with no constraint
    
    not working correctly. fixes #313. Thanks @jtheuer!
    Fine-grained tests to check if #409 was responsible of #413
    Added test to verify #283
    
    Closes #283 - not reproducible
    Added test to demonstrate issue #378: missing serialize only properties during scan
    
    * Added spec to ApiModelReaderSpec.groovy
    * Added test data model with serialize only property
    * Added resource method using data model as return and request param
    
    Conflicts:
    
            swagger-springmvc/src/test/groovy/com/mangofactory/swagger/readers/ApiModelReaderSpec.groovy
    
    Conflicts:
            swagger-springmvc/src/test/groovy/com/mangofactory/swagger/readers/ApiModelReaderSpec.groovy
    Supporting constructor params as fields
    Added specification covering ApiModelProperty description (issue #374)
    - Also fix unnecessary creation of Type Resolver #319
    Code cleanup
    Removing jackson scala module
    When substituting types the base types should not be included as models
    
    Fixes #254
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    filter by annotation @RequestBody added
    tests Added
    Removing use of swagger ModelUtil to generate models - flaky
    Changing back to non package class names. Now correctly working model schema for sample responses but not puts and posts
    Changing response models and parameter models to fully qualified names
    Improving model support
    Fully qualifying response class names and adding test for annotated models
    Initial model creation using swagger provided scala model parsing
    Updated the multipart test to reflect the real scenario
    
    (3351)
    Fixed the test to have model key
    
    (3351)
    Polished the builders to not expose constructors
    
    (3351)
    Tightened the builder api
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Removed unused class
    
    (2022)
    Converted all builders to be consumer based
    
    (2022)
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Fixes to handle the multipart files better
    
    (2022)
    Changed CompoundModelSpecificationBuilder logic
    
    Rather than check for properties, which may be empty in the case of errors, we check for model key being set. Also add toString and code cleanup
    
    (2022)
    Added model key as a required attribute of a compound model
    
    (2022)
    Removed source identifier as a required attribute to construct a model
    
    (2022)
    Added discriminators to model key
    
    (2022)
    Added Multipart request parameter builder test
    
    Also fixed all the tests
    
    (2022)
    Fixed issue where GET/HEAD/OPTION genering incorrect parms
    
    fixes #3338
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Fixes to handle the multipart files better
    
    (2022)
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    WIP
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Changed the type reader to treat request part as formData
    
    (1965)
    Fixed bug involving complex params in multipart requests
    
    When we receive multipart form variables of complex types we were not rendering the complex types that would come as json payloads in the body. This fixes that. It also addresses handling multiple files in a multipart request.
    
    (1965)
    Fixed parameter type for params with multiple annoations
    
    When a parameter is annotated with a RequestBody and a ModelAttribute we prioritize the model to appear as if it were a request body. When that happens we should not try and process the parameter as a model attribute. When this happens we log a warning and treat it as a body parameter regardless.
    
    (2118)
    Changed the internal represenation of file
    
    This way if we encounter a type called File we resolve to the right type
    
    (1632)
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Improved coverage and upgraded compatibility with boot 1.3.6
    Fixed the tests and the contracts to reflect the improved model attribute support
    Incorporate the @RequestPart changes that were accepted in a pull request back in v1
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    [#538] Removed the asResolved method and inlined all the invocations
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Improved tests for readability
    
    - Chipping away at the test refactoring
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Support for naming strategies
    Unfolding readers.operation.*
    Unfolding readers.operation.*
    #106 Adding file upload support.
    Fix the broken buildi!!
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Changing controller/request mapping groupings to accommodate longer paths
    Parameter type exclusions. Change path variables to use curly braces as opposed to round braces.
    ApiParams - adding data type reader
    Adding ApiParameter support
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Fixed problem where @ApiParam was not working consistently
    
    each attribute was a seperate plugin and was doing it differently for
    each of the attributes. This fixes the performance issue where the same
    matrixed annotation was being queried multiple times for each attribute
    of the annotation.
    
    Consolidated the plugins into one plugin
    
    fixes #388
    Upgraded compiler to java 11
    
    Additional fixes
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Fixes to handle the multipart files better
    
    (2022)
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    WIP
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Added support for resolving placeholders on request params
    
    fixes #1423
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Fixed problem where @ApiParam was not working consistently
    
    each attribute was a seperate plugin and was doing it differently for
    each of the attributes. This fixes the performance issue where the same
    matrixed annotation was being queried multiple times for each attribute
    of the annotation.
    
    Consolidated the plugins into one plugin
    
    fixes #388
    Added test for RequestPart required property ... brings line coverage back up to 97%
    #778 Take @RequestParam(defaultValue) in to account when marking parameter required.
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Fixes the rendering of request bodies that are required by default
    
    fixes #734
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    Support for JDK8's Optional in request headers and parameters
    Support for naming strategies
    Unfolding readers.operation.*
    Unfolding readers.operation.*
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    217 methods with PathVariables shoudl always be required
    Changing controller/request mapping groupings to accommodate longer paths
    Using spring @Request annotations for parameter required and param default
    Adding ApiParameter support
    Read the data type in order of precedence
    
    1. dataTypeClass
    2. dataType using forName
    3. explicit type and format
    
    (3388)
    Tightened the builder api
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Fixes to handle the multipart files better
    
    (2022)
    Added Multipart request parameter builder test
    
    Also fixed all the tests
    
    (2022)
    Changed the Either type to ParameterSpecification
    
    (2022)
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    WIP
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Added support for resolving placeholders on request params
    
    fixes #1423
    Fixed Formatting and modified access modifiers on methods
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Improved coverage and upgraded compatibility with boot 1.3.6
    Uncommented the commented tests
    Mostly working stuff except for generic controllers with base classes
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Removed @ApiParam from RequestMappingContext
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#388] Added support to walk the method declaration graph to find specified annotations
    
    resolves #388
    Support for naming strategies
    Unfolding readers.operation.*
    Unfolding readers.operation.*
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Changing controller/request mapping groupings to accommodate longer paths
    Operation parameter access support
    Adding ApiParameter support
    Reworked the parameter datatype reader
    
    Added the ability to render exploded items for OAS 3. and let the parameter type remain for earlier versions of the spec. Also used the new scalar type convenience to determine scalar types.
    
    This change is to mainly extract one place where we handle request parameter types.
    
    (3377)
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Fixes to handle the multipart files better
    
    (2022)
    Changed the Either type to ParameterSpecification
    
    (2022)
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    WIP
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Added support for aggregating/transforming content parameters to an object
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Fixed expansion of models with alternate types
    
    resolves #2165
    Fix to prevent expansion of request/path params
    
    (2114)
    More fixes
    
    (1829)
    fixing tests
    Relaxed the requirement for getters/setters on expandables
    
    Since we have a check for recursively defined model attributes, there is no need for this check any more.
    
    (1603)
    Improved coverage and upgraded compatibility with boot 1.3.6
    Simplified the operation context tests
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixed the tests and the contracts to reflect the improved model attribute support
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Additional test cases for read only flag
    
    Test case for read only flag in swagger 2, and no impact to swagger 1
    Fix to merge parameter definitions and not duplicate the definitions
    
    fixes #813
    Fixed the plugin dependencies so that its not constructor injected
    
    This is so that circular bean dependencies can give spring a change to wire all the dependencies. In the case of application being run java application
    with a main method, spring boot is unable to wire in the dependencies as it infers the bean creation order.
    
    fixes #702
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    [#538] Reworked the ModelAttributeParameterExpander
    
    Reduced complexity in the class and also uncovered a bug where the
    treeish classes were partially rendering the expansion.
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    Made model attribute expander a bean
    
    - Also refactored test to be more readable
    [#538] Improved tests for readability
    
    - Chipping away at the test refactoring
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#476] Allows specifying alternative types for expanded model attributes
    ModelAttribute expansion for collection extensions
    
    Fixes a bug where ModelAttributeParameterExpander
    was incorrectly handling parameters that were extensions
    of collections. For example, any custom extension of a HashSet should
    be treated as a Set but instead it was being treated as a custom type.
    Check if field is of same type as parent when expanding ModelAttribute
    
    To avoid StackOverflowError when expanding ModelAttributes,
    skip call to `expand` when a treeish field is encountered. #465
    @ModelAttribute Flattening Improvements
    
    When complex objects marked with @ModelAttribute in a controller method
    are flattened into individual parameters:
    1) Only consider properties that have a getter and setter.
    This makes it easy for someone to exclude any parameter
    that is not supposed to be set by a request param or has
    a derived value.
    2) Include properties from parent objects so that we
    don’t alienate coders who have form beans with an
    inheritance hierarchy
    Moved the package for OperationParameterReader and adjusted visibility of classes
    Fixed allowableValues not getting set for enum
    
    Fixed bug where the allowableValues were not getting
    set on enums when the enum property in a container
    object had an ApiParam annotation. Apparently, if you
    declare an ApiParam and don’t put any configuration in
    for the allowableValues, the allowableValues will be a
    blank String instead of null. The bug was that the code
    was checking for a null allowableValues but not for a
    blank String.
    @ModelAttribute expansion must add enum values
    
    @ModelAttribute flattening on controller method params
    will now automatically add allowableValues for enum
    types.
    Fixes and code coverage
    
    Added code coverage and small fixes discovered by
    better testing
    @ModelAttribute Request Params Now Expanded
    
    Spring controller request params that are marked with @ModelAttribute
    will now be flattened. In other words, instead of generating an
    operation model that contains a complex object in the request, the
    operation model will
    appear to have been defined as accepting individual
    simple type request parameters.
    
    Using the @ModelAttribute on a controller method param
    declares that Spring should bind request parameters to
    the model object. As such, the Swagger model should
    really show individual parameters, and not a complex
    object type.
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Supporting custom annotation readers
    Added support to populate parameters from the parameter request conditions
    
    resolves 277
    - Also fix unnecessary creation of Type Resolver #319
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Documenting ignorable method param annotations feature
    changed test to cover feature logic
    Changing controller/request mapping groupings to accommodate longer paths
    Adding http response codes and messages to api operations
    Refactor to use SwaggerGlobalSettings as opposed to adding to map context each time
    Supporting operation parameter primitive data types
    Parameter type exclusions. Change path variables to use curly braces as opposed to round braces.
    Adding ApiParameter support
    Reworked the parameter datatype reader
    
    Added the ability to render exploded items for OAS 3. and let the parameter type remain for earlier versions of the spec. Also used the new scalar type convenience to determine scalar types.
    
    This change is to mainly extract one place where we handle request parameter types.
    
    (3377)
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Added Multipart request parameter builder test
    
    Also fixed all the tests
    
    (2022)
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Merged changes from model enhancements
    WIP
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Test fixes for Web
    Fixed ModelDependencyProvider, ModelProvider ParameterDataTypeReader
    
    Usages of the new enum type determiner did not propogate to tests.
    
    (1829)
    Fix all the TypeNameExtractor constructors
    
    (1829)
    fixing tests
    Changed the internal represenation of file
    
    This way if we encounter a type called File we resolve to the right type
    
    (1632)
    Added better support for BigDecimal & BigInteger
    
    fixes #1432
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Fixed the tests and the contracts to reflect the improved model attribute support
    Added support for list of enums in "serializable parameters"
    
    fixes #1037
    Added support for maps as request params
    Updated the parameter data type inference to prefer string
    
    In certain cases, the path variables and query strings should automatically
    resolve to a string data type, even if the method argument might suggest otherwise.
    This fixes the issue where that is the case.
    Centralized model ref creation and removed dupication
    Broke the cyclic dependency where the TypeNameExtractor depends on schema plugin manager
    
    This way the type name extract is responsible for its own plugins
    
    related to #702
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    Made parameter use modelRef fully rather than just for the item types
    [#538] Implemented the mappers
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Moar tests and increased complexity coverage
    [#538] Improved tests for readability
    
    - Chipping away at the test refactoring
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Support for naming strategies
    Unfolding readers.operation.*
    Unfolding readers.operation.*
    - Also fix unnecessary creation of Type Resolver #319
    #106 Adding file upload support.
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Changing controller/request mapping groupings to accommodate longer paths
    Removing use of swagger ModelUtil to generate models - flaky
    Changing response models and parameter models to fully qualified names
    Refactor to use SwaggerGlobalSettings as opposed to adding to map context each time
    Defaulting param type to string when not a primitive type (until model schema is implemented)
    Supporting operation parameter primitive data types
    Parameter type exclusions. Change path variables to use curly braces as opposed to round braces.
    ApiParams - adding data type reader
    Adding ApiParameter support
    Fixed allowEmpty values being set
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Fixes for enums.
    Test fixes for Web
    Fix all the TypeNameExtractor constructors
    
    (1829)
    fixing tests
    Fixed the conversion of byte[] to string with byte format
    
    (1605)
    General cleanup of unused fields/constructor params
    
    (1605)
    Simplified the operation context tests
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Added support for nested model references
    
    especially useful for 2D arrays
    #801 #810 Add proper support for enums in response values and in schema objects
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Fixes field properties provider issue found while fixing the code coverage build issue
    
    Uncovered the fact that the field model properties provider was working
    incorrectly. This fixes that problem also removed some ignored tests.
    
    related to #752
    Broke the cyclic dependency where the TypeNameExtractor depends on schema plugin manager
    
    This way the type name extract is responsible for its own plugins
    
    related to #702
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    Replaced Opertion responseClass with responseModel
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Improved the coverage and bumped up the thresholds
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Improved tests for readability
    
    - Chipping away at the test refactoring
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#541] Attempt to clean up logic to handle bare enums in the response
    
    All this effort leads me back to why it wasnt supported in the first place! bare enums are not supported in
    swagger spec just like bare List types are not supported.
    
    closes #541
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Fixed the broken build
    [#383 #532] Using alternative generic ResponseEntity and HttpEntity
    [#469] Fixed the arrays inside generics problem
    
    fixes #469
    - Also fix unnecessary creation of Type Resolver #319
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Changing controller/request mapping groupings to accommodate longer paths
    Changing back to non package class names. Now correctly working model schema for sample responses but not puts and posts
    Changing response models and parameter models to fully qualified names
    Improving model support
    Fully qualifying response class names and adding test for annotated models
    Fixes to handle the multipart files better
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Simplified the operation context tests
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Removed the dependence on ResourceGroupingStrategy to get default tags
    
    also the ApiListingReference scanner no longer needs the resource grouping strategy to create
    resource groups
    
    relates to #454
    resolves #919
    Added support for rendering tags defined in @ApiOperation
    
    fixes #675
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Fixed the plugin dependencies so that its not constructor injected
    
    This is so that circular bean dependencies can give spring a change to wire all the dependencies. In the case of application being run java application
    with a main method, spring boot is unable to wire in the dependencies as it infers the bean creation order.
    
    fixes #702
    Always use plugin manager to resolve plugins
    
    Switched the resource group strategy to be looked up form the plugin manager
    
    fixes #707
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    Migrated mixin based test support classes to traits
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Simplified the operation context tests
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    This fixes the case where request params are always getting rendered as
    
    query parameters. Also as an aside this address the problem them the
    Parameter context cannot walk up the context chain to introspect the
    media type or the http method.
    
    Removed deprecated responseClass method in the Operation class as it
    wasnt used. No point releasing a .0 version with deprecated methods!
    
    Replaced string based http methods everywhere with HttpMethod enum
    
    fixes #680
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Fixed the tests
    
    Also fixed a bug where we werent returning the object schema correctly
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    $563
    Code cleanup and reformatting
    
    (1773)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Fixes for enums.
    Fix all the TypeNameExtractor constructors
    
    (1829)
    fixing tests
    General cleanup of unused fields/constructor params
    
    (1605)
    Simplified the operation context tests
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Proper handling of @ResponseStatus with default reason().
    - Javadoc for @ResponseStatus.reason() says that if no value is given, the
      default message from HttpStatus will be used.
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Bumped up the coverage for swagger-common
    Broke the cyclic dependency where the TypeNameExtractor depends on schema plugin manager
    
    This way the type name extract is responsible for its own plugins
    
    related to #702
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    Replaced response class with response model
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Introduced documentation plugins
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#534] Fixes problem of duplicate response messages with the same status code
    
    When operations do not specify a http method, it causes response messages to be duplicated.
    This fix makes the responseMessages a Set rather than a List
    
    fixes #534
    [#438] Reworked the response message readers
    
    - Deprecated class that will go away in a future version
    - Introduced the a configuration in the plugin to turn on or off the
      default response message status codes
    
    fixes #349, #451, #457
    Fixes the leaking response messages for status code 200
    
    fixes #332
    Moved the operation test specs to their rightful home
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Supporting custom annotation readers
    - Also fix unnecessary creation of Type Resolver #319
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Initial model creation using swagger provided scala model parsing
    Adding http response codes and messages to api operations
    Migrated mixin based test support classes to traits
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Simplified the operation context tests
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Added support for numeric facets
    
    (2022)
    Fixed broken tests
    
    (2022)
    Added support for implicit parameter determination
    
    This is so that we can parallelly construct the parameter to the new model. Made the existing OperationBuilderPlugins also infer the RequestParameters
    
    (2022)
    Code Cleanup prior to working on implicit parameters
    
    Standardized builder names,
    finalized variables
    reformatted files
    Migrated mixin based test support classes to traits
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Simplified the operation context tests
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Refactored common code into abstract class
    Fixed test so it does what the description says
    Added check for default parameter value
    Moved OperationParameterRequestConditionReaderSpec to correct package
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    [#538] Implemented the mappers
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Added support to populate parameters from the parameter request conditions
    
    resolves 277
    Fixes to handle the multipart files better
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    add support for deprecated controllers
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Simplified the operation context tests
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    #773 Don't provide a default values for operation notes/description.
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Unfolding readers.operation.*
    Supporting custom annotation readers
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Changing serialization of swagger models to produce correct authorization json format
    Changing controller/request mapping groupings to accommodate longer paths
    Adding ApiParameter support
    Adding deprecated attribute to operations
    Setting operations position to either annotation or next logical position
    ApiOperation: using swagger annotation for position
    Tightened the builder api
    Changed the eumeration facet builders to be consumer driven
    
    The yield api was very confusing and error prone. This makes it a lot cleaner
    
    Also made certain builders consistent without the withXXX prefix.
    
    (2022)
    Fixed allowEmpty values being set
    
    (2022)
    Renamed implements EnumerationFacetBuilder -> EnumerationElementFacetBuilder
    
    (2022)
    Removed source identifier as a required attribute to construct a model
    
    (2022)
    Added Multipart request parameter builder test
    
    Also fixed all the tests
    
    (2022)
    Fixed broken tests
    
    (2022)
    Added a test for the new request parameter model
    
    Also updated the deprecated apis
    (2022)
    Added support for implicit parameter determination
    
    This is so that we can parallelly construct the parameter to the new model. Made the existing OperationBuilderPlugins also infer the RequestParameters
    
    (2022)
    Code Cleanup prior to working on implicit parameters
    
    Standardized builder names,
    finalized variables
    reformatted files
    Migrated mixin based test support classes to traits
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Simplified the operation context tests
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Added support for documenting headers in @RequestMapping
    Refactored common code into abstract class
    Fixed test so it does what the description says
    Added check for default parameter value
    Moved OperationParameterRequestConditionReaderSpec to correct package
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Improved code coverage to re-instate commented tests
    
    Also added new tests to account for plugin related additions'
    [#538] Implemented the mappers
    [#538] Removed the models package and collapsed it to the service package
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Added support to populate parameters from the parameter request conditions
    
    resolves 277
    Migrated mixin based test support classes to traits
    
    (2022)
    add test
    add support for deprecated controllers
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    Code cleanup and reformatting
    
    (1773)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Test fixes for Web
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    add tests for #1880
    Simplified the operation context tests
    Reformatting to fit within 120 chars
    Added support for documenting headers in @RequestMapping
    Added support for rendering tags defined in @ApiOperation
    
    fixes #675
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Fixed an issue where the @Api#description wasnt being honored
    
    closes #373
    Supporting constructor params as fields
    Improvements of #353
    
    @ApiImplicitParams & @ApiImplicitParam are now read on class interfaces
    and superclasses using Spring AnnotationUtils.findAnnotation.
    Adding the posibility of ignoring an entire controller
     - Ingoring all methods of a controller by adding an excluded annotation
        on class level
     - @ApiIgnore can now be specified on Type, but also on Parameter and has
       been added to the defaultIgnorableParameterTypes Set
    Added support to populate parameters from the parameter request conditions
    
    resolves 277
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Made JsonSupport a trait
    
    Also code-reformatting
    (1694)
    Modified the controller tests to be unit tests
    
    Since the gradle builds were timing out, this makes it easier and quicker to test rather than loading up the spring context.
    
    related to #1621
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Migrated mixin based test support classes to traits
    
    (2022)
    Replaced WebMvc/WebFlux path providers with DefaultPathProvider
    
    (1773)
    Renamed AbstractPathProvider
    
    This is so that we can eliminate the web mvc/flux path providers which are essentially the same
    
    (1773)
    Removed deprecated api in PathProvider
    
    Also simplified the usages as a result of no longer needing servlet context to resolve the paths
    
    (1773)
    Code cleanup and reformatting
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Moved the path related classes to the path package
    Renamed method to reflect what its doing
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#423] Removes any potential duplicate forward slashes
    Fix the relative swagger path provider to use the context path as the root
    
    fixes #411
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Making path provider a template and moving more path related logic into SwaggerPathProvider
    Providing a a default and relative swagger path provider
    Migrated mixin based test support classes to traits
    
    (2022)
    Replaced WebMvc/WebFlux path providers with DefaultPathProvider
    
    (1773)
    Removed deprecated api in PathProvider
    
    Also simplified the usages as a result of no longer needing servlet context to resolve the paths
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Moved the path related classes to the path package
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    Fix the relative swagger path provider to use the context path as the root
    
    fixes #411
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Replaced WebMvc/WebFlux path providers with DefaultPathProvider
    
    (1773)
    Removed deprecated api in PathProvider
    
    Also simplified the usages as a result of no longer needing servlet context to resolve the paths
    
    (1773)
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Refactored ApiListingReferenceScanner to be a post processor
    
    That way all the properties needed for it are infered after we create
    the ApiListing itself and not the other way aroundi.
    Fixed all the tests after refactoring the ApiListingReferenceScanner
    Added a test to verify the behavior when sorting dockets
    
    fixes #855
    Moved the path related classes to the path package
    Refactored the bootstrapper to take in a RequestHandlerProvider
    
    This is a step forward to support different request handler providers. It is also
    incidentally used to create a predictable ordering of request handlers that are
    processed by the bootstrapper
    
    related to #682, #825
    Renamed handlerMappings requestHandlers
    
    related to #682, #825
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Moved interfaces to the root documentation packages
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#538] Improved tests for readability
    
    - Chipping away at the test refactoring
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Introduced documentation plugins
    [#538] Renamed servicemodel to service.model
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Cleanup and improved test coverage
    [#434] Added support for filtering operations based on include patterns
    
    fixex #434
    Adding the posibility of ignoring an entire controller
     - Ingoring all methods of a controller by adding an excluded annotation
        on class level
     - @ApiIgnore can now be specified on Type, but also on Parameter and has
       been added to the defaultIgnorableParameterTypes Set
    #317 Bug with ResourceGroup position
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Making path provider a template and moving more path related logic into SwaggerPathProvider
    Providing a a default and relative swagger path provider
    Renaming path provider to absolute. Fixing typo in modelutils
    #282 Adding back absolute urls for resource listings
    When substituting types the base types should not be included as models
    
    Fixes #254
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    #208 Allowing relative urls
    Simplifying resource grouping strategy
    Changing controller/request mapping groupings to accommodate longer paths
    Changing jackson version. Setting correct paths on ApiDescriptions. Overriding api group with @Api annotation
    Adding ability to skip url path portions for api groupings
    Changed to absolute uri's in api declarations and resources
    Changing paths on ApiListingReference to be relative to the swagger group to work with swagger UI.
    Changed to use regex path matcher instead of ant.
    Cleanup
    Introduced Swagger cache to simplify configuration.
    Changing base and resource uris. Base needs to be absolute for swagger ui and swagger code gen.
    Added ApiDescription to ApiListingScanner. Added support for multiple swagger resource listings from the same project. Some refactoring and cleanup.
    Adding support for media types. Added ApiListing scanner to generate swagger ApiListings.
    Adding inclusion patterns on listing scanner - defaults to all paths
    Adding spring config. Adding scala support to jackson mapper.
    Increasing coverage and general cleanup. Added support for ignorable annotations on controller methods.
    Added default swagger controller. Resolved more dependency issues and moved to correct scala version.
    Migrated mixin based test support classes to traits
    
    (2022)
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Test fixes for Web
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Updated the tests and removed unused key generators
    
    that were used for caching
    Migrated mixin based test support classes to traits
    
    (2022)
    Replaced WebMvc/WebFlux path providers with DefaultPathProvider
    
    (1773)
    Removed deprecated api in PathProvider
    
    Also simplified the usages as a result of no longer needing servlet context to resolve the paths
    
    (1773)
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Removed redundant escape sequence
    
    And added an additional test
    
    (2177)
    Change regex in Paths.java
    
    resolve #2177
    add new test cases in ApiDescriptionReaderSpec.groovy
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Added tests around exception handling
    
    (1983)
    Polish
    
    Fixed formatting and error message
    
    (1983)
    Test fixes for Web
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Fix for @ApiOperation(hidden=true) not being honored
    
    fixes #995
    Fix handling of RequestMapping values that include regex with quantifier(s).
    
    Fixes #991
    Added ApiDescriptionLookup to help with hypermedia support going forward
    
    The idea is that once this infrastructure is in place, when can then do interesting things
    with spring-hateoas to provide access to ControllerLinkBuilder implementations to access
    api descriptions based on controller method
    Fixed the bug where the caching was incorrect for operations without
    
    specific http method
    - Renamed the configuration class
    Moved the path related classes to the path package
    Made the sanitizer a path decorator
    Added support for uri templates in query params
    Added incubating feature for providing path decorators as plugins
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Removed the models package and collapsed it to the service package
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Address a few low hanging todos
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Sorted api listing and api listing references in the models
    
    - Also applied defaultIfEmpty to builders
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Made ApiModelReader, ApiDescriptionReader and ApiOperationReader return concrete results
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Improved tests for readability
    
    - Chipping away at the test refactoring
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#434] Added support for filtering operations based on include patterns
    
    fixex #434
    test that fails when more than one parameter
    
    created test that fails when more than ONE parameter of type foo:{foo}
    Supporting custom annotation readers
    Supporting custom annotation readers
    - Also fix unnecessary creation of Type Resolver #319
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Providing a a default and relative swagger path provider
    Moving sanitize request mapping out to the only class that uses it
    Renaming path provider to absolute. Fixing typo in modelutils
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Simplifying resource grouping strategy
    Changing jackson version. Setting correct paths on ApiDescriptions. Overriding api group with @Api annotation
    Adding http response codes and messages to api operations
    Parameter type exclusions. Change path variables to use curly braces as opposed to round braces.
    Introduced Swagger cache to simplify configuration.
    Changing base and resource uris. Base needs to be absolute for swagger ui and swagger code gen.
    First stab at ApiOperations.
    Migrated mixin based test support classes to traits
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Added ApiDescriptionLookup to help with hypermedia support going forward
    
    The idea is that once this infrastructure is in place, when can then do interesting things
    with spring-hateoas to provide access to ControllerLinkBuilder implementations to access
    api descriptions based on controller method
    Moved the path related classes to the path package
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    Fix the relative swagger path provider to use the context path as the root
    
    fixes #411
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Migrated mixin based test support classes to traits
    
    (2022)
    Replaced WebMvc/WebFlux path providers with DefaultPathProvider
    
    (1773)
    Renamed AbstractPathProvider
    
    This is so that we can eliminate the web mvc/flux path providers which are essentially the same
    
    (1773)
    Removed deprecated api in PathProvider
    
    Also simplified the usages as a result of no longer needing servlet context to resolve the paths
    
    (1773)
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    Code cleanup and reformatting
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Test fixes for Web
    tests were failing under windows because of line feed characters
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    Fixed the ordering of the elements to be stable
    
    (1623)
    Reformatted test to match code style
    Fix test failures on windows (issue with newlines /r)
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Refactored ApiListingReferenceScanner to be a post processor
    
    That way all the properties needed for it are infered after we create
    the ApiListing itself and not the other way aroundi.
    Fixed all the tests after refactoring the ApiListingReferenceScanner
    Moved the path related classes to the path package
    Made sure that the api listing references are not duplicated as a result
    
    of having listings span multiple controllers.
    
    related to #727
    Upgraded to swagger-core 1.5.3-M1
    
    Also upgraded other libraries. Addressed the security related changes
    in swagger models
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed AuthorizationType to have a name property that represents the configuration name of the authorization scheme
    Renamed related classes to Documentation*
    Renamed Group to Documentation
    [#538] Removed the models package and collapsed it to the service package
    [#538] Improved test coverage in mangodocs-core
    
    Added test for ApiDescriptionBuilder
    Tests for ApiListing and the builder
    Tests for ApiInfoBuilder and AuthorizationBuilder
    Added test For AuthorizationCodeGrantBuilder, AuthorizationScopeBuilder and BuilderDefaults
    Added GroupBuilder tests
    Added tests fro ImplicitGrant and LoginEndpoint
    Tests for ModelBuilder
    Added tests for ModelPropertyBuilder
    Added test for ParameterBuilder and OAuthBuilder
    Added Tests for ResourceListingBuilder and ResponseMessageBuilder
    Added TokenEndpointBuilder and TokenRequestEndpointBuilder tests
    More test coverage improvements with regards to Operations
    - Also moved the WildcardTypeSpec closer to core'
    Moved the resource group test closer to the module it is defined in
    Renamed RequestMappingEvaluator
    Made the RequestMappingEvaluator an interface and pushed the implementation to a subclass
    Removed the idea of api-prefix from the PathProvider class
    Make PathProvider an interface
    Renamed specs to avoid name colisions
    Passed coverage!
    
    Rearranged methods
    
    Upped the coverage
    
    Coverage back to normal
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Sorted api listing and api listing references in the models
    
    - Also applied defaultIfEmpty to builders
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Improved tests for readability
    
    - Chipping away at the test refactoring
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Introduced documentation plugins
    [#538] Use the new DTOs in the controller
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#434] Added support for filtering operations based on include patterns
    
    fixex #434
    the property providers use the naming strategy in both bean properties as well as fields
    
    closes #413
    #343 Sets swagger resourcePath on ApiListings
    Bean properties now support the property names as expected by the jackson serialization runtime
    
    Closes #400
    Support for naming strategies
    Supporting custom annotation readers
    Supporting custom annotation readers
    Changes to accept the pr
    
    - Moved Accessor to the right package and changed visibilityi.
    - Changed the ObjectMapper back to how it was currently being set in a
      bean PostConstruct.
    - Renamed PropertyUtils to BeanPropertyDefinitions to match guava
      convention
    - Changed Qualifier to default for the ModepPropertiesProvider bean
    - Re-instated the JacksonSwaggerSupport foo to set the ObjectMapper in
      the PostConstruct
    Supporting constructor params as fields
    Accounts for aliases as a result of JsonProperty annotation
    
    Fixes #320
    Using setter based autowiring on DefaultModelPropertyProvider to avoid BeanCurrentlyInCreationException/circular dependency.
    Fix to support for alternates in model propertiesi
    
    fixes #315
    - Also fix unnecessary creation of Type Resolver #319
    #317 Bug with ResourceGroup position
    #317 Positioning ResourceListing based on @Api.position()
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Providing a a default and relative swagger path provider
    Renaming path provider to absolute. Fixing typo in modelutils
    #282 Adding back absolute urls for resource listings
    #282 Reinstate swagger group concept
    Autowired the ObjectMapper ...
    
    Set up components that have the object mapper wired in as a dependency
    
    fixes #272
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Simplifying resource grouping strategy
    Changing controller/request mapping groupings to accommodate longer paths
    Upgrade to swagger core 3.2
    Testing accessors to fix coverage
    Adding http response codes and messages to api operations
    Changed to absolute uri's in api declarations and resources
    Changing paths on ApiListingReference to be relative to the swagger group to work with swagger UI.
    Introduced Swagger cache to simplify configuration.
    Changing base and resource uris. Base needs to be absolute for swagger ui and swagger code gen.
    Added ApiDescription to ApiListingScanner. Added support for multiple swagger resource listings from the same project. Some refactoring and cleanup.
    Adding support for media types. Added ApiListing scanner to generate swagger ApiListings.
    Adding spring config. Adding scala support to jackson mapper.
    Increasing coverage and general cleanup. Added support for ignorable annotations on controller methods.
    Added default swagger controller. Resolved more dependency issues and moved to correct scala version.
    Added default swagger controller. Resolved more dependency issues and moved to correct scala version.
    Initial ApiResource Listing. Checkstyle to fail during test phase
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Added resource path provider
    
    This is responsible for extracting the resource path given a resource group
    
    (1943)
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Wired in the processing of models using ApiModelReader and the registries
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    Restore testing.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    refactor(): remove dependencies to spring-mvc on swagger core
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Test fixes for Web
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    Reformatting
    
    (1943)
    Reworked ApiListingScanner to use the ResourcePathProvider
    
    Also fixed the tests
    
    (1943)
    Reformatting
    
    (1943)
    add tests for #1880
    Updated the copyright notice dates
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    #675 Initial approach to adding @Api(description) to the tags output
    Fixes the problem when multiple api listings are associated with the same api declaration
    
    Swagger 1.2 does not support this model, hacked to only return the first api listing. This needs
    to be fixed to merge the api listings by group, but thats for a different commit. This only
    fixes the problem effectively for 2.0 of the spec, and spec 1.2 is no worse than it was before this
    fix.
    
    related to #727
    Feature to support multiple security contexts
    
    Currently each docket only supports one class paths to apply a security
    context around. This fix makes it such that the Docket can be defined with
    multiple security contexts, on for each class of paths
    
    fixes #697
    Renamed Authorization to SecurityReference since its was a little confusing
    
    what the difference was between authorization and authorization type. Plus its
    more appropriate to refer to it as security rather than authorization
    
    relates to #647
    Replacing Auth* with Security* it seems very confusing the way it is currently named
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Add a top level documentation object
    
    Documentation object is a service level model, that now plays host to
    media types the service produces and consumes. the schemes the service
    supports and also the base path of the api
    [#538] Removed the models package and collapsed it to the service package
    [#538] Moved interfaces to the root documentation packages
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Made ApiModelReader, ApiDescriptionReader and ApiOperationReader return concrete results
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Fixed the contract tests
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#538] Improved tests for readability
    
    - Chipping away at the test refactoring
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Introduced documentation plugins
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    [#434] Added support for filtering operations based on include patterns
    
    fixex #434
    [#423] Removes any potential duplicate forward slashes
    #343 Sets swagger resourcePath on ApiListings
    Supporting custom annotation readers
    Supporting custom annotation readers
    Supporting constructor params as fields
    - Also fix unnecessary creation of Type Resolver #319
    Defaulting to relative path provider. Reverting to class or api annotation grouping strategy. Complying with swagger spec for relative and absolute urls.
    Renaming path provider to absolute. Fixing typo in modelutils
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Changing serialization of swagger models to produce correct authorization json format
    Simplifying resource grouping strategy
    Adding jackson serializer to deserialize swagger Authorization - again different to model
    Adding auth to top level resource listing and to each operation
    Initial authorization support
    Changing jackson version. Setting correct paths on ApiDescriptions. Overriding api group with @Api annotation
    Improving model support
    Adding http response codes and messages to api operations
    Introduced Swagger cache to simplify configuration.
    Changing base and resource uris. Base needs to be absolute for swagger ui and swagger code gen.
    Added ApiDescription to ApiListingScanner. Added support for multiple swagger resource listings from the same project. Some refactoring and cleanup.
    Adding support for media types. Added ApiListing scanner to generate swagger ApiListings.
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    Cleanup dead code
    
    (1621)
    Refactored the bootstrapper to take in a RequestHandlerProvider
    
    This is a step forward to support different request handler providers. It is also
    incidentally used to create a predictable ordering of request handlers that are
    processed by the bootstrapper
    
    related to #682, #825
    Cleaned up TODOs and removed deprecated APIs
    
    (2022)
    Fixed all the simple parameters (non content)
    
    All the plugins now automatically test for the alternate representation
    
    (2022)
    Added RequestParameterBuilder to the ParameterContext
    
    (2022)
    Migrated mixin based test support classes to traits
    
    (2022)
    Added documentationType in DocPluginManager tests
    Replaced WebMvc/WebFlux path providers with DefaultPathProvider
    
    (1773)
    Removed deprecated api in PathProvider
    
    Also simplified the usages as a result of no longer needing servlet context to resolve the paths
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Moved the path related classes to the path package
    Made the OperationPath also a PathDecorator
    Added support for uri templates in query params
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    [#667] Allowing for Dockets with a null groupName
    Ensure that the group names specified in Dockets are unique
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Renamed build to builders
    [#538] Flattened the builder package
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    Code cleanup and reformatting
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    refactor(): remove dependencies to spring-mvc on swagger core
    Fixed the doHashCode methods and added tests
    
    (1367)
    Added tests around path combination of same operations
    
    (1367)
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    refactor(): remove dependencies to spring-mvc on swagger core
    Added tests around path combination of same operations
    
    (1367)
    Upgraded compiler to java 11
    
    Additional fixes
    Fixes to handle the multipart files better
    
    (2022)
    Replaced WebMvc/WebFlux path providers with DefaultPathProvider
    
    (1773)
    Removed deprecated api in PathProvider
    
    Also simplified the usages as a result of no longer needing servlet context to resolve the paths
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    Fix some of the tests after changes.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updating tests
    Updated tests and contracts to account for the new rules
    add native support for jdk8 jsr310 date types
    
    Fix #1544
    Added support for vendor extensions on Parameters and ResponseModels
    
    fixes #1137
    Fixed the tests that break when building with jdk 8
    
    fixes #1332
    Revert "fixed tests"
    
    This reverts commit 79d280c9b4474c70086d782866814d0c1c4c9d82.
    fixed tests
    Added coverage for un-tested tags and globalOperationsParameters options
    Added native support for Optional types
    
    resolves #1199
    Added support for additional models
    Added support for ResponseHeaders
    
    fixes #937
    Added support for Contact as a first class object
    Added support for nested model references
    
    especially useful for 2D arrays
    Added model ref interface
    
    Also added two dimensional array substitution support
    add unit tests
    Moved the path related classes to the path package
    Refactored the bootstrapper to take in a RequestHandlerProvider
    
    This is a step forward to support different request handler providers. It is also
    incidentally used to create a predictable ordering of request handlers that are
    processed by the bootstrapper
    
    related to #682, #825
    Fixes the default rules such that Map<String, String> is not rendered as
    
    an Object. fixes #747
    Feature to support multiple security contexts
    
    Currently each docket only supports one class paths to apply a security
    context around. This fix makes it such that the Docket can be defined with
    multiple security contexts, on for each class of paths
    
    fixes #697
    Renamed AuthorizationType to SecurityScheme
    
    relates to #647
    Replacing Auth* with Security* it seems very confusing the way it is currently named
    
    relates to #647
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Work to replace the include expression with predicates
    
    closes #613
    [#613] Renamed DocumentConfigurer to Docket
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for default providers per documentation type
    [#538] Removed the models package and collapsed it to the service package
    [#538] Moved interfaces to the root documentation packages
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Refactored the tests by moving DocumentationContextSpec to the plugins package
    [#538] Sorted api listing and api listing references in the models
    
    - Also applied defaultIfEmpty to builders
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#538] Moved packages and classes around
    
    Just a refactoring task to move classes around for mainly two reasons
    1. Make it easy to seperate modules
    2. Isolate the packages that can participate in component scanning
    
    - Renamed PluginsManager
    - Moved packages around
    - Moved test packages as well'
    - Removed groovy source folders from sources root
    - Renamed plugins folder
    [#538] Worked to remove SwagggerGlobalSettings and make the invariants beans
    
    - With this change the role of the plugin is inverted. It now serves as
      the only user supplied invariant and everything else runs throught the
      model parsing engine.
    [#538] Introduced documentation plugins
    Upgraded dependencies
    [#539] Prevents excludeAnnotations from modifying the defaults in SpringSwaggerConfig
    [#539] Prevents excludeAnnotations from modifying the defaults in SpringSwaggerConfig
    [#538] Renamed servicemodel to service.model
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#538] Moved the service model to a top level package
    [#538] Migrating package from dto to servicemodel
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Fixed the broken build
    [#383 #532] Using alternative generic ResponseEntity and HttpEntity
    [#438] Reworked the response message readers
    
    - Deprecated class that will go away in a future version
    - Introduced the a configuration in the plugin to turn on or off the
      default response message status codes
    
    fixes #349, #451, #457
    Supporting constructor params as fields
    #317 Providing a means to sort the ApiDescriptions within an ApiListing.
    - Also fix unnecessary creation of Type Resolver #319
    Added test for directModelSubstitute(..)
    Add some continence methods for model substitution rules. Added some javadoc to SwaggerSpringMvcPlugin.java.
    #317 Positioning ResourceListing based on @Api.position()
    Allowing configuration of apiVersion string.
    Added apiInfo method to plugin. Updating documentation.
    Add plugin and adapter to simplify setup.
    Added default modelProvider to base spring configuration.
    Migrated mixin based test support classes to traits
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Fixes for test. Renamed TypeNameIndexingAdjuster to
    TypeNameIndexingAdapter
    Test fixes for Web
    Fix all the TypeNameExtractor constructors
    
    (1829)
    fixing tests
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Updated the test to use the ignorable types as a parameter to model context
    
    (1196)
    Mostly working stuff except for generic controllers with base classes
    Broke the cyclic dependency where the TypeNameExtractor depends on schema plugin manager
    
    This way the type name extract is responsible for its own plugins
    
    related to #702
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] More work towards increasing coverage for mangodocs-spring-web module
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Adjusted the configuration using the Conditional annotations
    
    (3366)
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Consolidated the annotations
    
    (2022)
    '
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    Update tests with new factory for path provider. Remove unused code. Update headers with correct year.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    refactor(): remove dependencies to spring-mvc on swagger core
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    Added projection support for ModelAttribute parameters.
    Improvements for projections plugin.
    Removed the property sources configurer yay!
    
    Since we now resolve imperatively it is no longer required to have this defined. Also remove the *web package from component scan so that we can manually register the two controllers using new PropertySourcedRequestMappingHandler.
    
    (1770)
    Enabled the api listing scanner plugin
    
    Without enabling the plugin in the plugin registry, the beans will not be registered with the plugin registry. Which explains why it was not getting picked up. Interestingly this is also a great example of how one can register fake operations, not represented/backed by the application.
    
    fixes #1767
    Fixed the property resolution regression in spring boot
    
    fixes #1698
    Added DescriptionResolver bean to the configuration
    Namespaced the property sources using placeholder prefix
    
    Instead of the default `${` we use `$SPRINGFOX{` this way the configurer does not interfere with library users.
    
    (1621)
    Added conditional PropertyPlaceholderConfigurer bean
    
    Verified that this solution also supports spring 3.2.x and up
    
    fixes #1514
    Removed the aspecj autoproxy requirement
    
    `@EnableAspectJAutoProxy` was no longer required since we're not using
    it to generate caching proxies.
    
    related to #1055
    related to #927, #921, #938 (spring 3.x support)
    related to #939
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Fixed the bug where the caching was incorrect for operations without
    
    specific http method
    - Renamed the configuration class
    Added decorator for query parameters
    Added incubating feature for providing path decorators as plugins
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Extracted common logic to setup the JsonSerializer
    
    Also made the JsonSerialzer a component, that way every controller does not need to do the object mapper setup boilerplate code.
    
    related to #701
    Removed all the WebMvcConfigurerAdapters and created a BeanPostProcessor
    
    that can assist with finding all the relavent ObjectMappers in play. This
    technique is less intrusive than the WebMvcConfigurationAdapter + @EnableWebMvc
    technique because spring-boot assumes that when one of those or an implementation
    of WebMvcConfigurationSupport implementation is in play, it will refuse to particpate
    in the auto configuration.
    
    related to #638
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Reformatting
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Fixed the object mapper configurer use the correct instance
    
    This is a naive fix to the problem. Simply reversing the order in which the message processors are
    iterated over will fix 80% of the reported issues with not using the correct object mapper.
    
    fixes #1051, #1140
    Removed all the WebMvcConfigurerAdapters and created a BeanPostProcessor
    
    that can assist with finding all the relavent ObjectMappers in play. This
    technique is less intrusive than the WebMvcConfigurationAdapter + @EnableWebMvc
    technique because spring-boot assumes that when one of those or an implementation
    of WebMvcConfigurationSupport implementation is in play, it will refuse to particpate
    in the auto configuration.
    
    related to #638
    Remove usage of generic wildcard type
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    Redid the toString with StringJoiner
    
    (1773)
    Reformatting
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    Clean up the RequestMappingInfo todo. Remove unused class.
    Move into package without uppercase letters.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    refactor(): remove dependencies to spring-mvc on swagger core
    Added additional logging around duplicate detection
    
    Unable to reproduce the reported issue. Added additional logging around duplicates.
    
    resolves #1894
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    Improvements for projections plugin.
    Optimise HandlerMethodResolver.getMemberMethods
    
    Time of generating documentation greatly increases with number
    of methods in controller. This fixes the problem by caching
    the resolved methods for already processed controller classes.
    Initial support for projections.
    Implemented entity search services documentation
    Improved coverage and upgraded compatibility with boot 1.3.6
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Moved the web mvc request handler to the right module
    Added subclass for webmvc request handler mapping
    Added a failing test for bidirectional recursive types
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Reformatting
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    Clean up the RequestMappingInfo todo. Remove unused class.
    Move into package without uppercase letters.
    fix checkstyle
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    refactor(): remove dependencies to spring-mvc on swagger core
    Added conditional support to enable beans in non-boot environments
    
    (3366)
    Added conditional support to enable beans in non-boot environments
    
    (3366)
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    Cleaned up variable names and reformatted
    
    Also refactored equals/hashcode
    
    (1773)
    Fix code quality issues.
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    Use unqualified classes.
    Move into package without uppercase letters.
    fix combine computation to not combine if two patterns are equals
    fix checkstyle
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    refactor(): remove dependencies to spring-mvc on swagger core
    Cleaned up variable names and reformatted
    
    Also refactored equals/hashcode
    
    (1773)
    Replaced loops with Java8 idioms
    
    Cleaned up unescessary casting
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    Move into package without uppercase letters.
    Add missing equals and hashCode.
    fix checkstyle
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    refactor(): remove dependencies to spring-mvc on swagger core
    Adjusted the configuration using the Conditional annotations
    
    (3366)
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Reformatted the code to match style guide
    
    Indents are 2 spaces and we splat static imports and dont splat regular imports (Should probably advertise this better)
    
    (2793)
    fixed whitespace and removed commented out import in build.gradle
    first version which documents parameters for spring-integration webmvc, removed petstore and petstore-tests
    Consolidated the ROOT constant
    
    (1773)
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    Replaced loops with Java8 idioms
    
    Cleaned up unescessary casting
    
    (1773)
    Reformatting
    
    (1773)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    Cleanup and adjusting access modifiers
    
    (1367)
    Moved the web mvc request handler to the right module
    Added subclass for webmvc request handler mapping
    Added a builder for request handlers
    Fixed the issue with the cache key generator algorithm in addition
    
    to sorting the RequestHandlers to facilitate a predictable ordering of operations
    
    related to #682, #825
    Refactored the bootstrapper to take in a RequestHandlerProvider
    
    This is a step forward to support different request handler providers. It is also
    incidentally used to create a predictable ordering of request handlers that are
    processed by the bootstrapper
    
    related to #682, #825
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Build scripts cleanup
    
    Used the new form for plugin definitions and removed unused script blocks and rearranged the dependencies
    
    (2022)
    Fix dependencies and exclusions.
    Upgrade to java 8
    
    (2516)
    updating java to 1.8 and guava version that support 1.8
    #1773 springfox: spring-boot:2.0.0.RELEASE with other dependencies upgraded to match those in boot
    Moved the petstore docket configuration to its own module
    
    Demonstrates that the issue 1890 is not reproducable.
    
    fixes #1890
    Added staticdocs module
    - Removed a bunch of gradle apply language plugins
    - Reverted gralde idea copyright generation from copyright file
    Publishing petstore api
    Adjusted the spring dependencies to provided
    
    Also reverted to using the regular servlet api dependency
    Renamed modules and directories
    Implementing pre-release tasks
    Renames modules to springdox-
    Updated the build scripts to publish all the publishable modules
    
    Also realized that nothing is pulling in the common module, so updated the configuration beans to import it
    Added support to query pets repository
    Switched to using swagger 1.5 throughout the library
    [#538] Adds petstore module in preparation for swagger 2.0
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Renamed modules and directories
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Adds gradle support - checkstyle, jacoco code coverage, maven publishig.
    
    Adds checkstyle code quality checks
    
    Adds jacoco test coverage plugin
    
    Adds publishing (artifactory)
    
    Fails build on jacoco coverage failures
    
    Ignoring more idea files
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrated from guava Predicat
    migrate from guava Predicate
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Moved the petstore docket configuration to its own module
    
    Demonstrates that the issue 1890 is not reproducable.
    
    fixes #1890
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Fixed checkstyle violations and code cleanup
    
    (2022)
    migrate from guava Predicate
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    Migrating guava Objects to util Objects
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Adjusted the expected swagger.json based on the example in petstore.swagger.io
    Added support to query pets repository
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed the issue where the parameter requiredness was incorrect
    
    Delegates to the base jackson property to tell us if a parameter property is required or not
    
    fixes #1727
    Added test to prove that 2.0 works for @JsonCreator
    
    annotated factory methods on models
    
    closes #653
    Updated models to verify an issue with @JsonCreator annotation
    
    fixes #586
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Fixed the build and also fixed depcration warnings
    Fixed checkstyle violations and code cleanup
    
    (2022)
    correct spelling, fix typos
    (issue #1896)
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds bare contract spec for swagger 2.0
    - Uses swagger groups to split petstore api from out test case apis
    [#538] Adds petstore module in preparation for swagger 2.0
    Fixed checkstyle violations and code cleanup
    
    (2022)
    correct spelling, fix typos
    (issue #1896)
    Made headers collection a sortable map
    
    Because plain hashmaps dont guarantee order we use a tree map to preseve the ordering based on header key.
    
    (1651)
    Fix for @ApiOperation(hidden=true) not being honored
    
    fixes #995
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated models to verify an issue with @JsonCreator annotation
    
    fixes #586
    Took care of low hanging TODOs
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support for rendering security definitions and authorizations for operations
    Added support to query pets repository
    [#538] Adds petstore module in preparation for swagger 2.0
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Fixed checkstyle violations and code cleanup
    
    (2022)
    correct spelling, fix typos
    (issue #1896)
    Fixes rendering of expanding List of scalar types including enums
    
    fixed #969 and reverted fix for #1037
    Fixed behavior on operations differing only by ParamsConditionRequest
    
    When operations only differ by parmams condition with set value e.g. a=1 and a=2 then the operations were collapsed
    
    fixes #1114
    Added support for rendering tags defined in @ApiOperation
    
    fixes #675
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava Predicate
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    Migraiting from FluentIterable
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added support to query pets repository
    [#538] Adds petstore module in preparation for swagger 2.0
    Made the dependencies strictly provided only
    
    This way spring/jackson etc will always take the dependencies that were provided
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Build scripts cleanup
    
    Used the new form for plugin definitions and removed unused script blocks and rearranged the dependencies
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Upgraded libraries before working on the story
    
    (1621)
    Implemented entity level resource documentation
    Added initial configuration support for spring-data-rest
    Updated swagger-ui version
    
    Also updated libraries
    Upgraded the libraries especially the contract tests
    Re-organized project ordering
    Updated the converage numbers
    Integrated the bean validator library into publishables
    Moved the directories
    Added Bean Validations API support for @NotNull, @Min, @Max, @Size
    
    https://github.com/springfox/springfox/issues/356
    Added staticdocs module
    - Removed a bunch of gradle apply language plugins
    - Reverted gralde idea copyright generation from copyright file
    Publishing petstore api
    Adjusted the spring dependencies to provided
    
    Also reverted to using the regular servlet api dependency
    Renamed modules and directories
    Implementing pre-release tasks
    Renames modules to springdox-
    Updated the build scripts to publish all the publishable modules
    
    Also realized that nothing is pulling in the common module, so updated the configuration beans to import it
    Added support to query pets repository
    Switched to using swagger 1.5 throughout the library
    [#538] Adds petstore module in preparation for swagger 2.0
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    #2932 - Spring HATEOAS 1.0.0.RELEASE
    Re-arranged private methods below more visible methods
    
    Also adjusted visibility on utility class methods
    
    (2273)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    migrate from guava Cache and removed Guava
    Fixed issue with incorrect naming of operations
    
    (2025)
    Refactored to seperate extractors
    
    (1623)
    Standardized the builder method names
    
    (2022)
    Renamed enum values
    
    (2273)
    Renamed withParameter -> withParameterType
    
    Also simplified the case statement
    
    (2273)
    Renamed factory methods for specification actions
    
    (2273)
    Clean up to remove un-needed finals
    
    Also used method references where possible
    
    (2273)
    Optimized imports and reformatted code
    
    (2273)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    spring-data-rest: DRY it up and reduce Guava
    #1773 Initial dependency upgrade along with API compatibility modifications
    Fixed issue with incorrect naming of operations
    
    (2025)
    Seperated out the individual association extractors
    
    (1623)
    Standardized the builder method names
    
    (2022)
    Renamed withParameter -> withParameterType
    
    Also simplified the case statement
    
    (2273)
    Renamed factory methods for specification actions
    
    (2273)
    Clean up to remove un-needed finals
    
    Also used method references where possible
    
    (2273)
    Optimized imports and reformatted code
    
    (2273)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    fix for spring data rest 3.0.5.RELEASE while maintaining backward compartibility
    spring-data-rest: DRY it up and reduce Guava
    #1773 Initial dependency upgrade along with API compatibility modifications
    Renamed RequestHandlerExtractor -> EntityOperationsExtractor
    
    (1623)
    Refactored to seperate extractors
    
    (1623)
    Code cleanup and reformatting
    
    (1773)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Added extensibility to override spring-data-rest extractors
    
    (1623)
    Standardized the builder method names
    
    (2022)
    Renamed enum values
    
    (2273)
    Renamed withParameter -> withParameterType
    
    Also simplified the case statement
    
    (2273)
    Renamed factory methods for specification actions
    
    (2273)
    Clean up to remove un-needed finals
    
    Also used method references where possible
    
    (2273)
    Optimized imports and reformatted code
    
    (2273)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    spring-data-rest: DRY it up and reduce Guava
    #1773 Initial dependency upgrade along with API compatibility modifications
    Seperated out the individual association extractors
    
    (1623)
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    Code cleanup and reformatting
    
    (1773)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    migrated guava Function
    Migraiting from FluentIterable
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    fix for spring data rest 3.0.5.RELEASE while maintaining backward compartibility
    #1773 data-rest: repository description fix
    #1773 Initial dependency upgrade along with API compatibility modifications
    Only document exported resources
    
    fixes #2072
    Added extensibility to override spring-data-rest extractors
    
    (1623)
    Renamed RequestHandlerExtractor -> EntityOperationsExtractor
    
    (1623)
    Adjusted visibility modifiers
    
    Also renamed a class.
    
    (1623)
    Refactored to seperate extractors
    
    (1623)
    Fixed the descriptions of tags
    
    (1623)
    Setup to handle associations
    Added persistent entities for associations
    
    (1623)
    Fixed the search query representation
    
    (1623)
    Initial work to re-write SDR support
    
    This work is loosely based on the grails work just to maintain
    consistency in the extensions.
    
    (1623)
    Introduced spring data rest endpoints
    
    This is in preparation to create a contract test to watch the contract evolving and also serve as a safety net for breaking changes
    
    (1623)
    Fix for https://github.com/springfox/springfox/issues/1653
    Added support for alps and schema services
    Added support for schema operations
    Renamed Entity*Handler -> Entity*Template
    Fixed the rendering of entity services
    
    The methods were causing the request handler key to reflect incorrectly
    Implemented entity search services documentation
    Implemented entity level resource documentation
    Added initial configuration support for spring-data-rest
    Re-organized project ordering
    Updated copyright year
    
    (1082)
    Added extensibility to override spring-data-rest extractors
    
    (1623)
    Seperated out the individual association extractors
    
    (1623)
    Renamed RequestHandlerExtractor -> EntityOperationsExtractor
    
    (1623)
    Refactored to seperate extractors
    
    (1623)
    Refactored the bootstrapper to take in a RequestHandlerProvider
    
    This is a step forward to support different request handler providers. It is also
    incidentally used to create a predictable ordering of request handlers that are
    processed by the bootstrapper
    
    related to #682, #825
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Updated copyright year
    
    (1082)
    Renamed RequestHandlerExtractor -> EntityOperationsExtractor
    
    (1623)
    Refactored to seperate extractors
    
    (1623)
    Refactored the bootstrapper to take in a RequestHandlerProvider
    
    This is a step forward to support different request handler providers. It is also
    incidentally used to create a predictable ordering of request handlers that are
    processed by the bootstrapper
    
    related to #682, #825
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Standardized the builder method names
    
    (2022)
    Renamed enum values
    
    (2273)
    Renamed withParameter -> withParameterType
    
    Also simplified the case statement
    
    (2273)
    Renamed factory methods for specification actions
    
    (2273)
    Clean up to remove un-needed finals
    
    Also used method references where possible
    
    (2273)
    Optimized imports and reformatted code
    
    (2273)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    fix for spring data rest 3.0.5.RELEASE while maintaining backward compartibility
    spring-data-rest: DRY it up and reduce Guava
    #1773 Initial dependency upgrade along with API compatibility modifications
    Added PATCH support for spring-data-rest
    
    Also removed id as a parameter for entity save via POST
    
    fixes #1839, #1866
    Renamed RequestHandlerExtractor -> EntityOperationsExtractor
    
    (1623)
    Refactored to seperate extractors
    
    (1623)
    Moved from using deprecated methods from Types
    
    (3348)
    Fixed reliability sonar bugs
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Standardized the builder method names
    
    (2022)
    #2932 - Spring HATEOAS 1.0.0.RELEASE
    #182
    
    Fix sort ordering.
    #3075 SpringDataRest Pageable resource with integer paramters
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Code cleanup and reformatting
    
    (1773)
    Re-arranged private methods below more visible methods
    
    Also adjusted visibility on utility class methods
    
    (2273)
    Renamed enum values
    
    (2273)
    Renamed withParameter -> withParameterType
    
    Also simplified the case statement
    
    (2273)
    Used the build methods where applicable
    
    Also removed final modifiers on locals.
    
    (2273)
    Renamed factory methods for specification actions
    
    (2273)
    Reordered methods accordingly to visibility/access
    
    (2273)
    Clean up to remove un-needed finals
    
    Also used method references where possible
    
    (2273)
    Optimized imports and reformatted code
    
    (2273)
    Merge fix
    spring-data-rest: DRY it up and reduce Guava
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    Merge fix
    Upgraded to spring data rest with spring boot 2.0 support
    
    (2516)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    fix for spring data rest 3.0.5.RELEASE while maintaining backward compartibility
    #1773 Initial dependency upgrade along with API compatibility modifications
    Added extensibility to override spring-data-rest extractors
    
    (1623)
    Adjusted visibility modifiers
    
    Also renamed a class.
    
    (1623)
    Refactored to seperate extractors
    
    (1623)
    Made the property identifiers reflect the correct name
    
    (1623)
    Added support for property item accessors
    
    (1623)
    Fixed associations to use PUT/POST/PATCH
    
    Get is not the appropriate method that it shouldve been using
    
    (1623)
    Adding the right media types and responses
    
    (1623)
    Fixed the naming of the actions to be entity sensitive
    
    (1623)
    Fixed the descriptions of tags
    
    (1623)
    Major changes to accomodate controller-less specs
    Setup to handle associations
    Added POST to create resource
    Added persistent entities for associations
    
    (1623)
    Fixed the search query representation
    
    (1623)
    Initial work to re-write SDR support
    
    This work is loosely based on the grails work just to maintain
    consistency in the extensions.
    
    (1623)
    Clean up to remove un-needed finals
    
    Also used method references where possible
    
    (2273)
    Optimized imports and reformatted code
    
    (2273)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    migrated guava Function
    Migraiting from FluentIterable
    spring-data-rest: remove Guava from EntityAssociationsExtractor
    #1773 Initial dependency upgrade along with API compatibility modifications
    Added extensibility to override spring-data-rest extractors
    
    (1623)
    Extracted function
    
    (1623)
    Seperated out the individual association extractors
    
    (1623)
    Renamed RequestHandlerExtractor -> EntityOperationsExtractor
    
    (1623)
    Adjusted visibility modifiers
    
    Also renamed a class.
    
    (1623)
    Refactored to seperate extractors
    
    (1623)
    Standardized the builder method names
    
    (2022)
    Renamed enum values
    
    (2273)
    Renamed withParameter -> withParameterType
    
    Also simplified the case statement
    
    (2273)
    Renamed factory methods for specification actions
    
    (2273)
    Clean up to remove un-needed finals
    
    Also used method references where possible
    
    (2273)
    Optimized imports and reformatted code
    
    (2273)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    spring-data-rest: DRY it up and reduce Guava
    #1773 Initial dependency upgrade along with API compatibility modifications
    Fixed issue with incorrect naming of operations
    
    (2025)
    Seperated out the individual association extractors
    
    (1623)
    Updated copyright year
    
    (1082)
    Seperated out the individual association extractors
    
    (1623)
    Renamed RequestHandlerExtractor -> EntityOperationsExtractor
    
    (1623)
    Refactored to seperate extractors
    
    (1623)
    Refactored the bootstrapper to take in a RequestHandlerProvider
    
    This is a step forward to support different request handler providers. It is also
    incidentally used to create a predictable ordering of request handlers that are
    processed by the bootstrapper
    
    related to #682, #825
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    fix #1882 by making EntitySearchExtractor know @Param , with test case.
    Initial work to re-write SDR support
    
    This work is loosely based on the grails work just to maintain
    consistency in the extensions.
    
    (1623)
    Upgraded libraries before working on the story
    
    (1621)
    Added ignore reason for parameter/operation being ignored
    
    resolves #1494
    Extracted annotations to a utility class
    
    (699)
    Standardized the builder method names
    
    (2022)
    Renamed factory methods for specification actions
    
    (2273)
    Clean up to remove un-needed finals
    
    Also used method references where possible
    
    (2273)
    Optimized imports and reformatted code
    
    (2273)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Upgraded to spring data rest with spring boot 2.0 support
    
    (2516)
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Fixed a bug where finders were not correctly represented
    
    (2311)
    #2311: springfox-data-rest: fix EntitySearchExtractor return type
    spring-data-rest: DRY it up and reduce Guava
    #1773 Initial dependency upgrade along with API compatibility modifications
    fix #1882 by making EntitySearchExtractor know @Param , with test case.
    Renamed RequestHandlerExtractor -> EntityOperationsExtractor
    
    (1623)
    Refactored to seperate extractors
    
    (1623)
    #182
    
    Fix sort ordering.
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Optimized imports and reformatted code
    
    (2273)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Upgraded to spring data rest with spring boot 2.0 support
    
    (2516)
    clean up static imports
    migrated guava Function
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    spring-data-rest: DRY it up and reduce Guava
    Fixed the naming of the actions to be entity sensitive
    
    (1623)
    Fixed the descriptions of tags
    
    (1623)
    Major changes to accomodate controller-less specs
    Initial work to re-write SDR support
    
    This work is loosely based on the grails work just to maintain
    consistency in the extensions.
    
    (1623)
    Updated copyright year
    
    (1082)
    #1773 Initial dependency upgrade along with API compatibility modifications
    Seperated out the individual association extractors
    
    (1623)
    Standardized the builder method names
    
    (2022)
    Renamed enum values
    
    (2273)
    Renamed withParameter -> withParameterType
    
    Also simplified the case statement
    
    (2273)
    Renamed factory methods for specification actions
    
    (2273)
    Clean up to remove un-needed finals
    
    Also used method references where possible
    
    (2273)
    Optimized imports and reformatted code
    
    (2273)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    fix for spring data rest 3.0.5.RELEASE while maintaining backward compartibility
    spring-data-rest: DRY it up and reduce Guava
    #1773 Initial dependency upgrade along with API compatibility modifications
    Added support for BasePathAware controllers
    
    Also added json/hal support for find all method.
    
    #1623
    Renamed RequestHandlerExtractor -> EntityOperationsExtractor
    
    (1623)
    Refactored to seperate extractors
    
    (1623)
    Standardized the builder method names
    
    (2022)
    Renamed withParameter -> withParameterType
    
    Also simplified the case statement
    
    (2273)
    Renamed factory methods for specification actions
    
    (2273)
    Clean up to remove un-needed finals
    
    Also used method references where possible
    
    (2273)
    Optimized imports and reformatted code
    
    (2273)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    spring-data-rest: DRY it up and reduce Guava
    #1773 Initial dependency upgrade along with API compatibility modifications
    Fixed issue with incorrect naming of operations
    
    (2025)
    Seperated out the individual association extractors
    
    (1623)
    Upgraded to spring data rest with spring boot 2.0 support
    
    (2516)
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Standardized the builder method names
    
    (2022)
    Renamed withParameter -> withParameterType
    
    Also simplified the case statement
    
    (2273)
    Renamed factory methods for specification actions
    
    (2273)
    Clean up to remove un-needed finals
    
    Also used method references where possible
    
    (2273)
    Optimized imports and reformatted code
    
    (2273)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    fix for spring data rest 3.0.5.RELEASE while maintaining backward compartibility
    spring-data-rest: DRY it up and reduce Guava
    #1773 Initial dependency upgrade along with API compatibility modifications
    Renamed RequestHandlerExtractor -> EntityOperationsExtractor
    
    (1623)
    Refactored to seperate extractors
    
    (1623)
    Standardized the builder method names
    
    (2022)
    Renamed withParameter -> withParameterType
    
    Also simplified the case statement
    
    (2273)
    Renamed factory methods for specification actions
    
    (2273)
    Clean up to remove un-needed finals
    
    Also used method references where possible
    
    (2273)
    Optimized imports and reformatted code
    
    (2273)
    Unused import removed
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    spring-data-rest: DRY it up and reduce Guava
    #1773 Initial dependency upgrade along with API compatibility modifications
    Fixed issue with incorrect naming of operations
    
    (2025)
    Seperated out the individual association extractors
    
    (1623)
    Fixed reliability sonar bugs
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    Code cleanup and reformatting
    
    (1773)
    Updated copyright year
    
    (1082)
    migrate from guava lists
    Made HandlerMethodResolver a bean
    
    This way we create it just once in the scope of the application.
    
    (2069)
    Added support for BasePathAware controllers
    
    Also added json/hal support for find all method.
    
    #1623
    Remove usage of generic wildcard type
    Made WebMvcRequestHandler account for context path
    
    Since only webmvc endpoints use the context path, we moved the logic to account for the context path to the webmvc request handler and its providers. This removes the dependency on PathProvider to provide the application root.
    
    Also modified the tests accordingly
    
    (1773)
    Redid the toString with StringJoiner
    
    (1773)
    Reformatting before redoing the toString on RequestHandlers
    
    (1773)
    Rename implementation specific classes with prefix to avoid clashes in coverage report.
    Move into package without uppercase letters.
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava Cache and removed Guava
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    fix checkstyle
    refactor(): remove dependencies to spring-mvc on swagger core
    Added additional logging around duplicate detection
    
    Unable to reproduce the reported issue. Added additional logging around duplicates.
    
    resolves #1894
    Improvements for projections plugin.
    Initial support for projections.
    Fixed the naming of the actions to be entity sensitive
    
    (1623)
    Major changes to accomodate controller-less specs
    Initial work to re-write SDR support
    
    This work is loosely based on the grails work just to maintain
    consistency in the extensions.
    
    (1623)
    Tidied up the the combination logic
    
    (1367)
    Moved the combined request handler up
    
    This is so that it can be reused by other bindings i.e. grails
    
    (1367)
    Implemented entity search services documentation
    Improved coverage and upgraded compatibility with boot 1.3.6
    Reworked the RequestHandler
    
    Converted the request handler to and interface. Also subclassed to accomodate work with web mvc types. This will allow for the spring data rest and grails controllers to participate.
    
    Also tightend up the request mapping context and operation context so
    that the the underlying request handlers do not leak beyond the
    RequestHandler interface.
    Added guards to load data-rest only if its a web application
    
    (3382)
    Fixed the checkstyle
    Added better guards around spring boot auto configuration
    Tightened the builder api
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Created boot starter project
    
    This is to have a dropin support for springfox. Made the OAS controller agnostic of web framework
    
    (2022)
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Documented AlternateTypeRuleConvention
    
    Also conditions on why some properties might be missing on certain occasions.
    
    resolves #1904
    Fixed the checkstyle violation
    
    related to #2063
    Added support for Pageable parameters
    
    Added a convention that looks up the property names from the rest configuration and provides an alternative type that renders parameters accordingly.
    
    resolves #2063
    Fixed the rendering of entity services
    
    The methods were causing the request handler key to reflect incorrectly
    Added initial configuration support for spring-data-rest
    Added a failing test for bidirectional recursive types
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Fixes to spring data rest to support the new schema/service models
    
    (2022)
    #2932 - Spring HATEOAS 1.0.0.RELEASE
    Removed LinkModelProvider
    
    Delegating to jackson to render the link object correctly
    
    (2311)
    fixup! Registered the SyntheticModelProviderPllugin
    Added custom schema extensions for custom message formats e.g. HAL
    
    HAL as such creates a shape of the object that is usually better handled via a serializer/de-serializer.
    
    (2311)
    Deprecated SPRING_WEB
    
    There is really no documentation type that is SPRING_WEB, it has to be one of the flavors of swagger/open api.
    
    Deprecated for removal
    
    (3354)
    Polished the builders to not expose constructors
    
    (3351)
    Polished the builder apis to be fluent
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted all builders to be consumer based
    
    (2022)
    Fixes to spring data rest to support the new schema/service models
    
    (2022)
    Removed source identifier as a required attribute to construct a model
    
    (2022)
    Added property name to the property specification builder constructor
    
    (2022)
    Merging master
    WIP 3 compiled successfully
    Initial model refactoring
    #2932 - Spring HATEOAS 1.0.0.RELEASE
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    Migraiting from FluentIterable
    Made the spec that is generated compliant (as far as possible)
    
    Added xml attributes and removed content where it wasnt appropriate
    
    (2311)
    Added custom schema extensions for custom message formats e.g. HAL
    
    HAL as such creates a shape of the object that is usually better handled via a serializer/de-serializer.
    
    (2311)
    Added custom schema extensions for custom message formats e.g. HAL
    
    HAL as such creates a shape of the object that is usually better handled via a serializer/de-serializer.
    
    (2311)
    Fixed expansion of models with alternate types
    
    resolves #2165
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Deprecated SPRING_WEB
    
    There is really no documentation type that is SPRING_WEB, it has to be one of the flavors of swagger/open api.
    
    Deprecated for removal
    
    (3354)
    Polished the builders to not expose constructors
    
    (3351)
    Polished the builder apis to be fluent
    Fixed compiler warnings
    
    Inlined fully qualifid deprecated types so that they dont cause warnings
    Converted all builders to be consumer based
    
    (2022)
    Fixes to spring data rest to support the new schema/service models
    
    (2022)
    Initial model refactoring
    #2932 - Spring HATEOAS 1.0.0.RELEASE
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Optimized imports per project style
    
    (1082)
    clean up static imports
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    migrated guava Function
    Made the spec that is generated compliant (as far as possible)
    
    Added xml attributes and removed content where it wasnt appropriate
    
    (2311)
    Added custom schema extensions for custom message formats e.g. HAL
    
    HAL as such creates a shape of the object that is usually better handled via a serializer/de-serializer.
    
    (2311)
    Bump slf4j-simple from 1.6.1 to 1.7.30
    
    Bumps [slf4j-simple](https://github.com/qos-ch/slf4j) from 1.6.1 to 1.7.30.
    - [Release notes](https://github.com/qos-ch/slf4j/releases)
    - [Commits](https://github.com/qos-ch/slf4j/compare/v_1.6.1...v_1.7.30)
    
    Signed-off-by: dependabot-preview[bot] <support@dependabot.com>
    Updated the tests
    
    (3377)
    Added test to demonstrate optional
    
    (2831)
    Adjusted logging
    
    (3366)
    Upgraded to groovy 3 and spock 2.0
    Polished the builder apis to be fluent
    Added better support for x-forward header interpretation
    
    (2022)
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Sorted responses and build works
    
    (2022)
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Upgraded the dependencies
    
    Also fixes as a result of upgrading asciidoctor
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Build scripts cleanup
    
    Used the new form for plugin definitions and removed unused script blocks and rearranged the dependencies
    
    (2022)
    #2932: Minor version upgrades of spring dependencies. Aligned contract tests with Spring HATEOAS 1.x. Fixed wrong client encoding used in tests.
    Updated spring dependencies to spring 5.2.0 and spring boot 2.2.0, fixed changed interfaces
    Upgrade libraries and plugin versions
    
    (2022)
    Fix dependencies and exclusions.
    Upgraded dependency versions and libraries
    
    Moved to spring boot 2.0
    
    (2516)
    Updated dependencies
    
    relates to #2350
    Updated documentation on how to update contracts
    
    (1944)
    Moved the maybeWriteToFile above the assertion
    
    This way when there is an assertion failure we still write the changed contract file to disk. Also update the contracts based on the refresh after adding the new test
    
    (2219)
    Added ability to bulk update contract files
    
    (1937)
    #1773 springfox: spring-boot:2.0.0.RELEASE with other dependencies upgraded to match those in boot
    #1773 springfox: Adding Spring Boot 2 (RC2) globally
    #1773 contract-tests: adding Spring Boot 2
    #1773 Initial dependency upgrade along with API compatibility modifications
    Upgraded libraries prior to release
    
    (1899)
    Upgrading the dependencies before starting on work
    
    (2022)
    Added breaking test to demonstrate nullable expandable parameters
    
    Fixed the contracts accordingly
    
    (1864)
    Upgrade base library versions
    
    related to #1899
    Introduced spring data rest endpoints
    
    This is in preparation to create a contract test to watch the contract evolving and also serve as a safety net for breaking changes
    
    (1623)
    Upgraded libraries before working on the story
    
    (1621)
    Upgraded gradle to 3.1
    
    Also upgraded libraries and disabled the daemon on the CI build
    Updated gradle to 3.0
    Updated swagger-ui version
    
    Also updated libraries
    Upgraded the libraries especially the contract tests
    Changed the library to determine uptodate versions
    Uprevved versions and removed commented code in build script
    Fixed the artifact based sharing of test code
    Removed dependency on spring-hateoas
    
    In addition upgraded the jackson libraries and the json assert libraries.
    This change is mainly to remove the dependency on spring-hateoas being available
    for this library.
    
    fixes #1104
    Upgraded gradle to 2.8
    Changes to limit libraries
    Upgraded gradle to 2.8
    Added support for rendering tags defined in @ApiOperation
    
    fixes #675
    Replaced all the caching with custom caching aspect
    
    - Added support for handrolled caching logic
    - Polishing the aspect oriented caching support
    - Added tests for the caching aspect
    Version not propogating to the bintray publish
    
    - Adding publish version to the configured publications
    - Refactored the subprojects build
    Related to #759
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Removes jsp from swagger-ui
    - Adds an endpoint to list all of the swagger resources within a running application
    - Added a base class for swagger contract tests
    Updated the build files
    Renames modules to springdox-
    Upgraded spring boot
    Wired up the v2 spec with the v2 application context
    
    Unable to figure out how to bootstrap the v2 spec as only one main method is allowed
    [#538] Adds bare contract spec for swagger 2.0
    - Uses swagger groups to split petstore api from out test case apis
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Added tests for allowable values
    
    - Made the test artificats use the testCompile rather than compile dependencies
    Caching gradle wrapper and upgrading spring-mvc-ui webjar
    Upgerades swagger-ui webjar version
    [#496] Adds jstl dependencies to fix webjar context path
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    Removes unnecessary exclude
    [#530] Orders http operations and adds contract tests for 1.2 spec
    [#538] Adds bare contract spec for swagger 2.0
    - Uses swagger groups to split petstore api from out test case apis
    [#496] Adds jstl dependencies to fix webjar context path
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    Enhancement of merging algorithm.
    #182
    
    Fix resource listing.
    Fix for contract tests.
    Fixed formatting
    
    (2219)
    Additional contract test.
    Added tests to demonstrate spring data rest base path support
    
    resolves #1932
    Only document exported resources
    
    fixes #2072
    Added additional contract tests to test behaviour of when you have a consumes and/or produces defined on the document level and when only on the operation level
    Added support for BasePathAware controllers
    
    Also added json/hal support for find all method.
    
    #1623
    Fixed the descriptions of tags
    
    (1623)
    Major changes to accomodate controller-less specs
    Initial work to re-write SDR support
    
    This work is loosely based on the grails work just to maintain
    consistency in the extensions.
    
    (1623)
    Fixed the ordering of the elements to be stable
    
    (1623)
    Introduced spring data rest endpoints
    
    This is in preparation to create a contract test to watch the contract evolving and also serve as a safety net for breaking changes
    
    (1623)
    Demonstrated intricate generics support
    
    resolves #1631
    Demonstrate interface annotation inference support
    
    Parameters annotations i.e. `@ApiParam` are not supported on interfaces because it can become a combinatorial problem when you nested/multi-interface subclassing controllers.
    
    relates to #1575
    Upgraded the libraries especially the contract tests
    Fixed broken test
    
    #1306
    Fixed an issue where Maps as parameters were not rendered correctly
    
    fixes #1306
    Added support for Contact as a first class object
    Reformatted the spec output files to match the style guide
    #801 #810 Add proper support for enums in response values and in schema objects
    Add tests to demonstrate using groovy models for services
    
    related to #752
    Feature to support multiple security contexts
    
    Currently each docket only supports one class paths to apply a security
    context around. This fix makes it such that the Docket can be defined with
    multiple security contexts, on for each class of paths
    
    fixes #697
    [#538] Sorted api listing and api listing references in the models
    
    - Also applied defaultIfEmpty to builders
    [#541] Attempt to clean up logic to handle bare enums in the response
    
    All this effort leads me back to why it wasnt supported in the first place! bare enums are not supported in
    swagger spec just like bare List types are not supported.
    
    closes #541
    [#478] Adds a contract test for root api endpoints and removes redundant serrvices integ test
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Sorted the consumes/produces/protocols/models
    
    This leads to predictable generation of contracts for swagger 1.2
    contracts.
    
    (2022)
    fix discriminator usage in test templates
    Fix bug with duplicates subTypes.
    Contract tests.
    Fix for contract tests.
    #1570 Add examples support
    Updated contracts
    
    (2516)
    Demonstrated resolution for string examples
    
    When providing an example for string based properties, they need to be single quoted. Also fixed the build
    
    related to #2469
    Added support for public model attribute fields
    
    In the process unearth an example to support anyOf (related to #2490).
    
    fixes #2423
    Updated the feature demonstration service after stabilization of rendering
    
    (2415)
    Added contract tests for inhertance
    
    (1151)
    (868)
    Sorted the contracts by path
    
    Also sorted the parameters by name. These are the contacts that were materially affected by the change.
    
    Also includes, Changes that prioritize the parameter merge priority. For e.g. request condition parameters have lower priority on determining types than actual parameters.
    
    NOTE: swagger 1.2 contracts also sort by description, to make it more
    consistent
    
    (1831)
    Fixes for contract tests.
    Fixed the model and model property comparison
    
    In the course of fixing the tests, fixed the equals and hashcode implementation of model and property, this is important in limiiting the litering of models in the spec if this is incorrect.
    
    (2056)
    Additional contract test.
    Fixes for contract tests.
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    correct spelling, fix typos
    (issue #1896)
    integration tests with errors
    Introduced spring data rest endpoints
    
    This is in preparation to create a contract test to watch the contract evolving and also serve as a safety net for breaking changes
    
    (1623)
    Fixed the model attribute expander for list of enums
    
    fixes #1571
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Added contract tests to verify conventions work
    
    Here we add `PetWithSerializer` type in various contexts and verify that
    it is always honors the jackson annotations.
    
    (1490)
    Updated the tests to demonstrate operation combination
    
    Here we introduce two operations that differ only by media type and accordingly expect the changes to reflect in the contracts.
    
    (1367)
    Relaxed the requirement for getters/setters on expandables
    
    Since we have a check for recursively defined model attributes, there is no need for this check any more.
    
    (1603)
    Updated tests and contracts to account for the new rules
    Correctly represent byte arrays
    
    fixes #1430
    Added better support for BigDecimal & BigInteger
    
    fixes #1432
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Fixed the tests and the contracts to reflect the improved model attribute support
    Synced the contracts with the output
    Fixed the incorrect check when updating parameter defaults
    
    Also updated the corresponding tests.
    
    closes #1165
    Reformatted the spec output files to match the style guide
    Fixed to better handle indeterminate primary member
    
    when there are multiple accessors or mutators the parsing of model properties crashes... atleast as of jackson 2.6.x
    
    fixes #1129
    Added a test for a primitive body parameter that does not have a format
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Updated the model property resolution to use the accessors/factory methods
    
    and constructors from the bean that jackson infers. This fixes a problem where scala
    classes do not participate in the property inference. This also implements the long
    standing feature request to support constructor and @JsonCreator annotated factory methods
    that are the primary source for properties.
    Tests to verify Map<String, Map<String, Example>> is rendered correctly
    
    resolves #817
    Reverted the changes so that the contracts are the same as pre-this change
    
    related to #682
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Fixes the rendering of api which allows uploading of multiple multipart files
    
    fixes #837
    Additional test cases for read only flag
    
    Test case for read only flag in swagger 2, and no impact to swagger 1
    #773 Don't provide a default values for operation notes/description.
    Fixes field properties provider issue found while fixing the code coverage build issue
    
    Uncovered the fact that the field model properties provider was working
    incorrectly. This fixes that problem also removed some ignored tests.
    
    related to #752
    Added support for list of maps
    
    fixes #740
    Fixes the default rules such that Map<String, String> is not rendered as
    
    an Object. fixes #747
    Nickname is back
    
    related to #659
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Added Void.class and Void.TYPE to the list of ignorable types
    
    fixes #617 in 1.0.2-SNAPSHOT
    Fixed the contract classes to exclude special characters
    Reformatting the json so that it is alphabetically ordered
    Reformatting the json so that it is alphabetically ordered
    Fix the rendering of container types in model properties
    
    Instead of rendering model properties with Lists/Sets/Arrays with the type set to
    one of List/Set or Array depending on the data structure, always render container
    types as array and add a uniqueItems property to accomodate sets. This change only
    applies to the model properties
    
    fixes #593
    [#582] Added test to demonstrate that having an operation
    
    with no request mapping value and annotated with ApiOperation generates the documentation for the operation
    as expected.
    Added test for action without any request mapping value
    [#538] Model properties are sorted alpabetically
    [#538] Sort response messages by code
    [#538] Fixed the contract tests
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#541] Attempt to clean up logic to handle bare enums in the response
    
    All this effort leads me back to why it wasnt supported in the first place! bare enums are not supported in
    swagger spec just like bare List types are not supported.
    
    closes #541
    [#541] Fix the rendering of enums in model properties
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#534] Fixes problem of duplicate response messages with the same status code
    
    When operations do not specify a http method, it causes response messages to be duplicated.
    This fix makes the responseMessages a Set rather than a List
    
    fixes #534
    [#383 #532] Adds generic model substitutes for Springs ResponseEntity and HttpEntity
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Added ability to persist swagger 1.2 contracts
    
    When tests are run, contacts can be automatically persisted if the settings are turned on in the build script. Reformatted contracts via the automated tests when we enable the option in the build script.
    
    These contracts are the ones that are not materially affected by it.
    
    (1831)
    Fixed the model and model property comparison
    
    In the course of fixing the tests, fixed the equals and hashcode implementation of model and property, this is important in limiiting the litering of models in the spec if this is incorrect.
    
    (2056)
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Updated tests and contracts to account for the new rules
    Synced the contracts with the output
    Reformatted the spec output files to match the style guide
    Updated the model property resolution to use the accessors/factory methods
    
    and constructors from the bean that jackson infers. This fixes a problem where scala
    classes do not participate in the property inference. This also implements the long
    standing feature request to support constructor and @JsonCreator annotated factory methods
    that are the primary source for properties.
    Additional test cases for read only flag
    
    Test case for read only flag in swagger 2, and no impact to swagger 1
    #773 Don't provide a default values for operation notes/description.
    Fixes field properties provider issue found while fixing the code coverage build issue
    
    Uncovered the fact that the field model properties provider was working
    incorrectly. This fixes that problem also removed some ignored tests.
    
    related to #752
    Nickname is back
    
    related to #659
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Reformatting the json so that it is alphabetically ordered
    Reformatting the json so that it is alphabetically ordered
    Fix the rendering of container types in model properties
    
    Instead of rendering model properties with Lists/Sets/Arrays with the type set to
    one of List/Set or Array depending on the data structure, always render container
    types as array and add a uniqueItems property to accomodate sets. This change only
    applies to the model properties
    
    fixes #593
    [#538] This is a superfluous ordering support as most request mappings do not include multiple patterns
    
    In any case, this provides a way to sort the operations within an api
    [#538] Model properties are sorted alpabetically
    [#538] Sort response messages by code
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#541] Fix the rendering of enums in model properties
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#534] Fixes problem of duplicate response messages with the same status code
    
    When operations do not specify a http method, it causes response messages to be duplicated.
    This fix makes the responseMessages a Set rather than a List
    
    fixes #534
    [#383 #532] Adds generic model substitutes for Springs ResponseEntity and HttpEntity
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Added ability to persist swagger 1.2 contracts
    
    When tests are run, contacts can be automatically persisted if the settings are turned on in the build script. Reformatted contracts via the automated tests when we enable the option in the build script.
    
    These contracts are the ones that are not materially affected by it.
    
    (1831)
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Synced the contracts with the output
    Reformatted the spec output files to match the style guide
    #773 Don't provide a default values for operation notes/description.
    Nickname is back
    
    related to #659
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Reformatting the json so that it is alphabetically ordered
    Reformatting the json so that it is alphabetically ordered
    Fix the rendering of container types in model properties
    
    Instead of rendering model properties with Lists/Sets/Arrays with the type set to
    one of List/Set or Array depending on the data structure, always render container
    types as array and add a uniqueItems property to accomodate sets. This change only
    applies to the model properties
    
    fixes #593
    [#538] Model properties are sorted alpabetically
    [#538] Sort response messages by code
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#541] Attempt to clean up logic to handle bare enums in the response
    
    All this effort leads me back to why it wasnt supported in the first place! bare enums are not supported in
    swagger spec just like bare List types are not supported.
    
    closes #541
    [#478] Adds a contract test for root api endpoints and removes redundant serrvices integ test
    Sorted the consumes/produces/protocols/models
    
    This leads to predictable generation of contracts for swagger 1.2
    contracts.
    
    (2022)
    Added ability to persist swagger 1.2 contracts
    
    When tests are run, contacts can be automatically persisted if the settings are turned on in the build script. Reformatted contracts via the automated tests when we enable the option in the build script.
    
    These contracts are the ones that are not materially affected by it.
    
    (1831)
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Reworked ApiListingScanner to use the ResourcePathProvider
    
    Also fixed the tests
    
    (1943)
    Synced the contracts with the output
    Fixed the incorrect check when updating parameter defaults
    
    Also updated the corresponding tests.
    
    closes #1165
    Reformatted the spec output files to match the style guide
    Made the swagger contract tests consistent with respect to method name generation
    
    Over different runs the ordering of the operations determined the names
    of the operations in the case of multiple operations with the same name
    
    related to #682, #825
    #773 Don't provide a default values for operation notes/description.
    Added security related contract tests
    
    related to #697
    Nickname is back
    
    related to #659
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Added Void.class and Void.TYPE to the list of ignorable types
    
    fixes #617 in 1.0.2-SNAPSHOT
    Reformatting the json so that it is alphabetically ordered
    Reformatting the json so that it is alphabetically ordered
    [#538] Improved test coverage in the mangodocs-spring-web module
    
    - Involved moving test from the swagger module to the base module and
      customizing the test to work with non-swagger related plugins
    [#538] Sort response messages by code
    [#538] Fixed the contract tests
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#534] Fixes problem of duplicate response messages with the same status code
    
    When operations do not specify a http method, it causes response messages to be duplicated.
    This fix makes the responseMessages a Set rather than a List
    
    fixes #534
    [#383 #532] Adds generic model substitutes for Springs ResponseEntity and HttpEntity
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Added ability to persist swagger 1.2 contracts
    
    When tests are run, contacts can be automatically persisted if the settings are turned on in the build script. Reformatted contracts via the automated tests when we enable the option in the build script.
    
    These contracts are the ones that are not materially affected by it.
    
    (1831)
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    fix tests again
    fix tests again
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Updated tests and contracts to account for the new rules
    Synced the contracts with the output
    Fixed the incorrect check when updating parameter defaults
    
    Also updated the corresponding tests.
    
    closes #1165
    Reformatted the spec output files to match the style guide
    Fixed the unique operation name generation
    
    This is to align with the advertized expectation that when a nickname is
    supplied then the unique id for the operation would respect that intent
    as much as possible without sacrificing the ability to ONLY generate unique
    operation names.
    
    fixes #1066
    Updated the model property resolution to use the accessors/factory methods
    
    and constructors from the bean that jackson infers. This fixes a problem where scala
    classes do not participate in the property inference. This also implements the long
    standing feature request to support constructor and @JsonCreator annotated factory methods
    that are the primary source for properties.
    Made the swagger contract tests consistent with respect to method name generation
    
    Over different runs the ordering of the operations determined the names
    of the operations in the case of multiple operations with the same name
    
    related to #682, #825
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    @ApiResponse maps to wrong ApiModel-definition name when overriden
    
    fixes #793
    #773 Don't provide a default values for operation notes/description.
    Fixes the rendering of request bodies that are required by default
    
    fixes #734
    Applying PR comments, removing nickname for uniqueId
    Nickname is back
    
    related to #659
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Reformatting the json so that it is alphabetically ordered
    Reformatting the json so that it is alphabetically ordered
    Fix the rendering of container types in model properties
    
    Instead of rendering model properties with Lists/Sets/Arrays with the type set to
    one of List/Set or Array depending on the data structure, always render container
    types as array and add a uniqueItems property to accomodate sets. This change only
    applies to the model properties
    
    fixes #593
    [#538] Model properties are sorted alpabetically
    [#538] Sort response messages by code
    [#538] Fixed the temporal coupling int the name provider plugin
    
    Now the default name provider is no longer a component but truly a default type name provider. If there are no plugins registered the default is used
    [#538] Fixed the contract tests
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#541] Attempt to clean up logic to handle bare enums in the response
    
    All this effort leads me back to why it wasnt supported in the first place! bare enums are not supported in
    swagger spec just like bare List types are not supported.
    
    closes #541
    [#541] Fix the rendering of enums in model properties
    [#528] Updated the test case for an operation with oauth
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#534] Fixes problem of duplicate response messages with the same status code
    
    When operations do not specify a http method, it causes response messages to be duplicated.
    This fix makes the responseMessages a Set rather than a List
    
    fixes #534
    [#383 #532] Adds generic model substitutes for Springs ResponseEntity and HttpEntity
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Contract tests.
    Fix for contract tests.
    Sorted the contracts by path
    
    Also sorted the parameters by name. These are the contacts that were materially affected by the change.
    
    Also includes, Changes that prioritize the parameter merge priority. For e.g. request condition parameters have lower priority on determining types than actual parameters.
    
    NOTE: swagger 1.2 contracts also sort by description, to make it more
    consistent
    
    (1831)
    Fixes for contract tests.
    Fixed the model and model property comparison
    
    In the course of fixing the tests, fixed the equals and hashcode implementation of model and property, this is important in limiiting the litering of models in the spec if this is incorrect.
    
    (2056)
    Additional contract test.
    Fixes for contract tests.
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Add support for exclusive ranges #2088
    correct spelling, fix typos
    (issue #1896)
    Fixed legacy tests to expand parameters
    
    Because these parameters had an annotation, these parameters were treated as request body. This fixes that.
    
    (1749)
    Fixed formatting
    
    (1749)
    Changed the internal represenation of file
    
    This way if we encounter a type called File we resolve to the right type
    
    (1632)
    Fixed the tests and the contracts to reflect the improved model attribute support
    Synced the contracts with the output
    Fixed the incorrect check when updating parameter defaults
    
    Also updated the corresponding tests.
    
    closes #1165
    Reformatted the spec output files to match the style guide
    Added support for uri templates in query params
    Added decorator for query parameters
    Made the swagger contract tests consistent with respect to method name generation
    
    Over different runs the ordering of the operations determined the names
    of the operations in the case of multiple operations with the same name
    
    related to #682, #825
    Reverted the changes so that the contracts are the same as pre-this change
    
    related to #682
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Fix to merge parameter definitions and not duplicate the definitions
    
    fixes #813
    Fixes the issue where the responseClass in ApiOperation is ignored
    
    fixes #805
    #773 Don't provide a default values for operation notes/description.
    Fixes the rendering of request bodies that are required by default
    
    fixes #734
    Fixes the inverted merge logic for response messages
    
    fixes #733
    Nickname is back
    
    related to #659
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Added Void.class and Void.TYPE to the list of ignorable types
    
    fixes #617 in 1.0.2-SNAPSHOT
    Fixed the contract classes to exclude special characters
    Reformatting the json so that it is alphabetically ordered
    Reformatting the json so that it is alphabetically ordered
    Fix the rendering of container types in model properties
    
    Instead of rendering model properties with Lists/Sets/Arrays with the type set to
    one of List/Set or Array depending on the data structure, always render container
    types as array and add a uniqueItems property to accomodate sets. This change only
    applies to the model properties
    
    fixes #593
    [#538] Sorted api listing and api listing references in the models
    
    - Also applied defaultIfEmpty to builders
    [#538] This is a superfluous ordering support as most request mappings do not include multiple patterns
    
    In any case, this provides a way to sort the operations within an api
    [#538] Model properties are sorted alpabetically
    [#538] Sort response messages by code
    [#538] Fixed the contract tests
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#541] Attempt to clean up logic to handle bare enums in the response
    
    All this effort leads me back to why it wasnt supported in the first place! bare enums are not supported in
    swagger spec just like bare List types are not supported.
    
    closes #541
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#534] Fixes problem of duplicate response messages with the same status code
    
    When operations do not specify a http method, it causes response messages to be duplicated.
    This fix makes the responseMessages a Set rather than a List
    
    fixes #534
    [#383 #532] Adds generic model substitutes for Springs ResponseEntity and HttpEntity
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Added ability to persist swagger 1.2 contracts
    
    When tests are run, contacts can be automatically persisted if the settings are turned on in the build script. Reformatted contracts via the automated tests when we enable the option in the build script.
    
    These contracts are the ones that are not materially affected by it.
    
    (1831)
    Fixed the model and model property comparison
    
    In the course of fixing the tests, fixed the equals and hashcode implementation of model and property, this is important in limiiting the litering of models in the spec if this is incorrect.
    
    (2056)
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    fix tests
    Synced the contracts with the output
    Fixed the incorrect check when updating parameter defaults
    
    Also updated the corresponding tests.
    
    closes #1165
    Reformatted the spec output files to match the style guide
    #773 Don't provide a default values for operation notes/description.
    Filter properties that are marked as ignorable
    
    fixes #752
    Add tests to demonstrate using groovy models for services
    
    related to #752
    Added ability to persist swagger 1.2 contracts
    
    When tests are run, contacts can be automatically persisted if the settings are turned on in the build script. Reformatted contracts via the automated tests when we enable the option in the build script.
    
    These contracts are the ones that are not materially affected by it.
    
    (1831)
    Fixed the model and model property comparison
    
    In the course of fixing the tests, fixed the equals and hashcode implementation of model and property, this is important in limiiting the litering of models in the spec if this is incorrect.
    
    (2056)
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Demonstrate interface annotation inference support
    
    Parameters annotations i.e. `@ApiParam` are not supported on interfaces because it can become a combinatorial problem when you nested/multi-interface subclassing controllers.
    
    relates to #1575
    Fixed the tests and the contracts to reflect the improved model attribute support
    Synced the contracts with the output
    Fixed the incorrect check when updating parameter defaults
    
    Also updated the corresponding tests.
    
    closes #1165
    Reformatted the spec output files to match the style guide
    #773 Don't provide a default values for operation notes/description.
    Nickname is back
    
    related to #659
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    [#538] This is a superfluous ordering support as most request mappings do not include multiple patterns
    
    In any case, this provides a way to sort the operations within an api
    [#538] Model properties are sorted alpabetically
    [#538] Sort response messages by code
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#534] Fixes problem of duplicate response messages with the same status code
    
    When operations do not specify a http method, it causes response messages to be duplicated.
    This fix makes the responseMessages a Set rather than a List
    
    fixes #534
    [#383 #532] Adds generic model substitutes for Springs ResponseEntity and HttpEntity
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Merging master
    #2932: Minor version upgrades of spring dependencies. Aligned contract tests with Spring HATEOAS 1.x. Fixed wrong client encoding used in tests.
    #182
    
    Fix sort ordering.
    Contract tests.
    Fix for contract tests.
    Added ability to persist swagger 1.2 contracts
    
    When tests are run, contacts can be automatically persisted if the settings are turned on in the build script. Reformatted contracts via the automated tests when we enable the option in the build script.
    
    These contracts are the ones that are not materially affected by it.
    
    (1831)
    Fixed the model and model property comparison
    
    In the course of fixing the tests, fixed the equals and hashcode implementation of model and property, this is important in limiiting the litering of models in the spec if this is incorrect.
    
    (2056)
    Upgraded libraries prior to release
    
    (1899)
    Fixes for contract tests.
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Introduced spring data rest endpoints
    
    This is in preparation to create a contract test to watch the contract evolving and also serve as a safety net for breaking changes
    
    (1623)
    Fixed unwrapping behavior
    
    Instead of being strict and checking the field or accessor directly
    for annotations, we delegate to the jackson databinding infrastructure
    to tell us if a property is unwrapped or not.
    
    (1740)
    Improved coverage and upgraded compatibility with boot 1.3.6
    Upgraded the libraries especially the contract tests
    Fixed the tests and the contracts to reflect the improved model attribute support
    Synced the contracts with the output
    Fixed the incorrect check when updating parameter defaults
    
    Also updated the corresponding tests.
    
    closes #1165
    Reformatted the spec output files to match the style guide
    Fixed a bug with unbounded generic parameters and return types
    
    Updated the examples to demonstrate the issue. The downside to this fix is that alternate type
    rules will not apply to these unbounded types. The upside is however we avoid an NPE!
    
    fixes #953
    Updated tests to proove multi-variable templated controllers work as expected
    
    closes #953
    Fixes the issue where the responseClass in ApiOperation is ignored
    
    fixes #805
    #773 Don't provide a default values for operation notes/description.
    Nickname is back
    
    related to #659
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Added Void.class and Void.TYPE to the list of ignorable types
    
    fixes #617 in 1.0.2-SNAPSHOT
    Reformatting the json so that it is alphabetically ordered
    Reformatting the json so that it is alphabetically ordered
    [#538] Model properties are sorted alpabetically
    [#538] Sort response messages by code
    [#538] Fixed the contract tests
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#528] Updated the test business controller to render oauth authorizations
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#534] Fixes problem of duplicate response messages with the same status code
    
    When operations do not specify a http method, it causes response messages to be duplicated.
    This fix makes the responseMessages a Set rather than a List
    
    fixes #534
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Merged changes from model enhancements
    Sorted the consumes/produces/protocols/models
    
    This leads to predictable generation of contracts for swagger 1.2
    contracts.
    
    (2022)
    #182
    
    Fix sort ordering.
    Contract tests.
    Fix for contract tests.
    Updated contracts
    
    (2516)
    Sorted the contracts by path
    
    Also sorted the parameters by name. These are the contacts that were materially affected by the change.
    
    Also includes, Changes that prioritize the parameter merge priority. For e.g. request condition parameters have lower priority on determining types than actual parameters.
    
    NOTE: swagger 1.2 contracts also sort by description, to make it more
    consistent
    
    (1831)
    Fixed the model and model property comparison
    
    In the course of fixing the tests, fixed the equals and hashcode implementation of model and property, this is important in limiiting the litering of models in the spec if this is incorrect.
    
    (2056)
    Coverage and fixes.
    Additional contract test.
    Fixes for contract tests.
    Synced the contracts with the output
    Fixed the incorrect check when updating parameter defaults
    
    Also updated the corresponding tests.
    
    closes #1165
    Reformatted the spec output files to match the style guide
    Made the swagger contract tests consistent with respect to method name generation
    
    Over different runs the ordering of the operations determined the names
    of the operations in the case of multiple operations with the same name
    
    related to #682, #825
    #773 Don't provide a default values for operation notes/description.
    Fixes the rendering of request bodies that are required by default
    
    fixes #734
    Nickname is back
    
    related to #659
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Added Void.class and Void.TYPE to the list of ignorable types
    
    fixes #617 in 1.0.2-SNAPSHOT
    Reformatting the json so that it is alphabetically ordered
    Reformatting the json so that it is alphabetically ordered
    Fix the rendering of container types in model properties
    
    Instead of rendering model properties with Lists/Sets/Arrays with the type set to
    one of List/Set or Array depending on the data structure, always render container
    types as array and add a uniqueItems property to accomodate sets. This change only
    applies to the model properties
    
    fixes #593
    [#538] Model properties are sorted alpabetically
    [#538] Sort response messages by code
    [#538] Fixed the contract tests
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#534] Fixes problem of duplicate response messages with the same status code
    
    When operations do not specify a http method, it causes response messages to be duplicated.
    This fix makes the responseMessages a Set rather than a List
    
    fixes #534
    [#383 #532] Adds generic model substitutes for Springs ResponseEntity and HttpEntity
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Updated the contract tests
    
    (3390)
    Sorted the model properties by position and name
    
    resolves #3087
    Fixed issue rendering file input as model attribute
    
    fixes #1370
    Fixed the mapping for form variables and updated the contracts
    
    (3353)
    Updated the tests for multipart support
    
    (3364)
    Added tests and configuration to demonstrate Iterable
    
    resolves #3371, #3022
    Updated the tests
    
    (3377)
    Added example to demonstrate non error messages in logs
    
    (3380)
    Added tests to demonstrate the fixes
    
    (2684)
    Updated the bug examples
    
    (2767)
    Added contract tests for the actual issue
    
    (3351)
    Fixed issue allow allowable values to be overriden
    
    fixes #3321
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Regenerated the contracts after removing extraneous properties
    
    (2022)
    Updated the contract tests
    
    The contracts are 95% the same, except for some bug fixes that the old model had
    
    (2022)
    Added support for implicit parameter determination
    
    This is so that we can parallelly construct the parameter to the new model. Made the existing OperationBuilderPlugins also infer the RequestParameters
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Regenerated contracts with sorted produces/consumes/protocols/models
    
    (2022)
    #2932: Minor version upgrades of spring dependencies. Aligned contract tests with Spring HATEOAS 1.x. Fixed wrong client encoding used in tests.
    fix discriminator usage in test templates
    Contract tests.
    Fix #2822 related to @ApiParam(example="..") not working for @RequestBody
    Reduce diff from master contract files.
    Fix contract tests.
    Adapted behavior of ParameterMapper and added tests.
    Updated the contracts after upgrade to latest swagger library
    
    (2503)
    Updated the contract tests to respect allowEmptyValue constraint
    
    Only query/formData parameters should render allowEmptyValue settings
    
    (2419)
    Demonstrated resolution for string examples
    
    When providing an example for string based properties, they need to be single quoted. Also fixed the build
    
    related to #2469
    Added support for public model attribute fields
    
    In the process unearth an example to support anyOf (related to #2490).
    
    fixes #2423
    Fixed allowable range on string properties
    
    For string properties the allowable ranges should be rendered as max length and min length properties
    
    (2415)
    Demonstrates support for properties of the same type on a model
    
    (2479)
    Verified renaming of model attributes
    
    (2391)
    Verified the behavior of uppercased properties
    
    (2378)
    Updated the contract tests
    
    (2376)
    Updated contract tests
    
    (2368)
    Added native UUID support
    
    fixes #2314
    Added contract tests for example based features
    
    (853)
    Updated the contract tests
    
    (1944)
    Updated the ApiListingScanner extensibility example
    
    The example used a new caching operation generator, so the name space of operations would not be accurate when the contracts are generated. Changed the example, the documentation and the affected tests
    
    (2278)
    Moved the maybeWriteToFile above the assertion
    
    This way when there is an assertion failure we still write the changed contract file to disk. Also update the contracts based on the refresh after adding the new test
    
    (2219)
    Updated contract tests
    
    Contract tests to demonstrate required-ness handling of path variables
    
    (2220)
    Added example for multiple levels of nested wrapped types
    
    relates to #2182
    Added support for ordering of parameters
    
    Regenerated the contract files to bulk update with the new alphabetically ordered parameters
    
    (1937)
    Updated tests with properties that were missing
    
    When properties needed to be backed by fields, some properties were not rendered. This fixes that
    
    (1937)
    Sorted the url template variables alphabetically
    
    (1937)
    Added unit tests and updated contract tests
    
    (2182)
    Fixed rendering of xml examples
    
    The XmlRootElement wasnt taken into consideration when figuring out the xml root element name
    
    (2230)
    Added tests to verify another nested/recursive defenition
    
    resolves #2282
    Added tests around nested recursive types
    
    (1827)
    Added property to test the changes
    
    Also up-revved the swagger core library that contains the fix for rendering examples. Also updated the contract tests to reflect this change.
    
    (1964)
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Fixed regression that renders allowEmptyValues in model properties
    
    Per 2.0 spec this is only rendered on parameters (not body parameters). So we add this to parameter and remove it from model properties.
    
    (2204)
    Demonstrated bug where request params were marked required
    
    This test demonstrates that the request param comes back as not required given the scenario describes in the issue
    
    (2268)
    Demonstrated reported issue is working as designed
    
    relates to #1881
    Added better support for rendering examples
    
    (2249)
    Fixed the model and model property comparison
    
    In the course of fixing the tests, fixed the equals and hashcode implementation of model and property, this is important in limiiting the litering of models in the spec if this is incorrect.
    
    (2056)
    Added example to demonstrate overriding example value
    
    resolves #2161
    Fixed the NPE when rendering complex path variable
    
    When we have a complex path variable that is ignored via @ApiIgnore. Then the parameter type resolution falls back to using the ApiImplicitParam annotation value for parameter type (query, form etc.) As a result when its empty it ends up with a null value. The right thing to happen in this case is for the developer to fill in the type correctly to fix the problem.
    
    This address that case of the NPE but doesnt try to provide a clever solution. Thus the example will render the operation to indicate that the bar parameter is a body parameter.
    
    resolves #2148
    Added support for allowEmptyValue
    
    (2021)
    Fixed an issue with render ApiImplicitParams
    
    When the api implicit params does not indicate the type the parameter is rendered as (cookie, header, query etc.) it treats it as a body type. This fixes to not update the parameter type if its blank.
    
    In addition this example demonstrates how to fix the reported issue via a contract test.
    
    fixes #2029
    Made title synonmous with name for models
    
    fixes #2139
    Test to prove ConstructorProperties works
    
    (1926)
    Changed the type reader to treat request part as formData
    
    (1965)
    Fixed bug involving complex params in multipart requests
    
    When we receive multipart form variables of complex types we were not rendering the complex types that would come as json payloads in the body. This fixes that. It also addresses handling multiple files in a multipart request.
    
    (1965)
    Issue with not respecting response classes
    
    Demonstrates that issue #1887 is not reproducable. The only change to this example is the fact that we return ResponseEntity rather than a CompletableFuture which is a java 7/8 construct. In any case those can be replaced with ResponseEntity using an alternate type rule
    
    fixes #1887
    Added additional logging around duplicate detection
    
    Unable to reproduce the reported issue. Added additional logging around duplicates.
    
    resolves #1894
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Added test for complex type as path variable or request param
    
    (2107)
    Added tests to prove the problem is fixed
    
    (2096)
    Fixed parameter type for params with multiple annoations
    
    When a parameter is annotated with a RequestBody and a ModelAttribute we prioritize the model to appear as if it were a request body. When that happens we should not try and process the parameter as a model attribute. When this happens we log a warning and treat it as a body parameter regardless.
    
    (2118)
    Fix to prevent expansion of request/path params
    
    (2114)
    Map exclusive min / max in EnumMapper
    Add tests for the #2081
    Added support for xml traits in properties
    
    Modified the sample contract test and also handled the case where names and namespaces were not specified.
    
    (1907)
    Added contract test for xml models
    
    (1907)
    fixup! Removed erroneous xml decorations on models
    add some tests
    Fixed tests that got missed
    
    resolves #1916
    Demonstrates @RequestParam(required=true|false)
    
    resolves #1939
    Fixed all the contract tests that failed due to the change.
    Fixed bug with tags not showing up on combied request handlers
    
    This was because we were not using the controller annotations and looking at operation annotations incorrectly.
    
    (1841)
    Added breaking test to demonstrate nullable expandable parameters
    
    Fixed the contracts accordingly
    
    (1864)
    Fixed test
    
    #1819
    Added tests to demonstrate nested enums
    
    resolves #1819
    Introduced spring data rest endpoints
    
    This is in preparation to create a contract test to watch the contract evolving and also serve as a safety net for breaking changes
    
    (1623)
    Added the operation spec to the contract
    
    (1749)
    Added test for multiple model attributes in controller
    
    resolves #1778
    Demonstrated rendering of Double model property
    
    resolves #1777
    Added test to demonstrate response type precedence
    
    Demonstrates how  `@ApiOperation#response` contributes to responses overriding what is specified in `@ApiResponse#response`.
    
    resolves #1750
    Enabled the api listing scanner plugin
    
    Without enabling the plugin in the plugin registry, the beans will not be registered with the plugin registry. Which explains why it was not getting picked up. Interestingly this is also a great example of how one can register fake operations, not represented/backed by the application.
    
    fixes #1767
    Updated the test contracts
    
    (1740)
    Added test to prove default values work
    
    resolves #1734
    Demonstrates fix for void responses
    
    (1722)
    closes #1722
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Demonstration that it is working as expected
    
    (1697)
    Add tests for custom File type
    
    (1632)
    Demonstrates api model property for 1676
    
    closes #1676
    Fixed the conversion of byte[] to string with byte format
    
    (1605)
    Updated the tests to use the random port
    
    For some reason these were not failing tests :-o!!
    
    (1621)
    Updated tests and contracts to account for the new rules
    Fixed the bug with rendering responses with Map of Lists
    
    fixes #1475
    Fixed the tests and the contracts to reflect the improved model attribute support
    Synced the contracts with the output
    Fixed the classmate bug for recursively generic types
    
    The the problem was the classmate would resolve Resource#links as List<Link<String>> rather than List<Link> causing the type substitution to not work
    
    fixes #1440
    Added global tags to the documentation
    
    fixes #1420
    Demonstrated the springfox for Type->Primitive works as expected
    
    resolves #1376
    java.sql.Date should become a "date" in JSON Schema output, according to documentation
    Updated the example to return a map of string -> string
    
    resolves #1324
    Added java.sql.Date as a native primitive type
    
    fixes #1162
    Fixed the issue with implicit collection params
    
    the model reference did not take into account the allowMultiples when rendering
    
    fixes #1209
    Fixed broken test
    
    #1306
    Fixed an issue where Maps as parameters were not rendered correctly
    
    fixes #1306
    Added support for Contact as a first class object
    Reformatted the spec output files to match the style guide
    Pulled all the functional tests into one test so that it
    
    does not incur the overhead of starting up tomcat twice
    #773 Don't provide a default values for operation notes/description.
    #675 Initial approach to adding @Api(description) to the tags output
    Fixing json whitespace
    Applying PR comments, removing nickname for uniqueId
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Prefer a random port for tests
    
    fixes #636
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Skip rendering void models
    Added test for swagger 2.0
    
    Removed pet store from swagger 1.2 test
    Added cyclic stucture tests
    
    (2022)
    Enhancement of merging algorithm.
    Regenerated the contracts after removing extraneous properties
    
    (2022)
    Updated the contract tests
    
    The contracts are 95% the same, except for some bug fixes that the old model had
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Regenerated contracts with sorted produces/consumes/protocols/models
    
    (2022)
    Updated the contracts after upgrade to latest swagger library
    
    (2503)
    Moved the maybeWriteToFile above the assertion
    
    This way when there is an assertion failure we still write the changed contract file to disk. Also update the contracts based on the refresh after adding the new test
    
    (2219)
    Added support for ordering of parameters
    
    Regenerated the contract files to bulk update with the new alphabetically ordered parameters
    
    (1937)
    Made title synonmous with name for models
    
    fixes #2139
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Removed erroneous xml decorations on models
    
    (1907)
    add some tests
    Fixed all the contract tests that failed due to the change.
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Updated the tests to use the random port
    
    For some reason these were not failing tests :-o!!
    
    (1621)
    Synced the contracts with the output
    Added support for Contact as a first class object
    Reformatted the spec output files to match the style guide
    Updated the model mapping to be spec compliant
    Fixed issue where the global produces/consumes did not propogate
    
    fixes #1115
    Pulled all the functional tests into one test so that it
    
    does not incur the overhead of starting up tomcat twice
    #801 #810 Add proper support for enums in response values and in schema objects
    #773 Don't provide a default values for operation notes/description.
    #675 Initial approach to adding @Api(description) to the tags output
    Filter properties that are marked as ignorable
    
    fixes #752
    Add tests to demonstrate using groovy models for services
    
    related to #752
    Added the json ignores model plugin
    
    Also added backing tests that demonstrate this feature
    
    (2613)
    Regenerated the contracts after removing extraneous properties
    
    (2022)
    Upgraded depdendencies
    
    Adjusted the logging from info => trace
    
    (2022)
    Fixed typos in contracts
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Regenerated contracts with sorted produces/consumes/protocols/models
    
    (2022)
    #2932: Minor version upgrades of spring dependencies. Aligned contract tests with Spring HATEOAS 1.x. Fixed wrong client encoding used in tests.
    #182
    
    Fix sort ordering.
    fix discriminator usage in test templates
    test fix
    Contract tests.
    Updated contracts
    
    (2516)
    Updated the contracts after upgrade to latest swagger library
    
    (2503)
    Made the spec that is generated compliant (as far as possible)
    
    Added xml attributes and removed content where it wasnt appropriate
    
    (2311)
    Updated the contracts to reflect the model shape as prescribed by HAL
    
    (2311)
    Fixed a bug where finders were not correctly represented
    
    (2311)
    #2311: springfox-data-rest: fix EntitySearchExtractor return type
    Moved the maybeWriteToFile above the assertion
    
    This way when there is an assertion failure we still write the changed contract file to disk. Also update the contracts based on the refresh after adding the new test
    
    (2219)
    Added support for ordering of parameters
    
    Regenerated the contract files to bulk update with the new alphabetically ordered parameters
    
    (1937)
    Fixed rendering of xml examples
    
    The XmlRootElement wasnt taken into consideration when figuring out the xml root element name
    
    (2230)
    Fixed regression that renders allowEmptyValues in model properties
    
    Per 2.0 spec this is only rendered on parameters (not body parameters). So we add this to parameter and remove it from model properties.
    
    (2204)
    #1773 contract-tests: contract changed with Spring Data Kay
    Upgraded libraries prior to release
    
    (1899)
    Bug fixes.
    Added support for Pageable parameters
    
    Added a convention that looks up the property names from the rest configuration and provides an alternative type that renders parameters accordingly.
    
    resolves #2063
    Added tests to demonstrate spring data rest base path support
    
    resolves #1932
    Fixes for contract tests.
    Made title synonmous with name for models
    
    fixes #2139
    Only document exported resources
    
    fixes #2072
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Added support for xml traits in properties
    
    Modified the sample contract test and also handled the case where names and namespaces were not specified.
    
    (1907)
    Removed erroneous xml decorations on models
    
    (1907)
    Fixed issue with incorrect naming of operations
    
    (2025)
    add some tests
    Fixed tests that got missed
    
    resolves #1916
    fix #1882 by making EntitySearchExtractor know @Param , with test case.
    Fixed all the contract tests that failed due to the change.
    Added PATCH support for spring-data-rest
    
    Also removed id as a parameter for entity save via POST
    
    fixes #1839, #1866
    Added support for BasePathAware controllers
    
    Also added json/hal support for find all method.
    
    #1623
    Made the property identifiers reflect the correct name
    
    (1623)
    Added support for property item accessors
    
    (1623)
    Fixed associations to use PUT/POST/PATCH
    
    Get is not the appropriate method that it shouldve been using
    
    (1623)
    Fixed rendering of Collection<T>
    
    (1623)
    Adding the right media types and responses
    
    (1623)
    Fixed the naming of the actions to be entity sensitive
    
    (1623)
    Added test case for annoations
    Fixed the descriptions of tags
    
    (1623)
    Major changes to accomodate controller-less specs
    Added other endpoints to the contract as well
    
    (1623)
    Updated contracts
    
    (1623)
    Added POST to create resource
    Fixed the search query representation
    
    (1623)
    Initial work to re-write SDR support
    
    This work is loosely based on the grails work just to maintain
    consistency in the extensions.
    
    (1623)
    Introduced spring data rest endpoints
    
    This is in preparation to create a contract test to watch the contract evolving and also serve as a safety net for breaking changes
    
    (1623)
    Fixed issue rendering file input as model attribute
    
    fixes #1370
    Updated the tests for multipart support
    
    (3364)
    Updated the tests
    
    (3377)
    Added test to demonstrate optional
    
    (2831)
    Modified feature demonstration example
    
    The example prior was incorrect and wouldve generated the wrong model (and generated the ERROR message in the logs that was reported). This fixes the example and the corresponding contract
    
    (3380)
    Fixed the handling of empty values from ApiParam
    
    (3002)
    Regenerated the contracts after removing extraneous properties
    
    (2022)
    Updated the contract tests
    
    The contracts are 95% the same, except for some bug fixes that the old model had
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Regenerated contracts with sorted produces/consumes/protocols/models
    
    (2022)
    Fixed the feature demonstration tests
    
    (2022)
    fix discriminator usage in test templates
    Contract tests.
    Contract fix for Jackson 2.9+ behavior change
    #1570 Add examples support
    Updated contracts
    
    (2516)
    Updated the contracts after upgrade to latest swagger library
    
    (2503)
    Updated the contract tests to respect allowEmptyValue constraint
    
    Only query/formData parameters should render allowEmptyValue settings
    
    (2419)
    Demonstrated resolution for string examples
    
    When providing an example for string based properties, they need to be single quoted. Also fixed the build
    
    related to #2469
    Added support for public model attribute fields
    
    In the process unearth an example to support anyOf (related to #2490).
    
    fixes #2423
    Updated the feature demonstration service after stabilization of rendering
    
    (2415)
    Fixed allowable range on string properties
    
    For string properties the allowable ranges should be rendered as max length and min length properties
    
    (2415)
    Added contract tests for inhertance
    
    (1151)
    (868)
    Added contract tests for example based features
    
    (853)
    Moved the maybeWriteToFile above the assertion
    
    This way when there is an assertion failure we still write the changed contract file to disk. Also update the contracts based on the refresh after adding the new test
    
    (2219)
    Added support for ordering of parameters
    
    Regenerated the contract files to bulk update with the new alphabetically ordered parameters
    
    (1937)
    Fixed regression that renders allowEmptyValues in model properties
    
    Per 2.0 spec this is only rendered on parameters (not body parameters). So we add this to parameter and remove it from model properties.
    
    (2204)
    Fixed the model and model property comparison
    
    In the course of fixing the tests, fixed the equals and hashcode implementation of model and property, this is important in limiiting the litering of models in the spec if this is incorrect.
    
    (2056)
    Added documentation on how to override loose body params
    
    This is to document cases where we losely document method parameters that come is as stringified json but are actual types internal to the service.
    
    fixes #2031
    Added support for allowEmptyValue
    
    (2021)
    Made title synonmous with name for models
    
    fixes #2139
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Removed erroneous xml decorations on models
    
    (1907)
    add some tests
    Fixed all the contract tests that failed due to the change.
    correct spelling, fix typos
    (issue #1896)
    integration tests with errors
    Introduced spring data rest endpoints
    
    This is in preparation to create a contract test to watch the contract evolving and also serve as a safety net for breaking changes
    
    (1623)
    Fixed the model attribute expander for list of enums
    
    fixes #1571
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Added contract tests to verify conventions work
    
    Here we add `PetWithSerializer` type in various contexts and verify that
    it is always honors the jackson annotations.
    
    (1490)
    Updated the tests to demonstrate operation combination
    
    Here we introduce two operations that differ only by media type and accordingly expect the changes to reflect in the contracts.
    
    (1367)
    Relaxed the requirement for getters/setters on expandables
    
    Since we have a check for recursively defined model attributes, there is no need for this check any more.
    
    (1603)
    Updated the tests to use the random port
    
    For some reason these were not failing tests :-o!!
    
    (1621)
    Fixed issue with non-generic Map types
    
    fixes #1562
    Updated tests and contracts to account for the new rules
    Correctly represent byte arrays
    
    fixes #1430
    Added better support for BigDecimal & BigInteger
    
    fixes #1432
    Fixed the bug with rendering responses with Map of Lists
    
    fixes #1475
    Fixed the tests and the contracts to reflect the improved model attribute support
    Synced the contracts with the output
    Added support for allowable range values
    
    fixes #1244
    Fixed the enums in parameters
    
    fixes #1037
    Added support for Contact as a first class object
    Reformatted the spec output files to match the style guide
    Updated the model mapping to be spec compliant
    Fixed to better handle indeterminate primary member
    
    when there are multiple accessors or mutators the parsing of model properties crashes... atleast as of jackson 2.6.x
    
    fixes #1129
    Fixed broken tests
    
    related to #956
    Updated mappers to support 2d arrays for swagger2
    
    swagger 1.2 does not (and will not support) 2d arrays
    Centralized model ref creation and removed dupication
    Fixed issue where the global produces/consumes did not propogate
    
    fixes #1115
    Updated the dependencies
    
    related to #1055
    related to #927, #921, #938 (spring 3.x support)
    related to #939
    Pulled all the functional tests into one test so that it
    
    does not incur the overhead of starting up tomcat twice
    Added a test for a primitive body parameter that does not have a format
    Fix generation of "schema" section for a "body" parameter to contain correct "type" & "format"
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Upgraded versions
    
    fixes #906
    Updated the model property resolution to use the accessors/factory methods
    
    and constructors from the bean that jackson infers. This fixes a problem where scala
    classes do not participate in the property inference. This also implements the long
    standing feature request to support constructor and @JsonCreator annotated factory methods
    that are the primary source for properties.
    Tests to verify Map<String, Map<String, Example>> is rendered correctly
    
    resolves #817
    Reverted the changes so that the contracts are the same as pre-this change
    
    related to #682
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Fixes the rendering of api which allows uploading of multiple multipart files
    
    fixes #837
    Additional test cases for read only flag
    
    Test case for read only flag in swagger 2, and no impact to swagger 1
    add support for vendor extensions in operations
    
    
    
    Fixes #824
    #773 Don't provide a default values for operation notes/description.
    #675 Initial approach to adding @Api(description) to the tags output
    Fixes field properties provider issue found while fixing the code coverage build issue
    
    Uncovered the fact that the field model properties provider was working
    incorrectly. This fixes that problem also removed some ignored tests.
    
    related to #752
    Added support for list of maps
    
    fixes #740
    Fixes the default rules such that Map<String, String> is not rendered as
    
    an Object. fixes #747
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Fixing json whitespace
    Applying PR comments, removing nickname for uniqueId
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Prefer a random port for tests
    
    fixes #636
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Render primitive body parameters correctly
    Skip rendering void models
    Added test for swagger 2.0
    
    Removed pet store from swagger 1.2 test
    Regenerated contracts with sorted produces/consumes/protocols/models
    
    (2022)
    Moved the maybeWriteToFile above the assertion
    
    This way when there is an assertion failure we still write the changed contract file to disk. Also update the contracts based on the refresh after adding the new test
    
    (2219)
    Added support for ordering of parameters
    
    Regenerated the contract files to bulk update with the new alphabetically ordered parameters
    
    (1937)
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Updated the tests to use the random port
    
    For some reason these were not failing tests :-o!!
    
    (1621)
    Synced the contracts with the output
    Added support for Contact as a first class object
    Reformatted the spec output files to match the style guide
    Prefer a random port for tests
    
    fixes #636
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Added test for swagger 2.0
    
    Removed pet store from swagger 1.2 test
    Fixed all the contract tests that failed due to the change.
    correct spelling, fix typos
    (issue #1896)
    integration tests with errors
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Added support for Contact as a first class object
    Reformatted the spec output files to match the style guide
    Updated the model mapping to be spec compliant
    Added support for rendering tags defined in @ApiOperation
    
    fixes #675
    #773 Don't provide a default values for operation notes/description.
    Fixing json whitespace
    Applying PR comments, removing nickname for uniqueId
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Prefer a random port for tests
    
    fixes #636
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Added test for swagger 2.0
    
    Removed pet store from swagger 1.2 test
    Regenerated contracts with sorted produces/consumes/protocols/models
    
    (2022)
    Updated the ApiListingScanner extensibility example
    
    The example used a new caching operation generator, so the name space of operations would not be accurate when the contracts are generated. Changed the example, the documentation and the affected tests
    
    (2278)
    Changed the url for the `different` endpoint
    
    This way the the tests reflect the selection of the `different` endpoints only in the new contract
    
    (2219)
    Added contract test for explicitly created group
    
    When we add an api listing without a backing endpoint, this contract verifies that the new contract is picked up in a different group.
    
    (2219)
    Regenerated the contracts after removing extraneous properties
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Regenerated contracts with sorted produces/consumes/protocols/models
    
    (2022)
    Updated the contracts after upgrade to latest swagger library
    
    (2503)
    Moved the maybeWriteToFile above the assertion
    
    This way when there is an assertion failure we still write the changed contract file to disk. Also update the contracts based on the refresh after adding the new test
    
    (2219)
    Added support for ordering of parameters
    
    Regenerated the contract files to bulk update with the new alphabetically ordered parameters
    
    (1937)
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Updated the tests to use the random port
    
    For some reason these were not failing tests :-o!!
    
    (1621)
    Synced the contracts with the output
    Added support for Contact as a first class object
    Reformatted the spec output files to match the style guide
    Pulled all the functional tests into one test so that it
    
    does not incur the overhead of starting up tomcat twice
    #773 Don't provide a default values for operation notes/description.
    #675 Initial approach to adding @Api(description) to the tags output
    Fixing json whitespace
    Applying PR comments, removing nickname for uniqueId
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Prefer a random port for tests
    
    fixes #636
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Skip rendering void models
    Added test for swagger 2.0
    
    Removed pet store from swagger 1.2 test
    Updated the tests
    
    (3377)
    Regenerated the contracts after removing extraneous properties
    
    (2022)
    Updated the contract tests
    
    The contracts are 95% the same, except for some bug fixes that the old model had
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Regenerated contracts with sorted produces/consumes/protocols/models
    
    (2022)
    Updated the contracts after upgrade to latest swagger library
    
    (2503)
    Updated the contract tests to respect allowEmptyValue constraint
    
    Only query/formData parameters should render allowEmptyValue settings
    
    (2419)
    Moved the maybeWriteToFile above the assertion
    
    This way when there is an assertion failure we still write the changed contract file to disk. Also update the contracts based on the refresh after adding the new test
    
    (2219)
    Added support for ordering of parameters
    
    Regenerated the contract files to bulk update with the new alphabetically ordered parameters
    
    (1937)
    Fixed regression that renders allowEmptyValues in model properties
    
    Per 2.0 spec this is only rendered on parameters (not body parameters). So we add this to parameter and remove it from model properties.
    
    (2204)
    Made title synonmous with name for models
    
    fixes #2139
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Fixed all the contract tests that failed due to the change.
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Updated the tests to use the random port
    
    For some reason these were not failing tests :-o!!
    
    (1621)
    Updated tests and contracts to account for the new rules
    Synced the contracts with the output
    Fixed the enums in parameters
    
    fixes #1037
    Added support for Contact as a first class object
    Reformatted the spec output files to match the style guide
    Updated the model mapping to be spec compliant
    Centralized model ref creation and removed dupication
    Fixed issue where the global produces/consumes did not propogate
    
    fixes #1115
    Fixed the unique operation name generation
    
    This is to align with the advertized expectation that when a nickname is
    supplied then the unique id for the operation would respect that intent
    as much as possible without sacrificing the ability to ONLY generate unique
    operation names.
    
    fixes #1066
    Pulled all the functional tests into one test so that it
    
    does not incur the overhead of starting up tomcat twice
    Upgraded versions
    
    fixes #906
    Updated the model property resolution to use the accessors/factory methods
    
    and constructors from the bean that jackson infers. This fixes a problem where scala
    classes do not participate in the property inference. This also implements the long
    standing feature request to support constructor and @JsonCreator annotated factory methods
    that are the primary source for properties.
    Made the swagger contract tests consistent with respect to method name generation
    
    Over different runs the ordering of the operations determined the names
    of the operations in the case of multiple operations with the same name
    
    related to #682, #825
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    @ApiResponse maps to wrong ApiModel-definition name when overriden
    
    fixes #793
    #773 Don't provide a default values for operation notes/description.
    #675 Initial approach to adding @Api(description) to the tags output
    Fixes the rendering of request bodies that are required by default
    
    fixes #734
    Fixed the issue rendering parameters that are either enums or arrays of enums
    
    fixes #664
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Fixing json whitespace
    Applying PR comments, removing nickname for uniqueId
    Adding ability to optionally populate nickname into operationId for swagger 2.0 implementations
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Prefer a random port for tests
    
    fixes #636
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Render primitive body parameters correctly
    Added test for swagger 2.0
    
    Removed pet store from swagger 1.2 test
    Regenerated the contracts after removing extraneous properties
    
    (2022)
    Updated the contract tests
    
    The contracts are 95% the same, except for some bug fixes that the old model had
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Regenerated contracts with sorted produces/consumes/protocols/models
    
    (2022)
    Updated the contracts after upgrade to latest swagger library
    
    (2503)
    Updated the contract tests to respect allowEmptyValue constraint
    
    Only query/formData parameters should render allowEmptyValue settings
    
    (2419)
    Fixed allowable range on string properties
    
    For string properties the allowable ranges should be rendered as max length and min length properties
    
    (2415)
    Sorted the contracts by path
    
    Also sorted the parameters by name. These are the contacts that were materially affected by the change.
    
    Also includes, Changes that prioritize the parameter merge priority. For e.g. request condition parameters have lower priority on determining types than actual parameters.
    
    NOTE: swagger 1.2 contracts also sort by description, to make it more
    consistent
    
    (1831)
    Moved the maybeWriteToFile above the assertion
    
    This way when there is an assertion failure we still write the changed contract file to disk. Also update the contracts based on the refresh after adding the new test
    
    (2219)
    Added support for ordering of parameters
    
    Regenerated the contract files to bulk update with the new alphabetically ordered parameters
    
    (1937)
    Sorted the url template variables alphabetically
    
    (1937)
    Fixed regression that renders allowEmptyValues in model properties
    
    Per 2.0 spec this is only rendered on parameters (not body parameters). So we add this to parameter and remove it from model properties.
    
    (2204)
    Fixed the model and model property comparison
    
    In the course of fixing the tests, fixed the equals and hashcode implementation of model and property, this is important in limiiting the litering of models in the spec if this is incorrect.
    
    (2056)
    Made title synonmous with name for models
    
    fixes #2139
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Add support for exclusive ranges #2088
    Fixed all the contract tests that failed due to the change.
    correct spelling, fix typos
    (issue #1896)
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Updated the tests to use the random port
    
    For some reason these were not failing tests :-o!!
    
    (1621)
    Fixed the bug with rendering responses with Map of Lists
    
    fixes #1475
    Fixed the tests and the contracts to reflect the improved model attribute support
    Synced the contracts with the output
    Added support for allowable range values
    
    fixes #1244
    Added support for Contact as a first class object
    Reformatted the spec output files to match the style guide
    Updated the model mapping to be spec compliant
    Fixed formatting of test json
    
    related to #1115
    Fixed issue where the global produces/consumes did not propogate
    
    fixes #1115
    Pulled all the functional tests into one test so that it
    
    does not incur the overhead of starting up tomcat twice
    Added support for uri templates in query params
    Added decorator for query parameters
    Made the swagger contract tests consistent with respect to method name generation
    
    Over different runs the ordering of the operations determined the names
    of the operations in the case of multiple operations with the same name
    
    related to #682, #825
    Reverted the changes so that the contracts are the same as pre-this change
    
    related to #682
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    #773 Don't provide a default values for operation notes/description.
    #675 Initial approach to adding @Api(description) to the tags output
    Fixed the rendering of MultipartFile
    
    fixes #768
    Fixes the rendering of request bodies that are required by default
    
    fixes #734
    Fixed the issue rendering parameters that are either enums or arrays of enums
    
    fixes #664
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Fixing json whitespace
    Applying PR comments, removing nickname for uniqueId
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Prefer a random port for tests
    
    fixes #636
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Added support for rendering maps in swagger 2
    Skip rendering void models
    Added test for swagger 2.0
    
    Removed pet store from swagger 1.2 test
    Fixed the swagger json to match the currently supported output
    Updated models so that allowable values are rendered
    Added support for rendering security definitions and authorizations for operations
    Added support for tags
    
    Also adjusted the swagger.json to account for the tags not having all the elements
    Fixed syntax error in json
    Updated the swagger.json contract with further refinements
    Adjusted the expected swagger.json based on the example in petstore.swagger.io
    Fixed for the responses not getting populated
    
    Also 200-OK messages needed to use the operations return type if nothing was specified in the response message
    Fix the mappers to not be create new Paths for every operation
    Added swagger2 contract and fixed bug with operations not getting rendered
    Updated the tests and inlined the services and models
    
    (2022)
    Regenerated contracts with sorted produces/consumes/protocols/models
    
    (2022)
    Updated the contracts after upgrade to latest swagger library
    
    (2503)
    Moved the maybeWriteToFile above the assertion
    
    This way when there is an assertion failure we still write the changed contract file to disk. Also update the contracts based on the refresh after adding the new test
    
    (2219)
    Added support for ordering of parameters
    
    Regenerated the contract files to bulk update with the new alphabetically ordered parameters
    
    (1937)
    Fixed the model and model property comparison
    
    In the course of fixing the tests, fixed the equals and hashcode implementation of model and property, this is important in limiiting the litering of models in the spec if this is incorrect.
    
    (2056)
    Made title synonmous with name for models
    
    fixes #2139
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Fixed all the contract tests that failed due to the change.
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Updated the tests to use the random port
    
    For some reason these were not failing tests :-o!!
    
    (1621)
    Synced the contracts with the output
    Added support for Contact as a first class object
    Reformatted the spec output files to match the style guide
    Updated the model mapping to be spec compliant
    Fixed formatting of test json
    
    related to #1115
    Fixed issue where the global produces/consumes did not propogate
    
    fixes #1115
    Pulled all the functional tests into one test so that it
    
    does not incur the overhead of starting up tomcat twice
    #773 Don't provide a default values for operation notes/description.
    #675 Initial approach to adding @Api(description) to the tags output
    Filter properties that are marked as ignorable
    
    fixes #752
    Add tests to demonstrate using groovy models for services
    
    related to #752
    Regenerated the contracts after removing extraneous properties
    
    (2022)
    Regenerated contracts with sorted produces/consumes/protocols/models
    
    (2022)
    Updated the contracts after upgrade to latest swagger library
    
    (2503)
    Added support for ordering of parameters
    
    Regenerated the contract files to bulk update with the new alphabetically ordered parameters
    
    (1937)
    Fixed regression that renders allowEmptyValues in model properties
    
    Per 2.0 spec this is only rendered on parameters (not body parameters). So we add this to parameter and remove it from model properties.
    
    (2204)
    Added support for allowEmptyValue
    
    (2021)
    Made title synonmous with name for models
    
    fixes #2139
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Fixed all the contract tests that failed due to the change.
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Synced the contracts with the output
    Added support for Contact as a first class object
    Reformatted the spec output files to match the style guide
    Updated the model mapping to be spec compliant
    Fixed issue where the global produces/consumes did not propogate
    
    fixes #1115
    Fixed behavior on operations differing only by ParamsConditionRequest
    
    When operations only differ by parmams condition with set value e.g. a=1 and a=2 then the operations were collapsed
    
    fixes #1114
    Updated the tests
    
    (3377)
    Regenerated the contracts after removing extraneous properties
    
    (2022)
    Updated the contract tests
    
    The contracts are 95% the same, except for some bug fixes that the old model had
    
    (2022)
    Added support for implicit parameter determination
    
    This is so that we can parallelly construct the parameter to the new model. Made the existing OperationBuilderPlugins also infer the RequestParameters
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Merged changes from model enhancements
    Regenerated contracts with sorted produces/consumes/protocols/models
    
    (2022)
    Contract tests.
    Fix for contract tests.
    Updated the contracts after upgrade to latest swagger library
    
    (2503)
    Updated the contract tests to respect allowEmptyValue constraint
    
    Only query/formData parameters should render allowEmptyValue settings
    
    (2419)
    Fixed allowable range on string properties
    
    For string properties the allowable ranges should be rendered as max length and min length properties
    
    (2415)
    Added support for ordering of parameters
    
    Regenerated the contract files to bulk update with the new alphabetically ordered parameters
    
    (1937)
    Updated tests with properties that were missing
    
    When properties needed to be backed by fields, some properties were not rendered. This fixes that
    
    (1937)
    Fixes for contract tests.
    Fixed regression that renders allowEmptyValues in model properties
    
    Per 2.0 spec this is only rendered on parameters (not body parameters). So we add this to parameter and remove it from model properties.
    
    (2204)
    Fixed the model and model property comparison
    
    In the course of fixing the tests, fixed the equals and hashcode implementation of model and property, this is important in limiiting the litering of models in the spec if this is incorrect.
    
    (2056)
    Fixes for contract tests.
    Added support for allowEmptyValue
    
    (2021)
    Made title synonmous with name for models
    
    fixes #2139
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Fixed all the contract tests that failed due to the change.
    Added breaking test to demonstrate nullable expandable parameters
    
    Fixed the contracts accordingly
    
    (1864)
    correct spelling, fix typos
    (issue #1896)
    Fixed legacy tests to expand parameters
    
    Because these parameters had an annotation, these parameters were treated as request body. This fixes that.
    
    (1749)
    Fixed formatting
    
    (1749)
    Demonstrated intricate generics support
    
    resolves #1631
    Fixed the issue where the parameter requiredness was incorrect
    
    Delegates to the base jackson property to tell us if a parameter property is required or not
    
    fixes #1727
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Made headers collection a sortable map
    
    Because plain hashmaps dont guarantee order we use a tree map to preseve the ordering based on header key.
    
    (1651)
    Synced the contracts with the output
    Added support for allowable range values
    
    fixes #1244
    Added support for Contact as a first class object
    Reformatted the spec output files to match the style guide
    Updated the model mapping to be spec compliant
    Fixed issue where the global produces/consumes did not propogate
    
    fixes #1115
    add unit tests
    Pulled all the functional tests into one test so that it
    
    does not incur the overhead of starting up tomcat twice
    Removed the dependence on ResourceGroupingStrategy to get default tags
    
    also the ApiListingReference scanner no longer needs the resource grouping strategy to create
    resource groups
    
    relates to #454
    resolves #919
    Added support for rendering tags defined in @ApiOperation
    
    fixes #675
    Updated the model property resolution to use the accessors/factory methods
    
    and constructors from the bean that jackson infers. This fixes a problem where scala
    classes do not participate in the property inference. This also implements the long
    standing feature request to support constructor and @JsonCreator annotated factory methods
    that are the primary source for properties.
    Made the swagger contract tests consistent with respect to method name generation
    
    Over different runs the ordering of the operations determined the names
    of the operations in the case of multiple operations with the same name
    
    related to #682, #825
    Fixes the issue where the responseClass in ApiOperation is ignored
    
    fixes #805
    #773 Don't provide a default values for operation notes/description.
    #675 Initial approach to adding @Api(description) to the tags output
    Fixed the issue rendering parameters that are either enums or arrays of enums
    
    fixes #664
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Fixing json whitespace
    Applying PR comments, removing nickname for uniqueId
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Prefer a random port for tests
    
    fixes #636
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Skip rendering empty api keys authorization scopes
    Skip rendering void models
    Fixed the swagger json to match the currently supported output
    Updated models so that allowable values are rendered
    Added support for rendering security definitions and authorizations for operations
    Added support for tags
    
    Also adjusted the swagger.json to account for the tags not having all the elements
    Fixed syntax error in json
    Updated the swagger.json contract with further refinements
    Adjusted the expected swagger.json based on the example in petstore.swagger.io
    Fixed for the responses not getting populated
    
    Also 200-OK messages needed to use the operations return type if nothing was specified in the response message
    Fix the mappers to not be create new Paths for every operation
    Added swagger2 contract and fixed bug with operations not getting rendered
    Regenerated the contracts after removing extraneous properties
    
    (2022)
    Updated the contract tests
    
    The contracts are 95% the same, except for some bug fixes that the old model had
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Regenerated contracts with sorted produces/consumes/protocols/models
    
    (2022)
    Updated the contracts after upgrade to latest swagger library
    
    (2503)
    Updated the contract tests to respect allowEmptyValue constraint
    
    Only query/formData parameters should render allowEmptyValue settings
    
    (2419)
    Moved the maybeWriteToFile above the assertion
    
    This way when there is an assertion failure we still write the changed contract file to disk. Also update the contracts based on the refresh after adding the new test
    
    (2219)
    Added support for ordering of parameters
    
    Regenerated the contract files to bulk update with the new alphabetically ordered parameters
    
    (1937)
    Fixed regression that renders allowEmptyValues in model properties
    
    Per 2.0 spec this is only rendered on parameters (not body parameters). So we add this to parameter and remove it from model properties.
    
    (2204)
    Made title synonmous with name for models
    
    fixes #2139
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Removed erroneous xml decorations on models
    
    (1907)
    add some tests
    Fixed all the contract tests that failed due to the change.
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Demonstrate interface annotation inference support
    
    Parameters annotations i.e. `@ApiParam` are not supported on interfaces because it can become a combinatorial problem when you nested/multi-interface subclassing controllers.
    
    relates to #1575
    Updated the tests to use the random port
    
    For some reason these were not failing tests :-o!!
    
    (1621)
    Fixed the tests and the contracts to reflect the improved model attribute support
    Synced the contracts with the output
    Added support for Contact as a first class object
    Reformatted the spec output files to match the style guide
    Fixed issue where the global produces/consumes did not propogate
    
    fixes #1115
    Pulled all the functional tests into one test so that it
    
    does not incur the overhead of starting up tomcat twice
    #773 Don't provide a default values for operation notes/description.
    #675 Initial approach to adding @Api(description) to the tags output
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Fixing json whitespace
    Applying PR comments, removing nickname for uniqueId
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Prefer a random port for tests
    
    fixes #636
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Render primitive body parameters correctly
    Added test for swagger 2.0
    
    Removed pet store from swagger 1.2 test
    Regenerated the contracts after removing extraneous properties
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Updated the contracts after upgrade to latest swagger library
    
    (2503)
    Moved the maybeWriteToFile above the assertion
    
    This way when there is an assertion failure we still write the changed contract file to disk. Also update the contracts based on the refresh after adding the new test
    
    (2219)
    Added support for ordering of parameters
    
    Regenerated the contract files to bulk update with the new alphabetically ordered parameters
    
    (1937)
    Added additional contract tests to test behaviour of when you have a consumes and/or produces defined on the document level and when only on the operation level
    Regenerated the contracts after removing extraneous properties
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Updated the contracts after upgrade to latest swagger library
    
    (2503)
    Moved the maybeWriteToFile above the assertion
    
    This way when there is an assertion failure we still write the changed contract file to disk. Also update the contracts based on the refresh after adding the new test
    
    (2219)
    Added support for ordering of parameters
    
    Regenerated the contract files to bulk update with the new alphabetically ordered parameters
    
    (1937)
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Added additional contract tests to test behaviour of when you have a consumes and/or produces defined on the document level and when only on the operation level
    Fixed issue rendering file input as model attribute
    
    fixes #1370
    Updated the tests for multipart support
    
    (3364)
    Updated the tests
    
    (3377)
    Added test to demonstrate optional
    
    (2831)
    Modified feature demonstration example
    
    The example prior was incorrect and wouldve generated the wrong model (and generated the ERROR message in the logs that was reported). This fixes the example and the corresponding contract
    
    (3380)
    Fixed the handling of empty values from ApiParam
    
    (3002)
    Regenerated the contracts after removing extraneous properties
    
    (2022)
    Updated the contract tests
    
    The contracts are 95% the same, except for some bug fixes that the old model had
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Regenerated contracts with sorted produces/consumes/protocols/models
    
    (2022)
    Fixed the feature demonstration tests
    
    (2022)
    fix discriminator usage in test templates
    Contract tests.
    Contract fix for Jackson 2.9+ behavior change
    #1570 Add examples support
    Updated contracts
    
    (2516)
    Updated the contracts after upgrade to latest swagger library
    
    (2503)
    Updated the contract tests to respect allowEmptyValue constraint
    
    Only query/formData parameters should render allowEmptyValue settings
    
    (2419)
    Demonstrated resolution for string examples
    
    When providing an example for string based properties, they need to be single quoted. Also fixed the build
    
    related to #2469
    Added support for public model attribute fields
    
    In the process unearth an example to support anyOf (related to #2490).
    
    fixes #2423
    Updated the feature demonstration service after stabilization of rendering
    
    (2415)
    Fixed allowable range on string properties
    
    For string properties the allowable ranges should be rendered as max length and min length properties
    
    (2415)
    Added contract tests for inhertance
    
    (1151)
    (868)
    Added contract tests for example based features
    
    (853)
    Moved the maybeWriteToFile above the assertion
    
    This way when there is an assertion failure we still write the changed contract file to disk. Also update the contracts based on the refresh after adding the new test
    
    (2219)
    Added support for ordering of parameters
    
    Regenerated the contract files to bulk update with the new alphabetically ordered parameters
    
    (1937)
    Fixed regression that renders allowEmptyValues in model properties
    
    Per 2.0 spec this is only rendered on parameters (not body parameters). So we add this to parameter and remove it from model properties.
    
    (2204)
    Fixed the model and model property comparison
    
    In the course of fixing the tests, fixed the equals and hashcode implementation of model and property, this is important in limiiting the litering of models in the spec if this is incorrect.
    
    (2056)
    Added documentation on how to override loose body params
    
    This is to document cases where we losely document method parameters that come is as stringified json but are actual types internal to the service.
    
    fixes #2031
    Added support for allowEmptyValue
    
    (2021)
    Made title synonmous with name for models
    
    fixes #2139
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Removed erroneous xml decorations on models
    
    (1907)
    add some tests
    Fixed all the contract tests that failed due to the change.
    correct spelling, fix typos
    (issue #1896)
    Introduced spring data rest endpoints
    
    This is in preparation to create a contract test to watch the contract evolving and also serve as a safety net for breaking changes
    
    (1623)
    Fixed the model attribute expander for list of enums
    
    fixes #1571
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Added contract tests to verify conventions work
    
    Here we add `PetWithSerializer` type in various contexts and verify that
    it is always honors the jackson annotations.
    
    (1490)
    Updated the tests to demonstrate operation combination
    
    Here we introduce two operations that differ only by media type and accordingly expect the changes to reflect in the contracts.
    
    (1367)
    Relaxed the requirement for getters/setters on expandables
    
    Since we have a check for recursively defined model attributes, there is no need for this check any more.
    
    (1603)
    Updated the tests to use the random port
    
    For some reason these were not failing tests :-o!!
    
    (1621)
    Updated tests and contracts to account for the new rules
    Correctly represent byte arrays
    
    fixes #1430
    Added better support for BigDecimal & BigInteger
    
    fixes #1432
    Fixed the bug with rendering responses with Map of Lists
    
    fixes #1475
    Fixed the tests and the contracts to reflect the improved model attribute support
    Synced the contracts with the output
    Added support for allowable range values
    
    fixes #1244
    Fixed the enums in parameters
    
    fixes #1037
    Added support for Contact as a first class object
    Reformatted the spec output files to match the style guide
    Updated the model mapping to be spec compliant
    Fixed to better handle indeterminate primary member
    
    when there are multiple accessors or mutators the parsing of model properties crashes... atleast as of jackson 2.6.x
    
    fixes #1129
    Fixed broken tests
    
    related to #956
    Updated mappers to support 2d arrays for swagger2
    
    swagger 1.2 does not (and will not support) 2d arrays
    Centralized model ref creation and removed dupication
    Fixed formatting of test json
    
    related to #1115
    Fixed issue where the global produces/consumes did not propogate
    
    fixes #1115
    Pulled all the functional tests into one test so that it
    
    does not incur the overhead of starting up tomcat twice
    Added a test for a primitive body parameter that does not have a format
    Fix generation of "schema" section for a "body" parameter to contain correct "type" & "format"
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Upgraded versions
    
    fixes #906
    Updated the model property resolution to use the accessors/factory methods
    
    and constructors from the bean that jackson infers. This fixes a problem where scala
    classes do not participate in the property inference. This also implements the long
    standing feature request to support constructor and @JsonCreator annotated factory methods
    that are the primary source for properties.
    Tests to verify Map<String, Map<String, Example>> is rendered correctly
    
    resolves #817
    Fixed the test and commented the println
    Made the swagger contract tests consistent with respect to method name generation
    
    Over different runs the ordering of the operations determined the names
    of the operations in the case of multiple operations with the same name
    
    related to #682, #825
    Reverted the changes so that the contracts are the same as pre-this change
    
    related to #682
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Fixes the rendering of api which allows uploading of multiple multipart files
    
    fixes #837
    Additional test cases for read only flag
    
    Test case for read only flag in swagger 2, and no impact to swagger 1
    add support for vendor extensions in operations
    
    
    
    Fixes #824
    #773 Don't provide a default values for operation notes/description.
    #675 Initial approach to adding @Api(description) to the tags output
    Fixes field properties provider issue found while fixing the code coverage build issue
    
    Uncovered the fact that the field model properties provider was working
    incorrectly. This fixes that problem also removed some ignored tests.
    
    related to #752
    Added support for list of maps
    
    fixes #740
    Fixes the default rules such that Map<String, String> is not rendered as
    
    an Object. fixes #747
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Fixing json whitespace
    Applying PR comments, removing nickname for uniqueId
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Prefer a random port for tests
    
    fixes #636
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Added an forCodeGeneration option to Docket
    
    Added support for providing the option to specify if the documentation
    is meant to be consumed by code generation or just by swagger-ui
    
    closes #614
    Render primitive body parameters correctly
    Skip rendering void models
    Added test for swagger 2.0
    
    Removed pet store from swagger 1.2 test
    Regenerated the contracts after removing extraneous properties
    
    (2022)
    Updated the contract tests
    
    The contracts are 95% the same, except for some bug fixes that the old model had
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Regenerated contracts with sorted produces/consumes/protocols/models
    
    (2022)
    #2932: Minor version upgrades of spring dependencies. Aligned contract tests with Spring HATEOAS 1.x. Fixed wrong client encoding used in tests.
    #182
    
    Fix sort ordering.
    Contract tests.
    Fix for contract tests.
    Updated the contracts after upgrade to latest swagger library
    
    (2503)
    Moved the maybeWriteToFile above the assertion
    
    This way when there is an assertion failure we still write the changed contract file to disk. Also update the contracts based on the refresh after adding the new test
    
    (2219)
    Added support for ordering of parameters
    
    Regenerated the contract files to bulk update with the new alphabetically ordered parameters
    
    (1937)
    Fixed the model and model property comparison
    
    In the course of fixing the tests, fixed the equals and hashcode implementation of model and property, this is important in limiiting the litering of models in the spec if this is incorrect.
    
    (2056)
    Upgraded libraries prior to release
    
    (1899)
    Additional contract test.
    Fixes for contract tests.
    Made title synonmous with name for models
    
    fixes #2139
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Added support for xml traits in properties
    
    Modified the sample contract test and also handled the case where names and namespaces were not specified.
    
    (1907)
    Removed erroneous xml decorations on models
    
    (1907)
    add some tests
    Fixed all the contract tests that failed due to the change.
    Introduced spring data rest endpoints
    
    This is in preparation to create a contract test to watch the contract evolving and also serve as a safety net for breaking changes
    
    (1623)
    Fixed unwrapping behavior
    
    Instead of being strict and checking the field or accessor directly
    for annotations, we delegate to the jackson databinding infrastructure
    to tell us if a property is unwrapped or not.
    
    (1740)
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Updated the tests to use the random port
    
    For some reason these were not failing tests :-o!!
    
    (1621)
    Improved coverage and upgraded compatibility with boot 1.3.6
    Upgraded the libraries especially the contract tests
    Fixed the tests and the contracts to reflect the improved model attribute support
    Synced the contracts with the output
    Added support for Contact as a first class object
    Reformatted the spec output files to match the style guide
    Updated the model mapping to be spec compliant
    Fixed a bug with unbounded generic parameters and return types
    
    Updated the examples to demonstrate the issue. The downside to this fix is that alternate type
    rules will not apply to these unbounded types. The upside is however we avoid an NPE!
    
    fixes #953
    Fixed issue where the global produces/consumes did not propogate
    
    fixes #1115
    Updated tests to proove multi-variable templated controllers work as expected
    
    closes #953
    Pulled all the functional tests into one test so that it
    
    does not incur the overhead of starting up tomcat twice
    #773 Don't provide a default values for operation notes/description.
    #675 Initial approach to adding @Api(description) to the tags output
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Fixing json whitespace
    Applying PR comments, removing nickname for uniqueId
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Prefer a random port for tests
    
    fixes #636
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Skip rendering void models
    Added test for swagger 2.0
    
    Removed pet store from swagger 1.2 test
    Regenerated the contracts after removing extraneous properties
    
    (2022)
    Updated the contract tests
    
    The contracts are 95% the same, except for some bug fixes that the old model had
    
    (2022)
    Fixed typos in contracts
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Merging master
    #182
    
    Fix sort ordering.
    Contract tests.
    Fix for contract tests.
    Fixes for contract tests.
    Fixed the model and model property comparison
    
    In the course of fixing the tests, fixed the equals and hashcode implementation of model and property, this is important in limiiting the litering of models in the spec if this is incorrect.
    
    (2056)
    Coverage and fixes.
    Bug fixes.
    Additional contract test.
    Regenerated the contracts after removing extraneous properties
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Regenerated contracts with sorted produces/consumes/protocols/models
    
    (2022)
    Updated the contracts after upgrade to latest swagger library
    
    (2503)
    Moved the maybeWriteToFile above the assertion
    
    This way when there is an assertion failure we still write the changed contract file to disk. Also update the contracts based on the refresh after adding the new test
    
    (2219)
    Added support for ordering of parameters
    
    Regenerated the contract files to bulk update with the new alphabetically ordered parameters
    
    (1937)
    Made title synonmous with name for models
    
    fixes #2139
    Removed erroneous xml decorations on models
    
    (1907)
    add some tests
    Fixed all the contract tests that failed due to the change.
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Updated the tests to use the random port
    
    For some reason these were not failing tests :-o!!
    
    (1621)
    Synced the contracts with the output
    Added support for Contact as a first class object
    Reformatted the spec output files to match the style guide
    Updated the model mapping to be spec compliant
    Fixed issue where the global produces/consumes did not propogate
    
    fixes #1115
    Pulled all the functional tests into one test so that it
    
    does not incur the overhead of starting up tomcat twice
    #773 Don't provide a default values for operation notes/description.
    #675 Initial approach to adding @Api(description) to the tags output
    Fixes the rendering of request bodies that are required by default
    
    fixes #734
    Seperated the parameter name inference for swagger 1 and swagger 2
    
    This is also a great example for how to create plugins that only apply to a particular type
    
    Also in addition to this, reset the plugin priority for the swagger plugins to 1000 higher than
    the HIGHEST_PRIORITY. This will give some space to prioritize plugins for JSR validation etc.
    
    Added a significant amount of tests to get the coverage numbers up
    
    related to #671
    Fixing json whitespace
    Applying PR comments, removing nickname for uniqueId
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Prefer a random port for tests
    
    fixes #636
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Added test for swagger 2.0
    
    Removed pet store from swagger 1.2 test
    Updated the contract tests
    
    (3390)
    Sorted the model properties by position and name
    
    resolves #3087
    Fixed issue rendering file input as model attribute
    
    fixes #1370
    Fixed the mapping for form variables and updated the contracts
    
    (3353)
    Updated the tests for multipart support
    
    (3364)
    Added tests and configuration to demonstrate Iterable
    
    resolves #3371, #3022
    Updated the tests
    
    (3377)
    Added example to demonstrate non error messages in logs
    
    (3380)
    Added tests to demonstrate the fixes
    
    (2684)
    Updated the bug examples
    
    (2767)
    Added contract tests for the actual issue
    
    (3351)
    Fixed issue allow allowable values to be overriden
    
    fixes #3321
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Regenerated the contracts after removing extraneous properties
    
    (2022)
    Updated the contract tests
    
    The contracts are 95% the same, except for some bug fixes that the old model had
    
    (2022)
    Added support for implicit parameter determination
    
    This is so that we can parallelly construct the parameter to the new model. Made the existing OperationBuilderPlugins also infer the RequestParameters
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Regenerated contracts with sorted produces/consumes/protocols/models
    
    (2022)
    #2932: Minor version upgrades of spring dependencies. Aligned contract tests with Spring HATEOAS 1.x. Fixed wrong client encoding used in tests.
    fix discriminator usage in test templates
    Contract tests.
    Fix #2822 related to @ApiParam(example="..") not working for @RequestBody
    Reduce diff from master contract files.
    Fix contract tests.
    Adapted behavior of ParameterMapper and added tests.
    Updated the contracts after upgrade to latest swagger library
    
    (2503)
    Updated the contract tests to respect allowEmptyValue constraint
    
    Only query/formData parameters should render allowEmptyValue settings
    
    (2419)
    Demonstrated resolution for string examples
    
    When providing an example for string based properties, they need to be single quoted. Also fixed the build
    
    related to #2469
    Added support for public model attribute fields
    
    In the process unearth an example to support anyOf (related to #2490).
    
    fixes #2423
    Fixed allowable range on string properties
    
    For string properties the allowable ranges should be rendered as max length and min length properties
    
    (2415)
    Demonstrates support for properties of the same type on a model
    
    (2479)
    Verified renaming of model attributes
    
    (2391)
    Verified the behavior of uppercased properties
    
    (2378)
    Verified rendering of extensions on ApiInfo
    
    (2470)
    Updated the contract tests
    
    (2376)
    Updated contract tests
    
    (2368)
    Added native UUID support
    
    fixes #2314
    Added contract tests for example based features
    
    (853)
    Updated the contract tests
    
    (1944)
    Updated the ApiListingScanner extensibility example
    
    The example used a new caching operation generator, so the name space of operations would not be accurate when the contracts are generated. Changed the example, the documentation and the affected tests
    
    (2278)
    Added tests to verify security overrides
    
    (2194)
    Moved the maybeWriteToFile above the assertion
    
    This way when there is an assertion failure we still write the changed contract file to disk. Also update the contracts based on the refresh after adding the new test
    
    (2219)
    Updated contract tests
    
    Contract tests to demonstrate required-ness handling of path variables
    
    (2220)
    Added example for multiple levels of nested wrapped types
    
    relates to #2182
    Added support for ordering of parameters
    
    Regenerated the contract files to bulk update with the new alphabetically ordered parameters
    
    (1937)
    Updated tests with properties that were missing
    
    When properties needed to be backed by fields, some properties were not rendered. This fixes that
    
    (1937)
    Sorted the url template variables alphabetically
    
    (1937)
    Added unit tests and updated contract tests
    
    (2182)
    Fixed rendering of xml examples
    
    The XmlRootElement wasnt taken into consideration when figuring out the xml root element name
    
    (2230)
    Added tests to verify another nested/recursive defenition
    
    resolves #2282
    Added tests around nested recursive types
    
    (1827)
    Added property to test the changes
    
    Also up-revved the swagger core library that contains the fix for rendering examples. Also updated the contract tests to reflect this change.
    
    (1964)
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Fixed regression that renders allowEmptyValues in model properties
    
    Per 2.0 spec this is only rendered on parameters (not body parameters). So we add this to parameter and remove it from model properties.
    
    (2204)
    Demonstrated bug where request params were marked required
    
    This test demonstrates that the request param comes back as not required given the scenario describes in the issue
    
    (2268)
    Demonstrated reported issue is working as designed
    
    relates to #1881
    Added better support for rendering examples
    
    (2249)
    Fixed the model and model property comparison
    
    In the course of fixing the tests, fixed the equals and hashcode implementation of model and property, this is important in limiiting the litering of models in the spec if this is incorrect.
    
    (2056)
    Added example to demonstrate overriding example value
    
    resolves #2161
    Fixed the NPE when rendering complex path variable
    
    When we have a complex path variable that is ignored via @ApiIgnore. Then the parameter type resolution falls back to using the ApiImplicitParam annotation value for parameter type (query, form etc.) As a result when its empty it ends up with a null value. The right thing to happen in this case is for the developer to fill in the type correctly to fix the problem.
    
    This address that case of the NPE but doesnt try to provide a clever solution. Thus the example will render the operation to indicate that the bar parameter is a body parameter.
    
    resolves #2148
    Added support for allowEmptyValue
    
    (2021)
    Fixed an issue with render ApiImplicitParams
    
    When the api implicit params does not indicate the type the parameter is rendered as (cookie, header, query etc.) it treats it as a body type. This fixes to not update the parameter type if its blank.
    
    In addition this example demonstrates how to fix the reported issue via a contract test.
    
    fixes #2029
    Made title synonmous with name for models
    
    fixes #2139
    Test to prove ConstructorProperties works
    
    (1926)
    Changed the type reader to treat request part as formData
    
    (1965)
    Fixed bug involving complex params in multipart requests
    
    When we receive multipart form variables of complex types we were not rendering the complex types that would come as json payloads in the body. This fixes that. It also addresses handling multiple files in a multipart request.
    
    (1965)
    Issue with not respecting response classes
    
    Demonstrates that issue #1887 is not reproducable. The only change to this example is the fact that we return ResponseEntity rather than a CompletableFuture which is a java 7/8 construct. In any case those can be replaced with ResponseEntity using an alternate type rule
    
    fixes #1887
    Added additional logging around duplicate detection
    
    Unable to reproduce the reported issue. Added additional logging around duplicates.
    
    resolves #1894
    Adjusted consumes on GET and DELETE operations
    
    Since GET and DELETE do not really support a body, specifying media types meant for body parameters does not make sense. So by default we filter the operatiosn consumes media types for GET/DELETE operations to exclude json and xml media types
    
    fixes #1781
    Added test for complex type as path variable or request param
    
    (2107)
    Added tests to prove the problem is fixed
    
    (2096)
    Fixed parameter type for params with multiple annoations
    
    When a parameter is annotated with a RequestBody and a ModelAttribute we prioritize the model to appear as if it were a request body. When that happens we should not try and process the parameter as a model attribute. When this happens we log a warning and treat it as a body parameter regardless.
    
    (2118)
    Fix to prevent expansion of request/path params
    
    (2114)
    Map exclusive min / max in EnumMapper
    Add tests for the #2081
    Added support for xml traits in properties
    
    Modified the sample contract test and also handled the case where names and namespaces were not specified.
    
    (1907)
    Added contract test for xml models
    
    (1907)
    Removed erroneous xml decorations on models
    
    (1907)
    add some tests
    Fixed tests that got missed
    
    resolves #1916
    Demonstrates @RequestParam(required=true|false)
    
    resolves #1939
    Fixed all the contract tests that failed due to the change.
    Fixed bug with tags not showing up on combied request handlers
    
    This was because we were not using the controller annotations and looking at operation annotations incorrectly.
    
    (1841)
    Added breaking test to demonstrate nullable expandable parameters
    
    Fixed the contracts accordingly
    
    (1864)
    Fixed test
    
    #1819
    Added tests to demonstrate nested enums
    
    resolves #1819
    Introduced spring data rest endpoints
    
    This is in preparation to create a contract test to watch the contract evolving and also serve as a safety net for breaking changes
    
    (1623)
    Added the operation spec to the contract
    
    (1749)
    Added test for multiple model attributes in controller
    
    resolves #1778
    Demonstrated rendering of Double model property
    
    resolves #1777
    Added test to demonstrate response type precedence
    
    Demonstrates how  `@ApiOperation#response` contributes to responses overriding what is specified in `@ApiResponse#response`.
    
    resolves #1750
    Enabled the api listing scanner plugin
    
    Without enabling the plugin in the plugin registry, the beans will not be registered with the plugin registry. Which explains why it was not getting picked up. Interestingly this is also a great example of how one can register fake operations, not represented/backed by the application.
    
    fixes #1767
    Updated the test contracts
    
    (1740)
    1740 @JsonUnwrappred is ignored by Schema generation
    Added test to prove default values work
    
    resolves #1734
    Demonstrates fix for void responses
    
    (1722)
    closes #1722
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Demonstration that it is working as expected
    
    (1697)
    Add tests for custom File type
    
    (1632)
    Demonstrates api model property for 1676
    
    closes #1676
    Fixed the conversion of byte[] to string with byte format
    
    (1605)
    Updated the tests to use the random port
    
    For some reason these were not failing tests :-o!!
    
    (1621)
    Updated tests and contracts to account for the new rules
    Fixed the bug with rendering responses with Map of Lists
    
    fixes #1475
    Fixed the tests and the contracts to reflect the improved model attribute support
    Synced the contracts with the output
    Fixed the classmate bug for recursively generic types
    
    The the problem was the classmate would resolve Resource#links as List<Link<String>> rather than List<Link> causing the type substitution to not work
    
    fixes #1440
    Added global tags to the documentation
    
    fixes #1420
    Demonstrated the springfox for Type->Primitive works as expected
    
    resolves #1376
    java.sql.Date should become a "date" in JSON Schema output, according to documentation
    Updated the example to return a map of string -> string
    
    resolves #1324
    Added java.sql.Date as a native primitive type
    
    fixes #1162
    Fixed the issue with implicit collection params
    
    the model reference did not take into account the allowMultiples when rendering
    
    fixes #1209
    Fixed broken test
    
    #1306
    Fixed an issue where Maps as parameters were not rendered correctly
    
    fixes #1306
    Added support for Contact as a first class object
    Reformatted the spec output files to match the style guide
    Pulled all the functional tests into one test so that it
    
    does not incur the overhead of starting up tomcat twice
    #773 Don't provide a default values for operation notes/description.
    #675 Initial approach to adding @Api(description) to the tags output
    Fixing json whitespace
    Applying PR comments, removing nickname for uniqueId
    Excluded nickname and operationId from the rendered service description
    
    We decided its not a producer concern to come up with unique names for the
    operation, but rather let the consuming applications decide how it wants to
    implement the operations
    
    related to #659
    Updated the nickname/operationId to be a unique value
    
    fixes #659
    Prefer a random port for tests
    
    fixes #636
    Provide support for overriding the request mappings
    
    Both the swagger 1.2 and 2.0 controllers used constant endpoints
    to access the swagger service description. This change adds a
    property with a default value and provides a the PropertyPlaceholderConfigurer
    post processor to provide the value at run-time and provides a
    default value as well.
    
    Also changed the endpoint for DefaultSwaggerController so that existing
    clients will not break. Removed the v1 from the url.
    
    fixes #169
    Skip rendering void models
    Added test for swagger 2.0
    
    Removed pet store from swagger 1.2 test
    Fixed the build and also fixed depcration warnings
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Upgraded the dependencies
    
    Also fixes as a result of upgrading asciidoctor
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Fixed the feature demonstration tests
    
    (2022)
    Enhancement of merging algorithm.
    Update test to pass when running on Windows.
    #2932: Minor version upgrades of spring dependencies. Aligned contract tests with Spring HATEOAS 1.x. Fixed wrong client encoding used in tests.
    Re-enabled ignored test
    
    (2793)
    tests for the handlers and handler providers
    Updated copyright year
    
    (1082)
    handling order issues and equivalence equals
    all tests past
    migrate from guava supplier
    removed more FuctionContractSpec tests
    migrated from guava equivalence
    removed another test from FunctionContractSpec
    migrate from guava Predicate
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    migrate from guava lists
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    fixing tests for Optional in definition
    Need to ensure that Optional setting is correct in Defaults and ParameterRequiredReader
    Are both java and guava Optional supported?
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Added ability to persist swagger 1.2 contracts
    
    When tests are run, contacts can be automatically persisted if the settings are turned on in the build script. Reformatted contracts via the automated tests when we enable the option in the build script.
    
    These contracts are the ones that are not materially affected by it.
    
    (1831)
    Added contract test for explicitly created group
    
    When we add an api listing without a backing endpoint, this contract verifies that the new contract is picked up in a different group.
    
    (2219)
    Moved the maybeWriteToFile above the assertion
    
    This way when there is an assertion failure we still write the changed contract file to disk. Also update the contracts based on the refresh after adding the new test
    
    (2219)
    Added ability to bulk update contract files
    
    (1937)
    Documented AlternateTypeRuleConvention
    
    Also conditions on why some properties might be missing on certain occasions.
    
    resolves #1904
    Additional contract test.
    Improved setting api to Swagger UI 3.x
    Updated the copyright headers, cleanup, reformatting
    
    and polish!
    
    (1916)
    Added additional contract tests to test behaviour of when you have a consumes and/or produces defined on the document level and when only on the operation level
    Added breaking test to demonstrate nullable expandable parameters
    
    Fixed the contracts accordingly
    
    (1864)
    Major changes to accomodate controller-less specs
    Initial work to re-write SDR support
    
    This work is loosely based on the grails work just to maintain
    consistency in the extensions.
    
    (1623)
    Introduced spring data rest endpoints
    
    This is in preparation to create a contract test to watch the contract evolving and also serve as a safety net for breaking changes
    
    (1623)
    Removed the property sources configurer from the test
    
    (1770)
    Models and security definitions are not sorted alphabetically
    
    (1490)
    Added contract tests to verify conventions work
    
    Here we add `PetWithSerializer` type in various contexts and verify that
    it is always honors the jackson annotations.
    
    (1490)
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Made the controllers constructor injected
    
    Also fixed the test to use the spring 1.4.x testing improvements
    
    (1621)
    Disabled the json output
    Correctly represent byte arrays
    
    fixes #1430
    Encapsulated method parameter references
    
    Also added modifiers to alter the types and annotations
    Upgraded the libraries especially the contract tests
    Removed the json output to console
    Fixed the tests and the contracts to reflect the improved model attribute support
    Synced the contracts with the output
    Fixed the issue with implicit collection params
    
    the model reference did not take into account the allowMultiples when rendering
    
    fixes #1209
    Fixed broken test
    
    #1306
    Removed diagnostics from functional test
    
    #1306
    Fixed an issue where Maps as parameters were not rendered correctly
    
    fixes #1306
    Added support for allowable range values
    
    fixes #1244
    Skipped the pretty printing for better performance
    Fixed the enums in parameters
    
    fixes #1037
    Added support for Contact as a first class object
    'Releasing
    Re-invigorated the file based versioning approach
    Fixed to better handle indeterminate primary member
    
    when there are multiple accessors or mutators the parsing of model properties crashes... atleast as of jackson 2.6.x
    
    fixes #1129
    Fixed broken tests
    
    related to #956
    Added support for nested model references
    
    especially useful for 2D arrays
    Fixed formatting of test json
    
    related to #1115
    Fixed issue where the global produces/consumes did not propogate
    
    fixes #1115
    Fixed behavior on operations differing only by ParamsConditionRequest
    
    When operations only differ by parmams condition with set value e.g. a=1 and a=2 then the operations were collapsed
    
    fixes #1114
    Pulled all the functional tests into one test so that it
    
    does not incur the overhead of starting up tomcat twice
    Moved union of mvc and flux configurations to a shared configuration class
    
    Since we are protected by conditionals, moving it to a shared configuration class helps collapse the anotation to a single annotation regardless of paradigm. Also left the variants of swagger2 so that it doesnt break existing users.
    
    (3366)
    Added vanilla conditions around open api annotations
    
    (3366)
    Adjusted the configuration using the Conditional annotations
    
    (3366)
    Fixed coverage report error
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    correct spelling, fix typos
    (issue #1896)
    Fixed the property resolution regression in spring boot
    
    fixes #1698
    Made the controllers constructor injected
    
    Also fixed the test to use the spring 1.4.x testing improvements
    
    (1621)
    Changes to limit libraries
    Clarify the documentation regarding the need for @EnableWebMvc in non-springboot apps
    
    fixes #776
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Updated the ApiListingScanner extensibility example
    
    The example used a new caching operation generator, so the name space of operations would not be accurate when the contracts are generated. Changed the example, the documentation and the affected tests
    
    (2278)
    Added ability to bulk update contract files
    
    (1937)
    #2257 - fix test failures related to using default system charset when reading files
    
    Fixes 2 tests on Windows:
    * FunctionContractSpec. should honor api v1.2 contract [declaration-concrete-controller.json] at endpoint [/default/concrete-controller]
    * FunctionContractSpec. should honor api v1.2 contract [declaration-pet-service.json] at endpoint [/default/pet-service]
    #2257 - refactor: use explicit syntax (to add another parameter with next commit)
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Added swagger2 contract and fixed bug with operations not getting rendered
    [#538] Adds bare contract spec for swagger 2.0
    - Uses swagger groups to split petstore api from out test case apis
    Fixed the build and also fixed depcration warnings
    Added cyclic stucture tests
    
    (2022)
    Fixed the logger properties
    
    Removed unused log4j config files and renamed file to use slf4j simple logger binding
    
    (1770)
    Updated the documentation
    
    Polished the javadocs for the configuration properties
    
    fixes #3378
    Fixed the swagger server generated
    
    This strips out the context path from the host name, which was causing it to make the try it out calls fail
    
    (3351)
    Added cyclic stucture tests
    
    (2022)
    Fixed the logger properties
    
    Removed unused log4j config files and renamed file to use slf4j simple logger binding
    
    (1770)
    Find/replace springdox/springfox what could go wrong :)
    Drops mangofactory namespace and removes .idea backup
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Updated the tests and inlined the services and models
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright year
    
    (1082)
    Updated the copyright headers, cleanup, reformatting
    
    and polish!
    
    (1916)
    Added missing copyright header to ConsumesProducesService
    Added additional contract tests to test behaviour of when you have a consumes and/or produces defined on the document level and when only on the operation level
    Updated the tests and inlined the services and models
    
    (2022)
    #2932 - Spring HATEOAS 1.0.0.RELEASE
    Fixed a bug with unbounded generic parameters and return types
    
    Updated the examples to demonstrate the issue. The downside to this fix is that alternate type
    rules will not apply to these unbounded types. The upside is however we avoid an NPE!
    
    fixes #953
    Updated tests to proove multi-variable templated controllers work as expected
    
    closes #953
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Fix for abstract base types with open generic type with no constraint
    
    not working correctly. fixes #313. Thanks @jtheuer!
    3390 add NumericFacetBuilder to OperationImplicitParamterReader
    Sorted the model properties by position and name
    
    resolves #3087
    Fixed issue rendering file input as model attribute
    
    fixes #1370
    Fixed the mapping for form variables and updated the contracts
    
    (3353)
    Updated the tests for multipart support
    
    (3364)
    Added tests and configuration to demonstrate Iterable
    
    resolves #3371, #3022
    Added example to demonstrate non error messages in logs
    
    (3380)
    Added tests to demonstrate the fixes
    
    (2684)
    Updated the bug examples
    
    (2767)
    Added contract tests for the actual issue
    
    (3351)
    Fixed issue allow allowable values to be overriden
    
    fixes #3321
    Fixed the build and also fixed depcration warnings
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Updated the contract tests
    
    The contracts are 95% the same, except for some bug fixes that the old model had
    
    (2022)
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    #2932 - Spring HATEOAS 1.0.0.RELEASE
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fix #2822 related to @ApiParam(example="..") not working for @RequestBody
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrated Optional, Failures in FunctionContractSpec.
    complex cases were Optional.or.Optional and replacing presentInstances
    FluentIterable.from still used and converted with toJavaUtil()
    Demonstrated resolution for string examples
    
    When providing an example for string based properties, they need to be single quoted. Also fixed the build
    
    related to #2469
    Added support for public model attribute fields
    
    In the process unearth an example to support anyOf (related to #2490).
    
    fixes #2423
    Fixed allowable range on string properties
    
    For string properties the allowable ranges should be rendered as max length and min length properties
    
    (2415)
    Demonstrates support for properties of the same type on a model
    
    (2479)
    Fixed formatting
    
    (2479)
    Verified renaming of model attributes
    
    (2391)
    Verified the behavior of uppercased properties
    
    (2378)
    Updated the contract tests
    
    (2376)
    Updated contract tests
    
    (2368)
    Updated the contract tests
    
    (1944)
    Updated contract tests
    
    Contract tests to demonstrate required-ness handling of path variables
    
    (2220)
    Added example for multiple levels of nested wrapped types
    
    relates to #2182
    Added unit tests and updated contract tests
    
    (2182)
    Fixed rendering of xml examples
    
    The XmlRootElement wasnt taken into consideration when figuring out the xml root element name
    
    (2230)
    Added tests to verify another nested/recursive defenition
    
    resolves #2282
    Added tests around nested recursive types
    
    (1827)
    Re-arranged methods and fields
    
    (1964)
    Added property to test the changes
    
    Also up-revved the swagger core library that contains the fix for rendering examples. Also updated the contract tests to reflect this change.
    
    (1964)
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Demonstrated bug where request params were marked required
    
    This test demonstrates that the request param comes back as not required given the scenario describes in the issue
    
    (2268)
    Demonstrated reported issue is working as designed
    
    relates to #1881
    Added better support for rendering examples
    
    (2249)
    Added example to demonstrate overriding example value
    
    resolves #2161
    Fixed the NPE when rendering complex path variable
    
    When we have a complex path variable that is ignored via @ApiIgnore. Then the parameter type resolution falls back to using the ApiImplicitParam annotation value for parameter type (query, form etc.) As a result when its empty it ends up with a null value. The right thing to happen in this case is for the developer to fill in the type correctly to fix the problem.
    
    This address that case of the NPE but doesnt try to provide a clever solution. Thus the example will render the operation to indicate that the bar parameter is a body parameter.
    
    resolves #2148
    Fixed an issue with render ApiImplicitParams
    
    When the api implicit params does not indicate the type the parameter is rendered as (cookie, header, query etc.) it treats it as a body type. This fixes to not update the parameter type if its blank.
    
    In addition this example demonstrates how to fix the reported issue via a contract test.
    
    fixes #2029
    Test to prove ConstructorProperties works
    
    (1926)
    Changed the type reader to treat request part as formData
    
    (1965)
    Fixed bug involving complex params in multipart requests
    
    When we receive multipart form variables of complex types we were not rendering the complex types that would come as json payloads in the body. This fixes that. It also addresses handling multiple files in a multipart request.
    
    (1965)
    Issue with not respecting response classes
    
    Demonstrates that issue #1887 is not reproducable. The only change to this example is the fact that we return ResponseEntity rather than a CompletableFuture which is a java 7/8 construct. In any case those can be replaced with ResponseEntity using an alternate type rule
    
    fixes #1887
    Fixed codacy violations
    
    #1894
    Added additional logging around duplicate detection
    
    Unable to reproduce the reported issue. Added additional logging around duplicates.
    
    resolves #1894
    Added test for complex type as path variable or request param
    
    (2107)
    Added tests to prove the problem is fixed
    
    (2096)
    Fixed parameter type for params with multiple annoations
    
    When a parameter is annotated with a RequestBody and a ModelAttribute we prioritize the model to appear as if it were a request body. When that happens we should not try and process the parameter as a model attribute. When this happens we log a warning and treat it as a body parameter regardless.
    
    (2118)
    Fix to prevent expansion of request/path params
    
    (2114)
    Add tests for the #2081
    Added support for xml traits in properties
    
    Modified the sample contract test and also handled the case where names and namespaces were not specified.
    
    (1907)
    Added contract test for xml models
    
    (1907)
    Demonstrates @RequestParam(required=true|false)
    
    resolves #1939
    Fixed bug with tags not showing up on combied request handlers
    
    This was because we were not using the controller annotations and looking at operation annotations incorrectly.
    
    (1841)
    Added breaking test to demonstrate nullable expandable parameters
    
    Fixed the contracts accordingly
    
    (1864)
    Added tests to demonstrate nested enums
    
    resolves #1819
    Added test for demonstrating 1749
    
    (1749)
    Added test for multiple model attributes in controller
    
    resolves #1778
    Demonstrated rendering of Double model property
    
    resolves #1777
    Added test to demonstrate response type precedence
    
    Demonstrates how  `@ApiOperation#response` contributes to responses overriding what is specified in `@ApiResponse#response`.
    
    resolves #1750
    formatting;
    method renamed to match bug number;
    1740 @JsonUnwrappred is ignored by Schema generation
    Added test to prove default values work
    
    resolves #1734
    Demonstrates fix for void responses
    
    (1722)
    closes #1722
    Distinguished models belonging to diffrent dockets
    
    There was an oversight where the model context caching was not using the group name to distinguish the same model contexts from another docket. As a result models ignored in one docket and not the other would not behave as expected. Fixed this behavior and added tests to cover that use case.
    
    fixes #1627
    Demonstration that it is working as expected
    
    (1697)
    Add tests for custom File type
    
    (1632)
    Demonstrates api model property for 1676
    
    closes #1676
    Fixed the conversion of byte[] to string with byte format
    
    (1605)
    Fixed the bug with rendering responses with Map of Lists
    
    fixes #1475
    Fixed the classmate bug for recursively generic types
    
    The the problem was the classmate would resolve Resource#links as List<Link<String>> rather than List<Link> causing the type substitution to not work
    
    fixes #1440
    Added global tags to the documentation
    
    fixes #1420
    Demonstrated the springfox for Type->Primitive works as expected
    
    resolves #1376
    Updated the example to return a map of string -> string
    
    resolves #1324
    Added java.sql.Date as a native primitive type
    
    fixes #1162
    Fixed the issue with implicit collection params
    
    the model reference did not take into account the allowMultiples when rendering
    
    fixes #1209
    Fixed an issue where Maps as parameters were not rendered correctly
    
    fixes #1306
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Demonstrate interface annotation inference support
    
    Parameters annotations i.e. `@ApiParam` are not supported on interfaces because it can become a combinatorial problem when you nested/multi-interface subclassing controllers.
    
    relates to #1575
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Updated the tests and inlined the services and models
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    #2932 - Spring HATEOAS 1.0.0.RELEASE
    Fixed the tests and the contracts to reflect the improved model attribute support
    Fixed a bug with unbounded generic parameters and return types
    
    Updated the examples to demonstrate the issue. The downside to this fix is that alternate type
    rules will not apply to these unbounded types. The upside is however we avoid an NPE!
    
    fixes #953
    Updated tests to proove multi-variable templated controllers work as expected
    
    closes #953
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Fix for abstract base types with open generic type with no constraint
    
    not working correctly. fixes #313. Thanks @jtheuer!
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Updated the tests for multipart support
    
    (3364)
    Fixed formatting
    
    (3373)
    Added test to demonstrate optional
    
    (2831)
    Modified feature demonstration example
    
    The example prior was incorrect and wouldve generated the wrong model (and generated the ERROR message in the logs that was reported). This fixes the example and the corresponding contract
    
    (3380)
    Cleanup documentation and depecations
    
    (3351)
    Updated the contract tests
    
    The contracts are 95% the same, except for some bug fixes that the old model had
    
    (2022)
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Fixed the feature demonstration tests
    
    (2022)
    #1570 Add examples support
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    Added contract tests for inhertance
    
    (1151)
    (868)
    Added contract tests for example based features
    
    (853)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Added documentation on how to override loose body params
    
    This is to document cases where we losely document method parameters that come is as stringified json but are actual types internal to the service.
    
    fixes #2031
    Added documentation on how to use springfox with vavr
    
    resolves #1971
    correct spelling, fix typos
    (issue #1896)
    removing inused import
    integration tests with errors
    Fixed the issue where the parameter requiredness was incorrect
    
    Delegates to the base jackson property to tell us if a parameter property is required or not
    
    fixes #1727
    Added contract tests to verify conventions work
    
    Here we add `PetWithSerializer` type in various contexts and verify that
    it is always honors the jackson annotations.
    
    (1490)
    Updated the tests to demonstrate operation combination
    
    Here we introduce two operations that differ only by media type and accordingly expect the changes to reflect in the contracts.
    
    (1367)
    Correctly represent byte arrays
    
    fixes #1430
    Fixed the tests and the contracts to reflect the improved model attribute support
    Fixed an issue where Maps as parameters were not rendered correctly
    
    fixes #1306
    Fixed to better handle indeterminate primary member
    
    when there are multiple accessors or mutators the parsing of model properties crashes... atleast as of jackson 2.6.x
    
    fixes #1129
    Updated mappers to support 2d arrays for swagger2
    
    swagger 1.2 does not (and will not support) 2d arrays
    Added a test for a primitive body parameter that does not have a format
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Tests to verify Map<String, Map<String, Example>> is rendered correctly
    
    resolves #817
    Reverted the changes so that the contracts are the same as pre-this change
    
    related to #682
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Provided type safe vendor extensibility rather than naked maps
    Fixes the rendering of api which allows uploading of multiple multipart files
    
    fixes #837
    add support for vendor extensions in operations
    
    
    
    Fixes #824
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Added support for list of maps
    
    fixes #740
    Fixes the default rules such that Map<String, String> is not rendered as
    
    an Object. fixes #747
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Added test for action without any request mapping value
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Formatting change
    
    (3348)
    Tightened the builder api
    Fixed the build and also fixed depcration warnings
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Converted all builders to be consumer based
    
    (2022)
    Converted simple and content parameter specs to be managed builders
    
    (2022)
    Updated the contract tests
    
    The contracts are 95% the same, except for some bug fixes that the old model had
    
    (2022)
    Added missing types that allow mapping to the new OpenAPI spec
    
    Also converted collection types to the lowest base type i.e. List -> Collection etc.
    
    (2022)
    Got the contracts for swagger2 to pass
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fix compiler warnings
    
    (2688)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Updated the ApiListingScanner extensibility example
    
    The example used a new caching operation generator, so the name space of operations would not be accurate when the contracts are generated. Changed the example, the documentation and the affected tests
    
    (2278)
    Changed the url for the `different` endpoint
    
    This way the the tests reflect the selection of the `different` endpoints only in the new contract
    
    (2219)
    Added a contract test for explicitly specifying group
    
    When we specify a group in the additional apis we need to handle it correctly
    
    (2219)
    Converted the plugin example to java
    
    Also added documentation on how to implement the plugin.
    
    resolves #1767
    Added cyclic stucture tests
    
    (2022)
    Enhancement of merging algorithm.
    Adjusted the configuration using the Conditional annotations
    
    (3366)
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    reverted changes to SwaggerApplication
    added springfox-spring-integration, petstore and petstore-tests
    Introduced spring data rest endpoints
    
    This is in preparation to create a contract test to watch the contract evolving and also serve as a safety net for breaking changes
    
    (1623)
    Fixed the artifact based sharing of test code
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Fixed the build
    
    The models are not correct however :-o
    Wired up the v2 spec with the v2 application context
    
    Unable to figure out how to bootstrap the v2 spec as only one main method is allowed
    [#538] Adds bare contract spec for swagger 2.0
    - Uses swagger groups to split petstore api from out test case apis
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moved the packages so that easier to seperate into modules
    
    - Moved BeanPropertyNamingStragety under property package
    - Moved the EnableSwagger annotation to the annotations package
    - Moved the SwaggerSpringMvcPlugin to the plugins package
    - Renamed SwaggerCache GroupCache
    - Moved AuthorizationContext to the plugins package:
    - Moved ApiIgnore the spring.web.annotations
    - Moved Defaults to spring.web
    - Renamed SwaggerApiListing ApiGroupScanner and moved the package to scanners
    - Moved ApiListingScannerContext closer to ApiListingScanner
    - Moved command context and exector closer to where its used
    - Moved common web classes to spring web
    - Renamed StringUtils to Paths
    - Deprecated ModelUtils and moved the class to spring.web
    - Moved the readers and scanners under spring
    - Renamed SwaggerPathProvider and moved it to the spring.web package
    - Moved Documentation controller to swagger.web package
    - Moved the path providers to the swagger.web package
    - Moved the Defaults to the swagger.web package
    - Renamed references to swagger path provider
    - Fixed reference to private constructor
    - Moved the OperationPositionalOrder closer to ApiOperationReader
    - Moving ClassOrApiAnnotationResourceGrouping to swagger.web
    - Removed Api annotation processing from SpringGroupingStrategy
    - Removed swagger from comments
    - Removed access to swagger package from spring
    - Fixed tests after refactoring
    - Moved the SwaggerSpringMvcPlugin class to spring.web
    - Adjusted defaults
    - Fixed the tests after making resource grouping strategy a plugin
    - Removed more swagger stuff from spring
    - Inlinedmethod call
    - Seperated OperationResponseClassReader
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    [#530] Orders http operations and adds contract tests for 1.2 spec
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    migrate from guava lists
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    @ApiResponse maps to wrong ApiModel-definition name when overriden
    
    fixes #793
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Adding ability to optionally populate nickname into operationId for swagger 2.0 implementations
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Fixed builds for jdk7 and jdk8
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Removed SwaggerAnnotations from MediaTypeReader
    [#541] Attempt to clean up logic to handle bare enums in the response
    
    All this effort leads me back to why it wasnt supported in the first place! bare enums are not supported in
    swagger spec just like bare List types are not supported.
    
    closes #541
    [#478] Fixes issue where the @Api value is just a /
    
    closes #478
    [#528] Updated the test business controller to render oauth authorizations
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    Normalized spaces and imports
    When substituting types the base types should not be included as models
    
    Fixes #254
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    migrate from guava lists
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Add support for exclusive ranges #2088
    correct spelling, fix typos
    (issue #1896)
    Fixed the tests and the contracts to reflect the improved model attribute support
    Reverted the changes so that the contracts are the same as pre-this change
    
    related to #682
    Fixes to ensure that operation ids are unique in the swagger generated
    
    space. Also introduced the notion of caching and explicitly declared the
    caches to cache the models/model properties/model dependencies and the
    operations per request mapping.
    
    - Added logging to indicate unique operation name generation
    - Added a caching operation name generator test
    
    related to #682
    Fix to merge parameter definitions and not duplicate the definitions
    
    fixes #813
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#528] Replaces swagger scala models with java equivalents
    
    [#516] Removes scala conversions from model tests
    
    [#516] Removes scala conversions fromcorel tests
    
    [#516] Remove more scala conversions
    
    [#516] Fixes incorrect use of hasText
    
    [#516] Removes scala optionals and fixes checks for blank or null strings
    
    [#516] Adds JSON serialization for java swagger models (auth not working yet)
    
    [#516] Serializes GrantTypes and Authorizations
    
    [#516]Serializes aType as type
    
    [#516 Serializes parameter types and formats
    
    [#51]6Tests parameter type serialization
    
    Serializes operation responseClass as json type attribute
    
    [#516] Changes swagger DTO's to have java style getters
    
    [#51] Moves swagger DTO's to more appropriate package
    
    [#516] Improving coverage
    
    [#516]Adds tests and disables serialization feature FAIL_ON_EMPTY_BEANS
    
    [#516 Passes coverage limits and removes redundant DTO
    Normalized spaces and imports
    Integrating alternate types provider into the model generation process
    
    - Added and updated documentation for alternate types
    - Updated the javadoc plugin so we can bundle the javadocs
    
    Fixes #251
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    Optimized imports per project style
    
    (1082)
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    #801 #810 Add proper support for enums in response values and in schema objects
    Updated the tests and inlined the services and models
    
    (2022)
    Updated copyright year
    
    (1082)
    Added test for demonstrating 1749
    
    (1749)
    Demonstrated intricate generics support
    
    resolves #1631
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Demonstrate interface annotation inference support
    
    Parameters annotations i.e. `@ApiParam` are not supported on interfaces because it can become a combinatorial problem when you nested/multi-interface subclassing controllers.
    
    relates to #1575
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Sorted responses and build works
    
    (2022)
    Made all the logging debug
    
    (2022)
    Got the contracts for swagger2 to pass
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixed the artifact based sharing of test code
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    [#528 #527] Fixes swagger 1.2 contract tests and bug with body parameters
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Additional contract test.
    Fixed the tests and the contracts to reflect the improved model attribute support
    Fixed a bug with unbounded generic parameters and return types
    
    Updated the examples to demonstrate the issue. The downside to this fix is that alternate type
    rules will not apply to these unbounded types. The upside is however we avoid an NPE!
    
    fixes #953
    Updated tests to proove multi-variable templated controllers work as expected
    
    closes #953
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Fix for abstract base types with open generic type with no constraint
    
    not working correctly. fixes #313. Thanks @jtheuer!
    Added tests and configuration to demonstrate Iterable
    
    resolves #3371, #3022
    Moved union of mvc and flux configurations to a shared configuration class
    
    Since we are protected by conditionals, moving it to a shared configuration class helps collapse the anotation to a single annotation regardless of paradigm. Also left the variants of swagger2 so that it doesnt break existing users.
    
    (3366)
    Fixed the swagger server generated
    
    This strips out the context path from the host name, which was causing it to make the try it out calls fail
    
    (3351)
    Added cyclic stucture tests
    
    (2022)
    Aligned dependencies
    
    Switched to using the java-library plugin to better align the libraries
    that are exposed as transitive dependencies. This is so that we can
    deterministically say if an app is a SERVLET app or a REACTIVE app based
    on the dependencies it brings along.
    
    Also made the libraries declare beans that are mutually exclusive to the
    paradigm.
    
    (2022)
    Fixed javadoc and asciidoctor documentation issues
    
    (2022)
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Fixed coverage report error
    Fix compiler warnings
    
    (2688)
    Fixed the artifact based sharing of test code
    [#701] Isolating the ObjectMapper used to serialize Swagger JSON
    - Moved test classes to a different package name to prevent autoscanning everything
    - Fixed gradle idea project file generation
    
    Port swagger 1 to use isolated object mapper
    
    Ports swagger 2 to use isolated object mapper
    
    Adding some coverage
    
    Fixing swagger resources tests to only consider a given swagger spec version at a time
    
    Cleanup imports
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Updated example model object used in test
    
    (2368)
    Re-arranged code
    
    (2368)
    Added contract tests for example based features
    
    (853)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Additional test cases for read only flag
    
    Test case for read only flag in swagger 2, and no impact to swagger 1
    Added optimized model properties provider
    
    fixes #806
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moar tests and increased complexity coverage
    [#476] Allows specifying alternative types for expanded model attributes
    ModelAttribute expansion for collection extensions
    
    Fixes a bug where ModelAttributeParameterExpander
    was incorrectly handling parameters that were extensions
    of collections. For example, any custom extension of a HashSet should
    be treated as a Set but instead it was being treated as a custom type.
    Normalized spaces and imports
    @ModelAttribute Flattening Improvements
    
    When complex objects marked with @ModelAttribute in a controller method
    are flattened into individual parameters:
    1) Only consider properties that have a getter and setter.
    This makes it easy for someone to exclude any parameter
    that is not supposed to be set by a request param or has
    a derived value.
    2) Include properties from parent objects so that we
    don’t alienate coders who have form beans with an
    inheritance hierarchy
    Fixed allowableValues not getting set for enum
    
    Fixed bug where the allowableValues were not getting
    set on enums when the enum property in a container
    object had an ApiParam annotation. Apparently, if you
    declare an ApiParam and don’t put any configuration in
    for the allowableValues, the allowableValues will be a
    blank String instead of null. The bug was that the code
    was checking for a null allowableValues but not for a
    blank String.
    Fixed the build
    @ModelAttribute flattening should ignore statics
    
    - Added fix to ignore static fields when flattening objects
    marked with @ModelAttribute
    - Added code coverage to prove the fix works
    Support @ApiModelProperty
    
    Added support for @ApiModelProperty annotations found on ModelAttribute
    class properties
    Fixes and code coverage
    
    Added code coverage and small fixes discovered by
    better testing
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Added contract tests for inhertance
    
    (1151)
    (868)
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Additional types for tests.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed the mapping for form variables and updated the contracts
    
    (3353)
    Updated the tests for multipart support
    
    (3364)
    Updated the tests and inlined the services and models
    
    (2022)
    Updated copyright year
    
    (1082)
    Fixed the model attribute expander for list of enums
    
    fixes #1571
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Bumped up the coverage for swagger-common
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    [#667] Renaming springfox-swagger 1.2 module and package namespace.
    
    Renaming springfox-swagger module to springfox-swagger1
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    [#469] Fixed the arrays inside generics problem
    
    fixes #469
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Added cyclic stucture tests
    
    (2022)
    Enhancement of merging algorithm.
    Updated the tests and inlined the services and models
    
    (2022)
    Updated mappers to support 2d arrays for swagger2
    
    swagger 1.2 does not (and will not support) 2d arrays
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Updated the tests and inlined the services and models
    
    (2022)
    Fixed unchecked generics warnings
    
    Also simplified to use java 8 where possible.
    
    (1082)
    Updated copyright year
    
    (1082)
    migrate from guava Maps and Iterables
    still having on and off issues with DefaultRequestHandlerCombinerSpec and FunctionContractSpec
    Migrating from guava Sets
    Blocked tests in FunctionContractSpec and DefaultRequestHandlerCombinerSpec, the fail on command line, work in IDE
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Fixes the default rules such that Map<String, String> is not rendered as
    
    an Object. fixes #747
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Added cyclic stucture tests
    
    (2022)
    Enhancement of merging algorithm.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Modified feature demonstration example
    
    The example prior was incorrect and wouldve generated the wrong model (and generated the ERROR message in the logs that was reported). This fixes the example and the corresponding contract
    
    (3380)
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    #801 #810 Add proper support for enums in response values and in schema objects
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Updated the tests and inlined the services and models
    
    (2022)
    Fixed rendering of xml examples
    
    The XmlRootElement wasnt taken into consideration when figuring out the xml root element name
    
    (2230)
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Sorted the model properties by position and name
    
    resolves #3087
    Updated the tests and inlined the services and models
    
    (2022)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#476] Allows specifying alternative types for expanded model attributes
    Normalized spaces and imports
    @ModelAttribute Flattening Improvements
    
    When complex objects marked with @ModelAttribute in a controller method
    are flattened into individual parameters:
    1) Only consider properties that have a getter and setter.
    This makes it easy for someone to exclude any parameter
    that is not supposed to be set by a request param or has
    a derived value.
    2) Include properties from parent objects so that we
    don’t alienate coders who have form beans with an
    inheritance hierarchy
    Updated the tests and inlined the services and models
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Fixed issue rendering file input as model attribute
    
    fixes #1370
    Updated the tests and inlined the services and models
    
    (2022)
    Additional types for tests.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Additional contract test.
    Code style fixes.
    Additional types for tests.
    Added a failing test for bidirectional recursive types
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Updated the tests and inlined the services and models
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Added cyclic stucture tests
    
    (2022)
    Enhancement of merging algorithm.
    Added cyclic stucture tests
    
    (2022)
    Enhancement of merging algorithm.
    Added cyclic stucture tests
    
    (2022)
    Enhancement of merging algorithm.
    Unit tests.
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Updated the tests and inlined the services and models
    
    (2022)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    ModelAttribute expansion for collection extensions
    
    Fixes a bug where ModelAttributeParameterExpander
    was incorrectly handling parameters that were extensions
    of collections. For example, any custom extension of a HashSet should
    be treated as a Set but instead it was being treated as a custom type.
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Updated copyright year
    
    (1082)
    Fixed the model attribute expander for list of enums
    
    fixes #1571
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Updated the tests and inlined the services and models
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright year
    
    (1082)
    Added contract tests to verify conventions work
    
    Here we add `PetWithSerializer` type in various contexts and verify that
    it is always honors the jackson annotations.
    
    (1490)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Updated the tests and inlined the services and models
    
    (2022)
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Updated copyright year
    
    (1082)
    Added test for demonstrating 1749
    
    (1749)
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Added contract tests for inhertance
    
    (1151)
    (868)
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Updated the bug examples
    
    (2767)
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Fixed expansion of models with alternate types
    
    resolves #2165
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Added cyclic stucture tests
    
    (2022)
    Enhancement of merging algorithm.
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Updated the tests and inlined the services and models
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Fixes problem where internal models marked hidden are not getting filtered
    
    fixes #873
    Changed the package names from com.wordnik.swagger to io.swagger
    
    fixes #770
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Fixed the temporal coupling int the name provider plugin
    
    Now the default name provider is no longer a component but truly a default type name provider. If there are no plugins registered the default is used
    [#528] Gets rid of swagger 's - they don't work with swagger-ui
    Updated the tests and inlined the services and models
    
    (2022)
    Updated copyright year
    
    (1082)
    Added test for demonstrating 1749
    
    (1749)
    Demonstrated intricate generics support
    
    resolves #1631
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Adds petstore module in preparation for swagger 2.0
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Fixed expansion of models with alternate types
    
    resolves #2165
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Added contract tests for inhertance
    
    (1151)
    (868)
    Added contract tests
    
    Added controller and  supporting models to demonstrate nested maps
    
    (2203)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Added optimized model properties provider
    
    fixes #806
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Moving schema to a top level package
    [#538] Rename models package to schema
    Normalized spaces and imports
    Fix to support for alternates in model propertiesi
    
    fixes #315
    Updated the tests and inlined the services and models
    
    (2022)
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Reworked the ModelAttributeParameterExpander
    
    Reduced complexity in the class and also uncovered a bug where the
    treeish classes were partially rendering the expansion.
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Check if field is of same type as parent when expanding ModelAttribute
    
    To avoid StackOverflowError when expanding ModelAttributes,
    skip call to `expand` when a treeish field is encountered. #465
    Updated the tests and inlined the services and models
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Updated the tests and inlined the services and models
    
    (2022)
    Unit tests.
    Additional contract test.
    Updated the tests and inlined the services and models
    
    (2022)
    Fixed rendering of xml examples
    
    The XmlRootElement wasnt taken into consideration when figuring out the xml root element name
    
    (2230)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Added model dependency provider tests
    
    Also included supporting classes
    
    (2203)
    Fixed expansion of models with alternate types
    
    resolves #2165
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated the tests and inlined the services and models
    
    (2022)
    Fixed checkstyle violations and code cleanup
    
    (2022)
    integration tests with errors
    add license
    JacksonEnumDeterminer to handle JsonFormat.Shape.Object
    Updated the tests and inlined the services and models
    
    (2022)
    Fixed to better handle indeterminate primary member
    
    when there are multiple accessors or mutators the parsing of model properties crashes... atleast as of jackson 2.6.x
    
    fixes #1129
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Updated the tests and inlined the services and models
    
    (2022)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Updated the tests and inlined the services and models
    
    (2022)
    Fixed rendering of xml examples
    
    The XmlRootElement wasnt taken into consideration when figuring out the xml root element name
    
    (2230)
    feature(webflux): add webflux project
    
    there is the first usable version of webflux project.
    there are a error while building swagger-ui webjar. the jar is empty.
    We must use old webjar before fix.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    Normalized spaces and imports
    Model generation to support rich/generic models
    
    - Updated git ignore
    - Made it a multi-module project
    - Updated the poms
    - Changed all absolute urls to be relative to web application context
    - Added support for simple/complex/lists/sets/arrays
    - Added support for generic fields
    - Reverted  base path fix to pass all the tests
    - Support for generic types
    - Support for inherited types
    - Work on replacing standard logic to get properties and fields
    - Model generation with jackson support
    - Renders Lists correctly so that return types can be resolved
    - Find Model dependencies required to render models completely
    
    Fixes #203
    Updated copyright year
    
    (1082)
    Added additional relationships
    Added interface to create alternate type rules
    
    The idea here is to start the germ of the idea to create conventions for certain classes of rules e.g. Java 8, Spring-Data-Rest, Grails etc.
    
    (1323)
    Collapsed the Util classes to one class
    
    Also made the class purely static and added a test to ensure that.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Reduced code complexity in ModelDependencyProvider
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Improved the coverage and bumped up the thresholds
    Updated copyright year
    
    (1082)
    Only document exported resources
    
    fixes #2072
    Added additional relationships
    Added interface to create alternate type rules
    
    The idea here is to start the germ of the idea to create conventions for certain classes of rules e.g. Java 8, Spring-Data-Rest, Grails etc.
    
    (1323)
    Collapsed the Util classes to one class
    
    Also made the class purely static and added a test to ensure that.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Reduced code complexity in ModelDependencyProvider
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Improved the coverage and bumped up the thresholds
    Updated copyright year
    
    (1082)
    Major changes to accomodate controller-less specs
    Added additional relationships
    Updated copyright year
    
    (1082)
    fix #1882 by making EntitySearchExtractor know @Param , with test case.
    Added test case for annoations
    Initial work to re-write SDR support
    
    This work is loosely based on the grails work just to maintain
    consistency in the extensions.
    
    (1623)
    Introduced spring data rest endpoints
    
    This is in preparation to create a contract test to watch the contract evolving and also serve as a safety net for breaking changes
    
    (1623)
    Added interface to create alternate type rules
    
    The idea here is to start the germ of the idea to create conventions for certain classes of rules e.g. Java 8, Spring-Data-Rest, Grails etc.
    
    (1323)
    Collapsed the Util classes to one class
    
    Also made the class purely static and added a test to ensure that.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Reduced code complexity in ModelDependencyProvider
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Improved the coverage and bumped up the thresholds
    Fixed the build and also fixed depcration warnings
    Updated copyright year
    
    (1082)
    Added tests to demonstrate spring data rest base path support
    
    resolves #1932
    Added additional relationships
    Added interface to create alternate type rules
    
    The idea here is to start the germ of the idea to create conventions for certain classes of rules e.g. Java 8, Spring-Data-Rest, Grails etc.
    
    (1323)
    Collapsed the Util classes to one class
    
    Also made the class purely static and added a test to ensure that.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Reduced code complexity in ModelDependencyProvider
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Improved the coverage and bumped up the thresholds
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated copyright year
    
    (1082)
    Major changes to accomodate controller-less specs
    Added additional relationships
    Got the contracts for swagger2 to pass
    
    (2022)
    Updated copyright year
    
    (1082)
    Major changes to accomodate controller-less specs
    Added additional relationships
    Updated copyright year
    
    (1082)
    Added additional relationships
    Added interface to create alternate type rules
    
    The idea here is to start the germ of the idea to create conventions for certain classes of rules e.g. Java 8, Spring-Data-Rest, Grails etc.
    
    (1323)
    Collapsed the Util classes to one class
    
    Also made the class purely static and added a test to ensure that.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Reduced code complexity in ModelDependencyProvider
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Improved the coverage and bumped up the thresholds
    Fixed checkstyle violations and code cleanup
    
    (2022)
    Updated copyright year
    
    (1082)
    Major changes to accomodate controller-less specs
    Added additional relationships
    Introduced spring data rest endpoints
    
    This is in preparation to create a contract test to watch the contract evolving and also serve as a safety net for breaking changes
    
    (1623)
    Fixed the model attribute expander for list of enums
    
    fixes #1571
    Fixes issue where allow-multiples wasnt detected on model attributes
    
    fixes #929
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Updated copyright year
    
    (1082)
    Added support for Pageable parameters
    
    Added a convention that looks up the property names from the rest configuration and provides an alternative type that renders parameters accordingly.
    
    resolves #2063
    Added tests to demonstrate spring data rest base path support
    
    resolves #1932
    fix #1882 by making EntitySearchExtractor know @Param , with test case.
    Added test case for annoations
    Initial work to re-write SDR support
    
    This work is loosely based on the grails work just to maintain
    consistency in the extensions.
    
    (1623)
    Introduced spring data rest endpoints
    
    This is in preparation to create a contract test to watch the contract evolving and also serve as a safety net for breaking changes
    
    (1623)
    Added interface to create alternate type rules
    
    The idea here is to start the germ of the idea to create conventions for certain classes of rules e.g. Java 8, Spring-Data-Rest, Grails etc.
    
    (1323)
    Collapsed the Util classes to one class
    
    Also made the class purely static and added a test to ensure that.
    Updated copyright on all source files
    
    Also updated checkstyle to check for copyright notice
    Renamed modules and directories
    Renamed springdox package to springfox
    Drops mangofactory namespace and removes .idea backup
    Renames modules to springdox-
    Reduced code complexity in ModelDependencyProvider
    De-coupled the configuration that configures the object mapper
    
    from the consumers that require the object mapper. Changed the application
    to use application events rather than setters that require the WebMvcConfigurerAdapter
    to know about ever bean than requires an instance of the selected ObjectMapper
    [#538] Refactoring the modules so that plugins can be packaged
    
    independently
    [#538] Refactored the static ResolvedTypes class to a TypeNameExtractor
    [#538] Improved the coverage and bumped up the thresholds
