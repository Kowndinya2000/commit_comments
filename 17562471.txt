    Fix incorrect check for symlink in fake os.walk
    
    - proposed by @giladreti
    - fixes #559
    Add FakeFilesystem.os for more convenient OS setting
    
    - the setter changes all needed attributes and resets the file system
    - reset now also resets pathlib to adapt the path separators
    - adapt documentation
    Allow fake pathlib to be used in other os
    
    - adapted fake pathlib.home() to work in other os
    - fixes #558
    Do not call fake pathlib.Path if called from skipped module
    
    - add possibility for special handling for skipped modules
    - fixes #553
    Added some support for io.open_code in Python 3.8
    
    - added new argument 'patch_open_code' to allow patching the function
    - see #554
    Do not call fake open if the caller is a skipped module
    
    - fixes #552
    Fixed handling of additional_skip_names with several module components
    Allow to open existing pipe file descriptor
    - fixes #493
    Add support for buffering in text mode
    - support line buffering
    - closes #549
    Make sure pytest will work without pyfakefs installed
    - import fs in conftest.py used in tests
    - remove tests for deprecated function
    - see #550
    Split test scripts for error propagation
     - errors in earlier test scripts did not propagate
    Add support for the buffering parameter in open() call
    - support for binary files
    - incomplete support for text files (behave like binary files)
    - see #549
    Do not truncate file on failed flush
    
    - fixes #548
    Add support for os.truncate and os.ftruncate
    
    - fixes #545
    Suppress deprecation warnings while collecting modules
    
    - closes #542
    Prepare next release
    Added patching of django file locks
    
    - no tests added (would be a bit complicated),
      has been tested in production code
    Fix os.expanduser to work with a bytes path
    
    - adapted documentation for pandas support
    - added test for pandas.read_table()
    Added partial support for pandas to work with pyfakefs
    
    - support for read_csv and read_excel (with the default module)
    - see #531
    Correctly handle alternative path separators in path resolving
    
    - fixes #530
    Make sure that all temp files are removed in real fs tests
    
    - moved file creation from __init__() to setUp() to avoid it for skipped tests
    - added some missing cleanup
    - use with assertRaises(...) in tests for better readability
    Make sure fs modules in pathlib are patched
    
    - pathlib shall not be added to skip names
    - removed unneeded checks for pathlib
    - fixes #527
    Do not override global warnings setting in Deprecator
    
    - fixes #526
    Adedpted release notes
    Ignore any exception that may happen in inspect.getmembers()
    
    - fixes #523
    Adapted release notes and Readme
    Changed decorator to be able to be called with and without arguments
    
    - now can be used both with call syntax, and without parentheses
    Added convenience decorators to patch single functions
    
    - decorator patchfs is called without arguments (and no parentheses)
    - decorator custom_patchfs is called with Patcher arguments
    Consolidated setting of st_ino
    
    - now is always set in add_entry
    - st_ino was not set in fake_filesystem.makedir,
      what caused incorrect behavior for os.samefile for directories
    - fixes #515
    Fixed handling of current path in lresolve() / os.lstat()
    
    - fixes #516
    Fixed handling of byte paths
    
    - path entries are always saved as strings
    - byte paths are converted to string paths for most functions
    - fixes #517
    Added automatic patching of file system function in default argument
    
    - works for module-level functions and methods in module-level classes
    - this also makes it unnecessary to reload the "tempfile" module
    Make sure ending path separator is preserved in os.walk
    
    - fixes #512
    Added workaround for O_TMPFILE flag under linux
    
    - create unique file name for memory-based file
      created by that flag
    - fixes #511
    Fixed handling of empty path in os.makedirs
    
    - fixes #510
    Handle open with TMPFILE flag
    
    - added basic test for TemporaryFile
    - fixes #509
    Added possibility to pass additional parameters to `fs` pytest fixture
    
    - added test and documentation
    Added pyfakefs 3.7.1 to release notes
    Added newly introduced compile_pattern method to flavour classes
    
    - copied original versions from _PosixFlavour/_WindowsFlavour
      into respective fake classes
    - use newest available Python version in Travis builds
    - see #508
    Correctly propagate "permission denied" error on creating directory
    
    - fixes #507
    Minor consolidation of release notes format
    Use keyword-only arguments for os functions as in real implementation
    
    - removed more obsolete comments
    - removed obsolete "object" superclass
    Removed support for Python 2.7 and 3.4
    Prepare next version
    
    - removed Python 2.7 and 3.4 support from documentation
    Added support for UNC prefix in links under Windows
    
    - do not allow sendfile() to regular files under MacOs
    - added note about last version supporting Python 2.7 and 3.4
    - see #504
    Added special handling for patching shutil under MacOs under Python 3.8
    
    - set shutil attribute to False that allows using native
      posix copy function during patching
    - see #504
    Added sendfile implementation (posix only)
    
    - see #504
    Fixed some failing tests under Windows with Python 3.8
    
    - added support for devnull in Windows / Python 3.8
    - added preliminary support for st_file_attributes and st_reparse_tag
      (Windows-specific os.stat_result attributes)
    - consider local UNC path returned by os.readlink in tests
    - see #504
    Unload all modules loaded during the test
    
    - these module can still hold references to fake modules
    - modules already loaded at test start are not affected
    - see #501 and #427
    Fixed side-effect of calling DirEntry.stat() under Windows
    
    - st_nlink of the file object was set to 0 (instead of the stat result)
    - fixes #502
    Import distutils.file_util to prevent fake fs caching problem
    
    - closes #501
    Fixed handling of missing directory read access
    
    - enable for Linux, disable for root users
    - see #496
    Propagate exception for non-existing path in os.scandir()
    
    - fixes #498
    Adapt release notes after 3.6.1 release
    
    - fix syntax error in qualifiers
    Removed note about removing the old API
    Clarify that version 4.0 is the release after next
    Added note about dropping Python 2 support
    Avoid rare side effect during module iteration in test setup
    
    - fixes #338, fix provided by @con-f-use
    Prepare next release
    Added support for relative symlinks in add_real_directory (#490)
    
    * Added support and tests for relative and absolute symlinks in add_real_directory
    * Added support and tests for symlinks outside the real directory in add_real_directory
    * Added support for symlinks in add_real_directory with lazy_read=True
    * Updated changelog to include new symlink features
    Fixed incorrect argument names for some os functions
    
    - added support for src_dir_fd and dst_dir_fd arguments
      in os.rename, os.replace and os.link
    Add __next__ to FakeFileWrapper
    Added test for correctly installed Python 3 version in Travis.CI
    
    - added test for MacOS only, where Travis does not control the version
    - closes #487 by making sure a failed Python build will be visible
    Make sure fake DirEntry implements os.PathLike if needed
    
    - for Python >= 3.6 and if using os.scandir
      (e.g. not the scandir package)
    - fixes #483
    Support modules instead of module names in additional_skip_names
    
    - closes #482
    Fixed incorrect argument name for os.makedirs
    
    - fixes #481
    Add possibility to always run tests as non-root user
    
    - added argument allow_root_user to Patcher and UnitTest
    - see #474
    Removed unneeded parameter "use_dynamic_patch"
    
    - remove unneeded workaround for PyCharm debugger
    - slightly adapted usage documentation
    Suppress specific pytest warning under Python 2.7
    
    - fixes #466
    Added support for os.pipe
    
    - see #473
    Prepare next release
    Do not lazily read contents of real file after writing to it
    
    - fixes #470
    Handle patching open under Python 2 separately
    
    - avoids patching __builtins__ which breaks functionality
    - see #469
    Prepare next release
    
    - adapted release notes
    Patch both pathlib and pathlib2 if present
    
    - see #467
    Prepare next release
    
    - adapted release notes
    Load external packages pathlib2 and scandir before internal packages
    
    - see #462
    Removed shebang from all test files
    
    - fixes #461
    - prepare patch release
    Prepare next release after 3.5.4
    Handle AttributeError triggered by modules without __module__ attribute
    
    - fixes #460
    Set initial user and group IDs to real IDs
    
    - added tests running as root to test both root and non-root cases
    - adapted code and tests to consider root access
    Added context manager class for pause/resume
    
    - added usage documentation
    - see #448
    Adapted pytest plugin and pytest example plugin
    
    - added pytest and tokenize to SKIPMODULES
    - use nicer yield syntax in plugin (see #458)
    - fixed AttributeError in failing pytest in Python 2
    Prepare next version
    Make tests for access time less strict
    
    - allows real fs tests to pass on file systems on XFS fs
    - fixes #453
    Adapted documentation to last changes
    Added automatic patching of builtin and io open as other name
    
    - in Python 2, builtin open is now handled by FakeBuiltinModule
    - in Python 3, builtin open is handled via io.open
    - adapted pytest plugin to ensure that open is not patched
      for linecache and dependent tokenize modules
    - importing builtin open as other name does not work with PyPy2
    Added automatic patching of functions imported as other name
    
    - works for functions from file system modules
    - does not work for built-in open()
    Prepare next version
    Added support for pause/resume patching of the file system modules
    
    - can be called from the unit test, the patcher or the fs
    Fixed usage of modules_to_patch parameter
    
    - adapted example, as the usage has slightly changed
      (full module path is now needed)
    - fixes #450
    Set st_uid and st_gid for new files to current user/group ID
    
    - allow to set current group ID
    - see #449
    Fixed using `modules_to_patch` with modules without dir()
    
    - check for existing dir() before calling it
    - fixes #450
    Allow trailing separator in fake_filesystem.add_real_directory()
    
    - fixes #446
    Fixed recursion error on unpickling the fake file system
    
    - changed FakeStatResult so that pickling works under Python 2
    - fixes #445
    Prepare next version
    Release branch for version 3.5
    Minor documentation updates to prepare release
    
    - updated release notes
    - updated auto-generated documentation
    Automatically patch imported functions
    
    - allows imports like 'from os import stat' to be patched
    Switched on deprecation warning for old API by default
    Changed patch behavior to rely on module names instead of imported names (#434)
    
    * Changed patch behavior to rely on module names instead of imported names
    
    - adapted tests and documentation
    
    * Clarify import method explanation
    Added ability to set user ID (#432)
    
    - can be used to test root user
    - see #431
    Patch 'Path' if imported from pathlib or pathlib2
    
    - see #440
    Adapted file timestamp update to real fs behavior
    
    - tests originally by @simonfagerholm, adapted
    - fixes #435
    Updated release notes
    Remove support for Python 3.3
    
    - added 3.7 builds for MacOS and Windows
    - use released 3.7 build for Linux
    Added TestCase arguments to setUpPyfakefs() for convenience
    Removed patch_path argument from UnitTest and Patcher (#429)
    
    - path is only patched if it is os.path (detected by name)
    List new feature pathlib2 per #422
    Added some support for extended filesystem attributes (#426)
    
    - added support for reading/writing arbitrary extended attributes
      (Linux / Python 3 only)
    - Note: support for extended fs attributes is assumed, not checked
    - see #423
    Added initial support for null device
    
    - added special file and file buffer for null device
    - fixes #418
    Fixed link in release notes
    Prepare next version
    
    - adapted version
    - adapted release notes
    Changed version to 3.4.3
    
    - version 3.4.2 was incorrectly published due to a mistake
    Preparing release 3.4.2
    
    - adapted version
    - adapted release notes
    - added Python 3.7 to setup classifiers
    Fixed tell position after seek in append mode
    
    - fixes #363
    Added handling of linking to path ending with separator
    
    - fixes #407
    Fixed another rename problem with trailing separator under MacOS
    
    - fixes #406
    Added support for path-like object argument in convenience methods
    
    - concerns create_file(), create_dir(), create_symlink(), add_real_file() and add_real_directory()
    - closes #409
    Fixed handling of renaming symlinks to other case in MacOS
    
    - fixes #389
    Some minor whitespace fixes to satisfy flake8
    Fixed behavior of os.readlink with trailing separator under MacOS
    
    - fixes #392
    Added "closed" property to file wrapper
    
    - see #380
    Directly use README.md for pypi (use new pypi feature)
    
    - tested in https://test.pypi.org/project/pyfakefs/3.4.2/
    - see #358
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Make sure os.exists returns False for file path ending with path separator
    
    - fixes #364
    Raise if remove a linked path ending with path separator
    
    - fixes #360
    Raise OSError in os.readlink if path ends with separator
    
    - fixes #359
    Advance version for next release
    Adapt release notes for 3.4.1 patch release
    Adapted release notes
    
    - adapted version for patch release
    - added chapter about mount point usage
    Adapted version for next release
    Prepare release 3.4
    
    - added documentation link for 3.3 version
    - added pypi link
    Updated release notes
    
    - removed unused .pylintrc
    Do not resolve links in base path for fake os.scandir
    
    - used PEP8 conform methods in fake_scandir
    - fixes #350
    Added argument 'target_path' to add_real_file() and add_real_directory()
    
    - allows to map real file system files and directories
      to another location in the fake file system
    - see #347
    Added modules_to_reload and use_dynamic_patch as Patcher arguments
    
    - simplified DynamicPatcher to avoid side effects
    - adapted documentation
    Added possibility to add additional faked modules
    
    - can be configured using argument modules_to_patch
    - adapted documentation
    - fixes #345
    Added own text stream buffer to correctly handle newlines
    
    - fixed/added tests for newline support, added real fs tests
    - see #339
    Added support for dir fd argumentent to fake os.scandir()
    
    - introduced in Python 3.7, Posix only
    - fixes #346
    Minor documentation updates
    
    - removed unused script
    Use os.strerror() to create error messages for OSError and IOError
    
    - see #202
    Removed the unneeded workarounds for tempfile
    
    - remove special_names argument
    - use modules_to_reload instead to reload tempfile
    - fixes #340
    Changed most tests to use a drive root under Windows
    Adapted documentation
    
    - some PEP-8 reformatting
    - see #186
    Fixed scandir iterator for Python 2
    
    - adapted example test to work with scandir module
    - fixed scandir test to work with scandir module
    - see #332
    Mention the creation of the temp directory in the release notes
    
    - see #329
    Removed Python 2.6 support (#327)
    
    Closes #293
    Prepare pyfakefs for version 3.4 development.
    Edit version 3.3 release notes CHANGES.md for clarity (#326)
    Adding appveyor Windows tests for Python 2.7, 3.3 and 3.6
    Minor documentation updates
    
    - adapted documentation links to release and master documentation
    - mentioned MacOS builds on Travis CI
    Updated release notes
    
    - removed unneeded variable introduced in wrapper functions
    Reverted to previous mechanism for tempfile patching
    
    - do not use dynamic loading per default
    - revert to the ugly but working tempfile patching
    - marked dymamic features as experimental in documentation
    Added dynamic patcher that patches files loaded after setup
    
    - added modules_to_reload instead of special_names and use it for tempfile
    - removed tempfile patch
    - see #248
    Added update from file in low-level write to match real behavior
    
    - ensures correct synchronization if multiple FDs are open for writing
    - fixes #211
    Do not allow renaming to symlink
    
    - raises OSError with errno.ENOTDIR under Unix, EEXIST under Windows
    - fixes #251
    os.mkdir does not remove symlink under Unix
    
    - fixes #252
    Consider existing symlink if creating a symlink
    
    - fixes #250
    Added missing check to allow renaming broken symlinks
    
    - fixes #249
    Symlink shall not create parent directories
    
    - CreateLink() still does this for convenience, but symlink and pathlib.symlink not
    - fixes #247
    
    - work in progress
    Removed fake_filesystem_glob.py, relying on patched os module
    
    - changed test to test the real glob with the fake filesystem
    - see #189
    Another IOError vs. OSError mismatch
    
    - fixes #246
    Raise OSError instead of IOError if parent is not a directory
    
    - fixes #243
    - fixes #244 (duplicate)
    - fixes #245 (duplicate)
    Raise OSError instead of IOError for existing hardlink
    
    - raise OSError if trying to create a hardlink to a directory
    - fixes #241
    Traverse top level symlink in os.walk regardless of 'followsymlinks' value
    
    - fixes #240
    Fixed another case where low-level I/O function raises OSError instead of IOError
    
    - fixes #238
    Rename renames the symlink itself, not the target
    
    - fixes #239
    Added additional possibility to configure Patcher
    
    - added argument that allows adding modules for patching that import file system modules under another name
    - fixes #231
    Consider symlink if creating a hard link
    
    - fixes #234
    Raise OSError instead of IOError for low-level open
    
    - fixes #237
    Raise correct exceptions for low level read/write
    
    - fixes #235
    Fixed renaming of symlinks
    
    - fixes #233
    Do not allow renaming a directory to a file
    
    - fixes #232
    Do nothing if renaming to a hard link of a file
    
    - fixes #227
    Handle try to recursive rename for raising OSError
    
    - fixes #216
    Replaced GetObject with ResolveObject to correctly handle symlinks
    
    - replaced in RemoveObject(), ConfirmDir() and chdir()
    - fixes #226
    Correctly handle case where the rename target has a regular file as parent
    
    - fixes #224
    Enable renaming directory to existing directory under Posix
    - raise OSError if destination is not empty, or if source is a file
    - otherwise allowing reaming under Posix
    - fixes #217
    Removed most of FakeShutilModule functionality (#222)
    
    * Removed most of FakeShutilModule functionality
    - adapted tests to work with fake_filesystem_unittest.TestCase
    - fixed some tests
    - fake_filesystem.ResolvePath: consider alternative path separator for resolving links
    - fixes #194
    
    * Correct docstring for disk_usage()
    Fixed handling of non-existent file path with existing parent file
    
    - caused obscure bug if the file name was contained in the pseudo-parent file
    - fixes #219
    Added support for dir_fd argument in several os functions
    
    - fixes #206
    Added possibility to use open file descriptor as path
    - added for os.utime, os.chmod, os.chdir, os.chown, os.listdir, os.stat and os.lstat
    - fixes #205
    Make sure symlinks are considered in some functions
    - resolve path for os.path.size and os.path.getmtime/getatime/getctime
    - see #210
    Make sure adding object to a symlinked directory works
    
    - see #215
    Fixed handling of invalid parent paths in CreateDirectory()
    - fixed handling of symlinks in MakeDirectories()
    - fixed exception thrown on too many symlinks
    - see #209
    Raise exception if trying to create file in read-only directory
    
    - raise exception if trying to create file in read-only directory under Posix OS
    - fixed assertRaisesIOError and assertRaisesOSError
    - never allow adding of already existing file or directory
    - do not allow FakeFile without filesystem
    - fixes #203
    Added support for basic modes in os.open() (#207)
    
    - added support for O_RDONLY, O_WRONLY, O_RDWR, O_APPEND, O_TRUNC and O_EXCL (O_CREAT was already implemented)
    - added support for opening directories read-only for Posix systems
    - fixes #204
    Added support for fake os.path.samefile (#201)
    
    - fixes #193
    Added xtime_ns in stat result (#200)
    
    - added fake stat_result to make this possible
    - fixes #196
    Add template for version 3.3 release notes
    Fix add_real_file() MacOS atime, prepare for release (#190)
    
    * Update atime when CopyRealFile() accesses real file
    
    This is a platform-specific issue for MacOS and BSD
    
    * Deprecate CopyRealFile(), prepare for Release 3.2
    Corrected handling of byte/unicode paths in several functions
    
    - added FakeOsModule.getcwdb() for Python 3
    - see #187
    Added support for errors argument in FakeFileOpen (#184)
    Copied mox3 stubout into pyfakefs (#183)
    
    * Copied mox3 stubout into pyfakefs
    
    - removed dependency on mox3
    
    * Added some tests for mox3_stubout functionality
    
    * Added documentation for mox3 stubout usage in pyfakefs
    
    - proposed by jmcgeheeiv in review
    Minor documentation changes (#181)
    
    * Minor documentation changes
    
    - added links to CHANGES.md for convenience
    - made some links in README.md absolute to work in Pypi description
    - adapted requirements as discussed in #179
    
    * Cleaned up autodoc
    
    - added some introduction (taken from README)
    - cleaned up index
    - fixed minor indentation problems in docstrings
    Normalize file path in RemoveObject() (#178)
    
    - fixes #177
    Fixed case handling for mount points
    
    - always use the original case for a mount point
    Added methods to access real files
    
    - allow to add really existing files and directory trees to the fake
    file system, with the contents read on demand
    - see #170
    Updated release notes, corrected comment
    Added pypy to Travis CI
    
    - synchronizes travis with tox.ini
    Fixed changing case in rename in case-insensitive file systems
    
    - fixes #160
    Update master to the as-yet unreleased version 3.2
    Update CHANGES.md in preparation for 3.1 release.
    Updated release notes
    Minor changes to copyRealFile
    
    - do not test the whole content of string contents as this will not work
    with other line endings (e.g. on Windows)
    - moved setUpClass() code into class as setUpClass() is not available
    under Python 2.6
    Added helper method FakeFile.CopyRealFile()
    
    This copies a file from the real file system to
    the fake file system, making it easy to use
    files from the real file system in your tests.
    Advance version to as-yet unreleased version 3.1 in branch master
    Windows test related changes
    
    - adapted some tests to use an arbitrary path separator to make sure we use the defined separator
    - faked split(), dirname(), walk(), realpath(), adapted relpath() to fix these tests
    - fixed case sensitivity for cygwin
    Added support for exclusive creation mode in open
    
    - see #147
    Increased version to 3.0
    Test for IOError subtypes instead of IOError
    
    - fixed incorrect exception on invalid file open mode
    Added auto doc generation
    
    - added sphinx configuration to create documentation from docstrings
    - fixed some sphinx warnings in docstrings
    - added script that recreates documentation after each commit and commit it to gh-pages
    - added mention of pyfakefs version for newer features in docstrings
    Docstring consolidation
    
    - slightly reworked some docstrings, added missing docstrings
    - changed behavior of listdir() to returns unsorted entries as in the real function
    Python 3.6 support
    
    - added support for context manager in scandir iterator (used in pathlib and glob in 3.6)
    - added handling for path-like objects for some functions (3.6 only)
    - fixed incorrect usage of random generator in fake_tempfile
    - added Python 3.6 in Travis CI
    Fixed some pylint warnings
    - increased max line length to 100 to avoid too many warnings
    - removed invalid pylint codes, replaced pylint codes with names for better readability
    - adapted release notes
    Added some release notes for previous version
    
    - added default .pylintrc with changes for function and method names used in pyfakefs
    Added changes for 2.9 release
    Documentation changes after review
    
    - added test for writing excel file
    Added partial support for pandas to work with pyfakefs
    
    - support for read_csv and read_excel (with the default module)
    - see #531
    Make sure pathlib2 and scandir package are used if available
    
    - adapted tests to test pathlib2 and scandir package in all versions
    - see #462
    Load external packages pathlib2 and scandir before internal packages
    
    - see #462
    Add support for pathlib2 (#408) (#422)
    
    Well done.
    Minor documentation changes
    Fixed typos, added some minor changes in contributing guide
    More PEP-8 fixes and improvements
    
    - added initial contributing guide
    Adapted release notes and Readme
    Removed support for Python 2.7 and 3.4
    Prepare next version
    
    - removed Python 2.7 and 3.4 support from documentation
    Added Python 3.8 to setup.py and README
    
    - added note about ending Python 2.7/3.4 support in the documentation
    Added another badge for supported Python versions
    Replaced PyPi link in README with version badge
    
    - more prominent, easier to find
    Changes to correctly run setup.py test under Python 2
    
    - exclude pathlib tests if pathlib is not available
    - moved pytest tests put of tests to not be discovered
    - see #465
    Add instructions for running in Docker
    Adapted test path in README.md
    
    - fixes #454
    Set PYTHONPATH before running tests in doc example
    Switched on deprecation warning for old API by default
    Move build badges to the beginning of the line
    Make the Windows CI info look like the others
    Use same Travis build badge for Linux and MacOS
    
    Before, it looked like Linux was untested.  Only a very careful reading revealed that the build
    badge for MacOS also applied to Linux.
    Remove support for Python 3.3
    
    - added 3.7 builds for MacOS and Windows
    - use released 3.7 build for Linux
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Replaced usage documentation in README with link to ghpages
    
    - corrected test commands
    Fixed documentation link
    Prepare release 3.4
    
    - added documentation link for 3.3 version
    - added pypi link
    More documentation updates
    
    - minor adaptations in README
    - adapted copyright
    - minor documentation changes for better output
    - fixed failing doctests in fake_filesystem.py
    - removed Python 3.2 from setup.py
    Added more usage documentation to gh-pages
    More PEP-8 fixes and improvements
    
    - added initial contributing guide
    Make pyfakefs API PEP-8 conform
    
    - changed methods names
    - added old method names as depracated version
    - added possibility to switch on deprecation warning
    - see #186
    Minor documentation update
    
    - updated version for gh-pages
    - corrected MacOS build python versions
    Clarify header
    Remove claim of Python 2.6 support
    
    Python 2.6 will not be supported in upcoming pyfakefs version 3.4
    Adjust platform docs and add Appveyor build status
    Prepare pyfakefs for version 3.4 development.
    Fixed typos in documentation, mention Windows builds
    Minor documentation updates
    
    - adapted documentation links to release and master documentation
    - mentioned MacOS builds on Travis CI
    Correct PyTest hyperlink in README.md
    Adapted usage scenarios in README
    
    - see #189
    Removed fake_filesystem_glob.py, relying on patched os module
    
    - changed test to test the real glob with the fake filesystem
    - see #189
    Correct misspelled "pyfakfs"
    Explain pyfakefs cannot be used to patch C libraries
    
    Fixes #180
    Copied mox3 stubout into pyfakefs (#183)
    
    * Copied mox3 stubout into pyfakefs
    
    - removed dependency on mox3
    
    * Added some tests for mox3_stubout functionality
    
    * Added documentation for mox3 stubout usage in pyfakefs
    
    - proposed by jmcgeheeiv in review
    Minor documentation changes (#181)
    
    * Minor documentation changes
    
    - added links to CHANGES.md for convenience
    - made some links in README.md absolute to work in Pypi description
    - adapted requirements as discussed in #179
    
    * Cleaned up autodoc
    
    - added some introduction (taken from README)
    - cleaned up index
    - fixed minor indentation problems in docstrings
    Corrected PyTest minimum version to 2.8.6 in README
    
    This error is limited to README.  The version number is correct elsewhere.
    Correct wiki link in README
    Add protocol to pytest docs link in readme
    
    Closes #172.
    Show additional documentation as a list in README
    Update links to wiki, rearrange README Usage section
    Update README.md with info about running unit tests
    
    Created new top level section 'Development', placed existing 'Continuous
    Integration' and new 'Running Tests' sections in it. Reordered sections to
    place 'Installation' ahead of 'Development'.
    Correct README.md with pytest version compatibility in requirements.txt
    Cleanup README.md whitespace
    added a test for the pytest module and updated README.md
    Added missing version hints
    
    - made shutil.disk_uage only available for Python >= 3.3
    Added auto doc generation
    
    - added sphinx configuration to create documentation from docstrings
    - fixed some sphinx warnings in docstrings
    - added script that recreates documentation after each commit and commit it to gh-pages
    - added mention of pyfakefs version for newer features in docstrings
    Edit PyTest support sentence
    Modify tests to run properly on OSX.  Update README.
    
    The only change I made here is to recognize in the tests that on OSX ~root
    is /var/root instead of /root.
    
    setup.py has claimed OSX support all along, which is basically true.
    Document the requirement for PyTest 2.8.6 or above.
    
    Fixes #43.
    Fix typo in README.md
    pyfakefs works with Linux, Windows and MacOS
    Clarify that there are two approaches to usage.
    Update README.md
    Update README.md
    reorganizing into a package for easier distribution (eg. PyPI)
    Update README.md
    Add a example in README to show how to mock with fakefs
    Update README.md
    Update README.md
    Update README.md
    
    Added Travis CI build status badge.
    Update README.md
    Update README.md
    
    Add CI section
    Update README.md
    
    Reword.
    Replace dependency on 'mox' with standard library module 'mock'.
    Import unittest2 for Python 2.6 compatability
    In Travis, conditionally install unittest2 for Python 2.6.
    Move the usage tutorial to the Wiki, http://github.com/jmcgeheeiv/pyfakefs/wiki/Tutorial
    Move README to README.md so it forms a proper front page.
    Add usage tutorial from jmcgeheeiv-pyfakefs (http://code.google.com/p/jmcgeheeiv-pyfakefs/)
    Fixed Issue 20: Python 3 now properly supports files open in binary mode as a bytes list.
    Fixed Issue 20: Python 3 now properly supports files open in binary mode as a bytes list.
    updated packages for python 3
    updated packages for python 3
    Initial import of pyfakefs.
    Fix missing import introduced by previous change
    Install pyfakefs in appveyor build
    
    - for an unclear reason it stopped working without installing
    Make sure pytest will work without pyfakefs installed
    - import fs in conftest.py used in tests
    - remove tests for deprecated function
    - see #550
    Added missing pytest pixture tests for AppVeyor
    Removed support for Python 2.7 and 3.4
    Always implement os.PathLike for DirEntry in Python >= 3.6
    
    - added CI tests for Python 3.8 (Linux and Windows)
    - skip failing Windows test temporarily for Python 3.8
      (test_add_existing_real_directory_symlink)
    - see #504
    Added sendfile implementation (posix only)
    
    - see #504
    Changes to correctly run setup.py test under Python 2
    
    - exclude pathlib tests if pathlib is not available
    - moved pytest tests put of tests to not be discovered
    - see #465
    Do not run real fs tests by defaults
    
    - tests are enabled by an environment variable, set in CI tests
    - see #465
    Remove support for Python 3.3
    
    - added 3.7 builds for MacOS and Windows
    - use released 3.7 build for Linux
    Add support for pathlib2 (#408) (#422)
    
    Well done.
    Added test showing the usage of a custom pytest fixture
    
    - moved pytest tests into separate subdirectory
    - the new test is an example for how to work around #420
    Make sure that the linecache module is not using the fake file system
    
    - does not work for Python 3.3 (which should not be used anymore anyway)
    - see #381
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    Replaced Python 3.3 with Python 3.4 + 3.5 in appveyor
    
    - due to a Windows-specific problem in pytest after removing support
      for Python 3.3 the current pytest will not work there
    Removed workaround for appveyor builds
    
    - has been fixed in https://github.com/pytest-dev/py/issues/170
    - closes #330
    Explicitely install working py version in appveyor
    
    - see #330
    Adding appveyor Windows tests for Python 2.7, 3.3 and 3.6
    Removed Python 2.6 support (#327)
    
    Closes #293
    Added dynamic patcher that patches files loaded after setup
    
    - added modules_to_reload instead of special_names and use it for tempfile
    - removed tempfile patch
    - see #248
    Copied mox3 stubout into pyfakefs (#183)
    
    * Copied mox3 stubout into pyfakefs
    
    - removed dependency on mox3
    
    * Added some tests for mox3_stubout functionality
    
    * Added documentation for mox3 stubout usage in pyfakefs
    
    - proposed by jmcgeheeiv in review
    Minor documentation changes (#181)
    
    * Minor documentation changes
    
    - added links to CHANGES.md for convenience
    - made some links in README.md absolute to work in Pypi description
    - adapted requirements as discussed in #179
    
    * Cleaned up autodoc
    
    - added some introduction (taken from README)
    - cleaned up index
    - fixed minor indentation problems in docstrings
    Require pytest
    
    Also upgrade wheel and mox3
    Add mox3 0.9 dependency.
    Replace dependency on 'mox' with standard library module 'mock'.
    Import unittest2 for Python 2.6 compatability
    In Travis, conditionally install unittest2 for Python 2.6.
    Add continuous integration testing with Travis CI.
    Correct mox version
    Add prerequisite mox
    Directly use README.md for pypi (use new pypi feature)
    
    - tested in https://test.pypi.org/project/pyfakefs/3.4.2/
    - see #358
    Include tests in PyPI tarball
    Add CHANGES.md release notes to manifest.
    Add the example.py and test example_test.py
    reorganizing into a package for easier distribution (eg. PyPI)
    Removed support for Python 2.7 and 3.4
    Added Python 3.8 to setup.py and README
    
    - added note about ending Python 2.7/3.4 support in the documentation
    Changes to correctly run setup.py test under Python 2
    
    - exclude pathlib tests if pathlib is not available
    - moved pytest tests put of tests to not be discovered
    - see #465
    Add support for pathlib2 (#408) (#422)
    
    Well done.
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    Removed Python 2.6 support (#327)
    
    Closes #293
    Adding back Python 2.6 builds
    
    - accidentally removed while adding MacOS builds
    - reverted minor change incompatible with Python 2.6
    Raise OSError with errno.ENOENT instead of errno.ENOTDIR under Windows in some cases
    
    - see #303
    Fixed permission error under Windows
    
    - fixes more real OS tests under Windows
    Fixed initial position in append mode
    
    - see #303
    Make sure symlinks are considered in some functions
    - resolve path for os.path.size and os.path.getmtime/getatime/getctime
    - see #210
    Fixed handling of invalid parent paths in CreateDirectory()
    - fixed handling of symlinks in MakeDirectories()
    - fixed exception thrown on too many symlinks
    - see #209
    Copied mox3 stubout into pyfakefs (#183)
    
    * Copied mox3 stubout into pyfakefs
    
    - removed dependency on mox3
    
    * Added some tests for mox3_stubout functionality
    
    * Added documentation for mox3 stubout usage in pyfakefs
    
    - proposed by jmcgeheeiv in review
    Align tox python version support configuration to travis configuration
    Add missing requirements.txt deps to tox configuration
    Pass HOME & USERPROFILE env variables to tox for use in tests
    added a test for the pytest module and updated README.md
    Fixes Issue 14: Support for Python 3
    Fixes Issue 14: Support for Python 3
    Prepare next release
    Moved version to separate python file
    
    - reduces dependencies of setup.py
    Added patching of django file locks
    
    - no tests added (would be a bit complicated),
      has been tested in production code
    Added partial support for pandas to work with pyfakefs
    
    - support for read_csv and read_excel (with the default module)
    - see #531
    Use keyword-only arguments for os functions as in real implementation
    
    - removed more obsolete comments
    - removed obsolete "object" superclass
    Fixed some pep-8 / pylint findings
    Copied mox3 stubout into pyfakefs (#183)
    
    * Copied mox3 stubout into pyfakefs
    
    - removed dependency on mox3
    
    * Added some tests for mox3_stubout functionality
    
    * Added documentation for mox3 stubout usage in pyfakefs
    
    - proposed by jmcgeheeiv in review
    Do not call fake pathlib.Path if called from skipped module
    
    - add possibility for special handling for skipped modules
    - fixes #553
    Fixed a few flake8 warnings
    Some consolidation of pathlib/pathlib2 import
    Patch both pathlib and pathlib2 if present
    
    - see #467
    Make sure pathlib2 and scandir package are used if available
    
    - adapted tests to test pathlib2 and scandir package in all versions
    - see #462
    Load external packages pathlib2 and scandir before internal packages
    
    - see #462
    Add support for pathlib2 (#408) (#422)
    
    Well done.
    Fix incorrect check for symlink in fake os.walk
    
    - proposed by @giladreti
    - fixes #559
    Fixed handling of byte paths
    
    - path entries are always saved as strings
    - byte paths are converted to string paths for most functions
    - fixes #517
    Preserve top directory in os.walk
    
    - simplified the previous fix
    - see #512
    Make sure ending path separator is preserved in os.walk
    
    - fixes #512
    Use keyword-only arguments for os functions as in real implementation
    
    - removed more obsolete comments
    - removed obsolete "object" superclass
    Removed support for Python 2.7 and 3.4
    Always implement os.PathLike for DirEntry in Python >= 3.6
    
    - added CI tests for Python 3.8 (Linux and Windows)
    - skip failing Windows test temporarily for Python 3.8
      (test_add_existing_real_directory_symlink)
    - see #504
    Fixed side-effect of calling DirEntry.stat() under Windows
    
    - st_nlink of the file object was set to 0 (instead of the stat result)
    - fixes #502
    Propagate exception for non-existing path in os.scandir()
    
    - fixes #498
    Fix scandir DirEntry.path for relative path or fd
    
    The documentation for os.DirEntry.path [1] says that the path attribute
    of a DirEntry object is only absolute if scandir()'s path argument was
    absolute, and simply the name attribute if scandir()'s path argument was
    a filedescriptor. This patch makes pyfakefs do this, and adjusts the
    tests.
    
    Relative symlinks are now also covered in the scandir tests.
    
    RealScandirFdTest.test_path_like was failing for me in Python 3.7.3 on
    Debian Bullseye.
    
    [1] https://docs.python.org/3/library/os.html#os.DirEntry.path
    Make sure fake DirEntry implements os.PathLike if needed
    
    - for Python >= 3.6 and if using os.scandir
      (e.g. not the scandir package)
    - fixes #483
    Fixed a few flake8 findings, mainly formatting stuff
    Automatically patch imported functions
    
    - allows imports like 'from os import stat' to be patched
    Add support for pathlib2 (#408) (#422)
    
    Well done.
    Fixed some flake8 and deprecation warnings
    Fixed some flake8 findings for tests, adapted line length to 79 chars
    Fixed some flake8 findings, adapted line length to 79 chars
    Do not resolve links in base path for fake os.scandir
    
    - used PEP8 conform methods in fake_scandir
    - fixes #350
    Added more usage documentation to gh-pages
    Added support for dir fd argumentent to fake os.scandir()
    
    - introduced in Python 3.7, Posix only
    - fixes #346
    Minor documentation updates
    
    - removed unused script
    Fixed scandir iterator for Python 2
    
    - adapted example test to work with scandir module
    - fixed scandir test to work with scandir module
    - see #332
    Added support for patching scandir module
    
    - module contains backported os.scandir
    Moved pytest specific SKIPMODULES to Patcher
    
    - needed anyway, and makes it easier to write customized fixtures
    - adapted documentation for customizing patching
    Do not call fake pathlib.Path if called from skipped module
    
    - add possibility for special handling for skipped modules
    - fixes #553
    Changed patch_open_code argument to accept an additional AUTO mode
    
    - possible modes are now PatchMode.OFF (default), PatchMode.ON and PatchMode.AUTO
    - in auto mode, open_case is patched for files existing in the fake filesystem
    Added some support for io.open_code in Python 3.8
    
    - added new argument 'patch_open_code' to allow patching the function
    - see #554
    Always add linecache and tokenize to skipped modules
    
    - needed not only for pytest
    Do not call fake open if the caller is a skipped module
    
    - fixes #552
    Fixed handling of additional_skip_names with several module components
    More robust exception handling for exceptions in inspect functions
    
    - several inspect functions can cause side-effects that lead to exceptions
      - we want to ignore them all
    Suppress deprecation warnings while collecting modules
    
    - closes #542
    Documentation changes after review
    
    - added test for writing excel file
    Added partial support for pandas to work with pyfakefs
    
    - support for read_csv and read_excel (with the default module)
    - see #531
    Make sure fs modules in pathlib are patched
    
    - pathlib shall not be added to skip names
    - removed unneeded checks for pathlib
    - fixes #527
    Refactored the patchfs decorator to not need a second decorator
    
    - provided by @AJNeufeld at Code Review
    Ignore any exception that may happen in inspect.getmembers()
    
    - fixes #523
    Changed decorator to be able to be called with and without arguments
    
    - now can be used both with call syntax, and without parentheses
    Added convenience decorators to patch single functions
    
    - decorator patchfs is called without arguments (and no parentheses)
    - decorator custom_patchfs is called with Patcher arguments
    Fixed handling of byte paths
    
    - path entries are always saved as strings
    - byte paths are converted to string paths for most functions
    - fixes #517
    Added automatic patching of file system function in default argument
    
    - works for module-level functions and methods in module-level classes
    - this also makes it unnecessary to reload the "tempfile" module
    Replaced obsolete IOError with OSError
    Use keyword-only arguments for os functions as in real implementation
    
    - removed more obsolete comments
    - removed obsolete "object" superclass
    Removed support for Python 2.7 and 3.4
    Added special handling for patching shutil under MacOs under Python 3.8
    
    - set shutil attribute to False that allows using native
      posix copy function during patching
    - see #504
    Clarify dereferencing comment in DynamicPatcher
    Unload all modules loaded during the test
    
    - these module can still hold references to fake modules
    - modules already loaded at test start are not affected
    - see #501 and #427
    Import distutils.file_util to prevent fake fs caching problem
    
    - closes #501
    Fixed flake8 warnings
    
    - changed flake8 test to fail the build step on warnings
    Avoid rare side effect during module iteration in test setup
    
    - fixes #338, fix provided by @con-f-use
    Support modules instead of module names in additional_skip_names
    
    - closes #482
    Use snapshot of modules to avoid RuntimeError
    
    When running code on Python 3.7.3, we get this error intermittently: RuntimeError: dictionary changed size during iteration
    Creating a list instead of set appears to solve this issue.
    Add possibility to always run tests as non-root user
    
    - added argument allow_root_user to Patcher and UnitTest
    - see #474
    Fixed a few flake8 warnings
    Removed unneeded parameter "use_dynamic_patch"
    
    - remove unneeded workaround for PyCharm debugger
    - slightly adapted usage documentation
    Suppress specific pytest warning under Python 2.7
    
    - fixes #466
    Handle patching open under Python 2 separately
    
    - avoids patching __builtins__ which breaks functionality
    - see #469
    Some consolidation of pathlib/pathlib2 import
    Patch both pathlib and pathlib2 if present
    
    - see #467
    Add PyCharm debugger to skipnames under Python 2
    
    - if running under PyCharm, the module is now excluded
    - see #464
    Make sure pathlib2 and scandir package are used if available
    
    - adapted tests to test pathlib2 and scandir package in all versions
    - see #462
    Handle AttributeError triggered by modules without __module__ attribute
    
    - fixes #460
    Added context manager class for pause/resume
    
    - added usage documentation
    - see #448
    Do not patch builtins in Python 3, including PyPy3
    
    - slightly adapted documentation
    Adapted documentation to last changes
    Added automatic patching of builtin and io open as other name
    
    - in Python 2, builtin open is now handled by FakeBuiltinModule
    - in Python 3, builtin open is handled via io.open
    - adapted pytest plugin to ensure that open is not patched
      for linecache and dependent tokenize modules
    - importing builtin open as other name does not work with PyPy2
    Added automatic patching of functions imported as other name
    
    - works for functions from file system modules
    - does not work for built-in open()
    Fixed a few flake8 findings, mainly formatting stuff
    Added support for pause/resume patching of the file system modules
    
    - can be called from the unit test, the patcher or the fs
    Fixed usage of modules_to_patch parameter
    
    - adapted example, as the usage has slightly changed
      (full module path is now needed)
    - fixes #450
    Fixed using `modules_to_patch` with modules without dir()
    
    - check for existing dir() before calling it
    - fixes #450
    Automatically patch imported functions
    
    - allows imports like 'from os import stat' to be patched
    Changed patch behavior to rely on module names instead of imported names (#434)
    
    * Changed patch behavior to rely on module names instead of imported names
    
    - adapted tests and documentation
    
    * Clarify import method explanation
    Patch 'Path' if imported from pathlib or pathlib2
    
    - see #440
    Added TestCase arguments to setUpPyfakefs() for convenience
    Removed patch_path argument from UnitTest and Patcher (#429)
    
    - path is only patched if it is os.path (detected by name)
    Import zipfile to avoid problem with late import (#428)
    
    - fixes #427
    Add support for pathlib2 (#408) (#422)
    
    Well done.
    Fix using setUpPyfakefs when using TestCaseMixin
    Reload original modules in dynamic patcher cleanup
    
    - avoids them to still reference the fake file system
    - see #356
    Fixed some flake8 findings, adapted line length to 79 chars
    Split TestCase into mixin class and TestCase class
    
    Having TestCaseMixin allows you to use PyFakeFs with, for example,
    asynctest.TestCase or django.test.TestCase.
    More documentation updates
    
    - minor adaptations in README
    - adapted copyright
    - minor documentation changes for better output
    - fixed failing doctests in fake_filesystem.py
    - removed Python 3.2 from setup.py
    Added modules_to_reload and use_dynamic_patch as Patcher arguments
    
    - simplified DynamicPatcher to avoid side effects
    - adapted documentation
    Added possibility to add additional faked modules
    
    - can be configured using argument modules_to_patch
    - adapted documentation
    - fixes #345
    Adapted documentation
    
    - mentioned limitations for importing modules
    - added some Patcher argument description
    Removed the unneeded workarounds for tempfile
    
    - remove special_names argument
    - use modules_to_reload instead to reload tempfile
    - fixes #340
    Added missing cleanup for dynamic patcher
    
    - enable dynamic patcher by default
    - adapted some tests to run with pytest
    Only construct DynamicPatcher if necessary
    Fixed some pep-8 / pylint findings
    More PEP-8 adaptations
    
    - adapted method names
    - adapted some formatting
    - see #186
    Make pyfakefs API PEP-8 conform
    
    - changed methods names
    - added old method names as depracated version
    - added possibility to switch on deprecation warning
    - see #186
    Added support for patching scandir module
    
    - module contains backported os.scandir
    Refactored Patcher to be more generic
    Removed Python 2.6 support (#327)
    
    Closes #293
    Return the patcher object in the context manager
    
    - fixes #323
    Let autodoc only document classes and methods relevent for the user
    
    - see #186
    Reverted to previous mechanism for tempfile patching
    
    - do not use dynamic loading per default
    - revert to the ugly but working tempfile patching
    - marked dymamic features as experimental in documentation
    Find additional modules in setup to find modules imported after __init__
    
    - see #199
    Added dynamic patcher that patches files loaded after setup
    
    - added modules_to_reload instead of special_names and use it for tempfile
    - removed tempfile patch
    - see #248
    Adapted usage chapter for auto-generated documentation
    
    - removed tempfile and glob modules from module list
    - moved temp dir generation code from TestCase into Patcher
    - see #189
    Removed tempfile from Patcher
    - removed fake_tempfile
    - removed tests only relevant for fake implementation
    - changed remaining tests to work with real tempfile
    - configure Patcher to work with tempfile, create temp dir in setUpPyfakefs()
    - added hack to fix problem with cached os functions in Patcher (Posix only)
    - added support for O_TEMPORARY flag to os.open (Windows only)
    - added support for low level exclusive mode in Python 2
    - added current pypy version to travis
    - fixes #191
    Removed accidentally left in debug output
    Added additional possibility to configure Patcher
    
    - added argument that allows adding modules for patching that import file system modules under another name
    - fixes #231
    Fix add_real_file() MacOS atime, prepare for release (#190)
    
    * Update atime when CopyRealFile() accesses real file
    
    This is a platform-specific issue for MacOS and BSD
    
    * Deprecate CopyRealFile(), prepare for Release 3.2
    Copied mox3 stubout into pyfakefs (#183)
    
    * Copied mox3 stubout into pyfakefs
    
    - removed dependency on mox3
    
    * Added some tests for mox3_stubout functionality
    
    * Added documentation for mox3 stubout usage in pyfakefs
    
    - proposed by jmcgeheeiv in review
    Minor documentation changes (#181)
    
    * Minor documentation changes
    
    - added links to CHANGES.md for convenience
    - made some links in README.md absolute to work in Pypi description
    - adapted requirements as discussed in #179
    
    * Cleaned up autodoc
    
    - added some introduction (taken from README)
    - cleaned up index
    - fixed minor indentation problems in docstrings
    Added methods to access real files
    
    - allow to add really existing files and directory trees to the fake
    file system, with the contents read on demand
    - see #170
    Patch only modules with fake_filesystem_unittest.Patcher
    copyRealFile fake_file_path defaults to real_file_path (#176)
    
    Changed TestCase.copyRealFile() to default to the value of fake_file_path to the same value as real_file_path, when fake_file_path is not provided/None.
    
    * Updated per PR review.
    Improve documentation of setUpPyfakefs()
    
    and tearDownPyfakefs()
    Correct test to properly test copyRealFile() atime on MacOS.
    
    Updated the documentation to clarify this issue.
    
    This problem manifests on MacOS because it updates atime, whereas Linux
    and Windows do not.
    Minor changes to copyRealFile
    
    - do not test the whole content of string contents as this will not work
    with other line endings (e.g. on Windows)
    - moved setUpClass() code into class as setUpClass() is not available
    under Python 2.6
    Remove errant assert
    Disable fake_filesystem_unittest.copyRealFile() in < Python 2.7
    Move CopyRealFile() to fake_filesystem_unittest
    
    In actual practice it did not work in fake_filesystem.
    Added context manager for Patcher (#136)
    
    - proposed by @mirosval in #135
    Fixed some pylint warnings
    - increased max line length to 100 to avoid too many warnings
    - removed invalid pylint codes, replaced pylint codes with names for better readability
    - adapted release notes
    Added fake_pathlib implementation
    
    - added implementation and test for fake pathlib
    - moved some functionality from FakeOsModule to FakeFilesystem to be
    able to use it from fake pathlib
    - added follow_symlinks argument to to some funxtions in FakeOsModule
    (stat, chmod, chown, access, utime)
    - added replace() and lchmod()
    - fixes #29
    Changes after review by @jmcgeheeiv
    
    - use instance instead of class attributes
    - enhanced documentation
    - added test
    Added class attribute Patcher.patch_path
    
    - can be set to False to avoid patching 'path' (see #53)
    - added optional argument to TestCase constructor to set it
    Changed whitespace to conform to pep-8
    
    - auto-format done by PyCharm
    Removed glob from patched modules
    
    - as discussed with jmcgeheeiv
    Fixed syntax error for Python 2.6
    
    - use explicit set construction to work under Python 2.6
    Removed shutil from SKIPNAMES
    
    - added possibility to add own skipnames in derived test class
    - fixes #104
    - can be used to fix #106
    Added fake io.open
    
    - redirects to FakeFileOpen
    - fixes #70 and #103
    Added fake io.open
    
    - redirects to FakeFileOpen
    - fixes #70 and #103
    reorganizing into a package for easier distribution (eg. PyPI)
    Use unittest2 on python < 2.7
    Replace the mock library with mox3 to fix #48.
    Returned from reliance on mock to mox3.  Tests pass.
    It is no longer necessary to add self.tearDownPyfakefs() to your tearDown() method.
    Also cleaned up method and class variable naming.
    Optimize replaceGlobs
    Fix FakePathModule deprecation in replaceGlobs
    Fix FakePathModule deprecation in Stubber
    Replace dependency on 'mox' with standard library module 'mock'.
    Import unittest2 for Python 2.6 compatability
    In Travis, conditionally install unittest2 for Python 2.6.
    Correct module names
    Add doctest support.
    Add files from pyfakefs Issue 22: https://code.google.com/p/pyfakefs/issues/detail?id=22
    Use keyword-only arguments for os functions as in real implementation
    
    - removed more obsolete comments
    - removed obsolete "object" superclass
    Removed support for Python 2.7 and 3.4
    Automatically patch imported functions
    
    - allows imports like 'from os import stat' to be patched
    Remove unnecessary shebang line
    
    This removes an unnecessary shebang line from `fake_filesystem_shutil.py`, as
    this file is a Python module and isn't invoked via CLI.
    Fixed some flake8 findings, adapted line length to 79 chars
    Make pyfakefs API PEP-8 conform
    
    - changed methods names
    - added old method names as depracated version
    - added possibility to switch on deprecation warning
    - see #186
    Removed most of FakeShutilModule functionality (#222)
    
    * Removed most of FakeShutilModule functionality
    - adapted tests to work with fake_filesystem_unittest.TestCase
    - fixed some tests
    - fake_filesystem.ResolvePath: consider alternative path separator for resolving links
    - fixes #194
    
    * Correct docstring for disk_usage()
    Fix shutil.move implementation
    
    If both the source and destination argument of shutil.move are
    directories the source directory is copied under the target directory.
    pyfakefs implementation copied the source directory to the target
    directory.
    
    The real shutil.move call shutil.copy('/path/to/src', '/path/to/dest')
    moves /path/to/src to /path/to/dest/src but the pyfakefs implementation
    moved the src directory to /path/to/dest
    Added missing version hints
    
    - made shutil.disk_uage only available for Python >= 3.3
    Added auto doc generation
    
    - added sphinx configuration to create documentation from docstrings
    - fixed some sphinx warnings in docstrings
    - added script that recreates documentation after each commit and commit it to gh-pages
    - added mention of pyfakefs version for newer features in docstrings
    Docstring consolidation
    
    - slightly reworked some docstrings, added missing docstrings
    - changed behavior of listdir() to returns unsorted entries as in the real function
    Fixed some pylint warnings
    - increased max line length to 100 to avoid too many warnings
    - removed invalid pylint codes, replaced pylint codes with names for better readability
    - adapted release notes
    Changed whitespace to conform to pep-8
    
    - auto-format done by PyCharm
    Added support for mount points
    
    - added AddMountPoint() together with support for st_ino and st_dev
    - adapted GetDiskUsage() and ChangeDiskUsage() to use the file system
    given by path, added SetDiskUsage() convenience function
    - added FakeOsModule.ismount() implementation
    - moved rename implementation to FakeFilesystem.RenameObject(), adapted
    it and shutil.move() to correctly behave with same and different file
    systems
    - adapted/added tests
    Adding support for filesystem size
    
    - added parameter to set the total size of the filesystem
    - keep track of used size for added and deleted files
    - raise IOError for insufficient space on creating or resizing a file
    - added shutil.disk_usage() implementation
    Fix shutil.rmtree() exception raising.
    Change shutil.rmtree() nonexistent file exception to IOError
    Align fake shutil.rmtree() with the real shutil.rmtree()
    
    Stop when the specified path is a link
    Handle and test the case:
        rmtree(path, ignore_errors=True, onerror=error_handler)
    Reverted unrelated changes
    
    - moved them to separate PR
    Add support for rmtree additional args
    
    - add support for ignore_errors and onerror arguments for shutil.rmtree
    - added tests
    Added support for optional rmtree arguments
    
    Added support for ignore_errors and onerror arguments to shutil.rmtree,
    added tests
    reorganizing into a package for easier distribution (eg. PyPI)
    All tests now pass in Windows
    All tests now pass in Windows
    Fixes Issue 14: Support for Python 3
    Fixes Issue 14: Support for Python 3
    Initial import of pyfakefs.
    Fix os.expanduser to work with a bytes path
    
    - adapted documentation for pandas support
    - added test for pandas.read_table()
    Fixed handling of byte paths
    
    - path entries are always saved as strings
    - byte paths are converted to string paths for most functions
    - fixes #517
    Use keyword-only arguments for os functions as in real implementation
    
    - removed more obsolete comments
    - removed obsolete "object" superclass
    Removed support for Python 2.7 and 3.4
    Fixed some failing tests under Windows with Python 3.8
    
    - added support for devnull in Windows / Python 3.8
    - added preliminary support for st_file_attributes and st_reparse_tag
      (Windows-specific os.stat_result attributes)
    - consider local UNC path returned by os.readlink in tests
    - see #504
    Fixed handling of missing directory read access
    
    - enable for Linux, disable for root users
    - see #496
    Set initial user and group IDs to real IDs
    
    - added tests running as root to test both root and non-root cases
    - adapted code and tests to consider root access
    Added automatic patching of builtin and io open as other name
    
    - in Python 2, builtin open is now handled by FakeBuiltinModule
    - in Python 3, builtin open is handled via io.open
    - adapted pytest plugin to ensure that open is not patched
      for linecache and dependent tokenize modules
    - importing builtin open as other name does not work with PyPy2
    Set st_uid and st_gid for new files to current user/group ID
    
    - allow to set current group ID
    - see #449
    Fixed recursion error on unpickling the fake file system
    
    - changed FakeStatResult so that pickling works under Python 2
    - fixes #445
    Add support for pathlib2 (#408) (#422)
    
    Well done.
    Added initial support for null device
    
    - added special file and file buffer for null device
    - fixes #418
    binary readline (Py3) fixed
    
    Signed-off-by: Martin Volf <mvolf@cisco.com>
    Raise OSError in os.readlink if path ends with separator
    
    - fixes #359
    Fixed some flake8 findings, adapted line length to 79 chars
    Fix undefined names in Python3
    Use buffer for all files, added newline support for encoded strings
    
    - fixes #339
    Added own text stream buffer to correctly handle newlines
    
    - fixed/added tests for newline support, added real fs tests
    - see #339
    Moved version to separate python file
    
    - reduces dependencies of setup.py
    reorganizing into a package for easier distribution (eg. PyPI)
    Initial import of pyfakefs.
    Add FakeFilesystem.os for more convenient OS setting
    
    - the setter changes all needed attributes and resets the file system
    - reset now also resets pathlib to adapt the path separators
    - adapt documentation
    Allow fake pathlib to be used in other os
    
    - adapted fake pathlib.home() to work in other os
    - fixes #558
    Changed patch_open_code argument to accept an additional AUTO mode
    
    - possible modes are now PatchMode.OFF (default), PatchMode.ON and PatchMode.AUTO
    - in auto mode, open_case is patched for files existing in the fake filesystem
    Added some support for io.open_code in Python 3.8
    
    - added new argument 'patch_open_code' to allow patching the function
    - see #554
    Do not call fake open if the caller is a skipped module
    
    - fixes #552
    Allow to open existing pipe file descriptor
    - fixes #493
    Add support for buffering in text mode
    - support line buffering
    - closes #549
    Fix OSError subtype raised under MacOS on os.chdir with file decscriptor
    Add support for the buffering parameter in open() call
    - support for binary files
    - incomplete support for text files (behave like binary files)
    - see #549
    Do not truncate file on failed flush
    
    - fixes #548
    Add support for os.truncate and os.ftruncate
    
    - fixes #545
    Fix os.expanduser to work with a bytes path
    
    - adapted documentation for pandas support
    - added test for pandas.read_table()
    Correctly handle alternative path separators in path resolving
    
    - fixes #530
    Moved version to separate python file
    
    - reduces dependencies of setup.py
    Prepare next release
    Consolidated setting of st_ino
    
    - now is always set in add_entry
    - st_ino was not set in fake_filesystem.makedir,
      what caused incorrect behavior for os.samefile for directories
    - fixes #515
    Fixed handling of current path in lresolve() / os.lstat()
    
    - fixes #516
    Fixed handling of byte paths
    
    - path entries are always saved as strings
    - byte paths are converted to string paths for most functions
    - fixes #517
    Added workaround for O_TMPFILE flag under linux
    
    - create unique file name for memory-based file
      created by that flag
    - fixes #511
    Removed more IOError-specific code
    Fixed doctest in fake_filesystem
    Replaced obsolete IOError with OSError
    Fixed handling of empty path in os.makedirs
    
    - fixes #510
    Handle open with TMPFILE flag
    
    - added basic test for TemporaryFile
    - fixes #509
    Correctly propagate "permission denied" error on creating directory
    
    - fixes #507
    Use keyword-only arguments for os functions as in real implementation
    
    - removed more obsolete comments
    - removed obsolete "object" superclass
    Removed support for Python 2.7 and 3.4
    Prepare next version
    
    - removed Python 2.7 and 3.4 support from documentation
    Added support for UNC prefix in links under Windows
    
    - do not allow sendfile() to regular files under MacOs
    - added note about last version supporting Python 2.7 and 3.4
    - see #504
    Added sendfile implementation (posix only)
    
    - see #504
    Fixed some failing tests under Windows with Python 3.8
    
    - added support for devnull in Windows / Python 3.8
    - added preliminary support for st_file_attributes and st_reparse_tag
      (Windows-specific os.stat_result attributes)
    - consider local UNC path returned by os.readlink in tests
    - see #504
    Fixed flake8 warnings
    
    - changed flake8 test to fail the build step on warnings
    Fixed handling of missing directory read access
    
    - enable for Linux, disable for root users
    - see #496
    Allow stat in unreadable directory
    Added handling of missing directory read access under MacOS
    
    - changes are for MacOS only, as long as Linux behavior is unclear
    - see #496
    Prepare next release
    Added support for relative symlinks in add_real_directory (#490)
    
    * Added support and tests for relative and absolute symlinks in add_real_directory
    * Added support and tests for symlinks outside the real directory in add_real_directory
    * Added support for symlinks in add_real_directory with lazy_read=True
    * Updated changelog to include new symlink features
    Fixed incorrect argument names for some os functions
    
    - added support for src_dir_fd and dst_dir_fd arguments
      in os.rename, os.replace and os.link
    Add __next__ to FakeFileWrapper
    Fixed incorrect argument name for os.makedirs
    
    - fixes #481
    Fixed typo and formatting issue in documentation
    
    - see #480
    Add possibility to always run tests as non-root user
    
    - added argument allow_root_user to Patcher and UnitTest
    - see #474
    Fixed a few flake8 warnings
    Added dummy file object to FakePipeWrapper
    
    - used if iterating open files
    Added support for os.pipe
    
    - see #473
    FakeIOModule.open argument renaming: file_name to file
    
    Changed attribute name in `FakeIOModule.open` from `file_name` to `file`.
    It makes pyfakefs compatible with the library atomicwrites that uses `kwargs` to pass attributes to `io.open` function.
    See https://github.com/untitaker/python-atomicwrites/blob/890e7aed4a1fd3b3724dc64503757617996c3978/atomicwrites/__init__.py#L180
    
    In python documentation argument is also named `file`:
    py3: https://docs.python.org/3/library/functions.html#open
    py2: https://docs.python.org/2.7/library/io.html#io.open
    Do not lazily read contents of real file after writing to it
    
    - fixes #470
    Handle patching open under Python 2 separately
    
    - avoids patching __builtins__ which breaks functionality
    - see #469
    Set initial user and group IDs to real IDs
    
    - added tests running as root to test both root and non-root cases
    - adapted code and tests to consider root access
    Adapted pytest plugin and pytest example plugin
    
    - added pytest and tokenize to SKIPMODULES
    - use nicer yield syntax in plugin (see #458)
    - fixed AttributeError in failing pytest in Python 2
    Added automatic patching of builtin and io open as other name
    
    - in Python 2, builtin open is now handled by FakeBuiltinModule
    - in Python 3, builtin open is handled via io.open
    - adapted pytest plugin to ensure that open is not patched
      for linecache and dependent tokenize modules
    - importing builtin open as other name does not work with PyPy2
    Fixed a few flake8 findings, mainly formatting stuff
    Added support for pause/resume patching of the file system modules
    
    - can be called from the unit test, the patcher or the fs
    Set st_uid and st_gid for new files to current user/group ID
    
    - allow to set current group ID
    - see #449
    Fixed using `modules_to_patch` with modules without dir()
    
    - check for existing dir() before calling it
    - fixes #450
    Allow trailing separator in fake_filesystem.add_real_directory()
    
    - fixes #446
    Fixed recursion error on unpickling the fake file system
    
    - changed FakeStatResult so that pickling works under Python 2
    - fixes #445
    Prepare next version
    Minor documentation updates to prepare release
    
    - updated release notes
    - updated auto-generated documentation
    Automatically patch imported functions
    
    - allows imports like 'from os import stat' to be patched
    Added ability to set user ID (#432)
    
    - can be used to test root user
    - see #431
    Adapted file timestamp update to real fs behavior
    
    - tests originally by @simonfagerholm, adapted
    - fixes #435
    Added mention of side_effects in set_contents docstring
    added side_effect argument to docstrings
    Added side_effect argument to files.
    
    side_effect is a function handle that takes the file object as an argument and does some side effect when the file is written.
    Use case is, among others, writing to the sysfs gpio export file and expecting gpios to "pop up".
    Added some support for extended filesystem attributes (#426)
    
    - added support for reading/writing arbitrary extended attributes
      (Linux / Python 3 only)
    - Note: support for extended fs attributes is assumed, not checked
    - see #423
    Handle contents=None in create_file() as empty contents if size not set (#425)
    
    - closes #424
    Add support for pathlib2 (#408) (#422)
    
    Well done.
    Added initial support for null device
    
    - added special file and file buffer for null device
    - fixes #418
    Added file path or descriptor to exceptions where missing
    
    - fixes #419
    Prepare next version
    
    - adapted version
    - adapted release notes
    Changed version to 3.4.3
    
    - version 3.4.2 was incorrectly published due to a mistake
    Preparing release 3.4.2
    
    - adapted version
    - adapted release notes
    - added Python 3.7 to setup classifiers
    Fixed some flake8 and deprecation warnings
    Second try to fix problem with seek and truncate with different file handles
    
    - fixes #300
    Revert fix for #300 as it causes regressions
    
    - fixes #414
    Fixed tell position after seek in append mode
    
    - fixes #363
    Adding missing flush in truncate
    
    - fixes #412
    Fixed flush after truncate
    
    - fixes #412
    Added handling of linking to path ending with separator
    
    - fixes #407
    Fixed another rename problem with trailing separator under MacOS
    
    - fixes #406
    Added support for path-like object argument in convenience methods
    
    - concerns create_file(), create_dir(), create_symlink(), add_real_file() and add_real_directory()
    - closes #409
    Fixed some typos and formatting issues in documentation
    Fixed handling of renaming symlinks to other case in MacOS
    
    - fixes #389
    Some minor whitespace fixes to satisfy flake8
    Fixed behavior of os.readlink with trailing separator under MacOS
    
    - fixes #392
    Fixed handling of rmdir with trailing seperator under MacOS
    
    - fixes #398
    Added handling for rename with trailing seperator to same file
    
    - fixes #400
    Added handling of hard link to path ending with separator
    
    - fixes #399
    Added handling for opening a link pointing to a path ending with sep
    
    - fixes #397
    Added handling for rename symlink with trailing sep to self
    
    - fixes #395
    Added special handling for broken links with trailing separator
    
    - allow mkdir and makedirs under MacOS
    - see #396
    Added handling for readlink for broken link with trailing separator
    
    - see #396
    Added special handling for broken symlinks with trailing separator
    
    - used for handling of lstat(), remove() and rename()
    - fixes incorrect results for islink() and lexists() under MacOS
    - see #396
    More special handling for paths with trailing separator
    
    - fixed renaming symlink ending with trailing separator under linux and macos
    - fixes #391
    Added handling for broken symlinks with trailing separator
    
    - fixes #390
    Fixed regression for isDir() with trailing separator under MacOS
    
    - fixes #387
    Added more handling for trailing separators in readlink
    
    - fixes #372
    Added handling for creating broken symlinks with trailing separator
    
    - fixes #371
    Added more OS specific handling for file paths ending with separator (#382)
    
    Nice!
    Added "closed" property to file wrapper
    
    - see #380
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Raise in os.remove() and os.stat() if file path ends with separator
    
    - fixes #376
    - fixes #377
    Raise in os.getsize() if file path ends with separator
    
    - fixes #368
    Raise on file paths ending with separator only for specific methods
    
    - fixes #366
    Remove all trailing separators in makedir
    
    - fixes #367
    Raise if resolving file path ending with separator under Posix
    
    - fixes #365
    Make sure os.exists returns False for file path ending with path separator
    
    - fixes #364
    Minor pep8 adaptations in tests
    
    - adapted test names that had been omitted in renaming script
    Raise IOError instead of OSError for open() with trailing separator
    
    - fixes #362
    Raise if remove a linked path ending with path separator
    
    - fixes #360
    Raise OSError in os.readlink if path ends with separator
    
    - fixes #359
    Advance version for next release
    Adapted release notes
    
    - adapted version for patch release
    - added chapter about mount point usage
    Fixed Fakedirectory.path if cwd is not root
    
    - see #355
    Adapted version for next release
    Some more flake8 stuff - reduced complexity for some functions
    Fixed some flake8 findings, adapted line length to 79 chars
    Fix undefined names in Python3
    More documentation updates
    
    - minor adaptations in README
    - adapted copyright
    - minor documentation changes for better output
    - fixed failing doctests in fake_filesystem.py
    - removed Python 3.2 from setup.py
    Added argument 'target_path' to add_real_file() and add_real_directory()
    
    - allows to map real file system files and directories
      to another location in the fake file system
    - see #347
    Use buffer for all files, added newline support for encoded strings
    
    - fixes #339
    Added own text stream buffer to correctly handle newlines
    
    - fixed/added tests for newline support, added real fs tests
    - see #339
    Fixed handling of case-changing rename with symlink under MacOS
    
    - fixes #322
    Minor documentation updates
    
    - removed unused script
    Raise OSError if trying to create a file with ending path separator
    
    - fixes #320
    Use os.strerror() to create error messages for OSError and IOError
    
    - see #202
    Adapt read position after tell and flush
    
    - hopefully fixes #300
    Partly fixed problem with append mode and multiple open files
    
    - tell() in append mode still not correctly working
    Update other open instances of same file on flush
    
    - fixes #302
    Correctly handle opening files more than once in connection with file handles
    
    - fixes #343
    Fixed handling of trailing path separators in lstat
    
    - fixes #342
    Fixed handling of symlink to path starting with drive letter
    
    - added possibility to use drive letter based paths for Windows tests, use it for os module tests
    - fixes #341
    Fixed handling of driver letter in handling path components
    
    - fixes #337
    Fixed some pep-8 / pylint findings
    More PEP-8 adaptations
    
    - adapted method names
    - adapted some formatting
    - see #186
    Adapted documentation
    
    - some PEP-8 reformatting
    - see #186
    Make pyfakefs API PEP-8 conform
    
    - changed methods names
    - added old method names as depracated version
    - added possibility to switch on deprecation warning
    - see #186
    Added support for patching scandir module
    
    - module contains backported os.scandir
    Fixed fake os.path.split() and os.path.dirname() with drive letter
    
    - fixes #335
    Prepare pyfakefs for version 3.4 development.
    Fix os.fsync behavior under Windows: raises on read-only files
    
    - see #303
    Convert byte paths to string in ResolvePath()
    
    - fixes #325
    Adapted Windows behavior related to . / .. path components
    
    - see #303
    Corrected error raised on rmdir failure under Windows
    
    - see #303
    Changed open behavior of MacOS under Python 2 to conform to real FS
    
    - see #303
    Corrected raised exception on renaming to existing directory
    
    - note: consistent with MacOS and Ubuntu 16.04,
      but not with Ubuntu 14.04
    - see #303
    Corrected exception type under Python2
    
    - relates to permission denied exception on adding a file
    - see #303
    Adapting chmod to Windows behavior
    
    - see #303
    Do not allow to write to a directory
    
    - fixes #321
    Make sure that directories cannot be opened in write or create mode
    
    - exception: under MacOS, opening in create mode is possible
    - see #321
    Fix another case rename problem with symlink parent dir
    
    - fixes #319
    Do not rename symlink with changed case under MacOs
    
    - fixes #318
    Fixed pathlib and scandir tests for Windows
    
    - skipped failing tests
    - fixed os.scandir st_ino/st_dev Windows behavior (differs from documentation)
    - see #303
    Raise OSError with errno.ENOENT instead of errno.ENOTDIR under Windows in some cases
    
    - see #303
    Fixed symlink behavior in Windows
    
    - symlink size in lstat() is always zero
    - symlinks can be opened in exclusive mode
    - different behavior with link path ending with path separator
    - see #303
    Do not allow the symlink path to have a trailing path separator
    
    - fixes #307
    Fixed regression in renaming code introduced in previous change
    
    - fixes #317
    Added check for st_mode type in CreateFile()
    
    - see #305 and #316
    Ignore exception for ResolvePath() in RenameObject
    
    - fixes #315
    Fixed renaming directory to same directory symlinked with another case
    
    - fixes #314
    Added os module tests for case-insensitive filesystem
    
    - fixed rename issue in case-insensitive filesystem
    Fixed another problem with case-insensitive filesystem
    
    - fixes #313
    Add handling of case-insensitive filesystem in GetEntry()
    
    - fixes #312
    Fixed flush after tell() - not done in Linux in Python 2
    
    - see #303
    Added some support for standard streams
    
    - always open the 3 standard streams with correct FDs
    - see #303
    Added more checks for existing broken links
    
    - fixes #311
    Added another missing NormalizeCase() to prevent bug in fake os.stat()
    
    - fixes #310
    Fixed default mode value for os.mknod
    
    - see #303
    Also consider existing broken link in os.mkdir
    
    - fixes #309
    Normalize case for source path in rename
    
    - fixes #308
    Fixed handling of removing file wihout permission under Posix
    
    - the parent directory shall have the correct permissions, not the file to be removed
    Normalize case in LResolveObject
    
    - fixes #306
    Adapted OS-specific exception if path is a directory in os.remove()
    Fixed error type for renaming file to directory
    Handle some real fs failures
    
    - see #303
    Added methods for testing Linux or MacOS only, renamed skip... methods
    Added testing travis.ci mac builds for Python 2.7 and 3.6
    
    - added MacOs specific setting
    - skipped some failing tests for MacOs
    Make sure that open files in real fs tests are closed to avoid removal failure under Windows
    
    - slightly adapted documentation formatting
    - removed useless 'new in pyfakefs' documentation
    Added real tests for shutil tests
    
    - see #303
    Fixed permission error under Windows
    
    - fixes more real OS tests under Windows
    Changed handling of WindowsError
    
    - raise WindowsError only in Python 2 and only explicitly where needed
    - fixes several real OS tests under Windows that had been skipped
    Fixed exception types raised on rename
    
    - see #303
    Fixed exception types on os.mknod errors
    
    - see #303
    Fixed initial position in append mode
    
    - see #303
    Added missing flush to file after truncate with added zero bytes
    
    - fixes #301
    Ignore closing a closed file
    
    - fixes #299
    Flush on read in w+/a+ mode, except for Windows under Python 2
    
    - fixes #278
    Fixed incomplete change in last commit
    
    - fixes #298
    Changed previous fix to adapt buffer size if truncate increases file size
    
    - fixes #297
    Updated release notes
    
    - removed unneeded variable introduced in wrapper functions
    Flush only if buffer is changed
    
    - fixes #296
    Handle case of truncating after seek in append mode
    
    - fixes #295
    Make sure that a truncate after a seek outside of file contents increases file size
    
    - fixes #294
    Minor documentation updates
    Make sure that truncate also flushes in append mode
    
    - see #291
    Seek always flushed the contents buffer
    
    - see #290
    Raise IOError instead of OSError if open() with parent that is a file
    
    - another instance of IOError for standard open() vs. OSError for os.open()
    - fixes #289
    Flush after tell under Posix or under Windows for Python 3
    
    - fixes #288
    Check for open file in flush()
    
    - fixes #287
    Added test to verify issue fixed with previous commit
    
    - closes #273
    Use io.BytesIO instead of StringIO for Python 2
    
    - seems to better reflect the real behavior
    - added code th remove return values not present in Python 2
    - fixes #286
    Make sure truncate flushes file contents
    
    - fixes #285
    Changed the behavior of getsize() on buffered append to match real OS
    
    - fixes #281
    file.next shall raise if file is not open for reading
    
    - fixes #284
    Fixed check for open file
    
    - fixed opening of file with file descriptor
    - fixes #282
    Make sure that tell() and seek() on closed file raises
    
    - fixes #280
    Do not allow reading of 0 bytes if reading is not allowed
    
    - fixes #279
    Raise IOError instead of OSError on open with cyclic symlink
    
    - fixes #274
    Raise if trying to access closed file
    
    - fixes #275
    Raise if trying to call SetContents on directory
    
    - fixes #276
    Passed missing raw_io flag
    
    - unified flag name
    - fixes #271
    - fixes #272
    Use StringIO instead of cStringIO
    
    - avoids problems with updating read-only strings
    - unified two sync methods
    - fixes #269
    Added basic support for umask in mode after open
    
    - fixes #258
    Fixed handling of appending ifmore than one FD is open
    
    - fixes #268
    Added update from file in low-level write to match real behavior
    
    - ensures correct synchronization if multiple FDs are open for writing
    - fixes #211
    Do not remove symlink in removedirs (regression)
    
    - fixes #266
    Set default mode for os.open() to 0o777 as per documentation
    Changed st_nlink for directories to conform to Unix standard (entry count)
    
    - fixes #255
    Do not allow renaming a symlink to a directory
    
    - fixes #265
    Catch OSError besides IOError in _GetType() to handle symlink loop exception
    
    - fixes #264
    Added handling of directory links in GetObjectFromNormalizedPath()
    
    - fixes #261
    Reworked low-level I/O handling to better reflect different modes
    
    - fixes #262
    Handle case that symlink exists at target path for exclusive file creation
    
    - fixes #263
    Allow some more rename operations with symlinks
    
    - fixes #260
    Raise NotImplementedError if using O_EXCL without O_CREAT
    
    - fixes #256
    Added yet another mode for O_CREAT + O_TRUNC
    
    - fixes #257
    Allow removedirs with non-top directory symlink
    
    - fixes #259
    Do not allow renaming to symlink
    
    - raises OSError with errno.ENOTDIR under Unix, EEXIST under Windows
    - fixes #251
    Added possibility to open with os.O_CREAT only
    
    - fixes #254
    Fixed _FakeStatResult __eq__ implementation, added __ne__
    
    - fixes #253
    os.mkdir does not remove symlink under Unix
    
    - fixes #252
    Consider existing symlink if creating a symlink
    
    - fixes #250
    Added missing check to allow renaming broken symlinks
    
    - fixes #249
    Symlink shall not create parent directories
    
    - CreateLink() still does this for convenience, but symlink and pathlib.symlink not
    - fixes #247
    
    - work in progress
    Removed tempfile from Patcher
    - removed fake_tempfile
    - removed tests only relevant for fake implementation
    - changed remaining tests to work with real tempfile
    - configure Patcher to work with tempfile, create temp dir in setUpPyfakefs()
    - added hack to fix problem with cached os functions in Patcher (Posix only)
    - added support for O_TEMPORARY flag to os.open (Windows only)
    - added support for low level exclusive mode in Python 2
    - added current pypy version to travis
    - fixes #191
    Fixed pypy3 test error
    Another IOError vs. OSError mismatch
    
    - fixes #246
    Raise OSError instead of IOError if parent is not a directory
    
    - fixes #243
    - fixes #244 (duplicate)
    - fixes #245 (duplicate)
    Raise OSError instead of IOError for existing hardlink
    
    - raise OSError if trying to create a hardlink to a directory
    - fixes #241
    Changed behavior of NormalizeCase to normalize existing part of paths
    
    - fixes problems under Windows with handling partly existing paths
    Traverse top level symlink in os.walk regardless of 'followsymlinks' value
    
    - fixes #240
    Fixed another case where low-level I/O function raises OSError instead of IOError
    
    - fixes #238
    Changed usage of max symlink depth to match real behavior
    
    - fixes #225
    Rename renames the symlink itself, not the target
    
    - fixes #239
    Adapted the maximum symlink depth to match most systems
    
    - see #225
    Consider symlink if creating a hard link
    
    - fixes #234
    Raise OSError instead of IOError for low-level open
    
    - fixes #237
    Raise correct exceptions for low level read/write
    
    - fixes #235
    Fixed renaming of symlinks
    
    - fixes #233
    Do not allow renaming a directory to a file
    
    - fixes #232
    Fixed regression in rename introduced in recent fix
    
    - fixes #230
    Do nothing if renaming to a hard link of a file
    
    - fixes #227
    Handle try to recursive rename for raising OSError
    
    - fixes #216
    Replaced GetObject with ResolveObject to correctly handle symlinks
    
    - replaced in RemoveObject(), ConfirmDir() and chdir()
    - fixes #226
    Correctly handle case where the rename target has a regular file as parent
    
    - fixes #224
    Enable renaming directory to existing directory under Posix
    - raise OSError if destination is not empty, or if source is a file
    - otherwise allowing reaming under Posix
    - fixes #217
    Removed most of FakeShutilModule functionality (#222)
    
    * Removed most of FakeShutilModule functionality
    - adapted tests to work with fake_filesystem_unittest.TestCase
    - fixed some tests
    - fake_filesystem.ResolvePath: consider alternative path separator for resolving links
    - fixes #194
    
    * Correct docstring for disk_usage()
    Fixed handling of non-existent file path with existing parent file
    
    - caused obscure bug if the file name was contained in the pseudo-parent file
    - fixes #219
    Corrected incomplete fix for makedirs with symlink
    
    - fixed #220
    Fixed dir-fd handling: always check for the real availability of functions
    
    - added os.unlink implementation, as it now differs from os.remove due to dir-fd handling
    Added support for dir_fd argument in several os functions
    
    - fixes #206
    Added possibility to use open file descriptor as path
    - added for os.utime, os.chmod, os.chdir, os.chown, os.listdir, os.stat and os.lstat
    - fixes #205
    Make sure symlinks are considered in some functions
    - resolve path for os.path.size and os.path.getmtime/getatime/getctime
    - see #210
    Make sure adding object to a symlinked directory works
    
    - see #215
    Fixed handling of invalid parent paths in CreateDirectory()
    - fixed handling of symlinks in MakeDirectories()
    - fixed exception thrown on too many symlinks
    - see #209
    Raise exception if trying to create file in read-only directory
    
    - raise exception if trying to create file in read-only directory under Posix OS
    - fixed assertRaisesIOError and assertRaisesOSError
    - never allow adding of already existing file or directory
    - do not allow FakeFile without filesystem
    - fixes #203
    Added support for basic modes in os.open() (#207)
    
    - added support for O_RDONLY, O_WRONLY, O_RDWR, O_APPEND, O_TRUNC and O_EXCL (O_CREAT was already implemented)
    - added support for opening directories read-only for Posix systems
    - fixes #204
    Added support for fake os.path.samefile (#201)
    
    - fixes #193
    Added xtime_ns in stat result (#200)
    
    - added fake stat_result to make this possible
    - fixes #196
    Added support for ns argument in os.utime
    
    - fixes #192
    Increment to (as yet unreleased) version 3.3
    Fix add_real_file() MacOS atime, prepare for release (#190)
    
    * Update atime when CopyRealFile() accesses real file
    
    This is a platform-specific issue for MacOS and BSD
    
    * Deprecate CopyRealFile(), prepare for Release 3.2
    Corrected handling of byte/unicode paths in several functions
    
    - added FakeOsModule.getcwdb() for Python 3
    - see #187
    Added lazy evaluation of real directories (#185)
    
    * Added lazy evaluation of real directories
    
    - real directory contents are only added to the fake file system on
    demand (makes adding large directory trees faster)
    - refactored real file/directory access to use own classes
    
    * Added possibility to switch off lazy directory reading
    
    - may be needed for tests that check the disk usage to avoid the side effect of changing disk usage during delayed directory content access
    Added support for errors argument in FakeFileOpen (#184)
    Fix handling of intertwined read/write for unicode strings in Python 3
    Normalize file path in RemoveObject() (#178)
    
    - fixes #177
    Fixed another case handling problem
    
    - real files with no content added to the fake filesystem have been
    handled incorrectly in NormalizeCase
    Fixed case handling for mount points
    
    - always use the original case for a mount point
    Added methods to access real files
    
    - allow to add really existing files and directory trees to the fake
    file system, with the contents read on demand
    - see #170
    Fixed changing case in rename in case-insensitive file systems
    
    - fixes #160
    Update master to the as-yet unreleased version 3.2
    Move CopyRealFile() to fake_filesystem_unittest
    
    In actual practice it did not work in fake_filesystem.
    Added helper method FakeFile.CopyRealFile()
    
    This copies a file from the real file system to
    the fake file system, making it easy to use
    files from the real file system in your tests.
    Fix disk usage calculations when too large file is created
    
    Previously if you created file having larger initial contents than the
    free space in the fake filesystem, the disk usage counter was decreased
    by the size of the initial contents possibly resulting in negative usage.
    
    Basically the issue was that when ChangeDiskUsage is called with size
    larger than the amount of free space, space usage is not changed but
    an error is raised. Due to an exception, CreateFile removes the created
    object that results in new call to ChangeDiskUsage with negative size
    of the object.
    
    Previously the object's size was set before ChangeDiskUsage was called
    and then when the object was being removed the object's already set size
    was used to reduce the filesystem usage (even though that size was never
    added to the usage).
    Advance version to as-yet unreleased version 3.1 in branch master
    Added FakeDirectory.ordered_dirs
    
    - see #151
    Added FakeDirectory.ordered_dirs
    
    - see #151
    Windows test related changes
    
    - adapted some tests to use an arbitrary path separator to make sure we use the defined separator
    - faked split(), dirname(), walk(), realpath(), adapted relpath() to fix these tests
    - fixed case sensitivity for cygwin
    Added support for exclusive creation mode in open
    
    - see #147
    Increased version to 3.0
    Changed test name, change fix as always dictionnary
    Fixed the bug, probably not the best way to fix it
    Improved support for Windows file system tests
    
    - renamed supports_drive_letter to is_windows_fs and use it for more
    Windows-specific stuff to be able to run more tests for Windows fs under
    Linux
    - added Windows/Posix variants for some tests that ran only under one
    system before
    - test for raised OSError subtypes
    - fake_pathlib_test: used uncommon path separator to ensure usage of
    fake filesystem
    - use SplitPath instead of os.path.split in RenameObject()
    Test for IOError subtypes instead of IOError
    
    - fixed incorrect exception on invalid file open mode
    Error handling fixes
    
    - raise NotADirectoryError where needed so it raised by os.readlink
    - made pathlib resolve() better conform to real implementation
    - added strict argument to resolve in Python 3.6
    - see #139
    - made some fake_pathlib functions available only in 3.5 as in the real implementation
    Added missing version hints
    
    - made shutil.disk_uage only available for Python >= 3.3
    Added auto doc generation
    
    - added sphinx configuration to create documentation from docstrings
    - fixed some sphinx warnings in docstrings
    - added script that recreates documentation after each commit and commit it to gh-pages
    - added mention of pyfakefs version for newer features in docstrings
    Docstring consolidation
    
    - slightly reworked some docstrings, added missing docstrings
    - changed behavior of listdir() to returns unsorted entries as in the real function
    Added support for path-like objects in Python 3.6
    
    - added tests for most faked functions that accepts a path-like object
    in 3.6
    - adapted the code respectively by calling os.fspath() where needed
    - added getatime() and getctime() to fake os module
    Python 3.6 support
    
    - added support for context manager in scandir iterator (used in pathlib and glob in 3.6)
    - added handling for path-like objects for some functions (3.6 only)
    - fixed incorrect usage of random generator in fake_tempfile
    - added Python 3.6 in Travis CI
    Fixed some pylint warnings
    - increased max line length to 100 to avoid too many warnings
    - removed invalid pylint codes, replaced pylint codes with names for better readability
    - adapted release notes
    Added fake_pathlib implementation
    
    - added implementation and test for fake pathlib
    - moved some functionality from FakeOsModule to FakeFilesystem to be
    able to use it from fake pathlib
    - added follow_symlinks argument to to some funxtions in FakeOsModule
    (stat, chmod, chown, access, utime)
    - added replace() and lchmod()
    - fixes #29
    Add FakeFileOpen.__name__, which pytest uses in messages
    
    Having said that, pytest's messages are INTERNAL ERRORs, so this is
    only the beginning of a solution to #43.  But it does make the problem
    clearer.
    
    Run pytest as instructed at the beginning of file pytest_doctest_test.py.
    
    Earlier, I misinterpreted @megapctr's statement that this "crashes".  I was
    looking for extreme drama like a segmentation fault.  Having said that,
    INTERNAL ERRORs are certainly bad.
    Added fake os.scandir for Python >= 3.5
    
    - incorporated review comments by @jmcgeheeiv
    
    - fixes #119
    Removed Python 3.2 tests in travis config
    
    - enabled encoding tests for Python 2 using u literal
    - fixed incorrect encoding for writing files under Python 2
    Changed whitespace to conform to pep-8
    
    - auto-format done by PyCharm
    Fixed minor issues in comments
    Edit indentation to 2 spaces per #122 code review
    Update version to 2.9, URL to pyfakefs.org
    Correct typo in _is_link_supported
    Raise OSError if on Windows before Python 3.2.
    
    Support for links was added to Windows in Python 3.2.
    Fixed opening files for appending with encoding
    
    - added more tests with encoding (mostly similar to tests without
    encoding)
    Added support for file encoding
    
    - save file contents always as bytes
    - consider encoding parameter in open() / io.open()
    - use locale prefered encoding instead of utf-8 as default encoding
    Add the os.makedirs(exist_ok) argument per #98
    Handle file permissions on deletion
    
    - raise on file deletion if missing write permission
    - raise on deleting an open file under Windows
    - make sure check is done recursively if deleting directories
    - fixes #27
    Fixed error in NormalizeCase
    
    - caused incorrect behavior for files without contents set
    - added respective test
    Fixed some problems with case-insensitive file system
    
    - added tests also for case sensitive behavior
    - fixed exception type thrown by getsize()
    - fixes #112
    Fixed omitted lines in last commit
    
    some lines got lost during commit magically
    Pass non-faked io module calls to original module
    
    fixes #110
    Fixed typo in encoding name
    Support for mount points
    
    - adapted docstring
    Added fake io.open
    
    - redirects to FakeFileOpen
    - fixes #70 and #103
    Fix problem copying byte contents
    
    Fixes issue #105
    Support for mount points
    
    - fixed incorrect argument in RenameObject
    - added supports_drive_letter to tests where missing to succeed under
    Linux
    Added auto-mount for Windows drives and UNC paths
    
    - fixed some more drive and UNC path problems
    Added support for mount points
    
    - added AddMountPoint() together with support for st_ino and st_dev
    - adapted GetDiskUsage() and ChangeDiskUsage() to use the file system
    given by path, added SetDiskUsage() convenience function
    - added FakeOsModule.ismount() implementation
    - moved rename implementation to FakeFilesystem.RenameObject(), adapted
    it and shutil.move() to correctly behave with same and different file
    systems
    - adapted/added tests
    Simplified rename
    
    - change rename to change the existing object instead of creating a new
    one
    - initialize st_link with 0 and increase it in AddEntry() (mirrors
    behavior in RemoveEntry())
    - fixes issue #99
    Simplified rename
    
    - change rename to change the existing object instead of creating a new
    one
    - initialize st_link with 0 and increase it in AddEntry() (mirrors
    behavior in RemoveEntry())
    - fixes issue #99
    Fixed NormalizeCase() with hard links
    
    - changed to not rely on file name member as this may be incorrect in
    case of hard links
    - re-enabled tests under Windows
    Fixed handling of file system size with hard links
    
    - added check for st_nlink in file system size change
    - moved raising out of space IOError to single location
    - added test, disabled some tests under Windows
    Implement hard link support
    
    This change adds support for hard links, and tests to go along with
    that.
    
    There is a bit of ugliness in this change around the use of the name
    field on FakeFile instances. Support for hard links means that the same
    file can have different names under different directories, so it
    fundamentally doesn't make sense for FakeFile instances to have a name
    associated with them.
    
    However, I didn't want to have to perform a mass refactoring as a
    prerequisite to making this change, so it instead just sets the filename
    as needed to work with the existing implementation of AddObject. This
    has the unavoidable side effect of changing the name associated with the
    original file as well, since they share the same FakeFile instance.
    
    It looks like this is probably safe to do now, but to properly ensure
    that there aren't any problems related to this, the whole codebase
    should be refactored to remove the name field from FakeFile, and replace
    it with a suitable alternative. It may require a wrapper class that
    helps callers keep track of a file's name while preventing misuse of
    that information by direct users of FakeFile.
    Drive letter handling fix
    
    - correctly handle drive root in SplitPath() (hopefully last fix )
    Fixed file system size handling during rename
    Some more UNC path support (from Python 2.7)
    
    - adapted CollapsePath()
    - second try to adapt isabs(), tries to simulate exception for path=None
    for Windows and Linux
    Reverted change for isabs
    - test failed because of slightly different error handling under Linux
    Support for drive letter
    
    - fixed logical error introduced in last commit
    - added initial UNC path support to SplitDrive() and JoinPaths()
    Some drive-letter related fixes
    
    - use adapted Windows specific Python join() with drive letter support
    - fixed abspath() wih regard to drive letters
    - fixed previously introduced bug in GetPathComponents()
    - implemented splitdrive() to be able to test it under Linux
    Fix ResolvePath() for Windows paths
    
    - forgot to commit file
    Fixed handling of unicode contents size
    
    - fixed handling of setting long size in Python 2
    - added respective tests as proposed by jmcgeheeiv
    Moved initial content setting into private method
    
    - to avoid additional parameter introduced in last change in public
    method
    Fixed merge problem
    
    - setting contents initially now does not increase time
    Writes update mtime and float time support (#68)
    
    Thank you for all your effort and cooperation.
    Adding support for filesystem size
    
    - added parameter to set the total size of the filesystem
    - keep track of used size for added and deleted files
    - raise IOError for insufficient space on creating or resizing a file
    - added shutil.disk_usage() implementation
    Fixed support for drive letter
    
    - fixed behavior of NormalizePath() and JoinPaths() with drive letters
    Fix #79, use getattr(self._path, ...) in fake path.os.__getattr__().
    
    I also added a test.  I confirmed that all other __getattr__()
    definitions are defined properly.  The fake path.os.__getattr__()
    alone was defined in this incorrect way.
    Added support for case-insensitive filesystem
    
    - activated under Windows/MacOS
    - handles issue #69
    Support for alternative path separator
    
    - added missing path adaptation
    - fixed glob test for Windows
    Support for additional path separator
    
    - removed additional argument, set additional separator automatically
    instead
    - adapted tests
    Accept pull request 71 and 74
    
    71:Adding followlinks parameter to os.walk includes test
    74: Add support for os.fsync() and os.fdatasync() with corresponding tests
    Added support for additional path separator
    
    - added optional argument to FakeFilesystem that declares an additional
    path separator (to mimic different possible separators under Windows)
    - adapted normcase to respect the defined path separators (issue #28)
    Add support for fsync and fdatasync with corresponding tests
    Adding followlinks parameter to os.walk includes test
    Use proper checking for directory on open.
    
    So block devices aren't accidentally considered directories.  Should
    address #24.
    Wrap file created by mkstemp
    
    This promotes the FakeFileWrapper class to top-level and has mkstemp
    wrap its file.  This lets fdopen() work properly.
    Increment version to 2.7
    reorganizing into a package for easier distribution (eg. PyPI)
    Raise a TypeError for non-integer uid and gid to os.chown() to fix #30.
    
    None is also allowed for uid and gid.  This permits os.rename to
    use os.chown even when the source file uid and gid are None (unset).
    Resolve links to their target in os.utime to fix #49
    Replace the mock library with mox3 to fix #48.
    Advanced pyfakefs version to 2.5.  Fixes #47.
    Run most of unix tests on cygwin, add TestCase system attributes
    Fixed one of the tests added for #31.
    Treat cygwin as a Windows
    
    fake_filesystem.py:131 - WindowsError is not available on cygwin
    Fix bug with calling rename with equal old & new names.
    
    If you were to call rename() with the same values for both old name and new
    name, GetEntry would raise an unnecesary KeyError. This commit fixes that.
    Fix bug with calling rename with equal old & new names.
    
    If you were to call rename() with the same values for both old name and new
    name, GetEntry would raise an unnecesary KeyError. This commit fixes that.
    Add doctest support.
    All tests now pass in Windows
    All tests now pass in Windows
    Fixed Issue 21: Behavior of relpath, abspath and normpath on Windows.
    Fixed Issue 21: Behavior of relpath, abspath and normpath on Windows.
    Revision 2.3
    Revision 2.3
    Fixed Issue 20: Python 3 now properly supports files open in binary mode as a bytes list.
    Fixed Issue 20: Python 3 now properly supports files open in binary mode as a bytes list.
    updated version 2.2
    updated version 2.2
    Fixed Issue  18: Builtin open methods lack IOError for prohibited operations
    Fixed Issue  18: Builtin open methods lack IOError for prohibited operations
    Fixed Issue 3: fake_filesystem.py incorrectly resolves the path "a/b/../non_existent_folder/../file"
    Fixed Issue 3: fake_filesystem.py incorrectly resolves the path "a/b/../non_existent_folder/../file"
    Syncronizes the open file StringIO contents with the file object in case
    Syncronizes the open file StringIO contents with the file object in case
    Fixes Issue 5: FakeFileOpen keyword args do not match the __builtin__ equivalents.
    Fixes Issue 5: FakeFileOpen keyword args do not match the __builtin__ equivalents.
    Fixes Issue 14: Support for Python 3
    Fixes Issue 14: Support for Python 3
    Fixes Issue 17: FakePathModule is missing relpath
    Fixes Issue 17: FakePathModule is missing relpath
    fixes issue 16: pyfakefs does not support relative paths
    fixes issue 16: pyfakefs does not support relative paths
    revert
    revert
    fixes issue 16: pyfakefs does not support relative paths
    fixes issue 16: pyfakefs does not support relative paths
    version 1.1
    Resolves several issues:
    Issue 4: Raise OSError when calling fake_filesystem.mkdir() with a trailing "/."
    Issue 6: os.write() and os.close() are not mocked.
    Issue 7: fake_filesystem's os.chown() doesn't match Python's os.chown() handling of -1
    Issue 8: fake_filesystem's os.rename() doesn't copy uid and gid to the renamed file
    Issue 10: FakeOsModule.os.fdopen should raise TypeError on a non-integer file descriptor.
    Issue 11: Stat time variables: ctime, atime and mtime should be int and not floats.
    Added setup.py to publish to PyPi.
    Initial import of pyfakefs.
    Do not override global warnings setting in Deprecator
    
    - fixes #526
    Fixed doctest in fake_filesystem
    Switched on deprecation warning for old API by default
    More PEP-8 fixes and improvements
    
    - added initial contributing guide
    Fixed some pep-8 / pylint findings
    More PEP-8 adaptations
    
    - adapted method names
    - adapted some formatting
    - see #186
    Make pyfakefs API PEP-8 conform
    
    - changed methods names
    - added old method names as depracated version
    - added possibility to switch on deprecation warning
    - see #186
    Allow fake pathlib to be used in other os
    
    - adapted fake pathlib.home() to work in other os
    - fixes #558
    Do not call fake pathlib.Path if called from skipped module
    
    - add possibility for special handling for skipped modules
    - fixes #553
    Make sure fs modules in pathlib are patched
    
    - pathlib shall not be added to skip names
    - removed unneeded checks for pathlib
    - fixes #527
    Replaced obsolete IOError with OSError
    Added newly introduced compile_pattern method to flavour classes
    
    - copied original versions from _PosixFlavour/_WindowsFlavour
      into respective fake classes
    - use newest available Python version in Travis builds
    - see #508
    Use keyword-only arguments for os functions as in real implementation
    
    - removed more obsolete comments
    - removed obsolete "object" superclass
    Removed support for Python 2.7 and 3.4
    Fixed flake8 warnings
    
    - changed flake8 test to fail the build step on warnings
    Some consolidation of pathlib/pathlib2 import
    Make sure pathlib2 and scandir package are used if available
    
    - adapted tests to test pathlib2 and scandir package in all versions
    - see #462
    Fixed a few flake8 findings, mainly formatting stuff
    Fixed using `modules_to_patch` with modules without dir()
    
    - check for existing dir() before calling it
    - fixes #450
    Minor documentation updates to prepare release
    
    - updated release notes
    - updated auto-generated documentation
    Automatically patch imported functions
    
    - allows imports like 'from os import stat' to be patched
    Patch 'Path' if imported from pathlib or pathlib2
    
    - see #440
    Add support for pathlib2 (#408) (#422)
    
    Well done.
    Some minor whitespace fixes to satisfy flake8
    Use current fixed posix implementation of pathlib.resolve()
    
    - fixes #401
    Fixed some flake8 findings, adapted line length to 79 chars
    More PEP-8 fixes and improvements
    
    - added initial contributing guide
    Fixed some pep-8 / pylint findings
    More PEP-8 adaptations
    
    - adapted method names
    - adapted some formatting
    - see #186
    Make pyfakefs API PEP-8 conform
    
    - changed methods names
    - added old method names as depracated version
    - added possibility to switch on deprecation warning
    - see #186
    Added support for patching scandir module
    
    - module contains backported os.scandir
    Symlink shall not create parent directories
    
    - CreateLink() still does this for convenience, but symlink and pathlib.symlink not
    - fixes #247
    
    - work in progress
    Minor documentation changes (#181)
    
    * Minor documentation changes
    
    - added links to CHANGES.md for convenience
    - made some links in README.md absolute to work in Pypi description
    - adapted requirements as discussed in #179
    
    * Cleaned up autodoc
    
    - added some introduction (taken from README)
    - cleaned up index
    - fixed minor indentation problems in docstrings
    Updated release notes, corrected comment
    Change case handling for pathlib
    
    - make it depend on Posix vs. Windows instead of file system case sensitivity
    - fixes #167
    Improved support for Windows file system tests
    
    - renamed supports_drive_letter to is_windows_fs and use it for more
    Windows-specific stuff to be able to run more tests for Windows fs under
    Linux
    - added Windows/Posix variants for some tests that ran only under one
    system before
    - test for raised OSError subtypes
    - fake_pathlib_test: used uncommon path separator to ensure usage of
    fake filesystem
    - use SplitPath instead of os.path.split in RenameObject()
    Error handling fixes
    
    - raise NotADirectoryError where needed so it raised by os.readlink
    - made pathlib resolve() better conform to real implementation
    - added strict argument to resolve in Python 3.6
    - see #139
    - made some fake_pathlib functions available only in 3.5 as in the real implementation
    Added auto doc generation
    
    - added sphinx configuration to create documentation from docstrings
    - fixed some sphinx warnings in docstrings
    - added script that recreates documentation after each commit and commit it to gh-pages
    - added mention of pyfakefs version for newer features in docstrings
    Python 3.6 support
    
    - added support for context manager in scandir iterator (used in pathlib and glob in 3.6)
    - added handling for path-like objects for some functions (3.6 only)
    - fixed incorrect usage of random generator in fake_tempfile
    - added Python 3.6 in Travis CI
    Added fake_pathlib implementation
    
    - added implementation and test for fake pathlib
    - moved some functionality from FakeOsModule to FakeFilesystem to be
    able to use it from fake pathlib
    - added follow_symlinks argument to to some funxtions in FakeOsModule
    (stat, chmod, chown, access, utime)
    - added replace() and lchmod()
    - fixes #29
    Moved pytest specific SKIPMODULES to Patcher
    
    - needed anyway, and makes it easier to write customized fixtures
    - adapted documentation for customizing patching
    Always add linecache and tokenize to skipped modules
    
    - needed not only for pytest
    Added possibility to pass additional parameters to `fs` pytest fixture
    
    - added test and documentation
    Removed support for Python 2.7 and 3.4
    Adapted pytest plugin and pytest example plugin
    
    - added pytest and tokenize to SKIPMODULES
    - use nicer yield syntax in plugin (see #458)
    - fixed AttributeError in failing pytest in Python 2
    Added automatic patching of builtin and io open as other name
    
    - in Python 2, builtin open is now handled by FakeBuiltinModule
    - in Python 3, builtin open is handled via io.open
    - adapted pytest plugin to ensure that open is not patched
      for linecache and dependent tokenize modules
    - importing builtin open as other name does not work with PyPy2
    Fix pytest when pyfakefs + future is installed
    
    `python-future` is notorious for breaking modules which use `try:` / `except:`
    to import modules based on version.  In this case, `pyfakefs` imported the
    backported `builtins` module which changes the semantics of the `open()`
    function.  `pyfakefs` then monkeypatches `linecache` which breaks any module
    which attempts to use `linecache` (in this case `pytest`).
    
    The downstream issue is https://github.com/pytest-dev/pytest/pull/4074
    Fixed some flake8 and deprecation warnings
    Make sure that the linecache module is not using the fake file system
    
    - does not work for Python 3.3 (which should not be used anymore anyway)
    - see #381
    Add linecache module to skipped modules for pytest plugin
    
    - see #381
    - fixes the problem under Python 3, but not under Python 2
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    More PEP-8 adaptations
    
    - adapted method names
    - adapted some formatting
    - see #186
    Make pyfakefs API PEP-8 conform
    
    - changed methods names
    - added old method names as depracated version
    - added possibility to switch on deprecation warning
    - see #186
    use addFinalizer instead of yielding
    rename pytest module to pytest plugin
    added a test for the pytest module and updated README.md
    added pytest module
    Change _Patcher to Patcher in conftest.py
    Add pytest doctests for #43
    Do not call fake pathlib.Path if called from skipped module
    
    - add possibility for special handling for skipped modules
    - fixes #553
    Fixed handling of additional_skip_names with several module components
    Added automatic patching of file system function in default argument
    
    - works for module-level functions and methods in module-level classes
    - this also makes it unnecessary to reload the "tempfile" module
    Removed support for Python 2.7 and 3.4
    Fixed flake8 warnings
    
    - changed flake8 test to fail the build step on warnings
    Support modules instead of module names in additional_skip_names
    
    - closes #482
    Added automatic patching of builtin and io open as other name
    
    - in Python 2, builtin open is now handled by FakeBuiltinModule
    - in Python 3, builtin open is handled via io.open
    - adapted pytest plugin to ensure that open is not patched
      for linecache and dependent tokenize modules
    - importing builtin open as other name does not work with PyPy2
    Added automatic patching of functions imported as other name
    
    - works for functions from file system modules
    - does not work for built-in open()
    Added support for pause/resume patching of the file system modules
    
    - can be called from the unit test, the patcher or the fs
    Fixed usage of modules_to_patch parameter
    
    - adapted example, as the usage has slightly changed
      (full module path is now needed)
    - fixes #450
    Automatically patch imported functions
    
    - allows imports like 'from os import stat' to be patched
    Changed patch behavior to rely on module names instead of imported names (#434)
    
    * Changed patch behavior to rely on module names instead of imported names
    
    - adapted tests and documentation
    
    * Clarify import method explanation
    Patch 'Path' if imported from pathlib or pathlib2
    
    - see #440
    Add support for pathlib2 (#408) (#422)
    
    Well done.
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Added possibility to add additional faked modules
    
    - can be configured using argument modules_to_patch
    - adapted documentation
    - fixes #345
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    Added additional possibility to configure Patcher
    
    - added argument that allows adding modules for patching that import file system modules under another name
    - fixes #231
    Mention that binary packages cannot be patched in auto doc introduction
    
    - changed version for auto doc to 3.2
    - removed unused test code
    Copied mox3 stubout into pyfakefs (#183)
    
    * Copied mox3 stubout into pyfakefs
    
    - removed dependency on mox3
    
    * Added some tests for mox3_stubout functionality
    
    * Added documentation for mox3 stubout usage in pyfakefs
    
    - proposed by jmcgeheeiv in review
    Added pypy to Travis CI
    
    - synchronizes travis with tox.ini
    added a test for the pytest module and updated README.md
    Travis.CI: Removed autodoc, added 3.7-dev
    Added auto doc generation
    
    - added sphinx configuration to create documentation from docstrings
    - fixed some sphinx warnings in docstrings
    - added script that recreates documentation after each commit and commit it to gh-pages
    - added mention of pyfakefs version for newer features in docstrings
    Python 3.6 support
    
    - added support for context manager in scandir iterator (used in pathlib and glob in 3.6)
    - added handling for path-like objects for some functions (3.6 only)
    - fixed incorrect usage of random generator in fake_tempfile
    - added Python 3.6 in Travis CI
    Removed Python 3.2 tests in travis config
    
    - enabled encoding tests for Python 2 using u literal
    - fixed incorrect encoding for writing files under Python 2
    Test against python 3.5
    Replace dependency on 'mox' with standard library module 'mock'.
    Import unittest2 for Python 2.6 compatability
    In Travis, conditionally install unittest2 for Python 2.6.
    Add continuous integration testing with Travis CI.
    Expand versions tested
    Add prerequisite mox
    Correct test script.
    Add continuous integration testing with Travis CI.
    Some consolidation of pathlib/pathlib2 import
    Revert "Added back shebang for main test files and made them executable"
    
    This reverts commit 81af55333ad4c98c6d886924d43fc42bdeb7e75f.
    Make sure pathlib2 and scandir package are used if available
    
    - adapted tests to test pathlib2 and scandir package in all versions
    - see #462
    Added back shebang for main test files and made them executable
    
    - see #461
    Removed shebang from all test files
    
    - fixes #461
    - prepare patch release
    Fixed a few flake8 findings, mainly formatting stuff
    Add support for pathlib2 (#408) (#422)
    
    Well done.
    Make sure pytest will work without pyfakefs installed
    - import fs in conftest.py used in tests
    - remove tests for deprecated function
    - see #550
    Make sure that all temp files are removed in real fs tests
    
    - moved file creation from __init__() to setUp() to avoid it for skipped tests
    - added some missing cleanup
    - use with assertRaises(...) in tests for better readability
    Replaced obsolete IOError with OSError
    Removed support for Python 2.7 and 3.4
    Added support for UNC prefix in links under Windows
    
    - do not allow sendfile() to regular files under MacOs
    - added note about last version supporting Python 2.7 and 3.4
    - see #504
    Always implement os.PathLike for DirEntry in Python >= 3.6
    
    - added CI tests for Python 3.8 (Linux and Windows)
    - skip failing Windows test temporarily for Python 3.8
      (test_add_existing_real_directory_symlink)
    - see #504
    Fixed flake8 warnings
    
    - changed flake8 test to fail the build step on warnings
    Added handling of missing directory read access under MacOS
    
    - changes are for MacOS only, as long as Linux behavior is unclear
    - see #496
    Added support for relative symlinks in add_real_directory (#490)
    
    * Added support and tests for relative and absolute symlinks in add_real_directory
    * Added support and tests for symlinks outside the real directory in add_real_directory
    * Added support for symlinks in add_real_directory with lazy_read=True
    * Updated changelog to include new symlink features
    Add possibility to always run tests as non-root user
    
    - added argument allow_root_user to Patcher and UnitTest
    - see #474
    Do not lazily read contents of real file after writing to it
    
    - fixes #470
    Removed shebang from all test files
    
    - fixes #461
    - prepare patch release
    Set initial user and group IDs to real IDs
    
    - added tests running as root to test both root and non-root cases
    - adapted code and tests to consider root access
    Fixed a few flake8 findings, mainly formatting stuff
    Set st_uid and st_gid for new files to current user/group ID
    
    - allow to set current group ID
    - see #449
    Fixed recursion error on unpickling the fake file system
    
    - changed FakeStatResult so that pickling works under Python 2
    - fixes #445
    Added ability to set user ID (#432)
    
    - can be used to test root user
    - see #431
    Added side_effect argument to files.
    
    side_effect is a function handle that takes the file object as an argument and does some side effect when the file is written.
    Use case is, among others, writing to the sysfs gpio export file and expecting gpios to "pop up".
    Handle contents=None in create_file() as empty contents if size not set (#425)
    
    - closes #424
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Minor pep8 adaptations in tests
    
    - adapted test names that had been omitted in renaming script
    Fixed Fakedirectory.path if cwd is not root
    
    - see #355
    Fixed some flake8 findings for tests, adapted line length to 79 chars
    Added argument 'target_path' to add_real_file() and add_real_directory()
    
    - allows to map real file system files and directories
      to another location in the fake file system
    - see #347
    Split out fake os and fake open tests from fake_filesystem_test
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    Fixed some pep-8 / pylint findings
    More PEP-8 adaptations
    
    - adapted method names
    - adapted some formatting
    - see #186
    Adapted documentation
    
    - some PEP-8 reformatting
    - see #186
    Make pyfakefs API PEP-8 conform
    
    - changed methods names
    - added old method names as depracated version
    - added possibility to switch on deprecation warning
    - see #186
    Fixed scandir iterator for Python 2
    
    - adapted example test to work with scandir module
    - fixed scandir test to work with scandir module
    - see #332
    Added support for patching scandir module
    
    - module contains backported os.scandir
    Fixed fake os.path.split() and os.path.dirname() with drive letter
    
    - fixes #335
    Removed Python 2.6 support (#327)
    
    Closes #293
    Fix os.fsync behavior under Windows: raises on read-only files
    
    - see #303
    Convert byte paths to string in ResolvePath()
    
    - fixes #325
    Adapted Windows behavior related to . / .. path components
    
    - see #303
    Corrected error raised on rmdir failure under Windows
    
    - see #303
    Changed open behavior of MacOS under Python 2 to conform to real FS
    
    - see #303
    Adding back Python 2.6 builds
    
    - accidentally removed while adding MacOS builds
    - reverted minor change incompatible with Python 2.6
    Corrected raised exception on renaming to existing directory
    
    - note: consistent with MacOS and Ubuntu 16.04,
      but not with Ubuntu 14.04
    - see #303
    Corrected exception type under Python2
    
    - relates to permission denied exception on adding a file
    - see #303
    Adapting chmod to Windows behavior
    
    - see #303
    Do not allow to write to a directory
    
    - fixes #321
    Make sure that directories cannot be opened in write or create mode
    
    - exception: under MacOS, opening in create mode is possible
    - see #321
    Fix another case rename problem with symlink parent dir
    
    - fixes #319
    Removed some unneeded skips for real FS after fix
    
    - documented the remaining issues
    - see #303
    Do not rename symlink with changed case under MacOs
    
    - fixes #318
    Fixed pathlib and scandir tests for Windows
    
    - skipped failing tests
    - fixed os.scandir st_ino/st_dev Windows behavior (differs from documentation)
    - see #303
    Added real fs tests for fake pathlib
    
    - see #303
    Added real fs tests for os.scandir
    
    - see #303
    Fixed: Some helper methods started with test... and have been detected as tests
    Raise OSError with errno.ENOENT instead of errno.ENOTDIR under Windows in some cases
    
    - see #303
    Added context managers to tests to avoid unclosed files after real FS tests that cannot deleted under Windows
    Fixed symlink behavior in Windows
    
    - symlink size in lstat() is always zero
    - symlinks can be opened in exclusive mode
    - different behavior with link path ending with path separator
    - see #303
    Make it possible to test symlinks under Windows (in admin mode)
    Do not allow the symlink path to have a trailing path separator
    
    - fixes #307
    Fixed regression in renaming code introduced in previous change
    
    - fixes #317
    Added check for st_mode type in CreateFile()
    
    - see #305 and #316
    Ignore exception for ResolvePath() in RenameObject
    
    - fixes #315
    Fixed renaming directory to same directory symlinked with another case
    
    - fixes #314
    Added os module tests for case-insensitive filesystem
    
    - fixed rename issue in case-insensitive filesystem
    Fixed another problem with case-insensitive filesystem
    
    - fixes #313
    Add handling of case-insensitive filesystem in GetEntry()
    
    - fixes #312
    Fixed flush after tell() - not done in Linux in Python 2
    
    - see #303
    Fixed testWriteRead to work with real FS
    
    - see #303
    Added some support for standard streams
    
    - always open the 3 standard streams with correct FDs
    - see #303
    Added more checks for existing broken links
    
    - fixes #311
    Added another missing NormalizeCase() to prevent bug in fake os.stat()
    
    - fixes #310
    Fixed default mode value for os.mknod
    
    - see #303
    Also consider existing broken link in os.mkdir
    
    - fixes #309
    Normalize case for source path in rename
    
    - fixes #308
    Fixed handling of removing file wihout permission under Posix
    
    - the parent directory shall have the correct permissions, not the file to be removed
    Normalize case in LResolveObject
    
    - fixes #306
    Adapted OS-specific exception if path is a directory in os.remove()
    Fixed error type for renaming file to directory
    Handle some real fs failures
    
    - see #303
    Added methods for testing Linux or MacOS only, renamed skip... methods
    Added testing travis.ci mac builds for Python 2.7 and 3.6
    
    - added MacOs specific setting
    - skipped some failing tests for MacOs
    Make sure that open files in real fs tests are closed to avoid removal failure under Windows
    
    - slightly adapted documentation formatting
    - removed useless 'new in pyfakefs' documentation
    Added real fs tests for os.walk
    
    - see #302
    Added real tests for shutil tests
    
    - see #303
    Fixed permission error under Windows
    
    - fixes more real OS tests under Windows
    Changed handling of WindowsError
    
    - raise WindowsError only in Python 2 and only explicitly where needed
    - fixes several real OS tests under Windows that had been skipped
    Fixed exception types raised on rename
    
    - see #303
    Fixed exception types on os.mknod errors
    
    - see #303
    Fixed initial position in append mode
    
    - see #303
    Added tests against real OS for low-level file functions
    Added real fs tests for tests in FakeOsModuleTest
    
    - work in progress
    Added real fs tests for tests in OpenFileWithEncodingTest
    
    - added more skips where behavior differs
    Added tests against real fs for most tests in FakeFileOpenTest
    
    - adapted tests to work in real fs
    - skipped failing tests - tests have to be adapted
    Work in progress
    Added missing flush to file after truncate with added zero bytes
    
    - fixes #301
    Ignore closing a closed file
    
    - fixes #299
    Flush on read in w+/a+ mode, except for Windows under Python 2
    
    - fixes #278
    Fixed incomplete change in last commit
    
    - fixes #298
    Changed previous fix to adapt buffer size if truncate increases file size
    
    - fixes #297
    Flush only if buffer is changed
    
    - fixes #296
    Handle case of truncating after seek in append mode
    
    - fixes #295
    Make sure that a truncate after a seek outside of file contents increases file size
    
    - fixes #294
    Make sure that truncate also flushes in append mode
    
    - see #291
    Seek always flushed the contents buffer
    
    - see #290
    Raise IOError instead of OSError if open() with parent that is a file
    
    - another instance of IOError for standard open() vs. OSError for os.open()
    - fixes #289
    Flush after tell under Posix or under Windows for Python 3
    
    - fixes #288
    Check for open file in flush()
    
    - fixes #287
    Added test to verify issue fixed with previous commit
    
    - closes #273
    Use io.BytesIO instead of StringIO for Python 2
    
    - seems to better reflect the real behavior
    - added code th remove return values not present in Python 2
    - fixes #286
    Make sure truncate flushes file contents
    
    - fixes #285
    Changed the behavior of getsize() on buffered append to match real OS
    
    - fixes #281
    file.next shall raise if file is not open for reading
    
    - fixes #284
    Fixed check for open file
    
    - fixed opening of file with file descriptor
    - fixes #282
    Make sure that tell() and seek() on closed file raises
    
    - fixes #280
    Do not allow reading of 0 bytes if reading is not allowed
    
    - fixes #279
    Raise IOError instead of OSError on open with cyclic symlink
    
    - fixes #274
    Raise if trying to access closed file
    
    - fixes #275
    Raise if trying to call SetContents on directory
    
    - fixes #276
    Passed missing raw_io flag
    
    - unified flag name
    - fixes #271
    - fixes #272
    Use StringIO instead of cStringIO
    
    - avoids problems with updating read-only strings
    - unified two sync methods
    - fixes #269
    Added basic support for umask in mode after open
    
    - fixes #258
    Fixed handling of appending ifmore than one FD is open
    
    - fixes #268
    Added update from file in low-level write to match real behavior
    
    - ensures correct synchronization if multiple FDs are open for writing
    - fixes #211
    Do not remove symlink in removedirs (regression)
    
    - fixes #266
    Changed st_nlink for directories to conform to Unix standard (entry count)
    
    - fixes #255
    Do not allow renaming a symlink to a directory
    
    - fixes #265
    Added handling of directory links in GetObjectFromNormalizedPath()
    
    - fixes #261
    Reworked low-level I/O handling to better reflect different modes
    
    - fixes #262
    Handle case that symlink exists at target path for exclusive file creation
    
    - fixes #263
    Allow some more rename operations with symlinks
    
    - fixes #260
    Raise NotImplementedError if using O_EXCL without O_CREAT
    
    - fixes #256
    Added yet another mode for O_CREAT + O_TRUNC
    
    - fixes #257
    Allow removedirs with non-top directory symlink
    
    - fixes #259
    Do not allow renaming to symlink
    
    - raises OSError with errno.ENOTDIR under Unix, EEXIST under Windows
    - fixes #251
    Added possibility to open with os.O_CREAT only
    
    - fixes #254
    os.mkdir does not remove symlink under Unix
    
    - fixes #252
    Added missing check to allow renaming broken symlinks
    
    - fixes #249
    Symlink shall not create parent directories
    
    - CreateLink() still does this for convenience, but symlink and pathlib.symlink not
    - fixes #247
    
    - work in progress
    Removed fake_filesystem_glob.py, relying on patched os module
    
    - changed test to test the real glob with the fake filesystem
    - see #189
    Removed tempfile from Patcher
    - removed fake_tempfile
    - removed tests only relevant for fake implementation
    - changed remaining tests to work with real tempfile
    - configure Patcher to work with tempfile, create temp dir in setUpPyfakefs()
    - added hack to fix problem with cached os functions in Patcher (Posix only)
    - added support for O_TEMPORARY flag to os.open (Windows only)
    - added support for low level exclusive mode in Python 2
    - added current pypy version to travis
    - fixes #191
    Another IOError vs. OSError mismatch
    
    - fixes #246
    Raise OSError instead of IOError if parent is not a directory
    
    - fixes #243
    - fixes #244 (duplicate)
    - fixes #245 (duplicate)
    Raise OSError instead of IOError for existing hardlink
    
    - raise OSError if trying to create a hardlink to a directory
    - fixes #241
    Changed behavior of NormalizeCase to normalize existing part of paths
    
    - fixes problems under Windows with handling partly existing paths
    Traverse top level symlink in os.walk regardless of 'followsymlinks' value
    
    - fixes #240
    Fixed another case where low-level I/O function raises OSError instead of IOError
    
    - fixes #238
    Rename renames the symlink itself, not the target
    
    - fixes #239
    Consider symlink if creating a hard link
    
    - fixes #234
    Raise OSError instead of IOError for low-level open
    
    - fixes #237
    Raise correct exceptions for low level read/write
    
    - fixes #235
    Fixed renaming of symlinks
    
    - fixes #233
    Do not allow renaming a directory to a file
    
    - fixes #232
    Fixed regression in rename introduced in recent fix
    
    - fixes #230
    Do nothing if renaming to a hard link of a file
    
    - fixes #227
    Handle try to recursive rename for raising OSError
    
    - fixes #216
    Replaced GetObject with ResolveObject to correctly handle symlinks
    
    - replaced in RemoveObject(), ConfirmDir() and chdir()
    - fixes #226
    Correctly handle case where the rename target has a regular file as parent
    
    - fixes #224
    Enable renaming directory to existing directory under Posix
    - raise OSError if destination is not empty, or if source is a file
    - otherwise allowing reaming under Posix
    - fixes #217
    Fixed handling of non-existent file path with existing parent file
    
    - caused obscure bug if the file name was contained in the pseudo-parent file
    - fixes #219
    Corrected incomplete fix for makedirs with symlink
    
    - fixed #220
    Fixed dir-fd handling: always check for the real availability of functions
    
    - added os.unlink implementation, as it now differs from os.remove due to dir-fd handling
    Added support for dir_fd argument in several os functions
    
    - fixes #206
    Added possibility to use open file descriptor as path
    - added for os.utime, os.chmod, os.chdir, os.chown, os.listdir, os.stat and os.lstat
    - fixes #205
    Make sure symlinks are considered in some functions
    - resolve path for os.path.size and os.path.getmtime/getatime/getctime
    - see #210
    Make sure adding object to a symlinked directory works
    
    - see #215
    Fixed handling of invalid parent paths in CreateDirectory()
    - fixed handling of symlinks in MakeDirectories()
    - fixed exception thrown on too many symlinks
    - see #209
    Raise exception if trying to create file in read-only directory
    
    - raise exception if trying to create file in read-only directory under Posix OS
    - fixed assertRaisesIOError and assertRaisesOSError
    - never allow adding of already existing file or directory
    - do not allow FakeFile without filesystem
    - fixes #203
    Added support for basic modes in os.open() (#207)
    
    - added support for O_RDONLY, O_WRONLY, O_RDWR, O_APPEND, O_TRUNC and O_EXCL (O_CREAT was already implemented)
    - added support for opening directories read-only for Posix systems
    - fixes #204
    Added support for fake os.path.samefile (#201)
    
    - fixes #193
    Added xtime_ns in stat result (#200)
    
    - added fake stat_result to make this possible
    - fixes #196
    Added support for ns argument in os.utime
    
    - fixes #192
    Corrected handling of byte/unicode paths in several functions
    
    - added FakeOsModule.getcwdb() for Python 3
    - see #187
    Added lazy evaluation of real directories (#185)
    
    * Added lazy evaluation of real directories
    
    - real directory contents are only added to the fake file system on
    demand (makes adding large directory trees faster)
    - refactored real file/directory access to use own classes
    
    * Added possibility to switch off lazy directory reading
    
    - may be needed for tests that check the disk usage to avoid the side effect of changing disk usage during delayed directory content access
    Added support for errors argument in FakeFileOpen (#184)
    Fix handling of intertwined read/write for unicode strings in Python 3
    Fixed another case handling problem
    
    - real files with no content added to the fake filesystem have been
    handled incorrectly in NormalizeCase
    Fixed case handling for mount points
    
    - always use the original case for a mount point
    Added methods to access real files
    
    - allow to add really existing files and directory trees to the fake
    file system, with the contents read on demand
    - see #170
    Rename PathManipulationTests to PathManipulationTestBase for consistency
    
    This base class has no tests, and all other non-concrete test case base classes
    in this file use a *TestBase convention.
    Derive SetLargeFileSizeTest directly from TestCase
    
    SetLargeFileSizeTest should derive directly from unittest.TestCase instead
    of FakeDirectoryUnitTest, to avoid running tests in FakeDirectoryUnitTest
    twice.
    Fixed changing case in rename in case-insensitive file systems
    
    - fixes #160
    Move CopyRealFile() to fake_filesystem_unittest
    
    In actual practice it did not work in fake_filesystem.
    Added helper method FakeFile.CopyRealFile()
    
    This copies a file from the real file system to
    the fake file system, making it easy to use
    files from the real file system in your tests.
    Fix disk usage calculations when too large file is created
    
    Previously if you created file having larger initial contents than the
    free space in the fake filesystem, the disk usage counter was decreased
    by the size of the initial contents possibly resulting in negative usage.
    
    Basically the issue was that when ChangeDiskUsage is called with size
    larger than the amount of free space, space usage is not changed but
    an error is raised. Due to an exception, CreateFile removes the created
    object that results in new call to ChangeDiskUsage with negative size
    of the object.
    
    Previously the object's size was set before ChangeDiskUsage was called
    and then when the object was being removed the object's already set size
    was used to reduce the filesystem usage (even though that size was never
    added to the usage).
    Added FakeDirectory.ordered_dirs
    
    - see #151
    Added FakeDirectory.ordered_dirs
    
    - see #151
    Windows test related changes
    
    - adapted some tests to use an arbitrary path separator to make sure we use the defined separator
    - faked split(), dirname(), walk(), realpath(), adapted relpath() to fix these tests
    - fixed case sensitivity for cygwin
    Added support for exclusive creation mode in open
    
    - see #147
    Changed test name, change fix as always dictionnary
    Added regression test for dictionnary instead of list
    Improved support for Windows file system tests
    
    - renamed supports_drive_letter to is_windows_fs and use it for more
    Windows-specific stuff to be able to run more tests for Windows fs under
    Linux
    - added Windows/Posix variants for some tests that ran only under one
    system before
    - test for raised OSError subtypes
    - fake_pathlib_test: used uncommon path separator to ensure usage of
    fake filesystem
    - use SplitPath instead of os.path.split in RenameObject()
    Test for IOError subtypes instead of IOError
    
    - fixed incorrect exception on invalid file open mode
    Error handling fixes
    
    - raise NotADirectoryError where needed so it raised by os.readlink
    - made pathlib resolve() better conform to real implementation
    - added strict argument to resolve in Python 3.6
    - see #139
    - made some fake_pathlib functions available only in 3.5 as in the real implementation
    Docstring consolidation
    
    - slightly reworked some docstrings, added missing docstrings
    - changed behavior of listdir() to returns unsorted entries as in the real function
    Added fake_pathlib implementation
    
    - added implementation and test for fake pathlib
    - moved some functionality from FakeOsModule to FakeFilesystem to be
    able to use it from fake pathlib
    - added follow_symlinks argument to to some funxtions in FakeOsModule
    (stat, chmod, chown, access, utime)
    - added replace() and lchmod()
    - fixes #29
    Modify tests to run properly on OSX.  Update README.
    
    The only change I made here is to recognize in the tests that on OSX ~root
    is /var/root instead of /root.
    
    setup.py has claimed OSX support all along, which is basically true.
    Added fake os.scandir for Python >= 3.5
    
    - incorporated review comments by @jmcgeheeiv
    
    - fixes #119
    Removed Python 3.2 tests in travis config
    
    - enabled encoding tests for Python 2 using u literal
    - fixed incorrect encoding for writing files under Python 2
    Changed whitespace to conform to pep-8
    
    - auto-format done by PyCharm
    Fixed minor issues in comments
    Skip link-related tests under Windows for Python < 3.3
    Fixed opening files for appending with encoding
    
    - added more tests with encoding (mostly similar to tests without
    encoding)
    Added support for file encoding
    
    - save file contents always as bytes
    - consider encoding parameter in open() / io.open()
    - use locale prefered encoding instead of utf-8 as default encoding
    Add the os.makedirs(exist_ok) argument per #98
    Handle file permissions on deletion
    
    - raise on file deletion if missing write permission
    - raise on deleting an open file under Windows
    - make sure check is done recursively if deleting directories
    - fixes #27
    Fixed error in NormalizeCase
    
    - caused incorrect behavior for files without contents set
    - added respective test
    Fixed some problems with case-insensitive file system
    
    - added tests also for case sensitive behavior
    - fixed exception type thrown by getsize()
    - fixes #112
    Move testCopyingPreservesByteContents to proper class
    Add leading slash to testCopyingPreservesByteContents
    Fix problem copying byte contents
    
    Fixes issue #105
    Support for mount points
    
    - fixed incorrect argument in RenameObject
    - added supports_drive_letter to tests where missing to succeed under
    Linux
    Added auto-mount for Windows drives and UNC paths
    
    - fixed some more drive and UNC path problems
    Added support for mount points
    
    - added AddMountPoint() together with support for st_ino and st_dev
    - adapted GetDiskUsage() and ChangeDiskUsage() to use the file system
    given by path, added SetDiskUsage() convenience function
    - added FakeOsModule.ismount() implementation
    - moved rename implementation to FakeFilesystem.RenameObject(), adapted
    it and shutil.move() to correctly behave with same and different file
    systems
    - adapted/added tests
    Simplified rename
    
    - change rename to change the existing object instead of creating a new
    one
    - initialize st_link with 0 and increase it in AddEntry() (mirrors
    behavior in RemoveEntry())
    - fixes issue #99
    Fixed NormalizeCase() with hard links
    
    - changed to not rely on file name member as this may be incorrect in
    case of hard links
    - re-enabled tests under Windows
    Fixed handling of file system size with hard links
    
    - added check for st_nlink in file system size change
    - moved raising out of space IOError to single location
    - added test, disabled some tests under Windows
    Implement hard link support
    
    This change adds support for hard links, and tests to go along with
    that.
    
    There is a bit of ugliness in this change around the use of the name
    field on FakeFile instances. Support for hard links means that the same
    file can have different names under different directories, so it
    fundamentally doesn't make sense for FakeFile instances to have a name
    associated with them.
    
    However, I didn't want to have to perform a mass refactoring as a
    prerequisite to making this change, so it instead just sets the filename
    as needed to work with the existing implementation of AddObject. This
    has the unavoidable side effect of changing the name associated with the
    original file as well, since they share the same FakeFile instance.
    
    It looks like this is probably safe to do now, but to properly ensure
    that there aren't any problems related to this, the whole codebase
    should be refactored to remove the name field from FakeFile, and replace
    it with a suitable alternative. It may require a wrapper class that
    helps callers keep track of a file's name while preventing misuse of
    that information by direct users of FakeFile.
    Drive letter handling fix
    
    - correctly handle drive root in SplitPath() (hopefully last fix )
    Fixed file system size handling during rename
    Some more UNC path support (from Python 2.7)
    
    - adapted CollapsePath()
    - second try to adapt isabs(), tries to simulate exception for path=None
    for Windows and Linux
    Support for drive letter
    
    - fixed logical error introduced in last commit
    - added initial UNC path support to SplitDrive() and JoinPaths()
    Some drive-letter related fixes
    
    - use adapted Windows specific Python join() with drive letter support
    - fixed abspath() wih regard to drive letters
    - fixed previously introduced bug in GetPathComponents()
    - implemented splitdrive() to be able to test it under Linux
    Fixed behavior of ResolvePath() for Windows paths
    
    see issue #83
    Second go to fix the test
    
    - do not use unicode in Python 2
    Fixed syntax error with Python 3.2
    Fixed handling of unicode contents size
    
    - fixed handling of setting long size in Python 2
    - added respective tests as proposed by jmcgeheeiv
    Writes update mtime and float time support (#68)
    
    Thank you for all your effort and cooperation.
    Adding support for filesystem size
    
    - added parameter to set the total size of the filesystem
    - keep track of used size for added and deleted files
    - raise IOError for insufficient space on creating or resizing a file
    - added shutil.disk_usage() implementation
    Add Python 3.5.x in testGetattrForwardToRealOsPath
    Removed debug output
    Fixed testGetattrForwardToRealOsPath() under Windows
    
    - see issue #78
    Fixed support for drive letter
    
    - fixed behavior of NormalizePath() and JoinPaths() with drive letters
    Fix version check in fake os.path.__getattr__() test.
    Skip test for access to real os.path attributes in Python 2.6
    Fix #79, use getattr(self._path, ...) in fake path.os.__getattr__().
    
    I also added a test.  I confirmed that all other __getattr__()
    definitions are defined properly.  The fake path.os.__getattr__()
    alone was defined in this incorrect way.
    Added support for case-insensitive filesystem
    
    - activated under Windows/MacOS
    - handles issue #69
    Support for additional path separator
    
    - removed additional argument, set additional separator automatically
    instead
    - adapted tests
    Added support for additional path separator
    
    - added optional argument to FakeFilesystem that declares an additional
    path separator (to mimic different possible separators under Windows)
    - adapted normcase to respect the defined path separators (issue #28)
    Add support for fsync and fdatasync with corresponding tests
    Adding followlinks parameter to os.walk includes test
    Use proper checking for directory on open.
    
    So block devices aren't accidentally considered directories.  Should
    address #24.
    Redo byte reading/writing tests
    
    This adds a general case for all supported Python versions and specific
    cases for Py2 vs Py3 behavior when reading/writing files.
    Protect binary data a little better
    
    This also works for non-Unicode encodings (like compressed data).
    reorganizing into a package for easier distribution (eg. PyPI)
    Correct Python 2.6 detection
    The real Python 2.6 os.path.relpath('/path/to/foo') actually does return '../path/to/foo'
    
    instead of 'path/to/foo'
    all_tests.py now returns nonzero for failure per issue #56
    Raise a TypeError for non-integer uid and gid to os.chown() to fix #30.
    
    None is also allowed for uid and gid.  This permits os.rename to
    use os.chown even when the source file uid and gid are None (unset).
    Add unit tests to check the Unicode problems described in issue #32.
    Resolve links to their target in os.utime to fix #49
    Run most of unix tests on cygwin, add TestCase system attributes
    Fixed one of the tests added for #31.
    Use the locally defined TestCase base class.
    Treat cygwin as a Windows
    
    fake_filesystem.py:131 - WindowsError is not available on cygwin
    Replace dependency on 'mox' with standard library module 'mock'.
    Import unittest2 for Python 2.6 compatability
    In Travis, conditionally install unittest2 for Python 2.6.
    Fix bug with calling rename with equal old & new names.
    
    If you were to call rename() with the same values for both old name and new
    name, GetEntry would raise an unnecesary KeyError. This commit fixes that.
    Shorten the testRenameSameFilenames() test title to match other titles.
    Fix bug with calling rename with equal old & new names.
    
    If you were to call rename() with the same values for both old name and new
    name, GetEntry would raise an unnecesary KeyError. This commit fixes that.
    All tests now pass in Windows
    All tests now pass in Windows
    Fixed Issue 21: Behavior of relpath, abspath and normpath on Windows.
    Fixed Issue 21: Behavior of relpath, abspath and normpath on Windows.
    Fixed Issue 20: Python 3 now properly supports files open in binary mode as a bytes list.
    Fixed Issue 20: Python 3 now properly supports files open in binary mode as a bytes list.
    Fixed Issue  18: Builtin open methods lack IOError for prohibited operations
    Fixed Issue  18: Builtin open methods lack IOError for prohibited operations
    Fixed Issue 3: fake_filesystem.py incorrectly resolves the path "a/b/../non_existent_folder/../file"
    Fixed Issue 3: fake_filesystem.py incorrectly resolves the path "a/b/../non_existent_folder/../file"
    Syncronizes the open file StringIO contents with the file object in case
    Syncronizes the open file StringIO contents with the file object in case
    Fixes Issue 5: FakeFileOpen keyword args do not match the __builtin__ equivalents.
    Fixes Issue 5: FakeFileOpen keyword args do not match the __builtin__ equivalents.
    correction to testExpandUser
    correction to testExpandUser
    Fixes Issue 14: Support for Python 3
    Fixes Issue 14: Support for Python 3
    Fixes Issue 17: FakePathModule is missing relpath
    Fixes Issue 17: FakePathModule is missing relpath
    fixes issue 16: pyfakefs does not support relative paths
    fixes issue 16: pyfakefs does not support relative paths
    revert
    revert
    fixes issue 16: pyfakefs does not support relative paths
    fixes issue 16: pyfakefs does not support relative paths
    Resolves several issues:
    Issue 4: Raise OSError when calling fake_filesystem.mkdir() with a trailing "/."
    Issue 6: os.write() and os.close() are not mocked.
    Issue 7: fake_filesystem's os.chown() doesn't match Python's os.chown() handling of -1
    Issue 8: fake_filesystem's os.rename() doesn't copy uid and gid to the renamed file
    Issue 10: FakeOsModule.os.fdopen should raise TypeError on a non-integer file descriptor.
    Issue 11: Stat time variables: ctime, atime and mtime should be int and not floats.
    Initial import of pyfakefs.
    Removed support for Python 2.7 and 3.4
    Handle patching open under Python 2 separately
    
    - avoids patching __builtins__ which breaks functionality
    - see #469
    Added automatic patching of builtin and io open as other name
    
    - in Python 2, builtin open is now handled by FakeBuiltinModule
    - in Python 3, builtin open is handled via io.open
    - adapted pytest plugin to ensure that open is not patched
      for linecache and dependent tokenize modules
    - importing builtin open as other name does not work with PyPy2
    Add support for pathlib2 (#408) (#422)
    
    Well done.
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Fixed some flake8 findings for tests, adapted line length to 79 chars
    More PEP-8 fixes and improvements
    
    - added initial contributing guide
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    More PEP-8 adaptations
    
    - adapted method names
    - adapted some formatting
    - see #186
    Fixed scandir iterator for Python 2
    
    - adapted example test to work with scandir module
    - fixed scandir test to work with scandir module
    - see #332
    Added methods to access real files
    
    - allow to add really existing files and directory trees to the fake
    file system, with the contents read on demand
    - see #170
    Docstring consolidation
    
    - slightly reworked some docstrings, added missing docstrings
    - changed behavior of listdir() to returns unsorted entries as in the real function
    Added fake os.scandir for Python >= 3.5
    
    - incorporated review comments by @jmcgeheeiv
    
    - fixes #119
    Changed whitespace to conform to pep-8
    
    - auto-format done by PyCharm
    Removed glob from patched modules
    
    - removed obsolete doc test
    Revert previous addition of backslashes
    Add more backslash escapes for example.py per #78
    Corrected example.py get_glob() unit test for Windows
    Remove "c:" from Windows paths in doctest.
    Update example.py doctest to pass on Windows.
    reorganizing into a package for easier distribution (eg. PyPI)
    The real Python 2.6 os.path.relpath('/path/to/foo') actually does return '../path/to/foo'
    
    instead of 'path/to/foo'
    Returned from reliance on mock to mox3.  Tests pass.
    Correct module names
    Add doctest support.
    Add files from pyfakefs Issue 22: https://code.google.com/p/pyfakefs/issues/detail?id=22
    Changed patch_open_code argument to accept an additional AUTO mode
    
    - possible modes are now PatchMode.OFF (default), PatchMode.ON and PatchMode.AUTO
    - in auto mode, open_case is patched for files existing in the fake filesystem
    Added some support for io.open_code in Python 3.8
    
    - added new argument 'patch_open_code' to allow patching the function
    - see #554
    Fix a few resource warnings in tests
    Add support for buffering in text mode
    - support line buffering
    - closes #549
    Fix OSError subtype raised under MacOS on os.chdir with file decscriptor
    Add support for the buffering parameter in open() call
    - support for binary files
    - incomplete support for text files (behave like binary files)
    - see #549
    Do not truncate file on failed flush
    
    - fixes #548
    Make sure that all temp files are removed in real fs tests
    
    - moved file creation from __init__() to setUp() to avoid it for skipped tests
    - added some missing cleanup
    - use with assertRaises(...) in tests for better readability
    Replaced obsolete IOError with OSError
    Added real tests for the rest of the fake open tests
    Use keyword-only arguments for os functions as in real implementation
    
    - removed more obsolete comments
    - removed obsolete "object" superclass
    Removed support for Python 2.7 and 3.4
    Fixed some failing tests under Windows with Python 3.8
    
    - added support for devnull in Windows / Python 3.8
    - added preliminary support for st_file_attributes and st_reparse_tag
      (Windows-specific os.stat_result attributes)
    - consider local UNC path returned by os.readlink in tests
    - see #504
    Added handling of missing directory read access under MacOS
    
    - changes are for MacOS only, as long as Linux behavior is unclear
    - see #496
    Add __next__ to FakeFileWrapper
    Fixed a few flake8 warnings
    Removed shebang from all test files
    
    - fixes #461
    - prepare patch release
    Set initial user and group IDs to real IDs
    
    - added tests running as root to test both root and non-root cases
    - adapted code and tests to consider root access
    Fixed a few flake8 findings, mainly formatting stuff
    Set st_uid and st_gid for new files to current user/group ID
    
    - allow to set current group ID
    - see #449
    Added ability to set user ID (#432)
    
    - can be used to test root user
    - see #431
    Adapted file timestamp update to real fs behavior
    
    - tests originally by @simonfagerholm, adapted
    - fixes #435
    Added initial support for null device
    
    - added special file and file buffer for null device
    - fixes #418
    Adding missing flush in truncate
    
    - fixes #412
    Fixed flush after truncate
    
    - fixes #412
    binary readline (Py3) fixed
    
    Signed-off-by: Martin Volf <mvolf@cisco.com>
    Some minor whitespace fixes to satisfy flake8
    Added "closed" property to file wrapper
    
    - see #380
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Minor pep8 adaptations in tests
    
    - adapted test names that had been omitted in renaming script
    Fixed some flake8 findings for tests, adapted line length to 79 chars
    Use buffer for all files, added newline support for encoded strings
    
    - fixes #339
    Added own text stream buffer to correctly handle newlines
    
    - fixed/added tests for newline support, added real fs tests
    - see #339
    Raise OSError if trying to create a file with ending path separator
    
    - fixes #320
    Update other open instances of same file on flush
    
    - fixes #302
    Correctly handle opening files more than once in connection with file handles
    
    - fixes #343
    Changed most tests to use a drive root under Windows
    More PEP-8 fixes and improvements
    
    - added initial contributing guide
    Split out fake os and fake open tests from fake_filesystem_test
    Skip test_write_excel if openpyxl is not installed
    
    test_write_excel fails if pandas are installed but openpyxl is not.
    Adjust the condition around the case appropriately.
    Documentation changes after review
    
    - added test for writing excel file
    Fix os.expanduser to work with a bytes path
    
    - adapted documentation for pandas support
    - added test for pandas.read_table()
    Added partial support for pandas to work with pyfakefs
    
    - support for read_csv and read_excel (with the default module)
    - see #531
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    More PEP-8 fixes and improvements
    
    - added initial contributing guide
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    Mention that binary packages cannot be patched in auto doc introduction
    
    - changed version for auto doc to 3.2
    - removed unused test code
    Copied mox3 stubout into pyfakefs (#183)
    
    * Copied mox3 stubout into pyfakefs
    
    - removed dependency on mox3
    
    * Added some tests for mox3_stubout functionality
    
    * Added documentation for mox3 stubout usage in pyfakefs
    
    - proposed by jmcgeheeiv in review
    Added pypy to Travis CI
    
    - synchronizes travis with tox.ini
    added a test for the pytest module and updated README.md
    Travis.CI: Removed autodoc, added 3.7-dev
    Added auto doc generation
    
    - added sphinx configuration to create documentation from docstrings
    - fixed some sphinx warnings in docstrings
    - added script that recreates documentation after each commit and commit it to gh-pages
    - added mention of pyfakefs version for newer features in docstrings
    Python 3.6 support
    
    - added support for context manager in scandir iterator (used in pathlib and glob in 3.6)
    - added handling for path-like objects for some functions (3.6 only)
    - fixed incorrect usage of random generator in fake_tempfile
    - added Python 3.6 in Travis CI
    Removed Python 3.2 tests in travis config
    
    - enabled encoding tests for Python 2 using u literal
    - fixed incorrect encoding for writing files under Python 2
    Test against python 3.5
    Replace dependency on 'mox' with standard library module 'mock'.
    Import unittest2 for Python 2.6 compatability
    In Travis, conditionally install unittest2 for Python 2.6.
    Add continuous integration testing with Travis CI.
    Expand versions tested
    Add prerequisite mox
    Correct test script.
    Add continuous integration testing with Travis CI.
    Added partial support for pandas to work with pyfakefs
    
    - support for read_csv and read_excel (with the default module)
    - see #531
    Make sure fs modules in pathlib are patched
    
    - pathlib shall not be added to skip names
    - removed unneeded checks for pathlib
    - fixes #527
    Revert "Added back shebang for main test files and made them executable"
    
    This reverts commit 81af55333ad4c98c6d886924d43fc42bdeb7e75f.
    Added back shebang for main test files and made them executable
    
    - see #461
    Removed shebang from all test files
    
    - fixes #461
    - prepare patch release
    Adapted file timestamp update to real fs behavior
    
    - tests originally by @simonfagerholm, adapted
    - fixes #435
    Add support for pathlib2 (#408) (#422)
    
    Well done.
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Split out fake os and fake open tests from fake_filesystem_test
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    Added dynamic patcher that patches files loaded after setup
    
    - added modules_to_reload instead of special_names and use it for tempfile
    - removed tempfile patch
    - see #248
    Copied mox3 stubout into pyfakefs (#183)
    
    * Copied mox3 stubout into pyfakefs
    
    - removed dependency on mox3
    
    * Added some tests for mox3_stubout functionality
    
    * Added documentation for mox3 stubout usage in pyfakefs
    
    - proposed by jmcgeheeiv in review
    Added fake_pathlib implementation
    
    - added implementation and test for fake pathlib
    - moved some functionality from FakeOsModule to FakeFilesystem to be
    able to use it from fake pathlib
    - added follow_symlinks argument to to some funxtions in FakeOsModule
    (stat, chmod, chown, access, utime)
    - added replace() and lchmod()
    - fixes #29
    Changed whitespace to conform to pep-8
    
    - auto-format done by PyCharm
    Correction to all_tests.py exit status per issue #56
    all_tests.py now returns nonzero for failure per issue #56
    Add doctest support.
    Add files from pyfakefs Issue 22: https://code.google.com/p/pyfakefs/issues/detail?id=22
    Fixed Issue 20: Python 3 now properly supports files open in binary mode as a bytes list.
    Fixed Issue 20: Python 3 now properly supports files open in binary mode as a bytes list.
    Initial import of pyfakefs.
    Make sure that all temp files are removed in real fs tests
    
    - moved file creation from __init__() to setUp() to avoid it for skipped tests
    - added some missing cleanup
    - use with assertRaises(...) in tests for better readability
    Added workaround for O_TMPFILE flag under linux
    
    - create unique file name for memory-based file
      created by that flag
    - fixes #511
    Replaced obsolete IOError with OSError
    Handle open with TMPFILE flag
    
    - added basic test for TemporaryFile
    - fixes #509
    Removed support for Python 2.7 and 3.4
    Removed shebang from all test files
    
    - fixes #461
    - prepare patch release
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Fixed some flake8 findings for tests, adapted line length to 79 chars
    More PEP-8 fixes and improvements
    
    - added initial contributing guide
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    More PEP-8 adaptations
    
    - adapted method names
    - adapted some formatting
    - see #186
    Make pyfakefs API PEP-8 conform
    
    - changed methods names
    - added old method names as depracated version
    - added possibility to switch on deprecation warning
    - see #186
    Removed Python 2.6 support (#327)
    
    Closes #293
    Adapting chmod to Windows behavior
    
    - see #303
    Removed tempfile from Patcher
    - removed fake_tempfile
    - removed tests only relevant for fake implementation
    - changed remaining tests to work with real tempfile
    - configure Patcher to work with tempfile, create temp dir in setUpPyfakefs()
    - added hack to fix problem with cached os functions in Patcher (Posix only)
    - added support for O_TEMPORARY flag to os.open (Windows only)
    - added support for low level exclusive mode in Python 2
    - added current pypy version to travis
    - fixes #191
    Fixed some pylint warnings
    - increased max line length to 100 to avoid too many warnings
    - removed invalid pylint codes, replaced pylint codes with names for better readability
    - adapted release notes
    Changed whitespace to conform to pep-8
    
    - auto-format done by PyCharm
    Added support for file encoding
    
    - save file contents always as bytes
    - consider encoding parameter in open() / io.open()
    - use locale prefered encoding instead of utf-8 as default encoding
    Handle file permissions on deletion
    
    - raise on file deletion if missing write permission
    - raise on deleting an open file under Windows
    - make sure check is done recursively if deleting directories
    - fixes #27
    Wrap file created by mkstemp
    
    This promotes the FakeFileWrapper class to top-level and has mkstemp
    wrap its file.  This lets fdopen() work properly.
    Protect binary data a little better
    
    This also works for non-Unicode encodings (like compressed data).
    reorganizing into a package for easier distribution (eg. PyPI)
    Add TemporaryDirectory to the tempfile module
    
    Also add a test to make sure the unittest module picks it up.
    Returned from reliance on mock to mox3.  Tests pass.
    Replace dependency on 'mox' with standard library module 'mock'.
    Import unittest2 for Python 2.6 compatability
    In Travis, conditionally install unittest2 for Python 2.6.
    Add doctest support.
    All tests now pass in Windows
    All tests now pass in Windows
    Fixed Issue 20: Python 3 now properly supports files open in binary mode as a bytes list.
    Fixed Issue 20: Python 3 now properly supports files open in binary mode as a bytes list.
    Fixed Issue 19: mkstemp returns a file descriptor instead of 9999, now
    Fixed Issue 19: mkstemp returns a file descriptor instead of 9999, now
    Fixes Issue 14: Support for Python 3
    Fixes Issue 14: Support for Python 3
    Initial import of pyfakefs.
    Add FakeFilesystem.os for more convenient OS setting
    
    - the setter changes all needed attributes and resets the file system
    - reset now also resets pathlib to adapt the path separators
    - adapt documentation
    Allow fake pathlib to be used in other os
    
    - adapted fake pathlib.home() to work in other os
    - fixes #558
    Do not call fake pathlib.Path if called from skipped module
    
    - add possibility for special handling for skipped modules
    - fixes #553
    Changed patch_open_code argument to accept an additional AUTO mode
    
    - possible modes are now PatchMode.OFF (default), PatchMode.ON and PatchMode.AUTO
    - in auto mode, open_case is patched for files existing in the fake filesystem
    Do not call fake open if the caller is a skipped module
    
    - fixes #552
    Fixed handling of additional_skip_names with several module components
    Make sure pytest will work without pyfakefs installed
    - import fs in conftest.py used in tests
    - remove tests for deprecated function
    - see #550
    Suppress deprecation warnings while collecting modules
    
    - closes #542
    Make sure that all temp files are removed in real fs tests
    
    - moved file creation from __init__() to setUp() to avoid it for skipped tests
    - added some missing cleanup
    - use with assertRaises(...) in tests for better readability
    Make sure fs modules in pathlib are patched
    
    - pathlib shall not be added to skip names
    - removed unneeded checks for pathlib
    - fixes #527
    Changed decorator to be able to be called with and without arguments
    
    - now can be used both with call syntax, and without parentheses
    Added convenience decorators to patch single functions
    
    - decorator patchfs is called without arguments (and no parentheses)
    - decorator custom_patchfs is called with Patcher arguments
    Added automatic patching of file system function in default argument
    
    - works for module-level functions and methods in module-level classes
    - this also makes it unnecessary to reload the "tempfile" module
    Replaced obsolete IOError with OSError
    Use keyword-only arguments for os functions as in real implementation
    
    - removed more obsolete comments
    - removed obsolete "object" superclass
    Removed support for Python 2.7 and 3.4
    Import distutils.file_util to prevent fake fs caching problem
    
    - closes #501
    Support modules instead of module names in additional_skip_names
    
    - closes #482
    Add possibility to always run tests as non-root user
    
    - added argument allow_root_user to Patcher and UnitTest
    - see #474
    Some consolidation of pathlib/pathlib2 import
    Make sure pathlib2 and scandir package are used if available
    
    - adapted tests to test pathlib2 and scandir package in all versions
    - see #462
    Removed shebang from all test files
    
    - fixes #461
    - prepare patch release
    Added context manager class for pause/resume
    
    - added usage documentation
    - see #448
    Adapted documentation to last changes
    Added automatic patching of builtin and io open as other name
    
    - in Python 2, builtin open is now handled by FakeBuiltinModule
    - in Python 3, builtin open is handled via io.open
    - adapted pytest plugin to ensure that open is not patched
      for linecache and dependent tokenize modules
    - importing builtin open as other name does not work with PyPy2
    Added automatic patching of functions imported as other name
    
    - works for functions from file system modules
    - does not work for built-in open()
    Fixed a few flake8 findings, mainly formatting stuff
    Added support for pause/resume patching of the file system modules
    
    - can be called from the unit test, the patcher or the fs
    Fixed usage of modules_to_patch parameter
    
    - adapted example, as the usage has slightly changed
      (full module path is now needed)
    - fixes #450
    Allow trailing separator in fake_filesystem.add_real_directory()
    
    - fixes #446
    Automatically patch imported functions
    
    - allows imports like 'from os import stat' to be patched
    Changed patch behavior to rely on module names instead of imported names (#434)
    
    * Changed patch behavior to rely on module names instead of imported names
    
    - adapted tests and documentation
    
    * Clarify import method explanation
    Updated documentation
    Patch 'Path' if imported from pathlib or pathlib2
    
    - see #440
    Added TestCase arguments to setUpPyfakefs() for convenience
    Removed patch_path argument from UnitTest and Patcher (#429)
    
    - path is only patched if it is os.path (detected by name)
    Import zipfile to avoid problem with late import (#428)
    
    - fixes #427
    Add support for pathlib2 (#408) (#422)
    
    Well done.
    Fixed some flake8 and deprecation warnings
    Some minor whitespace fixes to satisfy flake8
    Fix using setUpPyfakefs when using TestCaseMixin
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Reload original modules in dynamic patcher cleanup
    
    - avoids them to still reference the fake file system
    - see #356
    Fixed some flake8 findings for tests, adapted line length to 79 chars
    Fix undefined names in Python3
    Split TestCase into mixin class and TestCase class
    
    Having TestCaseMixin allows you to use PyFakeFs with, for example,
    asynctest.TestCase or django.test.TestCase.
    Added possibility to add additional faked modules
    
    - can be configured using argument modules_to_patch
    - adapted documentation
    - fixes #345
    Removed the unneeded workarounds for tempfile
    
    - remove special_names argument
    - use modules_to_reload instead to reload tempfile
    - fixes #340
    More PEP-8 fixes and improvements
    
    - added initial contributing guide
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    More PEP-8 adaptations
    
    - adapted method names
    - adapted some formatting
    - see #186
    Make pyfakefs API PEP-8 conform
    
    - changed methods names
    - added old method names as depracated version
    - added possibility to switch on deprecation warning
    - see #186
    Removed Python 2.6 support (#327)
    
    Closes #293
    Return the patcher object in the context manager
    
    - fixes #323
    Added testing travis.ci mac builds for Python 2.7 and 3.6
    
    - added MacOs specific setting
    - skipped some failing tests for MacOs
    Reverted to previous mechanism for tempfile patching
    
    - do not use dynamic loading per default
    - revert to the ugly but working tempfile patching
    - marked dymamic features as experimental in documentation
    Added dynamic patcher that patches files loaded after setup
    
    - added modules_to_reload instead of special_names and use it for tempfile
    - removed tempfile patch
    - see #248
    Use StringIO instead of cStringIO
    
    - avoids problems with updating read-only strings
    - unified two sync methods
    - fixes #269
    Removed tempfile from Patcher
    - removed fake_tempfile
    - removed tests only relevant for fake implementation
    - changed remaining tests to work with real tempfile
    - configure Patcher to work with tempfile, create temp dir in setUpPyfakefs()
    - added hack to fix problem with cached os functions in Patcher (Posix only)
    - added support for O_TEMPORARY flag to os.open (Windows only)
    - added support for low level exclusive mode in Python 2
    - added current pypy version to travis
    - fixes #191
    Added additional possibility to configure Patcher
    
    - added argument that allows adding modules for patching that import file system modules under another name
    - fixes #231
    Added xtime_ns in stat result (#200)
    
    - added fake stat_result to make this possible
    - fixes #196
    Fix add_real_file() MacOS atime, prepare for release (#190)
    
    * Update atime when CopyRealFile() accesses real file
    
    This is a platform-specific issue for MacOS and BSD
    
    * Deprecate CopyRealFile(), prepare for Release 3.2
    Added methods to access real files
    
    - allow to add really existing files and directory trees to the fake
    file system, with the contents read on demand
    - see #170
    Patch only modules with fake_filesystem_unittest.Patcher
    copyRealFile fake_file_path defaults to real_file_path (#176)
    
    Changed TestCase.copyRealFile() to default to the value of fake_file_path to the same value as real_file_path, when fake_file_path is not provided/None.
    
    * Updated per PR review.
    Correct test to properly test copyRealFile() atime on MacOS.
    
    Updated the documentation to clarify this issue.
    
    This problem manifests on MacOS because it updates atime, whereas Linux
    and Windows do not.
    Minor changes to copyRealFile
    
    - do not test the whole content of string contents as this will not work
    with other line endings (e.g. on Windows)
    - moved setUpClass() code into class as setUpClass() is not available
    under Python 2.6
    Remove errant assert
    Disable fake_filesystem_unittest.copyRealFile() in < Python 2.7
    Separate test for byte contents in CopyRealFile()
    Remove test for byte contents for Python 2.6 and below
    Move CopyRealFile() to fake_filesystem_unittest
    
    In actual practice it did not work in fake_filesystem.
    Docstring consolidation
    
    - slightly reworked some docstrings, added missing docstrings
    - changed behavior of listdir() to returns unsorted entries as in the real function
    Added fake_pathlib implementation
    
    - added implementation and test for fake pathlib
    - moved some functionality from FakeOsModule to FakeFilesystem to be
    able to use it from fake pathlib
    - added follow_symlinks argument to to some funxtions in FakeOsModule
    (stat, chmod, chown, access, utime)
    - added replace() and lchmod()
    - fixes #29
    Fixed accidentally duplicated tests
    
    - had derived 2 test classes from other test class, thus running the
    base class tests thrice
    Changes after review by @jmcgeheeiv
    
    - use instance instead of class attributes
    - enhanced documentation
    - added test
    Changed whitespace to conform to pep-8
    
    - auto-format done by PyCharm
    Added fake io.open
    
    - redirects to FakeFileOpen
    - fixes #70 and #103
    Support for alternative path separator
    
    - added missing path adaptation
    - fixed glob test for Windows
    reorganizing into a package for easier distribution (eg. PyPI)
    Add TemporaryDirectory to the tempfile module
    
    Also add a test to make sure the unittest module picks it up.
    Python2 unittest does not like assertCountEqual(), so use assertEqual().
    Replace the mock library with mox3 to fix #48.
    Returned from reliance on mock to mox3.  Tests pass.
    Replace dependency on 'mox' with standard library module 'mock'.
    Import unittest2 for Python 2.6 compatability
    In Travis, conditionally install unittest2 for Python 2.6.
    Add doctest support.
    Add files from pyfakefs Issue 22: https://code.google.com/p/pyfakefs/issues/detail?id=22
    Make sure that all temp files are removed in real fs tests
    
    - moved file creation from __init__() to setUp() to avoid it for skipped tests
    - added some missing cleanup
    - use with assertRaises(...) in tests for better readability
    Consolidated setting of st_ino
    
    - now is always set in add_entry
    - st_ino was not set in fake_filesystem.makedir,
      what caused incorrect behavior for os.samefile for directories
    - fixes #515
    Replaced obsolete IOError with OSError
    Removed support for Python 2.7 and 3.4
    Removed shebang from all test files
    
    - fixes #461
    - prepare patch release
    Set initial user and group IDs to real IDs
    
    - added tests running as root to test both root and non-root cases
    - adapted code and tests to consider root access
    Set st_uid and st_gid for new files to current user/group ID
    
    - allow to set current group ID
    - see #449
    Added ability to set user ID (#432)
    
    - can be used to test root user
    - see #431
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Minor pep8 adaptations in tests
    
    - adapted test names that had been omitted in renaming script
    Fixed some flake8 findings for tests, adapted line length to 79 chars
    Added own text stream buffer to correctly handle newlines
    
    - fixed/added tests for newline support, added real fs tests
    - see #339
    Removed the unneeded workarounds for tempfile
    
    - remove special_names argument
    - use modules_to_reload instead to reload tempfile
    - fixes #340
    Changed most tests to use a drive root under Windows
    Fixed handling of symlink to path starting with drive letter
    
    - added possibility to use drive letter based paths for Windows tests, use it for os module tests
    - fixes #341
    More PEP-8 fixes and improvements
    
    - added initial contributing guide
    Split out fake os and fake open tests from fake_filesystem_test
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    More PEP-8 adaptations
    
    - adapted method names
    - adapted some formatting
    - see #186
    Make pyfakefs API PEP-8 conform
    
    - changed methods names
    - added old method names as depracated version
    - added possibility to switch on deprecation warning
    - see #186
    Removed Python 2.6 support (#327)
    
    Closes #293
    Corrected exception type under Python2
    
    - relates to permission denied exception on adding a file
    - see #303
    Adapting chmod to Windows behavior
    
    - see #303
    Removed some unneeded skips for real FS after fix
    
    - documented the remaining issues
    - see #303
    Fixed: Some helper methods started with test... and have been detected as tests
    Fixed handling of removing file wihout permission under Posix
    
    - the parent directory shall have the correct permissions, not the file to be removed
    Added methods for testing Linux or MacOS only, renamed skip... methods
    Make sure that open files in real fs tests are closed to avoid removal failure under Windows
    
    - slightly adapted documentation formatting
    - removed useless 'new in pyfakefs' documentation
    Added real tests for shutil tests
    
    - see #303
    Fixed permission error under Windows
    
    - fixes more real OS tests under Windows
    Removed most of FakeShutilModule functionality (#222)
    
    * Removed most of FakeShutilModule functionality
    - adapted tests to work with fake_filesystem_unittest.TestCase
    - fixed some tests
    - fake_filesystem.ResolvePath: consider alternative path separator for resolving links
    - fixes #194
    
    * Correct docstring for disk_usage()
    Normalize file path in RemoveObject() (#178)
    
    - fixes #177
    Fix shutil.move implementation
    
    If both the source and destination argument of shutil.move are
    directories the source directory is copied under the target directory.
    pyfakefs implementation copied the source directory to the target
    directory.
    
    The real shutil.move call shutil.copy('/path/to/src', '/path/to/dest')
    moves /path/to/src to /path/to/dest/src but the pyfakefs implementation
    moved the src directory to /path/to/dest
    Improved support for Windows file system tests
    
    - renamed supports_drive_letter to is_windows_fs and use it for more
    Windows-specific stuff to be able to run more tests for Windows fs under
    Linux
    - added Windows/Posix variants for some tests that ran only under one
    system before
    - test for raised OSError subtypes
    - fake_pathlib_test: used uncommon path separator to ensure usage of
    fake filesystem
    - use SplitPath instead of os.path.split in RenameObject()
    Added missing version hints
    
    - made shutil.disk_uage only available for Python >= 3.3
    Changed whitespace to conform to pep-8
    
    - auto-format done by PyCharm
    Skip link-related tests under Windows for Python < 3.3
    Fixed typo in skip condition
    Handle file permissions on deletion
    
    - raise on file deletion if missing write permission
    - raise on deleting an open file under Windows
    - make sure check is done recursively if deleting directories
    - fixes #27
    Added support for mount points
    
    - added AddMountPoint() together with support for st_ino and st_dev
    - adapted GetDiskUsage() and ChangeDiskUsage() to use the file system
    given by path, added SetDiskUsage() convenience function
    - added FakeOsModule.ismount() implementation
    - moved rename implementation to FakeFilesystem.RenameObject(), adapted
    it and shutil.move() to correctly behave with same and different file
    systems
    - adapted/added tests
    Adding support for filesystem size
    
    - added parameter to set the total size of the filesystem
    - keep track of used size for added and deleted files
    - raise IOError for insufficient space on creating or resizing a file
    - added shutil.disk_usage() implementation
    Fix shutil.rmtree() exception raising.
    Align fake shutil.rmtree() with the real shutil.rmtree()
    
    Stop when the specified path is a link
    Handle and test the case:
        rmtree(path, ignore_errors=True, onerror=error_handler)
    Reverted unrelated changes
    
    - moved them to separate PR
    Add support for rmtree additional args
    
    - add support for ignore_errors and onerror arguments for shutil.rmtree
    - added tests
    Added support for optional rmtree arguments
    
    Added support for ignore_errors and onerror arguments to shutil.rmtree,
    added tests
    reorganizing into a package for easier distribution (eg. PyPI)
    Replace dependency on 'mox' with standard library module 'mock'.
    Import unittest2 for Python 2.6 compatability
    In Travis, conditionally install unittest2 for Python 2.6.
    All tests now pass in Windows
    All tests now pass in Windows
    Fixes Issue 14: Support for Python 3
    Fixes Issue 14: Support for Python 3
    Initial import of pyfakefs.
    Make sure fs modules in pathlib are patched
    
    - pathlib shall not be added to skip names
    - removed unneeded checks for pathlib
    - fixes #527
    Removed support for Python 2.7 and 3.4
    Unload all modules loaded during the test
    
    - these module can still hold references to fake modules
    - modules already loaded at test start are not affected
    - see #501 and #427
    Removed unneeded parameter "use_dynamic_patch"
    
    - remove unneeded workaround for PyCharm debugger
    - slightly adapted usage documentation
    Some consolidation of pathlib/pathlib2 import
    Make sure pathlib2 and scandir package are used if available
    
    - adapted tests to test pathlib2 and scandir package in all versions
    - see #462
    Add support for pathlib2 (#408) (#422)
    
    Well done.
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Minor pep8 adaptations in tests
    
    - adapted test names that had been omitted in renaming script
    Fixed some flake8 findings for tests, adapted line length to 79 chars
    Skip added pathlib test for Python < 3.4
    More PEP-8 fixes and improvements
    
    - added initial contributing guide
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    Make pyfakefs API PEP-8 conform
    
    - changed methods names
    - added old method names as depracated version
    - added possibility to switch on deprecation warning
    - see #186
    Removed Python 2.6 support (#327)
    
    Closes #293
    Reverted to previous mechanism for tempfile patching
    
    - do not use dynamic loading per default
    - revert to the ugly but working tempfile patching
    - marked dymamic features as experimental in documentation
    Added dynamic patcher that patches files loaded after setup
    
    - added modules_to_reload instead of special_names and use it for tempfile
    - removed tempfile patch
    - see #248
    Use keyword-only arguments for os functions as in real implementation
    
    - removed more obsolete comments
    - removed obsolete "object" superclass
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Minor pep8 adaptations in tests
    
    - adapted test names that had been omitted in renaming script
    Fixed some flake8 findings for tests, adapted line length to 79 chars
    More PEP-8 fixes and improvements
    
    - added initial contributing guide
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    Fixed some pep-8 / pylint findings
    Removed Python 2.6 support (#327)
    
    Closes #293
    Copied mox3 stubout into pyfakefs (#183)
    
    * Copied mox3 stubout into pyfakefs
    
    - removed dependency on mox3
    
    * Added some tests for mox3_stubout functionality
    
    * Added documentation for mox3 stubout usage in pyfakefs
    
    - proposed by jmcgeheeiv in review
    Removed shebang from all test files
    
    - fixes #461
    - prepare patch release
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Minor pep8 adaptations in tests
    
    - adapted test names that had been omitted in renaming script
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    More PEP-8 adaptations
    
    - adapted method names
    - adapted some formatting
    - see #186
    Make pyfakefs API PEP-8 conform
    
    - changed methods names
    - added old method names as depracated version
    - added possibility to switch on deprecation warning
    - see #186
    Removed Python 2.6 support (#327)
    
    Closes #293
    Removed fake_filesystem_glob.py, relying on patched os module
    
    - changed test to test the real glob with the fake filesystem
    - see #189
    Docstring consolidation
    
    - slightly reworked some docstrings, added missing docstrings
    - changed behavior of listdir() to returns unsorted entries as in the real function
    Changed whitespace to conform to pep-8
    
    - auto-format done by PyCharm
    reorganizing into a package for easier distribution (eg. PyPI)
    Replace dependency on 'mox' with standard library module 'mock'.
    Import unittest2 for Python 2.6 compatability
    In Travis, conditionally install unittest2 for Python 2.6.
    All tests now pass in Windows
    All tests now pass in Windows
    Fixes Issue 14: Support for Python 3
    Fixes Issue 14: Support for Python 3
    Initial import of pyfakefs.
    Fixed handling of current path in lresolve() / os.lstat()
    
    - fixes #516
    Removed support for Python 2.7 and 3.4
    Removed shebang from all test files
    
    - fixes #461
    - prepare patch release
    Some minor whitespace fixes to satisfy flake8
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Minor pep8 adaptations in tests
    
    - adapted test names that had been omitted in renaming script
    Some more flake8 stuff - reduced complexity for some functions
    Fixed some flake8 findings for tests, adapted line length to 79 chars
    More PEP-8 fixes and improvements
    
    - added initial contributing guide
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    More PEP-8 adaptations
    
    - adapted method names
    - adapted some formatting
    - see #186
    Make pyfakefs API PEP-8 conform
    
    - changed methods names
    - added old method names as depracated version
    - added possibility to switch on deprecation warning
    - see #186
    Removed Python 2.6 support (#327)
    
    Closes #293
    Removed tempfile from Patcher
    - removed fake_tempfile
    - removed tests only relevant for fake implementation
    - changed remaining tests to work with real tempfile
    - configure Patcher to work with tempfile, create temp dir in setUpPyfakefs()
    - added hack to fix problem with cached os functions in Patcher (Posix only)
    - added support for O_TEMPORARY flag to os.open (Windows only)
    - added support for low level exclusive mode in Python 2
    - added current pypy version to travis
    - fixes #191
    Windows test related changes
    
    - adapted some tests to use an arbitrary path separator to make sure we use the defined separator
    - faked split(), dirname(), walk(), realpath(), adapted relpath() to fix these tests
    - fixed case sensitivity for cygwin
    Changed whitespace to conform to pep-8
    
    - auto-format done by PyCharm
    reorganizing into a package for easier distribution (eg. PyPI)
    Run most of unix tests on cygwin, add TestCase system attributes
    Treat cygwin as a Windows
    
    fake_filesystem.py:131 - WindowsError is not available on cygwin
    Replace dependency on 'mox' with standard library module 'mock'.
    Import unittest2 for Python 2.6 compatability
    In Travis, conditionally install unittest2 for Python 2.6.
    Add doctest support.
    All tests now pass in Windows
    All tests now pass in Windows
    Fixed Issue 20: Python 3 now properly supports files open in binary mode as a bytes list.
    Fixed Issue 20: Python 3 now properly supports files open in binary mode as a bytes list.
    Fixed Issue  18: Builtin open methods lack IOError for prohibited operations
    Fixed Issue  18: Builtin open methods lack IOError for prohibited operations
    Fixed Issue 3: fake_filesystem.py incorrectly resolves the path "a/b/../non_existent_folder/../file"
    Fixed Issue 3: fake_filesystem.py incorrectly resolves the path "a/b/../non_existent_folder/../file"
    Fixes Issue 14: Support for Python 3
    Fixes Issue 14: Support for Python 3
    Fixes Issue 17: FakePathModule is missing relpath
    Fixes Issue 17: FakePathModule is missing relpath
    Fixes:
    Issue 12: Fix tests to work on OS X.
    Initial import of pyfakefs.
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    Patch only modules with fake_filesystem_unittest.Patcher
    reorganizing into a package for easier distribution (eg. PyPI)
    Initial import of pyfakefs.
    Make sure that all temp files are removed in real fs tests
    
    - moved file creation from __init__() to setUp() to avoid it for skipped tests
    - added some missing cleanup
    - use with assertRaises(...) in tests for better readability
    Fixed handling of byte paths
    
    - path entries are always saved as strings
    - byte paths are converted to string paths for most functions
    - fixes #517
    Replaced obsolete IOError with OSError
    Added real tests for the rest of the fake open tests
    Use keyword-only arguments for os functions as in real implementation
    
    - removed more obsolete comments
    - removed obsolete "object" superclass
    Removed support for Python 2.7 and 3.4
    Added support for UNC prefix in links under Windows
    
    - do not allow sendfile() to regular files under MacOs
    - added note about last version supporting Python 2.7 and 3.4
    - see #504
    Added sendfile implementation (posix only)
    
    - see #504
    Fixed some failing tests under Windows with Python 3.8
    
    - added support for devnull in Windows / Python 3.8
    - added preliminary support for st_file_attributes and st_reparse_tag
      (Windows-specific os.stat_result attributes)
    - consider local UNC path returned by os.readlink in tests
    - see #504
    Make sure real OS tests are not run by default
    
    - code had been commented out accidentally
    - fixes #495
    Make sure fake DirEntry implements os.PathLike if needed
    
    - for Python >= 3.6 and if using os.scandir
      (e.g. not the scandir package)
    - fixes #483
    Do not run real fs tests by defaults
    
    - tests are enabled by an environment variable, set in CI tests
    - see #465
    Adapted documentation to last changes
    Adapted file timestamp update to real fs behavior
    
    - tests originally by @simonfagerholm, adapted
    - fixes #435
    Fixed argument order in assert_raises_xx_error helper functions
    
    - the output of expected and actual value in case of failure was reversed
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Raise if remove a linked path ending with path separator
    
    - fixes #360
    Raise OSError in os.readlink if path ends with separator
    
    - fixes #359
    Fixed some flake8 findings for tests, adapted line length to 79 chars
    Use buffer for all files, added newline support for encoded strings
    
    - fixes #339
    Added own text stream buffer to correctly handle newlines
    
    - fixed/added tests for newline support, added real fs tests
    - see #339
    Use os.strerror() to create error messages for OSError and IOError
    
    - see #202
    Added some documentation to test utilities
    Fixed handling of trailing path separators in lstat
    
    - fixes #342
    Changed most tests to use a drive root under Windows
    Fixed handling of symlink to path starting with drive letter
    
    - added possibility to use drive letter based paths for Windows tests, use it for os module tests
    - fixes #341
    Split out fake os and fake open tests from fake_filesystem_test
    Make sure that all temp files are removed in real fs tests
    
    - moved file creation from __init__() to setUp() to avoid it for skipped tests
    - added some missing cleanup
    - use with assertRaises(...) in tests for better readability
    Replaced obsolete IOError with OSError
    Allow for different configuration of access time in real fs test
    
    - tests fail under some Windows systems otherwise
    Make real stat time tests more permissive under Windows
    
    - the behavior depends on configuration
    Removed shebang from all test files
    
    - fixes #461
    - prepare patch release
    Make tests for access time less strict
    
    - allows real fs tests to pass on file systems on XFS fs
    - fixes #453
    Fixed a few flake8 findings, mainly formatting stuff
    Adapted file timestamp update to real fs behavior
    
    - tests originally by @simonfagerholm, adapted
    - fixes #435
    Replaced obsolete IOError with OSError
    Removed support for Python 2.7 and 3.4
    Revert "Added back shebang for main test files and made them executable"
    
    This reverts commit 81af55333ad4c98c6d886924d43fc42bdeb7e75f.
    Added back shebang for main test files and made them executable
    
    - see #461
    Removed shebang from all test files
    
    - fixes #461
    - prepare patch release
    Add support for pathlib2 (#408) (#422)
    
    Well done.
    Fixed some flake8 and deprecation warnings
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Fixed some flake8 findings for tests, adapted line length to 79 chars
    Added some documentation to test utilities
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    Fixed some pep-8 / pylint findings
    More PEP-8 adaptations
    
    - adapted method names
    - adapted some formatting
    - see #186
    Make pyfakefs API PEP-8 conform
    
    - changed methods names
    - added old method names as depracated version
    - added possibility to switch on deprecation warning
    - see #186
    Fixed scandir iterator for Python 2
    
    - adapted example test to work with scandir module
    - fixed scandir test to work with scandir module
    - see #332
    Removed Python 2.6 support (#327)
    
    Closes #293
    Fix add_real_file() MacOS atime, prepare for release (#190)
    
    * Update atime when CopyRealFile() accesses real file
    
    This is a platform-specific issue for MacOS and BSD
    
    * Deprecate CopyRealFile(), prepare for Release 3.2
    Copied mox3 stubout into pyfakefs (#183)
    
    * Copied mox3 stubout into pyfakefs
    
    - removed dependency on mox3
    
    * Added some tests for mox3_stubout functionality
    
    * Added documentation for mox3 stubout usage in pyfakefs
    
    - proposed by jmcgeheeiv in review
    Added methods to access real files
    
    - allow to add really existing files and directory trees to the fake
    file system, with the contents read on demand
    - see #170
    Docstring consolidation
    
    - slightly reworked some docstrings, added missing docstrings
    - changed behavior of listdir() to returns unsorted entries as in the real function
    Added fake os.scandir for Python >= 3.5
    
    - incorporated review comments by @jmcgeheeiv
    
    - fixes #119
    Changed whitespace to conform to pep-8
    
    - auto-format done by PyCharm
    Support for alternative path separator
    
    - adapted another test for Windows
    reorganizing into a package for easier distribution (eg. PyPI)
    Python2 unittest does not like assertCountEqual(), so use assertEqual().
    Returned from reliance on mock to mox3.  Tests pass.
    It is no longer necessary to add self.tearDownPyfakefs() to your tearDown() method.
    Also cleaned up method and class variable naming.
    Replace dependency on 'mox' with standard library module 'mock'.
    Import unittest2 for Python 2.6 compatability
    In Travis, conditionally install unittest2 for Python 2.6.
    Correct module names
    Add doctest support.
    Add files from pyfakefs Issue 22: https://code.google.com/p/pyfakefs/issues/detail?id=22
    Allow fake pathlib to be used in other os
    
    - adapted fake pathlib.home() to work in other os
    - fixes #558
    Add support for os.truncate and os.ftruncate
    
    - fixes #545
    Make sure that all temp files are removed in real fs tests
    
    - moved file creation from __init__() to setUp() to avoid it for skipped tests
    - added some missing cleanup
    - use with assertRaises(...) in tests for better readability
    Make sure fs modules in pathlib are patched
    
    - pathlib shall not be added to skip names
    - removed unneeded checks for pathlib
    - fixes #527
    Replaced obsolete IOError with OSError
    Added newly introduced compile_pattern method to flavour classes
    
    - copied original versions from _PosixFlavour/_WindowsFlavour
      into respective fake classes
    - use newest available Python version in Travis builds
    - see #508
    Use keyword-only arguments for os functions as in real implementation
    
    - removed more obsolete comments
    - removed obsolete "object" superclass
    Removed support for Python 2.7 and 3.4
    Fixed flake8 warnings
    
    - changed flake8 test to fail the build step on warnings
    Fixed handling of missing directory read access
    
    - enable for Linux, disable for root users
    - see #496
    Added handling of missing directory read access under MacOS
    
    - changes are for MacOS only, as long as Linux behavior is unclear
    - see #496
    Adapted workaround in test after change in pathlib2 behavior
    
    - Python2 behavior under Windows has apparently changed to always be non-strict
    Fixed a few flake8 warnings
    Suppress specific pytest warning under Python 2.7
    
    - fixes #466
    Some consolidation of pathlib/pathlib2 import
    Changes to correctly run setup.py test under Python 2
    
    - exclude pathlib tests if pathlib is not available
    - moved pytest tests put of tests to not be discovered
    - see #465
    Make sure pathlib2 and scandir package are used if available
    
    - adapted tests to test pathlib2 and scandir package in all versions
    - see #462
    Removed shebang from all test files
    
    - fixes #461
    - prepare patch release
    Fixed a few flake8 findings, mainly formatting stuff
    Add support for pathlib2 (#408) (#422)
    
    Well done.
    Added support for path-like object argument in convenience methods
    
    - concerns create_file(), create_dir(), create_symlink(), add_real_file() and add_real_directory()
    - closes #409
    Use current fixed posix implementation of pathlib.resolve()
    
    - fixes #401
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Fixed some flake8 findings for tests, adapted line length to 79 chars
    Changed most tests to use a drive root under Windows
    Split out fake os and fake open tests from fake_filesystem_test
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    More PEP-8 adaptations
    
    - adapted method names
    - adapted some formatting
    - see #186
    Make pyfakefs API PEP-8 conform
    
    - changed methods names
    - added old method names as depracated version
    - added possibility to switch on deprecation warning
    - see #186
    Fixed pathlib and scandir tests for Windows
    
    - skipped failing tests
    - fixed os.scandir st_ino/st_dev Windows behavior (differs from documentation)
    - see #303
    Added real fs tests for fake pathlib
    
    - see #303
    Added support for dir_fd argument in several os functions
    
    - fixes #206
    Added xtime_ns in stat result (#200)
    
    - added fake stat_result to make this possible
    - fixes #196
    Change case handling for pathlib
    
    - make it depend on Posix vs. Windows instead of file system case sensitivity
    - fixes #167
    Improved support for Windows file system tests
    
    - renamed supports_drive_letter to is_windows_fs and use it for more
    Windows-specific stuff to be able to run more tests for Windows fs under
    Linux
    - added Windows/Posix variants for some tests that ran only under one
    system before
    - test for raised OSError subtypes
    - fake_pathlib_test: used uncommon path separator to ensure usage of
    fake filesystem
    - use SplitPath instead of os.path.split in RenameObject()
    Error handling fixes
    
    - raise NotADirectoryError where needed so it raised by os.readlink
    - made pathlib resolve() better conform to real implementation
    - added strict argument to resolve in Python 3.6
    - see #139
    - made some fake_pathlib functions available only in 3.5 as in the real implementation
    Added support for path-like objects in Python 3.6
    
    - added tests for most faked functions that accepts a path-like object
    in 3.6
    - adapted the code respectively by calling os.fspath() where needed
    - added getatime() and getctime() to fake os module
    Added fake_pathlib implementation
    
    - added implementation and test for fake pathlib
    - moved some functionality from FakeOsModule to FakeFilesystem to be
    able to use it from fake pathlib
    - added follow_symlinks argument to to some funxtions in FakeOsModule
    (stat, chmod, chown, access, utime)
    - added replace() and lchmod()
    - fixes #29
    Fix incorrect check for symlink in fake os.walk
    
    - proposed by @giladreti
    - fixes #559
    Fix a few resource warnings in tests
    Allow to open existing pipe file descriptor
    - fixes #493
    Add support for os.truncate and os.ftruncate
    
    - fixes #545
    Make sure that all temp files are removed in real fs tests
    
    - moved file creation from __init__() to setUp() to avoid it for skipped tests
    - added some missing cleanup
    - use with assertRaises(...) in tests for better readability
    Fixed handling of current path in lresolve() / os.lstat()
    
    - fixes #516
    Fixed handling of byte paths
    
    - path entries are always saved as strings
    - byte paths are converted to string paths for most functions
    - fixes #517
    Preserve top directory in os.walk
    
    - simplified the previous fix
    - see #512
    Make sure ending path separator is preserved in os.walk
    
    - fixes #512
    Replaced obsolete IOError with OSError
    Fixed handling of empty path in os.makedirs
    
    - fixes #510
    Test using dockerfiles with different OSes
    
    - changed dockerfile in root back to initial state
    - put dockerfiles used for testing into separate directory
    - added dockerfiles for ubuntu, centos, debian, fedora
    Correctly propagate "permission denied" error on creating directory
    
    - fixes #507
    Use keyword-only arguments for os functions as in real implementation
    
    - removed more obsolete comments
    - removed obsolete "object" superclass
    Removed support for Python 2.7 and 3.4
    Added support for UNC prefix in links under Windows
    
    - do not allow sendfile() to regular files under MacOs
    - added note about last version supporting Python 2.7 and 3.4
    - see #504
    Do not test sendfile under MacOs
    
    - it does not support regular files
    Added sendfile implementation (posix only)
    
    - see #504
    Fixed some failing tests under Windows with Python 3.8
    
    - added support for devnull in Windows / Python 3.8
    - added preliminary support for st_file_attributes and st_reparse_tag
      (Windows-specific os.stat_result attributes)
    - consider local UNC path returned by os.readlink in tests
    - see #504
    Fixed side-effect of calling DirEntry.stat() under Windows
    
    - st_nlink of the file object was set to 0 (instead of the stat result)
    - fixes #502
    Fixed flake8 warnings
    
    - changed flake8 test to fail the build step on warnings
    Re-enabled flake test
    
    - use build separate stage for flake8
    - do not use a matrix build to make this possible
    Make separate tests from the test script
    
    - ensures that failing tests fail the build
    - make time test less strict to work with PyPi
    - fixes #500
    Skip scandir tests for dir_fd for scandir package
    
    - scandir package does not support this
    - fixes #499
    Fixed handling of missing directory read access
    
    - enable for Linux, disable for root users
    - see #496
    Propagate exception for non-existing path in os.scandir()
    
    - fixes #498
    Allow stat in unreadable directory
    Added handling of missing directory read access under MacOS
    
    - changes are for MacOS only, as long as Linux behavior is unclear
    - see #496
    Avoid relative path corner-cases in scandir tests.
    
    On Windows the initial cwd of the fake filesystem seems to be \ [3] and
    the base_path of the fixture is C:\basepath [4]. I don't know what the
    relative paths from \ to paths below C:\basepath are, since Windows
    seems to have per-drive roots instead of a single one [2]. If it's
    C:\basepath\..., it's actually an absolute path on Windows, negating the
    purpose of the tests that use relative paths.
    
    On non-Windows systems, the initial cwd of the fake filesystem seems to
    be /, so that the relative paths are relative to the root. That might
    hide problems where the current working directory is not taken into
    account and instead paths are interpreted relative to the root, lowering
    the value of the tests that use relative paths.
    
    By changing the working directory to self.base_path in setUp, this patch
    let's us avoid problems like the above.
    
    [2] https://docs.microsoft.com/en-us/dotnet/standard/io/file-path-formats
    [3] https://github.com/jmcgeheeiv/pyfakefs/blob/7e6f845a795ee6be7783f15033b623f08b2707ed/pyfakefs/fake_filesystem.py#L894
    [4] https://github.com/jmcgeheeiv/pyfakefs/blob/7e6f845a795ee6be7783f15033b623f08b2707ed/pyfakefs/tests/test_utils.py#L344-L346
    Fix scandir DirEntry.path for relative path or fd
    
    The documentation for os.DirEntry.path [1] says that the path attribute
    of a DirEntry object is only absolute if scandir()'s path argument was
    absolute, and simply the name attribute if scandir()'s path argument was
    a filedescriptor. This patch makes pyfakefs do this, and adjusts the
    tests.
    
    Relative symlinks are now also covered in the scandir tests.
    
    RealScandirFdTest.test_path_like was failing for me in Python 3.7.3 on
    Debian Bullseye.
    
    [1] https://docs.python.org/3/library/os.html#os.DirEntry.path
    Fixed problem with unpacking package for release branch
    
    - in release branch, the top level dir has another name than the zip file
    - rename the unzipped package to be able to know it in subsequent commands
    - disabled test_append_mode_tell_linux_windows under Python 2 and Linux:
      behavior seems to have changed in latest Python and/or Ubuntu version
    Use the current pyfakefs branch in docker file
    
    - still defaults to master if docker is build without arguments
    Fixed incorrect argument names for some os functions
    
    - added support for src_dir_fd and dst_dir_fd arguments
      in os.rename, os.replace and os.link
    Make sure fake DirEntry implements os.PathLike if needed
    
    - for Python >= 3.6 and if using os.scandir
      (e.g. not the scandir package)
    - fixes #483
    Fixed incorrect argument name for os.makedirs
    
    - fixes #481
    Fixed a few flake8 warnings
    Added support for os.pipe
    
    - see #473
    Removed shebang from all test files
    
    - fixes #461
    - prepare patch release
    Set initial user and group IDs to real IDs
    
    - added tests running as root to test both root and non-root cases
    - adapted code and tests to consider root access
    Skip RealScandirTest.test_inode if running in Docker container
    
    - fails there for unknown reason
    Fixed a few flake8 findings, mainly formatting stuff
    Set st_uid and st_gid for new files to current user/group ID
    
    - allow to set current group ID
    - see #449
    Added ability to set user ID (#432)
    
    - can be used to test root user
    - see #431
    Added some support for extended filesystem attributes (#426)
    
    - added support for reading/writing arbitrary extended attributes
      (Linux / Python 3 only)
    - Note: support for extended fs attributes is assumed, not checked
    - see #423
    Add support for pathlib2 (#408) (#422)
    
    Well done.
    Added initial support for null device
    
    - added special file and file buffer for null device
    - fixes #418
    Fixed some flake8 and deprecation warnings
    Second try to fix problem with seek and truncate with different file handles
    
    - fixes #300
    Revert fix for #300 as it causes regressions
    
    - fixes #414
    Fixed tell position after seek in append mode
    
    - fixes #363
    Added handling of linking to path ending with separator
    
    - fixes #407
    Fixed another rename problem with trailing separator under MacOS
    
    - fixes #406
    Fixed handling of renaming symlinks to other case in MacOS
    
    - fixes #389
    Some minor whitespace fixes to satisfy flake8
    Fixed behavior of os.readlink with trailing separator under MacOS
    
    - fixes #392
    Fixed handling of rmdir with trailing seperator under MacOS
    
    - fixes #398
    Added handling for rename with trailing seperator to same file
    
    - fixes #400
    Added handling of hard link to path ending with separator
    
    - fixes #399
    Added handling for opening a link pointing to a path ending with sep
    
    - fixes #397
    Added handling for rename symlink with trailing sep to self
    
    - fixes #395
    Added special handling for broken links with trailing separator
    
    - allow mkdir and makedirs under MacOS
    - see #396
    Added handling for readlink for broken link with trailing separator
    
    - see #396
    Added special handling for broken symlinks with trailing separator
    
    - used for handling of lstat(), remove() and rename()
    - fixes incorrect results for islink() and lexists() under MacOS
    - see #396
    More special handling for paths with trailing separator
    
    - fixed renaming symlink ending with trailing separator under linux and macos
    - fixes #391
    Added handling for broken symlinks with trailing separator
    
    - fixes #390
    Fixed regression for isDir() with trailing separator under MacOS
    
    - fixes #387
    Added more handling for trailing separators in readlink
    
    - fixes #372
    Added handling for creating broken symlinks with trailing separator
    
    - fixes #371
    Added more OS specific handling for file paths ending with separator (#382)
    
    Nice!
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Raise in os.remove() and os.stat() if file path ends with separator
    
    - fixes #376
    - fixes #377
    Raise in os.getsize() if file path ends with separator
    
    - fixes #368
    Raise on file paths ending with separator only for specific methods
    
    - fixes #366
    Remove all trailing separators in makedir
    
    - fixes #367
    Raise if resolving file path ending with separator under Posix
    
    - fixes #365
    Make sure os.exists returns False for file path ending with path separator
    
    - fixes #364
    Minor pep8 adaptations in tests
    
    - adapted test names that had been omitted in renaming script
    Raise IOError instead of OSError for open() with trailing separator
    
    - fixes #362
    Raise if remove a linked path ending with path separator
    
    - fixes #360
    Raise OSError in os.readlink if path ends with separator
    
    - fixes #359
    Fixed some flake8 findings for tests, adapted line length to 79 chars
    Do not resolve links in base path for fake os.scandir
    
    - used PEP8 conform methods in fake_scandir
    - fixes #350
    Fix unit tests when run on a computer not having umask set to 0022
    
    If umask was set to, for example, 0027 some tests failed because the
    file mode of the created file was not what was expected.
    
    One of the failing tests:
    
      ======================================================================
      FAIL: test_open_mode_windows (tests.fake_os_test.FakeOsModuleLowLevelFileOpTest)
      ----------------------------------------------------------------------
      Traceback (most recent call last):
        File "/code/pyfakefs/tests/fake_os_test.py", line 3499, in test_open_mode_windows
          self.assertEqual(0o100666, stat0.st_mode)
      AssertionError: 33206 != 33202
    
    You can reproduce the issue (on Linux) by checking out older version and running
      umask 0027
      python -m tests.all_tests
    Added support for dir fd argumentent to fake os.scandir()
    
    - introduced in Python 3.7, Posix only
    - fixes #346
    Fixed handling of case-changing rename with symlink under MacOS
    
    - fixes #322
    Adapt read position after tell and flush
    
    - hopefully fixes #300
    Partly fixed problem with append mode and multiple open files
    
    - tell() in append mode still not correctly working
    Added missing cleanup for dynamic patcher
    
    - enable dynamic patcher by default
    - adapted some tests to run with pytest
    Fixed handling of trailing path separators in lstat
    
    - fixes #342
    Changed most tests to use a drive root under Windows
    Fixed handling of symlink to path starting with drive letter
    
    - added possibility to use drive letter based paths for Windows tests, use it for os module tests
    - fixes #341
    Fixed handling of driver letter in handling path components
    
    - fixes #337
    Split out fake os and fake open tests from fake_filesystem_test
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    Fixed some pep-8 / pylint findings
    More PEP-8 adaptations
    
    - adapted method names
    - adapted some formatting
    - see #186
    Adapted documentation
    
    - some PEP-8 reformatting
    - see #186
    Make pyfakefs API PEP-8 conform
    
    - changed methods names
    - added old method names as depracated version
    - added possibility to switch on deprecation warning
    - see #186
    Fixed scandir iterator for Python 2
    
    - adapted example test to work with scandir module
    - fixed scandir test to work with scandir module
    - see #332
    Added support for patching scandir module
    
    - module contains backported os.scandir
    Fixed fake os.path.split() and os.path.dirname() with drive letter
    
    - fixes #335
    Removed Python 2.6 support (#327)
    
    Closes #293
    Fix os.fsync behavior under Windows: raises on read-only files
    
    - see #303
    Convert byte paths to string in ResolvePath()
    
    - fixes #325
    Adapted Windows behavior related to . / .. path components
    
    - see #303
    Corrected error raised on rmdir failure under Windows
    
    - see #303
    Changed open behavior of MacOS under Python 2 to conform to real FS
    
    - see #303
    Adding back Python 2.6 builds
    
    - accidentally removed while adding MacOS builds
    - reverted minor change incompatible with Python 2.6
    Corrected raised exception on renaming to existing directory
    
    - note: consistent with MacOS and Ubuntu 16.04,
      but not with Ubuntu 14.04
    - see #303
    Corrected exception type under Python2
    
    - relates to permission denied exception on adding a file
    - see #303
    Adapting chmod to Windows behavior
    
    - see #303
    Do not allow to write to a directory
    
    - fixes #321
    Make sure that directories cannot be opened in write or create mode
    
    - exception: under MacOS, opening in create mode is possible
    - see #321
    Fix another case rename problem with symlink parent dir
    
    - fixes #319
    Removed some unneeded skips for real FS after fix
    
    - documented the remaining issues
    - see #303
    Do not rename symlink with changed case under MacOs
    
    - fixes #318
    Fixed pathlib and scandir tests for Windows
    
    - skipped failing tests
    - fixed os.scandir st_ino/st_dev Windows behavior (differs from documentation)
    - see #303
    Added real fs tests for fake pathlib
    
    - see #303
    Added real fs tests for os.scandir
    
    - see #303
    Fixed: Some helper methods started with test... and have been detected as tests
    Raise OSError with errno.ENOENT instead of errno.ENOTDIR under Windows in some cases
    
    - see #303
    Added context managers to tests to avoid unclosed files after real FS tests that cannot deleted under Windows
    Fixed symlink behavior in Windows
    
    - symlink size in lstat() is always zero
    - symlinks can be opened in exclusive mode
    - different behavior with link path ending with path separator
    - see #303
    Make it possible to test symlinks under Windows (in admin mode)
    Do not allow the symlink path to have a trailing path separator
    
    - fixes #307
    Fixed regression in renaming code introduced in previous change
    
    - fixes #317
    Added check for st_mode type in CreateFile()
    
    - see #305 and #316
    Ignore exception for ResolvePath() in RenameObject
    
    - fixes #315
    Fixed renaming directory to same directory symlinked with another case
    
    - fixes #314
    Added os module tests for case-insensitive filesystem
    
    - fixed rename issue in case-insensitive filesystem
    Fixed another problem with case-insensitive filesystem
    
    - fixes #313
    Add handling of case-insensitive filesystem in GetEntry()
    
    - fixes #312
    Fixed flush after tell() - not done in Linux in Python 2
    
    - see #303
    Fixed testWriteRead to work with real FS
    
    - see #303
    Added some support for standard streams
    
    - always open the 3 standard streams with correct FDs
    - see #303
    Added more checks for existing broken links
    
    - fixes #311
    Added another missing NormalizeCase() to prevent bug in fake os.stat()
    
    - fixes #310
    Fixed default mode value for os.mknod
    
    - see #303
    Also consider existing broken link in os.mkdir
    
    - fixes #309
    Normalize case for source path in rename
    
    - fixes #308
    Fixed handling of removing file wihout permission under Posix
    
    - the parent directory shall have the correct permissions, not the file to be removed
    Normalize case in LResolveObject
    
    - fixes #306
    Adapted OS-specific exception if path is a directory in os.remove()
    Fixed error type for renaming file to directory
    Handle some real fs failures
    
    - see #303
    Added methods for testing Linux or MacOS only, renamed skip... methods
    Added testing travis.ci mac builds for Python 2.7 and 3.6
    
    - added MacOs specific setting
    - skipped some failing tests for MacOs
    Make sure that open files in real fs tests are closed to avoid removal failure under Windows
    
    - slightly adapted documentation formatting
    - removed useless 'new in pyfakefs' documentation
    Added real fs tests for os.walk
    
    - see #302
    Added real tests for shutil tests
    
    - see #303
    Fixed permission error under Windows
    
    - fixes more real OS tests under Windows
    Changed handling of WindowsError
    
    - raise WindowsError only in Python 2 and only explicitly where needed
    - fixes several real OS tests under Windows that had been skipped
    Fixed exception types raised on rename
    
    - see #303
    Fixed exception types on os.mknod errors
    
    - see #303
    Fixed initial position in append mode
    
    - see #303
    Added tests against real OS for low-level file functions
    Added real fs tests for tests in FakeOsModuleTest
    
    - work in progress
    Added real fs tests for tests in OpenFileWithEncodingTest
    
    - added more skips where behavior differs
    Added tests against real fs for most tests in FakeFileOpenTest
    
    - adapted tests to work in real fs
    - skipped failing tests - tests have to be adapted
    Work in progress
    Added missing flush to file after truncate with added zero bytes
    
    - fixes #301
    Ignore closing a closed file
    
    - fixes #299
    Flush on read in w+/a+ mode, except for Windows under Python 2
    
    - fixes #278
    Fixed incomplete change in last commit
    
    - fixes #298
    Changed previous fix to adapt buffer size if truncate increases file size
    
    - fixes #297
    Flush only if buffer is changed
    
    - fixes #296
    Handle case of truncating after seek in append mode
    
    - fixes #295
    Make sure that a truncate after a seek outside of file contents increases file size
    
    - fixes #294
    Make sure that truncate also flushes in append mode
    
    - see #291
    Seek always flushed the contents buffer
    
    - see #290
    Raise IOError instead of OSError if open() with parent that is a file
    
    - another instance of IOError for standard open() vs. OSError for os.open()
    - fixes #289
    Flush after tell under Posix or under Windows for Python 3
    
    - fixes #288
    Check for open file in flush()
    
    - fixes #287
    Added test to verify issue fixed with previous commit
    
    - closes #273
    Use io.BytesIO instead of StringIO for Python 2
    
    - seems to better reflect the real behavior
    - added code th remove return values not present in Python 2
    - fixes #286
    Make sure truncate flushes file contents
    
    - fixes #285
    Changed the behavior of getsize() on buffered append to match real OS
    
    - fixes #281
    file.next shall raise if file is not open for reading
    
    - fixes #284
    Fixed check for open file
    
    - fixed opening of file with file descriptor
    - fixes #282
    Make sure that tell() and seek() on closed file raises
    
    - fixes #280
    Do not allow reading of 0 bytes if reading is not allowed
    
    - fixes #279
    Raise IOError instead of OSError on open with cyclic symlink
    
    - fixes #274
    Raise if trying to access closed file
    
    - fixes #275
    Raise if trying to call SetContents on directory
    
    - fixes #276
    Passed missing raw_io flag
    
    - unified flag name
    - fixes #271
    - fixes #272
    Use StringIO instead of cStringIO
    
    - avoids problems with updating read-only strings
    - unified two sync methods
    - fixes #269
    Added basic support for umask in mode after open
    
    - fixes #258
    Fixed handling of appending ifmore than one FD is open
    
    - fixes #268
    Added update from file in low-level write to match real behavior
    
    - ensures correct synchronization if multiple FDs are open for writing
    - fixes #211
    Do not remove symlink in removedirs (regression)
    
    - fixes #266
    Changed st_nlink for directories to conform to Unix standard (entry count)
    
    - fixes #255
    Do not allow renaming a symlink to a directory
    
    - fixes #265
    Added handling of directory links in GetObjectFromNormalizedPath()
    
    - fixes #261
    Reworked low-level I/O handling to better reflect different modes
    
    - fixes #262
    Handle case that symlink exists at target path for exclusive file creation
    
    - fixes #263
    Allow some more rename operations with symlinks
    
    - fixes #260
    Raise NotImplementedError if using O_EXCL without O_CREAT
    
    - fixes #256
    Added yet another mode for O_CREAT + O_TRUNC
    
    - fixes #257
    Allow removedirs with non-top directory symlink
    
    - fixes #259
    Do not allow renaming to symlink
    
    - raises OSError with errno.ENOTDIR under Unix, EEXIST under Windows
    - fixes #251
    Added possibility to open with os.O_CREAT only
    
    - fixes #254
    os.mkdir does not remove symlink under Unix
    
    - fixes #252
    Added missing check to allow renaming broken symlinks
    
    - fixes #249
    Symlink shall not create parent directories
    
    - CreateLink() still does this for convenience, but symlink and pathlib.symlink not
    - fixes #247
    
    - work in progress
    Removed fake_filesystem_glob.py, relying on patched os module
    
    - changed test to test the real glob with the fake filesystem
    - see #189
    Removed tempfile from Patcher
    - removed fake_tempfile
    - removed tests only relevant for fake implementation
    - changed remaining tests to work with real tempfile
    - configure Patcher to work with tempfile, create temp dir in setUpPyfakefs()
    - added hack to fix problem with cached os functions in Patcher (Posix only)
    - added support for O_TEMPORARY flag to os.open (Windows only)
    - added support for low level exclusive mode in Python 2
    - added current pypy version to travis
    - fixes #191
    Another IOError vs. OSError mismatch
    
    - fixes #246
    Raise OSError instead of IOError if parent is not a directory
    
    - fixes #243
    - fixes #244 (duplicate)
    - fixes #245 (duplicate)
    Raise OSError instead of IOError for existing hardlink
    
    - raise OSError if trying to create a hardlink to a directory
    - fixes #241
    Changed behavior of NormalizeCase to normalize existing part of paths
    
    - fixes problems under Windows with handling partly existing paths
    Traverse top level symlink in os.walk regardless of 'followsymlinks' value
    
    - fixes #240
    Fixed another case where low-level I/O function raises OSError instead of IOError
    
    - fixes #238
    Rename renames the symlink itself, not the target
    
    - fixes #239
    Consider symlink if creating a hard link
    
    - fixes #234
    Raise OSError instead of IOError for low-level open
    
    - fixes #237
    Raise correct exceptions for low level read/write
    
    - fixes #235
    Fixed renaming of symlinks
    
    - fixes #233
    Do not allow renaming a directory to a file
    
    - fixes #232
    Fixed regression in rename introduced in recent fix
    
    - fixes #230
    Do nothing if renaming to a hard link of a file
    
    - fixes #227
    Handle try to recursive rename for raising OSError
    
    - fixes #216
    Replaced GetObject with ResolveObject to correctly handle symlinks
    
    - replaced in RemoveObject(), ConfirmDir() and chdir()
    - fixes #226
    Correctly handle case where the rename target has a regular file as parent
    
    - fixes #224
    Enable renaming directory to existing directory under Posix
    - raise OSError if destination is not empty, or if source is a file
    - otherwise allowing reaming under Posix
    - fixes #217
    Fixed handling of non-existent file path with existing parent file
    
    - caused obscure bug if the file name was contained in the pseudo-parent file
    - fixes #219
    Corrected incomplete fix for makedirs with symlink
    
    - fixed #220
    Fixed dir-fd handling: always check for the real availability of functions
    
    - added os.unlink implementation, as it now differs from os.remove due to dir-fd handling
    Added support for dir_fd argument in several os functions
    
    - fixes #206
    Added possibility to use open file descriptor as path
    - added for os.utime, os.chmod, os.chdir, os.chown, os.listdir, os.stat and os.lstat
    - fixes #205
    Make sure symlinks are considered in some functions
    - resolve path for os.path.size and os.path.getmtime/getatime/getctime
    - see #210
    Make sure adding object to a symlinked directory works
    
    - see #215
    Fixed handling of invalid parent paths in CreateDirectory()
    - fixed handling of symlinks in MakeDirectories()
    - fixed exception thrown on too many symlinks
    - see #209
    Raise exception if trying to create file in read-only directory
    
    - raise exception if trying to create file in read-only directory under Posix OS
    - fixed assertRaisesIOError and assertRaisesOSError
    - never allow adding of already existing file or directory
    - do not allow FakeFile without filesystem
    - fixes #203
    Added support for basic modes in os.open() (#207)
    
    - added support for O_RDONLY, O_WRONLY, O_RDWR, O_APPEND, O_TRUNC and O_EXCL (O_CREAT was already implemented)
    - added support for opening directories read-only for Posix systems
    - fixes #204
    Added support for fake os.path.samefile (#201)
    
    - fixes #193
    Added xtime_ns in stat result (#200)
    
    - added fake stat_result to make this possible
    - fixes #196
    Added support for ns argument in os.utime
    
    - fixes #192
    Corrected handling of byte/unicode paths in several functions
    
    - added FakeOsModule.getcwdb() for Python 3
    - see #187
    Added lazy evaluation of real directories (#185)
    
    * Added lazy evaluation of real directories
    
    - real directory contents are only added to the fake file system on
    demand (makes adding large directory trees faster)
    - refactored real file/directory access to use own classes
    
    * Added possibility to switch off lazy directory reading
    
    - may be needed for tests that check the disk usage to avoid the side effect of changing disk usage during delayed directory content access
    Added support for errors argument in FakeFileOpen (#184)
    Fix handling of intertwined read/write for unicode strings in Python 3
    Fixed another case handling problem
    
    - real files with no content added to the fake filesystem have been
    handled incorrectly in NormalizeCase
    Fixed case handling for mount points
    
    - always use the original case for a mount point
    Added methods to access real files
    
    - allow to add really existing files and directory trees to the fake
    file system, with the contents read on demand
    - see #170
    Rename PathManipulationTests to PathManipulationTestBase for consistency
    
    This base class has no tests, and all other non-concrete test case base classes
    in this file use a *TestBase convention.
    Derive SetLargeFileSizeTest directly from TestCase
    
    SetLargeFileSizeTest should derive directly from unittest.TestCase instead
    of FakeDirectoryUnitTest, to avoid running tests in FakeDirectoryUnitTest
    twice.
    Fixed changing case in rename in case-insensitive file systems
    
    - fixes #160
    Move CopyRealFile() to fake_filesystem_unittest
    
    In actual practice it did not work in fake_filesystem.
    Added helper method FakeFile.CopyRealFile()
    
    This copies a file from the real file system to
    the fake file system, making it easy to use
    files from the real file system in your tests.
    Fix disk usage calculations when too large file is created
    
    Previously if you created file having larger initial contents than the
    free space in the fake filesystem, the disk usage counter was decreased
    by the size of the initial contents possibly resulting in negative usage.
    
    Basically the issue was that when ChangeDiskUsage is called with size
    larger than the amount of free space, space usage is not changed but
    an error is raised. Due to an exception, CreateFile removes the created
    object that results in new call to ChangeDiskUsage with negative size
    of the object.
    
    Previously the object's size was set before ChangeDiskUsage was called
    and then when the object was being removed the object's already set size
    was used to reduce the filesystem usage (even though that size was never
    added to the usage).
    Added FakeDirectory.ordered_dirs
    
    - see #151
    Added FakeDirectory.ordered_dirs
    
    - see #151
    Windows test related changes
    
    - adapted some tests to use an arbitrary path separator to make sure we use the defined separator
    - faked split(), dirname(), walk(), realpath(), adapted relpath() to fix these tests
    - fixed case sensitivity for cygwin
    Added support for exclusive creation mode in open
    
    - see #147
    Changed test name, change fix as always dictionnary
    Added regression test for dictionnary instead of list
    Improved support for Windows file system tests
    
    - renamed supports_drive_letter to is_windows_fs and use it for more
    Windows-specific stuff to be able to run more tests for Windows fs under
    Linux
    - added Windows/Posix variants for some tests that ran only under one
    system before
    - test for raised OSError subtypes
    - fake_pathlib_test: used uncommon path separator to ensure usage of
    fake filesystem
    - use SplitPath instead of os.path.split in RenameObject()
    Test for IOError subtypes instead of IOError
    
    - fixed incorrect exception on invalid file open mode
    Error handling fixes
    
    - raise NotADirectoryError where needed so it raised by os.readlink
    - made pathlib resolve() better conform to real implementation
    - added strict argument to resolve in Python 3.6
    - see #139
    - made some fake_pathlib functions available only in 3.5 as in the real implementation
    Docstring consolidation
    
    - slightly reworked some docstrings, added missing docstrings
    - changed behavior of listdir() to returns unsorted entries as in the real function
    Added fake_pathlib implementation
    
    - added implementation and test for fake pathlib
    - moved some functionality from FakeOsModule to FakeFilesystem to be
    able to use it from fake pathlib
    - added follow_symlinks argument to to some funxtions in FakeOsModule
    (stat, chmod, chown, access, utime)
    - added replace() and lchmod()
    - fixes #29
    Modify tests to run properly on OSX.  Update README.
    
    The only change I made here is to recognize in the tests that on OSX ~root
    is /var/root instead of /root.
    
    setup.py has claimed OSX support all along, which is basically true.
    Added fake os.scandir for Python >= 3.5
    
    - incorporated review comments by @jmcgeheeiv
    
    - fixes #119
    Removed Python 3.2 tests in travis config
    
    - enabled encoding tests for Python 2 using u literal
    - fixed incorrect encoding for writing files under Python 2
    Changed whitespace to conform to pep-8
    
    - auto-format done by PyCharm
    Fixed minor issues in comments
    Skip link-related tests under Windows for Python < 3.3
    Fixed opening files for appending with encoding
    
    - added more tests with encoding (mostly similar to tests without
    encoding)
    Added support for file encoding
    
    - save file contents always as bytes
    - consider encoding parameter in open() / io.open()
    - use locale prefered encoding instead of utf-8 as default encoding
    Add the os.makedirs(exist_ok) argument per #98
    Handle file permissions on deletion
    
    - raise on file deletion if missing write permission
    - raise on deleting an open file under Windows
    - make sure check is done recursively if deleting directories
    - fixes #27
    Fixed error in NormalizeCase
    
    - caused incorrect behavior for files without contents set
    - added respective test
    Fixed some problems with case-insensitive file system
    
    - added tests also for case sensitive behavior
    - fixed exception type thrown by getsize()
    - fixes #112
    Move testCopyingPreservesByteContents to proper class
    Add leading slash to testCopyingPreservesByteContents
    Fix problem copying byte contents
    
    Fixes issue #105
    Support for mount points
    
    - fixed incorrect argument in RenameObject
    - added supports_drive_letter to tests where missing to succeed under
    Linux
    Added auto-mount for Windows drives and UNC paths
    
    - fixed some more drive and UNC path problems
    Added support for mount points
    
    - added AddMountPoint() together with support for st_ino and st_dev
    - adapted GetDiskUsage() and ChangeDiskUsage() to use the file system
    given by path, added SetDiskUsage() convenience function
    - added FakeOsModule.ismount() implementation
    - moved rename implementation to FakeFilesystem.RenameObject(), adapted
    it and shutil.move() to correctly behave with same and different file
    systems
    - adapted/added tests
    Simplified rename
    
    - change rename to change the existing object instead of creating a new
    one
    - initialize st_link with 0 and increase it in AddEntry() (mirrors
    behavior in RemoveEntry())
    - fixes issue #99
    Fixed NormalizeCase() with hard links
    
    - changed to not rely on file name member as this may be incorrect in
    case of hard links
    - re-enabled tests under Windows
    Fixed handling of file system size with hard links
    
    - added check for st_nlink in file system size change
    - moved raising out of space IOError to single location
    - added test, disabled some tests under Windows
    Implement hard link support
    
    This change adds support for hard links, and tests to go along with
    that.
    
    There is a bit of ugliness in this change around the use of the name
    field on FakeFile instances. Support for hard links means that the same
    file can have different names under different directories, so it
    fundamentally doesn't make sense for FakeFile instances to have a name
    associated with them.
    
    However, I didn't want to have to perform a mass refactoring as a
    prerequisite to making this change, so it instead just sets the filename
    as needed to work with the existing implementation of AddObject. This
    has the unavoidable side effect of changing the name associated with the
    original file as well, since they share the same FakeFile instance.
    
    It looks like this is probably safe to do now, but to properly ensure
    that there aren't any problems related to this, the whole codebase
    should be refactored to remove the name field from FakeFile, and replace
    it with a suitable alternative. It may require a wrapper class that
    helps callers keep track of a file's name while preventing misuse of
    that information by direct users of FakeFile.
    Drive letter handling fix
    
    - correctly handle drive root in SplitPath() (hopefully last fix )
    Fixed file system size handling during rename
    Some more UNC path support (from Python 2.7)
    
    - adapted CollapsePath()
    - second try to adapt isabs(), tries to simulate exception for path=None
    for Windows and Linux
    Support for drive letter
    
    - fixed logical error introduced in last commit
    - added initial UNC path support to SplitDrive() and JoinPaths()
    Some drive-letter related fixes
    
    - use adapted Windows specific Python join() with drive letter support
    - fixed abspath() wih regard to drive letters
    - fixed previously introduced bug in GetPathComponents()
    - implemented splitdrive() to be able to test it under Linux
    Fixed behavior of ResolvePath() for Windows paths
    
    see issue #83
    Second go to fix the test
    
    - do not use unicode in Python 2
    Fixed syntax error with Python 3.2
    Fixed handling of unicode contents size
    
    - fixed handling of setting long size in Python 2
    - added respective tests as proposed by jmcgeheeiv
    Writes update mtime and float time support (#68)
    
    Thank you for all your effort and cooperation.
    Adding support for filesystem size
    
    - added parameter to set the total size of the filesystem
    - keep track of used size for added and deleted files
    - raise IOError for insufficient space on creating or resizing a file
    - added shutil.disk_usage() implementation
    Add Python 3.5.x in testGetattrForwardToRealOsPath
    Removed debug output
    Fixed testGetattrForwardToRealOsPath() under Windows
    
    - see issue #78
    Fixed support for drive letter
    
    - fixed behavior of NormalizePath() and JoinPaths() with drive letters
    Fix version check in fake os.path.__getattr__() test.
    Skip test for access to real os.path attributes in Python 2.6
    Fix #79, use getattr(self._path, ...) in fake path.os.__getattr__().
    
    I also added a test.  I confirmed that all other __getattr__()
    definitions are defined properly.  The fake path.os.__getattr__()
    alone was defined in this incorrect way.
    Added support for case-insensitive filesystem
    
    - activated under Windows/MacOS
    - handles issue #69
    Support for additional path separator
    
    - removed additional argument, set additional separator automatically
    instead
    - adapted tests
    Added support for additional path separator
    
    - added optional argument to FakeFilesystem that declares an additional
    path separator (to mimic different possible separators under Windows)
    - adapted normcase to respect the defined path separators (issue #28)
    Add support for fsync and fdatasync with corresponding tests
    Adding followlinks parameter to os.walk includes test
    Use proper checking for directory on open.
    
    So block devices aren't accidentally considered directories.  Should
    address #24.
    Redo byte reading/writing tests
    
    This adds a general case for all supported Python versions and specific
    cases for Py2 vs Py3 behavior when reading/writing files.
    Protect binary data a little better
    
    This also works for non-Unicode encodings (like compressed data).
    reorganizing into a package for easier distribution (eg. PyPI)
    Correct Python 2.6 detection
    The real Python 2.6 os.path.relpath('/path/to/foo') actually does return '../path/to/foo'
    
    instead of 'path/to/foo'
    all_tests.py now returns nonzero for failure per issue #56
    Raise a TypeError for non-integer uid and gid to os.chown() to fix #30.
    
    None is also allowed for uid and gid.  This permits os.rename to
    use os.chown even when the source file uid and gid are None (unset).
    Add unit tests to check the Unicode problems described in issue #32.
    Resolve links to their target in os.utime to fix #49
    Run most of unix tests on cygwin, add TestCase system attributes
    Fixed one of the tests added for #31.
    Use the locally defined TestCase base class.
    Treat cygwin as a Windows
    
    fake_filesystem.py:131 - WindowsError is not available on cygwin
    Replace dependency on 'mox' with standard library module 'mock'.
    Import unittest2 for Python 2.6 compatability
    In Travis, conditionally install unittest2 for Python 2.6.
    Fix bug with calling rename with equal old & new names.
    
    If you were to call rename() with the same values for both old name and new
    name, GetEntry would raise an unnecesary KeyError. This commit fixes that.
    Shorten the testRenameSameFilenames() test title to match other titles.
    Fix bug with calling rename with equal old & new names.
    
    If you were to call rename() with the same values for both old name and new
    name, GetEntry would raise an unnecesary KeyError. This commit fixes that.
    All tests now pass in Windows
    All tests now pass in Windows
    Fixed Issue 21: Behavior of relpath, abspath and normpath on Windows.
    Fixed Issue 21: Behavior of relpath, abspath and normpath on Windows.
    Fixed Issue 20: Python 3 now properly supports files open in binary mode as a bytes list.
    Fixed Issue 20: Python 3 now properly supports files open in binary mode as a bytes list.
    Fixed Issue  18: Builtin open methods lack IOError for prohibited operations
    Fixed Issue  18: Builtin open methods lack IOError for prohibited operations
    Fixed Issue 3: fake_filesystem.py incorrectly resolves the path "a/b/../non_existent_folder/../file"
    Fixed Issue 3: fake_filesystem.py incorrectly resolves the path "a/b/../non_existent_folder/../file"
    Syncronizes the open file StringIO contents with the file object in case
    Syncronizes the open file StringIO contents with the file object in case
    Fixes Issue 5: FakeFileOpen keyword args do not match the __builtin__ equivalents.
    Fixes Issue 5: FakeFileOpen keyword args do not match the __builtin__ equivalents.
    correction to testExpandUser
    correction to testExpandUser
    Fixes Issue 14: Support for Python 3
    Fixes Issue 14: Support for Python 3
    Fixes Issue 17: FakePathModule is missing relpath
    Fixes Issue 17: FakePathModule is missing relpath
    fixes issue 16: pyfakefs does not support relative paths
    fixes issue 16: pyfakefs does not support relative paths
    revert
    revert
    fixes issue 16: pyfakefs does not support relative paths
    fixes issue 16: pyfakefs does not support relative paths
    Resolves several issues:
    Issue 4: Raise OSError when calling fake_filesystem.mkdir() with a trailing "/."
    Issue 6: os.write() and os.close() are not mocked.
    Issue 7: fake_filesystem's os.chown() doesn't match Python's os.chown() handling of -1
    Issue 8: fake_filesystem's os.rename() doesn't copy uid and gid to the renamed file
    Issue 10: FakeOsModule.os.fdopen should raise TypeError on a non-integer file descriptor.
    Issue 11: Stat time variables: ctime, atime and mtime should be int and not floats.
    Initial import of pyfakefs.
    Changed patch_open_code argument to accept an additional AUTO mode
    
    - possible modes are now PatchMode.OFF (default), PatchMode.ON and PatchMode.AUTO
    - in auto mode, open_case is patched for files existing in the fake filesystem
    Suppress deprecation warnings while collecting modules
    
    - closes #542
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    More PEP-8 fixes and improvements
    
    - added initial contributing guide
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    Mention that binary packages cannot be patched in auto doc introduction
    
    - changed version for auto doc to 3.2
    - removed unused test code
    Copied mox3 stubout into pyfakefs (#183)
    
    * Copied mox3 stubout into pyfakefs
    
    - removed dependency on mox3
    
    * Added some tests for mox3_stubout functionality
    
    * Added documentation for mox3 stubout usage in pyfakefs
    
    - proposed by jmcgeheeiv in review
    Added pypy to Travis CI
    
    - synchronizes travis with tox.ini
    added a test for the pytest module and updated README.md
    Travis.CI: Removed autodoc, added 3.7-dev
    Added auto doc generation
    
    - added sphinx configuration to create documentation from docstrings
    - fixed some sphinx warnings in docstrings
    - added script that recreates documentation after each commit and commit it to gh-pages
    - added mention of pyfakefs version for newer features in docstrings
    Python 3.6 support
    
    - added support for context manager in scandir iterator (used in pathlib and glob in 3.6)
    - added handling for path-like objects for some functions (3.6 only)
    - fixed incorrect usage of random generator in fake_tempfile
    - added Python 3.6 in Travis CI
    Removed Python 3.2 tests in travis config
    
    - enabled encoding tests for Python 2 using u literal
    - fixed incorrect encoding for writing files under Python 2
    Test against python 3.5
    Replace dependency on 'mox' with standard library module 'mock'.
    Import unittest2 for Python 2.6 compatability
    In Travis, conditionally install unittest2 for Python 2.6.
    Add continuous integration testing with Travis CI.
    Expand versions tested
    Add prerequisite mox
    Correct test script.
    Add continuous integration testing with Travis CI.
    Added partial support for pandas to work with pyfakefs
    
    - support for read_csv and read_excel (with the default module)
    - see #531
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    Patch only modules with fake_filesystem_unittest.Patcher
    reorganizing into a package for easier distribution (eg. PyPI)
    Initial import of pyfakefs.
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    Removed tempfile from Patcher
    - removed fake_tempfile
    - removed tests only relevant for fake implementation
    - changed remaining tests to work with real tempfile
    - configure Patcher to work with tempfile, create temp dir in setUpPyfakefs()
    - added hack to fix problem with cached os functions in Patcher (Posix only)
    - added support for O_TEMPORARY flag to os.open (Windows only)
    - added support for low level exclusive mode in Python 2
    - added current pypy version to travis
    - fixes #191
    Patch only modules with fake_filesystem_unittest.Patcher
    Moved pytest specific SKIPMODULES to Patcher
    
    - needed anyway, and makes it easier to write customized fixtures
    - adapted documentation for customizing patching
    Fix missing import introduced by previous change
    Always add linecache and tokenize to skipped modules
    
    - needed not only for pytest
    Make sure pytest will work without pyfakefs installed
    - import fs in conftest.py used in tests
    - remove tests for deprecated function
    - see #550
    Fixed a few flake8 warnings
    Changes to correctly run setup.py test under Python 2
    
    - exclude pathlib tests if pathlib is not available
    - moved pytest tests put of tests to not be discovered
    - see #465
    Adapted pytest plugin and pytest example plugin
    
    - added pytest and tokenize to SKIPMODULES
    - use nicer yield syntax in plugin (see #458)
    - fixed AttributeError in failing pytest in Python 2
    Adapted pytest example to use the same code as the fs plugin
    
    - avoids problems with linecache and tokenize modules used in pytest
    Added test showing the usage of a custom pytest fixture
    
    - moved pytest tests into separate subdirectory
    - the new test is an example for how to work around #420
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    More PEP-8 fixes and improvements
    
    - added initial contributing guide
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    Mention that binary packages cannot be patched in auto doc introduction
    
    - changed version for auto doc to 3.2
    - removed unused test code
    Copied mox3 stubout into pyfakefs (#183)
    
    * Copied mox3 stubout into pyfakefs
    
    - removed dependency on mox3
    
    * Added some tests for mox3_stubout functionality
    
    * Added documentation for mox3 stubout usage in pyfakefs
    
    - proposed by jmcgeheeiv in review
    Added pypy to Travis CI
    
    - synchronizes travis with tox.ini
    added a test for the pytest module and updated README.md
    Travis.CI: Removed autodoc, added 3.7-dev
    Added auto doc generation
    
    - added sphinx configuration to create documentation from docstrings
    - fixed some sphinx warnings in docstrings
    - added script that recreates documentation after each commit and commit it to gh-pages
    - added mention of pyfakefs version for newer features in docstrings
    Python 3.6 support
    
    - added support for context manager in scandir iterator (used in pathlib and glob in 3.6)
    - added handling for path-like objects for some functions (3.6 only)
    - fixed incorrect usage of random generator in fake_tempfile
    - added Python 3.6 in Travis CI
    Removed Python 3.2 tests in travis config
    
    - enabled encoding tests for Python 2 using u literal
    - fixed incorrect encoding for writing files under Python 2
    Test against python 3.5
    Replace dependency on 'mox' with standard library module 'mock'.
    Import unittest2 for Python 2.6 compatability
    In Travis, conditionally install unittest2 for Python 2.6.
    Add continuous integration testing with Travis CI.
    Expand versions tested
    Add prerequisite mox
    Correct test script.
    Add continuous integration testing with Travis CI.
    Changes to correctly run setup.py test under Python 2
    
    - exclude pathlib tests if pathlib is not available
    - moved pytest tests put of tests to not be discovered
    - see #465
    Added another example for custom argument usage with PyTest
    
    - added a respective link in the documentation
    Added test showing the usage of a custom pytest fixture
    
    - moved pytest tests into separate subdirectory
    - the new test is an example for how to work around #420
    Correctly handle alternative path separators in path resolving
    
    - fixes #530
    Added possibility to pass additional parameters to `fs` pytest fixture
    
    - added test and documentation
    Changes to correctly run setup.py test under Python 2
    
    - exclude pathlib tests if pathlib is not available
    - moved pytest tests put of tests to not be discovered
    - see #465
    Added another example for custom argument usage with PyTest
    
    - added a respective link in the documentation
    Added test showing the usage of a custom pytest fixture
    
    - moved pytest tests into separate subdirectory
    - the new test is an example for how to work around #420
    Changes to correctly run setup.py test under Python 2
    
    - exclude pathlib tests if pathlib is not available
    - moved pytest tests put of tests to not be discovered
    - see #465
    Make sure pathlib2 and scandir package are used if available
    
    - adapted tests to test pathlib2 and scandir package in all versions
    - see #462
    Added test showing the usage of a custom pytest fixture
    
    - moved pytest tests into separate subdirectory
    - the new test is an example for how to work around #420
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Added possibility to add additional faked modules
    
    - can be configured using argument modules_to_patch
    - adapted documentation
    - fixes #345
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    Added additional possibility to configure Patcher
    
    - added argument that allows adding modules for patching that import file system modules under another name
    - fixes #231
    Mention that binary packages cannot be patched in auto doc introduction
    
    - changed version for auto doc to 3.2
    - removed unused test code
    Copied mox3 stubout into pyfakefs (#183)
    
    * Copied mox3 stubout into pyfakefs
    
    - removed dependency on mox3
    
    * Added some tests for mox3_stubout functionality
    
    * Added documentation for mox3 stubout usage in pyfakefs
    
    - proposed by jmcgeheeiv in review
    Added pypy to Travis CI
    
    - synchronizes travis with tox.ini
    added a test for the pytest module and updated README.md
    Travis.CI: Removed autodoc, added 3.7-dev
    Added auto doc generation
    
    - added sphinx configuration to create documentation from docstrings
    - fixed some sphinx warnings in docstrings
    - added script that recreates documentation after each commit and commit it to gh-pages
    - added mention of pyfakefs version for newer features in docstrings
    Python 3.6 support
    
    - added support for context manager in scandir iterator (used in pathlib and glob in 3.6)
    - added handling for path-like objects for some functions (3.6 only)
    - fixed incorrect usage of random generator in fake_tempfile
    - added Python 3.6 in Travis CI
    Removed Python 3.2 tests in travis config
    
    - enabled encoding tests for Python 2 using u literal
    - fixed incorrect encoding for writing files under Python 2
    Test against python 3.5
    Replace dependency on 'mox' with standard library module 'mock'.
    Import unittest2 for Python 2.6 compatability
    In Travis, conditionally install unittest2 for Python 2.6.
    Add continuous integration testing with Travis CI.
    Expand versions tested
    Add prerequisite mox
    Correct test script.
    Add continuous integration testing with Travis CI.
    Fixed a few flake8 warnings
    Changes to correctly run setup.py test under Python 2
    
    - exclude pathlib tests if pathlib is not available
    - moved pytest tests put of tests to not be discovered
    - see #465
    Added context manager class for pause/resume
    
    - added usage documentation
    - see #448
    Fixed a few flake8 findings, mainly formatting stuff
    Added support for pause/resume patching of the file system modules
    
    - can be called from the unit test, the patcher or the fs
    Added test showing the usage of a custom pytest fixture
    
    - moved pytest tests into separate subdirectory
    - the new test is an example for how to work around #420
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    Make pyfakefs API PEP-8 conform
    
    - changed methods names
    - added old method names as depracated version
    - added possibility to switch on deprecation warning
    - see #186
    fixed test
    removed dummy test
    rename pytest module to pytest plugin
    added the pytest plugin test
    Changes to correctly run setup.py test under Python 2
    
    - exclude pathlib tests if pathlib is not available
    - moved pytest tests put of tests to not be discovered
    - see #465
    Added test showing the usage of a custom pytest fixture
    
    - moved pytest tests into separate subdirectory
    - the new test is an example for how to work around #420
    Moved tests into package to conform with standard package structure
    - adapted tests
    - fixed bug in add_real_directory for nested paths
    Fixed some flake8 findings for tests, adapted line length to 79 chars
    More PEP-8 fixes and improvements
    
    - added initial contributing guide
    Moved tests to separate directory
    
    - better conforms to Python conventions
    - avoid clutter in root path
    More PEP-8 adaptations
    
    - adapted method names
    - adapted some formatting
    - see #186
    Document the requirement for PyTest 2.8.6 or above.
    
    Fixes #43.
    Document the requirement for PyTest 2.8.6 or above.
    
    Fixes #43.
    Add FakeFileOpen.__name__, which pytest uses in messages
    
    Having said that, pytest's messages are INTERNAL ERRORs, so this is
    only the beginning of a solution to #43.  But it does make the problem
    clearer.
    
    Run pytest as instructed at the beginning of file pytest_doctest_test.py.
    
    Earlier, I misinterpreted @megapctr's statement that this "crashes".  I was
    looking for extreme drama like a segmentation fault.  Having said that,
    INTERNAL ERRORs are certainly bad.
    Changed whitespace to conform to pep-8
    
    - auto-format done by PyCharm
    Add pytest doctests for #43
    Changes to correctly run setup.py test under Python 2
    
    - exclude pathlib tests if pathlib is not available
    - moved pytest tests put of tests to not be discovered
    - see #465
    Added test showing the usage of a custom pytest fixture
    
    - moved pytest tests into separate subdirectory
    - the new test is an example for how to work around #420
    reorganizing into a package for easier distribution (eg. PyPI)
    Initial import of pyfakefs.
    Make sure pytest will work without pyfakefs installed
    - import fs in conftest.py used in tests
    - remove tests for deprecated function
    - see #550
    Removed support for Python 2.7 and 3.4
    Changes to correctly run setup.py test under Python 2
    
    - exclude pathlib tests if pathlib is not available
    - moved pytest tests put of tests to not be discovered
    - see #465
    Adapted pytest plugin and pytest example plugin
    
    - added pytest and tokenize to SKIPMODULES
    - use nicer yield syntax in plugin (see #458)
    - fixed AttributeError in failing pytest in Python 2
    Added test showing the usage of a custom pytest fixture
    
    - moved pytest tests into separate subdirectory
    - the new test is an example for how to work around #420
    Fixed some flake8 and deprecation warnings
    Make sure that the linecache module is not using the fake file system
    
    - does not work for Python 3.3 (which should not be used anymore anyway)
    - see #381
    Make sure pytest will work without pyfakefs installed
    - import fs in conftest.py used in tests
    - remove tests for deprecated function
    - see #550
    Changes to correctly run setup.py test under Python 2
    
    - exclude pathlib tests if pathlib is not available
    - moved pytest tests put of tests to not be discovered
    - see #465
    Added test showing the usage of a custom pytest fixture
    
    - moved pytest tests into separate subdirectory
    - the new test is an example for how to work around #420
    Preparing release 3.4.2
    
    - adapted version
    - adapted release notes
    - added Python 3.7 to setup classifiers
    Make sure that the linecache module is not using the fake file system
    
    - does not work for Python 3.3 (which should not be used anymore anyway)
    - see #381
    Fixed typo in bug template format
    Adapted issue template
    
    - for some reason, not the latest version has been checked in
    Added issue templates
    
    - adapted from standard template
    Fixed typo in bug template format
    Adapted issue template
    
    - for some reason, not the latest version has been checked in
    Added issue templates
    
    - adapted from standard template
    Minor documentation changes
    Added documentation for not matching file object MRO
    
    - also added features paragraph in introduction
    - see #484
    Prepare next version
    
    - removed Python 2.7 and 3.4 support from documentation
    Added Python 3.8 to setup.py and README
    
    - added note about ending Python 2.7/3.4 support in the documentation
    Minor documentation updates to prepare release
    
    - updated release notes
    - updated auto-generated documentation
    Changed patch behavior to rely on module names instead of imported names (#434)
    
    * Changed patch behavior to rely on module names instead of imported names
    
    - adapted tests and documentation
    
    * Clarify import method explanation
    Remove support for Python 3.3
    
    - added 3.7 builds for MacOS and Windows
    - use released 3.7 build for Linux
    Fixed some typos and formatting issues in documentation
    Documentation updates
    
    - added "Automatically find and patch file functions and modules" from Wiki page
    - added/fixed some links
    - added background color to code boxes for better readability
    Adapted documentation
    
    - mentioned limitations for importing modules
    - added some Patcher argument description
    Adapted documentation
    
    - some PEP-8 reformatting
    - see #186
    Minor documentation updates
    
    - adapted documentation links to release and master documentation
    - mentioned MacOS builds on Travis CI
    Mention that binary packages cannot be patched in auto doc introduction
    
    - changed version for auto doc to 3.2
    - removed unused test code
    Minor documentation changes (#181)
    
    * Minor documentation changes
    
    - added links to CHANGES.md for convenience
    - made some links in README.md absolute to work in Pypi description
    - adapted requirements as discussed in #179
    
    * Cleaned up autodoc
    
    - added some introduction (taken from README)
    - cleaned up index
    - fixed minor indentation problems in docstrings
    Added auto doc generation
    
    - added sphinx configuration to create documentation from docstrings
    - fixed some sphinx warnings in docstrings
    - added script that recreates documentation after each commit and commit it to gh-pages
    - added mention of pyfakefs version for newer features in docstrings
    Changed decorator to be able to be called with and without arguments
    
    - now can be used both with call syntax, and without parentheses
    Added add_real_symlink to API and usage documentation
    Do not patch builtins in Python 3, including PyPy3
    
    - slightly adapted documentation
    Added support for pause/resume patching of the file system modules
    
    - can be called from the unit test, the patcher or the fs
    Set st_uid and st_gid for new files to current user/group ID
    
    - allow to set current group ID
    - see #449
    Minor documentation updates to prepare release
    
    - updated release notes
    - updated auto-generated documentation
    More documentation updates
    
    - minor adaptations in README
    - adapted copyright
    - minor documentation changes for better output
    - fixed failing doctests in fake_filesystem.py
    - removed Python 3.2 from setup.py
    Documentation updates
    
    - added "Automatically find and patch file functions and modules" from Wiki page
    - added/fixed some links
    - added background color to code boxes for better readability
    Added more usage documentation to gh-pages
    Adapted documentation
    
    - mentioned limitations for importing modules
    - added some Patcher argument description
    Minor documentation updates
    
    - removed unused script
    Make pyfakefs API PEP-8 conform
    
    - changed methods names
    - added old method names as depracated version
    - added possibility to switch on deprecation warning
    - see #186
    Minor documentation updates
    Let autodoc only document classes and methods relevent for the user
    
    - see #186
    Adapted usage chapter for auto-generated documentation
    
    - removed tempfile and glob modules from module list
    - moved temp dir generation code from TestCase into Patcher
    - see #189
    Minor documentation changes (#181)
    
    * Minor documentation changes
    
    - added links to CHANGES.md for convenience
    - made some links in README.md absolute to work in Pypi description
    - adapted requirements as discussed in #179
    
    * Cleaned up autodoc
    
    - added some introduction (taken from README)
    - cleaned up index
    - fixed minor indentation problems in docstrings
    Added auto doc generation
    
    - added sphinx configuration to create documentation from docstrings
    - fixed some sphinx warnings in docstrings
    - added script that recreates documentation after each commit and commit it to gh-pages
    - added mention of pyfakefs version for newer features in docstrings
    Fixed some typos and formatting issues in documentation
    Documentation updates
    
    - added "Automatically find and patch file functions and modules" from Wiki page
    - added/fixed some links
    - added background color to code boxes for better readability
    Minor documentation updates to prepare release
    
    - updated release notes
    - updated auto-generated documentation
    Adapted documentation
    
    - some PEP-8 reformatting
    - see #186
    Add FakeFilesystem.os for more convenient OS setting
    
    - the setter changes all needed attributes and resets the file system
    - reset now also resets pathlib to adapt the path separators
    - adapt documentation
    Add documentation for simulating other file systems
    Moved pytest specific SKIPMODULES to Patcher
    
    - needed anyway, and makes it easier to write customized fixtures
    - adapted documentation for customizing patching
    Changed patch_open_code argument to accept an additional AUTO mode
    
    - possible modes are now PatchMode.OFF (default), PatchMode.ON and PatchMode.AUTO
    - in auto mode, open_case is patched for files existing in the fake filesystem
    Added some support for io.open_code in Python 3.8
    
    - added new argument 'patch_open_code' to allow patching the function
    - see #554
    Add support for buffering in text mode
    - support line buffering
    - closes #549
    Clarify location of fs argument for patchfs
    Minor documentation changes
    Documentation changes after review
    
    - added test for writing excel file
    Added patching of django file locks
    
    - no tests added (would be a bit complicated),
      has been tested in production code
    Fix os.expanduser to work with a bytes path
    
    - adapted documentation for pandas support
    - added test for pandas.read_table()
    Added partial support for pandas to work with pyfakefs
    
    - support for read_csv and read_excel (with the default module)
    - see #531
    Add pandas to the list of libraries not comaptible with pyfakefs
    
    - see #528
    Mention Pillow as not working with pyfakefs
    
    - see #529
    Make sure that all temp files are removed in real fs tests
    
    - moved file creation from __init__() to setUp() to avoid it for skipped tests
    - added some missing cleanup
    - use with assertRaises(...) in tests for better readability
    Added more examples for patchfs decorator
    
    - fixed error in documentation code example
    Changed decorator to be able to be called with and without arguments
    
    - now can be used both with call syntax, and without parentheses
    Added convenience decorators to patch single functions
    
    - decorator patchfs is called without arguments (and no parentheses)
    - decorator custom_patchfs is called with Patcher arguments
    Added automatic patching of file system function in default argument
    
    - works for module-level functions and methods in module-level classes
    - this also makes it unnecessary to reload the "tempfile" module
    Fixed typo, added link to Patcher arguments
    Added possibility to pass additional parameters to `fs` pytest fixture
    
    - added test and documentation
    Added pytest version for add_real_directory usage example
    - see #506
    Add note about accessing real files in pytest
    
    Should give pytest users a way to load test resources that does fit with
    the style that pytest is normally used.
    Use keyword-only arguments for os functions as in real implementation
    
    - removed more obsolete comments
    - removed obsolete "object" superclass
    Removed support for Python 2.7 and 3.4
    Prepare next version
    
    - removed Python 2.7 and 3.4 support from documentation
    Added add_real_symlink to API and usage documentation
    Added user rights to troubleshooting chapter
    
    - see #489
    Support modules instead of module names in additional_skip_names
    
    - closes #482
    Fixed typo and formatting issue in documentation
    
    - see #480
    Added troubleshooting documentation for not patched modules
    Document existence of temporary directories (#477)
    
    * document existence of temporary directories
    Add possibility to always run tests as non-root user
    
    - added argument allow_root_user to Patcher and UnitTest
    - see #474
    Removed unneeded parameter "use_dynamic_patch"
    
    - remove unneeded workaround for PyCharm debugger
    - slightly adapted usage documentation
    Changes to correctly run setup.py test under Python 2
    
    - exclude pathlib tests if pathlib is not available
    - moved pytest tests put of tests to not be discovered
    - see #465
    Added example for additional_skip_names parameter documentation
    
    - taken from #464
    Added context manager class for pause/resume
    
    - added usage documentation
    - see #448
    Updated documentation for customizing tests
    
    - see #458
    Adapted documentation to last changes
    Fixed usage of modules_to_patch parameter
    
    - adapted example, as the usage has slightly changed
      (full module path is now needed)
    - fixes #450
    Minor documentation updates to prepare release
    
    - updated release notes
    - updated auto-generated documentation
    Automatically patch imported functions
    
    - allows imports like 'from os import stat' to be patched
    Changed patch behavior to rely on module names instead of imported names (#434)
    
    * Changed patch behavior to rely on module names instead of imported names
    
    - adapted tests and documentation
    
    * Clarify import method explanation
    Updated documentation
    Added TestCase arguments to setUpPyfakefs() for convenience
    Removed patch_path argument from UnitTest and Patcher (#429)
    
    - path is only patched if it is os.path (detected by name)
    Added another example for custom argument usage with PyTest
    
    - added a respective link in the documentation
    Added test showing the usage of a custom pytest fixture
    
    - moved pytest tests into separate subdirectory
    - the new test is an example for how to work around #420
    Fixed some typos and formatting issues in documentation
    Adapted release notes
    
    - adapted version for patch release
    - added chapter about mount point usage
    Documentation updates
    
    - added "Automatically find and patch file functions and modules" from Wiki page
    - added/fixed some links
    - added background color to code boxes for better readability
    Added argument 'target_path' to add_real_file() and add_real_directory()
    
    - allows to map real file system files and directories
      to another location in the fake file system
    - see #347
    Added more usage documentation to gh-pages
    Added modules_to_reload and use_dynamic_patch as Patcher arguments
    
    - simplified DynamicPatcher to avoid side effects
    - adapted documentation
    Added possibility to add additional faked modules
    
    - can be configured using argument modules_to_patch
    - adapted documentation
    - fixes #345
    Adapted documentation
    
    - mentioned limitations for importing modules
    - added some Patcher argument description
    Adapted documentation
    
    - some PEP-8 reformatting
    - see #186
    Make pyfakefs API PEP-8 conform
    
    - changed methods names
    - added old method names as depracated version
    - added possibility to switch on deprecation warning
    - see #186
    Fixed typos in documentation, mention Windows builds
    Minor documentation updates
    Adapted usage chapter for auto-generated documentation
    
    - removed tempfile and glob modules from module list
    - moved temp dir generation code from TestCase into Patcher
    - see #189
    Added missing check to allow renaming broken symlinks
    
    - fixes #249
    Copied mox3 stubout into pyfakefs (#183)
    
    * Copied mox3 stubout into pyfakefs
    
    - removed dependency on mox3
    
    * Added some tests for mox3_stubout functionality
    
    * Added documentation for mox3 stubout usage in pyfakefs
    
    - proposed by jmcgeheeiv in review
    Minor documentation changes (#181)
    
    * Minor documentation changes
    
    - added links to CHANGES.md for convenience
    - made some links in README.md absolute to work in Pypi description
    - adapted requirements as discussed in #179
    
    * Cleaned up autodoc
    
    - added some introduction (taken from README)
    - cleaned up index
    - fixed minor indentation problems in docstrings
    Prepare next release
    Prepare next release
    Prepare next version
    
    - removed Python 2.7 and 3.4 support from documentation
    Prepare next release
    Prepare next release
    
    - adapted release notes
    Prepare next version
    Release branch for version 3.5
    Prepare next version
    
    - adapted version
    - adapted release notes
    Changed version to 3.4.3
    
    - version 3.4.2 was incorrectly published due to a mistake
    Preparing release 3.4.2
    
    - adapted version
    - adapted release notes
    - added Python 3.7 to setup classifiers
    Advance version for next release
    Adapted release notes
    
    - adapted version for patch release
    - added chapter about mount point usage
    Prepare release 3.4
    
    - added documentation link for 3.3 version
    - added pypi link
    Fixed some flake8 findings for tests, adapted line length to 79 chars
    More documentation updates
    
    - minor adaptations in README
    - adapted copyright
    - minor documentation changes for better output
    - fixed failing doctests in fake_filesystem.py
    - removed Python 3.2 from setup.py
    Documentation updates
    
    - added "Automatically find and patch file functions and modules" from Wiki page
    - added/fixed some links
    - added background color to code boxes for better readability
    More PEP-8 adaptations
    
    - adapted method names
    - adapted some formatting
    - see #186
    Minor documentation update
    
    - updated version for gh-pages
    - corrected MacOS build python versions
    Let autodoc only document classes and methods relevent for the user
    
    - see #186
    Adapted usage chapter for auto-generated documentation
    
    - removed tempfile and glob modules from module list
    - moved temp dir generation code from TestCase into Patcher
    - see #189
    Mention that binary packages cannot be patched in auto doc introduction
    
    - changed version for auto doc to 3.2
    - removed unused test code
    Fixed changing case in rename in case-insensitive file systems
    
    - fixes #160
    Added missing version hints
    
    - made shutil.disk_uage only available for Python >= 3.3
    Added auto doc generation
    
    - added sphinx configuration to create documentation from docstrings
    - fixed some sphinx warnings in docstrings
    - added script that recreates documentation after each commit and commit it to gh-pages
    - added mention of pyfakefs version for newer features in docstrings
    Documentation updates
    
    - added "Automatically find and patch file functions and modules" from Wiki page
    - added/fixed some links
    - added background color to code boxes for better readability
    Adapted documentation
    
    - some PEP-8 reformatting
    - see #186
    Minor documentation changes (#181)
    
    * Minor documentation changes
    
    - added links to CHANGES.md for convenience
    - made some links in README.md absolute to work in Pypi description
    - adapted requirements as discussed in #179
    
    * Cleaned up autodoc
    
    - added some introduction (taken from README)
    - cleaned up index
    - fixed minor indentation problems in docstrings
    Added auto doc generation
    
    - added sphinx configuration to create documentation from docstrings
    - fixed some sphinx warnings in docstrings
    - added script that recreates documentation after each commit and commit it to gh-pages
    - added mention of pyfakefs version for newer features in docstrings
    Added auto doc generation
    
    - added sphinx configuration to create documentation from docstrings
    - fixed some sphinx warnings in docstrings
    - added script that recreates documentation after each commit and commit it to gh-pages
    - added mention of pyfakefs version for newer features in docstrings
    Documentation updates
    
    - added "Automatically find and patch file functions and modules" from Wiki page
    - added/fixed some links
    - added background color to code boxes for better readability
    Documentation updates
    
    - added "Automatically find and patch file functions and modules" from Wiki page
    - added/fixed some links
    - added background color to code boxes for better readability
    Make sure pytest will work without pyfakefs installed
    - import fs in conftest.py used in tests
    - remove tests for deprecated function
    - see #550
    Re-enabled flake test
    
    - use build separate stage for flake8
    - do not use a matrix build to make this possible
    Make separate tests from the test script
    
    - ensures that failing tests fail the build
    - make time test less strict to work with PyPi
    - fixes #500
    Re-enabled flake test
    
    - use build separate stage for flake8
    - do not use a matrix build to make this possible
    Make separate tests from the test script
    
    - ensures that failing tests fail the build
    - make time test less strict to work with PyPi
    - fixes #500
    Fixed flake8 warnings
    
    - changed flake8 test to fail the build step on warnings
    Re-enabled flake test
    
    - use build separate stage for flake8
    - do not use a matrix build to make this possible
    Make separate tests from the test script
    
    - ensures that failing tests fail the build
    - make time test less strict to work with PyPi
    - fixes #500
    Split test scripts for error propagation
     - errors in earlier test scripts did not propagate
    Added possibility to pass additional parameters to `fs` pytest fixture
    
    - added test and documentation
    Re-enabled flake test
    
    - use build separate stage for flake8
    - do not use a matrix build to make this possible
    Make separate tests from the test script
    
    - ensures that failing tests fail the build
    - make time test less strict to work with PyPi
    - fixes #500
    Split test scripts for error propagation
     - errors in earlier test scripts did not propagate
    Re-enabled flake test
    
    - use build separate stage for flake8
    - do not use a matrix build to make this possible
    Make separate tests from the test script
    
    - ensures that failing tests fail the build
    - make time test less strict to work with PyPi
    - fixes #500
    Check Python version also for Linux builds
    Added special handling for patching shutil under MacOs under Python 3.8
    
    - set shutil attribute to False that allows using native
      posix copy function during patching
    - see #504
    Added test for correctly installed Python 3 version in Travis.CI
    
    - added test for MacOS only, where Travis does not control the version
    - closes #487 by making sure a failed Python build will be visible
    Use newest release for Python versions
    
    - updated Python versions 3.4 to 3.7 to latest release
    - updated Pypy and Pypy3 to version 7.0.0
    Added running tests in Docker image
    
    - run in separate Matrix build
    Remove support for Python 3.3
    
    - added 3.7 builds for MacOS and Windows
    - use released 3.7 build for Linux
    Add support for pathlib2 (#408) (#422)
    
    Well done.
    Removed Python 2.6 support (#327)
    
    Closes #293
    Adding back Python 2.6 builds
    
    - accidentally removed while adding MacOS builds
    - reverted minor change incompatible with Python 2.6
    Added methods for testing Linux or MacOS only, renamed skip... methods
    Added testing travis.ci mac builds for Python 2.7 and 3.6
    
    - added MacOs specific setting
    - skipped some failing tests for MacOs
    Test using dockerfiles with different OSes
    
    - changed dockerfile in root back to initial state
    - put dockerfiles used for testing into separate directory
    - added dockerfiles for ubuntu, centos, debian, fedora
    Re-enabled flake test
    
    - use build separate stage for flake8
    - do not use a matrix build to make this possible
    Use the current pyfakefs branch in docker file
    
    - still defaults to master if docker is build without arguments
    Added running tests in Docker image
    
    - run in separate Matrix build
    Split test scripts for error propagation
     - errors in earlier test scripts did not propagate
    Re-enabled flake test
    
    - use build separate stage for flake8
    - do not use a matrix build to make this possible
    Make separate tests from the test script
    
    - ensures that failing tests fail the build
    - make time test less strict to work with PyPi
    - fixes #500
    Test using dockerfiles with different OSes
    
    - changed dockerfile in root back to initial state
    - put dockerfiles used for testing into separate directory
    - added dockerfiles for ubuntu, centos, debian, fedora
    Fixed problem with unpacking package for release branch
    
    - in release branch, the top level dir has another name than the zip file
    - rename the unzipped package to be able to know it in subsequent commands
    - disabled test_append_mode_tell_linux_windows under Python 2 and Linux:
      behavior seems to have changed in latest Python and/or Ubuntu version
    Use the current pyfakefs branch in docker file
    
    - still defaults to master if docker is build without arguments
    Dockerfile works with ubuntu:latest
    Rearrange USER so that it owns the files, too.
    
    All tests pass as non-root user.
    Execute the tests in a Docker container [WIP]
    Test using dockerfiles with different OSes
    
    - changed dockerfile in root back to initial state
    - put dockerfiles used for testing into separate directory
    - added dockerfiles for ubuntu, centos, debian, fedora
    Fixed problem with unpacking package for release branch
    
    - in release branch, the top level dir has another name than the zip file
    - rename the unzipped package to be able to know it in subsequent commands
    - disabled test_append_mode_tell_linux_windows under Python 2 and Linux:
      behavior seems to have changed in latest Python and/or Ubuntu version
    Use the current pyfakefs branch in docker file
    
    - still defaults to master if docker is build without arguments
    Dockerfile works with ubuntu:latest
    Rearrange USER so that it owns the files, too.
    
    All tests pass as non-root user.
    Execute the tests in a Docker container [WIP]
    Test using dockerfiles with different OSes
    
    - changed dockerfile in root back to initial state
    - put dockerfiles used for testing into separate directory
    - added dockerfiles for ubuntu, centos, debian, fedora
    Fixed problem with unpacking package for release branch
    
    - in release branch, the top level dir has another name than the zip file
    - rename the unzipped package to be able to know it in subsequent commands
    - disabled test_append_mode_tell_linux_windows under Python 2 and Linux:
      behavior seems to have changed in latest Python and/or Ubuntu version
    Use the current pyfakefs branch in docker file
    
    - still defaults to master if docker is build without arguments
    Dockerfile works with ubuntu:latest
    Rearrange USER so that it owns the files, too.
    
    All tests pass as non-root user.
    Execute the tests in a Docker container [WIP]
    Test using dockerfiles with different OSes
    
    - changed dockerfile in root back to initial state
    - put dockerfiles used for testing into separate directory
    - added dockerfiles for ubuntu, centos, debian, fedora
    Fixed problem with unpacking package for release branch
    
    - in release branch, the top level dir has another name than the zip file
    - rename the unzipped package to be able to know it in subsequent commands
    - disabled test_append_mode_tell_linux_windows under Python 2 and Linux:
      behavior seems to have changed in latest Python and/or Ubuntu version
    Use the current pyfakefs branch in docker file
    
    - still defaults to master if docker is build without arguments
    Dockerfile works with ubuntu:latest
    Rearrange USER so that it owns the files, too.
    
    All tests pass as non-root user.
    Execute the tests in a Docker container [WIP]
