    CI: add missing requirement of xattr python lib
    Remove useless dependency
    Prevent from installing cliff 2.18.0
    
    When we use the interactive mode, the exit code is always 1.
    
    $ openio; echo $?
    (openio) quit
    1
    CI: fix python dependencies
    CI: slightly rework the test suites
    
    - Enable compression on half of the rawx services.
    - Run only the "big" rebuilder test.
    - Enable compresion during the rebuilder tests.
    - Update project version to 6.1
    CI: plug into the 19.10 package repository, fix deps
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    Avoid pyparsing 2.4.1.1
    
    This version is not compatible with 'cmd2'
    Avoid pyparsing 2.4.1.1
    
    This version is not compatible with 'cmd2'
    Avoid pyparsing 2.4.1
    
    This version is not compatible with `cmd2`
    Revert "Rename all-requirements.txt to requirements.txt"
    
    This reverts commit 7355aaa709e1f181c77a94d7d0833d1be6079212.
    Rename all-requirements.txt to requirements.txt
    
    The rename is necessary for command `pip install git+git://...`
    to install dependencies.
    
    A symbolic link has been added to avoid to break tools or CI that
    compile SDS.
    Prevent urllib3 1.25
    
    Some test environments are slower
    Update the python requirements
    Revert "Prevent urllib3 1.24"
    
    This reverts commit 240255a4d9cf7e9c9bcfcd31a14e6be70f28c799.
    
    Requests now supports urllib3 v1.24:
    https://github.com/requests/requests/blob/master/HISTORY.md#2200-2018-10-18
    Prevent urllib3 1.24
    
    Waiting for requests to accept urllib3 1.24: https://github.com/requests/requests/pull/4834
    
    (cherry picked from commit 6894b97710e356d28abbdad36cbb534f1158e5a0)
    Prevent urllib3 1.24
    
    Waiting for requests to accept urllib3 1.24: https://github.com/requests/requests/pull/4834
    sqliterepo/election: Simplify the delay between GETVERS attempts
    
    The mechanism must be reviewed, for sub-second reactivity.
    travis: Apply all python requirements at once
    Temporarily disable new plyvel versions which don't build
    
    The (fairly new, from 2 days ago) plyvel 1.0.0 broke it, so stick with
    the working one until further investigated & fixed...
    
    Error was:
    plyvel/_plyvel.cpp: In function 'int __pyx_f_6plyvel_7_plyvel_parse_options(leveldb::Options*, bool, bool, PyObject*, PyObject*, PyObject*, PyObject*, PyObject*, PyObject*, PyObject*, PyObject*, int, PyObject*, PyObject*)':
    plyvel/_plyvel.cpp:3341:22: error: 'struct leveldb::Options' has no member named 'max_file_size'
    __pyx_v_options->max_file_size = __pyx_t_4;
    
    plyvel 1.0.0 requires leveldb 1.20, and our Travis build installs
    libleveldb1 1.15.0 (and there is no superior version in this
    distribution), thus we are stuck with plyvel<1.0.0.
    
    We should use plyvel>=0.9,<1.0.0 in case someone creates updates over
    the 0.9 version.
    Python API: implement LifecycleConfiguration parsing
    Requirements: add requests
    
    The commit 4e9cb87ad3 has removed requests from all-requirements but
    oio/api/backblaze_http.py still use it. The test_container_backup.py
    also depends on it.
    
    It was unseen during CI as requests is a dependency of codecov.
    Requirements: remove requests
    Update the python requirements (eventlet versions) (#1094)
    
    * Update the python requirements (eventlet versions)
    
    Manages a known problem with python 2.7.13 and eventlet 0.21.0
    
    * Add note about eventlet version requirements
    Update the python requirements (eventlet versions) (#1094)
    
    * Update the python requirements (eventlet versions)
    
    Manages a known problem with python 2.7.13 and eventlet 0.21.0
    
    * Add note about eventlet version requirements
    HttpApi: Remove 'requests' to use 'urllib3'
    Travis: Ensure the version of python-requests
    
    (cherry picked from commit 9ef1c9215df1973cd1295ccd8db5e9d43ffbb03f)
    Travis: Ensure the version of python-requests
    rdir: threads support
    all-requirements.txt: replace cliff version dependencies by choosing only 2.0.X versions
    merge python client api from oiopy into core
    
    integrate CLI
    rdir and account: python-flask no longer required (#603)
    lower version requirement for python-werkzeug
    storage policies: moar review
    
    iod: PUT and GET meta chunks via HTTP
    Add tests of new meta0 utilities
    event-agent: get rid of old useless stuff
    core: move python files around
    set min versions for python deps
    travis: fix python dependencies
    add plyvel requirement
    python: attempt to make Travis pass
    revdir: add basic index service
    python: use pyxattr
    
    What the hell is happening with pyxattr/xattr???
    replace std json python lib with simplejson
    replace pyxattr with xattr
    remove pbr runtime dependency
    fix python dependency with xattr module
    
    Confusion between xattr and pyxattr module.
    add xattr python dependency
    python: now build with setupttools and pbr
    Define oio-sds merge strategy
    Python API: use reqid instead of req_id
    
    Try to be consistent when using abbreviations. We choose reqid over
    req_id since it was more common in the existing code base, especially in
    log messages.
    Define the coding style for C and Python.
    sqlx: allow to disable sqliterepo_max_rss
    
    Current behavior was to compute rss always if unset.
    The only way to disable it was to ran:
    `openio-admin -p sqliterepo_max_rss=0`
    
    With this commit,
    -  0 to disable sqliterepo_max_rss feature
    - -1 to keep current behavior with autodetection
    sqliterepo: Configure the sqlite cache size of a DB
    lb: more weighed random, less shuffled selection
    
    Allow to configure how many times we shall try to select a service using
    a weighted random algorithm, before switching to the shuffled selection.
    Increase core.lb.weighted_random_attempts (defaults to 1) if you observe
    too many choices of low-score services while high-score services are
    available.
    server: get server-side performance data
    
    Save some performance data in the thread local data. This is disabled by
    default, can be enabled for each service (even when the service is running)
    or per request.
    Performance data is printed at the end of access log messages.
    sqliterepo: reset elections stuck in CREATING step
    
    This helps recovering after a ZooKeeper failure. The delay of 12s can be
    changed with sqliterepo.election.delay.expire_pending, and should be set
    between sqliterepo.zk.timeout and sqliterepo.election.wait.delay.
    conf: remove unused proxy.srv_local.prefer parameter
    conf: Declare a variable to control the lazy locking
    Increase max request run time for sqliterepo-based services
    
    The default value was too low and reduced some timeouts
    conf: Declare a variable to allow rawx to serve from /
    Allow to place some chunks locally to the proxy
    conf: Disable the default existence check during M2_PREP
    conf: Longer cache delay for MASTER hints
    conf: Turn 'on' the default of "proxy.prefer.slave_for_read"
    conf: Regen the documentation
    sqliterepo: remove the unused "ping_final" parameter
    Variables: Fix invalid description
    proxy: Prefer local services
    
    1/ Give a location to any proxy on the host (central variable)
    2/ Mangle the scores of RAWX to give precedence to services that are
       closer
    3/ Allow to enable/disable that behavior.
    conf: Fix a misleading comment
    conf: Update the documentation
    conf: Remove an unused variables
    
    We removed 1 pool of threads, its configuration is not necessary anymore.
    conf: Regen the doc
    core/lb: allow disabling distance check optimization
    
    Introduce core.lb.allow_distance_bypass variable that disables some load
    balancing optimizations that may lead to unbalanced situations. Also add
    new tests.
    core+conf: Uniform configuration format
    C client: Avoid odd config from the app.
    Remove mentions of the "user_is_a_service" tag.
    meta*: Make the tubes configurables with central variables
    sqliterepo: Make configurable the DB dump concurrency
    
    Timeout, number of dumps
    sqliterepo: directly dump database file, do not load more than 1GiB
    
    Before this commit, a local copy of the database file was created, and
    the data was sent to the network from the copy. Now, the data is read
    directly from the database file.
    
    This commit also sets a maximum on the size of database dumps, in order
    to avoid memory exhaustions. This maximum is 1GiB by default, but can be
    set to 0 to completely disable the DB_RESTORE mechanism, or set up to
    2047MiB, with the parameter "sqliterepo.dump.max_size".
    sqliterepo: increase DB_PIPEFROM maximum timeout
    
    And allow to configure DB_DUMP chunk size.
    
    (cherry picked from commit cdcde7cec441a4e386825a62d68188afdcbfb43a)
    sqliterepo: increase DB_PIPEFROM maximum timeout
    
    And allow to configure DB_DUMP chunk size.
    enbug/doc: Regenerate the docs
    server,sqliterepo: improve error messages
    
    Also display which configuration variable sets the threshold that
    triggered the warning or error message.
    conf: Regen the documentation
    conf: fix badly documented default value
    core,m1,m2: check container name is valid UTF-8
    
    Jira: OS-100
    Change default option value to true
    Create option to force a service to deny the role of MASTER in any election
    core/lb: warn if writer lock is held for too long
    Change oio version from 4.0 to 4.2
    conf: regenerate Variables.md
    conf: Add and explain libcurl config variables
    meta2: Limit the number of deleted object when flushing
    conf: Update the documentation
    conf: Set the election lock alert threshold to 200µs
    sqliterepo/election: Debug long locks
    
    Also remove old logs around the calls to the ZK client
    conf: Reduce the alert timeouts
    sqliterepo/election: Avoid looping on GETVERS
    sqliterepo/election: Simplify the delay between GETVERS attempts
    
    The mechanism must be reviewed, for sub-second reactivity.
    sqliterepo/election: Introduce deferred GETVERS reloads
    
    After failures in CHECKING_{SLAVES,MASTER}
    rdir: Allow configuring the max fd per DB
    events: Make configurable the buffering delay
    
    Only considered at the startup of the service.
    proxy: Mangle the DB name for /admin/* type=meta1
    
    Also centralizes the meta1_digits variable
    sqliterepo: Refine the conditions to autocreate a missing DB
    
    Also make configurable the auto-recovery of missing DB
    server: fix and document the automatic FD limits
    conf: Update the autogen docs
    Update the documentation
    Add rawx configurations variables
    C API: allow configuration of rawx timeouts
    
    Allow configuration of connection and overall request timeouts to rawx
    services, from sds.conf configuration file.
    Regenerate documentation
    meta*: Periodically check the beanstalkd
    
    Fixes #1194
    Regenerate the docs about managed variables
    conf: Regen the github documentation
    sqliterepo: autoconfigure "hard" maximum of open files
    conf: Regenerate the docs
    Regenerate configuration documentation.
    conf: Regenerate the documentation
    conf: Regenerate the docs
    core: Make the User-Agent configurable
    
    And disable it by default. This will save tens of bytes per request
    (proxy or rawx).
    conf: Regenerate the documentation
    conf: Regenerate the doc (cmake, github)
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    proxy,conf: fix the limits for the TTL in the caches of the proxy
    conf: Regenerate the documentation
    server: Rename misnamed symbols
    server: Transform 2 magic numbers into managed configuration variables
    conf: Rename a key, regen the doc
    
    Comply to @fvennetier's opinion
    server: Avoid reserved threads for the stats management
    conf: Third batch of variables
    
    udp_allowed, log_outgoing, rawx_events
    conf: Add the ability to set/get the variables of a running service
    
    Currently covers oio-proxy, oio-{sqlx,meta{0,1,2}}-server.
    
    The proxy is queried with the route `/v3.0/config` (GET and POST).
    
    The services are queried through the proxy with the route `/v3.0/forward/config?id=SRVID`.
    BUILD.md: Add a little explanation about the code generation
    config: Manage a second batch of variables
    Adapt the code to the central config
    cache/: Remove because unused
    Bump project version to 5.5
    Bump project version to 4.10
    cmake: Fix the version detection
    Update project version to 7.0
    Bump project version to 5.3
    CI: slightly rework the test suites
    
    - Enable compression on half of the rawx services.
    - Run only the "big" rebuilder test.
    - Enable compresion during the rebuilder tests.
    - Update project version to 6.1
    Bump project version to 4.8
    Bump project version to 6.0
    oio/cfg: Avoid loading local files if any system file has been loaded
    
    Differs from the behavior of liboiocore but good enough for pythonic
    services.
    cmake: Fix the version
    Bump project version to 4.7.0
    Build & Use static libraries
    Depend on the mainstream asn1c (#1834)
    
    * Depend on the mainstream asn1c instead of our modified version
    * cmake: Detect the version of gridinit: the option "-fwide-types" is not present in the 0.9.24 version that is still widely used, especially in Ubuntu Xenial Xerus.
    * ci: Add submodules for dependencies that are not managed by main linux distributions
    * ci: Avoid syncing unnecessary git submodules
    * metautils: Insulate the code with shared copyright
    Get rid of the httpd-based rawx (#1833)
    
    * rawx: Get rid of the implementation based on httpd
    * Remove the unused rawx-lib
    * oio-bootstrap: Adapt the RAWX configuration (only the useful fields remain)
    * ci: Adapt to the only rawx remaining
    Bump project version to 4.6.0
    proxy: enable/disable TCP_CORK when appropriate
    
    We enable TCP_CORK when we know we will soon send another batch of data.
    This prevents sending a small packet, then another one, in cases where
    all data would fit in one bigger packet. We must though disable TCP_CORK
    immediatly after to tell the kernel we are finished (or it will keep
    waiting a few milliseconds for extra data).
    Remove obsolete legacy tools | BREAKING CHANGE (#1759)
    
    BREAKING CHANGE:
    * tools: Stop installating oio-gdb.py
    * bootstrap: Clean useless config variables
    * tools: Remove the unused oio-unlock-all.sh
    * cluster: Get rid of oio-cluster
    Bump project version to 5.0
    cmake: include CheckTypeSize
    sqliterepo: Throttle the memory consumption
    cmake: Explicit the ABI version of each shared library
    cmake,ci: Restore the SDK_ONLY option
    cmake: Update the short version string
    cmake: Update the short version string
    coverage: Use absolute paths for output files of lcov
    
    https://github.com/linux-test-project/lcov/commit/632c25a0d1f5e4d2f4fd5b28ce7c8b86d388c91f
    Update pkg-config version to 4.3
    Adapt to recent libattr
    
    libattr 2.4.48 removed attr/xattr.h, which contained roughly the same
    things as sys/xattr.h.
    
    (cherry picked from commit 72763bb89dd71b9dc47aa0964b939eba0bbcfa2a)
    Adapt to recent libattr
    
    libattr 2.4.48 removed attr/xattr.h, which contained roughly the same
    things as sys/xattr.h.
    rawx: Fix build process elements
    
    Detect the presence of Go and install the binary well
    rawx: Draft a pure Go rawx
    cmake: Remove the FORBID_SLICES options
    
    Slab allocations are encouraged.
    Update project version in pkg-config file
    Add oio-conscience-server to replace gridd+msg_conscience
    
    * Drop gridd (a.k.a. oio-daemon)
    * Rewrite cluster/module/module.c as a standalone service
    * Adapt oio-bootstrap.py to generate env based on the new conscience
    * Merge the conscience lib in the server
    * Move the expression parsing from metautils to cluster
    * Fix compilation warnings about deprecated symbols
    cmake: Fix the detection of leveldb
    tools: Get rid of the useless configurable prefix
    Update project version
    oio-event-benchmark: Change logs to display instantaneous speeds
    oio-event-benchmark: Format code
    oio-event-benchmark: Create event_benchmark with send_events and fake_service
    cmake: Minor reorgansation
    rawx-lib: Trim the support of LZO and ACL
    
    We tend to be use the plain ZLib format.
    travis: Speed the tests up
    coverage: Avoid files generated by asn1c
    
    These files contain a lot of unused code.
    CMake: add CODECOV_PATTERN_TO_IGNORE
    
    Add variable CODECOV_PATTERN_TO_IGNORE to remove some
    autogenerated libs from coverage.
    
    For example:
    set(CODECOV_PATTERN_TO_IGNORE ${CMAKE_BINARY_DIR}/core/client_variables.c '${CMAKE_BINARY_DIR}/metautils/lib/*.c')
    Add Python coverage
    Enable coverage with console output for Travis
    Add coverage target
    
    To use it:
    
    $ cmake -DENABLE_CODECOVERAGE=TRUE ../oio-sds
    $ make
    $ make coverage_init
    $ make test
    $ make coverage
    
    Result will be available in coverage_results directory
    
    Heavily inspired from https://cmake.org/pipermail/cmake/2010-March/036063.html
    rdir: reboot in C
    
    Uses the same base than the oio-proxy for the network and http parts.
    Add support for a central configuration
    
    Components:
    * a config registrar in core/oiovar.h and core/var.c
    * a code generator, confgen.py, used by cmake to generate the variable
      descriptions, the github markdown files and the CMake support
    metautils: Embed asn1c for no runtime dependency
    
    With this evolution we are free to alter asn1c macros and be sure the
    runtime version will be the same that the compile time version.
    Python API: code reorganization and documentation
    Fix missing braces in static allocations
    sqliterepo/election: 3 tries of GETVERS on network errors
    sqliterepo: reviews the FSM transition from FAILED
    
    * Now only expires when in NONE
    * Adds assertions when entering to CREATING
    * `FAILED -> NONE` when no restart requested
    * `FAILED -> CREATING` when restart requested
    sqliterepo/election: cleaner trasitions the FSM
    
    The goal of the commit is to prevent entering a state with several
    pending callbacks that can trouble the transitions and cause messages
    storms.
    
    Only the completion events make the FSM (finite state machine) step
    forward. All the "interruptions" events are delayed until the normal
    actions are all done.
    
    Summary of the changes:
    
    * general renaming of the states to more intuitive names that denote the
      action that is pending. LEADER -> MASTER, LOST -> SLAVE.
    * new states added, so that at most one action is pending in each state.
      specially PRELOST that becomes [ASKING,CHECKING_MASTER] and CANDOK
      that becomes [WATCHING,LISTING].
    * new state added to leave-and-then-fail, instead of leaving then
      retrying.
    * Tests, tests, test. Despite the FSM is not 100% covered yet, the major
      transitions are now checked.
    * Timers simplified: since we wait for actionns before leaving an FSM
      state,.the necessity to retry an election is vastly simplified and
      only occurs from the NONE state.
    * A jitter has been introduced before sending a ping (USE) from a final
      state.
    
    Despite the result should be more stable, robust and resilient, this is
    a big set of changes and one shoould take care of possible unexpected
    effects. Especially of elections that could go more often than necessary
    in the FAILED state, and then undergo a 5s timer before the retry.
    (Prior to this commit, we would have loop-retry more often than
    necessary.)
    sqliterepo: allow overriding election delays
    core: add OIO_USE_OLD_FMEMOPEN to choose fmemopen implementation
    
    Add -DOIO_USE_OLD_FMEMOPEN=1 on cmake commandline to use old fmemopen
    implementation. This will workaround a bug with glibc >= 2.22, but
    unfortunately won't compile with stripped glibc.
    cmake: adds the ENBUG option for intentional enbugging
    Bump OIOSDS_PROJECT_VERSION_SHORT to 3.0
    events / beanstalkd: now checked with unit tests
    oio/events : verify content received from beanstalkd
    tests : adding some tests to verify beanstalkd requests
    cache: memcached and hiredis not built by default (#648)
    core: introduces new macro to check the API/ABI version
    
    We plan to introduce fields in some structures. We need such a simple
    way to let the application programmer check its installation is correct
    and check the version it used at compile time was the same the version
    currently known by the library.
    lb: review for more efficiency
    Farewell to the rainx!
    
    + rawx simplification
    EC through gateway + rebase on master (#594)
    
    * fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    
    * event-agent: use basic http for account client
    
    * oio-bootstrap.py: fixed default schema for mail applications
    
    * metautils/lb: uses the local PRNG, uniform distribution (#582)
    
    Uses the local PRNG instead of the libc's rand(), with its guarantee on
    the uniform distribution over a given range.
    
    This should lead to better random and should fix the apparent preference
    for the first item.
    
    * Do not generate extra debug and asserts when building in RelWithDebInfo
    
    * core: implement upload and download through http gateway
    Do not generate extra debug and asserts when building in RelWithDebInfo
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    proxy: prefer MASTER for writing, SLAVE for reading
    beanstalkd: configurable TUBE (#574)
    events: fixes the default beanstalk configuration
    
    Now the config for C clients conforms to what it was for the Python
    tools.
    events: insulates module, adds beanstalkd implementation
    server: new macros for internal limits + limits reviewed
    
    * Macros moved in core/oiocfg.h
    * More events raised by epoll_wait: 16 -> 128
    * Limits to 64 the number of accept() on each round: avoids starving on
      established connections, and prefer finishing established connections
      before accepting others.
    * Removes the limits on the number of idle workers (5 -> -1). Just let
      the expiration timeout of 30s do the job.
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    core: allows to disable slice allocaitons
    Removes svc-monitor
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    proxy: container/destroy plainly destroys the containers and their references
    
    * a container destruction is now: 1/freeze 2/flush 3/unlink 4/destroy(local)
    * meta2 slighty simplified around PURGE/DEDUP/FLUSH, where the dry_run options have disappeared.
    Doc effort.
    sqlx: now able to prepare "turnkey" sqlite DB, pre-schemed.
    
    * option added to oio-sqlx-server to mention a directory full of schemas.
      the filename is the schema name, and its content the set of SQL statements to create a DB.
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    server: fixed timeouts and warnings around idle connections
    sqlx: sqlxclient rename to oiosqlx
    oio-sds/pc now built, relase and version now configurable.
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    CMake: reviewed API version
    cache + cmake: completed output for detected modules
    
    Now prints if HIREDIS and LIBMEMCACHED have been found.
    cmake: fix libcurl not being detected properly
    obsolete code and macros removed
    cache: dedicated lib to the caching features, with various implementations.
    cmake: no need to detect the gcc version, at present
    cmake: now requires a gcc >= 4.6
    conscience: renaming + pruning + reorg
    
    * conscience/agent remote functions have been renamed for more clarity
    * MACRO tags have been removed (usage too scarce and immutable, no need of something so flexible)
    * CPU/IO/SPACE computation moved from the oio-cluster-agent to libgridcluster
    * oio-cluster-agent is now now mandatory
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    1st cleanup : client, rawx-client, gridd/client
    
    * client/c/lib has been replaced by core/sds (pure http/json client)
    * rawx-client was not used
    * gridd/client has been replaced by tools/oio-tool
    * some metautils have been gathered in a single tool: oio-tool
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    snmp: module insulated. Now independant on github.com
    Replaced some deprecated symbols from GLib (g_memmove, G_MUTEX_INIT)
    cmake: fixed useless double check on a directive
    Various fixes and improvements
    
    * metautils: now uses slice allocation
    * server: now uses slice allocation
    * sdk: ReqId, fixed missing headers
    cmake: fixed options
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    python: now build with setupttools and pbr
    cmake: python module installed even for a client installation.
    cmake: removed unused configuration directive
    cmake: new directive SDK_ONLY to build only the modules involved in the client SDK.
    
    This avoids build the whole backend, and a lot of thrid-party dependencies.
    sdk: new feature to collect all the compile-time configuration variables.
    
    * Compile-time options gathered in metautils
    * SDK extended with a new function
    * new sds/oio_config tool to dump the config.
    * unused CMake directives and/or macros pruned.
    sdk: new feature to collect all the compile-time configuration variables.
    
    * Compile-time options gathered in metautils
    * SDK extended with a new function
    * new sds/oio_config tool to dump the config.
    Fixed forgotten requirement on libevent.
    Removed obsolete modules. They'll be back !
    
    Bye bye the integrity loop, and its bunch of crawlers, checks and mover.
    sdk: the SDK now make use of the proxy.
    
    Soon, that SDK will be a replacement for the old-style C API in ./client.
    Yet the download and the delete operations are performed without any intervention of the client.
    Still the upload has to be reimplemented.
    C SDK rebooted.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    CMake : better default directory for zookeeper.
    
    Conforming to Fedora's convention (zookeeper-lib-devel).
    Binaries now prefixed by "oio" by default.
    SSL replaced by GLib equivalent.
    Get rid of log4c emulation and some old (and unused) pieces of code.
    Get rid of the crawler.
    
    Also pruned all the code only used by the crawler.
    event-agent config key fixed + trigger to disable zookeeper in oio-reset
    event-agent config key fixed + trigger to disable zookeeper in oio-reset
    m2v2: fixed double-free condition around set_properties on a content.
    
    Fixed Conflicts:
            CMakeLists.txt
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    cmake : does not require perl
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    m2v2: container's ctime now set at container's creation.
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    Got rid of oldish metacd.
    Content propeties reviewed + Cleanup, round 2
    New macros now configurable with CMake directives.
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    Finer gauges for active threads, reliable accesslog delays
    
    This patch provides the maximum number of active threads, and a round-robin storage for that information.
    The granularity proposed is intervals of 1s over the past 30s, and intervals of 1 minute over the past 1 hour.
    This data is used by the core server library to expose statistics, e.g.
    
            server.thread.max.1 = 0
            server.thread.max.5 = 1
            server.thread.max.15 = 2
            server.thread.max.30 = 2
            server.thread.max.60 = 3
            server.thread.max.300 = 3
            server.thread.max.900 = 3
            server.thread.max.3600 = 3
    
    This patch also alters the accesslog format for gridd transports, and it is now unified with http transport.
    An access log record now provides 2 treatment durations:
    - the total time spent since the reception of the last buffer that completes the request
    - the total treatment time, from the moment where a worker thread starts the request handling til the moment an answer is generated.
    The delta between both delays is the time spent in the internals queues of the process.
    
    The patch divides in:
    - server/stats_holder.* :
      - drops the adherence to system time, the current timestamp is now received from the caller. This is necessary to manager counter with a granularity different than 1s.
      - New calls to compute the cumulative maximum
      - code simplification
    - server/network_server.* :
      - new round-robin stats now managed
      - new stats exposed.
      - precise monotonic clock used on the last input
    - server/transport_http.c :
      - useless variables removed.
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - server/transport_gridd.c :
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - sqlx/sqlx_service.c :
      - code adapted to match the lost "time adherence"
    
    Change-Id: I248ae7a1937860e4062290e95b68465d7ec62821
    "Custom vs Standard" paths reviewed.
    
    json-c and rdkafka management now better taken into account.
    This allows compiling on a ubuntu server as weel as on a centos distribution.
    
    Change-Id: I1c8adf8ab213c2a7d4927fbbe1e031dc782792ea
    m2v2: send PUT and DELETE events to Kafka
    
    Requires librdkafka (https://github.com/edenhill/librdkafka)
    
    (cherry picked from commit 0335953e049f470800449b4709d5e58f5cbb8abf)
    
    Change-Id: Iaff434c63828cee8bfe8044c0332a76861e54829
    Fixed macros for API version.
    c client: use libcurl instead of threads + rain bugfix
    Now manage json-c + pkgconfig on Centos & Ubuntu
    apache2-http include dir fixed
    
    Worked only on Centos where the header are in $prefix/include/httpd.
    Now also works on Unbuntu where the headers are un $prefix/include/apache2.
    1.8.4 release candidate
    Initial commit
    Give a hint about where to find oio-reset.sh
    Enable codecov
    
    This patch enable use of codecov.io with:
    - C coverage
    - Python coverage
    - Badge integration
    Add build status to README.rst
    doc: fixed dead link
    Doc effort.
    sqlx: now able to prepare "turnkey" sqlite DB, pre-schemed.
    
    * option added to oio-sqlx-server to mention a directory full of schemas.
      the filename is the schema name, and its content the set of SQL statements to create a DB.
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    server: fixed timeouts and warnings around idle connections
    oio-sds/pc now built, relase and version now configurable.
    add plyvel requirement
    obsolete code and macros removed
    python: use pyxattr
    
    What the hell is happening with pyxattr/xattr???
    replace std json python lib with simplejson
    update README.md for python deps
    1st cleanup : client, rawx-client, gridd/client
    
    * client/c/lib has been replaced by core/sds (pure http/json client)
    * rawx-client was not used
    * gridd/client has been replaced by tools/oio-tool
    * some metautils have been gathered in a single tool: oio-tool
    snmp: module insulated. Now independant on github.com
    fix python dependency with xattr module
    
    Confusion between xattr and pyxattr module.
    Documented missing dependency.
    Various fixes and improvements
    
    * metautils: now uses slice allocation
    * server: now uses slice allocation
    * sdk: ReqId, fixed missing headers
    cmake: fixed options
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    README updated for python build
    cmake: removed unused configuration directive
    cmake: updated dependencies.
    cmake: new directive SDK_ONLY to build only the modules involved in the client SDK.
    
    This avoids build the whole backend, and a lot of thrid-party dependencies.
    proxy: fixes and improvements
    
    * Duplicated '/' not agregated in URI (path not purified).
    * URI-encoding now managed
    * errors upon actions slightly clearer.
    sdk: new feature to collect all the compile-time configuration variables.
    
    * Compile-time options gathered in metautils
    * SDK extended with a new function
    * new sds/oio_config tool to dump the config.
    * unused CMake directives and/or macros pruned.
    sdk: new feature to collect all the compile-time configuration variables.
    
    * Compile-time options gathered in metautils
    * SDK extended with a new function
    * new sds/oio_config tool to dump the config.
    Removed obsolete modules. They'll be back !
    
    Bye bye the integrity loop, and its bunch of crawlers, checks and mover.
    Fixed dependency list.
    sdk: the SDK now make use of the proxy.
    
    Soon, that SDK will be a replacement for the old-style C API in ./client.
    Yet the download and the delete operations are performed without any intervention of the client.
    Still the upload has to be reimplemented.
    README.md : dependencies documented.
    Update README.md
    README.md : fixed doc about the dependency to asn1c
    README.md : dependencies explained.
    SSL replaced by GLib equivalent.
    Get rid of log4c emulation and some old (and unused) pieces of code.
    Get rid of the crawler.
    
    Also pruned all the code only used by the crawler.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    m2v2: container's ctime now set at container's creation.
    Content propeties reviewed + Cleanup, round 2
    New macros now configurable with CMake directives.
    proxy: prepares the transmission of the reqid from incoming to outgoing requests.
    fix minor typos in README
    OpenIO is lifting off now !
    Update README.md
    1.8.4 release candidate
    Initial commit
    Solve every unit test for python3
    CI: use nosetests' "flaky" module to rerun flaky tests
    CI: make nose display test durations
    tools: add tool to dump buried events
    
    Be advised that actual version also delete jobs.
    Enable codecov
    
    This patch enable use of codecov.io with:
    - C coverage
    - Python coverage
    - Badge integration
    Enable coverage with console output for Travis
    merge python client api from oiopy into core
    
    integrate CLI
    core: move python files around
    Require swagger nose html output
    refactor functional tests config loading
    python: new tox automation tool
    Add LICENSE files.
    
    Please, pay attention : at present, the code carries 2 licenses. LPGL3 for client-related files, AGPL3 for all the other code files.
    Define the coding style for C and Python.
    sqlx: allow to disable sqliterepo_max_rss
    
    Current behavior was to compute rss always if unset.
    The only way to disable it was to ran:
    `openio-admin -p sqliterepo_max_rss=0`
    
    With this commit,
    -  0 to disable sqliterepo_max_rss feature
    - -1 to keep current behavior with autodetection
    sqliterepo: Configure the sqlite cache size of a DB
    lb: more weighed random, less shuffled selection
    
    Allow to configure how many times we shall try to select a service using
    a weighted random algorithm, before switching to the shuffled selection.
    Increase core.lb.weighted_random_attempts (defaults to 1) if you observe
    too many choices of low-score services while high-score services are
    available.
    server: get server-side performance data
    
    Save some performance data in the thread local data. This is disabled by
    default, can be enabled for each service (even when the service is running)
    or per request.
    Performance data is printed at the end of access log messages.
    sqliterepo: reset elections stuck in CREATING step
    
    This helps recovering after a ZooKeeper failure. The delay of 12s can be
    changed with sqliterepo.election.delay.expire_pending, and should be set
    between sqliterepo.zk.timeout and sqliterepo.election.wait.delay.
    conf: remove unused proxy.srv_local.prefer parameter
    conf: Declare a variable to control the lazy locking
    Increase max request run time for sqliterepo-based services
    
    The default value was too low and reduced some timeouts
    conf: Declare a variable to allow rawx to serve from /
    Allow to place some chunks locally to the proxy
    conf: Disable the default existence check during M2_PREP
    conf: Longer cache delay for MASTER hints
    conf: Turn 'on' the default of "proxy.prefer.slave_for_read"
    core,meta2: Centralize NS config in core
    sqliterepo: remove the unused "ping_final" parameter
    proxy: Prefer local services
    
    1/ Give a location to any proxy on the host (central variable)
    2/ Mangle the scores of RAWX to give precedence to services that are
       closer
    3/ Allow to enable/disable that behavior.
    conf: Fix a misleading comment
    conf: Add a variable as a RSS max for sqliterepo-based processes
    conf: Remove an unused variables
    
    We removed 1 pool of threads, its configuration is not necessary anymore.
    Simplify the management of metrics
    
    We don't need a complicated solution with a background thread. We here
    reduce the number of allocations, the number of locks, the number of
    threads. We expect less CPU (user & sys) to be used.
    sqliterepo/election: Set the retry-on-FAIL at 250ms
    
    ... instead of 2s
    
    The previous precision was at 1s with a huge bias.
    Now we can honor timers with a precision in milliseconds.
    core/lb: allow disabling distance check optimization
    
    Introduce core.lb.allow_distance_bypass variable that disables some load
    balancing optimizations that may lead to unbalanced situations. Also add
    new tests.
    core+conf: Uniform configuration format
    C client: Avoid odd config from the app.
    Remove mentions of the "user_is_a_service" tag.
    meta*: Make the tubes configurables with central variables
    sqliterepo: Make configurable the DB dump concurrency
    
    Timeout, number of dumps
    sqliterepo: directly dump database file, do not load more than 1GiB
    
    Before this commit, a local copy of the database file was created, and
    the data was sent to the network from the copy. Now, the data is read
    directly from the database file.
    
    This commit also sets a maximum on the size of database dumps, in order
    to avoid memory exhaustions. This maximum is 1GiB by default, but can be
    set to 0 to completely disable the DB_RESTORE mechanism, or set up to
    2047MiB, with the parameter "sqliterepo.dump.max_size".
    sqliterepo: increase DB_PIPEFROM maximum timeout
    
    And allow to configure DB_DUMP chunk size.
    
    (cherry picked from commit cdcde7cec441a4e386825a62d68188afdcbfb43a)
    sqliterepo: increase DB_PIPEFROM maximum timeout
    
    And allow to configure DB_DUMP chunk size.
    enbug/election: Simulate a double-master condition
    
    e.g. declare what follows in your etc/sds.conf file (please note there
    is no quote around the value):
    
    enbug.election.double_master.db=9006CE70B59E5777D6BB410C57944812EB05FCDB5BA85D520A14B3051D1D094F.1
    
    ... and you will trigger a double master on the container 1 for the
    service type "meta2" of the reference "JFS".
    enbug/conf: More configurable behaviors
    
    Without this, it becomes really hard to test a single error case since
    all the variables had a non-null default value.
    server,sqliterepo: improve error messages
    
    Also display which configuration variable sets the threshold that
    triggered the warning or error message.
    conf: Turn of the cache of the resolver by default
    
    Doing this by configuration instead of enforcing by code helps
    reapplying a cache when performance is required, and the tradeoff over
    certainity is accepted.
    conf: fix badly documented default value
    core,m1,m2: check container name is valid UTF-8
    
    Jira: OS-100
    Change default option value to true
    Create option to force a service to deny the role of MASTER in any election
    core/lb: warn if writer lock is held for too long
    Change oio version from 4.0 to 4.2
    conf: regenerate Variables.md
    Make optional EC metachunk size patch
    conf: Add and explain libcurl config variables
    meta2: Limit the number of deleted object when flushing
    conf: Update the documentation
    sqliterepo/synchro: Make configurable the deferral of DB_USE
    core/http: Make configurable the {SND,RCV]BUF toward the proxy
    metautils/gridd: Make configurable the {SND,RCV]BUF toward gridd
    conf: Set the election lock alert threshold to 200µs
    sqliterepo/election: Debug long locks
    
    Also remove old logs around the calls to the ZK client
    sqliterepo: Get rid of periodic DB_USE
    
    Also simplifies the management of timers
    conf: Reduce the alert timeouts
    sqliterepo/election: Avoid looping on GETVERS
    sqliterepo/election: Simplify the delay between GETVERS attempts
    
    The mechanism must be reviewed, for sub-second reactivity.
    conf: Declare the delay between GETVERS attempts
    
    As the upper bound of the exponential backoff.
    
    (cherry picked from commit c159f3aeceba542234c53758faf74d7f9549c532)
    rdir: Allow configuring the max fd per DB
    events: Make configurable the buffering delay
    
    Only considered at the startup of the service.
    proxy: Mangle the DB name for /admin/* type=meta1
    
    Also centralizes the meta1_digits variable
    sqliterepo: Refine the conditions to autocreate a missing DB
    
    Also make configurable the auto-recovery of missing DB
    server: fix and document the automatic FD limits
    conf: Turn down the default periodic decache behavior.
    Purge with a fixed number of versions
    conf: Enlarge the default period/threshold to avoid erroneous srv
    conf: Enable by default the cache of down hosts
    conf: Explicit a default max active getvers of 512
    
    512 getvers means 256 concurrent active elections / service in a 3 copy
    environment.
    conf: Explicit large values for resolver caches
    conf: Enlarge the buffer of events before a meta* is stalled
    conf: Enlarge the max number of passive FD in a server
    conf: enlarge the default timeout for RPC CNX
    conf: Elarge the default timeouts for outgoing proxy RPC
    conf: Enlarge the timeouts before long RPC alert/abort
    conf: Allow a shorter UDP queue
    
    UDP message are hints dedicated to speedup elections establishments.
    We should not get clogged with them.
    conf: Enlarge the period before election expiration
    
    For larger caches that don't purge themselves on low activity
    conf: Lessen the ping frequency for established elections
    conf: Enlarge the timeouts for finished elections
    conf: Enlarge the cnx/req timeouts for sync requests
    conf: Turn UDP on by default
    C API: allow configuration of rawx timeouts
    
    Allow configuration of connection and overall request timeouts to rawx
    services, from sds.conf configuration file.
    meta2: Delete exceeding versions when adding a new alias
    conf: Expose 2 variable to control the mgmt of peers down
    Set a longer+configurablle timeout for beanstalkd requests
    conf: Slightly increase the TTL for cached open DB
    
    From 0 (immediately decached) to 1ms (nearly immediately decached).
    Disable the beanstalkd presence check (by default)
    meta*: Periodically check the beanstalkd
    
    Fixes #1194
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    Make the default timeout/dl configurable in the proxy
    Make the gridd server adapter transmit the deadline
    
    An optional field is looked for in the messages. It contains a timeout
    (in microseconds) used to compute a new deadline that is set in a
    thread-local variable.
    sqliterepo: Change active clients limit according to timeout
    conf: Declare the delay between GETVERS attempts
    
    As the upper bound of the exponential backoff.
    conf: Declare aliases for legacy proxy variables
    
    It eases the transition from pre-4.0 releases.
    Fixes #1227
    Fixes #1226
    sqliterepo: autoconfigure "hard" maximum of open files
    conf: Fix duplicated key
    
    Thanks, @fvennetier
    conf: Fix typos
    
    Thanks, @vincent-legoll
    sqlx,meta*: Split the main background task of re-kicking elections
    
    Several tasks with each one:
    * its lock on the election set
    * its trigger period
    * its threashold delay to warn for a long lock
    
    -> Now we should know when the lock is held for too long, and also
    split the critical section to remain fair with the other threads.
    Regenerate configuration documentation.
    resolver,proxy: Centralise to variable to on/off the whole cache
    
    A live managed variable instead a fixed field in a structure.
    conf: Enlarge the default TTL/MAX entries in the resolver
    proxy: Expose the route /forward/info
    conf: Declare variables to control the periodic expiration of bases
    conf: Declare a variable for the default timeout toward meta1
    Fix typo, improve CLI documentation
    Proxy: Manage error 503
    conf: Prepend a License preamble in the generated files
    sqliterepo,conf: Default nowait_delay value set to 15 minutes
    
    Instead of 15 seconds, this is the maximum delay after which an election
    is considered as "pendiing for too long". Only effective when the check
    is enabled!
    sqliterepo: Inhibit the test on stalled election
    
    Can be triggered back using 'sqliterepo.election.nowait.enable'
    (managed configuration), fallse by default until we discover where the
    transient timer (`when_unstable` is not reset as expected).
    conf: Set the default chunk_size to 10MiB
    
    Only effective when no value is configured in the namespace.
    Rawx: Add xattr oio_version and full_path
    
    Modify the client to send the header X-oio-chunk-meta-full-path:Acct/Container/Name
    Convert the header to the xattr oio.user:Acct/Container/Name=""
    conf: Introduce sqliterepo_zk_mux_factor
    
    New variable dedicated to fake a pool of multiple ZK with a single ZK
    URL.
    sqliterepo/sync: shuffle the set of ZK endpoints
    
    Also rename the key of the variable for the timeout of the ZK client
    sessions.
    core: Make the User-Agent configurable
    
    And disable it by default. This will save tens of bytes per request
    (proxy or rawx).
    conf: Avoid prefixing the variable keys with 'oio.'
    tests/func/api: Get the real chunksize from the NS
    
    ... instead of a magic number
    conf: Fix default values to match the previous usage
    cluster: Remove the useless "chunk_size" field from the nsinfo
    
    Also remove it from the ASN.1 structure.
    Everything has been migrated to the central configuration facility.
    cluster,conf: Move to the CCF the stgpol and svcupdate_policy
    
    ... CCF for Central Config Facility
    meta2,conf: Move the default chunk size on the CCF
    
    .. CCF for Central Configuration Facility
    meta2,cluster: Move 2 variables to the central config facility
    
    In addition, insulates the variables dedicated to meta2 in the
    libmeta2backend, so that only the meta2 services see them.
    rawx: Remove the config of the compression from the nsinfo
    
    Move it to the rawx's configuration.
    meta2,conf: Move 2 nsinfo options to the central config facility
    
    oio_ns_mode_worm, meta2_container_max_size
    meta2,conf: Move 2 nsinfo options to the central config facility
    
    meta2_retention_period, meta2_max_versions
    rdir: Fix the detection of max passive connections
    metautils,conf: Expose the variable of the delay before the verbosity reset
    conf: Move the FD limits in the central config
    conf,proxy: Remove 4 redundant variables
    conf: Rename 2 server-wide variables
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    conf: Insulate the variables of the proxy ... in the proxy
    proxy,conf: fix the limits for the TTL in the caches of the proxy
    conf: Fix the name of a variable
    config: Adjust values, Declare variables
    server: Transform 2 magic numbers into managed configuration variables
    conf: Rename a key, regen the doc
    
    Comply to @fvennetier's opinion
    server: Avoid reserved threads for the stats management
    conf: Third batch of variables
    
    udp_allowed, log_outgoing, rawx_events
    conf: Add the ability to set/get the variables of a running service
    
    Currently covers oio-proxy, oio-{sqlx,meta{0,1,2}}-server.
    
    The proxy is queried with the route `/v3.0/config` (GET and POST).
    
    The services are queried through the proxy with the route `/v3.0/forward/config?id=SRVID`.
    config: Manage a second batch of variables
    Adapt the code to the central config
    Add support for a central configuration
    
    Components:
    * a config registrar in core/oiovar.h and core/var.c
    * a code generator, confgen.py, used by cmake to generate the variable
      descriptions, the github markdown files and the CMake support
    Remove useless dependency
    BUILD.md: Add a little explanation about the code generation
    config: Manage a second batch of variables
    Add support for a central configuration
    
    Components:
    * a config registrar in core/oiovar.h and core/var.c
    * a code generator, confgen.py, used by cmake to generate the variable
      descriptions, the github markdown files and the CMake support
    metautils: Embed asn1c for no runtime dependency
    
    With this evolution we are free to alter asn1c macros and be sure the
    runtime version will be the same that the compile time version.
    doc: List a missing dependency
    rdir: threads support
    sqliterepo: Make shorter timeouts for USE/GETVERS
    
    The global request handling should not take longer than 2s for GETVERS
    and 1s for USE.
    sqliterepo: Shorten the cnx timeout for USE and GETVERS requests
    
    From a default of 2s, use now 0.5s for GETVERS and 0.25s for USE.
    sqliterepo/election: 3 tries of GETVERS on network errors
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    core: add OIO_USE_OLD_FMEMOPEN to choose fmemopen implementation
    
    Add -DOIO_USE_OLD_FMEMOPEN=1 on cmake commandline to use old fmemopen
    implementation. This will workaround a bug with glibc >= 2.22, but
    unfortunately won't compile with stripped glibc.
    sqliterepo/cache: prevents threads starvation
    
    Get rid of the old model with a fixed-number of GCond used to bucketize
    all the DB accesses.
    
    Now one couple of GCond (normal, prio) is associated to each cache item,
    and this is better since the lifetime of each item is the whole
    execution.
    
    In addition, the notion of maximum bases used has been reviewed to allow
    slight changes on the effective maximum. Now we propose one "hard"
    maximum used to allocate structures at init time, and one "soft" maximum
    that can be freely changed between (0,hard].
    core: introduces new macro to check the API/ABI version
    
    We plan to introduce fields in some structures. We need such a simple
    way to let the application programmer check its installation is correct
    and check the version it used at compile time was the same the version
    currently known by the library.
    merge python client api from oiopy into core
    
    integrate CLI
    Updated dependencies.
    rdir and account: python-flask no longer required (#603)
    proxy: prefer MASTER for writing, SLAVE for reading
    beanstalkd: configurable TUBE (#574)
    event-agent: get rid of old useless stuff
    events: fixes the default beanstalk configuration
    
    Now the config for C clients conforms to what it was for the Python
    tools.
    server: new macros for internal limits + limits reviewed
    
    * Macros moved in core/oiocfg.h
    * More events raised by epoll_wait: 16 -> 128
    * Limits to 64 the number of accept() on each round: avoids starving on
      established connections, and prefer finishing established connections
      before accepting others.
    * Removes the limits on the number of idle workers (5 -> -1). Just let
      the expiration timeout of 30s do the job.
    core: move python files around
    travis: fixes the missing beanstalkd requirement
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    Removes svc-monitor
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    proxy: container/destroy plainly destroys the containers and their references
    
    * a container destruction is now: 1/freeze 2/flush 3/unlink 4/destroy(local)
    * meta2 slighty simplified around PURGE/DEDUP/FLUSH, where the dry_run options have disappeared.
    Doc effort.
    sqlx: now able to prepare "turnkey" sqlite DB, pre-schemed.
    
    * option added to oio-sqlx-server to mention a directory full of schemas.
      the filename is the schema name, and its content the set of SQL statements to create a DB.
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    server: fixed timeouts and warnings around idle connections
    oio-sds/pc now built, relase and version now configurable.
    add plyvel requirement
    obsolete code and macros removed
    python: use pyxattr
    
    What the hell is happening with pyxattr/xattr???
    replace std json python lib with simplejson
    update README.md for python deps
    1st cleanup : client, rawx-client, gridd/client
    
    * client/c/lib has been replaced by core/sds (pure http/json client)
    * rawx-client was not used
    * gridd/client has been replaced by tools/oio-tool
    * some metautils have been gathered in a single tool: oio-tool
    snmp: module insulated. Now independant on github.com
    fix python dependency with xattr module
    
    Confusion between xattr and pyxattr module.
    Documented missing dependency.
    Various fixes and improvements
    
    * metautils: now uses slice allocation
    * server: now uses slice allocation
    * sdk: ReqId, fixed missing headers
    cmake: fixed options
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    README updated for python build
    cmake: removed unused configuration directive
    cmake: updated dependencies.
    cmake: new directive SDK_ONLY to build only the modules involved in the client SDK.
    
    This avoids build the whole backend, and a lot of thrid-party dependencies.
    proxy: fixes and improvements
    
    * Duplicated '/' not agregated in URI (path not purified).
    * URI-encoding now managed
    * errors upon actions slightly clearer.
    sdk: new feature to collect all the compile-time configuration variables.
    
    * Compile-time options gathered in metautils
    * SDK extended with a new function
    * new sds/oio_config tool to dump the config.
    * unused CMake directives and/or macros pruned.
    sdk: new feature to collect all the compile-time configuration variables.
    
    * Compile-time options gathered in metautils
    * SDK extended with a new function
    * new sds/oio_config tool to dump the config.
    Removed obsolete modules. They'll be back !
    
    Bye bye the integrity loop, and its bunch of crawlers, checks and mover.
    Fixed dependency list.
    sdk: the SDK now make use of the proxy.
    
    Soon, that SDK will be a replacement for the old-style C API in ./client.
    Yet the download and the delete operations are performed without any intervention of the client.
    Still the upload has to be reimplemented.
    README.md : dependencies documented.
    Update README.md
    README.md : fixed doc about the dependency to asn1c
    README.md : dependencies explained.
    SSL replaced by GLib equivalent.
    Get rid of log4c emulation and some old (and unused) pieces of code.
    Get rid of the crawler.
    
    Also pruned all the code only used by the crawler.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    m2v2: container's ctime now set at container's creation.
    Content propeties reviewed + Cleanup, round 2
    New macros now configurable with CMake directives.
    proxy: prepares the transmission of the reqid from incoming to outgoing requests.
    fix minor typos in README
    OpenIO is lifting off now !
    Update README.md
    1.8.4 release candidate
    Initial commit
    Revert "Rename all-requirements.txt to requirements.txt"
    
    This reverts commit 7355aaa709e1f181c77a94d7d0833d1be6079212.
    Rename all-requirements.txt to requirements.txt
    
    The rename is necessary for command `pip install git+git://...`
    to install dependencies.
    
    A symbolic link has been added to avoid to break tools or CI that
    compile SDS.
    Add automated test suite launch documentation
    ci: Display fancier colors for the codecov icon
    ci: Fix the pep8 target in Tox
    
    Remove tests on missing files
    m2: track average DB open time
    
    Track (and display) average time spent by meta2 worker threads waiting
    for a database handle. The purpose of this modification is to provide
    better warning messages when the load on a meta2 database is increasing.
    tests: minor changes for reliability
    Python API, tests: another batch of Python 3 fixes
    Python API: format the pure MD5 implementation
    
    Also remove the exclusion from the tests, the file will be checked now.
    CI: plug into the 19.10 package repository, fix deps
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Add python3.5 interpreter to the test suite
    Revert "Rename all-requirements.txt to requirements.txt"
    
    This reverts commit 7355aaa709e1f181c77a94d7d0833d1be6079212.
    Rename all-requirements.txt to requirements.txt
    
    The rename is necessary for command `pip install git+git://...`
    to install dependencies.
    
    A symbolic link has been added to avoid to break tools or CI that
    compile SDS.
    CI: use nosetests' "flaky" module to rerun flaky tests
    CI: make nose display test durations
    Move the logic of the zk-*.py scripts into oio/
    
    Also introduce oio-directory-check, oio-check-master
    Thanks to @AymericDu, @murlock
    
    (cherry picked from commit 4cfce87518175cb0f2ce382e7ac6acb0c0109490)
    tests/functional: Skip 3 test cases on public CI
    
    * some test_container_backup.py cases are buggy and/or unstable
    * test_cluster_wait is too long to run often.
    Tests: ensure Variables.md is up-to-date
    Backup: add MD5 python implementation
    
    To support multipart upload, a MD5 must support serialization.
    Add CLI test suite with proxy cache enabled
    coverage: enable it for WSGI and nosetests
    
    Command for coverage for [testenv:func] was skipped.
    Add Python coverage
    CI: Calls PEP8 on the python scripts in tools/
    cli: add basic functional tests
    merge python client api from oiopy into core
    
    integrate CLI
    migrate plain tests to use "unified" python API
    core: move python files around
    refactor functional tests config loading
    Add default value for NOSE_ARGS
    Add arguments to nosetests to enable report
    python: min version 1.6 for tox
    python: min version 1.6 for tox
    python: new tox automation tool
    sqliterepo: Configure the sqlite cache size of a DB
    lb: more weighed random, less shuffled selection
    
    Allow to configure how many times we shall try to select a service using
    a weighted random algorithm, before switching to the shuffled selection.
    Increase core.lb.weighted_random_attempts (defaults to 1) if you observe
    too many choices of low-score services while high-score services are
    available.
    server: get server-side performance data
    
    Save some performance data in the thread local data. This is disabled by
    default, can be enabled for each service (even when the service is running)
    or per request.
    Performance data is printed at the end of access log messages.
    sqliterepo: reset elections stuck in CREATING step
    
    This helps recovering after a ZooKeeper failure. The delay of 12s can be
    changed with sqliterepo.election.delay.expire_pending, and should be set
    between sqliterepo.zk.timeout and sqliterepo.election.wait.delay.
    conf: remove unused proxy.srv_local.prefer parameter
    conf: Declare a variable to control the lazy locking
    Increase max request run time for sqliterepo-based services
    
    The default value was too low and reduced some timeouts
    conf: Declare a variable to allow rawx to serve from /
    Allow to place some chunks locally to the proxy
    sqliterepo: remove the unused "ping_final" parameter
    proxy: Prefer local services
    
    1/ Give a location to any proxy on the host (central variable)
    2/ Mangle the scores of RAWX to give precedence to services that are
       closer
    3/ Allow to enable/disable that behavior.
    conf: Update the documentation
    conf: Remove an unused variables
    
    We removed 1 pool of threads, its configuration is not necessary anymore.
    conf: Regen the doc
    core/lb: allow disabling distance check optimization
    
    Introduce core.lb.allow_distance_bypass variable that disables some load
    balancing optimizations that may lead to unbalanced situations. Also add
    new tests.
    core+conf: Uniform configuration format
    C client: Avoid odd config from the app.
    meta*: Make the tubes configurables with central variables
    sqliterepo: Make configurable the DB dump concurrency
    
    Timeout, number of dumps
    sqliterepo: increase DB_PIPEFROM maximum timeout
    
    And allow to configure DB_DUMP chunk size.
    
    (cherry picked from commit cdcde7cec441a4e386825a62d68188afdcbfb43a)
    sqliterepo: increase DB_PIPEFROM maximum timeout
    
    And allow to configure DB_DUMP chunk size.
    enbug/doc: Regenerate the docs
    server,sqliterepo: improve error messages
    
    Also display which configuration variable sets the threshold that
    triggered the warning or error message.
    core,m1,m2: check container name is valid UTF-8
    
    Jira: OS-100
    Create option to force a service to deny the role of MASTER in any election
    core/lb: warn if writer lock is held for too long
    Change oio version from 4.0 to 4.2
    conf: Add and explain libcurl config variables
    meta2: Limit the number of deleted object when flushing
    conf: Update the documentation
    sqliterepo/election: Debug long locks
    
    Also remove old logs around the calls to the ZK client
    conf: Reduce the alert timeouts
    sqliterepo/election: Avoid looping on GETVERS
    sqliterepo/election: Simplify the delay between GETVERS attempts
    
    The mechanism must be reviewed, for sub-second reactivity.
    sqliterepo/election: Introduce deferred GETVERS reloads
    
    After failures in CHECKING_{SLAVES,MASTER}
    rdir: Allow configuring the max fd per DB
    proxy: Mangle the DB name for /admin/* type=meta1
    
    Also centralizes the meta1_digits variable
    sqliterepo: Refine the conditions to autocreate a missing DB
    
    Also make configurable the auto-recovery of missing DB
    Update the documentation
    meta*: Periodically check the beanstalkd
    
    Fixes #1194
    Regenerate the docs about managed variables
    conf: Regenerate the docs
    conf: Regenerate the docs
    core: Make the User-Agent configurable
    
    And disable it by default. This will save tens of bytes per request
    (proxy or rawx).
    conf: Regenerate the documentation
    conf: Regenerate the doc (cmake, github)
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    conf: Regenerate the documentation
    server: Rename misnamed symbols
    server: Transform 2 magic numbers into managed configuration variables
    conf: Rename a key, regen the doc
    
    Comply to @fvennetier's opinion
    conf: Third batch of variables
    
    udp_allowed, log_outgoing, rawx_events
    conf: Add the ability to set/get the variables of a running service
    
    Currently covers oio-proxy, oio-{sqlx,meta{0,1,2}}-server.
    
    The proxy is queried with the route `/v3.0/config` (GET and POST).
    
    The services are queried through the proxy with the route `/v3.0/forward/config?id=SRVID`.
    BUILD.md: Add a little explanation about the code generation
    config: Manage a second batch of variables
    Adapt the code to the central config
    meta2: Remove unused code
    sqliterepo: Send event for each deleted meta2 database
    sqliterepo: Return 404 when the container created but not initiated
    meta2: Allow to rebuild chunk in frozen container
    meta2: Drop the unused content deduplication
    meta2: Allow to add delete marker to a specific version
    sqliterepo: Notify the changes of database properties
    m2: send notifications for deleted properties
    
    Property that have changed (creation, modification or deletion) are now
    properly reported in storage.content.new and storage.content.update
    events.
    - A property with a value indicates a creation or modification
      (the value is the new one).
    - A property with a null value indicates a deletion.
    
    Fixes: #1667
    meta2: Recompute damaged objects count of a container
    Update Copyright
    meta2: Recompute statistics of a container
    meta2: Increase missing chunks when creating an object
    meta2: Send event to notify the modification of properties
    
    (cherry picked from commit 7057a1e53d46fceadde84e68e06b5cbd4c085c31)
    meta2: Allow to change the policy of an object
    meta2: parse chunk qualities, send event if required
    meta2: Send event to notify the modification of properties
    Update the copyright
    proxy, meta2: Remove 'content/link'
    proxy, meta2: Remove 'content/copy'
    meta2: Limit the number of deleted object when flushing
    meta2: Send events to remove the chunks when flushing a container
    Purge with a fixed number of versions
    meta2: Purge alias
    meta2: Delete exceeding versions when adding a new alias
    meta2: Send events when purging a container
    Container snapshot: fix small issues
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    Meta2, event: fix content rebuild
    
    Add check of a partial content upload to comply with multipart upload of oiofs
    Add another verification for the event handler tests
    meta2: notify the sparse contents
    
    Add meta2_filter_action_check_content before action_put_content
    Check the size and the position of the all the chunks a content.
    Depending of the storage_policy some chunks can be rebuild (eg copy or ec)
    with the chunks already presents.
    If the chunks can be rebuild it send a event storage.content.broken containing
    "present_chunks":[{"id":"...","pos":"...","hash":"...","size":"..."}],
    "missing_chunks":[pos1,pos2,...,posn]
    if not return FILTER_KO.
    Add an event handler content_broken that permit to rebuild the missing chunks
    meta2: Allow a switch to force/insert raw chunks
    proxy: Allow to ask for master only in meta2 RPC
    
    Currently, only upon /content/show and /content/locate
    meta2: Restore the TOUCH on a container
    
    Instead of touching all the contents, we trigger the emission of the
    container's state.
    m2: re-establish sqlx change callback
    
    This is needed in order to recompute prepare data after sqlx level
    admin table changes (e.g. quota or storage policy modification).
    
    DOES NOT WORK WHEN META2 IS NOT REPLICATED!
    m2: fix prepare data update when not replicated (fix #739)
    m2,proxy: implement content truncate operation
    Implement metachunk replacement
    
    This will allow optimized random writes (to change 1 byte, you will
    have to download and reupload only 1 metachunk, not the whole content).
    m2v2: integrate new load balancer
    lb: implement 'weak' distance criteria
    
    New 'weak' option to data treatments, allowing to relax the distance
    requirements if they were not satisfiable. This allows requiring more
    chunks than the number of services locations. Note that using this
    option may lead to unbalanced situations.
    lb: better error messages (#570)
    
    Fix #567
    m2v2: avoids 4 syscalls upon a M2_PREP
    m2: add a cache of DB entries required for M2_PREPARE
    
    This prevents opening the database in most cases,
    and thus saves IO.
    m2v2: adds ISEMPTY feature, fixes DESTROY
    
    * DESTROY is now only local and the event emission is explicitely asked by the client
    * ISEMPTY quickly checks if any chunk is present
    proxy: container/destroy plainly destroys the containers and their references
    
    * a container destruction is now: 1/freeze 2/flush 3/unlink 4/destroy(local)
    * meta2 slighty simplified around PURGE/DEDUP/FLUSH, where the dry_run options have disappeared.
    metautils+meta2: unused code removed
    m2v2: adapted to the presence CONTENT in oio_url.
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    m2v2: code simplifications and memleaks fixes around namespace_info structures
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    core : explicit content links implemented.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    m2v2: when listing a container's aliases, the container's metadata are also returned.
    
    In addition, unused code have been pruned from meta2.
    That code has been released with integrity-loop's removal.
    Versioning & Events reviwed upon a PUT
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    Versioning & Events reviwed upon a PUT
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    Cleanup, round 6
    
    * path to sqlite bases unified and simplified. It should also plainly manage several containers for the same user.
    * warnings removed.
    * useless comments removed.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    m2v2 + sqlx + proxy : set properties on contents and containers now manage a flush options and deletion by null value.
    m2v2: unused features removed.
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    Content propeties reviewed + Cleanup, round 2
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    metautils: modularize the notification system
    
    Change-Id: I6a75473a16c3f4973f0ff0dd4ab349c47d170664
    
    Conflicts:
            CMakeLists.txt
            meta2v2/meta2_backend.h
            metautils/lib/CMakeLists.txt
            metautils/lib/event_config.c
            metautils/lib/notifications.c
    OpenIO is lifting off now !
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    m2v2: enable/disable Kafka events from conscience conf
    
    and fix memory leaks and disable Kafka events for local bases
    
    To enable Kafka events from conscience configuration, for all namespaces:
      param_option.event_config.meta2 = kafka_enabled=true;kafka_topic=TOPIC
    
    To enable Kafka events from conscience configuration, for a namespace
    and all its virtual sub-namespaces:
      param_option.NAMESPACE_event_config.meta2 = kafka_enabled=true;kafka_topic=TOPIC
    
    kafka_topic is optional and defaults to "redc.meta2"
    
    Change-Id: I7ea1094e24e5029cfcad46c031db35ba99f2eb47
    m2v2: fix Kafka events for delete requests
    
    Change-Id: I951a065278aae680907df1f2f84df46a11223991
    (cherry picked from commit 9e27a65a5b3c0b8598959973df5953470e920444)
    m2v2: generate event on alias copy and chunk substitution
    
    Change-Id: Ic7a481e65e82cc1566e5cbb286cd8fff818f12f5
    (cherry picked from commit 9375390be5bb8fbbcf693ad649ab26130d697510)
    m2v2: send CREATE and DESTROY events to Kafka
    
    (cherry picked from commit b42f472c26a1562ced61f4e4b16a6729338a9ca4)
    
    Change-Id: I3e32f2153bd883aa17d8cb79da8ef7de0f61c635
    m2v2: send PUT and DELETE events to Kafka
    
    Requires librdkafka (https://github.com/edenhill/librdkafka)
    
    (cherry picked from commit 0335953e049f470800449b4709d5e58f5cbb8abf)
    
    Change-Id: Iaff434c63828cee8bfe8044c0332a76861e54829
    Merges the promoter's changes.
    
      * client/c: adapt rainx_remote for future use
      * Remove meta2_container_services from installed binaries in honeycomb.spec
      * cluster/lib : Fixed memory when there is no /etc/gridstorage.conf
      * m2v2: minor safety fix for chunk substitution
      * metautils / sockets : Fixed return code check.
    1.8.4 release candidate
    Initial commit
    meta2: remove unused macros
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    meta2: Drop the unused content deduplication
    meta2: Allow to add delete marker to a specific version
    meta2: Allow to simulate versioning when creating and deleting an object
    Update max_versions of container from header
    
    This commit introduce possibility to update max_versions when creating
    object:
    this is useful for container created through autocreate functionality:
    for Container Hierarchy, enabling versioning is set on root container,
    it is not possible to parse all container to update value and
    for performance, a dedicated request to update container is skipped
    (as a lot of upload may occurs at same time)
    
    If header `x-oio-force-versioning` is received,
    the max_versions is updated before completing
    object (to keep mecanism to delete prior object if needed)
    Allow listing to be done on master service only
    
    For several operations, when a list is done just after an object
    deletion, the listing operation may occur on a slave which has not been
    synchronized yet.
    meta2: Use one notifier per topic
    meta2: Add User-Agent to the events
    meta2: parse chunk qualities, send event if required
    Update the copyright
    proxy, meta2: Remove 'content/link'
    proxy, meta2: Remove 'content/copy'
    Purge with a fixed number of versions
    meta2: Purge alias
    meta2: Send events when purging a container
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    meta2: notify the sparse contents
    
    Add meta2_filter_action_check_content before action_put_content
    Check the size and the position of the all the chunks a content.
    Depending of the storage_policy some chunks can be rebuild (eg copy or ec)
    with the chunks already presents.
    If the chunks can be rebuild it send a event storage.content.broken containing
    "present_chunks":[{"id":"...","pos":"...","hash":"...","size":"..."}],
    "missing_chunks":[pos1,pos2,...,posn]
    if not return FILTER_KO.
    Add an event handler content_broken that permit to rebuild the missing chunks
    meta2: Implement /content/touch
    
    A.k.a. M2_CTOUCH, "meta2 content touch".
    Immediately drops an event into the queue (currently: beanstald).
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    m2,proxy: implement content truncate operation
    m2v2: checks for events queue's availability
    m2v2: checks for events queue's availability
    m2v2: adds ISEMPTY feature, fixes DESTROY
    
    * DESTROY is now only local and the event emission is explicitely asked by the client
    * ISEMPTY quickly checks if any chunk is present
    proxy: container/destroy plainly destroys the containers and their references
    
    * a container destruction is now: 1/freeze 2/flush 3/unlink 4/destroy(local)
    * meta2 slighty simplified around PURGE/DEDUP/FLUSH, where the dry_run options have disappeared.
    metautils+meta2: unused code removed
    m2v2: fixed memleak when replying beans.
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    3rd cleanup : unused m2v2 code
    
    Code now unused since the only caller have been removed (client, m1v2).
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    meta2: fixed events generation when containers are created and destroyed.
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    m2v2: when listing a container's aliases, the container's metadata are also returned.
    
    In addition, unused code have been pruned from meta2.
    That code has been released with integrity-loop's removal.
    Centralized macros, shorter values.
    m2v2 : Unused functions removed.
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    m2v2 : Unused functions removed.
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    sqlx + m2v2 : events generation reviewed.
    
    PUSH/PULL pattern between the agent and the services has been replaced by a REP/REQ pattern:
      * the event's emitter sends 2 frames to the agent : |ID|JSON|
      * it expects replies formatted as : |ID|
    The ID replied acknowledgeds the event with the same ID.
    
    A minimal mechanism of periodical retries has been added.
    m2v2: fixed missing/bad return codes
    Further step in account/user implementation.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    m2v2: unused features removed.
    Content propeties reviewed + Cleanup, round 2
    m2v2: macros exported, propdel(*) now implemented.
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    m2v2: add content notification after REQ_M2RAW_CONTENT_SET
    
    Change-Id: Ib45d45b17d4566adccf2797e89150a73902b87a3
    Merges the promoter's changes.
    
      * client/c: adapt rainx_remote for future use
      * Remove meta2_container_services from installed binaries in honeycomb.spec
      * cluster/lib : Fixed memory when there is no /etc/gridstorage.conf
      * m2v2: minor safety fix for chunk substitution
      * metautils / sockets : Fixed return code check.
    1.8.4 release candidate
    Initial commit
    m2: allow NULL values for byte array fields
    meta2: Convert property value to JSON
    
    (cherry picked from commit 7d95c025dcffe75a2dd83bfe6f7ed823bb06ce45)
    meta2: parse chunk qualities, send event if required
    proxy: forward special property beans
    
    Jira: R1810-27
    meta2: Convert property value to JSON
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Python API: add support for versions in object lists
    meta2: Reduce the number of calls to realloc() and strlen()
    core/cs: API completed
    
    Also, the API has been made more robust to manage strings with '"' and UTF-8 characters in the JSON messages
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    sqlx + m2v2 : events generation reviewed.
    
    PUSH/PULL pattern between the agent and the services has been replaced by a REP/REQ pattern:
      * the event's emitter sends 2 frames to the agent : |ID|JSON|
      * it expects replies formatted as : |ID|
    The ID replied acknowledgeds the event with the same ID.
    
    A minimal mechanism of periodical retries has been added.
    OpenIO is lifting off now !
    Promoter's fixes now applied
    
    Change-Id: Ib7e69ae3f3dfdb70fe747ac7416b3a0bc5ea236c
    m2v2: remove bad '"' character from JSON event
    
    (cherry picked from commit 85f9dae5a3d159616a46ef748e9020412971c663)
    
    Change-Id: Ia29f2d281c2856e75c888073245e08d3d2253d14
    m2v2: add storage policy in content header JSON serialization
    
    (cherry picked from commit bccb5926f58b52660f801c304b0bce96b2a15036)
    
    Change-Id: I019d711c72cfec3d8e51d95833aca81b67c711d2
    m2v2: new functions to serialize to JSON
    Clean licenses declaration
    
    Change-Id: I879929648e33ba9a8021b8dd864267e87642c5bb
    m2v2: new functions to serialize to JSON
    Clean licenses declaration
    
    Change-Id: I8feb0aaff29487a09a222dcbb89f2b27b6613230
    meta2: Fix boolean not initialized
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    m2: initialize "frozen" flag variable
    meta2: Allow to rebuild chunk in frozen container
    meta2: Drop the unused content deduplication
    meta2: Recompute damaged objects count of a container
    m2: display listing parameters in access log
    meta2: Use one notifier per topic
    Update Copyright
    meta2: Recompute statistics of a container
    meta2: Fix listing with versioning
    Update the copyright
    proxy, meta2: Remove 'content/link'
    meta2: Limit the number of deleted object when flushing
    meta2: Send events to remove the chunks when flushing a container
    meta2: clarify variable name
    Purge with a fixed number of versions
    meta2: Send events when purging a container
    Container snapshot: fix small issues
    Meta2: Accept "local" argument to open local database
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta2,cluster: Move 2 variables to the central config facility
    
    In addition, insulates the variables dedicated to meta2 in the
    libmeta2backend, so that only the meta2 services see them.
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    meta2: Allow a switch to force/insert raw chunks
    Adapt the code to the central config
    meta2: Implement /content/touch
    
    A.k.a. M2_CTOUCH, "meta2 content touch".
    Immediately drops an event into the queue (currently: beanstald).
    meta2: Restore the TOUCH on a container
    
    Instead of touching all the contents, we trigger the emission of the
    container's state.
    m2,proxy: return properties when listing contents
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    m2v2: adds ISEMPTY feature, fixes DESTROY
    
    * DESTROY is now only local and the event emission is explicitely asked by the client
    * ISEMPTY quickly checks if any chunk is present
    proxy: container/destroy plainly destroys the containers and their references
    
    * a container destruction is now: 1/freeze 2/flush 3/unlink 4/destroy(local)
    * meta2 slighty simplified around PURGE/DEDUP/FLUSH, where the dry_run options have disappeared.
    m2v2: lowered the verbosity upon a LINK
    m2v2: upon a LINK, content_id now got from the URL
    Dropped the dependency to the Linux's specific clock functions.
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    m2v2: fixed memleak when replying beans.
    core : explicit content links implemented.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    m2v2: fixed memleak when creating containers
    m2v2: fixed number of aliases output when listing
    m2v2: firced pagination when listing contents.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    m2v2: when listing a container's aliases, the container's metadata are also returned.
    
    In addition, unused code have been pruned from meta2.
    That code has been released with integrity-loop's removal.
    Centralized macros, shorter values.
    m2v2: fixed missing/bad return codes
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    m2v2: unused features removed.
    m2v2: minor code reorganisation.
    Content propeties reviewed + Cleanup, round 2
    OpenIO is lifting off now !
    sqliterepo: fix TO-HONEYCOMB-586 (big sqliterepo bases)
    
    Base transfers are now chunked (8MiB) by default.
    Monolitic transfers are still supported.
    
    Some return codes have been replaced by constants.
    
    Change-Id: Iecc45841bdd333f5d45bd101c68255c8c14d9111
    sqliterepo,sqlx,m2v2: fix election problems after move.
    
    Allow get_peers to bypass meta1 cache in sqlx and meta2v2.
    Add SQLX_EXITELECTION request in sqlx-based services.
    
    Change-Id: Ife2760bc869376c3b793950fca2fa703ca23bec9
    m2v2: generate event on alias copy and chunk substitution
    
    Change-Id: Ic7a481e65e82cc1566e5cbb286cd8fff818f12f5
    (cherry picked from commit 9375390be5bb8fbbcf693ad649ab26130d697510)
    (FVE & GLA) : local base creation + operations allowed on local bases
    
    allow BEANS, PUT, GET, LIST and DELETE on local bases.
    
    Change-Id: I07b0e38352f9e4a3a4c1dd3031e9270ebd800d36
    (FVE & GLA) : local base creation + operations allowed on local bases
    
    allow BEANS, PUT, GET, LIST and DELETE on local bases.
    
    Change-Id: I783322d68d407f32bd9da68b16da90e50ede239b
    Merges the promoter's changes.
    
      * client/c: adapt rainx_remote for future use
      * Remove meta2_container_services from installed binaries in honeycomb.spec
      * cluster/lib : Fixed memory when there is no /etc/gridstorage.conf
      * m2v2: minor safety fix for chunk substitution
      * metautils / sockets : Fixed return code check.
    2014-06-19 update from the promoter's version.
    
      * cleanup (paths, includes, macros)
      * m2v1: fix warnings
      * conscience: fix (warn on custom NONE stgpol)
      * sqliterepo: add check of redirection target (in debug mode)
      * m2v2: add retry loop for self redirections
      * c client: replaced some g_print by GRID_INFO to allow quiet mode
      * c client: add message on container destroy success
      * sqliterepo: leave election if no peers found in defer_USE
      * client/c: if m2 is replicated, make client retry
      * m2v2: handle error on exit_election
      * conscience: add check on VNS chunk_size
      * sqliterepo: fix leak
      * m2v2, c client: implement TO-HONEYCOMB-713 (chunk_size per VNS)
      * m2v2: fix TO-HONEYCOMB-715 (error after destroying not empty container)
      * sqliterepo, m2v2: improve debug traces
      * metautils: new function to compute printable thread id
      * c client: fix typo in get_virtual_namespace
      * sqliterepo: call malloc_trim after expiring bases
      * c client: fixed physical/virtual namespace confusions
      * rawx-lib: improved recovery of truncated chunks
      * rawx-lib: new options for gs_uncompress (log4c and keep_pending)
      * gridd: Fixed typo
      * gridd: timeout for idle connection is now configurable, and even disableable.
      * client : feature to change the VNS of an established client
      * replicator : VNS are now partially managed (only containers and contents) container_events are not yet supported.
      * metautils : CID computation more robust
      * meta2 / module : events when SLAVE ns + container's VNS in events instead of service's NS.
      * meta2 / lib : backend feature to get the VNS of a container
      * rawx-lib : fixed attr checks
      * cluster/dummy_service : annoying output level-lowered
      * gridd: annoying trace level-lowered
      * metautils: fix copy of chunk.metadata when its length is 0.(cherry picked from commit f5011e6d305b974319062084eac52f950a2d0270)
      * meta2: fixed TO-HONEYCOMB-678 (append on dup chunks)
      * saver: fixed TO-HONEYCOMB-677 (tsmx service not unlinked)
      * saver: now able to manage content delete events (to be tested)
      * saver: now able to make difference between PUT events and the other
      * Fixed relative #include path, that path doesn't allow a graceful split between the OSS/Proprietary parts.
      * m2v2: remove call to sleep in purge
    1.8.4 release candidate
    Initial commit
    meta2: Remove unused code
    meta2: parse chunk qualities, send event if required
    proxy: forward special property beans
    
    Jira: R1810-27
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    fix include for json-c lib
    proxy: add new routes and use headers
    
    New routes:
    We want clean and simple routes for interaction with dir/m2/sqlx APIs.
    
    New route format is '/v3.0/$NS/$api/$action'
    
    request parameters are now passed as query args.
    
    Example:
    for container creation:
    
        POST /v3.0/NS/container/create?acct=myaccount&ref=mycontainer
    
    With parameters as query args it is now easier to access API actions
    using optional parameters.
    This is especially useful when using the CID, example:
    
        POST /v3.0/NS/container/destroy?acct=myaccount&ref=4
    
        POST /v3.0/NS/container/destroy?cid=044B85A46CE9A1B256A1BD3D257B1ADBE2DD6FDFD7D6B33DE47AF23C9CD5C38D
    
    Simplified API names:
    m2 -> container & content
    dir -> reference
    sqlx -> admin
    
    Note: this is a proposal, we may change theÃmm.
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    OpenIO is lifting off now !
    "Custom vs Standard" paths reviewed.
    
    json-c and rdkafka management now better taken into account.
    This allows compiling on a ubuntu server as weel as on a centos distribution.
    
    Change-Id: I1c8adf8ab213c2a7d4927fbbe1e031dc782792ea
    m2v2: new functions to serialize to JSON
    Clean licenses declaration
    
    Change-Id: I879929648e33ba9a8021b8dd864267e87642c5bb
    m2v2: new functions to serialize to JSON
    Clean licenses declaration
    
    Change-Id: I8feb0aaff29487a09a222dcbb89f2b27b6613230
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Gather asn1.c header for further macro handlings
    Fixed service push to the conscience + Cleanup, round 8
    
    * The last cleanup commit was named #6, but this was a mistke, there was already a #6.
    * Code factorized
    * Useless code removed
    * Codec functions simplified.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    Remove unsupported backblaze integration
    meta2: Remove unused code
    m2: reduce the number of memory allocations
    meta2: Send position to rebuild in a string
    Allow to place some chunks locally to the proxy
    Meta2: Reduce the exposure of bean generation functions
    meta2: Drop the unused content deduplication
    meta2: Check if alias already exist when putting a versioned object
    meta2: Check if delete marker already exists
    meta2: Allow to add delete marker to a specific version
    meta2: Allow to simulate versioning when creating and deleting an object
    m2: send notifications for deleted properties
    
    Property that have changed (creation, modification or deletion) are now
    properly reported in storage.content.new and storage.content.update
    events.
    - A property with a value indicates a creation or modification
      (the value is the new one).
    - A property with a null value indicates a deletion.
    
    Fixes: #1667
    meta2: Send event with the number of damaged objects
    meta2: fix memory leak
    
    The setter CHUNKS_set2_id make a copy of str.
    Update Copyright
    meta2: Decrease missing chunks when rebuilding a chunk
    meta2: Decrease missing chunks when deleting an object
    meta2: Increase missing chunks when creating an object
    meta2: Send event with the number of missing chunks
    Stop accepting composed service types
    m2: ensure there is a version in content.perfectible events
    m2: return quality of chunks in spare chunk requests
    meta2: Send event to notify the modification of properties
    
    (cherry picked from commit 7057a1e53d46fceadde84e68e06b5cbd4c085c31)
    meta2: Keep the same ctime if the object already exists
    meta2: Allow to change the policy of an object
    meta2: clarify object listing code
    meta2: Fix listing with versioning
    meta2: Fix the purge of objects with a delete marker (the last version)
    meta2: Don't link a deleted alias to a content
    meta2: fix memory leak
    meta2: fix memory leack of previous error
    meta2: Purge exceeding aliases except deleted aliases
    meta2: Check if the last metachunks are present
    meta2: Create a message for the event only if the content is incomplete
    meta2: Send the correct list of missing chunks
    meta2: allow older versions
    
    If versioning is enabled, allow versions before current one:
    it will help with S3 with // writes on same object that raises
    429 error without this patch.
    meta2: address some content.perfectible issues
    C API: parse properties returned during content/prepare
    meta2: implement warn_dist mechanisms
    meta2: parse chunk qualities, send event if required
    Python API, meta2: forward special property beans
    
    Jira: R1810-27
    m2: return property beans with quality of selected chunks
    
    Jira: R1810-27
    core/lb: keep track of the quality of selected services
    meta2: Send event to notify the modification of properties
    Update the copyright
    proxy, meta2: Remove 'content/link'
    proxy, meta2: Remove 'content/copy'
    meta2: Require content ID when creating an object
    meta2: Limit the number of deleted object when flushing
    meta2: Send events to remove the chunks when flushing a container
    Python API, meta2: Send the content ID to create an object
    meta2: Fix the JSON output of events for broken contents
    
    Missing commas
    Add fastcopy on Python API
    meta2: fix WORM mode when versioning is enabled
    meta2: get rid of legacy code about snapshots
    meta2: Purge alias
    meta2: consider WORM mode in forced PUT operations
    meta2: consider WORM mode also for PUT operations
    Core/lb: Associate UUID with addr
    meta2: Delete exceeding versions when adding a new alias
    meta2: Use microseconds if version is unset
    meta2: Send events when purging a container
    meta2: generate less unused code
    meta2: refuse objects versions older than latest
    
    This is to prevent a data loss happening when a high-level retry
    (from a client) is executed before a low-level retry (from the proxy).
    meta2: format meta2_utils.c
    sqliterepo: new error code 511 for corrupted databases
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Meta2, Event-handler: Create a separate handler to drain a content
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    m2: fix an error message
    Meta2: fix memory leak in m2db_check_content
    
    The memory leak was caused by a GSList not freed in each node of
    sorted_content.metachunks
    
    (cherry picked from commit e380fc9afa732023209537b8d5283bee3a1232e2)
    core/lb: better error handling, warn if flawed
    Meta2: fix memory leak in m2db_check_content
    
    The memory leak was caused by a GSList not freed in each node of
    sorted_content.metachunks
    Meta2, event: fix content rebuild
    
    Add check of a partial content upload to comply with multipart upload of oiofs
    Add another verification for the event handler tests
    meta2: notify the sparse contents
    
    Add meta2_filter_action_check_content before action_put_content
    Check the size and the position of the all the chunks a content.
    Depending of the storage_policy some chunks can be rebuild (eg copy or ec)
    with the chunks already presents.
    If the chunks can be rebuild it send a event storage.content.broken containing
    "present_chunks":[{"id":"...","pos":"...","hash":"...","size":"..."}],
    "missing_chunks":[pos1,pos2,...,posn]
    if not return FILTER_KO.
    Add an event handler content_broken that permit to rebuild the missing chunks
    meta2: take account of "flag_nodeleted" on listing (fix #999)
    meta2: Fix the version mgmt when looking for an alias
    Adapt the code to the central config
    proxy: Extend the preference for te proxy to all the M2 read-only RPC
    meta2: Reduce the number of calls to realloc() and strlen()
    m2,proxy: return properties when listing contents
    m2: update container size after append
    m2: update size and mtime of content during append
    m2: implement simple object counter
    
    Count the number of entries in "contents" table of each container
    and save it under key "sys.m2.objects" in admin table.
    
    Next step is to count object per storage policy.
    m2: fix alias copy when no versioning
    meta2: restores a check on the version before inserting
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    meta2: spares 5 bytes on each B2 chunk url
    
    The URL format changed from `b2://b2/` to `b2/`. This is possible since the
    proxy is robust to malformed url.
    Minor fixes around events
    core: implement oio_sds_truncate() function
    m2,proxy: implement content truncate operation
    Review storage policy and service pool configuration
    Implement metachunk replacement
    
    This will allow optimized random writes (to change 1 byte, you will
    have to download and reupload only 1 metachunk, not the whole content).
    m2v2: integrate new load balancer
    lb: review for more efficiency
    meta2v2 + metautils : add backblaze compatibility
    tools/oio-bootstrap.py : adding two fields to add backblaze compatibility
    Fixes and refactoring
    
    * rawx: fixed error message
    * rawx: fixed error message + fixed useless case-sensitivity management
    * proxy: cuts the crap from several error messages
    * m2v2: unreached code removed from alias deletion
    * m2v2: minor cosmetic change
    * core/sds: enables tracing RAWX requests for highest verbosity
    * proxy: re-enables case sensitive prefix matching in headers (brings more robustness)
    * core/sds: checks for content_id's format
    * core/sds: new feature to mangle the case of http headers (proxy,
      rawx). Mangling disabled by default, activated in tests.
    * core/tool_roundtrip: activates the mangling of headers case
    * core: fake chunksnb sent
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    lb: implement 'weak' distance criteria
    
    New 'weak' option to data treatments, allowing to relax the distance
    requirements if they were not satisfiable. This allows requiring more
    chunks than the number of services locations. Note that using this
    option may lead to unbalanced situations.
    lb: better error messages (#570)
    
    Fix #567
    m2v2,proxy,events/zmq: benefits from thread-local PRNG
    m2v2: avoids 4 syscalls upon a M2_PREP
    m2v2: fix broken SQL query upon a container purge
    proxy: container/destroy plainly destroys the containers and their references
    
    * a container destruction is now: 1/freeze 2/flush 3/unlink 4/destroy(local)
    * meta2 slighty simplified around PURGE/DEDUP/FLUSH, where the dry_run options have disappeared.
    Fixed compilation on x86_32
    cmake: added 'Werror' in CFLAGS where there is no warning
    
    Warnings are the voice of Evil.
    
    Let's try to avoid them on targets already clean.
    m2v2: RAIN'ed empty contents now respect k+m
    Fixed printf format warnings
    
    Raised when compiling for 32bit architectures.
    metautils+meta2: unused code removed
    m2v2: all the ehader fields are now populated.
    meta2: add chunk-method to generated beans
    Hook'able clock function now used everywhere
    Dropped the dependency to the Linux's specific clock functions.
    m2v2: GET (a.k.a. /content/show) adapted to work with a given content ID instead of the alias path.
    m2v2: adapted to the presence CONTENT in oio_url.
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    m2v2: version not overriden, only set when negative (unset).
    m2v2: sets an acceptable default for the generated mime-type
    m2v2: fixed type (mtime now set in generated beans).
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    m2v2: code simplifications and memleaks fixes around namespace_info structures
    m2v2: fixed memleaks (PROPDEL)
    m2v2: restores the 'http://' prefix in the generated chunk URL
    
    It worked well with the C client API (curl-based) but broke the Python client API
    m2v2: append feature reviwed with new semantics.
    m2v2: fixed memleak (link)
    M2V2: shortened chunks URL
    
    7 bytes saved in each each entry with the removal of the 'http://' prefix (plus its footprint in the index).
    m2v2: shortened content ID (32 -> 16)
    
    We can achieve good unicity inside a container with only 16 bytes.
    This information is present in every entry of the tables ALIAS, CONTENT, CHUNK
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    4th cleanup, unused code purged from metautils
    core : explicit content links implemented.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    m2v2: fixed memleak when purging obsolete aliases.
    Fixes, improvements
    
    m2v2: fixed "bean leak" when purging exceeding aliases (properties not removed).
    m2v2: fixed "bean leak" when deleting explicit aliases (properties not removed).
    proxy: Fixed compile-time warnings
    proxy: properties returned in headers when getting objects
    proxy: headers matching now case-insensitive
    proxy: In addition, request handlers returning invariable and dummy outputs (empty lists, empty sets) now return nothing.
    tools: bootstrap doesn't deploy the admin flask (it is destined to disappear in the next release and is already used by no one).
    m2v2: setting 0 property on a content is not an error. Just a No-Op.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    meta2: unused code removed
    meta2: fixed byte count.
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    Fixed several warnings appeared with recent GCC versions
    
    * improved printf format checks.
    * fixed formatting weaknesses
    * fixed "unmanaged results" in some functions.
    * fixed unused paramerers
    * tools: adds missing 'import syslog' in monitoring scripts.
    fixed sizes when declaring buffers.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Versioning & Events reviwed upon a PUT
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    Versioning & Events reviwed upon a PUT
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    m2v2: fixed double-free condition around set_properties on a content.
    
    Fixed Conflicts:
            CMakeLists.txt
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    m2v2 + sqlx + proxy : set properties on contents and containers now manage a flush options and deletion by null value.
    m2v2: unused features removed.
    m2v2: Flags fixed so that get_proprties(content) also load the header.
    
    This is necessary to display the content's hash in content's metadata.
    m2v2: minor code reorganisation.
    m2v2: container's ctime now set at container's creation.
    sqliterepo + m2v2 : function renamed for more clarity.
    Several fixes around factorized code.
    Content propeties reviewed + Cleanup, round 2
    m2v2: macros exported, propdel(*) now implemented.
    m2v2: checks moved to the integrity loop
    
    The library part of m2v2 responsible of checks beans integrity was unused in m2v2 and has been moved to integrity/lib
    Disable checks on beans upon PUT/APPEND/UPDATE.
    m2v2: disables checks upon PUT and UPDATE
    m2v2: do not crash on corrupted base, return an error
    
    Change-Id: Ie0e612948422296b27d604c46f9e7929dbcb4a0a
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    m2v2: send Kafka events on PURGE
    
    Change-Id: Idd9e58d637e0c3cd6dfe64fff09200cf38c6555d
    (cherry picked from commit 40f64e31372840006800bd119a4a3b1b96ec2b08)
    m2v2: fix Kafka events for delete requests
    
    Change-Id: I951a065278aae680907df1f2f84df46a11223991
    (cherry picked from commit 9e27a65a5b3c0b8598959973df5953470e920444)
    m2v2: generate event on alias copy and chunk substitution
    
    Change-Id: Ic7a481e65e82cc1566e5cbb286cd8fff818f12f5
    (cherry picked from commit 9375390be5bb8fbbcf693ad649ab26130d697510)
    m2v2: fix Kafka events for append operations
    
    (cherry picked from commit 59938c74c3d71c757293901c586d763e30a5b376)
    
    Conflicts:
            meta2v2/meta2_filters_action_content.c
            meta2v2/meta2_filters_misc.c
    
    Change-Id: Ie88cf3218b1c4875f48d9503b267fa0e50675edf
    m2v2: send PUT and DELETE events to Kafka
    
    Requires librdkafka (https://github.com/edenhill/librdkafka)
    
    (cherry picked from commit 0335953e049f470800449b4709d5e58f5cbb8abf)
    
    Change-Id: Iaff434c63828cee8bfe8044c0332a76861e54829
    (FVE & GLA) : local base creation + operations allowed on local bases
    
    allow BEANS, PUT, GET, LIST and DELETE on local bases.
    
    Change-Id: I07b0e38352f9e4a3a4c1dd3031e9270ebd800d36
    (FVE & GLA) : local base creation + operations allowed on local bases
    
    allow BEANS, PUT, GET, LIST and DELETE on local bases.
    
    Change-Id: I783322d68d407f32bd9da68b16da90e50ede239b
    Restored check on beans upon a PUT.
    Fixed counting of aliases.
    Fixed counting of aliases.
    Merges the promoter's changes.
    
      * client/c: adapt rainx_remote for future use
      * Remove meta2_container_services from installed binaries in honeycomb.spec
      * cluster/lib : Fixed memory when there is no /etc/gridstorage.conf
      * m2v2: minor safety fix for chunk substitution
      * metautils / sockets : Fixed return code check.
    1.8.4 release candidate
    Initial commit
    meta2: Remove unused code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Gather asn1.c header for further macro handlings
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Fixed several warnings appeared with recent GCC versions
    
    * improved printf format checks.
    * fixed formatting weaknesses
    * fixed "unmanaged results" in some functions.
    * fixed unused paramerers
    * tools: adds missing 'import syslog' in monitoring scripts.
    Fixed service push to the conscience + Cleanup, round 8
    
    * The last cleanup commit was named #6, but this was a mistke, there was already a #6.
    * Code factorized
    * Useless code removed
    * Codec functions simplified.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    OpenIO is lifting off now !
    m2v2 : Fixed logging domain
    
    Change-Id: I7c2ab154d6f2ef150166b97262edaebbfdf32923
    Merges the promoter's changes.
    
      * client/c: adapt rainx_remote for future use
      * Remove meta2_container_services from installed binaries in honeycomb.spec
      * cluster/lib : Fixed memory when there is no /etc/gridstorage.conf
      * m2v2: minor safety fix for chunk substitution
      * metautils / sockets : Fixed return code check.
    1.8.4 release candidate
    Initial commit
    meta2: Remove unused code
    meta2: parse chunk qualities, send event if required
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    Content propeties reviewed + Cleanup, round 2
    OpenIO is lifting off now !
    Fix meta2v2 crash when events enabled
    
    (TO-HONEYCOMB-718)
    
    Thank you, FVE.
    
    Change-Id: Ic1781fa8160035d1c6f8588e5511c5b168794ce0
    1.8.4 release candidate
    Initial commit
    meta2: Remove unused code
    m2: advertize a bucket name in container events
    
    In case a container is actually a shard of a larger bucket, this will
    allow event listeners to aggregate statistics from all shards.
    
    Jira: OB-501
    proxy: Allow to force the request on master service
    
    It was already possible to do this by adding 'proxy.force.master'
    in the proxy configuration. But this was applied to all requests.
    
    If we wanted to force the master only on a specific request,
    we can add the 'x-oio-force-master' header in the request.
    But this header was only used to list the objects in a container.
    
    Now, it is possible to specifically force the master on all meta2 requests.
    sqliterepo: Send event for each deleted meta2 database
    meta2: Ignore the check after opening the base if it's admin request
    sqliterepo: Return 404 when the container created but not initiated
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    meta2: Allow to rebuild chunk in frozen container
    core,meta2: Centralize NS config in core
    meta2: Drop the unused content deduplication
    meta2: Check if delete marker already exists
    meta2: Allow to add delete marker to a specific version
    sqliterepo: Notify the changes of database properties
    meta2: Separate user and system properties when sending a 'container.new' event
    Update max_versions of container from header (2/2)
    
    This commit bring same mecanism to update sys.m2.policy.versions
    from header to content/delete operation: we want to control
    if current version of object must be deleted or add a delete marker.
    Update max_versions of container from header
    
    This commit introduce possibility to update max_versions when creating
    object:
    this is useful for container created through autocreate functionality:
    for Container Hierarchy, enabling versioning is set on root container,
    it is not possible to parse all container to update value and
    for performance, a dedicated request to update container is skipped
    (as a lot of upload may occurs at same time)
    
    If header `x-oio-force-versioning` is received,
    the max_versions is updated before completing
    object (to keep mecanism to delete prior object if needed)
    Meta2: Set `container_new` to the right tube
    m2, tests: fix memory leaks
    m2: send notifications for deleted properties
    
    Property that have changed (creation, modification or deletion) are now
    properly reported in storage.content.new and storage.content.update
    events.
    - A property with a value indicates a creation or modification
      (the value is the new one).
    - A property with a null value indicates a deletion.
    
    Fixes: #1667
    meta2: Retrieve the header when updating an object to update the stats
    meta2: Notify new stats when rebuilding a chunk
    meta2: Decrease damaged objects count when rebuilding a chunk
    meta2: Update damaged objects count when updating an object
    meta2: Recompute damaged objects count of a container
    meta2: Send event with the number of damaged objects
    Allow listing to be done on master service only
    
    For several operations, when a list is done just after an object
    deletion, the listing operation may occur on a slave which has not been
    synchronized yet.
    meta*: Make the tubes configurables with central variables
    meta2: Use one notifier per topic
    Update Copyright
    meta2: Recompute statistics of a container
    meta2: Decrease missing chunks when rebuilding a chunk
    meta2: Decrease missing chunks when deleting an object
    meta2: Update missing chunks when overriding an object
    meta2: Increase missing chunks when creating an object
    meta2: Send event with the number of missing chunks
    Stop accepting composed service types
    m2: fix small memory leak
    m2: ensure there is a version in content.perfectible events
    Notify properties when creating a container
    meta2: Send event to notify the modification of properties
    
    (cherry picked from commit 7057a1e53d46fceadde84e68e06b5cbd4c085c31)
    meta2: Allow to change the policy of an object
    m2: only send local peer in container.deleted events
    
    The drawback is that when deleting a container, several events are sent
    (one per peer).
    Python API, rdir: refactor
    Change the container events' data format
    
    - Change the "storage.container.new" and "storage.container.deleted"
    events so that the peers are sent in a "peer" field of the "data" field
    instead of it being the whole "data" field.
    - Fix an indentation problem in oio/rdir/client.py
    Addressing more issues with the PR
    
    Fixes for several problems with the peers list generation
    - Rewrite of function and fix a memleak there.
    - Searching for peer when there's no election yields an error.
    - Handle errors returned by sqlx_get_election_peers.
    Other fixes:
    - While making the DB handle storage/access mechanisms more
    generic, a naming mistake caused the access mechanism to use
    the same B-Tree, but the conds/locks passed in parameters.
    - Use NAME2CONST macro instead of handmade solution.
    - Rename variable to avoid single letter naming.
    Add event filters to index META2 databases
    Factor peers lists generation into a single function
    Send META2 peers along with the container creation event
    meta2: Create a message for the event only if the content is incomplete
    meta2: address some content.perfectible issues
    C API: parse properties returned during content/prepare
    meta2: parse chunk qualities, send event if required
    meta2: Send event to notify the modification of properties
    sqliterepo, meta2: display request ID in more messages
    Update the copyright
    proxy, meta2: Remove 'content/link'
    proxy, meta2: Remove 'content/copy'
    meta2: Limit the number of deleted object when flushing
    meta2: Send events to remove the chunks when flushing a container
    Python API, meta2: Send the content ID to create an object
    proxy: Rollback if the destruction of the container failed
    
    Thanks to @murlock
    meta2: decache prepare data when freezing a container
    
    If we do not decache this data, meta2 will accept M2_PREP operations
    even if the container is no more managed locally.
    Decaching this data will force the next M2_PREP operation to re-cache
    it, and this will fail because the container is frozen.
    meta2: fix WORM mode when versioning is enabled
    Purge with a fixed number of versions
    meta2: Purge alias
    meta2: consider WORM mode also for PUT operations
    meta2: Delete exceeding versions when adding a new alias
    meta2: Send events when purging a container
    meta2: Enable new container at create step
    Disallow using an unknown storage policy
    
    Fixes #1153
    Meta2: Accept empty bases in the workaround of containers check
    Container snapshot: fix small issues
    meta2: Work around a previous bug when checking for bases ready
    meta2: Fix & Simplify the logic around opening & creation of bases
    meta2: Get rid of the useless NOREFCHECK
    
    Always used in conjunction with local.
    Meta2: Accept "local" argument to open local database
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    cluster: Remove the useless "chunk_size" field from the nsinfo
    
    Also remove it from the ASN.1 structure.
    Everything has been migrated to the central configuration facility.
    cluster,conf: Move to the CCF the stgpol and svcupdate_policy
    
    ... CCF for Central Config Facility
    meta2,conf: Move the default chunk size on the CCF
    
    .. CCF for Central Configuration Facility
    meta2,cluster: Move 2 variables to the central config facility
    
    In addition, insulates the variables dedicated to meta2 in the
    libmeta2backend, so that only the meta2 services see them.
    meta2,conf: Move 2 nsinfo options to the central config facility
    
    oio_ns_mode_worm, meta2_container_max_size
    meta2,conf: Move 2 nsinfo options to the central config facility
    
    meta2_retention_period, meta2_max_versions
    Meta2, event: fix content rebuild
    
    Add check of a partial content upload to comply with multipart upload of oiofs
    Add another verification for the event handler tests
    meta2: notify the sparse contents
    
    Add meta2_filter_action_check_content before action_put_content
    Check the size and the position of the all the chunks a content.
    Depending of the storage_policy some chunks can be rebuild (eg copy or ec)
    with the chunks already presents.
    If the chunks can be rebuild it send a event storage.content.broken containing
    "present_chunks":[{"id":"...","pos":"...","hash":"...","size":"..."}],
    "missing_chunks":[pos1,pos2,...,posn]
    if not return FILTER_KO.
    Add an event handler content_broken that permit to rebuild the missing chunks
    sqliterepo: Ensure there is a consistant output when locating the peers
    
    Either the error or the peers should be set, but never none nor both!
    Also, returning "no peer but no error" de facto become an empty array
    and never a NULL array anymore.
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    meta2: Allow a switch to force/insert raw chunks
    meta2: Better bean substitution
    
    Avoid inserting when the original bean is not present. Return an error
    if absent.
    Avoid allocating memory for small strings with a bounded size
    
    Rather use character arrays located on the stack or inlined into their
    owner structures.
    Adapt the code to the central config
    proxy: Allow to ask for master only in meta2 RPC
    
    Currently, only upon /content/show and /content/locate
    meta2: Fix an interrupted comment
    meta2: Add a check on each container state before handling it.
    meta2: Restore the TOUCH on a container
    
    Instead of touching all the contents, we trigger the emission of the
    container's state.
    m2: set size and object count at container creation
    meta2: Reduce the number of calls to realloc() and strlen()
    m2: re-establish sqlx change callback
    
    This is needed in order to recompute prepare data after sqlx level
    admin table changes (e.g. quota or storage policy modification).
    
    DOES NOT WORK WHEN META2 IS NOT REPLICATED!
    m2: fix prepare data update when not replicated (fix #739)
    m2: implement simple object counter
    
    Count the number of entries in "contents" table of each container
    and save it under key "sys.m2.objects" in admin table.
    
    Next step is to count object per storage policy.
    core,m2: fix spare chunk requests
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    m2,proxy: implement content truncate operation
    Review storage policy and service pool configuration
    Implement metachunk replacement
    
    This will allow optimized random writes (to change 1 byte, you will
    have to download and reupload only 1 metachunk, not the whole content).
    m2v2: integrate new load balancer
    Fixes and refactoring
    
    * rawx: fixed error message
    * rawx: fixed error message + fixed useless case-sensitivity management
    * proxy: cuts the crap from several error messages
    * m2v2: unreached code removed from alias deletion
    * m2v2: minor cosmetic change
    * core/sds: enables tracing RAWX requests for highest verbosity
    * proxy: re-enables case sensitive prefix matching in headers (brings more robustness)
    * core/sds: checks for content_id's format
    * core/sds: new feature to mangle the case of http headers (proxy,
      rawx). Mangling disabled by default, activated in tests.
    * core/tool_roundtrip: activates the mangling of headers case
    * core: fake chunksnb sent
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    lb: implement 'weak' distance criteria
    
    New 'weak' option to data treatments, allowing to relax the distance
    requirements if they were not satisfiable. This allows requiring more
    chunks than the number of services locations. Note that using this
    option may lead to unbalanced situations.
    lb: better error messages (#570)
    
    Fix #567
    Change event names
    
    - "meta1" prefix removed
    - "meta2" prefix replaced by "storage"
    - "rawx" prefix replaced by "storage"
    - "container.create" replaced by "container.new"
    - "container.destroy" replaced by "container.deleted"
    - "chunk.delete" replaced by "chunk.deleted"
    m2v2: avoids 4 syscalls upon a M2_PREP
    m2: fix memleak, invalid read, replace some memmove by memcpy
    m2: add a cache of DB entries required for M2_PREPARE
    
    This prevents opening the database in most cases,
    and thus saves IO.
    m2,events: new function send overwritable events with delay
    
    This will reduce the number of events sent by meta2 to account-server:
    maximum one event by container each second.
    events: insulates module, adds beanstalkd implementation
    m2: escape container URL fields in JSON events
    m2v2: adds ISEMPTY feature, fixes DESTROY
    
    * DESTROY is now only local and the event emission is explicitely asked by the client
    * ISEMPTY quickly checks if any chunk is present
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    Useless/Unused functions removed
    proxy: container/destroy plainly destroys the containers and their references
    
    * a container destruction is now: 1/freeze 2/flush 3/unlink 4/destroy(local)
    * meta2 slighty simplified around PURGE/DEDUP/FLUSH, where the dry_run options have disappeared.
    sqliterepo: interface reduction
    
    Attempt to simplify the code before re-organizing it into pseudo-objects suitable for tests.
    sqliterepo: speed-up the schema checks
    
    * sqliterepo: the checks of the schema are now performed with lowered security, to avoid useless transaction syncs.
    * sqliterepo: got rid of the useless "version" provided when checking for the schema
    * meta0: removed the useless "vacuum" in the schema.
    * meta0/meta1/sqlx/tests: adapted to the changes previously listed.
    metautils+meta2: unused code removed
    Hook'able clock function now used everywhere
    Dropped the dependency to the Linux's specific clock functions.
    m2v2: adapted to the presence CONTENT in oio_url.
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    m2v2: fixed hardcoded SQL statements
    
    Adapted to the latest M2 schema.
    m2v2: code simplifications and memleaks fixes around namespace_info structures
    m2v2: make the functional tests pass.
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    3rd cleanup : unused m2v2 code
    
    Code now unused since the only caller have been removed (client, m1v2).
    core : explicit content links implemented.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    m2v2: fixed forgotten db insertion of containers metadata, at its creation.
    meta2v2: fixes event secing upon a container's destruction
    m1v2: now able replace all the properties on a reference with a new set.
    
    This is consistent with meta2 and sqlx : set + flush.
    Flushing and setting an empty array give the same result as calling a delete.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    meta2: fixed events generation when containers are created and destroyed.
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    m2v2: when listing a container's aliases, the container's metadata are also returned.
    
    In addition, unused code have been pruned from meta2.
    That code has been released with integrity-loop's removal.
    fixed sizes when declaring buffers.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    m2v2 : fixed output JSON for container states.
    Versioning & Events reviwed upon a PUT
    m2v2 : Unused functions removed.
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    Slab allocation for small structures + ASN.1 message simplification
    Versioning & Events reviwed upon a PUT
    m2v2 : Unused functions removed.
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    Slab allocation for small structures + ASN.1 message simplification
    m2v2: event format reviewed.
    
    Currently manages container creation and content update.
    Cleanup, round 6
    
    * path to sqlite bases unified and simplified. It should also plainly manage several containers for the same user.
    * warnings removed.
    * useless comments removed.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Fixed memory leaks.
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    m2v2 + sqlx + proxy : set properties on contents and containers now manage a flush options and deletion by null value.
    m2v2: unused features removed.
    m2v2: container's ctime now set at container's creation.
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    Content propeties reviewed + Cleanup, round 2
    Request-Id now managed in clients and servers
    
    * transmitted via a thread-local data
    * explicit ID eliminated from remote API (m2v2) + caller code adapted
    * in servers, collected from incoming requests, propagated to outgoing requests.
    * set to a random value when not set.
    m2v2: checks moved to the integrity loop
    
    The library part of m2v2 responsible of checks beans integrity was unused in m2v2 and has been moved to integrity/lib
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    metautils: modularize the notification system
    
    Change-Id: I6a75473a16c3f4973f0ff0dd4ab349c47d170664
    
    Conflicts:
            CMakeLists.txt
            meta2v2/meta2_backend.h
            metautils/lib/CMakeLists.txt
            metautils/lib/event_config.c
            metautils/lib/notifications.c
    OpenIO is lifting off now !
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    m2v2: enable/disable Kafka events from conscience conf
    
    and fix memory leaks and disable Kafka events for local bases
    
    To enable Kafka events from conscience configuration, for all namespaces:
      param_option.event_config.meta2 = kafka_enabled=true;kafka_topic=TOPIC
    
    To enable Kafka events from conscience configuration, for a namespace
    and all its virtual sub-namespaces:
      param_option.NAMESPACE_event_config.meta2 = kafka_enabled=true;kafka_topic=TOPIC
    
    kafka_topic is optional and defaults to "redc.meta2"
    
    Change-Id: I7ea1094e24e5029cfcad46c031db35ba99f2eb47
    m2v2: generate event on alias copy and chunk substitution
    
    Change-Id: Ic7a481e65e82cc1566e5cbb286cd8fff818f12f5
    (cherry picked from commit 9375390be5bb8fbbcf693ad649ab26130d697510)
    m2v2: fix Kafka events for append operations
    
    (cherry picked from commit 59938c74c3d71c757293901c586d763e30a5b376)
    
    Conflicts:
            meta2v2/meta2_filters_action_content.c
            meta2v2/meta2_filters_misc.c
    
    Change-Id: Ie88cf3218b1c4875f48d9503b267fa0e50675edf
    m2v2: send CREATE and DESTROY events to Kafka
    
    (cherry picked from commit b42f472c26a1562ced61f4e4b16a6729338a9ca4)
    
    Change-Id: I3e32f2153bd883aa17d8cb79da8ef7de0f61c635
    m2v2: send PUT and DELETE events to Kafka
    
    Requires librdkafka (https://github.com/edenhill/librdkafka)
    
    (cherry picked from commit 0335953e049f470800449b4709d5e58f5cbb8abf)
    
    Change-Id: Iaff434c63828cee8bfe8044c0332a76861e54829
    (FVE & GLA) : local base creation + operations allowed on local bases
    
    allow BEANS, PUT, GET, LIST and DELETE on local bases.
    
    Change-Id: I07b0e38352f9e4a3a4c1dd3031e9270ebd800d36
    (FVE & GLA) : local base creation + operations allowed on local bases
    
    allow BEANS, PUT, GET, LIST and DELETE on local bases.
    
    Change-Id: I783322d68d407f32bd9da68b16da90e50ede239b
    Now well check for content's presence upon APPEND + version(0)
    Merges the promoter's changes.
    
      * client/c: adapt rainx_remote for future use
      * Remove meta2_container_services from installed binaries in honeycomb.spec
      * cluster/lib : Fixed memory when there is no /etc/gridstorage.conf
      * m2v2: minor safety fix for chunk substitution
      * metautils / sockets : Fixed return code check.
    2014-06-19 update from the promoter's version.
    
      * cleanup (paths, includes, macros)
      * m2v1: fix warnings
      * conscience: fix (warn on custom NONE stgpol)
      * sqliterepo: add check of redirection target (in debug mode)
      * m2v2: add retry loop for self redirections
      * c client: replaced some g_print by GRID_INFO to allow quiet mode
      * c client: add message on container destroy success
      * sqliterepo: leave election if no peers found in defer_USE
      * client/c: if m2 is replicated, make client retry
      * m2v2: handle error on exit_election
      * conscience: add check on VNS chunk_size
      * sqliterepo: fix leak
      * m2v2, c client: implement TO-HONEYCOMB-713 (chunk_size per VNS)
      * m2v2: fix TO-HONEYCOMB-715 (error after destroying not empty container)
      * sqliterepo, m2v2: improve debug traces
      * metautils: new function to compute printable thread id
      * c client: fix typo in get_virtual_namespace
      * sqliterepo: call malloc_trim after expiring bases
      * c client: fixed physical/virtual namespace confusions
      * rawx-lib: improved recovery of truncated chunks
      * rawx-lib: new options for gs_uncompress (log4c and keep_pending)
      * gridd: Fixed typo
      * gridd: timeout for idle connection is now configurable, and even disableable.
      * client : feature to change the VNS of an established client
      * replicator : VNS are now partially managed (only containers and contents) container_events are not yet supported.
      * metautils : CID computation more robust
      * meta2 / module : events when SLAVE ns + container's VNS in events instead of service's NS.
      * meta2 / lib : backend feature to get the VNS of a container
      * rawx-lib : fixed attr checks
      * cluster/dummy_service : annoying output level-lowered
      * gridd: annoying trace level-lowered
      * metautils: fix copy of chunk.metadata when its length is 0.(cherry picked from commit f5011e6d305b974319062084eac52f950a2d0270)
      * meta2: fixed TO-HONEYCOMB-678 (append on dup chunks)
      * saver: fixed TO-HONEYCOMB-677 (tsmx service not unlinked)
      * saver: now able to manage content delete events (to be tested)
      * saver: now able to make difference between PUT events and the other
      * Fixed relative #include path, that path doesn't allow a graceful split between the OSS/Proprietary parts.
      * m2v2: remove call to sleep in purge
    m2v2: fix replicated destroy
    
    Merged WL's fixes of the day
    1.8.4 release candidate
    Initial commit
    meta2: remove unused macros
    m2: advertize a bucket name in container events
    
    In case a container is actually a shard of a larger bucket, this will
    allow event listeners to aggregate statistics from all shards.
    
    Jira: OB-501
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    meta2: Send event with the number of damaged objects
    Update Copyright
    meta2: Send event with the number of missing chunks
    Update the copyright
    proxy, meta2: Remove 'content/link'
    meta2: Purge alias
    meta2: Delete exceeding versions when adding a new alias
    meta2: get rid of M2_LEAVE RPC
    
    This was used to workaround resolver cache issues. But since we reduced
    usage of resolver cache, we don't need it anymore.
    Meta2: Accept "local" argument to open local database
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    Adapt the code to the central config
    m2: implement simple object counter
    
    Count the number of entries in "contents" table of each container
    and save it under key "sys.m2.objects" in admin table.
    
    Next step is to count object per storage policy.
    meta2: unused code removed
    m2,proxy: implement content truncate operation
    Change event names
    
    - "meta1" prefix removed
    - "meta2" prefix replaced by "storage"
    - "rawx" prefix replaced by "storage"
    - "container.create" replaced by "container.new"
    - "container.destroy" replaced by "container.deleted"
    - "chunk.delete" replaced by "chunk.deleted"
    m2v2: adds ISEMPTY feature, fixes DESTROY
    
    * DESTROY is now only local and the event emission is explicitely asked by the client
    * ISEMPTY quickly checks if any chunk is present
    proxy: container/destroy plainly destroys the containers and their references
    
    * a container destruction is now: 1/freeze 2/flush 3/unlink 4/destroy(local)
    * meta2 slighty simplified around PURGE/DEDUP/FLUSH, where the dry_run options have disappeared.
    m{0,1,2}v2: shortened requests names
    metautils+meta2: unused code removed
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    3rd cleanup : unused m2v2 code
    
    Code now unused since the only caller have been removed (client, m1v2).
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    sdk: new feature to collect all the compile-time configuration variables.
    
    * Compile-time options gathered in metautils
    * SDK extended with a new function
    * new sds/oio_config tool to dump the config.
    * unused CMake directives and/or macros pruned.
    sdk: new feature to collect all the compile-time configuration variables.
    
    * Compile-time options gathered in metautils
    * SDK extended with a new function
    * new sds/oio_config tool to dump the config.
    m2v2: when listing a container's aliases, the container's metadata are also returned.
    
    In addition, unused code have been pruned from meta2.
    That code has been released with integrity-loop's removal.
    Centralized macros, shorter values.
    m2v2 : Unused functions removed.
    m2v2 : Unused functions removed.
    Further step in account/user implementation.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    m2v2: container's ctime now set at container's creation.
    Content propeties reviewed + Cleanup, round 2
    m2v2: macros exported, propdel(*) now implemented.
    OpenIO is lifting off now !
    Merges the promoter's changes.
    
      * client/c: adapt rainx_remote for future use
      * Remove meta2_container_services from installed binaries in honeycomb.spec
      * cluster/lib : Fixed memory when there is no /etc/gridstorage.conf
      * m2v2: minor safety fix for chunk substitution
      * metautils / sockets : Fixed return code check.
    1.8.4 release candidate
    Initial commit
    m2: reduce the number of memory allocations
    cmake: Reorganize the targets
    
    * do not list headers, as it is recommended
    * drop the dependency to sqlite3 in oio-proxy
    m2: allow NULL values for byte array fields
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 71bb78587b2806a69842e004fbec9740afbf4177)
    Fix compilation issues with GCC 7
    meta2: Remove unused code
    meta2: Better bean substitution
    
    Avoid inserting when the original bean is not present. Return an error
    if absent.
    meta2: Reduce the number of calls to realloc() and strlen()
    Fixes and refactoring
    
    * rawx: fixed error message
    * rawx: fixed error message + fixed useless case-sensitivity management
    * proxy: cuts the crap from several error messages
    * m2v2: unreached code removed from alias deletion
    * m2v2: minor cosmetic change
    * core/sds: enables tracing RAWX requests for highest verbosity
    * proxy: re-enables case sensitive prefix matching in headers (brings more robustness)
    * core/sds: checks for content_id's format
    * core/sds: new feature to mangle the case of http headers (proxy,
      rawx). Mangling disabled by default, activated in tests.
    * core/tool_roundtrip: activates the mangling of headers case
    * core: fake chunksnb sent
    Benefits from optimized strcmp() when case sensitivity is not worth (#578)
    m2v2: reduces the huge number of hidden calls to strlen()
    
    A lot of strings lengths can be determined at compile-time.
    m2v2: avoids 4 syscalls upon a M2_PREP
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    Hook'able clock function now used everywhere
    Dropped the dependency to the Linux's specific clock functions.
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    m2v2: INSERT code now generated for beans
    Fixed warnings (unused symbols)
    Fixes, improvements
    
    m2v2: fixed "bean leak" when purging exceeding aliases (properties not removed).
    m2v2: fixed "bean leak" when deleting explicit aliases (properties not removed).
    proxy: Fixed compile-time warnings
    proxy: properties returned in headers when getting objects
    proxy: headers matching now case-insensitive
    proxy: In addition, request handlers returning invariable and dummy outputs (empty lists, empty sets) now return nothing.
    tools: bootstrap doesn't deploy the admin flask (it is destined to disappear in the next release and is already used by no one).
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Versioning & Events reviwed upon a PUT
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    Versioning & Events reviwed upon a PUT
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    Several fixes around factorized code.
    Content propeties reviewed + Cleanup, round 2
    m2v2: do not crash on corrupted base, return an error
    
    Change-Id: Ie0e612948422296b27d604c46f9e7929dbcb4a0a
    OpenIO is lifting off now !
    m2v2 : fixed logging domain
    
    Change-Id: I5124b514ab11bae9150c5f59ca11503c8b142c15
    1.8.4 release candidate
    Initial commit
    m2: reduce the number of memory allocations
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta2: Remove unused code
    meta2: Better bean substitution
    
    Avoid inserting when the original bean is not present. Return an error
    if absent.
    m2v2: reduces the huge number of hidden calls to strlen()
    
    A lot of strings lengths can be determined at compile-time.
    m2v2: avoids 4 syscalls upon a M2_PREP
    m2v2: INSERT code now generated for beans
    Fixes, improvements
    
    m2v2: fixed "bean leak" when purging exceeding aliases (properties not removed).
    m2v2: fixed "bean leak" when deleting explicit aliases (properties not removed).
    proxy: Fixed compile-time warnings
    proxy: properties returned in headers when getting objects
    proxy: headers matching now case-insensitive
    proxy: In addition, request handlers returning invariable and dummy outputs (empty lists, empty sets) now return nothing.
    tools: bootstrap doesn't deploy the admin flask (it is destined to disappear in the next release and is already used by no one).
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    Versioning & Events reviwed upon a PUT
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    Versioning & Events reviwed upon a PUT
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    Several fixes around factorized code.
    OpenIO is lifting off now !
    m2v2: added fields order in beans
    
    Necessary for efficient comparisons.
    
    Change-Id: Iafa21e9c69d8f1dfab16b89e310d03d3b3a3dafa
    1.8.4 release candidate
    Initial commit
    m2: reduce the number of memory allocations
    cmake: Reorganize the targets
    
    * do not list headers, as it is recommended
    * drop the dependency to sqlite3 in oio-proxy
    meta2: generate less unused code
    meta2: Prepend a License preamble in the generated files
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta2: Explicit error management in generated statements
    meta2: Better bean substitution
    
    Avoid inserting when the original bean is not present. Return an error
    if absent.
    meta2: Reduce the number of calls to realloc() and strlen()
    meta2: code generation with less warnings
    Fucking PEP8 compliance
    m2v2: reduces the huge number of hidden calls to strlen()
    
    A lot of strings lengths can be determined at compile-time.
    m2v2: INSERT code now generated for beans
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    use /usr/bin/env for python scripts shebangs
    Fixes, improvements
    
    m2v2: fixed "bean leak" when purging exceeding aliases (properties not removed).
    m2v2: fixed "bean leak" when deleting explicit aliases (properties not removed).
    proxy: Fixed compile-time warnings
    proxy: properties returned in headers when getting objects
    proxy: headers matching now case-insensitive
    proxy: In addition, request handlers returning invariable and dummy outputs (empty lists, empty sets) now return nothing.
    tools: bootstrap doesn't deploy the admin flask (it is destined to disappear in the next release and is already used by no one).
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    m2v2: unused snapshots removed from compilation targets.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    m2v2: unused snapshots removed from compilation targets.
    Content propeties reviewed + Cleanup, round 2
    OpenIO is lifting off now !
    m2v2: added fields order in beans
    
    Necessary for efficient comparisons.
    
    Change-Id: Iafa21e9c69d8f1dfab16b89e310d03d3b3a3dafa
    1.8.4 release candidate
    Initial commit
    cmake: Only install prod-related tools in other build types than Debug
    meta2: Use the LB in the proxy
    Reorganize the libraries, Avoid a loop on the proxy
    cmake: Reorganize the targets
    
    * do not list headers, as it is recommended
    * drop the dependency to sqlite3 in oio-proxy
    meta2: Drop the unused content deduplication
    Build & Use static libraries
    cmake: Explicit the ABI version of each shared library
    meta2: get rid of M2_LEAVE RPC
    
    This was used to workaround resolver cache issues. But since we reduced
    usage of resolver cache, we don't need it anymore.
    meta2,cluster: Move 2 variables to the central config facility
    
    In addition, insulates the variables dedicated to meta2 in the
    libmeta2backend, so that only the meta2 services see them.
    coverage: Avoid files generated by asn1c
    
    These files contain a lot of unused code.
    Adapt the code to the central config
    meta2: Implement /content/touch
    
    A.k.a. M2_CTOUCH, "meta2 content touch".
    Immediately drops an event into the queue (currently: beanstald).
    cmake: added 'Werror' in CFLAGS where there is no warning
    
    Warnings are the voice of Evil.
    
    Let's try to avoid them on targets already clean.
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    4th cleanup, unused code purged from metautils
    3rd cleanup : unused m2v2 code
    
    Code now unused since the only caller have been removed (client, m1v2).
    1st cleanup : client, rawx-client, gridd/client
    
    * client/c/lib has been replaced by core/sds (pure http/json client)
    * rawx-client was not used
    * gridd/client has been replaced by tools/oio-tool
    * some metautils have been gathered in a single tool: oio-tool
    remove meta2 deprecated converter tests
    cmake: G_LOG_DOMAIN set at cmake's level.
    SSL replaced by GLib equivalent.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    Content propeties reviewed + Cleanup, round 2
    m2v2: checks moved to the integrity loop
    
    The library part of m2v2 responsible of checks beans integrity was unused in m2v2 and has been moved to integrity/lib
    Disable checks on beans upon PUT/APPEND/UPDATE.
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    "Custom vs Standard" paths reviewed.
    
    json-c and rdkafka management now better taken into account.
    This allows compiling on a ubuntu server as weel as on a centos distribution.
    
    Change-Id: I1c8adf8ab213c2a7d4927fbbe1e031dc782792ea
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    m2v2: generate sequence number for events
    
    (cherry picked from commit 0836c04e6f660554bc5de4a4a51025ffc07bb5f6)
    
    Change-Id: I7bc6ecb9fcfeee0103ffce5c039eedc182608150
    m2v2: send PUT and DELETE events to Kafka
    
    Requires librdkafka (https://github.com/edenhill/librdkafka)
    
    (cherry picked from commit 0335953e049f470800449b4709d5e58f5cbb8abf)
    
    Change-Id: Iaff434c63828cee8bfe8044c0332a76861e54829
    m2v2: new functions to serialize to JSON
    Clean licenses declaration
    
    Change-Id: I879929648e33ba9a8021b8dd864267e87642c5bb
    m2v2: new functions to serialize to JSON
    Clean licenses declaration
    
    Change-Id: I8feb0aaff29487a09a222dcbb89f2b27b6613230
    Binary installation names reviewed.
    1.8.4 release candidate
    Initial commit
    meta2: Fix the compilation (unused parameter)
    
    It happened CMAKE_BUILD_TYPE=Release and has been introduced with
    the commit ID fd3f4cb5c4750e0fd2494a22810a30fac26f1b5f (#2080)
    Remove unsupported backblaze integration
    core: Fix the LB on local services (#1862)
    
    * Also also the placement of spare chunks on the local proxy.
    * core: Use service addr instead of ID for their unique key
    * lb: Pass debug message in TRACE level and restore fast lookups
    * oio-reset: Deploy a proxy with a location
    * Fix compilation warnings
    Allow to place some chunks locally to the proxy
    Meta2: Reduce the exposure of bean generation functions
    m2: return quality of chunks in spare chunk requests
    m2: improve spare chunk request error messages
    core/lb: keep track of the quality of selected services
    Core/lb: Associate UUID with addr
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core/lb: better error handling, warn if flawed
    Event-handler, oio-blob-rebuilder: use beanstalkd to recreate chunks
    
    Correct meta2 spare chunk error: now when the number in the blacklist
    is equal to the number of chunk for the storage policy return a 400 error
    
    Event-handler write in a beanstald's tube the missing chunks
    
    oio-blob-rebuilder: now we have to specify the way we want to get the list
    of chunks to rebuild
    core,m2: fix spare chunk requests
    Review storage policy and service pool configuration
    m2v2: integrate new load balancer
    lb: review for more efficiency
    meta2v2 + metautils : add backblaze compatibility
    tools/oio-bootstrap.py : adding two fields to add backblaze compatibility
    Fixes and refactoring
    
    * rawx: fixed error message
    * rawx: fixed error message + fixed useless case-sensitivity management
    * proxy: cuts the crap from several error messages
    * m2v2: unreached code removed from alias deletion
    * m2v2: minor cosmetic change
    * core/sds: enables tracing RAWX requests for highest verbosity
    * proxy: re-enables case sensitive prefix matching in headers (brings more robustness)
    * core/sds: checks for content_id's format
    * core/sds: new feature to mangle the case of http headers (proxy,
      rawx). Mangling disabled by default, activated in tests.
    * core/tool_roundtrip: activates the mangling of headers case
    * core: fake chunksnb sent
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    lb: implement 'weak' distance criteria
    
    New 'weak' option to data treatments, allowing to relax the distance
    requirements if they were not satisfiable. This allows requiring more
    chunks than the number of services locations. Note that using this
    option may lead to unbalanced situations.
    lb: better error messages (#570)
    
    Fix #567
    m2v2: avoids 4 syscalls upon a M2_PREP
    M2V2: shortened chunks URL
    
    7 bytes saved in each each entry with the removal of the 'http://' prefix (plus its footprint in the index).
    4th cleanup, unused code purged from metautils
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    fixed sizes when declaring buffers.
    OpenIO is lifting off now !
    1.8.4 release candidate
    meta2: Remove unused code
    meta2: Load policy when parsing JSON content header
    meta2: implement warn_dist mechanisms
    meta2: parse chunk qualities, send event if required
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Python API: add support for versions in object lists
    Hook'able clock function now used everywhere
    m2v2: fixed JSON parsing
    json: latest function used (m2v2, proxy, metautils)
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Replaced some deprecated symbols from json-c (json_object_object_get)
    fix include for json-c lib
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    OpenIO is lifting off now !
    "Custom vs Standard" paths reviewed.
    
    json-c and rdkafka management now better taken into account.
    This allows compiling on a ubuntu server as weel as on a centos distribution.
    
    Change-Id: I1c8adf8ab213c2a7d4927fbbe1e031dc782792ea
    m2v2: new functions to serialize to JSON
    Clean licenses declaration
    
    Change-Id: I879929648e33ba9a8021b8dd864267e87642c5bb
    m2v2: new functions to serialize to JSON
    Clean licenses declaration
    
    Change-Id: I8feb0aaff29487a09a222dcbb89f2b27b6613230
    core: Fix the LB on local services (#1862)
    
    * Also also the placement of spare chunks on the local proxy.
    * core: Use service addr instead of ID for their unique key
    * lb: Pass debug message in TRACE level and restore fast lookups
    * oio-reset: Deploy a proxy with a location
    * Fix compilation warnings
    Allow to place some chunks locally to the proxy
    proxy: Handle /content/spare locally, no meta2 involved
    Meta2: Reduce the exposure of bean generation functions
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core,m2: fix spare chunk requests
    m2v2: integrate new load balancer
    lb: implement 'weak' distance criteria
    
    New 'weak' option to data treatments, allowing to relax the distance
    requirements if they were not satisfiable. This allows requiring more
    chunks than the number of services locations. Note that using this
    option may lead to unbalanced situations.
    m2v2: avoids 4 syscalls upon a M2_PREP
    OpenIO is lifting off now !
    1.8.4 release candidate
    sqliterepo: Remove unused struct fields
    
    Also touches meta0, meta1, meta2
    sqliterepo: Remove dead code to upgrade from meta2v1 to meta2v2
    sqliterepo: Send event for each deleted meta2 database
    sqliterepo: Return 404 when the container created but not initiated
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    sqliterepo: Notify the changes of database properties
    meta2: Use one notifier per topic
    Stop accepting composed service types
    Python API, rdir: document
    core, meta2, proxy, tests: rename things
    meta2: support use of ServiceId
    
    meta-server now support ServiceId option on command line
    (but it should be used only by meta2)
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta2,cluster: Move 2 variables to the central config facility
    
    In addition, insulates the variables dedicated to meta2 in the
    libmeta2backend, so that only the meta2 services see them.
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    meta2: Rely on the LB reloading proposed by sqlx_service
    
    While following the goal to reduce the bad cache effects, it seems
    necessary to cut the repeated code that impacts caching effects.
    Avoid allocating memory for small strings with a bounded size
    
    Rather use character arrays located on the stack or inlined into their
    owner structures.
    config: Manage a second batch of variables
    Adapt the code to the central config
    meta2: Rely on the LB reloading proposed by sqlx_service
    
    While following the goal to reduce the bad cache effects, it seems
    necessary to cut the repeated code that impacts caching effects.
    m0,m1,m2,sqlx: use local peers if available
    meta1,meta2,proxy: Enables the faulty peers avoidance
    
    Triggered if actived in the system-wide configuration of the namespace.
    m2: re-establish sqlx change callback
    
    This is needed in order to recompute prepare data after sqlx level
    admin table changes (e.g. quota or storage policy modification).
    
    DOES NOT WORK WHEN META2 IS NOT REPLICATED!
    m2: fix prepare data update when not replicated (fix #739)
    proxy: empty resolver cache when error is 'prefix not managed'
    meta2: empty meta2 cache when error is 'prefix not managed'
    meta1: reload prefixes when error is 'prefix not managed'
    Review storage policy and service pool configuration
    proxy: integrate new load balancer
    m2v2: integrate new load balancer
    m2: add a cache of DB entries required for M2_PREPARE
    
    This prevents opening the database in most cases,
    and thus saves IO.
    sqliterepo/election: memleak chased
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    sqliterepo: fix lack of decache upon a GETVERS error
    
    Avoids recreate deleted bases.
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    Fixed several optimisations around up/down services
    
    There were partition/shuffle problems when looping on lists of services.
    * the ok/nok qualification of services didn't work (in the resolver)
    * the shuffling was potentially broken by a subsequent partition ok ok/nok services.
    * both weren't called at all in several cases.
    Dropped the dependency to the Linux's specific clock functions.
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    m2v2: code simplifications and memleaks fixes around namespace_info structures
    3rd cleanup : unused m2v2 code
    
    Code now unused since the only caller have been removed (client, m1v2).
    Speeds up the startup of services.
    
    More agressive delays for:
    * LB refresh
    * prefix loading in meta1
    
    The period between the iterations is shortened until the first success.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Cleanup, round 6
    
    * path to sqlite bases unified and simplified. It should also plainly manage several containers for the same user.
    * warnings removed.
    * useless comments removed.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    m2v2: uses ZMQ 3.X instead of ZMQ 4.X
    
    Uses symbols deprecated but still present in ZMQ 4
    Fixed memory leaks.
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    sqliterepo,sqlx,m2v2: fix election problems after move.
    
    Allow get_peers to bypass meta1 cache in sqlx and meta2v2.
    Add SQLX_EXITELECTION request in sqlx-based services.
    
    Change-Id: Ife2760bc869376c3b793950fca2fa703ca23bec9
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    m2v2: enable/disable Kafka events from conscience conf
    
    and fix memory leaks and disable Kafka events for local bases
    
    To enable Kafka events from conscience configuration, for all namespaces:
      param_option.event_config.meta2 = kafka_enabled=true;kafka_topic=TOPIC
    
    To enable Kafka events from conscience configuration, for a namespace
    and all its virtual sub-namespaces:
      param_option.NAMESPACE_event_config.meta2 = kafka_enabled=true;kafka_topic=TOPIC
    
    kafka_topic is optional and defaults to "redc.meta2"
    
    Change-Id: I7ea1094e24e5029cfcad46c031db35ba99f2eb47
    m2v2: send CREATE and DESTROY events to Kafka
    
    (cherry picked from commit b42f472c26a1562ced61f4e4b16a6729338a9ca4)
    
    Change-Id: I3e32f2153bd883aa17d8cb79da8ef7de0f61c635
    m2v2: send PUT and DELETE events to Kafka
    
    Requires librdkafka (https://github.com/edenhill/librdkafka)
    
    (cherry picked from commit 0335953e049f470800449b4709d5e58f5cbb8abf)
    
    Change-Id: Iaff434c63828cee8bfe8044c0332a76861e54829
    2014-06-19 update from the promoter's version.
    
      * cleanup (paths, includes, macros)
      * m2v1: fix warnings
      * conscience: fix (warn on custom NONE stgpol)
      * sqliterepo: add check of redirection target (in debug mode)
      * m2v2: add retry loop for self redirections
      * c client: replaced some g_print by GRID_INFO to allow quiet mode
      * c client: add message on container destroy success
      * sqliterepo: leave election if no peers found in defer_USE
      * client/c: if m2 is replicated, make client retry
      * m2v2: handle error on exit_election
      * conscience: add check on VNS chunk_size
      * sqliterepo: fix leak
      * m2v2, c client: implement TO-HONEYCOMB-713 (chunk_size per VNS)
      * m2v2: fix TO-HONEYCOMB-715 (error after destroying not empty container)
      * sqliterepo, m2v2: improve debug traces
      * metautils: new function to compute printable thread id
      * c client: fix typo in get_virtual_namespace
      * sqliterepo: call malloc_trim after expiring bases
      * c client: fixed physical/virtual namespace confusions
      * rawx-lib: improved recovery of truncated chunks
      * rawx-lib: new options for gs_uncompress (log4c and keep_pending)
      * gridd: Fixed typo
      * gridd: timeout for idle connection is now configurable, and even disableable.
      * client : feature to change the VNS of an established client
      * replicator : VNS are now partially managed (only containers and contents) container_events are not yet supported.
      * metautils : CID computation more robust
      * meta2 / module : events when SLAVE ns + container's VNS in events instead of service's NS.
      * meta2 / lib : backend feature to get the VNS of a container
      * rawx-lib : fixed attr checks
      * cluster/dummy_service : annoying output level-lowered
      * gridd: annoying trace level-lowered
      * metautils: fix copy of chunk.metadata when its length is 0.(cherry picked from commit f5011e6d305b974319062084eac52f950a2d0270)
      * meta2: fixed TO-HONEYCOMB-678 (append on dup chunks)
      * saver: fixed TO-HONEYCOMB-677 (tsmx service not unlinked)
      * saver: now able to manage content delete events (to be tested)
      * saver: now able to make difference between PUT events and the other
      * Fixed relative #include path, that path doesn't allow a graceful split between the OSS/Proprietary parts.
      * m2v2: remove call to sleep in purge
    1.8.4 release candidate
    Initial commit
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    meta2: Allow to add delete marker to a specific version
    meta2: Allow to simulate versioning when creating and deleting an object
    Update max_versions of container from header
    
    This commit introduce possibility to update max_versions when creating
    object:
    this is useful for container created through autocreate functionality:
    for Container Hierarchy, enabling versioning is set on root container,
    it is not possible to parse all container to update value and
    for performance, a dedicated request to update container is skipped
    (as a lot of upload may occurs at same time)
    
    If header `x-oio-force-versioning` is received,
    the max_versions is updated before completing
    object (to keep mecanism to delete prior object if needed)
    Allow listing to be done on master service only
    
    For several operations, when a list is done just after an object
    deletion, the listing operation may occur on a slave which has not been
    synchronized yet.
    meta2: Add User-Agent to the events
    meta2: Allow to change the policy of an object
    core,m1,m2: check container name is valid UTF-8
    
    Jira: OS-100
    proxy, meta2: Remove 'content/copy'
    Purge with a fixed number of versions
    meta2: consider WORM mode also for PUT operations
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta2v2: check validity of oio_url
    
    The namespace is not checked with oio_url_check as
    a dedicated filter already check it.
    Adapt the code to the central config
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    Implement metachunk replacement
    
    This will allow optimized random writes (to change 1 byte, you will
    have to download and reupload only 1 metachunk, not the whole content).
    m2v2: adds ISEMPTY feature, fixes DESTROY
    
    * DESTROY is now only local and the event emission is explicitely asked by the client
    * ISEMPTY quickly checks if any chunk is present
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    m2v2: yet another fix on a nested func
    m2v2: nested func made static
    
    Even if the function didn't its wrapper's context, it failed when compiled with recent GCC.
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    3rd cleanup : unused m2v2 code
    
    Code now unused since the only caller have been removed (client, m1v2).
    m2v2: fixed both a memleak and a potential segfault.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Centralized macros, shorter values.
    Minor code and macros factorisation
    Message handling functions refatored
    
    * Useless / unused functions removed.
    * Signatures more intuitive.
    * code factorized.
    m2v2 : Unused functions removed.
    m2v2 : Unused functions removed.
    m2v2: fixed missing/bad return codes
    Further step in account/user implementation.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    m2v2 + sqlx + proxy : set properties on contents and containers now manage a flush options and deletion by null value.
    Content propeties reviewed + Cleanup, round 2
    m2v2: macros exported, propdel(*) now implemented.
    OpenIO is lifting off now !
    m2v2: add detection of container id in URL
    and fix M2V2_GET when called with container id only
    
    Change-Id: I52093eae4ba3178bbd965227110792a9ccf90063
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    (FVE & GLA) : local base creation + operations allowed on local bases
    
    allow BEANS, PUT, GET, LIST and DELETE on local bases.
    
    Change-Id: I07b0e38352f9e4a3a4c1dd3031e9270ebd800d36
    (FVE & GLA) : local base creation + operations allowed on local bases
    
    allow BEANS, PUT, GET, LIST and DELETE on local bases.
    
    Change-Id: I783322d68d407f32bd9da68b16da90e50ede239b
    Merges the promoter's changes.
    
      * client/c: adapt rainx_remote for future use
      * Remove meta2_container_services from installed binaries in honeycomb.spec
      * cluster/lib : Fixed memory when there is no /etc/gridstorage.conf
      * m2v2: minor safety fix for chunk substitution
      * metautils / sockets : Fixed return code check.
    c client: use libcurl instead of threads + rain bugfix
    1.8.4 release candidate
    Initial commit
    meta2: Remove unused code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    m1v2: now able replace all the properties on a reference with a new set.
    
    This is consistent with meta2 and sqlx : set + flush.
    Flushing and setting an empty array give the same result as calling a delete.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    meta2: Use one notifier per topic
    meta2: consider WORM mode also for PUT operations
    meta2, proxy: return 405 on unallowed WORM mode op
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta2,cluster: Move 2 variables to the central config facility
    
    In addition, insulates the variables dedicated to meta2 in the
    libmeta2backend, so that only the meta2 services see them.
    meta2,conf: Move 2 nsinfo options to the central config facility
    
    oio_ns_mode_worm, meta2_container_max_size
    Adapt the code to the central config
    meta2: fixes a memleak when checking for the MASTER state of a NS.
    core,m2: replace metautils_cfg_get_bool by oio_str_parse_bool
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    events: insulates module, adds beanstalkd implementation
    m2v2: checks for events queue's availability
    m2v2: checks for events queue's availability
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    m2v2 : Unused functions removed.
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    m2v2 : Unused functions removed.
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    m2v2: fixed missing/bad return codes
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    m2v2: macros exported, propdel(*) now implemented.
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    1.8.4 release candidate
    Initial commit
    meta2: Remove unused code
    meta2: Send deferred events only if there are no errors
    meta2: Send the version of the deleted object into the event
    
    In particular, when we add a delete marker,
    we do not have to send the version of the delete marker.
    meta2: Allow to add delete marker to a specific version
    m2: send notifications for deleted properties
    
    Property that have changed (creation, modification or deletion) are now
    properly reported in storage.content.new and storage.content.update
    events.
    - A property with a value indicates a creation or modification
      (the value is the new one).
    - A property with a null value indicates a deletion.
    
    Fixes: #1667
    meta2: Use one notifier per topic
    Update Copyright
    meta2: Increase missing chunks when creating an object
    meta2: fix order of events
    meta2: Send event to notify the modification of properties
    
    (cherry picked from commit 7057a1e53d46fceadde84e68e06b5cbd4c085c31)
    meta2: Allow to change the policy of an object
    meta2: Create a message for the event only if the content is incomplete
    meta2: parse chunk qualities, send event if required
    Python API, meta2: forward special property beans
    
    Jira: R1810-27
    meta2: Send event to notify the modification of properties
    event: Fix the number of parts
    event: Select the alias correctly
    meta2: Send an event with the correct URL
    Update the copyright
    proxy, meta2: Remove 'content/copy'
    meta2: Avoid losing the error on unrepairable contents
    
    The root cause was lost and the error changed in yet another obscure
    500/Internal Error.
    meta2: clarify variable name
    Purge with a fixed number of versions
    meta2: Purge alias
    meta2: Delete exceeding versions when adding a new alias
    meta2: Send events when purging a container
    meta2: improve content events
    
    - do not send chunks in "storage.content.new" events
    - add "part" and "parts" entries in "storage.content.deleted" events,
      representing respectively the id of the current part and the total
      number of parts of the event.
    meta2: Fix a memory leak
    
    When checking a content is OK, the error message was prepared but not
    freed upon no-error found.
    meta2: Fix M2_DRAIN (error now replied)
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Meta2, Event-handler: Create a separate handler to drain a content
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    meta2: Replace C++ bool keywords with glib2 gboolean macros
    Event-handler, oio-blob-rebuilder: use beanstalkd to recreate chunks
    
    Correct meta2 spare chunk error: now when the number in the blacklist
    is equal to the number of chunk for the storage policy return a 400 error
    
    Event-handler write in a beanstald's tube the missing chunks
    
    oio-blob-rebuilder: now we have to specify the way we want to get the list
    of chunks to rebuild
    Meta2, event: fix content rebuild
    
    Add check of a partial content upload to comply with multipart upload of oiofs
    Add another verification for the event handler tests
    meta2: notify the sparse contents
    
    Add meta2_filter_action_check_content before action_put_content
    Check the size and the position of the all the chunks a content.
    Depending of the storage_policy some chunks can be rebuild (eg copy or ec)
    with the chunks already presents.
    If the chunks can be rebuild it send a event storage.content.broken containing
    "present_chunks":[{"id":"...","pos":"...","hash":"...","size":"..."}],
    "missing_chunks":[pos1,pos2,...,posn]
    if not return FILTER_KO.
    Add an event handler content_broken that permit to rebuild the missing chunks
    Adapt the code to the central config
    proxy: Allow to ask for master only in meta2 RPC
    
    Currently, only upon /content/show and /content/locate
    meta2: Implement /content/touch
    
    A.k.a. M2_CTOUCH, "meta2 content touch".
    Immediately drops an event into the queue (currently: beanstald).
    meta2: Reduce the number of calls to realloc() and strlen()
    m2: fix some memory leaks
    
    (cherry picked from commit 8a34b728ee83706c85b3f4c0ea11ec76eb1c6f1c)
    m2: fix some memory leaks
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    meta2: unused code removed
    Minor fixes around events
    core: implement oio_sds_truncate() function
    m2,proxy: implement content truncate operation
    Implement metachunk replacement
    
    This will allow optimized random writes (to change 1 byte, you will
    have to download and reupload only 1 metachunk, not the whole content).
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    Change event names
    
    - "meta1" prefix removed
    - "meta2" prefix replaced by "storage"
    - "rawx" prefix replaced by "storage"
    - "container.create" replaced by "container.new"
    - "container.destroy" replaced by "container.deleted"
    - "chunk.delete" replaced by "chunk.deleted"
    m2v2: avoids 4 syscalls upon a M2_PREP
    events: insulates module, adds beanstalkd implementation
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    m2v2: events sent never manage more than 16 beans.
    
    Lists longer than 16 items are split into batches.
    Hook'able clock function now used everywhere
    Dropped the dependency to the Linux's specific clock functions.
    m2v2: adapted to the presence CONTENT in oio_url.
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    m2v2: fixed memleak when replying beans.
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    3rd cleanup : unused m2v2 code
    
    Code now unused since the only caller have been removed (client, m1v2).
    core : explicit content links implemented.
    metautils: minor simplification
    core: hc_url renamed to oio_url.
    m2v2: fixed double free when deleting properties on a content.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    Fixed formatting weaknesses.
    
    Sometimes, the use of variadic logging functions/macros used generated strings as formats.
    Those could lead to potential segfaults if the format contained unmatched parameters.
    m2v2: when listing a container's aliases, the container's metadata are also returned.
    
    In addition, unused code have been pruned from meta2.
    That code has been released with integrity-loop's removal.
    fixed sizes when declaring buffers.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Centralized macros, shorter values.
    m2v2 : upon put/append, no deletion event is sent when no chunk is deleted.
    
    Previously, an event with an empty list was generated.
    m2v2 : Fixed JSON format for event
    Minor code and macros factorisation
    Versioning & Events reviwed upon a PUT
    m2v2 : Unused functions removed.
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    Versioning & Events reviwed upon a PUT
    m2v2 : Unused functions removed.
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    m2v2: event format reviewed.
    
    Currently manages container creation and content update.
    sqlx + m2v2 : events generation reviewed.
    
    PUSH/PULL pattern between the agent and the services has been replaced by a REP/REQ pattern:
      * the event's emitter sends 2 frames to the agent : |ID|JSON|
      * it expects replies formatted as : |ID|
    The ID replied acknowledgeds the event with the same ID.
    
    A minimal mechanism of periodical retries has been added.
    Cleanup, round 6
    
    * path to sqlite bases unified and simplified. It should also plainly manage several containers for the same user.
    * warnings removed.
    * useless comments removed.
    Further step in account/user implementation.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    m2v2 + sqlx + proxy : set properties on contents and containers now manage a flush options and deletion by null value.
    m2v2: unused features removed.
    Content propeties reviewed + Cleanup, round 2
    OpenIO is lifting off now !
    sqliterepo: fix TO-HONEYCOMB-586 (big sqliterepo bases)
    
    Base transfers are now chunked (8MiB) by default.
    Monolitic transfers are still supported.
    
    Some return codes have been replaced by constants.
    
    Change-Id: Iecc45841bdd333f5d45bd101c68255c8c14d9111
    meta2v2: add notification on M2RAW_CHUNKS_DEL request
    Factorize code for add_raw_v1 and del_raw_v1.
    
    Change-Id: I61b7acebd9c690d343fc5ede39c00d2ed8aa01c4
    m2v2: add content notification after REQ_M2RAW_CONTENT_SET
    
    Change-Id: Ib45d45b17d4566adccf2797e89150a73902b87a3
    m2v2: add detection of container id in URL
    and fix M2V2_GET when called with container id only
    
    Change-Id: I52093eae4ba3178bbd965227110792a9ccf90063
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    m2v2: fix TO-HONEYCOMB-762 (assert during content copy)
    
    Change-Id: I11b346b79dc0e1a37b9b8d03a281c44a0945f92e
    m2v2: fix Kafka events for delete requests
    
    Change-Id: I951a065278aae680907df1f2f84df46a11223991
    (cherry picked from commit 9e27a65a5b3c0b8598959973df5953470e920444)
    m2v2: generate event on alias copy and chunk substitution
    
    Change-Id: Ic7a481e65e82cc1566e5cbb286cd8fff818f12f5
    (cherry picked from commit 9375390be5bb8fbbcf693ad649ab26130d697510)
    m2v2: fix Kafka events for append operations
    
    (cherry picked from commit 59938c74c3d71c757293901c586d763e30a5b376)
    
    Conflicts:
            meta2v2/meta2_filters_action_content.c
            meta2v2/meta2_filters_misc.c
    
    Change-Id: Ie88cf3218b1c4875f48d9503b267fa0e50675edf
    Fix meta2v2 crash when events enabled
    
    (TO-HONEYCOMB-718)
    
    Thank you, FVE.
    
    Change-Id: Ic1781fa8160035d1c6f8588e5511c5b168794ce0
    1.8.4 release candidate
    Initial commit
    Depend on the mainstream asn1c (#1834)
    
    * Depend on the mainstream asn1c instead of our modified version
    * cmake: Detect the version of gridinit: the option "-fwide-types" is not present in the 0.9.24 version that is still widely used, especially in Ubuntu Xenial Xerus.
    * ci: Add submodules for dependencies that are not managed by main linux distributions
    * ci: Avoid syncing unnecessary git submodules
    * metautils: Insulate the code with shared copyright
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Use the same macros for ans1c structures then in the codec code
    
    ... so we will be easily able to distribute a different asn1c release
    with a custom set of memory management functions.
    Gather asn1.c header for further macro handlings
    obsolete code and macros removed
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    m2v2: only uses the glibc to alloc/free asn1c structures.
    
    M2V2 beans were allocated with the GLib2 (g_malloc0()) and freed with the glibc (free()).
    m2v2: unused snapshots removed from compilation targets.
    m2v2: unused snapshots removed from compilation targets.
    Content propeties reviewed + Cleanup, round 2
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    meta2: Use one notifier per topic
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    m2v2: integrate new load balancer
    m2: add a cache of DB entries required for M2_PREPARE
    
    This prevents opening the database in most cases,
    and thus saves IO.
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    m2v2: code simplifications and memleaks fixes around namespace_info structures
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    m2v2 : Unused functions removed.
    m2v2 : Unused functions removed.
    Cleanup, round 6
    
    * path to sqlite bases unified and simplified. It should also plainly manage several containers for the same user.
    * warnings removed.
    * useless comments removed.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    m2v2: macros exported, propdel(*) now implemented.
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    m2v2: enable/disable Kafka events from conscience conf
    
    and fix memory leaks and disable Kafka events for local bases
    
    To enable Kafka events from conscience configuration, for all namespaces:
      param_option.event_config.meta2 = kafka_enabled=true;kafka_topic=TOPIC
    
    To enable Kafka events from conscience configuration, for a namespace
    and all its virtual sub-namespaces:
      param_option.NAMESPACE_event_config.meta2 = kafka_enabled=true;kafka_topic=TOPIC
    
    kafka_topic is optional and defaults to "redc.meta2"
    
    Change-Id: I7ea1094e24e5029cfcad46c031db35ba99f2eb47
    m2v2: send PUT and DELETE events to Kafka
    
    Requires librdkafka (https://github.com/edenhill/librdkafka)
    
    (cherry picked from commit 0335953e049f470800449b4709d5e58f5cbb8abf)
    
    Change-Id: Iaff434c63828cee8bfe8044c0332a76861e54829
    m2v2 : fixed logging domain
    
    Change-Id: I5124b514ab11bae9150c5f59ca11503c8b142c15
    (FVE & GLA) : local base creation + operations allowed on local bases
    
    allow BEANS, PUT, GET, LIST and DELETE on local bases.
    
    Change-Id: I07b0e38352f9e4a3a4c1dd3031e9270ebd800d36
    (FVE & GLA) : local base creation + operations allowed on local bases
    
    allow BEANS, PUT, GET, LIST and DELETE on local bases.
    
    Change-Id: I783322d68d407f32bd9da68b16da90e50ede239b
    1.8.4 release candidate
    Initial commit
    meta2: Remove unused code
    Meta2: Reduce the exposure of bean generation functions
    meta2: Drop the unused content deduplication
    meta2: Check if delete marker already exists
    meta2: Allow to add delete marker to a specific version
    m2: send notifications for deleted properties
    
    Property that have changed (creation, modification or deletion) are now
    properly reported in storage.content.new and storage.content.update
    events.
    - A property with a value indicates a creation or modification
      (the value is the new one).
    - A property with a null value indicates a deletion.
    
    Fixes: #1667
    meta2: Send event with the number of damaged objects
    Update Copyright
    meta2: Decrease missing chunks when deleting an object
    meta2: Increase missing chunks when creating an object
    meta2: Send event with the number of missing chunks
    m2: ensure there is a version in content.perfectible events
    m2: return quality of chunks in spare chunk requests
    meta2: Send event to notify the modification of properties
    
    (cherry picked from commit 7057a1e53d46fceadde84e68e06b5cbd4c085c31)
    meta2: Allow to change the policy of an object
    meta2: Create a message for the event only if the content is incomplete
    meta2: parse chunk qualities, send event if required
    meta2: Send event to notify the modification of properties
    Update the copyright
    proxy, meta2: Remove 'content/copy'
    meta2: Limit the number of deleted object when flushing
    meta2: Send events to remove the chunks when flushing a container
    meta2: clarify variable name
    meta2: get rid of legacy code about snapshots
    meta2: Purge alias
    meta2: consider WORM mode also for PUT operations
    meta2: Delete exceeding versions when adding a new alias
    meta2: Send events when purging a container
    Meta2: Accept "local" argument to open local database
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    Meta2, event: fix content rebuild
    
    Add check of a partial content upload to comply with multipart upload of oiofs
    Add another verification for the event handler tests
    meta2: notify the sparse contents
    
    Add meta2_filter_action_check_content before action_put_content
    Check the size and the position of the all the chunks a content.
    Depending of the storage_policy some chunks can be rebuild (eg copy or ec)
    with the chunks already presents.
    If the chunks can be rebuild it send a event storage.content.broken containing
    "present_chunks":[{"id":"...","pos":"...","hash":"...","size":"..."}],
    "missing_chunks":[pos1,pos2,...,posn]
    if not return FILTER_KO.
    Add an event handler content_broken that permit to rebuild the missing chunks
    m2,proxy: return properties when listing contents
    m2: implement simple object counter
    
    Count the number of entries in "contents" table of each container
    and save it under key "sys.m2.objects" in admin table.
    
    Next step is to count object per storage policy.
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    m2,proxy: implement content truncate operation
    Implement metachunk replacement
    
    This will allow optimized random writes (to change 1 byte, you will
    have to download and reupload only 1 metachunk, not the whole content).
    Remove last traces of old load balancer
    m2v2: integrate new load balancer
    proxy: prefer MASTER for writing, SLAVE for reading
    proxy: container/destroy plainly destroys the containers and their references
    
    * a container destruction is now: 1/freeze 2/flush 3/unlink 4/destroy(local)
    * meta2 slighty simplified around PURGE/DEDUP/FLUSH, where the dry_run options have disappeared.
    metautils+meta2: unused code removed
    m2v2: adapted to the presence CONTENT in oio_url.
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    m2v2: code simplifications and memleaks fixes around namespace_info structures
    m2v2: append feature reviwed with new semantics.
    M2V2: shortened chunks URL
    
    7 bytes saved in each each entry with the removal of the 'http://' prefix (plus its footprint in the index).
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    4th cleanup, unused code purged from metautils
    3rd cleanup : unused m2v2 code
    
    Code now unused since the only caller have been removed (client, m1v2).
    core : explicit content links implemented.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    proxy + m2v2 : fixed listing with large maxkeys
    
    The next marker from previous request was not ported in subsequent ones.
    Versioning & Events reviwed upon a PUT
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    Versioning & Events reviwed upon a PUT
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    m2v2 + sqlx + proxy : set properties on contents and containers now manage a flush options and deletion by null value.
    m2v2: unused features removed.
    m2v2: minor code reorganisation.
    m2v2: container's ctime now set at container's creation.
    sqliterepo + m2v2 : function renamed for more clarity.
    Content propeties reviewed + Cleanup, round 2
    Disable checks on beans upon PUT/APPEND/UPDATE.
    OpenIO is lifting off now !
    m2v2,rainx: code cleaning, better memory management
    
    Change-Id: I779c019f19ae11c29ad3e1bc3f185ad9595cc360
    m2v2: fix Kafka events for delete requests
    
    Change-Id: I951a065278aae680907df1f2f84df46a11223991
    (cherry picked from commit 9e27a65a5b3c0b8598959973df5953470e920444)
    m2v2: generate event on alias copy and chunk substitution
    
    Change-Id: Ic7a481e65e82cc1566e5cbb286cd8fff818f12f5
    (cherry picked from commit 9375390be5bb8fbbcf693ad649ab26130d697510)
    Merges the promoter's changes.
    
      * client/c: adapt rainx_remote for future use
      * Remove meta2_container_services from installed binaries in honeycomb.spec
      * cluster/lib : Fixed memory when there is no /etc/gridstorage.conf
      * m2v2: minor safety fix for chunk substitution
      * metautils / sockets : Fixed return code check.
    1.8.4 release candidate
    Initial commit
    meta2: Use one notifier per topic
    meta2: parse chunk qualities, send event if required
    meta2: Force slab allocations
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Adapt the code to the central config
    meta2: unused code removed
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    m2v2: fixed memleak when replying beans.
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    m2v2: slice allocation for filters contexts
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    OpenIO is lifting off now !
    sqliterepo: fix TO-HONEYCOMB-586 (big sqliterepo bases)
    
    Base transfers are now chunked (8MiB) by default.
    Monolitic transfers are still supported.
    
    Some return codes have been replaced by constants.
    
    Change-Id: Iecc45841bdd333f5d45bd101c68255c8c14d9111
    m2v2: add content notification after REQ_M2RAW_CONTENT_SET
    
    Change-Id: Ib45d45b17d4566adccf2797e89150a73902b87a3
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    m2v2: change Kafka topic, fix bug when more than 32 chunks
    
    (cherry picked from commit a32cc3c9f053cd2445bee1eb3613c41594086ee2)
    
    Conflicts:
            meta2v2/meta2_filters_misc.c
    
    Change-Id: I6a321081a9af2a52dccd122c3fa9b921e0c71b10
    m2v2: fix Kafka events for append operations
    
    (cherry picked from commit 59938c74c3d71c757293901c586d763e30a5b376)
    
    Conflicts:
            meta2v2/meta2_filters_action_content.c
            meta2v2/meta2_filters_misc.c
    
    Change-Id: Ie88cf3218b1c4875f48d9503b267fa0e50675edf
    Fix meta2v2 crash when events enabled
    
    (TO-HONEYCOMB-718)
    
    Thank you, FVE.
    
    Change-Id: Ic1781fa8160035d1c6f8588e5511c5b168794ce0
    1.8.4 release candidate
    Initial commit
    meta2: Remove commented code
    cmake: Reorganize the targets
    
    * do not list headers, as it is recommended
    * drop the dependency to sqlite3 in oio-proxy
    m2: allow NULL values for byte array fields
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 71bb78587b2806a69842e004fbec9740afbf4177)
    Fix compilation issues with GCC 7
    meta2: Remove unused code
    meta2: Better bean substitution
    
    Avoid inserting when the original bean is not present. Return an error
    if absent.
    meta2: Reduce the number of calls to realloc() and strlen()
    Fixes and refactoring
    
    * rawx: fixed error message
    * rawx: fixed error message + fixed useless case-sensitivity management
    * proxy: cuts the crap from several error messages
    * m2v2: unreached code removed from alias deletion
    * m2v2: minor cosmetic change
    * core/sds: enables tracing RAWX requests for highest verbosity
    * proxy: re-enables case sensitive prefix matching in headers (brings more robustness)
    * core/sds: checks for content_id's format
    * core/sds: new feature to mangle the case of http headers (proxy,
      rawx). Mangling disabled by default, activated in tests.
    * core/tool_roundtrip: activates the mangling of headers case
    * core: fake chunksnb sent
    Benefits from optimized strcmp() when case sensitivity is not worth (#578)
    m2v2: reduces the huge number of hidden calls to strlen()
    
    A lot of strings lengths can be determined at compile-time.
    m2v2: avoids 4 syscalls upon a M2_PREP
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    Hook'able clock function now used everywhere
    Dropped the dependency to the Linux's specific clock functions.
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    m2v2: INSERT code now generated for beans
    Fixed warnings (unused symbols)
    Fixes, improvements
    
    m2v2: fixed "bean leak" when purging exceeding aliases (properties not removed).
    m2v2: fixed "bean leak" when deleting explicit aliases (properties not removed).
    proxy: Fixed compile-time warnings
    proxy: properties returned in headers when getting objects
    proxy: headers matching now case-insensitive
    proxy: In addition, request handlers returning invariable and dummy outputs (empty lists, empty sets) now return nothing.
    tools: bootstrap doesn't deploy the admin flask (it is destined to disappear in the next release and is already used by no one).
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Versioning & Events reviwed upon a PUT
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    Versioning & Events reviwed upon a PUT
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    Several fixes around factorized code.
    Content propeties reviewed + Cleanup, round 2
    m2v2: do not crash on corrupted base, return an error
    
    Change-Id: Ie0e612948422296b27d604c46f9e7929dbcb4a0a
    OpenIO is lifting off now !
    m2v2 : fixed logging domain
    
    Change-Id: I5124b514ab11bae9150c5f59ca11503c8b142c15
    1.8.4 release candidate
    Initial commit
    meta2: Remove unused code
    meta2: parse chunk qualities, send event if required
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    m2v2: better filter's context cleanup
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    m2v2: when listing a container's aliases, the container's metadata are also returned.
    
    In addition, unused code have been pruned from meta2.
    That code has been released with integrity-loop's removal.
    OpenIO is lifting off now !
    Fix meta2v2 crash when events enabled
    
    (TO-HONEYCOMB-718)
    
    Thank you, FVE.
    
    Change-Id: Ic1781fa8160035d1c6f8588e5511c5b168794ce0
    1.8.4 release candidate
    Initial commit
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    OpenIO is lifting off now !
    m2v2: send PUT and DELETE events to Kafka
    
    Requires librdkafka (https://github.com/edenhill/librdkafka)
    
    (cherry picked from commit 0335953e049f470800449b4709d5e58f5cbb8abf)
    
    Change-Id: Iaff434c63828cee8bfe8044c0332a76861e54829
    m2v2 : Fixed logging domain
    
    Change-Id: I7c2ab154d6f2ef150166b97262edaebbfdf32923
    1.8.4 release candidate
    meta2: remove unused macros
    proxy: Allow to force the request on master service
    
    It was already possible to do this by adding 'proxy.force.master'
    in the proxy configuration. But this was applied to all requests.
    
    If we wanted to force the master only on a specific request,
    we can add the 'x-oio-force-master' header in the request.
    But this header was only used to list the objects in a container.
    
    Now, it is possible to specifically force the master on all meta2 requests.
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    meta2: Drop the unused content deduplication
    meta2: Allow to add delete marker to a specific version
    meta2: Allow to simulate versioning when creating and deleting an object
    Update max_versions of container from header (2/2)
    
    This commit bring same mecanism to update sys.m2.policy.versions
    from header to content/delete operation: we want to control
    if current version of object must be deleted or add a delete marker.
    meta2: properly reset oio_ext fields
    
    The user_agent and force_versioning was not cleaned before/after each request.
    Update max_versions of container from header
    
    This commit introduce possibility to update max_versions when creating
    object:
    this is useful for container created through autocreate functionality:
    for Container Hierarchy, enabling versioning is set on root container,
    it is not possible to parse all container to update value and
    for performance, a dedicated request to update container is skipped
    (as a lot of upload may occurs at same time)
    
    If header `x-oio-force-versioning` is received,
    the max_versions is updated before completing
    object (to keep mecanism to delete prior object if needed)
    Allow listing to be done on master service only
    
    For several operations, when a list is done just after an object
    deletion, the listing operation may occur on a slave which has not been
    synchronized yet.
    meta2: Use one notifier per topic
    meta2: Add User-Agent to the events
    meta2: Send event to notify the modification of properties
    
    (cherry picked from commit 7057a1e53d46fceadde84e68e06b5cbd4c085c31)
    C API: parse properties returned during content/prepare
    meta2: parse chunk qualities, send event if required
    meta2: Send event to notify the modification of properties
    Update the copyright
    proxy, meta2: Remove 'content/link'
    proxy, meta2: Remove 'content/copy'
    Purge with a fixed number of versions
    meta2: Purge alias
    meta2: consider WORM mode also for PUT operations
    meta2: get rid of M2_LEAVE RPC
    
    This was used to workaround resolver cache issues. But since we reduced
    usage of resolver cache, we don't need it anymore.
    CLI: implement 'container purge' subcommand
    
    And fix M2_PURGE RPC.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    meta2: notify the sparse contents
    
    Add meta2_filter_action_check_content before action_put_content
    Check the size and the position of the all the chunks a content.
    Depending of the storage_policy some chunks can be rebuild (eg copy or ec)
    with the chunks already presents.
    If the chunks can be rebuild it send a event storage.content.broken containing
    "present_chunks":[{"id":"...","pos":"...","hash":"...","size":"..."}],
    "missing_chunks":[pos1,pos2,...,posn]
    if not return FILTER_KO.
    Add an event handler content_broken that permit to rebuild the missing chunks
    Adapt the code to the central config
    meta2: Implement /content/touch
    
    A.k.a. M2_CTOUCH, "meta2 content touch".
    Immediately drops an event into the queue (currently: beanstald).
    meta2: Restore the TOUCH on a container
    
    Instead of touching all the contents, we trigger the emission of the
    container's state.
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    m2,proxy: implement content truncate operation
    Implement metachunk replacement
    
    This will allow optimized random writes (to change 1 byte, you will
    have to download and reupload only 1 metachunk, not the whole content).
    m2v2: checks for events queue's availability
    m2v2: checks for events queue's availability
    m2v2: adds ISEMPTY feature, fixes DESTROY
    
    * DESTROY is now only local and the event emission is explicitely asked by the client
    * ISEMPTY quickly checks if any chunk is present
    proxy: container/destroy plainly destroys the containers and their references
    
    * a container destruction is now: 1/freeze 2/flush 3/unlink 4/destroy(local)
    * meta2 slighty simplified around PURGE/DEDUP/FLUSH, where the dry_run options have disappeared.
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    metautils+meta2: unused code removed
    m2v2: GET (a.k.a. /content/show) adapted to work with a given content ID instead of the alias path.
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    3rd cleanup : unused m2v2 code
    
    Code now unused since the only caller have been removed (client, m1v2).
    core : explicit content links implemented.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    meta2: autocreation restored on ~all operations.
    
    * meta2: autocreation was disabled by a preliminary check on the bases existence.
    * sqliterepo: debug function added
    meta2: fixed events generation when containers are created and destroyed.
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    m2v2: when listing a container's aliases, the container's metadata are also returned.
    
    In addition, unused code have been pruned from meta2.
    That code has been released with integrity-loop's removal.
    m2v2: at least a reply is sent for the TOUCH ops (that are actually no-op)
    m2v2: at least a reply is sent for the TOUCH ops (that are actually no-op)
    m2v2 : Unused functions removed.
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    m2v2 : Unused functions removed.
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    sqlx + m2v2 : events generation reviewed.
    
    PUSH/PULL pattern between the agent and the services has been replaced by a REP/REQ pattern:
      * the event's emitter sends 2 frames to the agent : |ID|JSON|
      * it expects replies formatted as : |ID|
    The ID replied acknowledgeds the event with the same ID.
    
    A minimal mechanism of periodical retries has been added.
    m2v2: fixed missing/bad return codes
    Further step in account/user implementation.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    m2v1 + m2v2 : unused features removed.
    m2v1 + m2v2 : unused features removed.
    Content propeties reviewed + Cleanup, round 2
    proxy: content's delete of properties now implemented (m2v2)
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    Add localflag check on freeze related requests
    
    Change-Id: Ia504d0f237e0113bd78013646b05a94577d00e73
    m2v2: fix double "200 OK" sent after M2V2_SUBST_CHUNKS.
    
    Change-Id: I87002b4e5e1e85dad4a31bd002fd520a5647c2d5
    meta2v2: add local flag check on some requests (test purpose).
    
    Change-Id: Idd014ae1089b2d5ab5487a87cd943ca9244a6f95
    meta2v2: add notification on M2RAW_CHUNKS_DEL request
    Factorize code for add_raw_v1 and del_raw_v1.
    
    Change-Id: I61b7acebd9c690d343fc5ede39c00d2ed8aa01c4
    m2v2: add content notification after REQ_M2RAW_CONTENT_SET
    
    Change-Id: Ib45d45b17d4566adccf2797e89150a73902b87a3
    m2v2: send Kafka events on PURGE
    
    Change-Id: Idd9e58d637e0c3cd6dfe64fff09200cf38c6555d
    (cherry picked from commit 40f64e31372840006800bd119a4a3b1b96ec2b08)
    m2v2: generate event on alias copy and chunk substitution
    
    Change-Id: Ic7a481e65e82cc1566e5cbb286cd8fff818f12f5
    (cherry picked from commit 9375390be5bb8fbbcf693ad649ab26130d697510)
    (FVE & GLA) : local base creation + operations allowed on local bases
    
    allow BEANS, PUT, GET, LIST and DELETE on local bases.
    
    Change-Id: I07b0e38352f9e4a3a4c1dd3031e9270ebd800d36
    (FVE & GLA) : local base creation + operations allowed on local bases
    
    allow BEANS, PUT, GET, LIST and DELETE on local bases.
    
    Change-Id: I783322d68d407f32bd9da68b16da90e50ede239b
    Merges the promoter's changes.
    
      * client/c: adapt rainx_remote for future use
      * Remove meta2_container_services from installed binaries in honeycomb.spec
      * cluster/lib : Fixed memory when there is no /etc/gridstorage.conf
      * m2v2: minor safety fix for chunk substitution
      * metautils / sockets : Fixed return code check.
    1.8.4 release candidate
    Initial commit
    proxy,m1: tell meta0 which namespace we are working on
    meta1: Remove unused code
    meta1: Avoid losing the cache of managed prefixes
    meta1: Avoid raising an assertin on "prefix not ready"
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta1: Add unit tests
    metautils: reduce number of memory allocations
    
    This slightly speeds up meta0 and meta1.
    Fix missing braces in static allocations
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    meta1: removes unreachable code
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    conscience: renaming + pruning + reorg
    
    * conscience/agent remote functions have been renamed for more clarity
    * MACRO tags have been removed (usage too scarce and immutable, no need of something so flexible)
    * CPU/IO/SPACE computation moved from the oio-cluster-agent to libgridcluster
    * oio-cluster-agent is now now mandatory
    Various beautifications
    
    agent: unused code removed
    cluster: uniform interface
    cluster: agent bypass
    conscience: func tests OK
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    Speeds up the startup of services.
    
    More agressive delays for:
    * LB refresh
    * prefix loading in meta1
    
    The period between the iterations is shortened until the first success.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    m{0,1,2}v2: shortened requests names
    m1v2: renamed MACRO/functions/requests for more clarity
    
    Compatibility break!
    m1v2: RELINK implemented for services
    
    When a set of services are linked to a reference, RELINK allows you to change  aservice among the set.
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    Various improvements
    
    * global error codes added
      * special codes for missing accounts, users, containers
      * client adapted.
    * containers autocreation
      * enabled in m1v2 backend
      * exposed in m1v2 remote
      * exposed in proxy
    * C SDK output reviewed
      * minimal API exposed
      * error messages normalized
    * C SDK: upload extended with the autocreation (disabled by default).
    Get rid of the crawler.
    
    Also pruned all the code only used by the crawler.
    Content propeties reviewed + Cleanup, round 2
    OpenIO is lifting off now !
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    1.8.4 release candidate
    Initial commit
    meta1: Decache when deleting meta1 database
    m1: resolve account and cname only when asked
    
    This is to avoid problems during migrations from pre 4.4.0 versions.
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    proxy,m1: document "relink" operations
    Remove unused/useless code
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    Remove last traces of old load balancer
    m1v2: integrate new load balancer
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    sqliterepo: speed-up the schema checks
    
    * sqliterepo: the checks of the schema are now performed with lowered security, to avoid useless transaction syncs.
    * sqliterepo: got rid of the useless "version" provided when checking for the schema
    * meta0: removed the useless "vacuum" in the schema.
    * meta0/meta1/sqlx/tests: adapted to the changes previously listed.
    meta1v2: fixed missing indexes in m1v2 schema.
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    m1v2: better transaction management
    
    Only one transaction per backend call.
    m1v2: RELINK implemented for services
    
    When a set of services are linked to a reference, RELINK allows you to change  aservice among the set.
    m1v2: now able replace all the properties on a reference with a new set.
    
    This is consistent with meta2 and sqlx : set + flush.
    Flushing and setting an empty array give the same result as calling a delete.
    Various improvements
    
    * global error codes added
      * special codes for missing accounts, users, containers
      * client adapted.
    * containers autocreation
      * enabled in m1v2 backend
      * exposed in m1v2 remote
      * exposed in proxy
    * C SDK output reviewed
      * minimal API exposed
      * error messages normalized
    * C SDK: upload extended with the autocreation (disabled by default).
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    Get rid of the crawler.
    
    Also pruned all the code only used by the crawler.
    Further step in account/user implementation.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    metautils: modularize the notification system
    
    Change-Id: I6a75473a16c3f4973f0ff0dd4ab349c47d170664
    
    Conflicts:
            CMakeLists.txt
            meta2v2/meta2_backend.h
            metautils/lib/CMakeLists.txt
            metautils/lib/event_config.c
            metautils/lib/notifications.c
    OpenIO is lifting off now !
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    1.8.4 release candidate
    Initial commit
    meta1: Remove unused code
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta1: Add unit tests
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    meta1: removes unreachable code
    Speeds up the startup of services.
    
    More agressive delays for:
    * LB refresh
    * prefix loading in meta1
    
    The period between the iterations is shortened until the first success.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    meta1: Apply minor cosmetic changes
    m1: resolve account and cname only when asked
    
    This is to avoid problems during migrations from pre 4.4.0 versions.
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta1v1: check validity of oio_url_s
    
    Check of extracted oio_url_s is done in meta1_dispatch_all
    before calling handler.
    meta1: fixes memleaks happening when COMMIT failed
    m1,tests: start to fix tests around properties
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    m1v2: renamed MACRO/functions/requests for more clarity
    
    Compatibility break!
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    3rd cleanup : unused m2v2 code
    
    Code now unused since the only caller have been removed (client, m1v2).
    2nd cleanup: meta1v2 pruned from its unused code
    
    That code is unused since the only caller (client/c/lib) has been removed.
    m1v2: RELINK implemented for services
    
    When a set of services are linked to a reference, RELINK allows you to change  aservice among the set.
    m1v2: now able replace all the properties on a reference with a new set.
    
    This is consistent with meta2 and sqlx : set + flush.
    Flushing and setting an empty array give the same result as calling a delete.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    Various improvements
    
    * global error codes added
      * special codes for missing accounts, users, containers
      * client adapted.
    * containers autocreation
      * enabled in m1v2 backend
      * exposed in m1v2 remote
      * exposed in proxy
    * C SDK output reviewed
      * minimal API exposed
      * error messages normalized
    * C SDK: upload extended with the autocreation (disabled by default).
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Centralized macros, shorter values.
    m1v2 : fixed the "force service" RPC return code.
    
    Obviously, never tested /o\
    Get rid of the crawler.
    
    Also pruned all the code only used by the crawler.
    meta1v2: restore the ability to list services of ALL kinds linked to a reference.
    meta1v2: restore the ability to list services of ALL kinds linked to a reference.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Content propeties reviewed + Cleanup, round 2
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    m1v2: optimize VNS_STATE by closing meta1 bases immediately
    
    This is a modification I made a while ago, but that
    wasn't merged. It limits meta1 memory usage while executing
    REQ_M1_GET_VNS_STATE, and prevents the problem of memory
    pages kept in cache by malloc.
    
    Change-Id: Ie56abf4d2c2a3926bdf8ec143b7daa82f10021c6
    1.8.4 release candidate
    Initial commit
    meta1: Remove unused code
    meta1: Use one notifier per topic
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta1: Always autocreate DB files
    Remove unused/useless code
    meta1: Clarify the error message
    meta1: code made simpler
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    proxy: properties management unified
    
    ... when creating entities, setting properties, getting them.
    ... whatever the entity (user, container, content) the format is the
    same at the proxy level and at the backend service level.
    m1v2: checks for events queue's availability
    m1v2: checks for events queue's availability
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    m1v2: better transaction management
    
    Only one transaction per backend call.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    Various improvements
    
    * global error codes added
      * special codes for missing accounts, users, containers
      * client adapted.
    * containers autocreation
      * enabled in m1v2 backend
      * exposed in m1v2 remote
      * exposed in proxy
    * C SDK output reviewed
      * minimal API exposed
      * error messages normalized
    * C SDK: upload extended with the autocreation (disabled by default).
    Further step in account/user implementation.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    1.8.4 release candidate
    Initial commit
    meta1: Remove unused code
    m1: fix compilation warning
    meta1: Fix behavior when reference property with empty value is set
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    proxy: properties management unified
    
    ... when creating entities, setting properties, getting them.
    ... whatever the entity (user, container, content) the format is the
    same at the proxy level and at the backend service level.
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    m1v2: better transaction management
    
    Only one transaction per backend call.
    m1v2: now able replace all the properties on a reference with a new set.
    
    This is consistent with meta2 and sqlx : set + flush.
    Flushing and setting an empty array give the same result as calling a delete.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Various improvements
    
    * global error codes added
      * special codes for missing accounts, users, containers
      * client adapted.
    * containers autocreation
      * enabled in m1v2 backend
      * exposed in m1v2 remote
      * exposed in proxy
    * C SDK output reviewed
      * minimal API exposed
      * error messages normalized
    * C SDK: upload extended with the autocreation (disabled by default).
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    OpenIO is lifting off now !
    Removed inadapted assert from meta1_backend_get_container_properties()
    
    Change-Id: Ibe99e408b2d8474d71e404ec99f46b651aad8740
    1.8.4 release candidate
    Initial commit
    cmake: Only install prod-related tools in other build types than Debug
    Reorganize the libraries, Avoid a loop on the proxy
    cmake: Reorganize the targets
    
    * do not list headers, as it is recommended
    * drop the dependency to sqlite3 in oio-proxy
    Build & Use static libraries
    cmake: Explicit the ABI version of each shared library
    meta1: Get rid of the compound_type notion
    Adapt the code to the central config
    cmake: added 'Werror' in CFLAGS where there is no warning
    
    Warnings are the voice of Evil.
    
    Let's try to avoid them on targets already clean.
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    cmake: G_LOG_DOMAIN set at cmake's level.
    Various improvements
    
    * global error codes added
      * special codes for missing accounts, users, containers
      * client adapted.
    * containers autocreation
      * enabled in m1v2 backend
      * exposed in m1v2 remote
      * exposed in proxy
    * C SDK output reviewed
      * minimal API exposed
      * error messages normalized
    * C SDK: upload extended with the autocreation (disabled by default).
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Content propeties reviewed + Cleanup, round 2
    OpenIO is lifting off now !
    "Custom vs Standard" paths reviewed.
    
    json-c and rdkafka management now better taken into account.
    This allows compiling on a ubuntu server as weel as on a centos distribution.
    
    Change-Id: I1c8adf8ab213c2a7d4927fbbe1e031dc782792ea
    Binary installation names reviewed.
    1.8.4 release candidate
    Initial commit
    meta1: Remove unused code
    meta1: Decache when deleting meta1 database
    meta*: Make the tubes configurables with central variables
    meta1: Use one notifier per topic
    proxy: Mangle the DB name for /admin/* type=meta1
    
    Also centralizes the meta1_digits variable
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core: code factorisation (integer format check)
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    m1v2: integrate new load balancer
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    Useless/Unused functions removed
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    m1v2: better transaction management
    
    Only one transaction per backend call.
    3rd cleanup : unused m2v2 code
    
    Code now unused since the only caller have been removed (client, m1v2).
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    metautils: modularize the notification system
    
    Change-Id: I6a75473a16c3f4973f0ff0dd4ab349c47d170664
    
    Conflicts:
            CMakeLists.txt
            meta2v2/meta2_backend.h
            metautils/lib/CMakeLists.txt
            metautils/lib/event_config.c
            metautils/lib/notifications.c
    OpenIO is lifting off now !
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    1.8.4 release candidate
    Initial commit
    Stop accepting composed service types
    meta1: Send event when a reference is created
    
    Fixes #1291
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    proxy: properties management unified
    
    ... when creating entities, setting properties, getting them.
    ... whatever the entity (user, container, content) the format is the
    same at the proxy level and at the backend service level.
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    m1v2: better transaction management
    
    Only one transaction per backend call.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Various improvements
    
    * global error codes added
      * special codes for missing accounts, users, containers
      * client adapted.
    * containers autocreation
      * enabled in m1v2 backend
      * exposed in m1v2 remote
      * exposed in proxy
    * C SDK output reviewed
      * minimal API exposed
      * error messages normalized
    * C SDK: upload extended with the autocreation (disabled by default).
    m1v2 : better error messages (users instead of references)
    Get rid of the crawler.
    
    Also pruned all the code only used by the crawler.
    Further step in account/user implementation.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    OpenIO is lifting off now !
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    1.8.4 release candidate
    Initial commit
    meta1: Fix a memory leak
    m1: resolve account and cname only when asked
    
    This is to avoid problems during migrations from pre 4.4.0 versions.
    proxy,m1: fix container snapshot feature
    
    The `sys.user.name` and `sys.account` entries of the snapshot were still
    refering to the snapshotted container. The 'storage.container.state'
    events emitted from the snapshot thus gave invalid information.
    
    This commit also call automatically a `container touch` to update account service.
    
    Fixes: OS-350
    meta1: Get rid of the compound_type notion
    meta1: Get rid of useless 'compound_type' parsing code
    
    Thanks to @fvennetier
    Remove mentions of the "user_is_a_service" tag.
    meta1: Use one notifier per topic
    Stop accepting composed service types
    m1: move acc/ref prefixed strings append after tests
    m1: format code, fix memleaks
    proxy,m1: resolve CID to acc/cont on /reference/show requests
    
    - Add the account and the container name of the requested reference
    to the SRV_LIST reply as prefixed strings.
    - Extract account and container name from the SRV_LIST reply
    and fill the oio_url_s object passed as a parameter.
    - Include the resolved acc/cont in the /reference/show reply.
    m1: ensure events have account and container names
    core/lb: keep track of the quality of selected services
    meta1: Replace strcpy with g_strlcpy
    Core/lb: Associate UUID with addr
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    meta1: fix spacing issues in error messages
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta1: Add unit tests
    core/lb: better error handling, warn if flawed
    Fix compilation issues with GCC 7
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 3e12733b1ef6b247af2187db7d044c709501d0d6)
    Fix compilation issues with GCC 7
    proxy,m1: document "relink" operations
    meta1: Fix the M1_RELINK behavior
    core/json: Fix the unpacking of JSON objects
    meta1: Reduce the number of calls to realloc() and strlen()
    core,m1: fix 'user_is_a_service' option handling (2)
    
    There was a problem with the location of the service for which
    the load-balancer was queried.
    proxy: empty resolver cache when error is 'prefix not managed'
    meta2: empty meta2 cache when error is 'prefix not managed'
    meta1: reload prefixes when error is 'prefix not managed'
    m1: fix 'user_is_a_service' option handling
    proxy: integrate new load balancer
    m1v2: integrate new load balancer
    lb: review for more efficiency
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    lb: better error messages (#570)
    
    Fix #567
    Change event names
    
    - "meta1" prefix removed
    - "meta2" prefix replaced by "storage"
    - "rawx" prefix replaced by "storage"
    - "container.create" replaced by "container.new"
    - "container.destroy" replaced by "container.deleted"
    - "chunk.delete" replaced by "chunk.deleted"
    events: insulates module, adds beanstalkd implementation
    m1v2: checks for events queue's availability
    m1v2: checks for events queue's availability
    m1: escape container URL in JSON events
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    m1: new option to prevent rdir and rawx on same location
    m1v2: unlink repaired
    sqliterepo: reduced amount of I/O upon open/create
    
    Only one sqlite transaction is now used when opening a base, even if creating it.
    The whole schema setup is sent during this only transaction.
    Hook'able clock function now used everywhere
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    meta1: better functional tests result.
    m1v2: better transaction management
    
    Only one transaction per backend call.
    3rd cleanup : unused m2v2 code
    
    Code now unused since the only caller have been removed (client, m1v2).
    m1v2: RELINK implemented for services
    
    When a set of services are linked to a reference, RELINK allows you to change  aservice among the set.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Various improvements
    
    * global error codes added
      * special codes for missing accounts, users, containers
      * client adapted.
    * containers autocreation
      * enabled in m1v2 backend
      * exposed in m1v2 remote
      * exposed in proxy
    * C SDK output reviewed
      * minimal API exposed
      * error messages normalized
    * C SDK: upload extended with the autocreation (disabled by default).
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    m1v2 : output JSON fixed for meta1 events.
    Fixed memory leaks.
    
    Conflicts:
            meta1v2/meta1_backend_services.c
    Fixed memory leaks.
    
    Conflicts:
            meta1v2/meta1_backend_services.c
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    metautils: modularize the notification system
    
    Change-Id: I6a75473a16c3f4973f0ff0dd4ab349c47d170664
    
    Conflicts:
            CMakeLists.txt
            meta2v2/meta2_backend.h
            metautils/lib/CMakeLists.txt
            metautils/lib/event_config.c
            metautils/lib/notifications.c
    OpenIO is lifting off now !
    m1v2: optimize/factorize JSON notifications (thanks JFS)
    
    Change-Id: Iab28647833d5f3db695798cdb6fbb8e2ba23c4b1
    metautils,m1v2,m2v2: send notifs to several topic partitions
    
    The notification system now uses a key (the prefix of the CID)
    to choose on which partition of the topic to send the notification.
    
    Change-Id: I56306a8d37ba368fad9b2f0b5f73b8babca42ba6
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    1.8.4 release candidate
    Initial commit
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    meta1: Remove unused code
    m1: resolve account and cname only when asked
    
    This is to avoid problems during migrations from pre 4.4.0 versions.
    m1: move acc/ref prefixed strings append after tests
    m1: format code, fix memleaks
    proxy,m1: resolve CID to acc/cont on /reference/show requests
    
    - Add the account and the container name of the requested reference
    to the SRV_LIST reply as prefixed strings.
    - Extract account and container name from the SRV_LIST reply
    and fill the oio_url_s object passed as a parameter.
    - Include the resolved acc/cont in the /reference/show reply.
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    meta1/client: Make the default timeout configurable
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    proxy: properties management unified
    
    ... when creating entities, setting properties, getting them.
    ... whatever the entity (user, container, content) the format is the
    same at the proxy level and at the backend service level.
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    meta1: removes unreachable code
    m1v2: renamed MACRO/functions/requests for more clarity
    
    Compatibility break!
    fixed sub-type management for the services.
    
    The compound types of services are now well considered by the proxy, then transmitted in the various requests the proxy issues.
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    m1v2: fixed broken remote function (url not transmitted)
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    2nd cleanup: meta1v2 pruned from its unused code
    
    That code is unused since the only caller (client/c/lib) has been removed.
    m1v2: RELINK implemented for services
    
    When a set of services are linked to a reference, RELINK allows you to change  aservice among the set.
    m1v2: now able replace all the properties on a reference with a new set.
    
    This is consistent with meta2 and sqlx : set + flush.
    Flushing and setting an empty array give the same result as calling a delete.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    Various improvements
    
    * global error codes added
      * special codes for missing accounts, users, containers
      * client adapted.
    * containers autocreation
      * enabled in m1v2 backend
      * exposed in m1v2 remote
      * exposed in proxy
    * C SDK output reviewed
      * minimal API exposed
      * error messages normalized
    * C SDK: upload extended with the autocreation (disabled by default).
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    Fixed service push to the conscience + Cleanup, round 8
    
    * The last cleanup commit was named #6, but this was a mistke, there was already a #6.
    * Code factorized
    * Useless code removed
    * Codec functions simplified.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Centralized macros, shorter values.
    Get rid of the crawler.
    
    Also pruned all the code only used by the crawler.
    Message handling functions refatored
    
    * Useless / unused functions removed.
    * Signatures more intuitive.
    * code factorized.
    m1v2 / remote : invalid asserts removed.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Get rid of grid_storage_client_stat
    
    One of the ugliest piece of code present here.
    It was intrusive and based on static variables.
    Content propeties reviewed + Cleanup, round 2
    Get rid of an old rename trick born in redcurrant.
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    m1v2: better error management on strange output.
    
    Prevents an abusive assert to be raised in calling code.
    
    Change-Id: I2cc16db605c095edc9c490af9eaf17f247317768
    Fixed minor formatting quirk.
    
    Change-Id: Idfc2f47e8c75940fb2416d0720d383f0311512a7
    1.8.4 release candidate
    Initial commit
    sqliterepo: Remove unused struct fields
    
    Also touches meta0, meta1, meta2
    resolver: allow to resolve only meta0 services
    
    This is useful to run election commands on a broken meta0.
    meta1: Decache when deleting meta1 database
    meta1: Use one notifier per topic
    Stop accepting composed service types
    meta1: Avoid losing the cache of managed prefixes
    meta1: Avoid contacting M0 upon a reload of the cache
    
    Instead, defer this to the next iteration of the task, we force it to
    execute within the current second, in a BG thread.
    Make meta1 reload less often the meta0 cache
    
    From 32s to 61s
    Enlarge your Timeout ... while m1 reloads the m0 cache
    
    Considers the comment of @fvennetier in #1255. Always on purpose!
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    meta1: ask directly meta0 for peers
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    cluster,conf: Move to the CCF the stgpol and svcupdate_policy
    
    ... CCF for Central Config Facility
    sqliterepo: Ensure there is a consistant output when locating the peers
    
    Either the error or the peers should be set, but never none nor both!
    Also, returning "no peer but no error" de facto become an empty array
    and never a NULL array anymore.
    meta1: Refactor slightly the code for more readability
    lb: Expire the services that disappeared from the conscience
    
    Fix #815
    Adapt the code to the central config
    lb: Expire the services that disappeared from the conscience
    
    Fix #815
    m0,m1,m2,sqlx: use local peers if available
    meta1,meta2,proxy: Enables the faulty peers avoidance
    
    Triggered if actived in the system-wide configuration of the namespace.
    Move the minimal rrd from server to metautils
    
    It prepares a change coming soon in sqliterepo, that requires the simple
    RRD implementation.
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    core: do not compute TRACE logs when in low log-levels
    m1v2: integrate new load balancer
    m2v2: integrate new load balancer
    sqliterepo/election: memleak chased
    m{0,1}v2: protects the init phase while shutting down
    
    * m0v2: ZK registration protected in cases where server is stopped
    * m0v2: prevents event queue creation (useless for meta0)
    * m1v2: M0 loading protected
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    sqliterepo: fix lack of decache upon a GETVERS error
    
    Avoids recreate deleted bases.
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    meta1v2: fixed missing indexes in m1v2 schema.
    m2v2: code simplifications and memleaks fixes around namespace_info structures
    Speeds up the startup of services.
    
    More agressive delays for:
    * LB refresh
    * prefix loading in meta1
    
    The period between the iterations is shortened until the first success.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Cleanup, round 6
    
    * path to sqlite bases unified and simplified. It should also plainly manage several containers for the same user.
    * warnings removed.
    * useless comments removed.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    OpenIO is lifting off now !
    sqliterepo: add forced meta1 decache in SQLX_RESYNC.
    
    and fix small bugs.
    
    Change-Id: I905f8dcb61c00b1e60c0e0b459bd27a4e0172cdf
    sqliterepo,sqlx,m2v2: fix election problems after move.
    
    Allow get_peers to bypass meta1 cache in sqlx and meta2v2.
    Add SQLX_EXITELECTION request in sqlx-based services.
    
    Change-Id: Ife2760bc869376c3b793950fca2fa703ca23bec9
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    1.8.4 release candidate
    Initial commit
    meta1: Remove unused code
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Adapt the code to the central config
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    meta1: removes unreachable code
    m1v2: renamed MACRO/functions/requests for more clarity
    
    Compatibility break!
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    2nd cleanup: meta1v2 pruned from its unused code
    
    That code is unused since the only caller (client/c/lib) has been removed.
    m1v2: RELINK implemented for services
    
    When a set of services are linked to a reference, RELINK allows you to change  aservice among the set.
    m1v2: now able replace all the properties on a reference with a new set.
    
    This is consistent with meta2 and sqlx : set + flush.
    Flushing and setting an empty array give the same result as calling a delete.
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    Various improvements
    
    * global error codes added
      * special codes for missing accounts, users, containers
      * client adapted.
    * containers autocreation
      * enabled in m1v2 backend
      * exposed in m1v2 remote
      * exposed in proxy
    * C SDK output reviewed
      * minimal API exposed
      * error messages normalized
    * C SDK: upload extended with the autocreation (disabled by default).
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    Get rid of the crawler.
    
    Also pruned all the code only used by the crawler.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Content propeties reviewed + Cleanup, round 2
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    meta1: Use one notifier per topic
    proxy: Mangle the DB name for /admin/* type=meta1
    
    Also centralizes the meta1_digits variable
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    Remove last traces of old load balancer
    m1v2: integrate new load balancer
    events: insulates module, adds beanstalkd implementation
    m1v2: checks for events queue's availability
    m1v2: checks for events queue's availability
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    m1v2: better transaction management
    
    Only one transaction per backend call.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Various improvements
    
    * global error codes added
      * special codes for missing accounts, users, containers
      * client adapted.
    * containers autocreation
      * enabled in m1v2 backend
      * exposed in m1v2 remote
      * exposed in proxy
    * C SDK output reviewed
      * minimal API exposed
      * error messages normalized
    * C SDK: upload extended with the autocreation (disabled by default).
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    OpenIO is lifting off now !
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    1.8.4 release candidate
    Initial commit
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    Add templates for Issue and PR
    
    (cherry picked from commit e6b10a823df36d9957c966b817f9be9893fd6a7d)
    Add templates for Issue and PR
    
    (cherry picked from commit e6b10a823df36d9957c966b817f9be9893fd6a7d)
    blob-registrator: Allow to specify containers
    blob-registrator: Improve and factorize code
    bin/*: Add copyright mentions
    common/utils: Split to reduce dependencies
    oio-blob-registrator: Add an insert/update/check trigger
    oio-blob-registrator: Step 2
    
    - Fix some loggings
    - Add TODO comments
    - Add an initial sanity check on the NS
    - Remove odd/unused options
    bin: Add the oio-blob-registrator
    
    New tool to refresh the registration of the chunks in their container.
    oio-blob-rebuilder: improve help message
    oio-blob-rebuilder: improve help message
    blob-rebuilder: set syslog prefix
    oio-blob-rebuilder: allow rebuild on the original rawx
    
    New option is --allow-same-rawx
    oio-blob-rebuilder: improve help
    cli: add commands for volume, events, cluster
    
    Volume:
    * admin commands lock, unlock, incident, show
    * show command
    
    Events:
    * stats command
    
    Cluster:
    * list, show commands
    core: move python files around
    rdir: change command name (broken date -> incident date)
    rdir: improve rebuilder and use the content id instead of the content path
    Python API: Allow to rebuild chunk in frozen container
    blob-rebuilder: Shuffle chunks after fetching them from rdir
    
    Jira: OS-442
    Admin CLI: Rename '--workers' to '--concurrency'
    blob-rebuilder: implement --rdir-timeout parameter
    
    This new parameter allows to set the timeout for rdir operations. The
    default value is 60.0s (was 30s before this commit).
    blob-rebuilder: Retry failed rebuild jobs, with a delay
    
    Jira: OS-416
    Python API: Delete old Meta2Rebuilder
    CLI: Improve 'openio-admin meta2 rebuild'
    oio-blob-rebuilder: Ignore --distributed if --dry-run is enabled
    Python API: Limit the spped when filling the queue of the tool
    Python API: Return the list of processed tasks when running a tool
    oio-blob-rebuilder: Use new options
    Python API: implement BlobImprover on top of Rebuilder
    
    Jira: R1810-28
    oio-blob-rebuilder: Just use ASCII when it is enough
    blob-rebuilder: add option to add random wait
    
    Default ratelimit tries to consume all events at start of
    every second: when launching a lot of threads/instance, it
    creates burst effects on cluster.
    
    This commit introduce an option to add random wait after each chunk
    rebuild, that take an argument to perform a [0, arg[ us wait.
    oio-blob-rebuilder: Distribute the broken chunks
    rebuilder: Refactor and improve log message
    Test oio-{blob,meta1,meta2}-rebuilder
    oio-blob-rebuilder: fix default tube, improve logging
    bin/*: Add copyright mentions
    Rebuild the meta1 and meta2 bases
    oio-blob-rebuilder: Parallelize the rebuilding of the chunks
    oio-blob-rebuilder: handle beanstalk network errors
    oio-blob-rebuilder: rebuild missing chunk positions
    
    You can rebuild an object by telling oio-blob-rebuilder which chunk
    position is missing, it is not mandatory to provide a chunk ID.
    common/utils: Split to reduce dependencies
    oio-blob-rebuilder: use dashes in cmdln params
    Event-handler, oio-blob-rebuilder: use beanstalkd to recreate chunks
    
    Correct meta2 spare chunk error: now when the number in the blacklist
    is equal to the number of chunk for the storage policy return a 400 error
    
    Event-handler write in a beanstald's tube the missing chunks
    
    oio-blob-rebuilder: now we have to specify the way we want to get the list
    of chunks to rebuild
    oio-blob-rebuilder: support input file, new options
    oio-blob-rebuilder: improve help message
    oio-blob-rebuilder: improve help message
    blob-rebuilder: set syslog prefix
    oio-blob-rebuilder: allow rebuild on the original rawx
    
    New option is --allow-same-rawx
    oio-blob-rebuilder: improve help
    cli: add commands for volume, events, cluster
    
    Volume:
    * admin commands lock, unlock, incident, show
    * show command
    
    Events:
    * stats command
    
    Cluster:
    * list, show commands
    core: move python files around
    rdir: change command name (broken date -> incident date)
    rdir: improve rebuilder and use the content id instead of the content path
    CLI: Keep the current commands as they are
    xcute: Save job configuration
    xcute: Allow to exit gracefully
    xcute: Use redis to register task
    xcute: Upgrade blob-mover
    mover: Allow to move only chunk whose size is in a range
    blob-mover: Allow to exclude some rawx
    blob-mover: implement concurrency
    
    The chunk mover will now use 10 coroutines to move chunks in parallel.
    This can be changed with the 'concurrency' parameter in the
    configuration file. The rate limiting is global (not per each
    coroutine).
    Add limit and target_usage on configuration file
    Update configuration file usage
    add option to blob-mover
    bin/*: Add copyright mentions
    common/utils: Split to reduce dependencies
    core: move python files around
    use /usr/bin/env for python scripts shebangs
    add blob mover
    blob-auditor: audit chunks
    python: now build with setupttools and pbr
    improve python cmake build
    event agent WIP
    xcute: Handle backend errors
    xcute: Always try to exit gracefully
    xcute: Merge orchestrator and server
    oio-meta2-indexer, Python API: add a new meta2 indexing utility
    
    - Add a new wrapper to list all meta2 records indexed for a volume.
    - Add new meta2 indexing tool, sample conf and tests.
    bin/*: Add copyright mentions
    common/utils: Split to reduce dependencies
    core: move python files around
    rdir: crawler added + rdir installed using oio-reset + fixes
    use /usr/bin/env for python scripts shebangs
    add blob mover
    blob-auditor: audit chunks
    python: now build with setupttools and pbr
    improve python cmake build
    event agent WIP
    Admin CLI: Rename '--workers' to '--concurrency'
    Test oio-{blob,meta1,meta2}-rebuilder
    rebuilder: Fix the import of 'get_logger'
    oio-meta*-rebuilder: Accept an input file
    Rebuilders: document code and CLI
    bin/*: Add copyright mentions
    Rebuild the meta1 and meta2 bases
    bin/*: Add copyright mentions
    common/utils: Split to reduce dependencies
    core: move python files around
    use /usr/bin/env for python scripts shebangs
    add conscience-agent
    blob-auditor: audit chunks
    python: now build with setupttools and pbr
    improve python cmake build
    event agent WIP
    Python API: Fix concurrency
    event: review event-agent configuration options
    
    - Update sample configuration file.
    - Print a link to the configuration sample when no argument is passed.
    - Print a warning when a deprecated option is used.
    bin/*: Add copyright mentions
    common/utils: Split to reduce dependencies
    oio: clean separation of green code
    set eventlet default hub to poll
    core: move python files around
    event-agent: new queue backend and multiprocessing
    use /usr/bin/env for python scripts shebangs
    python: now build with setupttools and pbr
    improve python cmake build
    event agent WIP
    Admin CLI: Rename '--workers' to '--concurrency'
    tests: new tests for oio-blob-improver
    blob-improver: various improvements
    Python API: implement BlobImprover on top of Rebuilder
    
    Jira: R1810-28
    bin/*: Add copyright mentions
    common/utils: Split to reduce dependencies
    core: move python files around
    crawler/storage tiering: fix sample conf and bin/script export
    python/crawler/storage tiering: add crawler to change storage policy of old contents
    rdir: crawler added + rdir installed using oio-reset + fixes
    use /usr/bin/env for python scripts shebangs
    add blob mover
    blob-auditor: audit chunks
    python: now build with setupttools and pbr
    improve python cmake build
    event agent WIP
    oio-meta2-rebuilder: fix invalid argument
    
    Thanks to pybt
    
    Closes: #2019
    Admin CLI: Rename '--workers' to '--concurrency'
    Python API: Delete old Meta2Rebuilder
    Test oio-{blob,meta1,meta2}-rebuilder
    rebuilder: Fix the import of 'get_logger'
    oio-meta*-rebuilder: Accept an input file
    Rebuilders: document code and CLI
    bin/*: Add copyright mentions
    Rebuild the meta1 and meta2 bases
    bin/*: Add copyright mentions
    crawler: add integrity check
    blob-auditor: refactor
    Update blob auditor usage
    bin/*: Add copyright mentions
    common/utils: Split to reduce dependencies
    core: move python files around
    use /usr/bin/env for python scripts shebangs
    blob-auditor: audit chunks
    python: now build with setupttools and pbr
    improve python cmake build
    event agent WIP
    converter: Fix chunk path to check inode
    blob-converter: recover missing fullpath extended attribute
    oio-blob-rebuilder: Add an option for dry running
    oio-blob-converter: Read chunks from a file
    oio-blob-converter: Save old xattr to a backup
    oio-blob-converter: Convert old xattr to new xattr
    Test oio-{blob,meta1,meta2}-rebuilder
    rebuilder: Fix the import of 'get_logger'
    oio-meta*-rebuilder: Accept an input file
    Rebuilders: document code and CLI
    bin/*: Add copyright mentions
    Rebuild the meta1 and meta2 bases
    bin/: Enforce a uniform AGPL
    CI: improve meta2 mover tests output
    
    Also fix a duplicated function (merge issue?).
    Python API: Clean code to execute maintenance operations on meta2 databases
    Depreciate oio-meta2-mover
    oio-meta2-mover, Python API: Delete meta2 index entries from old peer
    Test oio-meta2-mover
    oio-meta2-mover: Add an automatic mode to choose the destination
    oio-meta2-mover: Add script to move meta2 bases
    bin/: Enforce a uniform AGPL
    oio-check-services: Add script to check services
    common/utils: Split to reduce dependencies
    Python API: Fix concurrency
    bin/*: Add copyright mentions
    common/utils: Split to reduce dependencies
    account: Ensure the 'poll' poller for eventlet
    
    (cherry picked from commit 2278d8fbb34eb64a39fd791c3579e345ee63de7a)
    account: Ensure the 'poll' poller for eventlet
    core: move python files around
    avoid /status access logging in wsgi apps
    isolate gunicorn dependency in separate file
    use /usr/bin/env for python scripts shebangs
    python: now build with setupttools and pbr
    account: propagate exceptions for logging purposes + small fix on account update
    python: improved syslog logging
    account-server bin (using gunicorn)
    account backend now supports listing options (prefix, delimiter, limit, marker, end_marker)
    oio-check-{master,directory}: Adapt the import paths
    Move the logic of the zk-*.py scripts into oio/
    
    Also introduce oio-directory-check, oio-check-master
    Thanks to @AymericDu, @murlock
    
    (cherry picked from commit 4cfce87518175cb0f2ce382e7ac6acb0c0109490)
    Add oio-conscience-server to replace gridd+msg_conscience
    
    * Drop gridd (a.k.a. oio-daemon)
    * Rewrite cluster/module/module.c as a standalone service
    * Adapt oio-bootstrap.py to generate env based on the new conscience
    * Merge the conscience lib in the server
    * Move the expression parsing from metautils to cluster
    * Fix compilation warnings about deprecated symbols
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    metautils/expr: Fix a missign #include
    metautils/expr + conscience: Fix odd mix of libc/glib2 mem management
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    multi-conscience: Add more logs
    proxy: Send 503 when the service types are not yet loaded
    conscience: fix logging format
    conscience: do not read persistence file if hub is running
    
    If a hub is running, reinjecting the old state can have nasty effects
    like respawning service entries that have been explicitly flushed when
    one of the conscience services was down.
    Conscience: persist service locks
    
    Create a new 'tag.lock' tag telling is the service has been locked by an
    administrator. This tag is saved (with all other tags) in the conscience
    persistence file. After a restart, this file is loaded, and the services
    are locked (or unlocked) again.
    
    Jira: OS-349
    cluster: fix invalid state after restart_from_file
    
    When conscience restarts from file, service was unlock but
    registered with a score set to 0 and unlock: task_expire skipped
    this kind of service.
    
    Retrieving timemstamp from file was unnecessary as it was already
    present inside file.
    Fix get_file_timestamp error
    Remove comment
    Check get_file_timestamp return value
    Takes call to get_file_timestamp() out of the loop
    Unlock services after restart
    conscience: fix compilation warning
    conscience: fix formatting issues
    Persist conscience services status
    conscience: Remove an assert on input requests
    Use Service Id everywhere
    Associate UUID in cluster
    
    Move UUID in tag part though conscience/stats/http.py
    Add oio-conscience-server to replace gridd+msg_conscience
    
    * Drop gridd (a.k.a. oio-daemon)
    * Rewrite cluster/module/module.c as a standalone service
    * Adapt oio-bootstrap.py to generate env based on the new conscience
    * Merge the conscience lib in the server
    * Move the expression parsing from metautils to cluster
    * Fix compilation warnings about deprecated symbols
    cmake: Only install prod-related tools in other build types than Debug
    cmake: Reorganize the targets
    
    * do not list headers, as it is recommended
    * drop the dependency to sqlite3 in oio-proxy
    Add oio-conscience-server to replace gridd+msg_conscience
    
    * Drop gridd (a.k.a. oio-daemon)
    * Rewrite cluster/module/module.c as a standalone service
    * Adapt oio-bootstrap.py to generate env based on the new conscience
    * Merge the conscience lib in the server
    * Move the expression parsing from metautils to cluster
    * Fix compilation warnings about deprecated symbols
    cluster,conf: Move to the CCF the stgpol and svcupdate_policy
    
    ... CCF for Central Config Facility
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    cmake: added 'Werror' in CFLAGS where there is no warning
    
    Warnings are the voice of Evil.
    
    Let's try to avoid them on targets already clean.
    conscience: renaming + pruning + reorg
    
    * conscience/agent remote functions have been renamed for more clarity
    * MACRO tags have been removed (usage too scarce and immutable, no need of something so flexible)
    * CPU/IO/SPACE computation moved from the oio-cluster-agent to libgridcluster
    * oio-cluster-agent is now now mandatory
    cmake: G_LOG_DOMAIN set at cmake's level.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Content propeties reviewed + Cleanup, round 2
    1.8.4 release candidate
    Initial commit
    Add oio-conscience-server to replace gridd+msg_conscience
    
    * Drop gridd (a.k.a. oio-daemon)
    * Rewrite cluster/module/module.c as a standalone service
    * Adapt oio-bootstrap.py to generate env based on the new conscience
    * Merge the conscience lib in the server
    * Move the expression parsing from metautils to cluster
    * Fix compilation warnings about deprecated symbols
    cluster: Remove commented code
    Add oio-conscience-server to replace gridd+msg_conscience
    
    * Drop gridd (a.k.a. oio-daemon)
    * Rewrite cluster/module/module.c as a standalone service
    * Adapt oio-bootstrap.py to generate env based on the new conscience
    * Merge the conscience lib in the server
    * Move the expression parsing from metautils to cluster
    * Fix compilation warnings about deprecated symbols
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    metautils: Replace old macros by their recent equivalent
    metautils/expr: Fix a missign #include
    metautils/expr + conscience: Fix odd mix of libc/glib2 mem management
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    Add oio-conscience-server to replace gridd+msg_conscience
    
    * Drop gridd (a.k.a. oio-daemon)
    * Rewrite cluster/module/module.c as a standalone service
    * Adapt oio-bootstrap.py to generate env based on the new conscience
    * Merge the conscience lib in the server
    * Move the expression parsing from metautils to cluster
    * Fix compilation warnings about deprecated symbols
    metautils/expr: Fix a missign #include
    metautils/expr + conscience: Fix odd mix of libc/glib2 mem management
    core+metautils: code cleanup, functions {re,}moved
    1.8.4 release candidate
    Initial commit
    Add oio-conscience-server to replace gridd+msg_conscience
    
    * Drop gridd (a.k.a. oio-daemon)
    * Rewrite cluster/module/module.c as a standalone service
    * Adapt oio-bootstrap.py to generate env based on the new conscience
    * Merge the conscience lib in the server
    * Move the expression parsing from metautils to cluster
    * Fix compilation warnings about deprecated symbols
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    metautils/expr + conscience: Fix odd mix of libc/glib2 mem management
    metautils: removes unreachable code
    
    Also removes unused macros and useless comments
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    Build & Use static libraries
    cmake: Explicit the ABI version of each shared library
    cluster,conf: Move to the CCF the stgpol and svcupdate_policy
    
    ... CCF for Central Config Facility
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    tools: "tool_sysstat" now a.k.a. "oio-tool stat"
    proxy+cluster: cluster now also uses the proxy to reach the conscience
    
    + proxy feature to avoid logging succesful accesses for "too common" requests. It avoids flooding the log service.
    cmake: added 'Werror' in CFLAGS where there is no warning
    
    Warnings are the voice of Evil.
    
    Let's try to avoid them on targets already clean.
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    conscience: renaming + pruning + reorg
    
    * conscience/agent remote functions have been renamed for more clarity
    * MACRO tags have been removed (usage too scarce and immutable, no need of something so flexible)
    * CPU/IO/SPACE computation moved from the oio-cluster-agent to libgridcluster
    * oio-cluster-agent is now now mandatory
    Various beautifications
    
    agent: unused code removed
    cluster: uniform interface
    cluster: agent bypass
    conscience: func tests OK
    cmake: G_LOG_DOMAIN set at cmake's level.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Content propeties reviewed + Cleanup, round 2
    OpenIO is lifting off now !
    Fixes source file listed twice.
    1.8.4 release candidate
    Initial commit
    Reorganize the libraries, Avoid a loop on the proxy
    cluster,metautils: Turn static some functions used once
    cluster: Turn static a local function used only once
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    Add oio-conscience-server to replace gridd+msg_conscience
    
    * Drop gridd (a.k.a. oio-daemon)
    * Rewrite cluster/module/module.c as a standalone service
    * Adapt oio-bootstrap.py to generate env based on the new conscience
    * Merge the conscience lib in the server
    * Move the expression parsing from metautils to cluster
    * Fix compilation warnings about deprecated symbols
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    test/func: Add tests for libgridcluster
    conscience: Replace old macros by their recent equivalent
    cluster/lib: Early prevent the service error in the client
    cluster,conf: Move to the CCF the stgpol and svcupdate_policy
    
    ... CCF for Central Config Facility
    meta2,conf: Move the default chunk size on the CCF
    
    .. CCF for Central Configuration Facility
    meta2,cluster: Move 2 variables to the central config facility
    
    In addition, insulates the variables dedicated to meta2 in the
    libmeta2backend, so that only the meta2 services see them.
    rawx: Remove the config of the compression from the nsinfo
    
    Move it to the rawx's configuration.
    meta2,conf: Move 2 nsinfo options to the central config facility
    
    oio_ns_mode_worm, meta2_container_max_size
    cluster: Remove unused functions
    meta2,conf: Move 2 nsinfo options to the central config facility
    
    meta2_retention_period, meta2_max_versions
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 3e12733b1ef6b247af2187db7d044c709501d0d6)
    Fix compilation issues with GCC 7
    config: Manage a second batch of variables
    cluster: Reduce the number of calls to realloc() and strlen()
    conscience: simpler CS options for autocontainers
    
    a.k.a. "FLAT NS"
    python: when reading, choose chunk with weighted random algo
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    core+metautils: code cleanup, functions {re,}moved
    conscience: removes unreacchable code andd useless comments
    m2v2,proxy,events/zmq: benefits from thread-local PRNG
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    core: parse tags when listing services through proxy
    core+cluster: completed service registration/locking
    
    - removed useless tag.score
    + implemented lock_service
    proxy+cluster: cluster now also uses the proxy to reach the conscience
    
    + proxy feature to avoid logging succesful accesses for "too common" requests. It avoids flooding the log service.
    Moved oio_sys_* from cluster/lib to core/ext
    
    (Functions to get the CPU & IO load)
    cluster: fixed memory pools management (slice allocated, regularily freed)
    
    Targets #304 (meta0 segfault at exit).
    Hook'able clock function now used everywhere
    libgridcluster: fixed compile-time warning
    libgridcluster: fixed segfault (double free upon unknown namespaces).
    cluster: stat.io restored in service_info descriptions.
    
    In addition, useless/unused code has been removed.
    proxy: minor fixes on bugs raised by the latest functional tests.
    cluster / lib: fixed io_idle computation, space idle displayed in tool_sysstat
    cluster / lib: fixed memleak (get_namespace, system cache).
    LB: flush option added to reload, reload code moved from cluster to sqlx.
    
    sqlx_service was the only place it was called from.
    conscience: renaming + pruning + reorg
    
    * conscience/agent remote functions have been renamed for more clarity
    * MACRO tags have been removed (usage too scarce and immutable, no need of something so flexible)
    * CPU/IO/SPACE computation moved from the oio-cluster-agent to libgridcluster
    * oio-cluster-agent is now now mandatory
    Various beautifications
    
    agent: unused code removed
    cluster: uniform interface
    cluster: agent bypass
    conscience: func tests OK
    cluster, proxy: Fixes & Improvements
    
    * cluster / remote: cleaner and uniform interface, stripped code (+ dependencies adapted)
    * proxy: CLI option to disable the cache of services
    * proxy: management of services down, that are receive a lower priority
    * server: minor cleanups
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    cluster/lib : fixed default service update policy
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Fixed several warnings appeared with recent GCC versions
    
    * improved printf format checks.
    * fixed formatting weaknesses
    * fixed "unmanaged results" in some functions.
    * fixed unused paramerers
    * tools: adds missing 'import syslog' in monitoring scripts.
    cluster: unused configuration directives pruned.
    agent : better time and timeouts management
    
    Uses monotonic time for periods measurements.
    Now, much less compuations are performed for the timeout management.
    Fixed service push to the conscience + Cleanup, round 8
    
    * The last cleanup commit was named #6, but this was a mistke, there was already a #6.
    * Code factorized
    * Useless code removed
    * Codec functions simplified.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Useless code removed + minor refactoring
    Useless code removed + minor refactoring
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    Content propeties reviewed + Cleanup, round 2
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    m0v2,m1v2,m2v2,sqlx: max worker threads config (TO-HONEYCOMB-775)
    
    New commandline option: MaxWorkers
    New conscience option: param_option.<type>_max_workers
    Default value is 200.
    
    Change-Id: Id80545e05df458b642f7d7b942139a87207820b4
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    m2v2: enable/disable Kafka events from conscience conf
    
    and fix memory leaks and disable Kafka events for local bases
    
    To enable Kafka events from conscience configuration, for all namespaces:
      param_option.event_config.meta2 = kafka_enabled=true;kafka_topic=TOPIC
    
    To enable Kafka events from conscience configuration, for a namespace
    and all its virtual sub-namespaces:
      param_option.NAMESPACE_event_config.meta2 = kafka_enabled=true;kafka_topic=TOPIC
    
    kafka_topic is optional and defaults to "redc.meta2"
    
    Change-Id: I7ea1094e24e5029cfcad46c031db35ba99f2eb47
    cluster/lib: fix TO-HONEYCOMB-725 (gridagent required for RAIN)
    Merges the promoter's changes.
    
      * client/c: adapt rainx_remote for future use
      * Remove meta2_container_services from installed binaries in honeycomb.spec
      * cluster/lib : Fixed memory when there is no /etc/gridstorage.conf
      * m2v2: minor safety fix for chunk substitution
      * metautils / sockets : Fixed return code check.
    fixed memory leak upon missing a configuration
    
    Happened when /etc/gridstorage.conf* were not present.
    2014-06-19 update from the promoter's version.
    
      * cleanup (paths, includes, macros)
      * m2v1: fix warnings
      * conscience: fix (warn on custom NONE stgpol)
      * sqliterepo: add check of redirection target (in debug mode)
      * m2v2: add retry loop for self redirections
      * c client: replaced some g_print by GRID_INFO to allow quiet mode
      * c client: add message on container destroy success
      * sqliterepo: leave election if no peers found in defer_USE
      * client/c: if m2 is replicated, make client retry
      * m2v2: handle error on exit_election
      * conscience: add check on VNS chunk_size
      * sqliterepo: fix leak
      * m2v2, c client: implement TO-HONEYCOMB-713 (chunk_size per VNS)
      * m2v2: fix TO-HONEYCOMB-715 (error after destroying not empty container)
      * sqliterepo, m2v2: improve debug traces
      * metautils: new function to compute printable thread id
      * c client: fix typo in get_virtual_namespace
      * sqliterepo: call malloc_trim after expiring bases
      * c client: fixed physical/virtual namespace confusions
      * rawx-lib: improved recovery of truncated chunks
      * rawx-lib: new options for gs_uncompress (log4c and keep_pending)
      * gridd: Fixed typo
      * gridd: timeout for idle connection is now configurable, and even disableable.
      * client : feature to change the VNS of an established client
      * replicator : VNS are now partially managed (only containers and contents) container_events are not yet supported.
      * metautils : CID computation more robust
      * meta2 / module : events when SLAVE ns + container's VNS in events instead of service's NS.
      * meta2 / lib : backend feature to get the VNS of a container
      * rawx-lib : fixed attr checks
      * cluster/dummy_service : annoying output level-lowered
      * gridd: annoying trace level-lowered
      * metautils: fix copy of chunk.metadata when its length is 0.(cherry picked from commit f5011e6d305b974319062084eac52f950a2d0270)
      * meta2: fixed TO-HONEYCOMB-678 (append on dup chunks)
      * saver: fixed TO-HONEYCOMB-677 (tsmx service not unlinked)
      * saver: now able to manage content delete events (to be tested)
      * saver: now able to make difference between PUT events and the other
      * Fixed relative #include path, that path doesn't allow a graceful split between the OSS/Proprietary parts.
      * m2v2: remove call to sleep in purge
    1.8.4 release candidate
    Initial commit
    Reorganize the libraries, Avoid a loop on the proxy
    cluster,metautils: Turn static some functions used once
    cluster: Turn static a local function used only once
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    cluster,conf: Move to the CCF the stgpol and svcupdate_policy
    
    ... CCF for Central Config Facility
    meta2,conf: Move the default chunk size on the CCF
    
    .. CCF for Central Configuration Facility
    meta2,cluster: Move 2 variables to the central config facility
    
    In addition, insulates the variables dedicated to meta2 in the
    libmeta2backend, so that only the meta2 services see them.
    rawx: Remove the config of the compression from the nsinfo
    
    Move it to the rawx's configuration.
    meta2,conf: Move 2 nsinfo options to the central config facility
    
    oio_ns_mode_worm, meta2_container_max_size
    cluster: Remove unused functions
    meta2,conf: Move 2 nsinfo options to the central config facility
    
    meta2_retention_period, meta2_max_versions
    Adapt the code to the central config
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    proxy+cluster: cluster now also uses the proxy to reach the conscience
    
    + proxy feature to avoid logging succesful accesses for "too common" requests. It avoids flooding the log service.
    Moved oio_sys_* from cluster/lib to core/ext
    
    (Functions to get the CPU & IO load)
    LB: flush option added to reload, reload code moved from cluster to sqlx.
    
    sqlx_service was the only place it was called from.
    conscience: renaming + pruning + reorg
    
    * conscience/agent remote functions have been renamed for more clarity
    * MACRO tags have been removed (usage too scarce and immutable, no need of something so flexible)
    * CPU/IO/SPACE computation moved from the oio-cluster-agent to libgridcluster
    * oio-cluster-agent is now now mandatory
    Various beautifications
    
    agent: unused code removed
    cluster: uniform interface
    cluster: agent bypass
    conscience: func tests OK
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    cluster: unused configuration directives pruned.
    sdk: new feature to collect all the compile-time configuration variables.
    
    * Compile-time options gathered in metautils
    * SDK extended with a new function
    * new sds/oio_config tool to dump the config.
    * unused CMake directives and/or macros pruned.
    sdk: new feature to collect all the compile-time configuration variables.
    
    * Compile-time options gathered in metautils
    * SDK extended with a new function
    * new sds/oio_config tool to dump the config.
    agent : better time and timeouts management
    
    Uses monotonic time for periods measurements.
    Now, much less compuations are performed for the timeout management.
    sdk: PUT minimal implementation, proxying adapted to libcurl <7.4
    sdk: the SDK now make use of the proxy.
    
    Soon, that SDK will be a replacement for the old-style C API in ./client.
    Yet the download and the delete operations are performed without any intervention of the client.
    Still the upload has to be reimplemented.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    event-agent config key fixed + trigger to disable zookeeper in oio-reset
    event-agent config key fixed + trigger to disable zookeeper in oio-reset
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    Useless code removed + minor refactoring
    Useless code removed + minor refactoring
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    m2v2: enable/disable Kafka events from conscience conf
    
    and fix memory leaks and disable Kafka events for local bases
    
    To enable Kafka events from conscience configuration, for all namespaces:
      param_option.event_config.meta2 = kafka_enabled=true;kafka_topic=TOPIC
    
    To enable Kafka events from conscience configuration, for a namespace
    and all its virtual sub-namespaces:
      param_option.NAMESPACE_event_config.meta2 = kafka_enabled=true;kafka_topic=TOPIC
    
    kafka_topic is optional and defaults to "redc.meta2"
    
    Change-Id: I7ea1094e24e5029cfcad46c031db35ba99f2eb47
    cluster/lib: fix TO-HONEYCOMB-725 (gridagent required for RAIN)
    2014-06-19 update from the promoter's version.
    
      * cleanup (paths, includes, macros)
      * m2v1: fix warnings
      * conscience: fix (warn on custom NONE stgpol)
      * sqliterepo: add check of redirection target (in debug mode)
      * m2v2: add retry loop for self redirections
      * c client: replaced some g_print by GRID_INFO to allow quiet mode
      * c client: add message on container destroy success
      * sqliterepo: leave election if no peers found in defer_USE
      * client/c: if m2 is replicated, make client retry
      * m2v2: handle error on exit_election
      * conscience: add check on VNS chunk_size
      * sqliterepo: fix leak
      * m2v2, c client: implement TO-HONEYCOMB-713 (chunk_size per VNS)
      * m2v2: fix TO-HONEYCOMB-715 (error after destroying not empty container)
      * sqliterepo, m2v2: improve debug traces
      * metautils: new function to compute printable thread id
      * c client: fix typo in get_virtual_namespace
      * sqliterepo: call malloc_trim after expiring bases
      * c client: fixed physical/virtual namespace confusions
      * rawx-lib: improved recovery of truncated chunks
      * rawx-lib: new options for gs_uncompress (log4c and keep_pending)
      * gridd: Fixed typo
      * gridd: timeout for idle connection is now configurable, and even disableable.
      * client : feature to change the VNS of an established client
      * replicator : VNS are now partially managed (only containers and contents) container_events are not yet supported.
      * metautils : CID computation more robust
      * meta2 / module : events when SLAVE ns + container's VNS in events instead of service's NS.
      * meta2 / lib : backend feature to get the VNS of a container
      * rawx-lib : fixed attr checks
      * cluster/dummy_service : annoying output level-lowered
      * gridd: annoying trace level-lowered
      * metautils: fix copy of chunk.metadata when its length is 0.(cherry picked from commit f5011e6d305b974319062084eac52f950a2d0270)
      * meta2: fixed TO-HONEYCOMB-678 (append on dup chunks)
      * saver: fixed TO-HONEYCOMB-677 (tsmx service not unlinked)
      * saver: now able to manage content delete events (to be tested)
      * saver: now able to make difference between PUT events and the other
      * Fixed relative #include path, that path doesn't allow a graceful split between the OSS/Proprietary parts.
      * m2v2: remove call to sleep in purge
    1.8.4 release candidate
    Initial commit
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    core: introduces new macro to check the API/ABI version
    
    We plan to introduce fields in some structures. We need such a simple
    way to let the application programmer check its installation is correct
    and check the version it used at compile time was the same the version
    currently known by the library.
    sqlx: sqlxclient rename to oiosqlx
    oio-sds/pc now built, relase and version now configurable.
    Remove unsupported backblaze integration
    CI: Limit the maximum number of databases open simultaneously
    Expose TLS ports in tags for watcher
    tools: add option to bootstrap rawx with TLS
    
    Note: The certificate itself is static at this time
    events: forward all replication events by default
    
    To avoid problems during the update of old platforms, the check to see
    if replication is enabled for each bucket must be explicitly enabled.
    Enable or disable replication for each bucket
    
    Implement a new event-agent plugin that will query the account service
    to know if a container must be replicated.
    
    Jira: OB-477
    Fix oio-bootstrap for profiling
    xcute: Add sample configuration
    xcute: Merge orchestrator and server
    xcute: Allow to send tasks bacth
    xcute: Add xcute server in conscience
    xcute: Create a filter for event-agent
    CI: slightly rework the test suites
    
    - Enable compression on half of the rawx services.
    - Run only the "big" rebuilder test.
    - Enable compresion during the rebuilder tests.
    - Update project version to 6.1
    rawx: skip tests invalidated by the presence of compression
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Update oio-bootstrap.py for python3
    Minor fixes for Python 3
    
    Fixup remaing print keyword
    Use six to import StringIO
    rawx: log bad requests, enhance log format
    oio-bootstrap: define oioswift, oioproxy and beanstalkd types
    event-agent: Update the sample of the event handler configuration
    tests: fix test_content_perfectible.py
    
    Some tests were systematically skipped.
    rawx: Fix the accesslog format of the httpd rawx
    oio-reset: Explicitely assign volumes.
    
    It allows turning the lazy-lock to TRUE
    rawx: Set the upload buffer size to 8MiB
    core: Fix the LB on local services (#1862)
    
    * Also also the placement of spare chunks on the local proxy.
    * core: Use service addr instead of ID for their unique key
    * lb: Pass debug message in TRACE level and restore fast lookups
    * oio-reset: Deploy a proxy with a location
    * Fix compilation warnings
    tests: Add configs to reproduce a bug
    Allow to place some chunks locally to the proxy
    reset: Bootstrap 2-digits meta1 by default
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    Get rid of the httpd-based rawx (#1833)
    
    * rawx: Get rid of the implementation based on httpd
    * Remove the unused rawx-lib
    * oio-bootstrap: Adapt the RAWX configuration (only the useful fields remain)
    * ci: Adapt to the only rawx remaining
    Admin CLI: Rename '--workers' to '--concurrency'
    event-agent: Handle 'storage.container.update' events
    event-agent: allow to configure content_cleaner cnx pool
    
    This will help reducing the number of persistent connections to one
    service, while keeping at least one persistent connection to each
    service. Set:
    - pool_connections: high value (ideally one per rawx service)
    - pool_maxsize: low value (one per coroutine, "concurrency" in the main
    configuration file)
    oio-bootstrap: Allow to deploy event-agent with replication
    Remove obsolete legacy tools | BREAKING CHANGE (#1759)
    
    BREAKING CHANGE:
    * tools: Stop installating oio-gdb.py
    * bootstrap: Clean useless config variables
    * tools: Remove the unused oio-unlock-all.sh
    * cluster: Get rid of oio-cluster
    ci: Use travis pipeline
    
    Fail fast on gotchas, then proceed with the long tests.
    Attempt to split the logic of the tests (in tools/oio-test-*) and the
    Travis environement specifics (in tools/oio-travis-*), so that the logic
    should be easy to run on a dev sandbox.
    bootstrap: add option to enable fsync for RAWX
    CI: preserve events only during functional tests
    tests: implement a facility to wait for a specific event
    
    Event can be specified by type and/or request ID.
    oio-blob-rebuilder: Use new options
    CI: configure conscience persistence
    event-agent: add dump filter
    
    It will help debugging events.
    Events will be store as event_{job_id} in /tmp/
    Python API: fix warning at yaml loading
    
    This is more a workaround than a fix. The real fix requires a more
    recent version of PyYaml.
    conscience-agent: collect beanstalkd stats
    
    Collect some statistics about beanstalkd jobs. They could help refining
    the score of beanstalkd services.
    
    Also improve the configuration sample.
    Register proxy and beanstalkd into conscience
    proxy: Prefer local services
    
    1/ Give a location to any proxy on the host (central variable)
    2/ Mangle the scores of RAWX to give precedence to services that are
       closer
    3/ Allow to enable/disable that behavior.
    test: Use existing oio-blob-rebuilder
    gridinit: Add oio-blob-rebuilder
    Update copyright mentions
    tools: Factorize Zookeeper code
    tests: make service management easier
    Add tests on webhook event
    tests: Expose webhook endoint for test
    Allow oio-boostrap with webhook
    Update the sample of the event handler configuration
    event-agent: Add event handler for the modification of properties
    
    (cherry picked from commit 02da0c6f1f8a13f2fad6b60493d45618649aa05f)
    tests: accelerate annoyingly long tests
    rawx: Test both Apache and Go implementation
     oio-bootstrap: Add meta2-indexer to the bootstrap process
    CLI: fix loading of meta1_digits
    event-agent: get rid of meta2_index
    m2: only send local peer in container.deleted events
    
    The drawback is that when deleting a container, several events are sent
    (one per peer).
    rawx: Fix the path for the coverage
    Addressing some of @fvennetier comments
    Add event filters to index META2 databases
    Test content.perfectible events management
    oio-bootstrap: configure LB warn_dist
    event-agent: Add event handler for the modification of properties
    rawx: Configure coverage
    gridinit: Use the new rawx
    oio-reset: Clean the env when unnecessarily populated
    oio-reset: Deploy larger ECD
    oio-reset: Deploy smaller rawx
    tests: add test with moving meta2
    meta2: support use of ServiceId
    
    meta-server now support ServiceId option on command line
    (but it should be used only by meta2)
    oio-reset: Allow to specify an explicit datadir
    oio-bootstrap: No sync for you!
    
    (a.k.a the "Sync Nazi")
    
    Deploy test config for rawx with a sync configured neither for data nor
    directories.
    oio-blob-rebuilder: fix default tube, improve logging
    oio-bootstrap: Fix the deployment of multiple beanstalkd
    oio-boostrap: Remove hardcoded beanstalkd URL
    oio-bootstrap: Allow deploying several beanstalkd
    oio-bootstrap: Avoid restarting failed services during the tests
    Use Service Id everywhere
    Allow use of valgrind/callgrind from oio-reset
    Tests: add simple test with rawx addr changest
    tools: mix services with service id or not
    tools: generate configuration with or without uuid
    tools: bootstrap now exposes UUID in test.yml
    Rawx: add, save and expose UUID
    
    UUID will be saved in xattr instead IP:PORT
    meta1: Send event when a reference is created
    
    Fixes #1291
    conscience-agent: new "asn1" service checker
    
    To be used with meta0, meta1, meta2 and sqlx.
    event-agent: Add filter to bury job
    tools: Get rid of the useless configurable prefix
    oio-bootstrap.py: Mention Conrad Kleinespel in the copyright heading
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Meta2, Event-handler: Create a separate handler to drain a content
    coverage: enable it for WSGI and nosetests
    
    Command for coverage for [testenv:func] was skipped.
    bootstrap: increase MaxRequestsWorkers
    
    During tests of range download, Apache configuration was
    too short to handle lot of small requests.
    
    oio-bootstrap now add MaxRequestsWorkers to allow Apache to spawn
    new children to support charge.
    
    This patch also enforce test by testing HTTP return code when
    downloading range.
    oio: move container_streaming into container
    container_streaming: add logs
    
    This patch introduces logs and rework oio-bootstrap.py to split
    one conf for httpd and one conf for service itself. Previously
    same file was used for both cases.
    Implement service 'admin'
    
    This service will allow to download a container.
    The API is now managed by a WSGI rule with parameters acct and ref
    like other services.
    
    Previously, oio-bootstrap.py was using configuration file to store
    Apache configuration. This patch moves them into dedicated files
    with component httpd.
    It allow to specify configuration file for this new service.
    oio-bootstrap: fix storage policy settings
    oio-bootstrap: improve service locations
    core/lb: better error handling, warn if flawed
    ContentRebuilderFilter: Merge with NotifyFilter (fix #1033)
    conf: Avoid prefixing the variable keys with 'oio.'
    oio-bootstrap.py: Remove obsolete options
    tests/func/api: Get the real chunksize from the NS
    
    ... instead of a magic number
    cluster: Alert for old-style options
    cluster,conf: Move to the CCF the stgpol and svcupdate_policy
    
    ... CCF for Central Config Facility
    meta2,conf: Move the default chunk size on the CCF
    
    .. CCF for Central Configuration Facility
    core/lb: review the configuration
    
    Simplify the configuration of the service pools (and the code).
    Do not use bit mask, use bit shifts before comparing locations.
    The location requirements are now expressed by "distance".
    By default, there is nothing to set: the biggest distance requirements
    will be tried, and then loosened if not satisfiable.
    Event-handler, oio-blob-rebuilder: use beanstalkd to recreate chunks
    
    Correct meta2 spare chunk error: now when the number in the blacklist
    is equal to the number of chunk for the storage policy return a 400 error
    
    Event-handler write in a beanstald's tube the missing chunks
    
    oio-blob-rebuilder: now we have to specify the way we want to get the list
    of chunks to rebuild
    event-agent: content_rebuilder write chunk to a file
    
    Still keep the format of the oio-blob-rebuilder but modify the chunk_id field
    so it can also be use for the position
    'container_id|content_id|(short_chunk_id||pos)'.
    The position is distinguished from the chunk_id by the size (inferior to
    32 digit)
    oio-bootstrap: use same replication factor for meta0 and meta1
    oio-reset: Make the first port configurable on the CLI
    events: add event logging filter
    oio-bootstrap.py: Deploy one oio-blob-indexer per rawx
    lb: Expire the services that disappeared from the conscience
    
    Fix #815
    oio-bootstrap.py: Remove a useless env variable
    events: add event logging filter
    oio-bootstrap.py: Deploy one oio-blob-indexer per rawx
    oio-bootstrap.py: Manages the central configuration + presets added
    conf: Third batch of variables
    
    udp_allowed, log_outgoing, rawx_events
    core: Loads the configuration in the proxy
    
    + Fix the min/max bounding behavior in the central configuration module
    lb: Expire the services that disappeared from the conscience
    
    Fix #815
    rawx: enable chunk events by default
    event: new noop event filter
    
    Does nothing with the input event. Useful if you just want to drop the events.
    meta2: Implement /content/touch
    
    A.k.a. M2_CTOUCH, "meta2 content touch".
    Immediately drops an event into the queue (currently: beanstald).
    meta1,meta2,proxy: Enables the faulty peers avoidance
    
    Triggered if actived in the system-wide configuration of the namespace.
    rdir: Allow thread-based parallelism
    tools: Fix oio-bootstrap.py for Centos, when an ecd is deployed
    oio-reset.sh: change default rdir number to 3
    oio-reset.sh: change default rdir number to 3
    oio-bootstrap: harmonize template names
    Add oio-reset.sh options + config presets
    
    * multiple IP (must be local) for all the services
    * multiple IP for each service, different frim the global set
    * configuration files renamed
    * CI scripts modified accordingly
    oio-bootstrap: add profiling possibility
    sqliterepo: actually reuse idle bases when max reached
    core: allow to log outgoing requests
    sqliterepo: shuffle the ZK cnx string before usage
    oio-bootstrap.py: deploy a custom ZK cnx string, if set in the env
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    oio-reset.sh is now able to enable UDP
    meta{0,1,2},sqlx: allows alternate ZK url in /etc/oio/sds.conf
    
    A service with the XXX service type now overrides its ZK url (found at
    'zookeeper' in /etc/oio/sds.conf) with an other value found at
    zookeeper.XXX in /etc/oio/sds.conf. If the specific value is not set,
    the main value is left untouched.
    tools: copyright disclaimer reviewed (years)
    proxy: answer 409 when content already exists (fix #747)
    conscience: simpler CS options for autocontainers
    
    a.k.a. "FLAT NS"
    CI/Travis: adds stronger GLib flags
    oio-bootstrap: change ECD log format
    core,m1: fix 'user_is_a_service' option handling (2)
    
    There was a problem with the location of the service for which
    the load-balancer was queried.
    oio-bootstrap: add template for asynchronous replication
    m1: fix 'user_is_a_service' option handling
    python: when reading, choose chunk with weighted random algo
    rawx/logs : Format into a openio logging format + add new informations
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    oio-reset: zookeeper disabled by default
    oio-bootstrap.py: now accepts multiple config files
    
    Each file is a configuration fragment that updates the global
    configuration of the script. The order matters!
    metautils,tests: fix LB location from IPv6, add tests
    metautils: fix parsing of tag.log
    Minor fixes around events
    lb,tools: "/24" notation for masks, new tool to compute locations
    core: add new LB options: mask_max_shift and nearby_mode
    cs,core,metautils: new services and LB configuration
    
    Rearrange service types configuration to make it more clear.
    Rearrange service pools configuration to add more options.
    Compute integer service location from dotted string location.
    sqlx-client: debugs outgoing sqlx requests
    oio-bootstrap.py: TWOCOPIES requires less constraints on its pool
    oio-bootstrap: add documentation in generated service configuration
    Review storage policy and service pool configuration
    backblaze : delete operation is made asynchronously
    backblaze_http : add new class Utils
    ecd : add clear error messages
    oio-bootstrap: deploys rawx with more resources
    conscience: option to unlock scores by default (fix #612)
    
    The option is 'lock_at_first_register' and is on by default.
    It must be specified per service type, e.g.:
      param_service.meta0.lock_at_first_register=false
    ecd: wraps around mod_wsgi bug (#625)
    ecd: wraps around mod_wsgi bug
    oio/ecd/app.py : add backblaze storage policy support (plain is WIP)
    tools/oio-bootstrap.py : adding application-key to configure ecd service
    oio/api/backblaze_http.py : correcting some mistakes
    Adds new test envs
    b2: change configuration, improve error handling
    rawx: add 'grid_compression' option
    
    'grid_compression' takes either 'off', 'zlib' or 'lzo' value.
    Compression must also be enabled in conscience configuration.
    bootstrap: deploy ecd and complete sds.conf
    tests: use liberasurecode_rs_vand as default backend
    meta2v2 + metautils : add backblaze compatibility
    tools/oio-bootstrap.py : adding two fields to add backblaze compatibility
    removes remains of rainx
    bootstrap: review config input
    Farewell to the rainx!
    
    + rawx simplification
    Integrate new erasure coding daemon
    tools/oio-reset.sh : relative path support compatibility (fixed #599)
    Fix and clean oio-bootstrap.py
    tools : Add file configuration for oio-bootstrap.py (#585)
    
    * tools/oio-bootstrap.py: add configuration by config file for oio-bootstrap
    tools/oio-reset.py: remove useless options; add new -f to indicate the config file of oio-bootstrap.py
    etc: add a file with the minimum file configuration and tests files
    travis.yaml: pass the files in arguments
    
    * tools/oio-bootstrap.py : controls number of meta2 and meta1 by command line
    etc : add config file in yml format
    storage policies: moar review
    
    iod: PUT and GET meta chunks via HTTP
    EC through gateway + rebase on master (#594)
    
    * fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    
    * event-agent: use basic http for account client
    
    * oio-bootstrap.py: fixed default schema for mail applications
    
    * metautils/lb: uses the local PRNG, uniform distribution (#582)
    
    Uses the local PRNG instead of the libc's rand(), with its guarantee on
    the uniform distribution over a given range.
    
    This should lead to better random and should fix the apparent preference
    for the first item.
    
    * Do not generate extra debug and asserts when building in RelWithDebInfo
    
    * core: implement upload and download through http gateway
    oio-bootstrap.py: fixed default schema for mail applications
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    beanstalkd: configurable TUBE (#574)
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    oio-reset: new profile option, new 'weak' RAIN policy
    
    The new '-p' option takes a value: the name of the profiler
    (only "valgrind" is supported at the moment).
    rawx: adds an alias that prevents to many lstat()
    events: make buffer delay configurable (5s by default)
    events: insulates module, adds beanstalkd implementation
    sqlx: fixes the default schema for the connector to dovecot
    rawx,rainx: remove useless options
    sqlx: reconfigure the max-pending for the services'es events queues.
    
    + sample configuration
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    oio-bootstrap: fixes the default schemas for SQLX
    boostrap: fix event-agent configuration retries_per_second
    conscience-agent: tcp check now set TCP_REUSEADDR socket option
    event-agent: improve queue backend
    
    add batch_size setting
    fix bootstrap for queue location
    bootstrap: filter stat and info requests for rainx and rawx services
    Improve test configuration to allow more tricky tests
    bootstrap: set default monitor period to 5s
    oio-bootstrap.py: fix double conscience section in gridinit config
    conscience-agent: refactoring and cleanup
    oio-conscience-agent: adds monitoring for meta*
    bootstrap: clean names for rdir and account services
    
    add IP:PORT as group in gridinit
    account-server: add possibility to use redis-sentinel
    oio-reset: watch redis with conscience-agent
    m1: new option to prevent rdir and rawx on same location
    conscience-agent: set service location
    oio-reset: use conscience-agent to monitor rdir/account
    oio-reset: use conscience-agent to monitor rawx/rainx
    oio-bootstrap.py now generates sqlx loaded with app. schemas
    oio-bootstrap.py: adds the ping plugin to the conscience
    oio-bootstrap.py: minor change
    oio-bootstrap.py: better flake8 compliancy
    oio-bootstrap.py: added field to the config value
    
    Obviously duplicated, they helps starting *effortless* the Java HTTP gateway.
    Why? Because the file generated by oio-bootstrap.py can be used as a configuration file.
    tools/bootstrap: restored the mkdir for Redis
    tools/bootstrap: declare "oiofs" service type
    tools: fix oio-reset.sh for Opensuse
    oio-reset: add -M option to specify the monitoring period
    server: fixed timeouts and warnings around idle connections
    oio-reset: add rainx addresses in test conf file
    oio-reset: add distance=1 to default RAIN policy
    oio-reset: add chunk_size in test conf
    oio-reset.sh: the bootstrap (config generation) had hardcoded NS names in 3 places.
    
    Fixes a problem of rawx not declared when working with a NS differents from the default.
    rainx: oio-reset deploy a rainx service
    oio-bootstrap.py: better default score expressions
    rdir: rebuilder: add functionnal tests + fixes
    rdir: server checks the namespace in the http request
    functional tests fixed on blob services (rawx)
    
    oio-bootstrap.py has been adapted to generated more valuable information.
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    rdir: rawx services use event agent address from grid conf instead of rawx conf
    rdir: add chunk creation event in rawx and in event agent + minor changes
    rdir: crawler added + rdir installed using oio-reset + fixes
    proxy: V2.0 routes'es code removed, RDIR routes implemented
    meta1: better functional tests result.
    conscience: renaming + pruning + reorg
    
    * conscience/agent remote functions have been renamed for more clarity
    * MACRO tags have been removed (usage too scarce and immutable, no need of something so flexible)
    * CPU/IO/SPACE computation moved from the oio-cluster-agent to libgridcluster
    * oio-cluster-agent is now now mandatory
    cluster, proxy: Fixes & Improvements
    
    * cluster / remote: cleaner and uniform interface, stripped code (+ dependencies adapted)
    * proxy: CLI option to disable the cache of services
    * proxy: management of services down, that are receive a lower priority
    * server: minor cleanups
    fix blob func tests
    
    add sds_path in test.conf file generated by oio-bootstrap.py
    tools: fixed redis config (unmanaged parameters on some platforms)
    tools: oio-bootstrap.py also references the redis server in the test description.
    lb: the default iterator becomes WRR
    
    At least until WRAND is repaired.
    The changed has been made into the code (metautils) and into the configuration generated by oio-bootstrap.py
    tools: restore THREECOPIES in the config generated by oi-reset.sh
    tools: oio-bootstrap.py doesn't force the PATH for gridinit.
    
    The path is inherited from the user's env.
    This is necessary for python scripts installed in an virtualenv.
    tools: additional meta{1,2} services can be added with environment directives.
    
    ADD_META2=1 oio-reset.sh -X sqlx -X zookeeper -R 1 -B 1
    oio-bootstrap.py : now expresses all the conscience options
    Fixes, improvements
    
    m2v2: fixed "bean leak" when purging exceeding aliases (properties not removed).
    m2v2: fixed "bean leak" when deleting explicit aliases (properties not removed).
    proxy: Fixed compile-time warnings
    proxy: properties returned in headers when getting objects
    proxy: headers matching now case-insensitive
    proxy: In addition, request handlers returning invariable and dummy outputs (empty lists, empty sets) now return nothing.
    tools: bootstrap doesn't deploy the admin flask (it is destined to disappear in the next release and is already used by no one).
    tools: oio-{reset,bootstrap}: configurable port range + able to deploy a Redis
    oio-bootstrap : added /usr/local/bin in default PATH
    
    This is enough for sandbox testing environments.
    oio-reset / oio-bootstrap : fixed PATH, configurable chunk_size.
    tools: fixed port overlapping
    
    It happened with the generated configuration for event-agent and account-server.
    tools: fixed default setting when bootstraping sandbox envs.
    sds-bootstrap correction for tests.conf generation
    Proxy and Rawx tests : corrected indentation
    Proxy and Rawx tests : cleaned and updated configuration procedures
    Proxy and Rawx tests : fixed indentation
    Rawx tests : automatized tests configuration and updated basic tests (to be continued) & Proxy tests : a few corrections
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    account: autocreate account option
    oio-bootstrap.py: endpoint not deployed
    
    OpenIO internally works like a democracy. A vast majority of the electors expressed their opinion: the nginx endpoint proxying the service must leave.
    
    Might the nginx endpoint be successful outside of OpenIO,
    Long live the Democracy!
    tools: oio-bootstrap.py adapted for Ubuntu.
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    proxy: better error management, now able to multiple-bind
    bootstrap: useless configuration removed.
    sdk: the SDK now make use of the proxy.
    
    Soon, that SDK will be a replacement for the old-style C API in ./client.
    Yet the download and the delete operations are performed without any intervention of the client.
    Still the upload has to be reimplemented.
    tools: minor logging fixes in bootstrap script
    python: namespace config handling
    tools: proxy info now in sds.conf with bootstrap script
    bootstrap: added account service definition in conscience conf
    python: namespace config handling
    tools: proxy info now in sds.conf with bootstrap script
    bootstrap: added account service definition in conscience conf
    bootstrap: added account service definition in conscience conf
    bootstrap: added account service definition in conscience conf
    minor fixes in bootstrap script
    account: basic monitor script for svc-monitor
    account: basic monitor script for svc-monitor
    bootstrap script uses the feature of env inheritance from gridinit, for the sake of simplicity.
    tools: looser permissions on development installation paths.
    adds support for apache2 binary path on debian
    bootstrap script uses the feature of env inheritance from gridinit, for the sake of simplicity.
    tools: looser permissions on development installation paths.
    oio-bootstrap.py : fixed login detection.
    replace "os.getlogin()" with "pwd.getpwuid(os.getuid())"
    
    Hello everyone,
    
    I am setting up Open IO in Docker. In the process, I notice that using `os.getlogin()` does not work if the user that executes the program is not logged in via the `login` command. More generally, it seems like `getlogin()` is not too reliable and `getpwuid(getuid())` seems to be a better way to do the same thing: http://stackoverflow.com/questions/4785126/getlogin-c-function-returns-null-and-error-no-such-file-or-directory
    
    Best regards,
    Conrad
    tools: fix in event-agent template for bootstrap script
    tools: set user for event-agent in bootstrap script
    tools: added account-server in bootstrap script
    event-agent support in bootstrap script
    Fixed configuration generator.
    
    It was broken when zookeeper's management was inhibated.
    Slab allocation for small structures + ASN.1 message simplification
    event-agent config key fixed + trigger to disable zookeeper in oio-reset
    Slab allocation for small structures + ASN.1 message simplification
    event-agent config key fixed + trigger to disable zookeeper in oio-reset
    bootstrap : script adapted to the event-agent.
    tools: bootstrap scripts fixed number of services (now just enough).
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    tools: various minor fixes
    tools: New options to the CLI of the bootstrap scripts.
    
    These options are now available to oio-reset.sh, and are propagated to subprocesses. Here are the options and their default values:
      * -D "3"
      * -B "3"
      * -S "SINGLE"
      * -V "1"
      * -N "NS"
      * -I "127.0.0.1"
    tools: New options to the CLI of the bootstrap scripts.
    
    These options are now available to oio-reset.sh, and are propagated to subprocesses. Here are the options and their default values:
      * -D "3"
      * -B "3"
      * -S "SINGLE"
      * -V "1"
      * -N "NS"
      * -I "127.0.0.1"
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    sds-bootstrap.py : deploys 3 rawx
    tools: the bootstrap script now deploys replicated m2v2
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    tools: add bt full
    tools: add oio-gdb.py
    
    It will display backtrace of cores after tests.
    CI: plug into the 19.10 package repository, fix deps
    ci: Use travis pipeline
    
    Fail fast on gotchas, then proceed with the long tests.
    Attempt to split the logic of the tests (in tools/oio-test-*) and the
    Travis environement specifics (in tools/oio-travis-*), so that the logic
    should be easy to run on a dev sandbox.
    Minor fixes for Python 3
    
    Fixup remaing print keyword
    Use six to import StringIO
    Python API: fix warning at yaml loading
    
    This is more a workaround than a fix. The real fix requires a more
    recent version of PyYaml.
    Update copyright mentions
    tools: Factorize Zookeeper code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    tools: copyright disclaimer reviewed (years)
    tools: restores the oio-test-config.py script
    bootstrap: review config input
    tools: drops the dependency to `jq`, parallelize oio-reset.sh
    Implement oio-lb-benchmark
    
    This new tool has 2 purposes:
    - test the load balancer speed;
    - test new pool configurations without the need of a deployed platform.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    tools: Fix compilation warnings during Release builds
    tools: Add oio-zk-harass to stress a ZK server
    rawx: skip tests invalidated by the presence of compression
    CI: enable python3 unit tests
    
    Jira: R1910-1
    oio-reset: Better detection of a previous deployment
    oio-reset: Fix the startup detection for gridinit
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    oio-reset: Do not lock/unlock meta1 scores before bootstrap
    Remove obsolete legacy tools | BREAKING CHANGE (#1759)
    
    BREAKING CHANGE:
    * tools: Stop installating oio-gdb.py
    * bootstrap: Clean useless config variables
    * tools: Remove the unused oio-unlock-all.sh
    * cluster: Get rid of oio-cluster
    oio-reset.sh: Fix openio command
    Make sure that meta1 are started before assigning rdir services
    oio-reset: Stop calling zk-reset.py
    
    It takes a while and it is useless.
    CI: fix minor issues in oio-reset.sh
    Merge all the admin commands related to ZK
    tools: Factorize Zookeeper code
    m0,oio-reset: better error message, more debugging output
    Python API, rdir: refactor
    Move RDIR/META2 assignment to new CLI command
    
    Moved the RDIR/META2 assignment a new "openio rdir bootstrap meta2"
    command, and added an "openio rdir bootstrap rawx" command that is
    exactly equivalent to "openio volume admin bootstrap" (which in fact
    re-uses the same code)
    Add CLI command to assign RDIR to META2
    
    Modified the "openio directory bootstrap" command so that
    "openio directory bootstrap meta2" with the parameter
    --max-per-rdir assigns an RDIR service to each META2 server.
    
    Also modified tools/oio-reset.sh to bootstrap META2 assignments
    using this command, with a default value of 10 for --max-per-rdir
    oio-reset: Only cleanup DATADIR
    oio-reset: Cleanup the datadir when explicit
    tools: fix oio-reset.sh with invalid bootstrap
    
    The meta1 was restarted without checking if new instances were
    up before launching rdir assignation, leading to No meta1 answered (HTTP 503)
    error.
    Move the logic of the zk-*.py scripts into oio/
    
    Also introduce oio-directory-check, oio-check-master
    Thanks to @AymericDu, @murlock
    
    (cherry picked from commit 4cfce87518175cb0f2ce382e7ac6acb0c0109490)
    oio-reset: Allow to specify an explicit datadir
    oio-reset: Simplify the `oio-reset` command
    CLI: fix logic error in 'directory bootstrap'
    
    - fix logic error in `openio directory bootstrap` command
    - improve documentation
    - split usage of `openio directory bootstrap` from `oio-reset.sh`
    Use Service Id everywhere
    Allow use of valgrind/callgrind from oio-reset
    tools: mix services with service id or not
    tools: generate configuration with or without uuid
    tools: Get rid of the useless configurable prefix
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    tools: Adapt the dev tools to the (coming soon) ZK sharding
    travis: Speed the tests up
    oio-reset: Make the first port configurable on the CLI
    oio-reset: do not use oio-cluster, fix callgrind conf
    cli: new options for "directory bootstrap" (fix #883)
    
    * --check to check the number or replicas before saving
    * --force to do the bootstrap even if already done
    * timeout is set to 30s
    Add oio-reset.sh options + config presets
    
    * multiple IP (must be local) for all the services
    * multiple IP for each service, different frim the global set
    * configuration files renamed
    * CI scripts modified accordingly
    sqliterepo/election: cleaner trasitions the FSM
    
    The goal of the commit is to prevent entering a state with several
    pending callbacks that can trouble the transitions and cause messages
    storms.
    
    Only the completion events make the FSM (finite state machine) step
    forward. All the "interruptions" events are delayed until the normal
    actions are all done.
    
    Summary of the changes:
    
    * general renaming of the states to more intuitive names that denote the
      action that is pending. LEADER -> MASTER, LOST -> SLAVE.
    * new states added, so that at most one action is pending in each state.
      specially PRELOST that becomes [ASKING,CHECKING_MASTER] and CANDOK
      that becomes [WATCHING,LISTING].
    * new state added to leave-and-then-fail, instead of leaving then
      retrying.
    * Tests, tests, test. Despite the FSM is not 100% covered yet, the major
      transitions are now checked.
    * Timers simplified: since we wait for actionns before leaving an FSM
      state,.the necessity to retry an election is vastly simplified and
      only occurs from the NONE state.
    * A jitter has been introduced before sending a ping (USE) from a final
      state.
    
    Despite the result should be more stable, robust and resilient, this is
    a big set of changes and one shoould take care of possible unexpected
    effects. Especially of elections that could go more often than necessary
    in the FAILED state, and then undergo a 5s timer before the retry.
    (Prior to this commit, we would have loop-retry more often than
    necessary.)
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    tools: copyright disclaimer reviewed (years)
    rdir: initialized early, better balanced
    
    rdir are linked to rawx by `openio directory bootstrap`.
    cli: add 'openio cluster unlockall' command
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    oio-reset.py: accepts several configuration files
    merge python client api from oiopy into core
    
    integrate CLI
    bootstrap: review config input
    rawx: fixes trailers management
    tools/oio-reset.sh : relative path support compatibility (fixed #599)
    tools : Add file configuration for oio-bootstrap.py (#585)
    
    * tools/oio-bootstrap.py: add configuration by config file for oio-bootstrap
    tools/oio-reset.py: remove useless options; add new -f to indicate the config file of oio-bootstrap.py
    etc: add a file with the minimum file configuration and tests files
    travis.yaml: pass the files in arguments
    
    * tools/oio-bootstrap.py : controls number of meta2 and meta1 by command line
    etc : add config file in yml format
    oio-reset: new profile option, new 'weak' RAIN policy
    
    The new '-p' option takes a value: the name of the profiler
    (only "valgrind" is supported at the moment).
    m0, proxy: new routes and tools to list and force meta0 mapping
    First implementation of a prefix balancing python script
    oio-reset.py: allows to specify a number of meta0
    
    ... with the help of NB_META0 got from the environment.
    tools: drops the dependency to `jq`, parallelize oio-reset.sh
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    bootstrap: filter stat and info requests for rainx and rawx services
    conscience-agent: refactoring and cleanup
    oio-reset.sh: waits for services to be scored before exiting
    
    Helps running the tests with a plainly usable environment.
    travis: fixes oio-event-agent exit
    
    + "pkill -9" sent after 10 seconds to the event agent
    + tests insulated in a script, to ease reproducing out of Travis
    oio-reset.sh: avoid ignoring an error when waiting for gridinit
    lighter output
    oio-reset: execution time limited + lighter output.
    
    Try the "-v" option of oio-reset.sh for more information
    tools/oio-reset.sh: # of meta1 checked before meta0 init
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    tools: fix oio-reset.sh for Opensuse
    oio-reset: add -M option to specify the monitoring period
    tools: removed trailing spaces
    oio-reset: add option -E to specify the number of rawx
    tools: oio-reset.sh now cleans the META0 registrations with zk-reset.py
    
    This allows subsequent tests to be ran with the same ZK service.
    The META0 registrations were the only permanent nodes created by services in ZK.
    tools: additional meta{1,2} services can be added with environment directives.
    
    ADD_META2=1 oio-reset.sh -X sqlx -X zookeeper -R 1 -B 1
    tools: oio-{reset,bootstrap}: configurable port range + able to deploy a Redis
    oio-reset / oio-bootstrap : fixed PATH, configurable chunk_size.
    tools: fixed default setting when bootstraping sandbox envs.
    oio-reset.sh : fixed syslog domain
    tools: looser permissions on development installation paths.
    tools: looser permissions on development installation paths.
    tools: bootstrap scripts fixed number of services (now just enough).
    oio-reset: deploy just enough services
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    tools: New options to the CLI of the bootstrap scripts.
    
    These options are now available to oio-reset.sh, and are propagated to subprocesses. Here are the options and their default values:
      * -D "3"
      * -B "3"
      * -S "SINGLE"
      * -V "1"
      * -N "NS"
      * -I "127.0.0.1"
    tools: New options to the CLI of the bootstrap scripts.
    
    These options are now available to oio-reset.sh, and are propagated to subprocesses. Here are the options and their default values:
      * -D "3"
      * -B "3"
      * -S "SINGLE"
      * -V "1"
      * -N "NS"
      * -I "127.0.0.1"
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    OpenIO is lifting off now !
    metautils: Toggle the semantics of the flag
    oio-tool: Add the `init` subcommand to assign volumes
    
    Assigned volumes allow to set the lazy-lock falg to FALSE
    tools/oio-tools: Init the logging properly
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    oio-tool: Exhibit the sigsegv upon core/var reloads
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    oio-tool: Add the 'config' action to dump the visible config
    server: Add a test handler and the oio-tool corresponding action
    
    New action that always redirects, for testing purposes
    
    (cherry picked from commit 6b7f06a93092a0c7b03fda8146a2175e349dc8ed)
    server: Add a test handler and the oio-tool corresponding action
    
    New action that always redirects, for testing purposes
    oio-tool: format output like Shinken plugins (fix #836)
    
    http://shinken.readthedocs.io/en/latest/15_development/pluginapi.html
    oio-tool: new 'info' action
    tools: copyright disclaimer reviewed (years)
    core: add tests around container and object names
    lb,tools: "/24" notation for masks, new tool to compute locations
    oio-tool: add ping tool
    sqliterepo/election: memleak chased
    tools: "tool_sysstat" now a.k.a. "oio-tool stat"
    oio-tool: admin requests moved to oio-proxy
    metautils: unused code removed
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    oio-tools: completed "hash" sub-command
    
    Now takes an ACCOUNT.
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    Hook'able clock function now used everywhere
    tools: oio-tool updated (new blades to the Swiss Army Knife of OIO).
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    1st cleanup : client, rawx-client, gridd/client
    
    * client/c/lib has been replaced by core/sds (pure http/json client)
    * rawx-client was not used
    * gridd/client has been replaced by tools/oio-tool
    * some metautils have been gathered in a single tool: oio-tool
    Enable TLS in functional tests
    CI: slightly rework the test suites
    
    - Enable compression on half of the rawx services.
    - Run only the "big" rebuilder test.
    - Enable compresion during the rebuilder tests.
    - Update project version to 6.1
    ci: Play tests with compression enabled.
    Python API: restore sys.stderr in case of log error
    
    When logging to /dev/log and running with Python 3, if /dev/log becomes
    unavailable, the logging system writes an error to sys.stderr. But since
    we replace sys.stderr by a logger, we end up with an infinite recursion.
    
    Now, when detecting a logging error, we will restore the real stderr.
    Try to make "container backup" compatible with Python 3
    CI: pass some tests with Python 2.7 and some with 3.6
    Make some tests more reliable
    ci: Test a ZK failure when ZK is controlable
    ci: Fix the path of some tests tools
    Get rid of the httpd-based rawx (#1833)
    
    * rawx: Get rid of the implementation based on httpd
    * Remove the unused rawx-lib
    * oio-bootstrap: Adapt the RAWX configuration (only the useful fields remain)
    * ci: Adapt to the only rawx remaining
    Allow not to have a zookeeper to check meta0
    
    Jira: OS-387
    Test 'openio-admin account check'
    Remove obsolete legacy tools | BREAKING CHANGE (#1759)
    
    BREAKING CHANGE:
    * tools: Stop installating oio-gdb.py
    * bootstrap: Clean useless config variables
    * tools: Remove the unused oio-unlock-all.sh
    * cluster: Get rid of oio-cluster
    Travis: use single and webhook in same job
    tests: avoid using "which"
    
    - use variables for often used commands;
    - call "command -v" instead of "which".
    ci: Use travis pipeline
    
    Fail fast on gotchas, then proceed with the long tests.
    Attempt to split the logic of the tests (in tools/oio-test-*) and the
    Travis environement specifics (in tools/oio-travis-*), so that the logic
    should be easy to run on a dev sandbox.
    CI: make curl silent when there is no error
    CLI: rename 'openio-admin dir check' to 'openio-admin directory check'
    Travis: enable fsync on Rawx
    travis: use openio-admin
    
    Replace oio-check-directory by new CLI commands and enable coverage
    CI: preserve events only during functional tests
    ci: Remove a test always skipped
    cmake,ci: Restore the SDK_ONLY option
    core/lb: fix distance check optimization, add tests
    Add tests on webhook event
    tools/oio-file-tool: add a simple CLI to (up/down)load using the C API
    rawx: Test both Apache and Go implementation
    CI: restart beanstalkd before trying to dump events
    tests: make blob-rebuilder tests more robust
    
    And some other tests less verbose.
    Test content.perfectible events management
    Test the distributed rebuilding of the chunks
    Run the test with a file just bigger than chunk size
    rawx: Configure coverage
    tools: add tool to dump buried events
    
    Be advised that actual version also delete jobs.
    Test oio-meta2-mover
    ci: Dump the ecd/container erorr log at exit
    travis: Reduce the annoying verbosity of a test
    CI: Test EC with large chunk-size
    Test oio-{blob,meta1,meta2}-rebuilder
    meta2: support use of ServiceId
    
    meta-server now support ServiceId option on command line
    (but it should be used only by meta2)
    travis: launch new tools oio-check-*
    travis: fix invalid oio version
    
    When cloning repo, tags are not all retrivied, leading to invalid
    version used to OIO: since setup.py develop is used, running
    git fetch --tags from oio-check-version.sh led to update version
    and broke OIO python dependency.
    travis: use shortcut
    ci: Dump the gridinit status at exit
    CI: Debug the oio-reset.sh output
    CI: test with several beanstalkd
    Use Service Id everywhere
    travis: with uuid and random-uuid
    Tests: wait cache to be set in proxy
    Tests: ensure Variables.md is up-to-date
    tools: fix invalid URL used by Travis script
    tools: add oio-gdb.py
    
    It will display backtrace of cores after tests.
    Add oio-conscience-server to replace gridd+msg_conscience
    
    * Drop gridd (a.k.a. oio-daemon)
    * Rewrite cluster/module/module.c as a standalone service
    * Adapt oio-bootstrap.py to generate env based on the new conscience
    * Merge the conscience lib in the server
    * Move the expression parsing from metautils to cluster
    * Fix compilation warnings about deprecated symbols
    CI: new configuration with long timeouts
    ci: Dump the random port range before running the tests
    Add CLI test suite with proxy cache enabled
    ci: Check the presence of a Copyright preamble
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    CI: Exhibit the oio-crawler-integrity error
    ci,core/tool_sdk_noconf: Manage an `ecd` in the live configuration (#1102)
    ci: Test tool_sdk_noconf
    travis: Activate tests with UDP and various meta1_digits
    
    Go for a better code coverage!
    tools: fix travis test
    
    Fix a subtile issue with set -e and &&:
    some tests was launched with && but set -e option
    doesn't stop script if a intermediate compound fails.
    coverage: enable it for WSGI and nosetests
    
    Command for coverage for [testenv:func] was skipped.
    ci: Test the oio-cluster CLI tool
    Enable codecov
    
    This patch enable use of codecov.io with:
    - C coverage
    - Python coverage
    - Badge integration
    core: fix bug at upload with C client
    
    Due to a variable mismatch, only the first chunk of the first metachunk
    was referenced in meta2 database.
    travis: Agregate short tests
    travis: Speed the tests up
    Add Python coverage
    travis: Add some folding marks for a better readability
    travis: Trigger the functional tests with a replicated directory
    travis: Test an upload with a '%' in the name of the content
    Travis: Dump the end of /var/log/syslog when exiting
    Travis-CI: Stop dumping the /var/log at exit
    
    Prove useful under certain temporary circumstances, not necessary in the
    mainstream conditions.
    Travis: Dump the end of /var/log/syslog when exiting
    Travis-CI: Stop dumping the /var/log at exit
    
    Prove useful under certain temporary circumstances, not necessary in the
    mainstream conditions.
    Add oio-reset.sh options + config presets
    
    * multiple IP (must be local) for all the services
    * multiple IP for each service, different frim the global set
    * configuration files renamed
    * CI scripts modified accordingly
    CI: do not dumps syslog at exit
    
    This is a remnant from old debugging attempts.
    sqliterepo: actually reuse idle bases when max reached
    CI/Travis: adds stronger GLib flags
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    Adds new test envs
    travis: helps running the tests when srcdir!=build
    adapt travis tools to test EC
    bootstrap: review config input
    tools : Add file configuration for oio-bootstrap.py (#585)
    
    * tools/oio-bootstrap.py: add configuration by config file for oio-bootstrap
    tools/oio-reset.py: remove useless options; add new -f to indicate the config file of oio-bootstrap.py
    etc: add a file with the minimum file configuration and tests files
    travis.yaml: pass the files in arguments
    
    * tools/oio-bootstrap.py : controls number of meta2 and meta1 by command line
    etc : add config file in yml format
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    core: move python files around
    travis: enables python functional tests
    travis: enables python unit tests
    travis: enables python functional tests
    travis: enables python unit tests
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    travis: sets monitor period to 1s at oio-reset.sh
    travis: fixes a missing "set -e" in travis tests
    
    This made all the tests pass whatever the failures of singel tests.
    travis: fixes oio-event-agent exit
    
    + "pkill -9" sent after 10 seconds to the event agent
    + tests insulated in a script, to ease reproducing out of Travis
    ci: Use travis pipeline
    
    Fail fast on gotchas, then proceed with the long tests.
    Attempt to split the logic of the tests (in tools/oio-test-*) and the
    Travis environement specifics (in tools/oio-travis-*), so that the logic
    should be easy to run on a dev sandbox.
    Merge all the admin commands related to ZK
    Python API: minor readability fixes
    CLI: Load small client
    Python API: allow to set "pool_manager" for each request
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    account: facatorize code, add documentation (fix #1054)
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    merge python client api from oiopy into core
    
    integrate CLI
    Python API, tests: improve Python3 compatibility
    Add tests on webhook event
    Python API: restore sys.stderr in case of log error
    
    When logging to /dev/log and running with Python 3, if /dev/log becomes
    unavailable, the logging system writes an error to sys.stderr. But since
    we replace sys.stderr by a logger, we end up with an infinite recursion.
    
    Now, when detecting a logging error, we will restore the real stderr.
    ci: Use travis pipeline
    
    Fail fast on gotchas, then proceed with the long tests.
    Attempt to split the logic of the tests (in tools/oio-test-*) and the
    Travis environement specifics (in tools/oio-travis-*), so that the logic
    should be easy to run on a dev sandbox.
    Merge all the admin commands related to ZK
    Python API: minor readability fixes
    CLI: Load small client
    Python API: allow to set "pool_manager" for each request
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    account: facatorize code, add documentation (fix #1054)
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    merge python client api from oiopy into core
    
    integrate CLI
    CI: enable python3 unit tests
    
    Jira: R1910-1
    ci: Use travis pipeline
    
    Fail fast on gotchas, then proceed with the long tests.
    Attempt to split the logic of the tests (in tools/oio-test-*) and the
    Travis environement specifics (in tools/oio-travis-*), so that the logic
    should be easy to run on a dev sandbox.
    ci: Procude a lighter output when checking copyright
    tools: Improve the check of copyright mentions
    CI: improve copyright check script
    ci: Check the presence of a Copyright preamble
    tools: add tool to dump buried events
    
    Be advised that actual version also delete jobs.
    bin/*: Add copyright mentions
    crawler: add integrity check
    CI: enable python3 unit tests
    
    Jira: R1910-1
    ci: Use travis pipeline
    
    Fail fast on gotchas, then proceed with the long tests.
    Attempt to split the logic of the tests (in tools/oio-test-*) and the
    Travis environement specifics (in tools/oio-travis-*), so that the logic
    should be easy to run on a dev sandbox.
    Python API: refactor
    Move RDIR/META2 assignment to new CLI command
    
    Moved the RDIR/META2 assignment a new "openio rdir bootstrap meta2"
    command, and added an "openio rdir bootstrap rawx" command that is
    exactly equivalent to "openio volume admin bootstrap" (which in fact
    re-uses the same code)
    Python API: minor readability fixes
    CLI: Load small client
    tests: fix directory test still using 'session'
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    Python API: get rid of DirectoryAPI (replaced by DirectoryClient)
    merge python client api from oiopy into core
    
    integrate CLI
    tools: add option to bootstrap rawx with TLS
    
    Note: The certificate itself is static at this time
    tools: configure compilation of oio-rawx-harass
    tools: Deploys oio-lb-benchmark for admin purposes
    cmake: Only install prod-related tools in other build types than Debug
    Implement oio-lb-benchmark
    
    This new tool has 2 purposes:
    - test the load balancer speed;
    - test new pool configurations without the need of a deployed platform.
    Remove obsolete legacy tools | BREAKING CHANGE (#1759)
    
    BREAKING CHANGE:
    * tools: Stop installating oio-gdb.py
    * bootstrap: Clean useless config variables
    * tools: Remove the unused oio-unlock-all.sh
    * cluster: Get rid of oio-cluster
    Merge all the admin commands related to ZK
    Add tests on webhook event
    tools/oio-file-tool: add a simple CLI to (up/down)load using the C API
    tools: add tool to dump buried events
    
    Be advised that actual version also delete jobs.
    tools: add oio-gdb.py
    
    It will display backtrace of cores after tests.
    tools: Get rid of the useless configurable prefix
    tools: Remove oio-wrap.sh
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    tools: Add oio-zk-harass to stress a ZK server
    oio-tool: Now dump the meta2 variables
    conf: Move the FD limits in the central config
    oio-tool: Add the 'config' action to dump the visible config
    tools: Add a wrapper for testing purposes
    tools: Add a wrapper for testing purposes
    oio-election-stat.py: CLI tool to dump stats about ZK
    
    TODO: merge with oio-election-dump.py
    tools: adds testing CLI tools
    tools: new admin tool to reset elections at the ZK level
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    tools: restores the oio-test-config.py script
    bootstrap: review config input
    tools : Add file configuration for oio-bootstrap.py (#585)
    
    * tools/oio-bootstrap.py: add configuration by config file for oio-bootstrap
    tools/oio-reset.py: remove useless options; add new -f to indicate the config file of oio-bootstrap.py
    etc: add a file with the minimum file configuration and tests files
    travis.yaml: pass the files in arguments
    
    * tools/oio-bootstrap.py : controls number of meta2 and meta1 by command line
    etc : add config file in yml format
    tools: drops the dependency to `jq`, parallelize oio-reset.sh
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    tools: drops unused *-monitor.py scripts
    
    Their purpose was to accompany the svc-monitor.
    cmake: added 'Werror' in CFLAGS where there is no warning
    
    Warnings are the voice of Evil.
    
    Let's try to avoid them on targets already clean.
    sqlx: sqlxclient rename to oiosqlx
    oio-sds/pc now built, relase and version now configurable.
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    rdir: crawler added + rdir installed using oio-reset + fixes
    Removed unused and/or useless code
    
    tools: removed unused account-agent.py
    metautils: removed unused and useless macros (their scarce usage have been replaced by more common macros).
    1st cleanup : client, rawx-client, gridd/client
    
    * client/c/lib has been replaced by core/sds (pure http/json client)
    * rawx-client was not used
    * gridd/client has been replaced by tools/oio-tool
    * some metautils have been gathered in a single tool: oio-tool
    tools: minimal test tool to validate the global error macro is set.
    cmake: G_LOG_DOMAIN set at cmake's level.
    tools: new sample tools with the high-level upload feature.
    tools: new sample tools with the high-level upload feature.
    tools: Now installs compiled sample code.
    tools: builds sample code (but doesn't install it).
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    tools: various minor fixes
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    tools: fixes .gitignore
    Updates .gitignore with some generated files
    CI: move the version check in the unit tests
    ci: Use travis pipeline
    
    Fail fast on gotchas, then proceed with the long tests.
    Attempt to split the logic of the tests (in tools/oio-test-*) and the
    Travis environement specifics (in tools/oio-travis-*), so that the logic
    should be easy to run on a dev sandbox.
    tools: Factorize Zookeeper code
    Ensure pkg-config version is up-to-date
    CI: make curl silent when there is no error
    
    (cherry picked from commit 6d82d1ba31256fcded7bbec0936ee08696d39459)
    CI: improve meta2 mover tests output
    
    Also fix a duplicated function (merge issue?).
    tests: avoid using "which"
    
    - use variables for often used commands;
    - call "command -v" instead of "which".
    CI: make curl silent when there is no error
    tests: Adapt 'oio-test-mover.sh' for service IDs
    mover: Remove the bases that are no longer used
    Test oio-meta2-mover
    tools: Factorize Zookeeper code
    tools: Get rid of the useless configurable prefix
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    bootstrap: review config input
    tools: drops the dependency to `jq`, parallelize oio-reset.sh
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    ci: Use travis pipeline
    
    Fail fast on gotchas, then proceed with the long tests.
    Attempt to split the logic of the tests (in tools/oio-test-*) and the
    Travis environement specifics (in tools/oio-travis-*), so that the logic
    should be easy to run on a dev sandbox.
    Merge all the admin commands related to ZK
    Python API: minor readability fixes
    CLI: Load small client
    Python API: allow to set "pool_manager" for each request
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    account: facatorize code, add documentation (fix #1054)
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    merge python client api from oiopy into core
    
    integrate CLI
    CI: plug into the 19.10 package repository, fix deps
    CI: move the version check in the unit tests
    ci: Use travis pipeline
    
    Fail fast on gotchas, then proceed with the long tests.
    Attempt to split the logic of the tests (in tools/oio-test-*) and the
    Travis environement specifics (in tools/oio-travis-*), so that the logic
    should be easy to run on a dev sandbox.
    Merge all the admin commands related to ZK
    Python API: minor readability fixes
    CLI: Load small client
    Python API: allow to set "pool_manager" for each request
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    account: facatorize code, add documentation (fix #1054)
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    merge python client api from oiopy into core
    
    integrate CLI
    tools: Factorize Zookeeper code
    oio-reset: Revamp oio-wait-scored.sh on top of openio
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    oio-reset: do not use oio-cluster, fix callgrind conf
    cli: add 'openio cluster unlockall' command
    bootstrap: review config input
    tools: drops the dependency to `jq`, parallelize oio-reset.sh
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    CI: plug into the 19.10 package repository, fix deps
    CI: enable python3 unit tests
    
    Jira: R1910-1
    CI: move the version check in the unit tests
    ci: Use travis pipeline
    
    Fail fast on gotchas, then proceed with the long tests.
    Attempt to split the logic of the tests (in tools/oio-test-*) and the
    Travis environement specifics (in tools/oio-travis-*), so that the logic
    should be easy to run on a dev sandbox.
    Merge all the admin commands related to ZK
    Python API: minor readability fixes
    CLI: Load small client
    Python API: allow to set "pool_manager" for each request
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    account: facatorize code, add documentation (fix #1054)
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    merge python client api from oiopy into core
    
    integrate CLI
    CI: slightly rework the test suites
    
    - Enable compression on half of the rawx services.
    - Run only the "big" rebuilder test.
    - Enable compresion during the rebuilder tests.
    - Update project version to 6.1
    CI: make curl silent when there is no error
    
    (cherry picked from commit 6d82d1ba31256fcded7bbec0936ee08696d39459)
    Admin CLI: Rename '--workers' to '--concurrency'
    CI: improve test output readability
    oio-crawler-integrity: fix concurrency issues
    tests: avoid using "which"
    
    - use variables for often used commands;
    - call "command -v" instead of "which".
    tests: cache 'openio cluster resolve' results
    
    Yes, I know how to use bash associative arrays!
    CI: make curl silent when there is no error
    CLI: Improve 'openio-admin meta2 rebuild'
    CLI: Rename 'rawx distrebuild' with 'rawx distributed-rebuild'
    test: Use openio-admin to rebuild
    oio-blob-rebuilder: Use new options
    test: Use existing oio-blob-rebuilder
     oio-bootstrap: Add meta2-indexer to the bootstrap process
    Test the distributed rebuilding of the chunks
    rebuilder: Refactor and improve log message
    rdir, CLI: Clear chunks entries
    oio-test-rebuilder.sh: Drop few services at same time
    
    Thanks to @murlock
    rawx: Remove xattr container ID, content path, content version and content ID
    tests: adapt oio-test-rebuilder.sh for service IDs
    Test oio-{blob,meta1,meta2}-rebuilder
    Speedup the RAWX (#2017)
    
    * Better syslog usage
    * beanstalkd: Remove unused code, Avoid string to bytes conversions
    * beanstalkd: Parallelize on several beanstalkd connections
    * Help the GC, prevent escape to the heap
    * Lighter log management
    * Rename a config directive (tcp_keepalive -> http_keepalive, tcp_keepalive is now deprecated)
    * oio-rawxr-harass: allow to reuse the connections
    * Allow to turn events down (config)
    * Fix the open() flags used to just fsync
    * rawx: Centralize in the repo the logic around sync* flags
    tools: configure compilation of oio-rawx-harass
    tools: fix comment in oio-rawx-harass
    tools: add missing copyright header
    tools/rawx-harass: Add a stress tool for rawx
    Correct wrongfully migrated exceptions syntax
    
    The syntax for thoses exceptions were wrongfully migrated to python3
    with no regard to python2. This commit repair the build for python2.
    Minor fixes for Python 3
    
    Fixup remaing print keyword
    Use six to import StringIO
    blob-improver: various improvements
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    oio-rdi-harass: show more statistics at the end
    oio-rdi-harass: show more statistics at the end
    tools: complies to pep8, adds missing spaces
    tools: oio-rdir-harass.py to benchmark rdir
    ci: Use travis pipeline
    
    Fail fast on gotchas, then proceed with the long tests.
    Attempt to split the logic of the tests (in tools/oio-test-*) and the
    Travis environement specifics (in tools/oio-travis-*), so that the logic
    should be easy to run on a dev sandbox.
    Fix dry-run option
    Use conscience client instead of CLI
    Add script used to rebalance rawx
    tools/oio-file-tool: add a simple CLI to (up/down)load using the C API
    tools: set oio-bench-object-create.py duration
    tools: backport oio-bench-object-create.py from 5.x
    tools: measure listing time after object creation rate
    m2: track average DB open time
    
    Track (and display) average time spent by meta2 worker threads waiting
    for a database handle. The purpose of this modification is to provide
    better warning messages when the load on a meta2 database is increasing.
    Implement a simple meta2 benchmark
    
    This benchmarks tests the meta2 part of the object creation process,
    by registering fake chunks.
    tools: new tool to benchmark container creation
    tools: set oio-bench-object-create.py duration
    tools: backport oio-bench-object-create.py from 5.x
    m2: track average DB open time
    
    Track (and display) average time spent by meta2 worker threads waiting
    for a database handle. The purpose of this modification is to provide
    better warning messages when the load on a meta2 database is increasing.
    tools: new tool to benchmark container creation
    Stop accepting composed service types
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    oio-event-agent: Typo and detail configuration logs
    oio-event-benchmark: Change logs to display instantaneous speeds
    oio-event-benchmark: Add option for namespace
    oio-event-benchmark: Include copyleft headers
    oio-event-benchmark: Manage multiple accounts
    oio-event-benchmark: Format code
    oio-event-benchmark: Fix system call to kill event agent
    oio-event-benchmark: Format code
    oio-event-benchmark: Add event 'container.deleted'
    oio-event-benchmark: Add configuration for fake account
    oio-event-benchmark: Manage the redirections of events to the fake service
    oio-event-benchmark: Add event 'content.deleted'
    oio-event-benchmark: Add events 'container.new' and 'container.state'
    oio-event-benchmark: Update and add options
    oio-event-benchmark: Create event_benchmark with send_events and fake_service
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    oio-event-benchmark: Change logs to display instantaneous speeds
    oio-event-benchmark: Add option for namespace
    oio-event-benchmark: Include copyleft headers
    oio-event-benchmark: Format code
    oio-event-benchmark: Format code
    oio-event-benchmark: Fix json of CONTAINER_STATE
    oio-event-benchmark: Add event 'container.deleted'
    oio-event-benchmark: Manage the redirections of events to the fake service
    oio-event-benchmark: Add event 'content.deleted'
    oio-event-benchmark: Add events 'container.new' and 'container.state'
    oio-event-benchmark: Update and add options
    oio-event-benchmark: Create sender of events to beanstalk
    events: Give each tube an internal thread
    
    It has to be explicitely started with a new call of the signature:
    `start`.
    events: Remove zmq (unused) and configure the tube per queue
    rawx: Accept multiple beanstalkd
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    oio-event-benchmark: Change logs to display instantaneous speeds
    oio-event-benchmark: Include copyleft headers
    oio-event-benchmark: Format code
    oio-event-benchmark: Create manager for events queue
    oio-event-benchmark: Create sender of events to beanstalk
    rawx: Allow to turn off the event source
    
    Controlled by the "rawx_events" in sds.conf
    Disabled by default.
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    rawx: makes the event queue asynchronous (#549)
    
    Currently is beanstalkd the only queue manager. If beanstalkd becomes
    down it can lead to the unavailability of all the rawx on the host.
    rawx: now uses 1 event queue per request handling
    
    For the sake of simplicity.
    events: insulates module, adds beanstalkd implementation
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    Hook'able clock function now used everywhere
    rawx: send event in non-blocking mode
    rawx: send event in non-blocking mode
    rawx: send chunk events to rdir (new and delete)
    rdir: add rebuild crawler to rebuild chunks on the same valume after its replacement
    proxy+rdir: add actions to fetch the index and to show rebuild status
    rdir: rawx services use event agent address from grid conf instead of rawx conf
    rdir: cleanup
    rdir: add chunk creation event in rawx and in event agent + minor changes
    cmake: Only install prod-related tools in other build types than Debug
    cmake: Explicit the ABI version of each shared library
    oio-event-benchmark: Change logs to display instantaneous speeds
    oio-event-benchmark: Format code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    oio-event-benchmark: Change logs to display instantaneous speeds
    oio-event-benchmark: Include copyleft headers
    oio-event-benchmark: Format code
    oio-event-benchmark: Create fake service to catch the events
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    oio-event-benchmark: Change logs to display instantaneous speeds
    oio-event-benchmark: Include copyleft headers
    oio-event-benchmark: Format code
    oio-event-benchmark: Create fake service to catch the events
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    oio-event-benchmark: Change logs to display instantaneous speeds
    oio-event-benchmark: Include copyleft headers
    oio-event-benchmark: Format code
    oio-event-benchmark: Create manager for events queue
    Update Copyright
    account: Check the request method
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    oio-event-agent: Typo and detail configuration logs
    oio-event-benchmark: Change logs to display instantaneous speeds
    oio-event-benchmark: Include copyleft headers
    oio-event-benchmark: Format code
    oio-event-benchmark: Format code
    oio-event-benchmark: Manage the redirections of events to the fake service
    oio-event-benchmark: Add route to catch the events for rawx
    oio-event-benchmark: Update and add options
    oio-event-benchmark: Create fake service to catch the events
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    oio-event-benchmark: Change logs to display instantaneous speeds
    oio-event-benchmark: Add option for namespace
    oio-event-benchmark: Include copyleft headers
    oio-event-benchmark: Format code
    oio-event-benchmark: Add event 'container.deleted'
    oio-event-benchmark: Manage the redirections of events to the fake service
    oio-event-benchmark: Add route to catch the events for rawx
    oio-event-benchmark: Create event_benchmark with send_events and fake_service
    Python API, rdir: refactor
    META2 records removal, more flexible filtering on fetch
    META2 reverse index [1/..]
    rdir: Fix the parsing of the routes
    
    A trailer was ignored
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    rdir: Regenerate the ragel-based route parser
    rdir: reboot in C
    
    Uses the same base than the oio-proxy for the network and http parts.
    Fix warnings raised by the documentation extractor
    blob-rebuilder: Log when the incident date is missing
    rdir: Limit size of chunk list
    rdir: Allow to paginate the status of the volume
    rdir: Fix counters when getting status
    
    Before, the 'mtime' was switched with the 'rtime'.
    Now, we have to look at both to find the right value.
    rdir: Respect the central lazy-lock flag
    Set an operation-dependent prefix on request ids
    
    Also, when compiled in debug mode, print a warning when a request without
    request ID is received.
    proxy, rdir: Stop printing UID in access
    Rdir: Free error on missing options
    
    Since they are not mandatory we should just free the error.
    Python API, rdir: document
    Python API, rdir: refactor
    Finish up work on RDIR and RdirClient
    
    - At @fvennetier's request, the "marker" parameter in /meta2/fetch
    is now a container url, that will not be included in the result set
    returned.
    - Fixed a problem while generating the json response for /meta2/fetch
    so we specifically copy vallen characters returned from the value
    returned by LevelDB iterator. Previously it compromised the generated
    JSON object.
    - Added the RdirClient.meta2_index_fetch method to reflect the
    /meta2/fetch route on RDIR.
    Fix variables names and req_id on RdirClient
    
    - Use container_id instead of content_id (which made no sense in this case)
    - Correctly fetch (or not) a req_id when trying to send an RDIR request.
    Addressing more issues with the PR
    
    Fixes for several problems with the peers list generation
    - Rewrite of function and fix a memleak there.
    - Searching for peer when there's no election yields an error.
    - Handle errors returned by sqlx_get_election_peers.
    Other fixes:
    - While making the DB handle storage/access mechanisms more
    generic, a naming mistake caused the access mechanism to use
    the same B-Tree, but the conds/locks passed in parameters.
    - Use NAME2CONST macro instead of handmade solution.
    - Rename variable to avoid single letter naming.
    Addressing some of @fvennetier comments
    Add event filters to index META2 databases
    META2 records removal, more flexible filtering on fetch
    META2 reverse index [1/..]
    rdir, sqlx: document "Servicing" option
    Add option to manage xattr-lock
    Update rdir service documentation
    rdir: Get the number of chunks to rebuild
    rdir, CLI: Clear chunks entries
    rdir: Read old rtime
    rdir: Remove rtime
    rdir: Clarify the logic of FD limits detection
    
    Thanks to @fvennetier, we all know he really appreciates being notified
    when his advices hhave been considered!
    rdir: Allow configuring the max fd per DB
    rdir: fix 'admin/show' operation
    Use Service Id everywhere
    rdir: prepare UUID management for rdir
    
    At this time, it use config UUID/Service ID.
    It will be exposed through /status
    Extend the API doc to the rdir service
    sqlx,meta*: Split the main background task of re-kicking elections
    
    Several tasks with each one:
    * its lock on the election set
    * its trigger period
    * its threashold delay to warn for a long lock
    
    -> Now we should know when the lock is held for too long, and also
    split the critical section to remain fair with the other threads.
    rdir: Trim paranoid checks
    rdir: Use short macros for errors when available
    rdir: Implement an xattr-lock on the volume
    rdir: Stop the rdir when its basedir is absent
    Rdir: fix Fetch start_after option
    Rdir: fix STRDUPA macro
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Rdir: Fix error in conditional statement
    Rdir: Fix error in conditional statement
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 71bb78587b2806a69842e004fbec9740afbf4177)
    Fix compilation issues with GCC 7
    rdir: Add a /config route to dump the live config
    rdir: Fix the detection of max passive connections
    rdir: Reconfigure the service on SIGHUP
    server: Allow an action when SIGHUP has been raised
    conf: Move the FD limits in the central config
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    rdir: Fix a memleak in /v1/status
    rdir: Fix a memleak in /status
    rdir: Improve the compliance to the rules of cpplint
    
    ... despite this is not C++, and the general format doesn't match.
    rdir: Ask for a periodic malloc_trim
    
    Every 300s
    rdir: reboot in C
    
    Uses the same base than the oio-proxy for the network and http parts.
    Python API, rdir: refactor
    META2 records removal, more flexible filtering on fetch
    META2 reverse index [1/..]
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    rdir: Add a /config route to dump the live config
    rdir: reboot in C
    
    Uses the same base than the oio-proxy for the network and http parts.
    sqlx: sqlxclient rename to oiosqlx
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    cmake: Reorganize the targets
    
    * do not list headers, as it is recommended
    * drop the dependency to sqlite3 in oio-proxy
    cmake: Explicit the ABI version of each shared library
    cmake: Fix the detection of leveldb
    rdir: Fix the detection of max passive connections
    rdir: reboot in C
    
    Uses the same base than the oio-proxy for the network and http parts.
    Python API, rdir: document
    Addressing some of @fvennetier comments
    Add event filters to index META2 databases
    Python API, rdir: refactor
    META2 records removal, more flexible filtering on fetch
    META2 reverse index [1/..]
    rdir: Fix the parsing of the routes
    
    A trailer was ignored
    License: OpenIO -> OpenIO SAS
    rdir: Add a /config route to dump the live config
    rdir: reboot in C
    
    Uses the same base than the oio-proxy for the network and http parts.
    metautils: small improvements to common_main
    
    - do not print the usage help twice;
    - do not print the usage help when parameters are valid;
    - provide tips to find the error log.
    metautils: do not use the deprecated GTimeVal
    
    When compiling against GLib >= 2.62.0, use GDateTime instead of the
    deprecated GTimeVal structure.
    copyright: Update the mention of altered files
    metautils/log: Now accept the default syslog UDP port
    
    ... when not explicit in the target address.
    core,metautils: Allow to send syslog msg to an UDP collector
    core/var: Introduce a readonly flag on the variables
    
    * The variables set at the CLI receive the flag.
    * readonly variables are not reset
    * a specific function is used to force a variable to a readonly value,
      and it can be used to force a behavior, programmatically.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Fix some compilation warnings with GCC 7
    metautils: fix common_main help
    metautil/common_main: Manage SIGHUP to prepare the conf reloading
    metautils,conf: Expose the variable of the delay before the verbosity reset
    core: Loads the configuration in the proxy
    
    + Fix the min/max bounding behavior in the central configuration module
    Adapt the code to the central config
    core: code factorisation (integer format check)
    core+metautils: code cleanup, functions {re,}moved
    metautils: signals simplified with POSIX functions
    common_main: syslog detection fixed
    common_main: std{err,out} redirected when syslog'ing, even if not daemon
    
    Avoids putrefying the process with unmanaged SIGPIPE, when happening in threads not ignoring the signal.
    Fixed compilation on x86_32
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    core/cs: API completed
    
    Also, the API has been made more robust to manage strings with '"' and UTF-8 characters in the JSON messages
    Hook'able clock function now used everywhere
    Dropped the dependency to the Linux's specific clock functions.
    metautils: common_main now uses monotonic time to check expirations (transient verbosity).
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Fixed several warnings appeared with recent GCC versions
    
    * improved printf format checks.
    * fixed formatting weaknesses
    * fixed "unmanaged results" in some functions.
    * fixed unused paramerers
    * tools: adds missing 'import syslog' in monitoring scripts.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Get rid of log4c emulation and some old (and unused) pieces of code.
    Useless code removed + minor refactoring
    Useless code removed + minor refactoring
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    Finer gauges for active threads, reliable accesslog delays
    
    This patch provides the maximum number of active threads, and a round-robin storage for that information.
    The granularity proposed is intervals of 1s over the past 30s, and intervals of 1 minute over the past 1 hour.
    This data is used by the core server library to expose statistics, e.g.
    
            server.thread.max.1 = 0
            server.thread.max.5 = 1
            server.thread.max.15 = 2
            server.thread.max.30 = 2
            server.thread.max.60 = 3
            server.thread.max.300 = 3
            server.thread.max.900 = 3
            server.thread.max.3600 = 3
    
    This patch also alters the accesslog format for gridd transports, and it is now unified with http transport.
    An access log record now provides 2 treatment durations:
    - the total time spent since the reception of the last buffer that completes the request
    - the total treatment time, from the moment where a worker thread starts the request handling til the moment an answer is generated.
    The delta between both delays is the time spent in the internals queues of the process.
    
    The patch divides in:
    - server/stats_holder.* :
      - drops the adherence to system time, the current timestamp is now received from the caller. This is necessary to manager counter with a granularity different than 1s.
      - New calls to compute the cumulative maximum
      - code simplification
    - server/network_server.* :
      - new round-robin stats now managed
      - new stats exposed.
      - precise monotonic clock used on the last input
    - server/transport_http.c :
      - useless variables removed.
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - server/transport_gridd.c :
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - sqlx/sqlx_service.c :
      - code adapted to match the lost "time adherence"
    
    Change-Id: I248ae7a1937860e4062290e95b68465d7ec62821
    1.8.4 release candidate
    Initial commit
    metautils: Remove unused code
    Move lrutree.* from metautils/ to core/
    Simplify the management of metrics
    
    We don't need a complicated solution with a background thread. We here
    reduce the number of allocations, the number of locks, the number of
    threads. We expect less CPU (user & sys) to be used.
    Add oio-conscience-server to replace gridd+msg_conscience
    
    * Drop gridd (a.k.a. oio-daemon)
    * Rewrite cluster/module/module.c as a standalone service
    * Adapt oio-bootstrap.py to generate env based on the new conscience
    * Merge the conscience lib in the server
    * Move the expression parsing from metautils to cluster
    * Fix compilation warnings about deprecated symbols
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core,metautils: Factorize the DJB hash functions
    rawx: Move the ACL in the rawx (unused elsewhere)
    Move the minimal rrd from server to metautils
    
    It prepares a change coming soon in sqliterepo, that requires the simple
    RRD implementation.
    m2v2: integrate new load balancer
    sqliterepo/election: memleak chased
    Useless/Unused functions removed
    metautils: unused code removed
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    cache: dedicated lib to the caching features, with various implementations.
    4th cleanup, unused code purged from metautils
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    metautils: the "hc_url" functions signatures does not depend on the GLib.
    
    It is now much easier to embed in external apps.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Get rid of grid_storage_client_stat
    
    One of the ugliest piece of code present here.
    It was intrusive and based on static variables.
    metautils: unused functions removed.
    Content propeties reviewed + Cleanup, round 2
    OpenIO is lifting off now !
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    metautils : mock added for gridd_client.
    
    Change-Id: Ifac60d14a6b2a831531611c334f78eff5fd3b6a1
    1.8.4 release candidate
    Initial commit
    metautils: Remove unused/commented code
    metautils: Remove unused code
    server: get server-side performance data
    
    Save some performance data in the thread local data. This is disabled by
    default, can be enabled for each service (even when the service is running)
    or per request.
    Performance data is printed at the end of access log messages.
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    core: Fix the LB on local services (#1862)
    
    * Also also the placement of spare chunks on the local proxy.
    * core: Use service addr instead of ID for their unique key
    * lb: Pass debug message in TRACE level and restore fast lookups
    * oio-reset: Deploy a proxy with a location
    * Fix compilation warnings
    Set an operation-dependent prefix on request ids
    
    Also, when compiled in debug mode, print a warning when a request without
    request ID is received.
    metautils: Stop carrying useless info in replies
    
    A reply need no deadline and no service ID.
    proxy: Allow to simulate versioning when creating and deleting an object
    Allow listing to be done on master service only
    
    For several operations, when a list is done just after an object
    deletion, the listing operation may occur on a slave which has not been
    synchronized yet.
    metautils: Fix the macro used as the limit for user max length
    Stop accepting composed service types
    meta2: Add User-Agent to the events
    metautils: Remove dead code
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Avoid filling the RPC with useless fields
    
    When the RPC mode is not set to "admin", don't tell "admin=false"
    because this is the default.
    metautils: Explain what does each length limit cover
    
    It is now documented if a `LIMIT_LENGTH_` macro manages the final NUL
    character of the string it concerns.
    
    Also, unused macros have been removed.
    Use the same macros for ans1c structures then in the codec code
    
    ... so we will be easily able to distribute a different asn1c release
    with a custom set of memory management functions.
    Gather asn1.c header for further macro handlings
    metautils: Reduce the number of calls to realloc() and strlen()
    metautils: reduce number of memory allocations
    
    This slightly speeds up meta0 and meta1.
    proxy,metautils: fix indentation
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    core+metautils: code cleanup, functions {re,}moved
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    metautils: removes unreachable code
    
    Also removes unused macros and useless comments
    m0, proxy: new routes and tools to list and force meta0 mapping
    metautils: unused code removed
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    fixed sub-type management for the services.
    
    The compound types of services are now well considered by the proxy, then transmitted in the various requests the proxy issues.
    metautils: automates the message encoding of the new CONTENT field of the URLs
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    Fixed several warnings appeared with recent GCC versions
    
    * improved printf format checks.
    * fixed formatting weaknesses
    * fixed "unmanaged results" in some functions.
    * fixed unused paramerers
    * tools: adds missing 'import syslog' in monitoring scripts.
    Fixed service push to the conscience + Cleanup, round 8
    
    * The last cleanup commit was named #6, but this was a mistke, there was already a #6.
    * Code factorized
    * Useless code removed
    * Codec functions simplified.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    cosmetic refactorings
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    cosmetic refactorings
    Message handling functions refatored
    
    * Useless / unused functions removed.
    * Signatures more intuitive.
    * code factorized.
    metautils: fixed memory leaks when extracting message bodies.
    Fixed memory leaks.
    
    Conflicts:
            meta1v2/meta1_backend_services.c
    Slab allocation for small structures + ASN.1 message simplification
    metautils: fixed memory leaks when extracting message bodies.
    Fixed memory leaks.
    
    Conflicts:
            meta1v2/meta1_backend_services.c
    Slab allocation for small structures + ASN.1 message simplification
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Content propeties reviewed + Cleanup, round 2
    Request-Id now managed in clients and servers
    
    * transmitted via a thread-local data
    * explicit ID eliminated from remote API (m2v2) + caller code adapted
    * in servers, collected from incoming requests, propagated to outgoing requests.
    * set to a random value when not set.
    OpenIO is lifting off now !
    meta2-mover: wait before retries when defreezing container
    metautils: improve error message when deserialization fails
    
    (cherry picked from commit 2fc8e027212c69898661327a23cde4f5333dd201)
    
    Change-Id: I782957322fee3bb3455e5e68aca8e50a471d7eb0
    metautils / asn1 : ugly embedded function now externalized.
    
    Change-Id: I44617669d0cb35c24a258b57efb904c05472ca53
    1.8.4 release candidate
    Initial commit
    metautils: Remove unused code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    metautils/rrd: Comment out unused code
    metautils/gridd_client: Avoid faulty peers
    
    Allow the gridd_client to do it.
    Move the minimal rrd from server to metautils
    
    It prepares a change coming soon in sqliterepo, that requires the simple
    RRD implementation.
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    cluster, proxy: Fixes & Improvements
    
    * cluster / remote: cleaner and uniform interface, stripped code (+ dependencies adapted)
    * proxy: CLI option to disable the cache of services
    * proxy: management of services down, that are receive a lower priority
    * server: minor cleanups
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    Finer gauges for active threads, reliable accesslog delays
    
    This patch provides the maximum number of active threads, and a round-robin storage for that information.
    The granularity proposed is intervals of 1s over the past 30s, and intervals of 1 minute over the past 1 hour.
    This data is used by the core server library to expose statistics, e.g.
    
            server.thread.max.1 = 0
            server.thread.max.5 = 1
            server.thread.max.15 = 2
            server.thread.max.30 = 2
            server.thread.max.60 = 3
            server.thread.max.300 = 3
            server.thread.max.900 = 3
            server.thread.max.3600 = 3
    
    This patch also alters the accesslog format for gridd transports, and it is now unified with http transport.
    An access log record now provides 2 treatment durations:
    - the total time spent since the reception of the last buffer that completes the request
    - the total treatment time, from the moment where a worker thread starts the request handling til the moment an answer is generated.
    The delta between both delays is the time spent in the internals queues of the process.
    
    The patch divides in:
    - server/stats_holder.* :
      - drops the adherence to system time, the current timestamp is now received from the caller. This is necessary to manager counter with a granularity different than 1s.
      - New calls to compute the cumulative maximum
      - code simplification
    - server/network_server.* :
      - new round-robin stats now managed
      - new stats exposed.
      - precise monotonic clock used on the last input
    - server/transport_http.c :
      - useless variables removed.
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - server/transport_gridd.c :
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - sqlx/sqlx_service.c :
      - code adapted to match the lost "time adherence"
    
    Change-Id: I248ae7a1937860e4062290e95b68465d7ec62821
    1.8.4 release candidate
    Initial commit
    metautils: Remove unused code
    metautils/gridd_client: Restore forgotten comments
    
    Thanks to @fvennetier
    metautils,sqlx,tests: Get rid of the useless gridd_client_factory
    
    That pseudo object was never used!
    metautils/gridd_client: Remove useless pseudo-object
    gridd_client: Simplify the pseudo-interface
    gridd_client: Shortcut RPC toward down peers
    
    Can be triggered with global config variables.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Adapt the code to the central config
    metautils/gridd_client: Avoid faulty peers
    
    Allow the gridd_client to do it.
    metautils/gridd_client: Enbugs the timeout detection
    
    ... for testing purposes!
    sqliterepo: Shorten the cnx timeout for USE and GETVERS requests
    
    From a default of 2s, use now 0.5s for GETVERS and 0.25s for USE.
    gridd_client: fix a memleak when errors occur
    
    Under certain circumstances, a GError is lost, when involded in a gridd_client
    that fails its action.
    
    (cherry picked from commit d1c50b7c3209133b1c884b0f55f44be8a29c6532)
    gridd_client: fix a memleak when errors occur
    
    Under certain circumstances, a GError is lost, when involded in a gridd_client
    that fails its action.
    gridd_client: minor feature added to forbid redirection (disabled by default)
    Dropped the dependency to the Linux's specific clock functions.
    metautils: fixed ugly spaces, missing comments
    sqlx client : API proposal
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Slab allocation for small structures + ASN.1 message simplification
    Slab allocation for small structures + ASN.1 message simplification
    Request-Id now managed in clients and servers
    
    * transmitted via a thread-local data
    * explicit ID eliminated from remote API (m2v2) + caller code adapted
    * in servers, collected from incoming requests, propagated to outgoing requests.
    * set to a random value when not set.
    Get rid of an old rename trick born in redcurrant.
    OpenIO is lifting off now !
    metautils : mock added for gridd_client.
    
    Change-Id: Ifac60d14a6b2a831531611c334f78eff5fd3b6a1
    1.8.4 release candidate
    Initial commit
    Move gridd_client_exec_and_concat_string into proxy/
    
    The only place it is used
    Adapt a gridd_client timeout with the th-local deadline
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo: Apply short connection timeouts for DB_REPLI requests
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    Slab allocation for small structures + ASN.1 message simplification
    Slab allocation for small structures + ASN.1 message simplification
    Content propeties reviewed + Cleanup, round 2
    Get rid of an old rename trick born in redcurrant.
    OpenIO is lifting off now !
    metautils : mock added for gridd_client.
    
    Change-Id: Ifac60d14a6b2a831531611c334f78eff5fd3b6a1
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    OpenIO is lifting off now !
    1.8.4 release candidate
    Depend on the mainstream asn1c (#1834)
    
    * Depend on the mainstream asn1c instead of our modified version
    * cmake: Detect the version of gridinit: the option "-fwide-types" is not present in the 0.9.24 version that is still widely used, especially in Ubuntu Xenial Xerus.
    * ci: Add submodules for dependencies that are not managed by main linux distributions
    * ci: Avoid syncing unnecessary git submodules
    * metautils: Insulate the code with shared copyright
    Remove unsupported backblaze integration
    metautils: Remove unused code
    Meta2: Reduce the exposure of bean generation functions
    Test content.perfectible events management
    core,metautils: Factorize the extraction of chunk_method params
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core/lb: review the configuration
    
    Simplify the configuration of the service pools (and the code).
    Do not use bit mask, use bit shifts before comparing locations.
    The location requirements are now expressed by "distance".
    By default, there is nothing to set: the biggest distance requirements
    will be tried, and then loosened if not satisfiable.
    Review storage policy and service pool configuration
    m2v2: integrate new load balancer
    meta2v2 + metautils : add backblaze compatibility
    tools/oio-bootstrap.py : adding two fields to add backblaze compatibility
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    lb: implement 'weak' distance criteria
    
    New 'weak' option to data treatments, allowing to relax the distance
    requirements if they were not satisfiable. This allows requiring more
    chunks than the number of services locations. Note that using this
    option may lead to unbalanced situations.
    metautils+meta2: unused code removed
    meta2: add chunk-method to generated beans
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    OpenIO is lifting off now !
    metautils: renamed default storage policy to "NONE" (was "DUMMY")
    
    New contents without explicit storage policy are given "NONE"
    instead of "DUMMY". This should not break existing configurations
    as "DUMMY" is still treated as a wildcard.
    
    Change-Id: I57bfd7e18604959085b8cd1ae360e7583a162fe8
    Storage policy cleaned, storage class explicit loading
    
    Now able to load a storage class explicitely, out of any storage policy context. This is necessary for the metacd-http to process load-balancing requests with stgclass constraints. In facts, the metacd_http simply wraps the calls to metautils/lib/lb.h API.
    
    A corner case has been managed, when a storage class exists but must not have fallbacks. It was necessary to declare the storage class with an empty configuration.
    
    Then, the code has been cleaned, simplified and reordered by purpose.
    
    Change-Id: Ibd66594d53666f5ca4d1fab6d4226e1dc17ba95d
    1.8.4 release candidate
    Initial commit
    metautils: Remove unused code
    metautils,proxy: fix typos and wording
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    metautils/gridd_client: Avoid faulty peers
    
    Allow the gridd_client to do it.
    Move the minimal rrd from server to metautils
    
    It prepares a change coming soon in sqliterepo, that requires the simple
    RRD implementation.
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    cluster, proxy: Fixes & Improvements
    
    * cluster / remote: cleaner and uniform interface, stripped code (+ dependencies adapted)
    * proxy: CLI option to disable the cache of services
    * proxy: management of services down, that are receive a lower priority
    * server: minor cleanups
    OpenIO is lifting off now !
    Finer gauges for active threads, reliable accesslog delays
    
    This patch provides the maximum number of active threads, and a round-robin storage for that information.
    The granularity proposed is intervals of 1s over the past 30s, and intervals of 1 minute over the past 1 hour.
    This data is used by the core server library to expose statistics, e.g.
    
            server.thread.max.1 = 0
            server.thread.max.5 = 1
            server.thread.max.15 = 2
            server.thread.max.30 = 2
            server.thread.max.60 = 3
            server.thread.max.300 = 3
            server.thread.max.900 = 3
            server.thread.max.3600 = 3
    
    This patch also alters the accesslog format for gridd transports, and it is now unified with http transport.
    An access log record now provides 2 treatment durations:
    - the total time spent since the reception of the last buffer that completes the request
    - the total treatment time, from the moment where a worker thread starts the request handling til the moment an answer is generated.
    The delta between both delays is the time spent in the internals queues of the process.
    
    The patch divides in:
    - server/stats_holder.* :
      - drops the adherence to system time, the current timestamp is now received from the caller. This is necessary to manager counter with a granularity different than 1s.
      - New calls to compute the cumulative maximum
      - code simplification
    - server/network_server.* :
      - new round-robin stats now managed
      - new stats exposed.
      - precise monotonic clock used on the last input
    - server/transport_http.c :
      - useless variables removed.
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - server/transport_gridd.c :
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - sqlx/sqlx_service.c :
      - code adapted to match the lost "time adherence"
    
    Change-Id: I248ae7a1937860e4062290e95b68465d7ec62821
    1.8.4 release candidate
    Initial commit
    metautils: Remove unused code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Useless/Unused functions removed
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    meta1: better functional tests result.
    cluster, proxy: Fixes & Improvements
    
    * cluster / remote: cleaner and uniform interface, stripped code (+ dependencies adapted)
    * proxy: CLI option to disable the cache of services
    * proxy: management of services down, that are receive a lower priority
    * server: minor cleanups
    proxy: fixed container's autocreation
    
    The case of a "user created but no service linked" was not managed.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    Various improvements
    
    * global error codes added
      * special codes for missing accounts, users, containers
      * client adapted.
    * containers autocreation
      * enabled in m1v2 backend
      * exposed in m1v2 remote
      * exposed in proxy
    * C SDK output reviewed
      * minimal API exposed
      * error messages normalized
    * C SDK: upload extended with the autocreation (disabled by default).
    Fixed several warnings appeared with recent GCC versions
    
    * improved printf format checks.
    * fixed formatting weaknesses
    * fixed "unmanaged results" in some functions.
    * fixed unused paramerers
    * tools: adds missing 'import syslog' in monitoring scripts.
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    proxy: better error management, now able to multiple-bind
    OpenIO is lifting off now !
    sqliterepo: fix TO-HONEYCOMB-586 (big sqliterepo bases)
    
    Base transfers are now chunked (8MiB) by default.
    Monolitic transfers are still supported.
    
    Some return codes have been replaced by constants.
    
    Change-Id: Iecc45841bdd333f5d45bd101c68255c8c14d9111
    client: fix TO-HONEYCOMB-763 (too much errors when meta1 down)
    
    Client now retries on other meta1 instead of trying to create the container.
    Integrity loops tries other meta1 before moving chunks in lost+found.
    
    Also fix a bunch of memory leaks.
    
    Change-Id: Ie251cad03639fd4f03a3f3edee5c5762ad9142f6
    Promoter's fixes now applied
    
    Change-Id: Ib7e69ae3f3dfdb70fe747ac7416b3a0bc5ea236c
    new error code for unmanaged NS
    
    Change-Id: I9ba346899a3bf06263539be4e113d34376c44a5e
    Merges the promoter's changes.
    
      * client/c: adapt rainx_remote for future use
      * Remove meta2_container_services from installed binaries in honeycomb.spec
      * cluster/lib : Fixed memory when there is no /etc/gridstorage.conf
      * m2v2: minor safety fix for chunk substitution
      * metautils / sockets : Fixed return code check.
    1.8.4 release candidate
    metautils: Toggle the semantics of the flag
    rdir, sqlx: document "Servicing" option
    Add option to manage xattr-lock
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Volume lock factorized (rawx) and moved from the repository to the service.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    proxy: fixes /admin/debug
    proxy: container/destroy plainly destroys the containers and their references
    
    * a container destruction is now: 1/freeze 2/flush 3/unlink 4/destroy(local)
    * meta2 slighty simplified around PURGE/DEDUP/FLUSH, where the dry_run options have disappeared.
    metautils: unused code removed
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    Fixed memory leaks.
    
    Conflicts:
            meta1v2/meta1_backend_services.c
    Fixed memory leaks.
    
    Conflicts:
            meta1v2/meta1_backend_services.c
    OpenIO is lifting off now !
    Early assertions in resolver.
    
    Change-Id: I32838912087c58fbfd8bc24f78e222067b9679c9
    1.8.4 release candidate
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    metautils: Remove unused code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    metautils: Reduce the number of calls to realloc() and strlen()
    Fixed warnings (unused symbols)
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Fixed formatting weaknesses.
    
    Sometimes, the use of variadic logging functions/macros used generated strings as formats.
    Those could lead to potential segfaults if the format contained unmatched parameters.
    Fixed service push to the conscience + Cleanup, round 8
    
    * The last cleanup commit was named #6, but this was a mistke, there was already a #6.
    * Code factorized
    * Useless code removed
    * Codec functions simplified.
    \r\n removed from errors causes.
    
    This helps working with syslog.
    Minor fixes
    Minor fixes
    OpenIO is lifting off now !
    1.8.4 release candidate
    metautils: Remove unused code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Fixes and refactoring
    
    * rawx: fixed error message
    * rawx: fixed error message + fixed useless case-sensitivity management
    * proxy: cuts the crap from several error messages
    * m2v2: unreached code removed from alias deletion
    * m2v2: minor cosmetic change
    * core/sds: enables tracing RAWX requests for highest verbosity
    * proxy: re-enables case sensitive prefix matching in headers (brings more robustness)
    * core/sds: checks for content_id's format
    * core/sds: new feature to mangle the case of http headers (proxy,
      rawx). Mangling disabled by default, activated in tests.
    * core/tool_roundtrip: activates the mangling of headers case
    * core: fake chunksnb sent
    Useless/Unused functions removed
    OpenIO is lifting off now !
    m2v2: generate event on alias copy and chunk substitution
    
    Change-Id: Ic7a481e65e82cc1566e5cbb286cd8fff818f12f5
    (cherry picked from commit 9375390be5bb8fbbcf693ad649ab26130d697510)
    Minor feature to load a gba from a hexadecimal string
    1.8.4 release candidate
    metautils: Remove unused code
    meta2: parse chunk qualities, send event if required
    metautils: Factorize the logging of g_thread_pool_push() errors
    
    * Throttling (max 1 log / process / minute)
    * Factorized in metatuils
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Fix some compilation warnings with GCC 7
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    metautils / list : corner case sped up when concating lists.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    Fixed memory leaks.
    metautils: minor features additions
    
    Required further, be patient.
    OpenIO is lifting off now !
    Load-balancing cleanup.
    
    The starting point of this patch was allowing a caller (i.e. the metacd_http) to use an iterator different than those specified in the NS configuration. In other words, to thinly wrap the API.
    
    Some code reorganisation took place:
      - function reordering (to be grouped by puposes)
      - obsoletes removals (scored iterators ... meaningless since the score is the weight).
      - functions moved in others modules (checks on the storage class of services, moved into service_info)
      - code factorized (minor container handling, in metautils_containers)
    
    Change-Id: I625fd9413e0fa01d68d085f93160c026b9744c0f
    1.8.4 release candidate
    metautils: Remove unused code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    metautils: Reduce the number of calls to realloc() and strlen()
    Fixes and refactoring
    
    * rawx: fixed error message
    * rawx: fixed error message + fixed useless case-sensitivity management
    * proxy: cuts the crap from several error messages
    * m2v2: unreached code removed from alias deletion
    * m2v2: minor cosmetic change
    * core/sds: enables tracing RAWX requests for highest verbosity
    * proxy: re-enables case sensitive prefix matching in headers (brings more robustness)
    * core/sds: checks for content_id's format
    * core/sds: new feature to mangle the case of http headers (proxy,
      rawx). Mangling disabled by default, activated in tests.
    * core/tool_roundtrip: activates the mangling of headers case
    * core: fake chunksnb sent
    Useless/Unused functions removed
    obsolete code and macros removed
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    m2v2: generate event on alias copy and chunk substitution
    
    Change-Id: Ic7a481e65e82cc1566e5cbb286cd8fff818f12f5
    (cherry picked from commit 9375390be5bb8fbbcf693ad649ab26130d697510)
    Fixed hexstring operation
    Minor feature to load a gba from a hexadecimal string
    1.8.4 release candidate
    Initial commit
    Simplify the management of metrics
    
    We don't need a complicated solution with a background thread. We here
    reduce the number of allocations, the number of locks, the number of
    threads. We expect less CPU (user & sys) to be used.
    metautils: Remove unused/commented code
    metautils: Remove unused code
    cluster,metautils: Turn static some functions used once
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    cluster: Remove the useless "options" field from the nsinfo
    
    Also remove it from the ASN.1 structure.
    Review storage policy and service pool configuration
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    metautils: unused code removed
    m2v2: code simplifications and memleaks fixes around namespace_info structures
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    m0v2,m1v2,m2v2,sqlx: max worker threads config (TO-HONEYCOMB-775)
    
    New commandline option: MaxWorkers
    New conscience option: param_option.<type>_max_workers
    Default value is 200.
    
    Change-Id: Id80545e05df458b642f7d7b942139a87207820b4
    Storage policy cleaned, storage class explicit loading
    
    Now able to load a storage class explicitely, out of any storage policy context. This is necessary for the metacd-http to process load-balancing requests with stgclass constraints. In facts, the metacd_http simply wraps the calls to metautils/lib/lb.h API.
    
    A corner case has been managed, when a storage class exists but must not have fallbacks. It was necessary to declare the storage class with an empty configuration.
    
    Then, the code has been cleaned, simplified and reordered by purpose.
    
    Change-Id: Ibd66594d53666f5ca4d1fab6d4226e1dc17ba95d
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    metautils : nsinfo JSON decoder signatures
    
    Change-Id: I568d65f3d806562868f3d1eae7e6a97ad6f816df
    JSON codec signature for namespace_info.
    
    Change-Id: I7fea43cf8c610edb972c06e3868481f2d26d2952
    1.8.4 release candidate
    metautils: Remove unused code
    metautils: Avoid naming conflicts in STRINGV_STACKIFY
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core+metautils: code cleanup, functions {re,}moved
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    Useless/Unused functions removed
    core+metautils: str_{upper,lower} moved from metautils to core
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    obsolete code and macros removed
    Fixes, improvements
    
    m2v2: fixed "bean leak" when purging exceeding aliases (properties not removed).
    m2v2: fixed "bean leak" when deleting explicit aliases (properties not removed).
    proxy: Fixed compile-time warnings
    proxy: properties returned in headers when getting objects
    proxy: headers matching now case-insensitive
    proxy: In addition, request handlers returning invariable and dummy outputs (empty lists, empty sets) now return nothing.
    tools: bootstrap doesn't deploy the admin flask (it is destined to disappear in the next release and is already used by no one).
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    fixed sizes when declaring buffers.
    Fixed service push to the conscience + Cleanup, round 8
    
    * The last cleanup commit was named #6, but this was a mistke, there was already a #6.
    * Code factorized
    * Useless code removed
    * Codec functions simplified.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * path to sqlite bases unified and simplified. It should also plainly manage several containers for the same user.
    * warnings removed.
    * useless comments removed.
    metautils: useless/void comments removed.
    metautils: minor features additions
    
    Required further, be patient.
    OpenIO is lifting off now !
    1.8.4 release candidate
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    metautils: unused code removed
    m2v2: code simplifications and memleaks fixes around namespace_info structures
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    m2v2 + sqlx + proxy : set properties on contents and containers now manage a flush options and deletion by null value.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    metautils: Remove unused/commented code
    metautils: Remove unused code
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    metautils: Stop carrying useless info in replies
    
    A reply need no deadline and no service ID.
    Depend on the mainstream asn1c (#1834)
    
    * Depend on the mainstream asn1c instead of our modified version
    * cmake: Detect the version of gridinit: the option "-fwide-types" is not present in the 0.9.24 version that is still widely used, especially in Ubuntu Xenial Xerus.
    * ci: Add submodules for dependencies that are not managed by main linux distributions
    * ci: Avoid syncing unnecessary git submodules
    * metautils: Insulate the code with shared copyright
    metautils: Remove dead code
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    metautils: reduce number of memory allocations
    
    This slightly speeds up meta0 and meta1.
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    proxy: prefer MASTER for writing, SLAVE for reading
    metautils: unused code removed
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    fixed sub-type management for the services.
    
    The compound types of services are now well considered by the proxy, then transmitted in the various requests the proxy issues.
    metautils: fixed ugly spaces, missing comments
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    4th cleanup, unused code purged from metautils
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Fixed service push to the conscience + Cleanup, round 8
    
    * The last cleanup commit was named #6, but this was a mistke, there was already a #6.
    * Code factorized
    * Useless code removed
    * Codec functions simplified.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    metautils: functions declarations reorganized by purpose.
    Message handling functions refatored
    
    * Useless / unused functions removed.
    * Signatures more intuitive.
    * code factorized.
    Slab allocation for small structures + ASN.1 message simplification
    Slab allocation for small structures + ASN.1 message simplification
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    Content propeties reviewed + Cleanup, round 2
    Request-Id now managed in clients and servers
    
    * transmitted via a thread-local data
    * explicit ID eliminated from remote API (m2v2) + caller code adapted
    * in servers, collected from incoming requests, propagated to outgoing requests.
    * set to a random value when not set.
    OpenIO is lifting off now !
    fixed missing forward declaration
    
    Change-Id: Ic83428062175a6f7d9744c54226bc2e2468d9062
    1.8.4 release candidate
    Initial commit
    metautils: Remove unused code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    m2v2: integrate new load balancer
    metautils: unused code removed
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    OpenIO is lifting off now !
    1.8.4 release candidate
    metautils: Remove unused code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    lb: review for more efficiency
    sqliterepo/election: memleak chased
    Useless/Unused functions removed
    core+metautils: str_{upper,lower} moved from metautils to core
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    OpenIO is lifting off now !
    1.8.4 release candidate
    metautils/task: Ensure a thread-local deadline for each fire
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    metautils: removes unreachable code
    
    Also removes unused macros and useless comments
    Useless/Unused functions removed
    metautils: task queues slightly simplified.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    OpenIO is lifting off now !
    1.8.4 release candidate
    metautils: Remove unused code
    Move lrutree.* from metautils/ to core/
    cmake: Only install prod-related tools in other build types than Debug
    cmake: Reorganize the targets
    
    * do not list headers, as it is recommended
    * drop the dependency to sqlite3 in oio-proxy
    Build & Use static libraries
    Depend on the mainstream asn1c (#1834)
    
    * Depend on the mainstream asn1c instead of our modified version
    * cmake: Detect the version of gridinit: the option "-fwide-types" is not present in the 0.9.24 version that is still widely used, especially in Ubuntu Xenial Xerus.
    * ci: Add submodules for dependencies that are not managed by main linux distributions
    * ci: Avoid syncing unnecessary git submodules
    * metautils: Insulate the code with shared copyright
    Simplify the management of metrics
    
    We don't need a complicated solution with a background thread. We here
    reduce the number of allocations, the number of locks, the number of
    threads. We expect less CPU (user & sys) to be used.
    cmake: Explicit the ABI version of each shared library
    Add oio-conscience-server to replace gridd+msg_conscience
    
    * Drop gridd (a.k.a. oio-daemon)
    * Rewrite cluster/module/module.c as a standalone service
    * Adapt oio-bootstrap.py to generate env based on the new conscience
    * Merge the conscience lib in the server
    * Move the expression parsing from metautils to cluster
    * Fix compilation warnings about deprecated symbols
    core,metautils: Factorize the DJB hash functions
    coverage: Avoid files generated by asn1c
    
    These files contain a lot of unused code.
    rawx: Move the ACL in the rawx (unused elsewhere)
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    Add support for a central configuration
    
    Components:
    * a config registrar in core/oiovar.h and core/var.c
    * a code generator, confgen.py, used by cmake to generate the variable
      descriptions, the github markdown files and the CMake support
    metautils: Embed asn1c for no runtime dependency
    
    With this evolution we are free to alter asn1c macros and be sure the
    runtime version will be the same that the compile time version.
    Move the minimal rrd from server to metautils
    
    It prepares a change coming soon in sqliterepo, that requires the simple
    RRD implementation.
    Gather asn1.c header for further macro handlings
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    metautils: removes unreachable code
    
    Also removes unused macros and useless comments
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    sqliterepo/election: memleak chased
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    Useless/Unused functions removed
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    metautils: fixed cmake file
    cache: dedicated lib to the caching features, with various implementations.
    4th cleanup, unused code purged from metautils
    1st cleanup : client, rawx-client, gridd/client
    
    * client/c/lib has been replaced by core/sds (pure http/json client)
    * rawx-client was not used
    * gridd/client has been replaced by tools/oio-tool
    * some metautils have been gathered in a single tool: oio-tool
    cmake: G_LOG_DOMAIN set at cmake's level.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    m2v2: unused snapshots removed from compilation targets.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    m2v2: unused snapshots removed from compilation targets.
    SSL replaced by GLib equivalent.
    Get rid of log4c emulation and some old (and unused) pieces of code.
    tools: new sample code, oio-grep.
    
    metautils: fixed installation of missing header.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Get rid of grid_storage_client_stat
    
    One of the ugliest piece of code present here.
    It was intrusive and based on static variables.
    metautils: unused functions removed.
    Content propeties reviewed + Cleanup, round 2
    metautils: modularize the notification system
    
    Change-Id: I6a75473a16c3f4973f0ff0dd4ab349c47d170664
    
    Conflicts:
            CMakeLists.txt
            meta2v2/meta2_backend.h
            metautils/lib/CMakeLists.txt
            metautils/lib/event_config.c
            metautils/lib/notifications.c
    OpenIO is lifting off now !
    Storage policy cleaned, storage class explicit loading
    
    Now able to load a storage class explicitely, out of any storage policy context. This is necessary for the metacd-http to process load-balancing requests with stgclass constraints. In facts, the metacd_http simply wraps the calls to metautils/lib/lb.h API.
    
    A corner case has been managed, when a storage class exists but must not have fallbacks. It was necessary to declare the storage class with an empty configuration.
    
    Then, the code has been cleaned, simplified and reordered by purpose.
    
    Change-Id: Ibd66594d53666f5ca4d1fab6d4226e1dc17ba95d
    metautils : recent headers now installed too
    
    Change-Id: I241699ae0ecd8f68be28386b0659f2cd6068e66d
    "Custom vs Standard" paths reviewed.
    
    json-c and rdkafka management now better taken into account.
    This allows compiling on a ubuntu server as weel as on a centos distribution.
    
    Change-Id: I1c8adf8ab213c2a7d4927fbbe1e031dc782792ea
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    metautils : removed test_sigfpe from the tests set.
    
    Change-Id: I17ac75fb1869deffa4feac3db4f4efd695774904
    metautils : mock added for gridd_client.
    
    Change-Id: Ifac60d14a6b2a831531611c334f78eff5fd3b6a1
    Early assertions in resolver.
    
    Change-Id: I32838912087c58fbfd8bc24f78e222067b9679c9
    metautils now links to json-c.
    
    Change-Id: Ie98801885e08fb703889520bcf1f088023d66ea5
    Fixed wrong installation path for header
    Binary installation names reviewed.
    Fixes source file listed twice.
    Applies the renaming on path2container & oid2cid
    1.8.4 release candidate
    Initial commit
    metautils: Remove unused code
    cluster,metautils: Turn static some functions used once
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    metautils: Restore the encoding of some NS conf to ease the transition
    cluster: Remove the useless "chunk_size" field from the nsinfo
    
    Also remove it from the ASN.1 structure.
    Everything has been migrated to the central configuration facility.
    cluster: Remove the useless "options" field from the nsinfo
    
    Also remove it from the ASN.1 structure.
    metautils: Reduce the number of calls to realloc() and strlen()
    nsinfo: obsolete fields removed
    
    PROTOCOLAR COMPATIBILITY BREAK
    Fix meta2 backend and storage policy tests
    Review storage policy and service pool configuration
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    events: make buffer delay configurable (5s by default)
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    Useless/Unused functions removed
    metautils: unused code removed
    json: latest function used (m2v2, proxy, metautils)
    m2v2: code simplifications and memleaks fixes around namespace_info structures
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    metautils: avoid some memory allocations when reading config
    
    Change-Id: I91283762ed709fca1df40fa37051d0ee2b8d131d
    OpenIO is lifting off now !
    m0v2,m1v2,m2v2,sqlx: max worker threads config (TO-HONEYCOMB-775)
    
    New commandline option: MaxWorkers
    New conscience option: param_option.<type>_max_workers
    Default value is 200.
    
    Change-Id: Id80545e05df458b642f7d7b942139a87207820b4
    Storage policy cleaned, storage class explicit loading
    
    Now able to load a storage class explicitely, out of any storage policy context. This is necessary for the metacd-http to process load-balancing requests with stgclass constraints. In facts, the metacd_http simply wraps the calls to metautils/lib/lb.h API.
    
    A corner case has been managed, when a storage class exists but must not have fallbacks. It was necessary to declare the storage class with an empty configuration.
    
    Then, the code has been cleaned, simplified and reordered by purpose.
    
    Change-Id: Ibd66594d53666f5ca4d1fab6d4226e1dc17ba95d
    "Custom vs Standard" paths reviewed.
    
    json-c and rdkafka management now better taken into account.
    This allows compiling on a ubuntu server as weel as on a centos distribution.
    
    Change-Id: I1c8adf8ab213c2a7d4927fbbe1e031dc782792ea
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    metautils : nsinfo JSON decoder.
    
    Change-Id: If8d903ca9ce7383752901203aca28a8dcb5cdfd8
    Fixes the namespace_info JSON to JSON encoding.
    
    Change-Id: I7fef7afebb36716d265e2b3cb0006edb7e29eeca
    JSON codec for namespace_info.
    
    Change-Id: Ibc417e382088f13ca08c4345912b99915a9f76eb
    1.8.4 release candidate
    Initial commit
    metautils: Remove unused code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core,metautils: Factorize the DJB hash functions
    sqliterepo/election: memleak chased
    Useless/Unused functions removed
    Fixed several warnings appeared with recent GCC versions
    
    * improved printf format checks.
    * fixed formatting weaknesses
    * fixed "unmanaged results" in some functions.
    * fixed unused paramerers
    * tools: adds missing 'import syslog' in monitoring scripts.
    OpenIO is lifting off now !
    1.8.4 release candidate
    metautils: Embed asn1c for no runtime dependency
    
    With this evolution we are free to alter asn1c macros and be sure the
    runtime version will be the same that the compile time version.
    .gitignore: patterns used.
    Updates .gitignore with some generated files
    metautils/nsinfo: Restore removed fields for more backward compliance
    cluster: Remove the useless "chunk_size" field from the nsinfo
    
    Also remove it from the ASN.1 structure.
    Everything has been migrated to the central configuration facility.
    cluster: Remove the useless "options" field from the nsinfo
    
    Also remove it from the ASN.1 structure.
    nsinfo: obsolete fields removed
    
    PROTOCOLAR COMPATIBILITY BREAK
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    Review storage policy and service pool configuration
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    sqlx client evolution
    metautils: fixed ugly spaces, missing comments
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    conscience: renaming + pruning + reorg
    
    * conscience/agent remote functions have been renamed for more clarity
    * MACRO tags have been removed (usage too scarce and immutable, no need of something so flexible)
    * CPU/IO/SPACE computation moved from the oio-cluster-agent to libgridcluster
    * oio-cluster-agent is now now mandatory
    4th cleanup, unused code purged from metautils
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    metautils : ASN.1 structures now have explicit tags, less optional fields.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    metautils : ASN.1 structures now have explicit tags, less optional fields.
    ASN.1 addresses simplified
    
    In addition, we got rid of a legacy of the redcurrant's early days, where ports were encoded on 4 bytes integers.
    Content propeties reviewed + Cleanup, round 2
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    metautils: Remove unused code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core,metautils: Factorize the DJB hash functions
    core+metautils: code cleanup, functions {re,}moved
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    cs,core,metautils: new services and LB configuration
    
    Rearrange service types configuration to make it more clear.
    Rearrange service pools configuration to add more options.
    Compute integer service location from dotted string location.
    conscience: option to unlock scores by default (fix #612)
    
    The option is 'lock_at_first_register' and is on by default.
    It must be specified per service type, e.g.:
      param_service.meta0.lock_at_first_register=false
    Benefits from optimized strcmp() when case sensitivity is not worth (#578)
    metautils: fixes corner case of memory management
    Useless/Unused functions removed
    core+metautils: str_{upper,lower} moved from metautils to core
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    Fixes, improvements
    
    m2v2: fixed "bean leak" when purging exceeding aliases (properties not removed).
    m2v2: fixed "bean leak" when deleting explicit aliases (properties not removed).
    proxy: Fixed compile-time warnings
    proxy: properties returned in headers when getting objects
    proxy: headers matching now case-insensitive
    proxy: In addition, request handlers returning invariable and dummy outputs (empty lists, empty sets) now return nothing.
    tools: bootstrap doesn't deploy the admin flask (it is destined to disappear in the next release and is already used by no one).
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    fixed sizes when declaring buffers.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * path to sqlite bases unified and simplified. It should also plainly manage several containers for the same user.
    * warnings removed.
    * useless comments removed.
    metautils: minor features additions
    
    Required further, be patient.
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    Early assertions in resolver.
    
    Change-Id: I32838912087c58fbfd8bc24f78e222067b9679c9
    Now decodes multilines with unknown length
    
    Change-Id: I13a6b81b5078fda830a258e2a7a4d9a80c100b41
    1.8.4 release candidate
    metautils: Remove unused code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    conf: Move the FD limits in the central config
    metautils/gridd_client: Write using send(MSG_NOSIGNAL)
    metautils/gridd_client: Write using send(MSG_NOSIGNAL)
    OpenIO is lifting off now !
    1.8.4 release candidate
    copyright: Update the mention of altered files
    metautils/log: Now accept the default syslog UDP port
    
    ... when not explicit in the target address.
    core,metautils: Allow to send syslog msg to an UDP collector
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    metautils: Help IDE with avoiding nested struct declarations
    metautil/common_main: Manage SIGHUP to prepare the conf reloading
    metautils,conf: Expose the variable of the delay before the verbosity reset
    Name anonymous nested types declarations
    
    Those anonymous types (enum, struct, union) raise warnings in recent
    IDE and their paranoid linters.
    sqlx: now able to prepare "turnkey" sqlite DB, pre-schemed.
    
    * option added to oio-sqlx-server to mention a directory full of schemas.
      the filename is the schema name, and its content the set of SQL statements to create a DB.
    core/cs: API completed
    
    Also, the API has been made more robust to manage strings with '"' and UTF-8 characters in the JSON messages
    metautils: fixed 32bits timestamp
    
    Compilation failed on 32bits platforms such RaspberryPi.
    m2v2: code simplifications and memleaks fixes around namespace_info structures
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    sdk: PUT minimal implementation, proxying adapted to libcurl <7.4
    C API : fixed log initiation.
    
    Logging is disabled by default, the application can activate it via the GLib2 (https://developer.gnome.org/glib/2.38/glib-Message-Logging.html#g-log-set-default-handler).
    The verbosity is set to WARNING by default, the app. can make it more verbose whith the help of logger_init_level() (metautils/lib/metautils.h)
    Useless code removed + minor refactoring
    Useless code removed + minor refactoring
    OpenIO is lifting off now !
    metautils : new macro to init a testing binary tool
    
    Change-Id: I785bc5c5b21cc9c74b08453407822de537d5fe34
    1.8.4 release candidate
    Initial commit
    metautils: Remove unused code
    core: Merge TLS management with service_id
    
    oio_lb_item_s now contains new field. This new field is reused
    by oio_resolve_id
    copyright: Update the mention of altered files
    metautils/resolv: A missing port is now set to 0 by default
    
    Mandatory for default ports. Now accepted formats:
    * IP
    * IP:
    core, meta2, proxy, tests: rename things
    meta2: support use of ServiceId
    
    meta-server now support ServiceId option on command line
    (but it should be used only by meta2)
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    metautils: removes unreachable code
    
    Also removes unused macros and useless comments
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    ASN.1 addresses simplified
    
    In addition, we got rid of a legacy of the redcurrant's early days, where ports were encoded on 4 bytes integers.
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    1.8.4 release candidate
    metautils: Ensure LGPL as expected
    Depend on the mainstream asn1c (#1834)
    
    * Depend on the mainstream asn1c instead of our modified version
    * cmake: Detect the version of gridinit: the option "-fwide-types" is not present in the 0.9.24 version that is still widely used, especially in Ubuntu Xenial Xerus.
    * ci: Add submodules for dependencies that are not managed by main linux distributions
    * ci: Avoid syncing unnecessary git submodules
    * metautils: Insulate the code with shared copyright
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    coverage: Avoid files generated by asn1c
    
    These files contain a lot of unused code.
    Use the same macros for ans1c structures then in the codec code
    
    ... so we will be easily able to distribute a different asn1c release
    with a custom set of memory management functions.
    Gather asn1.c header for further macro handlings
    metautils: Toggle the semantics of the flag
    Adapt to recent libattr
    
    libattr 2.4.48 removed attr/xattr.h, which contained roughly the same
    things as sys/xattr.h.
    
    (cherry picked from commit 72763bb89dd71b9dc47aa0964b939eba0bbcfa2a)
    Adapt to recent libattr
    
    libattr 2.4.48 removed attr/xattr.h, which contained roughly the same
    things as sys/xattr.h.
    metautils: strengthen volume lock error messages
    Add option to manage xattr-lock
    specify expected IP on log when service xattr differ
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Volume lock factorized (rawx) and moved from the repository to the service.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Review storage policy and service pool configuration
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    OpenIO is lifting off now !
    Storage policy cleaned, storage class explicit loading
    
    Now able to load a storage class explicitely, out of any storage policy context. This is necessary for the metacd-http to process load-balancing requests with stgclass constraints. In facts, the metacd_http simply wraps the calls to metautils/lib/lb.h API.
    
    A corner case has been managed, when a storage class exists but must not have fallbacks. It was necessary to declare the storage class with an empty configuration.
    
    Then, the code has been cleaned, simplified and reordered by purpose.
    
    Change-Id: Ibd66594d53666f5ca4d1fab6d4226e1dc17ba95d
    metautils: Reduce the exposure of public functions
    metautils: allow several slots in LB benchmark files
    tests: modularize LB tests
    metautils: implement facility to load services from a file
    Update Copyright mentions
    Remove mentions of the "user_is_a_service" tag.
    proxy,meta*: refactor the feeding of load balancer
    
    Use the new oio_lb_world__feed_slot_with_list function which allows to
    atomically feed a service slot with a list of items. This should prevent
    nasty messages like "LB reload not followed by rehash".
    
    Jira: OS-294
    Test content.perfectible events management
    Refresh LB even after loading errors
    
    When errors occur while reloading the LB, we do not trim the previous
    generations of services, and thus do not recompute the internal state.
    With this patch, the internal state will be recomputed in such cases.
    There is still room for improvements.
    metautils/lb: Replace a strncpy with a memcpy
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core/lb: use unsigned integers for bit shifts
    core/lb: review the configuration
    
    Simplify the configuration of the service pools (and the code).
    Do not use bit mask, use bit shifts before comparing locations.
    The location requirements are now expressed by "distance".
    By default, there is nothing to set: the biggest distance requirements
    will be tried, and then loosened if not satisfiable.
    lb: Expire the services that disappeared from the conscience
    
    Fix #815
    lb: Expire the services that disappeared from the conscience
    
    Fix #815
    metautils: Reduce the number of calls to realloc() and strlen()
    core,m1: fix 'user_is_a_service' option handling (2)
    
    There was a problem with the location of the service for which
    the load-balancer was queried.
    lb: adds robustness against cases of unknown and invalid policies
    metautils: removes unreachable code
    
    Also removes unused macros and useless comments
    metautils: fix annoying "No service pool [foo] for storage policy [foo]"
    proxy, metautils: fix #638
    Review storage policy and service pool configuration
    lb: remove g_alloca() from loops
    Remove last traces of old load balancer
    proxy: integrate new load balancer
    lb: review for more efficiency
    EC through gateway + rebase on master (#594)
    
    * fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    
    * event-agent: use basic http for account client
    
    * oio-bootstrap.py: fixed default schema for mail applications
    
    * metautils/lb: uses the local PRNG, uniform distribution (#582)
    
    Uses the local PRNG instead of the libc's rand(), with its guarantee on
    the uniform distribution over a given range.
    
    This should lead to better random and should fix the apparent preference
    for the first item.
    
    * Do not generate extra debug and asserts when building in RelWithDebInfo
    
    * core: implement upload and download through http gateway
    metautils/lb: uses the local PRNG, uniform distribution (#582)
    
    Uses the local PRNG instead of the libc's rand(), with its guarantee on
    the uniform distribution over a given range.
    
    This should lead to better random and should fix the apparent preference
    for the first item.
    Benefits from optimized strcmp() when case sensitivity is not worth (#578)
    lb: implement 'weak' distance criteria
    
    New 'weak' option to data treatments, allowing to relax the distance
    requirements if they were not satisfiable. This allows requiring more
    chunks than the number of services locations. Note that using this
    option may lead to unbalanced situations.
    lb: better error messages (#570)
    
    Fix #567
    lb: set default WRR reset_delay to 60s
    lb,bootstrap: display reset_delay, set it to 60s for rawx
    Useless/Unused functions removed
    lb: find a service by addr without specifying type
    Fixed compilation on x86_32
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    Hook'able clock function now used everywhere
    Dropped the dependency to the Linux's specific clock functions.
    metautils / lb: unused macros removed
    lb: removed useless iterator
    Various beautifications
    
    agent: unused code removed
    cluster: uniform interface
    cluster: agent bypass
    conscience: func tests OK
    cluster, proxy: Fixes & Improvements
    
    * cluster / remote: cleaner and uniform interface, stripped code (+ dependencies adapted)
    * proxy: CLI option to disable the cache of services
    * proxy: management of services down, that are receive a lower priority
    * server: minor cleanups
    Removed unused and/or useless code
    
    tools: removed unused account-agent.py
    metautils: removed unused and useless macros (their scarce usage have been replaced by more common macros).
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    lb: the default iterator becomes WRR
    
    At least until WRAND is repaired.
    The changed has been made into the code (metautils) and into the configuration generated by oio-bootstrap.py
    lb: config printed by oio-cluster
    lb: WRAND becomes the default algorithm (replacing RR)
    
    Closes #192
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    metautils / lb : explicit flush feature now available.
    Various fixes and improvements
    
    * metautils: now uses slice allocation
    * server: now uses slice allocation
    * sdk: ReqId, fixed missing headers
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    Load-balancing cleanup.
    
    The starting point of this patch was allowing a caller (i.e. the metacd_http) to use an iterator different than those specified in the NS configuration. In other words, to thinly wrap the API.
    
    Some code reorganisation took place:
      - function reordering (to be grouped by puposes)
      - obsoletes removals (scored iterators ... meaningless since the score is the weight).
      - functions moved in others modules (checks on the storage class of services, moved into service_info)
      - code factorized (minor container handling, in metautils_containers)
    
    Change-Id: I625fd9413e0fa01d68d085f93160c026b9744c0f
    "Custom vs Standard" paths reviewed.
    
    json-c and rdkafka management now better taken into account.
    This allows compiling on a ubuntu server as weel as on a centos distribution.
    
    Change-Id: I1c8adf8ab213c2a7d4927fbbe1e031dc782792ea
    metautils / lb : now able to reload from JSON objects
    
    Usefull for testing purposes.
    
    Change-Id: I22bef8e82e2c88ec7ea6916830c97d4c08a5e417
    metautils/lb: fix storage class fallbacks
    1.8.4 release candidate
    Initial commit
    metautils: Remove unused/commented code
    Depend on the mainstream asn1c (#1834)
    
    * Depend on the mainstream asn1c instead of our modified version
    * cmake: Detect the version of gridinit: the option "-fwide-types" is not present in the 0.9.24 version that is still widely used, especially in Ubuntu Xenial Xerus.
    * ci: Add submodules for dependencies that are not managed by main linux distributions
    * ci: Avoid syncing unnecessary git submodules
    * metautils: Insulate the code with shared copyright
    metautils/nsinfo: Restore removed fields for more backward compliance
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    metautils: Replace old macros by their recent equivalent
    cluster: Remove the useless "chunk_size" field from the nsinfo
    
    Also remove it from the ASN.1 structure.
    Everything has been migrated to the central configuration facility.
    cluster: Remove the useless "options" field from the nsinfo
    
    Also remove it from the ASN.1 structure.
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 3e12733b1ef6b247af2187db7d044c709501d0d6)
    Fix compilation issues with GCC 7
    Use the same macros for ans1c structures then in the codec code
    
    ... so we will be easily able to distribute a different asn1c release
    with a custom set of memory management functions.
    Gather asn1.c header for further macro handlings
    metautils: Reduce the number of calls to realloc() and strlen()
    core/log: removes (nearly) unused logging macros
    nsinfo: obsolete fields removed
    
    PROTOCOLAR COMPATIBILITY BREAK
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    metautils: removes unreachable code
    
    Also removes unused macros and useless comments
    Review storage policy and service pool configuration
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    metautils: unused code removed
    Fixed compilation on x86_32
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    m2v2: code simplifications and memleaks fixes around namespace_info structures
    conscience: renaming + pruning + reorg
    
    * conscience/agent remote functions have been renamed for more clarity
    * MACRO tags have been removed (usage too scarce and immutable, no need of something so flexible)
    * CPU/IO/SPACE computation moved from the oio-cluster-agent to libgridcluster
    * oio-cluster-agent is now now mandatory
    4th cleanup, unused code purged from metautils
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Replaced some deprecated symbols from GLib (g_memmove, G_MUTEX_INIT)
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    Fixed several warnings appeared with recent GCC versions
    
    * improved printf format checks.
    * fixed formatting weaknesses
    * fixed "unmanaged results" in some functions.
    * fixed unused paramerers
    * tools: adds missing 'import syslog' in monitoring scripts.
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    fixed sizes when declaring buffers.
    Fixed service push to the conscience + Cleanup, round 8
    
    * The last cleanup commit was named #6, but this was a mistke, there was already a #6.
    * Code factorized
    * Useless code removed
    * Codec functions simplified.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    metautils: Remove unused/commented code
    metautils: Remove unused code
    metautils: Declare the max length of a content ID
    core: Define size limits constants in core instead of metautils
    Python API, meta2: forward special property beans
    
    Jira: R1810-27
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    cluster: Remove the useless "chunk_size" field from the nsinfo
    
    Also remove it from the ASN.1 structure.
    Everything has been migrated to the central configuration facility.
    cluster: Remove the useless "options" field from the nsinfo
    
    Also remove it from the ASN.1 structure.
    core/ext: Reduce the number of memory allocations
    
    The threa-dlocal request ID is now inline in the thread-local structure.
    Its size is bounded to 63 bytes (including the final zero).
    core/ext: Reduce the number of memory allocations
    
    The threa-dlocal request ID is now inline in the thread-local structure.
    Its size is bounded to 63 bytes (including the final zero).
    Name anonymous nested types declarations
    
    Those anonymous types (enum, struct, union) raise warnings in recent
    IDE and their paranoid linters.
    metautils: Explain what does each length limit cover
    
    It is now documented if a `LIMIT_LENGTH_` macro manages the final NUL
    character of the string it concerns.
    
    Also, unused macros have been removed.
    metautils: reduce number of memory allocations
    
    This slightly speeds up meta0 and meta1.
    nsinfo: obsolete fields removed
    
    PROTOCOLAR COMPATIBILITY BREAK
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    Review storage policy and service pool configuration
    lb: remove g_alloca() from loops
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    conscience: renaming + pruning + reorg
    
    * conscience/agent remote functions have been renamed for more clarity
    * MACRO tags have been removed (usage too scarce and immutable, no need of something so flexible)
    * CPU/IO/SPACE computation moved from the oio-cluster-agent to libgridcluster
    * oio-cluster-agent is now now mandatory
    4th cleanup, unused code purged from metautils
    metautils: STRLEN macro added, warning fixed.
    metautils: fixed fields sizes.
    
    Unused structures removed.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    ASN.1 addresses simplified
    
    In addition, we got rid of a legacy of the redcurrant's early days, where ports were encoded on 4 bytes integers.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    m1v2: optimize/factorize JSON notifications (thanks JFS)
    
    Change-Id: Iab28647833d5f3db695798cdb6fbb8e2ba23c4b1
    Usage of content_path's length normalized.
    
    Declares the size + 1, uses size.
    1.8.4 release candidate
    Initial commit
    metautils/m1url: Make better usage of g_strlcpy
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    metautils: Reduce the number of calls to realloc() and strlen()
    proxy: fixes /admin/debug
    proxy: container/destroy plainly destroys the containers and their references
    
    * a container destruction is now: 1/freeze 2/flush 3/unlink 4/destroy(local)
    * meta2 slighty simplified around PURGE/DEDUP/FLUSH, where the dry_run options have disappeared.
    json: latest function used (m2v2, proxy, metautils)
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    Fixed memory leaks.
    
    Conflicts:
            meta1v2/meta1_backend_services.c
    Fixed memory leaks.
    
    Conflicts:
            meta1v2/meta1_backend_services.c
    OpenIO is lifting off now !
    m1v2: optimize/factorize JSON notifications (thanks JFS)
    
    Change-Id: Iab28647833d5f3db695798cdb6fbb8e2ba23c4b1
    "Custom vs Standard" paths reviewed.
    
    json-c and rdkafka management now better taken into account.
    This allows compiling on a ubuntu server as weel as on a centos distribution.
    
    Change-Id: I1c8adf8ab213c2a7d4927fbbe1e031dc782792ea
    metautils / m1url : JSON codec added + code isolated.
    
    Change-Id: Iac9ae429f75b2019b9db7ef14b58aff172675c43
    Simplify the management of metrics
    
    We don't need a complicated solution with a background thread. We here
    reduce the number of allocations, the number of locks, the number of
    threads. We expect less CPU (user & sys) to be used.
    metautils: Reduce the exposure of public functions
    tests: modularize LB tests
    metautils: implement facility to load services from a file
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Review storage policy and service pool configuration
    Remove last traces of old load balancer
    proxy: integrate new load balancer
    lb: review for more efficiency
    lb: implement 'weak' distance criteria
    
    New 'weak' option to data treatments, allowing to relax the distance
    requirements if they were not satisfiable. This allows requiring more
    chunks than the number of services locations. Note that using this
    option may lead to unbalanced situations.
    lb: better error messages (#570)
    
    Fix #567
    lb: find a service by addr without specifying type
    lb: removed useless iterator
    lb: config printed by oio-cluster
    lb: WRAND becomes the default algorithm (replacing RR)
    
    Closes #192
    metautils / lb : explicit flush feature now available.
    OpenIO is lifting off now !
    Load-balancing cleanup.
    
    The starting point of this patch was allowing a caller (i.e. the metacd_http) to use an iterator different than those specified in the NS configuration. In other words, to thinly wrap the API.
    
    Some code reorganisation took place:
      - function reordering (to be grouped by puposes)
      - obsoletes removals (scored iterators ... meaningless since the score is the weight).
      - functions moved in others modules (checks on the storage class of services, moved into service_info)
      - code factorized (minor container handling, in metautils_containers)
    
    Change-Id: I625fd9413e0fa01d68d085f93160c026b9744c0f
    metautils / lb : now able to reload from JSON objects
    
    Usefull for testing purposes.
    
    Change-Id: I22bef8e82e2c88ec7ea6916830c97d4c08a5e417
    1.8.4 release candidate
    Initial commit
    Remove unsupported backblaze integration
    metautils: Remove unused code
    Test content.perfectible events management
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core/lb: review the configuration
    
    Simplify the configuration of the service pools (and the code).
    Do not use bit mask, use bit shifts before comparing locations.
    The location requirements are now expressed by "distance".
    By default, there is nothing to set: the biggest distance requirements
    will be tried, and then loosened if not satisfiable.
    metautils: Reduce the number of calls to realloc() and strlen()
    Fix meta2 backend and storage policy tests
    Review storage policy and service pool configuration
    m2v2: integrate new load balancer
    migrate plain tests to use "unified" python API
    meta2v2 + metautils : add backblaze compatibility
    tools/oio-bootstrap.py : adding two fields to add backblaze compatibility
    chunk-method: add nb_copy for plain
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    Protects some calls to g_strv_length()
    metautils+meta2: unused code removed
    meta2: add chunk-method to generated beans
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Fixed formatting weaknesses.
    
    Sometimes, the use of variadic logging functions/macros used generated strings as formats.
    Those could lead to potential segfaults if the format contained unmatched parameters.
    OpenIO is lifting off now !
    Storage policy cleaned, storage class explicit loading
    
    Now able to load a storage class explicitely, out of any storage policy context. This is necessary for the metacd-http to process load-balancing requests with stgclass constraints. In facts, the metacd_http simply wraps the calls to metautils/lib/lb.h API.
    
    A corner case has been managed, when a storage class exists but must not have fallbacks. It was necessary to declare the storage class with an empty configuration.
    
    Then, the code has been cleaned, simplified and reordered by purpose.
    
    Change-Id: Ibd66594d53666f5ca4d1fab6d4226e1dc17ba95d
    1.8.4 release candidate
    Initial commit
    metautils: Remove unused code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core,m1: fix 'user_is_a_service' option handling (2)
    
    There was a problem with the location of the service for which
    the load-balancer was queried.
    metautils: unused code removed
    meta1: better functional tests result.
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    metautils: Remove unused code
    enbug/metautils: Fix a memory mgmt typo
    metautils/gridd: Make configurable the {SND,RCV]BUF toward gridd
    metautils/socket: Avoid running useless testing code branches
    Add a unit test around the avoidance of the down peers
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    metautils: Replace old macros by their recent equivalent
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    Add a general trigger around the activiation of TFO
    
    TCP_FASTOPEN improved the behavior on small-to-medium loads but it seems
    to induce some side effects such an extra load when srongly stressing
    the services. Let's deactivate it by default and continue the job of
    improving out support.
    Use MSG_NOSIGNAL when calling sendto()
    metautils/socket: Fix the protection delay around TFO errors
    metautils/socket: Do not definitely shut the TFO upon the first error
    
    Let's avoid TFO for 1 minute when an error occurs.
    metautils: Add support for TCP_FASTOPEN
    Adapt the code to the central config
    metautils: simpler errno-to-GError mapping
    
    Now we avoid to redefine the errno values.
    metautils: removes unreachable code
    
    Also removes unused macros and useless comments
    events: insulates module, adds beanstalkd implementation
    Dropped the dependency to the Linux's specific clock functions.
    metautils: mocks systematically allowed for syscalls
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Fixed several warnings appeared with recent GCC versions
    
    * improved printf format checks.
    * fixed formatting weaknesses
    * fixed "unmanaged results" in some functions.
    * fixed unused paramerers
    * tools: adds missing 'import syslog' in monitoring scripts.
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    OpenIO is lifting off now !
    metautils : socket_* functions names normalized
    
    Change-Id: Id0b227816c8067e99f0e6a104ac7b0b24c9fed69
    Merges the promoter's changes.
    
      * client/c: adapt rainx_remote for future use
      * Remove meta2_container_services from installed binaries in honeycomb.spec
      * cluster/lib : Fixed memory when there is no /etc/gridstorage.conf
      * m2v2: minor safety fix for chunk substitution
      * metautils / sockets : Fixed return code check.
    1.8.4 release candidate
    metautils: Remove unused code
    Add a unit test around the avoidance of the down peers
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Add a general trigger around the activiation of TFO
    
    TCP_FASTOPEN improved the behavior on small-to-medium loads but it seems
    to induce some side effects such an extra load when srongly stressing
    the services. Let's deactivate it by default and continue the job of
    improving out support.
    metautils: Add support for TCP_FASTOPEN
    events: insulates module, adds beanstalkd implementation
    metautils: unused code removed
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    OpenIO is lifting off now !
    metautils : socket_* functions names normalized
    
    Change-Id: Id0b227816c8067e99f0e6a104ac7b0b24c9fed69
    1.8.4 release candidate
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Replaced some deprecated symbols from GLib (g_memmove, G_MUTEX_INIT)
    Some hardcoded numbers replaced by the right macro.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    metautils: Remove a Kinetic strain
    metautils: Remove a B2 strain
    metautils: Remove unused code
    core: Merge TLS management with service_id
    
    oio_lb_item_s now contains new field. This new field is reused
    by oio_resolve_id
    Reorganize the libraries, Avoid a loop on the proxy
    Conscience: persist service locks
    
    Create a new 'tag.lock' tag telling is the service has been locked by an
    administrator. This tag is saved (with all other tags) in the conscience
    persistence file. After a restart, this file is loaded, and the services
    are locked (or unlocked) again.
    
    Jira: OS-349
    Use Service Id everywhere
    Core/lb: Associate UUID with addr
    srvinfo: Fix the parsing of indirect booleans
    metautils: fix service key generation from IP:PORT
    metautils: fix service key generation from IP:PORT
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core/lb: detect max_dist when loading services
    Remove unused/useless code
    metautils: Reduce the number of calls to realloc() and strlen()
    metautils/lb: prevents score overflow
    cli: add 'openio cluster unlockall' command
    core,m2: fix spare chunk requests
    metautils: fix parsing of tag.log
    lb,tools: "/24" notation for masks, new tool to compute locations
    core: add new LB options: mask_max_shift and nearby_mode
    cs,core,metautils: new services and LB configuration
    
    Rearrange service types configuration to make it more clear.
    Rearrange service pools configuration to add more options.
    Compute integer service location from dotted string location.
    Review storage policy and service pool configuration
    lb: remove g_alloca() from loops
    proxy: integrate new load balancer
    m2v2: integrate new load balancer
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    Benefits from optimized strcmp() when case sensitivity is not worth (#578)
    Useless/Unused functions removed
    metautils: unused code removed
    cluster: stat.io restored in service_info descriptions.
    
    In addition, useless/unused code has been removed.
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    metautils / srvinfo: fixed json parsing with partially specified objects
    
    Added missing sanity checks.
    json: latest function used (m2v2, proxy, metautils)
    conscience: renaming + pruning + reorg
    
    * conscience/agent remote functions have been renamed for more clarity
    * MACRO tags have been removed (usage too scarce and immutable, no need of something so flexible)
    * CPU/IO/SPACE computation moved from the oio-cluster-agent to libgridcluster
    * oio-cluster-agent is now now mandatory
    cluster, proxy: Fixes & Improvements
    
    * cluster / remote: cleaner and uniform interface, stripped code (+ dependencies adapted)
    * proxy: CLI option to disable the cache of services
    * proxy: management of services down, that are receive a lower priority
    * server: minor cleanups
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    better management of optional fields when parsing json.
    Fixed json parsing of service_info
    
    + Pretty formatting effort.
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    Some hardcoded numbers replaced by the right macro.
    metautils: STRLEN macro added, warning fixed.
    fixed sizes when declaring buffers.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    metautils : the parsing of (json) services now manages malformed addresses.
    OpenIO is lifting off now !
    Load-balancing cleanup.
    
    The starting point of this patch was allowing a caller (i.e. the metacd_http) to use an iterator different than those specified in the NS configuration. In other words, to thinly wrap the API.
    
    Some code reorganisation took place:
      - function reordering (to be grouped by puposes)
      - obsoletes removals (scored iterators ... meaningless since the score is the weight).
      - functions moved in others modules (checks on the storage class of services, moved into service_info)
      - code factorized (minor container handling, in metautils_containers)
    
    Change-Id: I625fd9413e0fa01d68d085f93160c026b9744c0f
    service_info unique key getter.
    
    First step of the plan toward services identified with a logical ID, instead of an IP:PORT couple.
    
    Change-Id: Iebd9484e53d20877ee5a16192d78e1feeba30dac
    Several fixes and improvements
    
    JSON fixed for service_info.
    Finer decache in resolver.
    m2v2_remote_touch_content fixed.
    m2v2 does not generates events when disabled.
    
    Change-Id: Ib145ba973ad7d9f3810c4c0fa4f30f1be1ff4639
    "Custom vs Standard" paths reviewed.
    
    json-c and rdkafka management now better taken into account.
    This allows compiling on a ubuntu server as weel as on a centos distribution.
    
    Change-Id: I1c8adf8ab213c2a7d4927fbbe1e031dc782792ea
    gridcluster tools now hide service tagged "internal" by default
    i.e. services with "tag.internal" set with something not equal to "false".
    These services could be shown with --show-internals or -a option.
    Empty services sections are now hidden.
    
    Change-Id: I2d98d939364d4f67c17f8586cc6878bb60fc8a74
    Fixes the JSON codec for service_info
    
    Change-Id: I9aa61e10dd85e12840fe4a6d4dda3419c0f2e95b
    Fix service_info JSON parser.
    
    Change-Id: I54562d5b8a7f5fd5aeb05e8779654e0048e57fe2
    JSON codec for service_info.
    
    Change-Id: Ib261332bd4a6ef5e392070505dc310908223fcb8
    JSON codec for service_info.
    
    Change-Id: I64b1b468c508672d6ed2e35f10f5b91849ccc21b
    1.8.4 release candidate
    Initial commit
    metautils: Remove unused code
    server: get server-side performance data
    
    Save some performance data in the thread local data. This is disabled by
    default, can be enabled for each service (even when the service is running)
    or per request.
    Performance data is printed at the end of access log messages.
    meta2: Allow to add delete marker to a specific version
    meta2: Allow to simulate versioning when creating and deleting an object
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    Update max_versions of container from header
    
    This commit introduce possibility to update max_versions when creating
    object:
    this is useful for container created through autocreate functionality:
    for Container Hierarchy, enabling versioning is set on root container,
    it is not possible to parse all container to update value and
    for performance, a dedicated request to update container is skipped
    (as a lot of upload may occurs at same time)
    
    If header `x-oio-force-versioning` is received,
    the max_versions is updated before completing
    object (to keep mecanism to delete prior object if needed)
    m1: resolve account and cname only when asked
    
    This is to avoid problems during migrations from pre 4.4.0 versions.
    Conscience: persist service locks
    
    Create a new 'tag.lock' tag telling is the service has been locked by an
    administrator. This tag is saved (with all other tags) in the conscience
    persistence file. After a restart, this file is loaded, and the services
    are locked (or unlocked) again.
    
    Jira: OS-349
    meta2: Recompute damaged objects count of a container
    Allow listing to be done on master service only
    
    For several operations, when a list is done just after an object
    deletion, the listing operation may occur on a slave which has not been
    synchronized yet.
    Remove mentions of the "user_is_a_service" tag.
    Update Copyright
    meta2: Recompute statistics of a container
    meta2: Increase missing chunks when creating an object
    meta2: Add User-Agent to the events
    meta2: Allow to change the policy of an object
    sqliterepo: Emit a MASTER flag in DB_USE
    Update the copyright
    proxy, meta2: Remove 'content/copy'
    Purge with a fixed number of versions
    Let transmit deadline in M2 rpc issued by the proxy
    Snapshot: Factorize code and add sequence number as a request paramater
    Container snapshot: fix small issues
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    oio-event-benchmark: Manage the redirections of events to the fake service
    Avoid filling the RPC with useless fields
    
    When the RPC mode is not set to "admin", don't tell "admin=false"
    because this is the default.
    Gather asn1.c header for further macro handlings
    proxy,metautils: fix indentation
    python: when reading, choose chunk with weighted random algo
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    metautils: removes unreachable code
    
    Also removes unused macros and useless comments
    Review storage policy and service pool configuration
    Implement metachunk replacement
    
    This will allow optimized random writes (to change 1 byte, you will
    have to download and reupload only 1 metachunk, not the whole content).
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    m2v2: adds ISEMPTY feature, fixes DESTROY
    
    * DESTROY is now only local and the event emission is explicitely asked by the client
    * ISEMPTY quickly checks if any chunk is present
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    m1: new option to prevent rdir and rawx on same location
    Doc effort.
    malloc_trim moved in a periodic task in sqlx_service
    
    * magic numbers replaced by macros (malloc_trim sizes)
    metautils: unused code removed
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    m{0,1,2}v2: shortened requests names
    sqlx: sds (direct) implementation now carries the execution counters.
    oio-sds/pc now built, relase and version now configurable.
    cluster: stat.io restored in service_info descriptions.
    
    In addition, useless/unused code has been removed.
    metautils: automates the message encoding of the new CONTENT field of the URLs
    proxy: V2.0 routes'es code removed, RDIR routes implemented
    obsolete code and macros removed
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    conscience: renaming + pruning + reorg
    
    * conscience/agent remote functions have been renamed for more clarity
    * MACRO tags have been removed (usage too scarce and immutable, no need of something so flexible)
    * CPU/IO/SPACE computation moved from the oio-cluster-agent to libgridcluster
    * oio-cluster-agent is now now mandatory
    cluster, proxy: Fixes & Improvements
    
    * cluster / remote: cleaner and uniform interface, stripped code (+ dependencies adapted)
    * proxy: CLI option to disable the cache of services
    * proxy: management of services down, that are receive a lower priority
    * server: minor cleanups
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    m2v2: firced pagination when listing contents.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Various fixes and improvements
    
    * metautils: now uses slice allocation
    * server: now uses slice allocation
    * sdk: ReqId, fixed missing headers
    proxy: add new routes and use headers
    
    New routes:
    We want clean and simple routes for interaction with dir/m2/sqlx APIs.
    
    New route format is '/v3.0/$NS/$api/$action'
    
    request parameters are now passed as query args.
    
    Example:
    for container creation:
    
        POST /v3.0/NS/container/create?acct=myaccount&ref=mycontainer
    
    With parameters as query args it is now easier to access API actions
    using optional parameters.
    This is especially useful when using the CID, example:
    
        POST /v3.0/NS/container/destroy?acct=myaccount&ref=4
    
        POST /v3.0/NS/container/destroy?cid=044B85A46CE9A1B256A1BD3D257B1ADBE2DD6FDFD7D6B33DE47AF23C9CD5C38D
    
    Simplified API names:
    m2 -> container & content
    dir -> reference
    sqlx -> admin
    
    Note: this is a proposal, we may change theÃmm.
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    Various improvements
    
    * global error codes added
      * special codes for missing accounts, users, containers
      * client adapted.
    * containers autocreation
      * enabled in m1v2 backend
      * exposed in m1v2 remote
      * exposed in proxy
    * C SDK output reviewed
      * minimal API exposed
      * error messages normalized
    * C SDK: upload extended with the autocreation (disabled by default).
    sdk: new feature to collect all the compile-time configuration variables.
    
    * Compile-time options gathered in metautils
    * SDK extended with a new function
    * new sds/oio_config tool to dump the config.
    * unused CMake directives and/or macros pruned.
    sdk: new feature to collect all the compile-time configuration variables.
    
    * Compile-time options gathered in metautils
    * SDK extended with a new function
    * new sds/oio_config tool to dump the config.
    m2v2: when listing a container's aliases, the container's metadata are also returned.
    
    In addition, unused code have been pruned from meta2.
    That code has been released with integrity-loop's removal.
    sdk: the SDK now make use of the proxy.
    
    Soon, that SDK will be a replacement for the old-style C API in ./client.
    Yet the download and the delete operations are performed without any intervention of the client.
    Still the upload has to be reimplemented.
    Fixed service push to the conscience + Cleanup, round 8
    
    * The last cleanup commit was named #6, but this was a mistke, there was already a #6.
    * Code factorized
    * Useless code removed
    * Codec functions simplified.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Centralized macros, shorter values.
    Minor code and macros factorisation
    Message handling functions refatored
    
    * Useless / unused functions removed.
    * Signatures more intuitive.
    * code factorized.
    Further step in account/user implementation.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    m2v2 + sqlx + proxy : set properties on contents and containers now manage a flush options and deletion by null value.
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    Content propeties reviewed + Cleanup, round 2
    Request-Id now managed in clients and servers
    
    * transmitted via a thread-local data
    * explicit ID eliminated from remote API (m2v2) + caller code adapted
    * in servers, collected from incoming requests, propagated to outgoing requests.
    * set to a random value when not set.
    OpenIO is lifting off now !
    m0v2,m1v2,m2v2,sqlx: get ZooKeeper addresses from conscience
    
    if none configured in /etc/gridstorage.conf
    
    Change-Id: I9de952111b13c07c775a0285724b738ff20f43f2
    gridcluster tools now hide service tagged "internal" by default
    i.e. services with "tag.internal" set with something not equal to "false".
    These services could be shown with --show-internals or -a option.
    Empty services sections are now hidden.
    
    Change-Id: I2d98d939364d4f67c17f8586cc6878bb60fc8a74
    gridagent: take tag.agent_check into account
    
    Change-Id: Id9ba402cbd20c6a32897c500f1cb2c6a2f20269c
    (cherry picked from commit 040462d526799fc1830ef76d34ee93a5ebac2660)
    remove default expression for solr's score.
    
    Change-Id: I249c845519f819bfd26f6416dd0153ecc5515b95
    1.8.4 release candidate
    metautils: Remove unused code
    Reorganize the libraries, Avoid a loop on the proxy
    Conscience: persist service locks
    
    Create a new 'tag.lock' tag telling is the service has been locked by an
    administrator. This tag is saved (with all other tags) in the conscience
    persistence file. After a restart, this file is loaded, and the services
    are locked (or unlocked) again.
    
    Jira: OS-349
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Remove unused/useless code
    core,m2: fix spare chunk requests
    Review storage policy and service pool configuration
    proxy: integrate new load balancer
    m2v2: integrate new load balancer
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    metautils: unused code removed
    cluster: stat.io restored in service_info descriptions.
    
    In addition, useless/unused code has been removed.
    conscience: renaming + pruning + reorg
    
    * conscience/agent remote functions have been renamed for more clarity
    * MACRO tags have been removed (usage too scarce and immutable, no need of something so flexible)
    * CPU/IO/SPACE computation moved from the oio-cluster-agent to libgridcluster
    * oio-cluster-agent is now now mandatory
    cluster, proxy: Fixes & Improvements
    
    * cluster / remote: cleaner and uniform interface, stripped code (+ dependencies adapted)
    * proxy: CLI option to disable the cache of services
    * proxy: management of services down, that are receive a lower priority
    * server: minor cleanups
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    4th cleanup, unused code purged from metautils
    OpenIO is lifting off now !
    Load-balancing cleanup.
    
    The starting point of this patch was allowing a caller (i.e. the metacd_http) to use an iterator different than those specified in the NS configuration. In other words, to thinly wrap the API.
    
    Some code reorganisation took place:
      - function reordering (to be grouped by puposes)
      - obsoletes removals (scored iterators ... meaningless since the score is the weight).
      - functions moved in others modules (checks on the storage class of services, moved into service_info)
      - code factorized (minor container handling, in metautils_containers)
    
    Change-Id: I625fd9413e0fa01d68d085f93160c026b9744c0f
    service_info unique key getter.
    
    First step of the plan toward services identified with a logical ID, instead of an IP:PORT couple.
    
    Change-Id: Iebd9484e53d20877ee5a16192d78e1feeba30dac
    gridcluster tools now hide service tagged "internal" by default
    i.e. services with "tag.internal" set with something not equal to "false".
    These services could be shown with --show-internals or -a option.
    Empty services sections are now hidden.
    
    Change-Id: I2d98d939364d4f67c17f8586cc6878bb60fc8a74
    JSON codec signature for service_info.
    
    Change-Id: Ia34be27ed505048efc146f63e0f1714f3e56f34f
    JSON codec for service_info.
    
    Change-Id: I64b1b468c508672d6ed2e35f10f5b91849ccc21b
    1.8.4 release candidate
    meta2: support use of ServiceId
    
    meta-server now support ServiceId option on command line
    (but it should be used only by meta2)
    metautils: fix spacing errors
    gridd_client: Rework some error messages
    Move gridd_client_exec_and_concat_string into proxy/
    
    The only place it is used
    metautils: fix "avoid" error transmission
    Adapt a gridd_client timeout with the th-local deadline
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo: Apply short connection timeouts for DB_REPLI requests
    metautils: Reduce the number of calls to realloc() and strlen()
    gridd_client: fix a memleak when errors occur
    
    Under certain circumstances, a GError is lost, when involded in a gridd_client
    that fails its action.
    
    (cherry picked from commit d1c50b7c3209133b1c884b0f55f44be8a29c6532)
    gridd_client: fix a memleak when errors occur
    
    Under certain circumstances, a GError is lost, when involded in a gridd_client
    that fails its action.
    metautils: removes unreachable code
    
    Also removes unused macros and useless comments
    metautils/gridd_client: memleak fixed
    Hook'able clock function now used everywhere
    metautils / client : fixed EINTR management when polling.
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    metautils / client : short timeout on TCP connection
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    Fixed service push to the conscience + Cleanup, round 8
    
    * The last cleanup commit was named #6, but this was a mistke, there was already a #6.
    * Code factorized
    * Useless code removed
    * Codec functions simplified.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Centralized macros, shorter values.
    Message handling functions refatored
    
    * Useless / unused functions removed.
    * Signatures more intuitive.
    * code factorized.
    metautils: fixed memory leaks when extracting message bodies.
    Slab allocation for small structures + ASN.1 message simplification
    metautils: fixed memory leaks when extracting message bodies.
    Slab allocation for small structures + ASN.1 message simplification
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Minor efficiency improvements.
    Several fixes around factorized code.
    Content propeties reviewed + Cleanup, round 2
    Get rid of an old rename trick born in redcurrant.
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    client: fix TO-HONEYCOMB-763 (too much errors when meta1 down)
    
    Client now retries on other meta1 instead of trying to create the container.
    Integrity loops tries other meta1 before moving chunks in lost+found.
    
    Also fix a bunch of memory leaks.
    
    Change-Id: Ie251cad03639fd4f03a3f3edee5c5762ad9142f6
    m2v2: enable/disable Kafka events from conscience conf
    
    and fix memory leaks and disable Kafka events for local bases
    
    To enable Kafka events from conscience configuration, for all namespaces:
      param_option.event_config.meta2 = kafka_enabled=true;kafka_topic=TOPIC
    
    To enable Kafka events from conscience configuration, for a namespace
    and all its virtual sub-namespaces:
      param_option.NAMESPACE_event_config.meta2 = kafka_enabled=true;kafka_topic=TOPIC
    
    kafka_topic is optional and defaults to "redc.meta2"
    
    Change-Id: I7ea1094e24e5029cfcad46c031db35ba99f2eb47
    metautils : mock added for gridd_client.
    
    Change-Id: Ifac60d14a6b2a831531611c334f78eff5fd3b6a1
    metautils: Remove unused code
    Python API: Retry listing when the service is busy
    metautils/client: Force slab allocation
    metautils,sqlx,tests: Get rid of the useless gridd_client_factory
    
    That pseudo object was never used!
    metautils/gridd_client: Remove useless pseudo-object
    metautils/client: Allow free(0x0) as a No-Op
    gridd_client: Simplify the pseudo-interface
    gridd_client: Rework some error messages
    metautils: Fix the avoidance of down peers
    gridd_client: Shortcut RPC toward down peers
    
    Can be triggered with global config variables.
    Adapt a gridd_client timeout with the th-local deadline
    Fix the gridd_client logic around net errors
    proxy: clarify EOF errors
    Fix printf formats
    
    Now buildable on arm32
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    metautils/gridd_client: Write using send(MSG_NOSIGNAL)
    metautils/gridd_client: Write using send(MSG_NOSIGNAL)
    metautils/gridd_client: fix second packet when using TCP_FASTOPEN
    metautils/gridd_client: Fix the management of trains of replies
    metautils/client: Trigger the TCP_FASTOPEN option
    Adapt the code to the central config
    metautils/gridd_client: Simplify the code and remove a useless message
    metautils: Don't touch the error message unless necessary
    metautils/gridd_client: Avoid faulty peers
    
    Allow the gridd_client to do it.
    metautils/gridd_client: Enbugs the timeout detection
    
    ... for testing purposes!
    metautils/gridd_client: Fix the expiration detection
    sqliterepo: Shorten the cnx timeout for USE and GETVERS requests
    
    From a default of 2s, use now 0.5s for GETVERS and 0.25s for USE.
    metautils: Reduce the number of calls to realloc() and strlen()
    gridd_client: fix a memleak when errors occur
    
    Under certain circumstances, a GError is lost, when involded in a gridd_client
    that fails its action.
    
    (cherry picked from commit d1c50b7c3209133b1c884b0f55f44be8a29c6532)
    gridd_client: fix a memleak when errors occur
    
    Under certain circumstances, a GError is lost, when involded in a gridd_client
    that fails its action.
    metautils/client: pauses when looping on redirections
    
    Loops might be legit, and happen when elections are reordering. We let
    the services get a final state with a little waiting (less than 1s for
    all the pauses).
    metautils: fixes a memleak when subsequent errors happen
    
    A pointer to a GError structure was lost
    metautils/gridd: honors total timeout during reconnections
    events: insulates module, adds beanstalkd implementation
    core: sets the default CNX timeout to 2s (instead of 1s).
    metautils/gridd_client: now works on the stack
    metautils/gridd_client: redirections simplified
    
    + So many checks were not necessary
    + Max number of redirections lowered
    metautils: unused code removed
    metautils/gridd_client: redirection error should not be modified
    gridd_client: minor feature added to forbid redirection (disabled by default)
    Hook'able clock function now used everywhere
    sqlx client : API proposal
    gridd_client: fixed timeout management
    Fixed warnings (unused symbols)
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    metautils / client : short timeout on TCP connection
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Various fixes and improvements
    
    * metautils: now uses slice allocation
    * server: now uses slice allocation
    * sdk: ReqId, fixed missing headers
    gridd_client: useless message removed
    Fixed formatting weaknesses.
    
    Sometimes, the use of variadic logging functions/macros used generated strings as formats.
    Those could lead to potential segfaults if the format contained unmatched parameters.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Message handling functions refatored
    
    * Useless / unused functions removed.
    * Signatures more intuitive.
    * code factorized.
    Slab allocation for small structures + ASN.1 message simplification
    Slab allocation for small structures + ASN.1 message simplification
    Request-Id now managed in clients and servers
    
    * transmitted via a thread-local data
    * explicit ID eliminated from remote API (m2v2) + caller code adapted
    * in servers, collected from incoming requests, propagated to outgoing requests.
    * set to a random value when not set.
    Get rid of an old rename trick born in redcurrant.
    OpenIO is lifting off now !
    Promoter's fixes now applied
    
    Change-Id: Ib7e69ae3f3dfdb70fe747ac7416b3a0bc5ea236c
    metautils : mock added for gridd_client.
    
    Change-Id: Ifac60d14a6b2a831531611c334f78eff5fd3b6a1
    1.8.4 release candidate
    Initial commit
    metautils: Remove unused code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    metautils: Reduce the number of calls to realloc() and strlen()
    core,m1: fix 'user_is_a_service' option handling (2)
    
    There was a problem with the location of the service for which
    the load-balancer was queried.
    metautils: removes unreachable code
    
    Also removes unused macros and useless comments
    m2v2: integrate new load balancer
    Benefits from optimized strcmp() when case sensitivity is not worth (#578)
    metautils: unused code removed
    metautils / svcc_policy: fixed memleak
    meta1: better functional tests result.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    metautils: unused code removed
    m2v2: code simplifications and memleaks fixes around namespace_info structures
    OpenIO is lifting off now !
    1.8.4 release candidate
    metautils: Remove unused code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    OpenIO is lifting off now !
    sqlx_service: an URL can now be announced, different from bind URL
    
    In addition, checks have been added on the URL provided.
    
    Change-Id: Ib21f8d07c2224385df2c515fc43a22e0cd5a415c
    1.8.4 release candidate
    metautils: Remove unused code
    meta2: parse chunk qualities, send event if required
    metautils: Factorize the logging of g_thread_pool_push() errors
    
    * Throttling (max 1 log / process / minute)
    * Factorized in metatuils
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    metautils: minor features additions
    
    Required further, be patient.
    OpenIO is lifting off now !
    Load-balancing cleanup.
    
    The starting point of this patch was allowing a caller (i.e. the metacd_http) to use an iterator different than those specified in the NS configuration. In other words, to thinly wrap the API.
    
    Some code reorganisation took place:
      - function reordering (to be grouped by puposes)
      - obsoletes removals (scored iterators ... meaningless since the score is the weight).
      - functions moved in others modules (checks on the storage class of services, moved into service_info)
      - code factorized (minor container handling, in metautils_containers)
    
    Change-Id: I625fd9413e0fa01d68d085f93160c026b9744c0f
    1.8.4 release candidate
    metautils: Remove unused code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core/log: removes (nearly) unused logging macros
    metautils,tests: fix LB location from IPv6, add tests
    lb: fix generation of locations from addresses and add tests
    m2v2: integrate new load balancer
    metautils: unused code removed
    Fixed compilation on x86_32
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    Dropped the dependency to the Linux's specific clock functions.
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Replaced some deprecated symbols from GLib (g_memmove, G_MUTEX_INIT)
    Content propeties reviewed + Cleanup, round 2
    OpenIO is lifting off now !
    sqlx_service: an URL can now be announced, different from bind URL
    
    In addition, checks have been added on the URL provided.
    
    Change-Id: Ib21f8d07c2224385df2c515fc43a22e0cd5a415c
    metautils : socket_* functions names normalized
    
    Change-Id: Id0b227816c8067e99f0e6a104ac7b0b24c9fed69
    1.8.4 release candidate
    Initial commit
    metautils: Remove unused code
    metautils/syscall: Avoid running useless testing code branches
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    conf: Move the FD limits in the central config
    metautils/gridd_client: Write using send(MSG_NOSIGNAL)
    metautils/gridd_client: Write using send(MSG_NOSIGNAL)
    metautils: mocks systematically allowed for syscalls
    OpenIO is lifting off now !
    1.8.4 release candidate
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Useless/Unused functions removed
    OpenIO is lifting off now !
    1.8.4 release candidate
    rawx: Fix the Affero header
    
    An odd mention to Lesser had been left
    rawx: add tag http or https
    
    With new feature to serve plain or TLS requests,
    we should be able to distinguish traffic on monitoring.
    
    This PR add field http or https on access logs.
    
    Jira: CUS-119
    rawx: Allow to turn the access logs off
    Backport changes of rawx
    Speedup the RAWX (#2017)
    
    * Better syslog usage
    * beanstalkd: Remove unused code, Avoid string to bytes conversions
    * beanstalkd: Parallelize on several beanstalkd connections
    * Help the GC, prevent escape to the heap
    * Lighter log management
    * Rename a config directive (tcp_keepalive -> http_keepalive, tcp_keepalive is now deprecated)
    * oio-rawxr-harass: allow to reuse the connections
    * Allow to turn events down (config)
    * Fix the open() flags used to just fsync
    * rawx: Centralize in the repo the logic around sync* flags
    rawx: Remove an unused function
    rawx: Fix the accesslog format of the golang rawx
    rawx: Add minor simplifications
    rawx: Send debug with the INFO syslog priority
    
    ... as we already do for other oio-sds services
    rawx: update log formats
    
    The ContainerID was missing in emitted log.
    Rename LogOutgoing to LogHttp and add bytes received for PUT method.
    
    Jira: OS-356
    rawx: Update copyright mentions
    rawx: Apply `go fmt`
    rawx: Ease the job of the GC
    
    * Use strings.Builder instead of Printf-like calls
    * Resize the {up,down]load buffer
    * Copy more data and use less pointers
    * Reduce the number of paranoÃd checks
    * Less string manglings
    rawx: Control the verbosity with the signals
    rawx: Log with different severity and different output
    rawx: Fix the Affero header
    
    An odd mention to Lesser had been left
    Backport changes of rawx
    Speedup the RAWX (#2017)
    
    * Better syslog usage
    * beanstalkd: Remove unused code, Avoid string to bytes conversions
    * beanstalkd: Parallelize on several beanstalkd connections
    * Help the GC, prevent escape to the heap
    * Lighter log management
    * Rename a config directive (tcp_keepalive -> http_keepalive, tcp_keepalive is now deprecated)
    * oio-rawxr-harass: allow to reuse the connections
    * Allow to turn events down (config)
    * Fix the open() flags used to just fsync
    * rawx: Centralize in the repo the logic around sync* flags
    rawx: Update copyright mentions
    rawx: Configure coverage
    rawx: Send correct stats and info
    rawx: Check chunk info
    rawx: Check chunk ID
    rawx: Draft a pure Go rawx
    rawx: Fix the Affero header
    
    An odd mention to Lesser had been left
    rawx: Apply go fmt
    rawx: Gather misc utilities
    Backport changes of rawx
    Speedup the RAWX (#2017)
    
    * Better syslog usage
    * beanstalkd: Remove unused code, Avoid string to bytes conversions
    * beanstalkd: Parallelize on several beanstalkd connections
    * Help the GC, prevent escape to the heap
    * Lighter log management
    * Rename a config directive (tcp_keepalive -> http_keepalive, tcp_keepalive is now deprecated)
    * oio-rawxr-harass: allow to reuse the connections
    * Allow to turn events down (config)
    * Fix the open() flags used to just fsync
    * rawx: Centralize in the repo the logic around sync* flags
    rawx: Add minor simplifications
    rawx: Update copyright mentions
    rawx: Apply `go fmt`
    rawx: Lighter check of hexa strings
    rawx: Check chunk info
    rawx: Check chunk ID
    rawx: Draft a pure Go rawx
    rawx: Code reorg + configurability
    rawx: Configure coverage
    rawx: Update CMakeLists
    rawx: Fix build process elements
    
    Detect the presence of Go and install the binary well
    rawx: Draft a pure Go rawx
    rawx: Fix the Affero header
    
    An odd mention to Lesser had been left
    rawx: add more logs when replying error
    rawx: Allow to turn the access logs off
    rawx: add initial support for TLS
    Backport changes of rawx
    Speedup the RAWX (#2017)
    
    * Better syslog usage
    * beanstalkd: Remove unused code, Avoid string to bytes conversions
    * beanstalkd: Parallelize on several beanstalkd connections
    * Help the GC, prevent escape to the heap
    * Lighter log management
    * Rename a config directive (tcp_keepalive -> http_keepalive, tcp_keepalive is now deprecated)
    * oio-rawxr-harass: allow to reuse the connections
    * Allow to turn events down (config)
    * Fix the open() flags used to just fsync
    * rawx: Centralize in the repo the logic around sync* flags
    rawx: Implement a buffer cache to avoid GC compliations
    rawx: Implement compression at rest
    rawx: Code reorg + configurability
    rawx: Add minor simplifications
    rawx: Fix the timeout management
    
    Also drop one dependency.
    rawx: limit ReqId to 63
    
    Also use x-oio-red-id in reply instead of deprecated x-trans-id
    rawx: Minor cosmetic refactoring
    
    Less redundancy with an idiomatic switch/case statement
    rawx: use const for some headers
    rawx: fix mispelled req-id header
    rawx: Less exported symbols
    rawx: Update copyright mentions
    rawx: remove superflous left /
    rawx: Ease the job of the GC
    
    * Use strings.Builder instead of Printf-like calls
    * Resize the {up,down]load buffer
    * Copy more data and use less pointers
    * Reduce the number of paranoÃd checks
    * Less string manglings
    rawx: Send correct stats and info
    rawx: Log with different severity and different output
    rawx: Linter
    rawx: Fix the range header
    rawx: Send events
    rawx: Separate the code about chunk info
    rawx: Return all the headers
    rawx: Check chunk info
    rawx: Check chunk ID
    rawx: Fix xattr/headers loading/saving
    rawx: Minor const/var clarification
    rawx: Remove a useless comment
    rawx: Misc fixes & reorg
    rawx: Draft a pure Go rawx
    rawx: Fix the Affero header
    
    An odd mention to Lesser had been left
    Backport changes of rawx
    Speedup the RAWX (#2017)
    
    * Better syslog usage
    * beanstalkd: Remove unused code, Avoid string to bytes conversions
    * beanstalkd: Parallelize on several beanstalkd connections
    * Help the GC, prevent escape to the heap
    * Lighter log management
    * Rename a config directive (tcp_keepalive -> http_keepalive, tcp_keepalive is now deprecated)
    * oio-rawxr-harass: allow to reuse the connections
    * Allow to turn events down (config)
    * Fix the open() flags used to just fsync
    * rawx: Centralize in the repo the logic around sync* flags
    rawx: More FD-based syscalls, Less buffer copies
    rawx: Less exported symbols
    rawx: Update copyright mentions
    rawx: Apply `go fmt`
    rawx: Ease the job of the GC
    
    * Use strings.Builder instead of Printf-like calls
    * Resize the {up,down]load buffer
    * Copy more data and use less pointers
    * Reduce the number of paranoÃd checks
    * Less string manglings
    rawx: Linter
    rawx: Typo
    rawx: Allow COPY
    rawx: Check chunk ID
    rawx: Misc fixes & reorg
    rawx: Remove a unused feature
    rawx: Draft a pure Go rawx
    rawx: Add more configuration
    rawx: Make the limits configurable
    rawx: Fix the Affero header
    
    An odd mention to Lesser had been left
    rawx: Apply go fmt
    rawx: Allow to turn the access logs off
    rawx: Trigger socket and file flags with options
    
    Now configurable
    rawx: add initial support for TLS
    Backport changes of rawx
    Speedup the RAWX (#2017)
    
    * Better syslog usage
    * beanstalkd: Remove unused code, Avoid string to bytes conversions
    * beanstalkd: Parallelize on several beanstalkd connections
    * Help the GC, prevent escape to the heap
    * Lighter log management
    * Rename a config directive (tcp_keepalive -> http_keepalive, tcp_keepalive is now deprecated)
    * oio-rawxr-harass: allow to reuse the connections
    * Allow to turn events down (config)
    * Fix the open() flags used to just fsync
    * rawx: Centralize in the repo the logic around sync* flags
    rawx: Implement compression at rest
    rawx: Allow fadvise() to be called upon UL/DL
    rawx: Code reorg + configurability
    rawx: Add more configuration
    rawx: Make the limits configurable
    rawx: expose GetBool
    rawx: Less exported symbols
    rawx: Update copyright mentions
    rawx: Add a missing copyright preamble
    rawx: Linter
    rawx: Load the service ID
    rawx: Read a configuration file
    
    Thanks to @vdombrovski
    rawx: Fix the Affero header
    
    An odd mention to Lesser had been left
    rawx: fix notifier URL parsing
    
    (cherry picked from commit 7df9e6764b1ec50b1e6caca54c6dc8b0042afa08)
    rawx: Fix the concurrency when multiple beanstalkd backends
    rawx: Fix unescaped special characters in JSON events
    
    Go back to the default JSON encoder
    rawx: fix notifier URL parsing
    rawx: Apply go fmt
    rawx: Review the notification architecture
    Backport changes of rawx
    Speedup the RAWX (#2017)
    
    * Better syslog usage
    * beanstalkd: Remove unused code, Avoid string to bytes conversions
    * beanstalkd: Parallelize on several beanstalkd connections
    * Help the GC, prevent escape to the heap
    * Lighter log management
    * Rename a config directive (tcp_keepalive -> http_keepalive, tcp_keepalive is now deprecated)
    * oio-rawxr-harass: allow to reuse the connections
    * Allow to turn events down (config)
    * Fix the open() flags used to just fsync
    * rawx: Centralize in the repo the logic around sync* flags
    rawx: Double the queue to the notifier (->8k)
    
    Helps with extreme loads of small ops, when a lot of notifications
    are sent.
    rawx: One less debug trace upon cnx error to beanstalkd
    rawx: Add minor simplifications
    rawx: Fix the exit of a virgin rawx
    
    A rawx that was never touch by any request exited with a segfault.
    rawx: Efficient GET
    
    Now uses sendfile() in downloads, every time it is possible.
    rawx: JSON-Encode paths in events
    rawx: Simplify the notification management
    
    Raw JSON generation is much lighter than the reflection-based
    implementation.
    rawx: Update copyright mentions
    rawx: Give a buffer to the channel of events
    rawx: Send events to the appropriate tube
    rawx: Implement beanstalkd client
    rawx: Log with different severity and different output
    rawx: Create worker to send events
    rawx: Linter
    rawx: Accept multi beanstalk
    rawx: Use event agent config to send events
    rawx: Send events
    rawx: Fix the Affero header
    
    An odd mention to Lesser had been left
    rawx: add tag http or https
    
    With new feature to serve plain or TLS requests,
    we should be able to distinguish traffic on monitoring.
    
    This PR add field http or https on access logs.
    
    Jira: CUS-119
    rawx: add more logs when replying error
    rawx: Allow to turn the access logs off
    rawx: Write the xattr before the last block
    rawx: log req.host instead of rawx.url
    
    It will be usefull to see requests using TLS or plain IP:PORT
    Backport changes of rawx
    Speedup the RAWX (#2017)
    
    * Better syslog usage
    * beanstalkd: Remove unused code, Avoid string to bytes conversions
    * beanstalkd: Parallelize on several beanstalkd connections
    * Help the GC, prevent escape to the heap
    * Lighter log management
    * Rename a config directive (tcp_keepalive -> http_keepalive, tcp_keepalive is now deprecated)
    * oio-rawxr-harass: allow to reuse the connections
    * Allow to turn events down (config)
    * Fix the open() flags used to just fsync
    * rawx: Centralize in the repo the logic around sync* flags
    rawx: Remove a useless statement
    rawx: Implement a buffer cache to avoid GC compliations
    Add reqid for rawx error
    rawx: Improve missing xattr error messages
    rawx: remove unwanted warning about ranges
    rawx: Implement compression at rest
    rawx: Code reorg + configurability
    rawx: Strengthen looping conditions when uploading
    rawx: Apply 'go fmt'
    rawx: Perform larger IO ops
    
    Attempt several large read() before a single packed write()
    rawx: Fix the accesslog format of the golang rawx
    rawx: Add minor simplifications
    rawx: Fix the timeout management
    
    Also drop one dependency.
    Go rawx: Be insensitive case to check the chunk hash
    rawx: Add a missing import
    rawx: fix buffer too small
    
    Add error logs for few error code path
    rawx: Efficient GET
    
    Now uses sendfile() in downloads, every time it is possible.
    rawx: Remove a redundant error trace
    rawx: Fix a typo
    rawx: Less useless error traces
    rawx: Use standard structures more often
    rawx: More FD-based syscalls, Less buffer copies
    rawx: use GetBool for header x-oio-check-hash
    rawx: check hash on HEAD method
    
    The check will only done if `x-oio-check-hash` is set.
    By default, the checksum will be compared against xattr chunk-hash.
    It is possible to compare with hash if `x-oio-chunk-meta-chunk-hash` header is set.
    
    In case of error while computing or differences of hash, we will return 412 error
    rawx: update log formats
    
    The ContainerID was missing in emitted log.
    Rename LogOutgoing to LogHttp and add bytes received for PUT method.
    
    Jira: OS-356
    rawx: Less exported symbols
    rawx: Less exported symbols
    rawx: Update copyright mentions
    rawx: Apply `go fmt`
    rawx: Load less xattr upon DELETE
    rawx: Ease the job of the GC
    
    * Use strings.Builder instead of Printf-like calls
    * Resize the {up,down]load buffer
    * Copy more data and use less pointers
    * Reduce the number of paranoÃd checks
    * Less string manglings
    rawx: Send 200 on HEAD request
    rawx: Reply the chunk hash and size when putting a chunk
    rawx: Notify the deleted chunks
    rawx: Return the total size in the Content-Range header
    rawx: Send correct stats and info
    rawx: Accept Range header
    rawx: Reply only 200 or 206 for GET requests
    rawx: Send xattr for the HEAD request
    rawx: Save chunk size
    rawx: Log with different severity and different output
    rawx: Create worker to send events
    rawx: Linter
    rawx: Accept multi beanstalk
    rawx: Discard request body before sending the error
    rawx: Fix the range header
    rawx: Send events
    rawx: Allow COPY
    rawx: Separate the code about chunk info
    rawx: Return all the headers
    rawx: Check checksum and size
    rawx: Check chunk info
    rawx: Check chunk ID
    rawx: Fix xattr/headers loading/saving
    rawx: Minor const/var clarification
    rawx: Fix the logic at the end of an upload
    rawx: Misc fixes & reorg
    rawx: Fix a reply format
    rawx: Fix the status for Range requests
    rawx: Reply a Content-Range header when a Range is requested
    rawx: Draft a pure Go rawx
    rawx: Fix the Affero header
    
    An odd mention to Lesser had been left
    rawx: add tag http or https
    
    With new feature to serve plain or TLS requests,
    we should be able to distinguish traffic on monitoring.
    
    This PR add field http or https on access logs.
    
    Jira: CUS-119
    rawx: add more logs when replying error
    rawx: log req.host instead of rawx.url
    
    It will be usefull to see requests using TLS or plain IP:PORT
    Backport changes of rawx
    Speedup the RAWX (#2017)
    
    * Better syslog usage
    * beanstalkd: Remove unused code, Avoid string to bytes conversions
    * beanstalkd: Parallelize on several beanstalkd connections
    * Help the GC, prevent escape to the heap
    * Lighter log management
    * Rename a config directive (tcp_keepalive -> http_keepalive, tcp_keepalive is now deprecated)
    * oio-rawxr-harass: allow to reuse the connections
    * Allow to turn events down (config)
    * Fix the open() flags used to just fsync
    * rawx: Centralize in the repo the logic around sync* flags
    rawx: Fix the accesslog format of the golang rawx
    rawx: Add minor simplifications
    rawx: Fix the timeout management
    
    Also drop one dependency.
    rawx: Lighter stat & info computation
    rawx: Update copyright mentions
    rawx: Send correct stats and info
    rawx: Allow COPY
    rawx: Misc fixes & reorg
    rawx: Read a configuration file
    
    Thanks to @vdombrovski
    rawx: Draft a pure Go rawx
    rawx: Fix the Affero header
    
    An odd mention to Lesser had been left
    Backport changes of rawx
    Speedup the RAWX (#2017)
    
    * Better syslog usage
    * beanstalkd: Remove unused code, Avoid string to bytes conversions
    * beanstalkd: Parallelize on several beanstalkd connections
    * Help the GC, prevent escape to the heap
    * Lighter log management
    * Rename a config directive (tcp_keepalive -> http_keepalive, tcp_keepalive is now deprecated)
    * oio-rawxr-harass: allow to reuse the connections
    * Allow to turn events down (config)
    * Fix the open() flags used to just fsync
    * rawx: Centralize in the repo the logic around sync* flags
    rawx: Implement a buffer cache to avoid GC compliations
    rawx: Update copyright mentions
    rawx: Configure coverage
    rawx: Send correct stats and info
    rawx: Check chunk info
    rawx: Check chunk ID
    rawx: Draft a pure Go rawx
    rawx: Fix the Affero header
    
    An odd mention to Lesser had been left
    rawx: Allow to turn the access logs off
    rawx: Trigger socket and file flags with options
    
    Now configurable
    rawx: don't use addr as service_id
    
    It will still used as `id` to lock the volume.
    rawx: add initial support for TLS
    Backport changes of rawx
    Speedup the RAWX (#2017)
    
    * Better syslog usage
    * beanstalkd: Remove unused code, Avoid string to bytes conversions
    * beanstalkd: Parallelize on several beanstalkd connections
    * Help the GC, prevent escape to the heap
    * Lighter log management
    * Rename a config directive (tcp_keepalive -> http_keepalive, tcp_keepalive is now deprecated)
    * oio-rawxr-harass: allow to reuse the connections
    * Allow to turn events down (config)
    * Fix the open() flags used to just fsync
    * rawx: Centralize in the repo the logic around sync* flags
    rawx: Avoid naked numbers, use const values instead.
    rawx: Implement a buffer cache to avoid GC compliations
    rawx: Implement compression at rest
    rawx: Fix a typo around fadvise() upon downloads
    rawx: Fix too short timeouts
    rawx: Allow fadvise() to be called upon UL/DL
    rawx: Code reorg + configurability
    rawx: Fix format with missing parameters
    rawx: Add more configuration
    rawx: Make the limits configurable
    rawx: Add minor simplifications
    rawx: Fix the timeout management
    
    Also drop one dependency.
    rawx: Less exported symbols
    rawx: Less exported symbols
    rawx: Update copyright mentions
    rawx: remove unused formatting directive
    rawx: Ease the job of the GC
    
    * Use strings.Builder instead of Printf-like calls
    * Resize the {up,down]load buffer
    * Copy more data and use less pointers
    * Reduce the number of paranoÃd checks
    * Less string manglings
    rawx: Implement beanstalkd client
    rawx: Configure coverage
    rawx: Expect service ID as host for COPY request
    rawx: Send correct stats and info
    rawx: Create option to disable volume lock
    rawx: Control the verbosity with the signals
    rawx: Log with different severity and different output
    rawx: Create worker to send events
    rawx: Linter
    rawx: Use event agent config to send events
    rawx: Read config
    rawx: Delete the duplicate code
    rawx: Send events
    rawx: Misc fixes & reorg
    rawx: Lock the volume with the service ID
    
    Fallback on the service address if not ID configured
    rawx: Load the service ID
    rawx: Remove an annoying trace
    rawx: Read a configuration file
    
    Thanks to @vdombrovski
    rawx: Draft a pure Go rawx
    rawx: Fix the Affero header
    
    An odd mention to Lesser had been left
    rawx: Trigger socket and file flags with options
    
    Now configurable
    Backport changes of rawx
    Speedup the RAWX (#2017)
    
    * Better syslog usage
    * beanstalkd: Remove unused code, Avoid string to bytes conversions
    * beanstalkd: Parallelize on several beanstalkd connections
    * Help the GC, prevent escape to the heap
    * Lighter log management
    * Rename a config directive (tcp_keepalive -> http_keepalive, tcp_keepalive is now deprecated)
    * oio-rawxr-harass: allow to reuse the connections
    * Allow to turn events down (config)
    * Fix the open() flags used to just fsync
    * rawx: Centralize in the repo the logic around sync* flags
    rawx: Implement a buffer cache to avoid GC compliations
    rawx: Implement compression at rest
    rawx: Use more standard packages for IO
    rawx: Normalize all the flags given at open()
    rawx: Fix a typo around fadvise() upon downloads
    rawx: Allow fadvise() to be called upon UL/DL
    rawx: Code reorg + configurability
    rawx: Use lighter flags when opening the base directory
    Go rawx: Be insensitive case to check the chunk hash
    rawx: try to fix chunk checking function
    rawx: Efficient GET
    
    Now uses sendfile() in downloads, every time it is possible.
    rawx: More FD-based syscalls, Less buffer copies
    rawx: check hash on HEAD method
    
    The check will only done if `x-oio-check-hash` is set.
    By default, the checksum will be compared against xattr chunk-hash.
    It is possible to compare with hash if `x-oio-chunk-meta-chunk-hash` header is set.
    
    In case of error while computing or differences of hash, we will return 412 error
    rawx: Less exported symbols
    rawx: Update copyright mentions
    rawx: Apply `go fmt`
    rawx: Ease the job of the GC
    
    * Use strings.Builder instead of Printf-like calls
    * Resize the {up,down]load buffer
    * Copy more data and use less pointers
    * Reduce the number of paranoÃd checks
    * Less string manglings
    rawx: Read long xattr value
    rawx: Log with different severity and different output
    rawx: Linter
    rawx: Send events
    rawx: Remove fullpath when deleting a chunk
    rawx: Allow COPY
    rawx: Minor code simplification
    rawx: Misc fixes & reorg
    rawx: Fix the xattr-lock keys
    rawx: Read a configuration file
    
    Thanks to @vdombrovski
    rawx: Draft a pure Go rawx
    rawx: Fix the Affero header
    
    An odd mention to Lesser had been left
    rawx: Allow to turn the access logs off
    rawx: Avoid O_NONBLOCK on files by default
    rawx: Trigger socket and file flags with options
    
    Now configurable
    Backport changes of rawx
    Speedup the RAWX (#2017)
    
    * Better syslog usage
    * beanstalkd: Remove unused code, Avoid string to bytes conversions
    * beanstalkd: Parallelize on several beanstalkd connections
    * Help the GC, prevent escape to the heap
    * Lighter log management
    * Rename a config directive (tcp_keepalive -> http_keepalive, tcp_keepalive is now deprecated)
    * oio-rawxr-harass: allow to reuse the connections
    * Allow to turn events down (config)
    * Fix the open() flags used to just fsync
    * rawx: Centralize in the repo the logic around sync* flags
    rawx: Avoid naked numbers, use const values instead.
    rawx: Implement a buffer cache to avoid GC compliations
    rawx: ignore errors for few xattr
    
    When a chunk is uploaded in other storage_policy than EC,
    the metachunk-size and metachunk-hash is no sent by client.
    
    When rawx read this chunk, it complains about missing xattr.
    
    This PR will ignore only these xattr.
    rawx: Implement compression at rest
    rawx: Disable fallocate() by default
    
    To be iso rawx-httpd
    rawx: Use more standard packages for IO
    rawx: Fix a typo around fadvise() upon downloads
    rawx: Reduce the size of default pre-allocation sizes
    rawx: Fix too short timeouts
    rawx: Allow fadvise() to be called upon UL/DL
    rawx: Code reorg + configurability
    rawx: Fix the Affero header
    
    An odd mention to Lesser had been left
    Backport changes of rawx
    Speedup the RAWX (#2017)
    
    * Better syslog usage
    * beanstalkd: Remove unused code, Avoid string to bytes conversions
    * beanstalkd: Parallelize on several beanstalkd connections
    * Help the GC, prevent escape to the heap
    * Lighter log management
    * Rename a config directive (tcp_keepalive -> http_keepalive, tcp_keepalive is now deprecated)
    * oio-rawxr-harass: allow to reuse the connections
    * Allow to turn events down (config)
    * Fix the open() flags used to just fsync
    * rawx: Centralize in the repo the logic around sync* flags
    rawx: Implement a buffer cache to avoid GC compliations
    rawx: ignore errors for few xattr
    
    When a chunk is uploaded in other storage_policy than EC,
    the metachunk-size and metachunk-hash is no sent by client.
    
    When rawx read this chunk, it complains about missing xattr.
    
    This PR will ignore only these xattr.
    rawx: fix behavior when chunk size attr is missing (again)
    rawx: fix behavior when chunk size attr is missing
    rawx: Improve missing xattr error messages
    rawx: Implement compression at rest
    rawx: Code reorg + configurability
    rawx: fix buffer too small
    
    Add error logs for few error code path
    rawx: Efficient GET
    
    Now uses sendfile() in downloads, every time it is possible.
    rawx: Reduce the verbosity of an annoying trace
    rawx: Use standard structures more often
    rawx: More FD-based syscalls, Less buffer copies
    rawx: manage case of missing ContentID
    rawx: Less exported symbols
    rawx: Update copyright mentions
    rawx: Apply `go fmt`
    rawx: Load less xattr upon DELETE
    Go rawx: Allow to read old chunk
    rawx: Reply the chunk hash and size when putting a chunk
    rawx: Expect service ID as host for COPY request
    rawx: Escape and unescape content path
    rawx: Save chunk size
    rawx: Log with different severity and different output
    rawx: Linter
    rawx: Send events
    rawx: Allow COPY
    rawx: Separate the code about chunk info
    rawx: Fix the Affero header
    
    An odd mention to Lesser had been left
    rawx: Review the notification architecture
    Backport changes of rawx
    Speedup the RAWX (#2017)
    
    * Better syslog usage
    * beanstalkd: Remove unused code, Avoid string to bytes conversions
    * beanstalkd: Parallelize on several beanstalkd connections
    * Help the GC, prevent escape to the heap
    * Lighter log management
    * Rename a config directive (tcp_keepalive -> http_keepalive, tcp_keepalive is now deprecated)
    * oio-rawxr-harass: allow to reuse the connections
    * Allow to turn events down (config)
    * Fix the open() flags used to just fsync
    * rawx: Centralize in the repo the logic around sync* flags
    rawx: Fix the exit of a virgin rawx
    
    A rawx that was never touch by any request exited with a segfault.
    rawx: Minor simplification
    
    Less exported symbols
    rawx: Update copyright mentions
    rawx: Apply `go fmt`
    rawx: Lighter memory mgmt around beanstalk calls
    rawx: Implement beanstalkd client
    rawx: Fix the Affero header
    
    An odd mention to Lesser had been left
    Backport changes of rawx
    Speedup the RAWX (#2017)
    
    * Better syslog usage
    * beanstalkd: Remove unused code, Avoid string to bytes conversions
    * beanstalkd: Parallelize on several beanstalkd connections
    * Help the GC, prevent escape to the heap
    * Lighter log management
    * Rename a config directive (tcp_keepalive -> http_keepalive, tcp_keepalive is now deprecated)
    * oio-rawxr-harass: allow to reuse the connections
    * Allow to turn events down (config)
    * Fix the open() flags used to just fsync
    * rawx: Centralize in the repo the logic around sync* flags
    rawx: Code reorg + configurability
    rawx: Add minor simplifications
    rawx: Update copyright mentions
    rawx: Log with different severity and different output
    rawx: Linter
    rawx: Read config
    rawx: Fix the Affero header
    
    An odd mention to Lesser had been left
    rawx: add initial support for TLS
    Backport changes of rawx
    Speedup the RAWX (#2017)
    
    * Better syslog usage
    * beanstalkd: Remove unused code, Avoid string to bytes conversions
    * beanstalkd: Parallelize on several beanstalkd connections
    * Help the GC, prevent escape to the heap
    * Lighter log management
    * Rename a config directive (tcp_keepalive -> http_keepalive, tcp_keepalive is now deprecated)
    * oio-rawxr-harass: allow to reuse the connections
    * Allow to turn events down (config)
    * Fix the open() flags used to just fsync
    * rawx: Centralize in the repo the logic around sync* flags
    rawx: Implement compression at rest
    rawx: Code reorg + configurability
    Go rawx: Be insensitive case to check the chunk hash
    rawx: Efficient GET
    
    Now uses sendfile() in downloads, every time it is possible.
    rawx: More FD-based syscalls, Less buffer copies
    rawx: check hash on HEAD method
    
    The check will only done if `x-oio-check-hash` is set.
    By default, the checksum will be compared against xattr chunk-hash.
    It is possible to compare with hash if `x-oio-chunk-meta-chunk-hash` header is set.
    
    In case of error while computing or differences of hash, we will return 412 error
    rawx: Less exported symbols
    rawx: Update copyright mentions
    rawx: Ease the job of the GC
    
    * Use strings.Builder instead of Printf-like calls
    * Resize the {up,down]load buffer
    * Copy more data and use less pointers
    * Reduce the number of paranoÃd checks
    * Less string manglings
    rawx: Allow COPY
    rawx: Minor const/var clarification
    rawx: Declare a new attribute/header
    rawx: Draft a pure Go rawx
    rawx: Fix the Affero header
    
    An odd mention to Lesser had been left
    Backport changes of rawx
    Speedup the RAWX (#2017)
    
    * Better syslog usage
    * beanstalkd: Remove unused code, Avoid string to bytes conversions
    * beanstalkd: Parallelize on several beanstalkd connections
    * Help the GC, prevent escape to the heap
    * Lighter log management
    * Rename a config directive (tcp_keepalive -> http_keepalive, tcp_keepalive is now deprecated)
    * oio-rawxr-harass: allow to reuse the connections
    * Allow to turn events down (config)
    * Fix the open() flags used to just fsync
    * rawx: Centralize in the repo the logic around sync* flags
    rawx: Implement compression at rest
    rawx: Code reorg + configurability
    Go rawx: Be insensitive case to check the chunk hash
    rawx: Efficient GET
    
    Now uses sendfile() in downloads, every time it is possible.
    rawx: More FD-based syscalls, Less buffer copies
    rawx: check hash on HEAD method
    
    The check will only done if `x-oio-check-hash` is set.
    By default, the checksum will be compared against xattr chunk-hash.
    It is possible to compare with hash if `x-oio-chunk-meta-chunk-hash` header is set.
    
    In case of error while computing or differences of hash, we will return 412 error
    rawx: Less exported symbols
    rawx: Update copyright mentions
    rawx: Ease the job of the GC
    
    * Use strings.Builder instead of Printf-like calls
    * Resize the {up,down]load buffer
    * Copy more data and use less pointers
    * Reduce the number of paranoÃd checks
    * Less string manglings
    rawx: Allow COPY
    rawx: Minor const/var clarification
    rawx: Declare a new attribute/header
    rawx: Draft a pure Go rawx
    rawx: Fix the Affero header
    
    An odd mention to Lesser had been left
    rawx: add tag http or https
    
    With new feature to serve plain or TLS requests,
    we should be able to distinguish traffic on monitoring.
    
    This PR add field http or https on access logs.
    
    Jira: CUS-119
    rawx: add more logs when replying error
    rawx: log req.host instead of rawx.url
    
    It will be usefull to see requests using TLS or plain IP:PORT
    rawx: add initial support for TLS
    Backport changes of rawx
    Speedup the RAWX (#2017)
    
    * Better syslog usage
    * beanstalkd: Remove unused code, Avoid string to bytes conversions
    * beanstalkd: Parallelize on several beanstalkd connections
    * Help the GC, prevent escape to the heap
    * Lighter log management
    * Rename a config directive (tcp_keepalive -> http_keepalive, tcp_keepalive is now deprecated)
    * oio-rawxr-harass: allow to reuse the connections
    * Allow to turn events down (config)
    * Fix the open() flags used to just fsync
    * rawx: Centralize in the repo the logic around sync* flags
    rawx: Fix the accesslog format of the golang rawx
    rawx: Add minor simplifications
    rawx: Fix the timeout management
    
    Also drop one dependency.
    rawx: Lighter stat & info computation
    rawx: Update copyright mentions
    rawx: Send correct stats and info
    rawx: Check chunk info
    rawx: Check chunk ID
    rawx: Draft a pure Go rawx
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    tests: Adapt the test for rawx v2
    blob-auditor: Adapt to the compression in the rawx
    
    F*ck, the auditor accesses the chunks without passing through the rawx.
    This is a bad idea, shortcuts are bad ideas, we must respect APIs
    tests: spawn a logger instance for each test
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Solve some python3 errors in the tests
    Update test suite to make it compatible with py3
    
    This commit introduce changes in the test suite and potentially changes
    in the programming interface of each function. It should be treated with
    caution.
    Python API: fix request ID header name
    CLI: fix container list with non-ASCII characters
    Make some tests more reliable
    Make some tests more reliable
    lb: fix distance for chunks close to proxy
    test: Verify events emission when deleting container
    test: Deregister specific services
    Tests: Move strange_paths to tests/utils
    Test the versioning simulation
    Fix tests waiting specific events
    
    wait_for_event method has now new parameters to be more
    specifiq on event wanted.
    Events consumed by this method will now be logged to allow
    investigation.
    
    (cherry picked from commit 43a7e56685280c2665349c41e051ae34f78e232d)
    tests: increase some timeouts to make tests less flaky
    Fix tests waiting specific events
    
    wait_for_event method has now new parameters to be more
    specifiq on event wanted.
    Events consumed by this method will now be logged to allow
    investigation.
    tests: implement a facility to wait for a specific event
    
    Event can be specified by type and/or request ID.
    tests: try to make some tests more reliable
    Python API: fix warning at yaml loading
    
    This is more a workaround than a fix. The real fix requires a more
    recent version of PyYaml.
    tests: implement test facilities for openio-admin commands
    tests: implement test facilities for openio-admin commands
    Python API: use REQID_HEADER constant everywhere
    tests: disable meta2 repli tests
    
    Add a log when wait_for_score fails
    tests: make service management easier
    tests: new tests for oio-blob-improver
    tests: factorize rawx type detection code
    Test old xattr
    oio-meta2-indexer, Python API: add a new meta2 indexing utility
    
    - Add a new wrapper to list all meta2 records indexed for a volume.
    - Add new meta2 indexing tool, sample conf and tests.
    tests: speedup some tests
    Python API: tolerate meta1 errors during 'volume admin bootstrap'
    
    Fix #1447
    Before this commit, a single meta1 failure was preventing the operation
    to continue. Also, 'volume assignation' command did not return any
    result.
    tests/functional: Skip 3 test cases on public CI
    
    * some test_container_backup.py cases are buggy and/or unstable
    * test_cluster_wait is too long to run often.
    tests: fix python test
    Make some functional tests more reliable
    Python API: add documentation, ensure a request ID is sent
    tests/utils.py: Insulate a test base with no impact on the conscience
    
    Avoids calling the conscience when not even mentionned in the test
    cases.
    common/http: Split to reduce dependencies
    common/utils: Split to reduce dependencies
    Tests: Replace `requests` by `urllib3`
    tests/cs: Accept no reply from the proxy when locking services
    Revert "tests/cs: Accept no reply from the proxy when locking services"
    
    This reverts commit dbf788455b9fba4712c34ee49392a16445a94da4.
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    tests/cs: Accept no reply from the proxy when locking services
    tests/cs: Accept no reply from the proxy when locking services
    Fix randomly failing Python LB tests
    tests: refactor cli tests
    Speed up random data generation during tests
    tests: new call to reload the proxy's LB
    tests: removes useless sleep
    lb: fix generation of locations from addresses and add tests
    tests/func: starts to generate random user names
    tests: add skips on some configuration
    lb: add functional tests
    review rdir and add metachunk_hash
    
    * get rid of useless metadata
    * add random in tests
    bootstrap: review config input
    core: move python files around
    python,tests: sleep 12s after flushing proxy's cache
    python,tests: sleep 12s after flushing proxy's cache
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    python/tests: wait for service cache to reload after flushing it
    
    This should fix some tests relying on proxy's load balancer.
    Improve test configuration to allow more tricky tests
    proxy: 'forward' modified to propose the 'stats' request
    
    + tests modified to take this evolution into account
    python: tests adapted to v3 proxy routes
    python: tests on containers partially updated
    python: fixed func tests on containers
    python: fixed functional tests
    fix tmp fixtures & func tests setUp/teardown
    refactor functional tests config loading
    tests: refactor cli tests
    cli: add more functional tests
    cli: add basic functional tests
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    tests: fix crawler tests when run with Python 3
    Minor fixes for Python 3
    
    Fixup remaing print keyword
    Use six to import StringIO
    Python API: Delete useless function
    Update the copyright
    rawx: Check content fullpath
    tests: fix rdir termination and storage tierer tests
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    CLI: Manage import (#1098)
    Rawx: make it more robust against strange path
    Rawx: Add xattr oio_version and full_path
    
    Modify the client to send the header X-oio-chunk-meta-full-path:Acct/Container/Name
    Convert the header to the xattr oio.user:Acct/Container/Name=""
    tests: try to fix container listing
    tests: try to fix container listing
    Python API: merge GeneratorReader and GeneratorIO classes
    tests: adapt to the last code reorganization
    migrate plain tests to use "unified" python API
    bootstrap: review config input
    core: move python files around
    python/crawler/storage tiering: add crawler to change storage policy of old contents
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    tests: fix crawler tests when run with Python 3
    Make some tests more reliable
    test: Verify events emission when deleting container
    oio-crawler-integrity: send broken object events
    
    Send broken object events to a user-selected queue, for exemple the
    input queue of oio-blob-rebuilder. It is advised to also specify a delay
    before sending events, otherwise temporary failures may trigger unwanted
    chunk rebuilds.
    oio-crawler-integrity: test rebuilder-input
    account,CLI: implement a bucket listing command
    
    Jira: OB-501
    Python API, tests: another batch of python3 conversions
    CLI: Return 1 if part of the command failed
    Speed up the tests of 'openio-admin <item> check'
    tests: Allow command to fail
    tests: implement test facilities for openio-admin commands
    tests: implement test facilities for openio-admin commands
    Admin CLI: Test 'container move'
    CLI: allow to override defaut flatns
    tests: improve object listing related CLI tests
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    tests: refactor cli tests
    cli: add basic functional tests
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    CLI: Load small client
    merge python client api from oiopy into core
    
    integrate CLI
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    Enable TLS in functional tests
    add test for TLS support
    Python API, tests: another batch of python3 conversions
    CI: enable python3 unit tests
    
    Jira: R1910-1
    tests: make autocontainer tests more reliable
    
    The test triggers several requests in parallel, but in some
    environments, only 4 simultaneous requests were allowed in a meta2
    service. Now, in case of request denial, the tested command will retry.
    tests: make autocontainer tests more reliable
    
    The test triggers several requests in parallel, but in some
    environments, only 4 simultaneous requests were allowed in a meta2
    service. Now, in case of request denial, the tested command will retry.
    tests: improve autocontainer listing checks
    Test the stats of damaged objects
    Update Copyright
    account: Save the missing chunks by account and container
    Python API: Flush properties of an object
    meta2: Keep the same ctime if the object already exists
    CLI: allow to override defaut flatns
    Fix formatting issue and tests
    Allow CID for object and container commands
    tests: fix flake8 warnings
    Add command to use object_link on CLI
    CLI: display status in 'container show' and 'container locate'
    CLI: Load small client
    ContainerClient: fix drain content status code
    
    Add tests to detect drain on nonexistent content.
    Add tests to the CLI for the command drain.
    Test: remove left behind print
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    cli: organize imports, add versioning options
    proxy: Add bulk delete content
    
    Permit to delete many content in one go for one container.
    Modify the format of cli command 'openio object delete' to return a List.Lister.
    Modify tests that depended on the old format response to use the new one.
    
    The format of a request to the proxy is a json '{"contents":[{"name":"..."},{"name":"..."}]}'
    and the url is /content/delete_many.
    The format of the answer is a json '{"contents":[{"name":"...", "status":"...", "message":"..."}]}'
    tests: refactor cli tests
    proxy: Add bulk delete content
    
    Permit to delete many content in one go for one container.
    Modify the format of cli command 'openio object delete' to return a List.Lister.
    Modify tests that depended on the old format response to use the new one.
    
    The format of a request to the proxy is a json '{"contents":[{"name":"..."},{"name":"..."}]}'
    and the url is /content/delete_many.
    The format of the answer is a json '{"contents":[{"name":"...", "status":"...", "message":"..."}]}'
    cli: allow to set quota and storage policy (fix #727, fix #737)
    test/func: manages CLI with autocontainer
    tests/: functionally tests multiple uploads with the CLI
    cli: add object count and stgpol in `container show` (fix #725)
    cli: add more functional tests
    cli: add basic functional tests
    Add some tests for `openio-admin <item> locate`
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    Add some tests for 'openio-admin <service> {g,s}et-config'
    CLI: test 'meta2 list containers' and 'rawx list containers'
    Add some tests for 'openio-admin account-service rebuild'
    Add some tests for 'openio-admin <service> {g,s}et-config'
    tests: Allow command to fail
    Admin CLI: Use common mixin
    Admin CLI: Fail if there is at least one error
    CLI: implement get-config and set-config commands
    
    These commands allow get/set ephemeral configuration parameters on the
    service.
    Admin CLI: Test 'container move'
    Admin CLI: Test 'container move'
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    Admin CLI: Add column 'Errors' when the command lists items
    CLI: implement get-config and set-config commands
    
    These commands allow get/set ephemeral configuration parameters on the
    service.
    CLI: implement 'openio-admin service decache' commands
    CI: enable python3 unit tests
    
    Jira: R1910-1
    oio-crawler-integrity: report missing chunk positions
    
    Missing chunk positions were reported on the standard log, but not in
    output files. This is now fixed.
    
    Also, check the number of chunks against the quorum before reporting
    errors, such that missing chunks are potentially reported as
    irreparable (and not uselessly sent to the blob-rebuilder).
    Speed up the tests of 'openio-admin <item> check'
    Test 'openio-admin chunk check'
    Test 'openio-admin object check'
    Test 'openio-admin container check'
    Test 'openio-admin account check'
    oio-crawler-integrity: report missing chunk positions
    
    Missing chunk positions were reported on the standard log, but not in
    output files. This is now fixed.
    
    Also, check the number of chunks against the quorum before reporting
    errors, such that missing chunks are potentially reported as
    irreparable (and not uselessly sent to the blob-rebuilder).
    Test 'openio-admin chunk rebuild'
    Test 'openio-admin container repair'
    CLI: Load small client
    merge python client api from oiopy into core
    
    integrate CLI
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    CLI: Return 1 if part of the command failed
    proxy: Send 503 when the service types are not yet loaded
    test/cluster: Avoid the pollution of earlier tests
    test: Do not rely on a score level, it varies with the load
    CLI: document volume subcommands
    Use Service Id everywhere
    CLI: Load small client
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    CLI: Add tests for cluster and account
    proxy: make command lock/unlock check type of the service (fix #822)
    
    We cannot check if the service is valid, so invalid services will still be
    accepted. But unknown service types to the proxy at the time of the request
    will be rejected.
    tests: refactor cli tests
    proxy: make command lock/unlock check type of the service (fix #822)
    
    We cannot check if the service is valid, so invalid services will still be
    accepted. But unknown service types to the proxy at the time of the request
    will be rejected.
    cli: add more functional tests
    CLI: allow to set a bucket name on an already created container
    
    Implement the --bucket-name parameter for 'openio container set' and
    'openio container unset' commands.
    
    Jira: OB-572
    CI: Test bucket refresh
    tests: check bucket list with versioning
    account: allow to set bucket metadata
    account,CLI: implement 'bucket show' command
    account,CLI: implement a bucket listing command
    
    Jira: OB-501
    sqliterepo: fix the snapshot feature
    CI: enable python3 unit tests
    
    Jira: R1910-1
    CLI: fix container list with non-ASCII characters
    Make some tests more reliable
    Python API: Flush properties of an object
    tests: Fix flake8 warnings
    Fix formatting issue and tests
    Update tests
    Allow CID for object and container commands
    tests: fix flake8 warnings
    Add option to set container status
    Test --quickly option
    Python API: Add command to flush container
    Add container purge tests
    Snapshots: rename meaningless variables and parameters
    Container snapshot: fix small issues
    Add container snapshot
    
    The snapshot take the form of:
    -A copy of the sqlite base of the target to a meta2 chose by the load balancer.
    -All the chunks of the snapshot are replaced by new chunk that hardlink the target one.
    -The snapshot is frozen afterward.
    
    The chunks hardlink implies that the target and the snapshot chunks are in the same rawx.
    Currently it is the client that freeze and enable the containers during the snapshot.
    CLI: Load small client
    CLI: Make 'account/container show' human readable
    
    close #1140
    oio-account-server: Extend the openio CLI tool
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    tests: refactor cli tests
    cli: add basic functional tests
    CLI: Load small client
    merge python client api from oiopy into core
    
    integrate CLI
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    Enable or disable replication for each bucket
    
    Implement a new event-agent plugin that will query the account service
    to know if a container must be replicated.
    
    Jira: OB-477
    account,CLI: implement a bucket listing command
    
    Jira: OB-501
    Test the stats of damaged objects
    account: Save the damaged objects count by account and container
    account: Rename missing-chunks to missing_chunks
    Update Copyright
    account: Save the missing chunks by account and container
    tests: Fix flake8 warnings
    CLI: Load small client
    CLI: Make 'account/container show' human readable
    
    close #1140
    oio-account-server: Extend the openio CLI tool
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    CLI: Add tests for cluster and account
    tests: refactor cli tests
    cli: add more functional tests
    CLI: Load small client
    merge python client api from oiopy into core
    
    integrate CLI
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    CLI: implement 'openio election leave' subcommand
    CLI: add timeout option to election subcommands
     CLI: Add commands to debug elections
    common/utils: Split to reduce dependencies
     CLI: Add commands to debug elections
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    CLI: Load small client
    merge python client api from oiopy into core
    
    integrate CLI
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    Update the python requirements
    CLI: Load small client
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    tests: refactor cli tests
    cli: add more functional tests
    CI: enable python3 unit tests
    
    Jira: R1910-1
    lifecycle: fix parsing when an XML namespace is provided
    lifecycle: Save a random ID if there is no ID in the configuration
    lifecycle: Format configuration
    lifecycle: Apply Date only on the objects created before this date
    lifecycle: Update the tests
    CLI: Allow to set S3 tags
    lifecycle: Test the filter with S3 tags
    CLI: new 'openio lifecycle' commands
    CLI: new 'openio lifecycle' commands
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    Python API, tests: another batch of Python 3 fixes
    meta2: Allow to change the policy of an object
    test: Add the storage policy when creating an object
    oio-blob-auditor: Fix tests
    oio-blob-auditor: Accept the versioning
    Update the copyright
    rawx: Remove xattr container ID, content path, content version and content ID
    rawx: Check content fullpath
    Python API, core: Add the content ID to the fullpath
    Python API: Factorize the encoding and decoding of the fullpath
    rawx: Remove xattr chunkid
    meta2: Require content ID when creating an object
    Tests: fix tests with missing uuid
    Fix Flake8
    tests: fix python test
    Python API: add documentation, fix warnings
    common/utils: Split to reduce dependencies
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    Rawx: Add xattr oio_version and full_path
    
    Modify the client to send the header X-oio-chunk-meta-full-path:Acct/Container/Name
    Convert the header to the xattr oio.user:Acct/Container/Name=""
    tests: adapt to the last code reorganization
    Python API: use ReplicatedChunkWriteHandler in BlobClient
    migrate ec content tests to use unified API
    review rdir and add metachunk_hash
    
    * get rid of useless metadata
    * add random in tests
    Make tests pass (#609)
    bootstrap: review config input
    add compat code for pyxattr vs xattr bullsh*t
    core: move python files around
    python tests: fix chunk path for the new width/depth
    tests / audit: fixes hardcoded namespace
    python tests: fix chunk path for the new width/depth
    tests / audit: fixes hardcoded namespace
    update libs and tests according to new rawx chunk metadata checks
    func tests: missing content_version in chunks
    python: 'blob' manages the new headers expected by the rawx.
    fix blob audit func tests
    fix tmp fixtures & func tests setUp/teardown
    fix func tests setUp
    refactor functional tests config loading
    refactor functional blob auditor tests
    Audit tests : fixed initialization
    Audit tests : fixed error
    Python : added audit tests
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    Allow lifecycle to work with sharded buckets
    
    For S3 buckets which have been sharded using "container_hierarchy" swift
    middleware, allow to recurse on all shards when applying lifecycle
    rules.
    
    This behavior is enabled with a command line argument.
    The set of containers to recurse on is established by doing a prefixed
    listing (the prefix being the bucket name and the '%2F' delimiter).
    
    The metadata of listed objects will be enriched with
    - the name of the actual container they are stored in (under the key
    'container');
    - the name they have been given in this container (under the key
    'orig_name').
    
    All tests against filters are unchanged, but API calls will use
    `orig_name` and `container` instead of object and bucket names.
    meta2: Keep the same ctime if the object already exists
    lifecycle: Check the current object with the versions
    lifecycle: Apply the rules in the same order as the configuration
    lifecycle: Format configuration
    lifecycle: Add deleted flag when applying Expiration with versioning
    lifecycle: Apply Date only on the objects created before this date
    lifecycle: Apply Expiration and Transition only on the current version
    lifecycle: Apply one action by object
    lifecycle: Update the tests
    lifecycle: Improve tests
    lifecycle: Test the filter with S3 tags
    lifecycle: Change architecture
    lifecycle: Add action to delete exceeding versions
    Python API: apply LifeCycle rules on a container
    Python API: save LifeCycle rules to container property
    Python API: implement LifeCycle rules matching
    tests: try to make some tests more reliable
    tests: make conscience and container tests more reliable
    
    These tests are restarting services, and sometimes try to contact the
    service before it has restarted, resulting in an error. Now we will make
    several attempts to avoid failing the whole test.
    CI: use nosetests' "flaky" module to rerun flaky tests
    tests: disable meta2 repli tests
    
    Add a log when wait_for_score fails
    tests: wait for meta2 score before running tests
    tests: test sqliterepo replication
    Try to make "container backup" compatible with Python 3
    Python API, tests: improve Python3 compatibility
    Solve some python3 errors in the tests
    tests/functional: Skip 3 test cases on public CI
    
    * some test_container_backup.py cases are buggy and/or unstable
    * test_cluster_wait is too long to run often.
    Tests: add scenarios with invalid data
    
    Add sanity checks for standart tests
    Test possibility to restore a simple tar in one operation
    Test MPU with invalid data on header and data
    oio: Comply to the latest PEP8 rules enfroced by flake8
    Python API, tests: fix typos
    oio/container: allow resume restore on failure
    
    If a network error occurs while restoring a container,
    position for current processed file is now saved.
    User should retrieve X-Consumed-Size from HEAD method to
    resume restore operation, after checking value of X-Upload-In-Progress.
    oio/backup: protect concurrency restore
    
    A lock will be set on Container, avoiding to corrupt data.
    tests/backup: check return code for each part
    oio/backup: fix invalid restore
    
    A regression was introduced during f616a41ec as same var size was
    used to store HTTP Content-Length and object uploaded to SDS.
    
    This commit fix that by introducing new variable name (req_size) for
    HTTP Content-Length and enforce that total data consumed are now
    same size as HTTP.
    
    It also enforce test to ensure all objecst put are really restored
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    CLI: Manage import (#1098)
    oio/backup: Normalize HTTP headers
    tests/backup: check current state of a restoration
    bootstrap: increase MaxRequestsWorkers
    
    During tests of range download, Apache configuration was
    too short to handle lot of small requests.
    
    oio-bootstrap now add MaxRequestsWorkers to allow Apache to spawn
    new children to support charge.
    
    This patch also enforce test by testing HTTP return code when
    downloading range.
    tests: use TemporaryFile in test_container_backup.py
    container backup: rename ambiguous variables and files
    tests/functional: more tests for restore
    oio/container: add Manifest in tar itself
    
    As big header may be filtered or cut by webserver or proxy, the
    manifest is now embedded as first file in archive:
    It will simplify upload per range.
    
    During implementation, it has shown several issues with several items:
    - container_properties was using current timestamp and then download same
    container twice on different seconds generated with different checksum
    - an issue may occurs while dumping a container per range as json
    dumping/restoring did not kept keys orders and broke associate file.
    oio/container: rename URL dump/restore
    
    Their URL are now prefixed with container.
    oio/container: save and restore mime_type
    oio: add more check on restore container operation
    
    When restoring a container, reply with 201 only for full restoration
    and last segment, other segments will got a 206 (PARTIAL).
    
    This patch also introduce use of redis to ensure that restoration
    is linear: it avoid missing segment and replay of already uploaded
    segment.
    oio: support restoration of container by range
    
    When a dump operation is launched, the value
    of X-Manifest-Container header must be sent when using
    restoration operations using range.
    
    This header can also be retrieved by a HEAD on container.
    
    Please note that restoration by range must be a multiple of 1 MB,
    as empty block may be inserted to avoid header split.
    
    When untaring a dump on Linux filesystem, you should provide option
    --ignore-zeroes to avoid 'A lone zero block at %d' error.
    oio: move container_streaming into container
    container_streaming: rework generation of TarEntry
    
    Also add comments and fix related to flake8
    container_streaming: manage S3 container
    
    This patch allow download of S3 SLO objects (uploaded with multipart).
    It will aggregate parts from second container and stream it as one object.
    tests/container_streaming: more checks with charset
    
    Various charsets are tested as filename or metadata
    container_streaming: export container properties
    
    A special file named ".container_properties" will be created
    at root and will contains any metadata.
    Implement service 'admin'
    
    This service will allow to download a container.
    The API is now managed by a WSGI rule with parameters acct and ref
    like other services.
    
    Previously, oio-bootstrap.py was using configuration file to store
    Apache configuration. This patch moves them into dedicated files
    with component httpd.
    It allow to specify configuration file for this new service.
    tests/container_streaming: add functional test
    python: Adapt to the latest flake8 implementation
    add test for TLS support
    CI: enable python3 unit tests
    
    Jira: R1910-1
    tests: Remove a forgotten 'print'
    tests: Fix the tests around SPARE chunks
    
    Adapt them to the latest evolution of prepare/spare chunks
    Tests: Move strange_paths to tests/utils
    Test adding the delete marker to specific version
    Test the versioning simulation
    Update delete_many with force-versioning
    Update max_versions of container from header (2/2)
    
    This commit bring same mecanism to update sys.m2.policy.versions
    from header to content/delete operation: we want to control
    if current version of object must be deleted or add a delete marker.
    tests updating max_version from object create
    meta2: Retrieve the header when updating an object to update the stats
    Test the stats of damaged objects
    tests: fix test_spare_with_one_broken flaky test
    
    (cherry picked from commit 9a56e60087c87c4ab4d298e5f450a7f2f4751bd9)
    tests: fix test_spare_with_one_broken flaky test
    test/func: Play all the container tests with long names
    
    Thanks to @kamel-rahim
    tests/func: Test long container names
    Update Copyright
    Test the stats of missing chunks
    account: Check the request method
    m2: return quality of chunks in spare chunk requests
    meta2: Allow to change the policy of an object
    tests: accelerate annoyingly long tests
    proxy: Add a 'content-size' header when getting properties
    test: Add the storage policy when creating an object
    tests: lower score threshold
    Update the copyright
    proxy, meta2: Remove 'content/copy'
    meta2: Require content ID when creating an object
    Python API: Flush container fast
    meta2: Limit the number of deleted object when flushing
    meta2: Send events to remove the chunks when flushing a container
    tests: adapt to recent return code modifications
    proxy: fix end_marker parameter for object listing
    Purge with a fixed number of versions
    meta2: Purge alias
    tests: fix python test
    meta2: Send events when purging a container
    Add tests when creating container and status
    tests/func/container: Comply to PEP8
    tests/func/container: Use clearer function names
    tests: Avoid pre-determined container names
    sqliterepo: Fix a missing replication upon a increment in the admin table
    Disallow using an unknown storage policy
    
    Fixes #1153
    oio: Comply to the latest PEP8 rules enfroced by flake8
    Add container snapshot
    
    The snapshot take the form of:
    -A copy of the sqlite base of the target to a meta2 chose by the load balancer.
    -All the chunks of the snapshot are replaced by new chunk that hardlink the target one.
    -The snapshot is frozen afterward.
    
    The chunks hardlink implies that the target and the snapshot chunks are in the same rawx.
    Currently it is the client that freeze and enable the containers during the snapshot.
    Tests: Replace `requests` by `urllib3`
    ContainerClient: fix drain content status code
    
    Add tests to detect drain on nonexistent content.
    Add tests to the CLI for the command drain.
    Account: Fix ghost containers
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    Meta2, Event-handler: Create a separate handler to drain a content
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    tests/func: Adapt the test suite for bulk delete
    proxy: Add bulk delete content
    
    Permit to delete many content in one go for one container.
    Modify the format of cli command 'openio object delete' to return a List.Lister.
    Modify tests that depended on the old format response to use the new one.
    
    The format of a request to the proxy is a json '{"contents":[{"name":"..."},{"name":"..."}]}'
    and the url is /content/delete_many.
    The format of the answer is a json '{"contents":[{"name":"...", "status":"...", "message":"..."}]}'
    Proxy: correct the create_many function and make tests passed
    Add an option to create many containers in on go
    
    The command "openio container create <container>" used to send a request for every
    container in the list to create it.
    Now the command check the number of containers and use a specific request to ask for the
    creation of all the containers.
    tests/func: Adapt the test suite for bulk delete
    proxy: Add bulk delete content
    
    Permit to delete many content in one go for one container.
    Modify the format of cli command 'openio object delete' to return a List.Lister.
    Modify tests that depended on the old format response to use the new one.
    
    The format of a request to the proxy is a json '{"contents":[{"name":"..."},{"name":"..."}]}'
    and the url is /content/delete_many.
    The format of the answer is a json '{"contents":[{"name":"...", "status":"...", "message":"..."}]}'
    Proxy: correct the create_many function and make tests passed
    Add an option to create many containers in on go
    
    The command "openio container create <container>" used to send a request for every
    container in the list to create it.
    Now the command check the number of containers and use a specific request to ask for the
    creation of all the containers.
    tests: adapt to the last code reorganization
    tests: fix last failing properties test
    api,tests: continue to fix tests around properties
    tests: remove duplicated functional tests
    api: add functional tests around directory and container
    oio|tests : correct all int values inside headers for new requests update
    chunk-method: add nb_copy for plain
    core: move python files around
    tests: fix blob content-version missing header
    tests: include Unicode characters in container tests
    python: fix some tests
    
    - add missing constructor param to make account test pass again
    - add 'score' to the list of fields returned by proxy for chunk requests
    python: flake8, I hate you
    python/tests: completed meta2 tests on contents
    
    Know TODO: SPARE requests are not tested yet.
    func tests: added raw_insert in containers
    python: containers func tests further completed.
    python: flake8 compliant
    python: tests on containers partially updated
    tests: commented broken tests (thanks to Couille d'Ours), split Container/Content.
    python: fixed unused imports for PEP8
    python: fixed func tests on containers
    python / functional tests: now passes the pep8 check
    m2: one step toward passing functional tests
    replace std json python lib with simplejson
    refactor functional tests config loading
    Python tests : a few corrections
    Python tests : code convention applied
    Python : gathered all tests
    Proxy test meta2 : fix copy tests
    Updated proxy tests
    Proxy and Rawx tests : corrected indentation
    Proxy and Rawx tests : cleaned and updated configuration procedures
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    Proxy tests : corrected indentation
    Client and proxy tests : a few corrections
    Updated proxy tests & Added client property tests
    proxy tests : added listing tests on containers
    proxy tests : implemented meta2 tests
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    Python API: another batch of python3 conversions
    proxy: Fix prefixes of meta0 list
    oio-meta2-indexer, Python API: add a new meta2 indexing utility
    
    - Add a new wrapper to list all meta2 records indexed for a volume.
    - Add new meta2 indexing tool, sample conf and tests.
    tests/func: Rename a file for more clarity
    tests/func/proxy: Also test a possible failure with meta0
    tests/func/proxy: Exhibit a raised assert on a valid input
    Python API, tests: another batch of python3 conversions
    CI: enable python3 unit tests
    
    Jira: R1910-1
    sqliterepo: implement database vacuum request
    
    Vacuum (defragment) the database on the master service, then
    resynchronize it on the slaves.
    
    Jira: OS-299
    tests: make service management easier
    mover: Remove the bases that are no longer used
    Python API: Ask each peer if base exists
    proxy: support comma-separated service IDs
    proxy: Leave the election for a specific service ID
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    Python API: clarify container moving code
    Python API: Remove unused class
    test: Move meta2
    meta0: improve directory bootstrap (fix #965)
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    CI: enable python3 unit tests
    
    Jira: R1910-1
    tests: new tests for account and reference properties
    tests: new tests for container and object properties
    
    These new tests put focus on the number of properties, and ensure we can
    store at least 2048 properties on a single object or container.
    tests: new tests for container and object properties
    
    These new tests put focus on the size of properties, and ensure we can
    store at least 1MiB in a single object or container property.
    tests: fix urllib3 import
    Use only 'urllib3' imported with 'eventlet'
    Python API: allow to set "request_attempts" for each request
    Proxy: Manage error 503
    meta1: Fix behavior when reference property with empty value is set
    Fix a directory test
    CI: pass some tests with Python 2.7 and some with 3.6
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Minor fixes for Python 3
    
    Fixup remaing print keyword
    Use six to import StringIO
    tests/func: Remove an odd debug trace
    proxy: Prefer local services
    
    1/ Give a location to any proxy on the host (central variable)
    2/ Mangle the scores of RAWX to give precedence to services that are
       closer
    3/ Allow to enable/disable that behavior.
    CLI: add '--min-dist' option to 'rdir bootstrap'
    
    Jira: OS-281
    proxy,m1: resolve CID to acc/cont on /reference/show requests
    
    - Add the account and the container name of the requested reference
    to the SRV_LIST reply as prefixed strings.
    - Extract account and container name from the SRV_LIST reply
    and fill the oio_url_s object passed as a parameter.
    - Include the resolved acc/cont in the /reference/show reply.
    Refactor rdir assignment in RdirDispatcher
    
    - Factorize RdirDispatcher's assignments methods into a generic
    and two wrappers for RAWX and META2 services.
    - Fix for X-oio-req-id as requested by @fvennetier
    - Modify a test that plugs into the callstack to account for a slight
    modification of the callstack after introducing the RdirDispatcher
    wrappers.
    Python API: tolerate meta1 errors during 'volume admin bootstrap'
    
    Fix #1447
    Before this commit, a single meta1 failure was preventing the operation
    to continue. Also, 'volume assignation' command did not return any
    result.
    Use Service Id everywhere
    Fix Flake8
    rdir: now uses uuid of rawx
    
    Fix also generated events by rawx and consumed by event-agent
    Make some functional tests more reliable
    core/lb: fix rdir service assignation (fix #1337)
    meta1: Send event when a reference is created
    
    Fixes #1291
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    tests/func: Add a missing reload of the LB cache in the meta1
    tests/func: Add a missing reload of the LB cache in the meta1
    test/func/rdir: comply to pep8
    Python API: get rid of DirectoryAPI (replaced by DirectoryClient)
    tests: accept non-ideal rdir repartition
    tests: test rdir repartition
    tests: verify that rawx and their linked rdir do not share locations
    m1,tests: start to fix tests around properties
    api: add functional tests around directory and container
    Python API: fix download perfdata
    
    Measures were not taken at the proper code point, and were confusing
    CLI users.
    CI: Fix test perfdata
    
    Change the format to have a consistent and readable format in "oioproxy-logging"
    CI: pass some tests with Python 2.7 and some with 3.6
    Python API: rename ambiguous perfdata 'total' to 'overall'
    CI: Update the tests about perfdata
    Add tests of performance data tracking
    blob-rebuilder: Log when the incident date is missing
    test: Fetch and get status chunks of rdir
    tests: check object list performance
    
    This operation is simple, and can help diagnose issues with improperly
    set TCP flags. A typical object list operation should take 3 to 10ms.
    Python API: fix issue with chunk_checksum_algo=None
    
    The "x-oio-chunk-meta-chunk-hash" trailer was announced but not sent.
    Python API: fix issue with chunk_checksum_algo=None
    
    The "x-oio-chunk-meta-chunk-hash" trailer was announced but not sent.
    api: add functional tests around directory and container
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    Python API: Refresh the rawx scores from cache
    Python API: retry fetch when clues of dirty cache
    Python API: Allow to cache container metadata
    Python API: Allow to cache object metadata and location
    Python API, proxy: set properties when autocreating containers
    sqliterepo: fix the snapshot feature
    tests: minor changes for reliability
    CI: pass some tests with Python 2.7 and some with 3.6
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Python API: fix request ID header name
    test: Verify events emission when deleting container
    CI: fix TestObjectStorageApi.test_container_snapshot
    Python API: allow to drain buried events
    
    After running some tests, drain buried events.
    Python API: Retry listing when the service is busy
    Fix tests waiting specific events
    
    wait_for_event method has now new parameters to be more
    specifiq on event wanted.
    Events consumed by this method will now be logged to allow
    investigation.
    
    (cherry picked from commit 43a7e56685280c2665349c41e051ae34f78e232d)
    sqliterepo: Allow to delete all database properties
    Test new event 'storage.container.update'
    tests: increase some timeouts to make tests less flaky
    tests: make test_container_touch less flaky
    test: Wait for events when testing the account service
    Fix tests waiting specific events
    
    wait_for_event method has now new parameters to be more
    specifiq on event wanted.
    Events consumed by this method will now be logged to allow
    investigation.
    tests: implement a facility to wait for a specific event
    
    Event can be specified by type and/or request ID.
    Update tests for snapshot
    Python API: use REQID_HEADER constant everywhere
    Test the stats of damaged objects
    Permit to only list buckets
    tests: fix some merge issues
    tests: make service management easier
    Test the stats of missing chunks
    tests: wait for account service before running tests using it
    tests: put a deadline on the service score wait loop
    tests: put a deadline on the service score wait loop
    tests: split test_container_flush into smaller tests
    Python API: Delete useless function
    test: Allow to change the policy of an object
    oio/api: new method to create an object
    
    A new method will now return obj_metadata after
    creation of new object, including version.
    
    Required for OS-239
    tests: accelerate annoyingly long tests
    tests: speedup some tests
    test: Unset and set same container property with same value
    Remove useless tests
    core,m1,m2: check container name is valid UTF-8
    
    Jira: OS-100
    tests: increase timeout for test_container_refresh
    
    Add large timeout
    test: wait account service with score of 50
    test: Check meta after 'object_link'
    Python API: Allow generating a new chunk ID to link a chunk
    Python API, core: Add the content ID to the fullpath
    Python API: Factorize the encoding and decoding of the fullpath
    rawx: Save fullpath with the associated chunk ID
    Python API: Link an object with version and content ID
    Python API: Rename object_fastcopy to object_link
    oio: Manage metadata for object_fastcopy
    
    When new ACL was put on Swift/S3 with fastcopy middleware enabled,
    the ACL was not used at all.
    
    This commit add the option to use original metadata or to replace
    them through properties_directive parameter (COPY or REPLACE)
    Python API: Flush container fast
    tests: check autocreate API
    tests: use different data for fastcopy overwrites
    Python API, meta2: Send the content ID to create an object
    Python API: tolerate meta1 errors during 'volume admin bootstrap'
    
    Fix #1447
    Before this commit, a single meta1 failure was preventing the operation
    to continue. Also, 'volume assignation' command did not return any
    result.
    Add fastcopy on Python API
    Python API: Add method to check if an object exists
    Fix Flake8
    tests: fix python test
    tests: use real_url instead of url
    Python API: refactor object upload code
    
    Split object upload code in 3 smaller parts.
    Delete chunks that have just been uploaded in case of error.
    Python API: add support for operation deadlines
    Python API: delete chunk after object creation conflict
    account: return container mtime in listings
    Python API: add tests of object listing
    server: allow non-hexadecimal request IDs
    Python API: improve documentation, add deprecation warnings
    Python API, CLI: keep track of request durations
    
    First step: keep track of resolving and request times in proxy,
    then rawx request time in Python API.
    tests/func/api: Comply to PEP8
    Test long content paths with the func tests suite
    tests: improve ContainerClient coverage
    Container snapshot: fix small issues
    Add container snapshot
    
    The snapshot take the form of:
    -A copy of the sqlite base of the target to a meta2 chose by the load balancer.
    -All the chunks of the snapshot are replaced by new chunk that hardlink the target one.
    -The snapshot is frozen afterward.
    
    The chunks hardlink implies that the target and the snapshot chunks are in the same rawx.
    Currently it is the client that freeze and enable the containers during the snapshot.
    Add LazyLoader for ObjectStorageApi
    tests: add truncate test
    oio-account-server: Extend the openio CLI tool
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Python API: rework get_meta_ranges function
    Python API: rework object append code
    oio/api: allow append operations
    
    This patch introduces a new parameter for object_create to support
    appending data to an existing object.
    
    If object doesn't exist, it is created, only if container exists as
    flag append can not be used at same time with flag autocreate.
    tests/func/api: Get the real chunksize from the NS
    
    ... instead of a magic number
    Python API: remove headers argument, add kwargs
    tests: adapt to the last code reorganization
    cli: allow to set quota and storage policy (fix #727, fix #737)
    Speed up random data generation during tests
    Python API: fix ranges when not doing EC
    Python API: add tests around ranges
    Python API: review content metadata keys (fix #726)
    api,tests: continue to fix tests around properties
    m1,tests: start to fix tests around properties
    api: add functional tests around directory and container
    blob-auditor: warn about missing "fullpath" xattr
    Update the copyright
    rawx: Remove xattr chunkid
    Use Service Id everywhere
    Tests: fix tests with missing uuid
    tests: fix python test
    oio-blob-indexer: add 2 more tests of chunk id length
    oio-blob-indexer: Control format of chunk ID
    
    Closes #1265
    common/utils: Split to reduce dependencies
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    Rawx: Add xattr oio_version and full_path
    
    Modify the client to send the header X-oio-chunk-meta-full-path:Acct/Container/Name
    Convert the header to the xattr oio.user:Acct/Container/Name=""
    Test rdir: Clean up chunk after test
    migrate ec content tests to use unified API
    review rdir and add metachunk_hash
    
    * get rid of useless metadata
    * add random in tests
    Make tests pass (#609)
    bootstrap: review config input
    add compat code for pyxattr vs xattr bullsh*t
    blob-indexer: add interval parameter
    core: move python files around
    python tests: fix chunk path for the new width/depth
    python tests: fix chunk path for the new width/depth
    tests: test indexation of chunks of unicode-named contents
    update libs and tests according to new rawx chunk metadata checks
    rdir: indexer: add functionnal tests
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    CI: enable python3 unit tests
    
    Jira: R1910-1
    tests: speedup some tests
    Revert indentation change and fix an rdir test case
    
    - Revert an inadvertent indentation change to the exiting code
    - Add a body to a fetch request to make sure the failing is due
    to the abscence of the volume ID.
    Fix unnecessary use of multiple variables in rdir tests
    
    setUp is called before each individual test, as such we
    have no need to keep 4 variables.
    Fix indentation errors and remove unused imports
    Split rdir meta2 api server tests
    Add python sdk rdir api tests
    Add tests for the meta2 API of rdir
    Python API, rdir: document
    tests: Adapt the test for rawx v2
    rdir: Get the number of chunks to rebuild
    rdir, CLI: Clear chunks entries
    rdir: Remove rtime
    tests/rdir: Comply to PEP8
    tests/functional/rdir: Fix the way we wait for a process
    tests/functional/rdir: Avoid a random fail
    Use Service Id everywhere
    oio/common: expose backoff_factor option
    
    By default, urllib3 doesn't use backoff when retries are
    enabled. This commit introduce parameter to update it.
    
    Following urllib3 documentation, backoff is used after second
    try and will sleep by using formula:
    {backoff factor} * (2 ^ ({number of total retries} - 1))
    Fix functional tests related to rdir
    oio: Comply to the latest PEP8 rules enfroced by flake8
    tests: fix rdir termination and storage tierer tests
    tests/func/rdir: Test routes with wrong params
    tests/func/rdir: Test invalid routes and unexpected methods
    tests/func/rdir: Test the startup of rdir services
    tests/func/rdir: Comply to the fucking PEP8
    
    http://openio.io/
    https://twitter.com/openio
    tests/func/rdir: Test the detection of a wrong basedir
    
    Not present, not a directory, permission denied.
    common/http: Split to reduce dependencies
    Tests: Replace `requests` by `urllib3`
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    tests/func/rdir: Fix the test setup to match the current rdir
    
    OSEF was definitely not a good NS name.
    tests/functional: Rely on the deployed rdir for the tests
    tests/unit/rdir: Adapt to a possibly slow startup of the rdir
    
    There is an adherence to the wall-clock time that failed some tests
    while ran on slow platforms.
    tests/unit: Adapt the unit tests to the latest rdir
    tests: adapt rdir tests to last modifications
    review rdir and add metachunk_hash
    
    * get rid of useless metadata
    * add random in tests
    rdir and account: python-flask no longer required (#603)
    core: move python files around
    rdir: new 'create' route to create the DB, fix tests
    rdir: new 'create' route to create the DB, fix tests
    rdir: fetch: use list instead of dict to preserve entries order
    rdir: move functionnal tests to unit tests
    rdir: add admin command to clear rebuilt chunk entries or all entries
    rdir: server checks the namespace in the http request
    rdir: add protocol version in each url
    rdir: status command displays rebuild informations when incident_date is set
    rdir: push all xattr in db
    rdir: fix fonctionnal tests
    rdir: rebuilder rebuilds chunks up to the incident date set by admin in rdir
    rdir: use specific prefix for chunk entries to create a pseudo partition
    rdir: add rebuild crawler to rebuild chunks on the same valume after its replacement
    proxy+rdir: add actions to fetch the index and to show rebuild status
    Python API, tests: another batch of python3 conversions
    Minor fixes for Python 3
    
    Fixup remaing print keyword
    Use six to import StringIO
    oio: Comply to the latest PEP8 rules enfroced by flake8
    Tests: Replace `requests` by `urllib3`
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    Fix another randomly failing Python LB test
    
    (cherry picked from commit b38ddfb54cfddbfaaeeb6b5249554e8ba900c686)
    Fix another randomly failing Python LB test
    Fix randomly failing Python LB tests
    tests/func: Reduce the adherence to the time
    
    Explicit refreshes are sent to the proxy instead of waiting in the hope
    that the periodically scheduled refresh happens.
    tests/func: Reduce the adherence to the time
    
    Explicit refreshes are sent to the proxy instead of waiting in the hope
    that the periodically scheduled refresh happens.
    test_lb: improve error message
    tests/functional/conscience/test_lb.py : correct test_choose_4_slot
    Review storage policy and service pool configuration
    lb: fix generation of locations from addresses and add tests
    lb: add functional tests
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    Workaround some flaky tests
    Update a Copyright mention
    proxy conscience score: Add functional tests
    Make some tests more reliable
    test: Deregister specific services
    tests: try to make some tests more reliable
    tests: make conscience and container tests more reliable
    
    These tests are restarting services, and sometimes try to contact the
    service before it has restarted, resulting in an error. Now we will make
    several attempts to avoid failing the whole test.
    Conscience: persist service locks
    
    Create a new 'tag.lock' tag telling is the service has been locked by an
    administrator. This tag is saved (with all other tags) in the conscience
    persistence file. After a restart, this file is loaded, and the services
    are locked (or unlocked) again.
    
    Jira: OS-349
    Tests: Replace `requests` by `urllib3`
    tests/cs: Accept no reply from the proxy when locking services
    Revert "tests/cs: Accept no reply from the proxy when locking services"
    
    This reverts commit dbf788455b9fba4712c34ee49392a16445a94da4.
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    tests/cs: Accept no reply from the proxy when locking services
    tests/cs: Accept no reply from the proxy when locking services
    tests/functional: removes unused import
    test/func/conscience: adds a test case (polling of zero-scored srv)
    test/func/conscience: produces expected failure about unlock/register
    cli: add 'openio cluster unlockall' command
    lb: add functional tests
    core: move python files around
    tests / conscience: Fixes test case
    
    Relaxed checks that made no real sense.
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    core/cs: API completed
    
    Also, the API has been made more robust to manage strings with '"' and UTF-8 characters in the JSON messages
    python: fixed functional tests
    proxy: V3 routes now used in core/, V2 routes removed from the proxy
    
    Some functional tests still require to be adapted (container, reference)
    python / functional tests: now passes the pep8 check
    conscience / test: useless sleeps removed
    cluster, proxy: Fixes & Improvements
    
    * cluster / remote: cleaner and uniform interface, stripped code (+ dependencies adapted)
    * proxy: CLI option to disable the cache of services
    * proxy: management of services down, that are receive a lower priority
    * server: minor cleanups
    replace std json python lib with simplejson
    Python tests : code convention applied
    Python : gathered all tests
    Proxy and Rawx tests : corrected indentation
    Proxy and Rawx tests : cleaned and updated configuration procedures
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    Proxy tests : corrected indentation
    Updated proxy tests & Added client property tests
    proxy tests : added README and improved conscience & directory tests
    proxy tests : fixed config issues
    Functional tests on conscience and directory functions for proxy
    Functional tests on conscience and directory functions for proxy
    account,CLI: implement a bucket listing command
    
    Jira: OB-501
    xcute: Use python time instead of redis time
    Python API, tests: another batch of python3 conversions
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Solve some python3 errors in the tests
    Allow to set various Redis parameters
    Account: Fix account refresh on missing values
    
    There was an error when damaged_objects or missing_chunks were missing.
    This happened when a container is created before oio-sds 18.10 and no object
    is created after an update > 18.10.
    The fix set the value to 0 but if some object had missing chunks before it will not
    be printed and therefore the value would be erroneous.
    Test the stats of damaged objects
    account: Save the damaged objects count by account and container
    account: Rename missing-chunks to missing_chunks
    Update Copyright
    account: Save the missing chunks by account and container
    Account: fix comparison between float
    common/utils: Split to reduce dependencies
    oio-account-server: Add new routes
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Account: Send a lua script to redis to update containers.
    
    Replace the lock/unlock by a script to redis.
    Since a script lua is atomic it should prevent the problem of tilted redis.
    tests: replace the slow account update test
    tests: replace the slow account update test
    Add account listing to the CLI (fix #817)
    core: move python files around
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    account: allow UTF-8 encoded container names
    fix tmp fixtures & func tests setUp/teardown
    fix func tests setUp
    refactor functional tests config loading
    func tests : now manage a JSON config
    python: clean code style
    account: fixed functional test
    event-agent: fixed test
    list containers now include objects/bytes metadata
    list containers now include objects/bytes metadata
    list containers now include objects/bytes metadata
    account-service: container update event with merge, more tests
    conscience: small python client
    event-agent: container updates handlers
    account-service: container update event with merge, more tests
    conscience: small python client
    event-agent: container updates handlers
    account-server bin (using gunicorn)
    account backend now supports listing options (prefix, delimiter, limit, marker, end_marker)
    event-agent now support async chunk delete
    WIP account service with redis backend
    oio: fix invalid stats with delimiter
    
    Listing containers with delimiter may use misaligned stats:
    Common prefixes was not skipped when extracting stats but results
    were skipped when merging results.
    
    OS-46 #comment Fixed
    account: return container mtime in listings
    oio-account-server: Extend the openio CLI tool
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Python API: review exception handling in HttpApi
    tests: adapt to the last code reorganization
    python tests: add retry with a small delay to let account start
    core: move python files around
    python tests: add retry with a small delay to let account start
    python/crawler/storage tiering: add crawler to change storage policy of old contents
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    xcute: Fix flake8
    xcute: Use python time instead of redis time
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Update Copyright
    account: Check the request method
    account: return container mtime in listings
    common/utils: Split to reduce dependencies
    oio-account-server: Add new routes
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    Account: Send a lua script to redis to update containers.
    
    Replace the lock/unlock by a script to redis.
    Since a script lua is atomic it should prevent the problem of tilted redis.
    tests: refactor cli tests
    Add account listing to the CLI (fix #817)
    rdir and account: python-flask no longer required (#603)
    core: move python files around
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    replace std json python lib with simplejson
    fix func tests setUp
    refactor functional tests config loading
    func tests : now manage a JSON config
    python: clean code style
    account-service: container update event with merge, more tests
    conscience: small python client
    event-agent: container updates handlers
    account-service: container update event with merge, more tests
    conscience: small python client
    event-agent: container updates handlers
    tests: retry test_upload_warn_dist in case of timeout
    tests: make TestPerfectibleContent kind to the next tests
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Python API: fix request ID header name
    Make some tests more reliable
    lb: fix distance for chunks close to proxy
    test: Verify events emission when deleting container
    tests: fix test_content_perfectible.py
    
    Some tests were systematically skipped.
    tests: implement a facility to wait for a specific event
    
    Event can be specified by type and/or request ID.
    Python API: use reqid instead of req_id
    
    Try to be consistent when using abbreviations. We choose reqid over
    req_id since it was more common in the existing code base, especially in
    log messages.
    Python API: use REQID_HEADER constant everywhere
    tests: make service management easier
    tests: new tests for oio-blob-improver
    Python API: implement BlobImprover on top of Rebuilder
    
    Jira: R1810-28
    meta2: address some content.perfectible issues
    tests: make blob-rebuilder tests more robust
    
    And some other tests less verbose.
    Test content.perfectible events management
    tests: fix flaky service ID tests
    tests: minor changes for reliability
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Python API: fix warning at yaml loading
    
    This is more a workaround than a fix. The real fix requires a more
    recent version of PyYaml.
    oio-meta2-indexer, Python API: add a new meta2 indexing utility
    
    - Add a new wrapper to list all meta2 records indexed for a volume.
    - Add new meta2 indexing tool, sample conf and tests.
    tests: improve readability
    core, meta2, proxy, tests: rename things
    tests: add test with moving meta2
    meta2: support use of ServiceId
    
    meta-server now support ServiceId option on command line
    (but it should be used only by meta2)
    Use Service Id everywhere
    Tests: add simple test with rawx addr changest
    Python API: set is_latest field in object listings
    
    Implementing this feature in the Python API is easier than implementing
    it in our swift connector. And besides, it may be used in our CLI or
    tools like a lifecycle crawler (nothing has been implemented at the moment).
    Make some tests more reliable
    tests: wait for meta2 score before running tests
    meta2: Fix listing with versioning
    meta2: Fix the purge of objects with a delete marker (the last version)
    test: Delete a versioned object with 'delete_exceeding_versions'
    Python API, CLI: Purge container
    Purge with a fixed number of versions
    meta2: Purge alias
    meta2: Delete exceeding versions when adding a new alias
    Add container purge tests
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Tests: Move strange_paths to tests/utils
    tests: wait for meta2 score before running tests
    Python API: Delete useless function
    Python API: Delete useless method
    Update the copyright
    Change oio version from 4.0 to 4.2
    Python API, core: Add the content ID to the fullpath
    Python API: Factorize the encoding and decoding of the fullpath
    tests: fix python test
    oio: Comply to the latest PEP8 rules enfroced by flake8
    Python API: fix issues with mime_type and properties
    
    Fix #1149
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Rawx: make it more robust against strange path
    Rawx: Add xattr oio_version and full_path
    
    Modify the client to send the header X-oio-chunk-meta-full-path:Acct/Container/Name
    Convert the header to the xattr oio.user:Acct/Container/Name=""
    Python API: merge GeneratorReader and GeneratorIO classes
    tests: adapt to the last code reorganization
    Python API: review content metadata keys (fix #726)
    tests: use liberasurecode_rs_vand as default backend
    tests: add skips on some configuration
    migrate ec content tests to use unified API
    migrate plain tests to use "unified" python API
    removes remains of rainx
    chunk-method: add nb_copy for plain
    Make tests pass (#609)
    bootstrap: review config input
    Fix some functional tests
    storage policies: moar review
    
    iod: PUT and GET meta chunks via HTTP
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    core: move python files around
    tests: ensure all strange objects have actually been saved
    Add tests of weird content names and fix some quoting issues
    python/mover: move chunks correctly according to their policies
    rainx: fix upload of empty content (upload the first empty subchunk)
    python and rainx: fix/add support of new xattr (policy, chunk method and mime type)
    python/content: disable some functionnal tests if there is not enough rawx (RAIN)
    python/crawler/storage tiering: add crawler to change storage policy of old contents
    python/content: add functionnal tests
    python/content: add mechanism to change the storage policy of existing contents
    python/content/dup: add basic upload and download mechanisms
    python/rain: fix/add functionnal tests
    python/rain: add content upload mechanism
    python/policy: prepare integration of rain policy
    proxy: Check the count of known targets to avoid segfault
    tests: spawn a logger instance for each test
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Python API: Allow to rebuild chunk in frozen container
    Update the copyright
    Change oio version from 4.0 to 4.2
    Python API, core: Add the content ID to the fullpath
    Python API: Factorize the encoding and decoding of the fullpath
    tests: fix python test
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Rawx: make it more robust against strange path
    Rawx: Add xattr oio_version and full_path
    
    Modify the client to send the header X-oio-chunk-meta-full-path:Acct/Container/Name
    Convert the header to the xattr oio.user:Acct/Container/Name=""
    tests: check metachunk hash in DB matches the real one
    tests: check metachunk hash in DB matches the real one
    Python API: merge GeneratorReader and GeneratorIO classes
    tests: adapt to the last code reorganization
    migrate ec content tests to use unified API
    migrate plain tests to use "unified" python API
    review rdir and add metachunk_hash
    
    * get rid of useless metadata
    * add random in tests
    bootstrap: review config input
    core: move python files around
    python/mover: move chunks correctly according to their policies
    python/content/dup: add functionnal tests (rebuilding)
    python and rainx: fix/add support of new xattr (policy, chunk method and mime type)
    python/content: improve upload tests
    python/content: remove orphan chunks when upload failed
    python/content/dup: add functional tests for SINGLE stgpol
    python: add support for storage policy on content_prepare and content_spare
    python/content/dup: add basic upload and download mechanisms
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Solve some python3 errors in the tests
    Update the copyright
    Change oio version from 4.0 to 4.2
    Python API, core: Add the content ID to the fullpath
    Python API: Factorize the encoding and decoding of the fullpath
    tests: fix python test
    oio: Comply to the latest PEP8 rules enfroced by flake8
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Rawx: make it more robust against strange path
    Rawx: Add xattr oio_version and full_path
    
    Modify the client to send the header X-oio-chunk-meta-full-path:Acct/Container/Name
    Convert the header to the xattr oio.user:Acct/Container/Name=""
    tests: check metachunk hash in DB matches the real one
    tests: check metachunk hash in DB matches the real one
    Python API: merge GeneratorReader and GeneratorIO classes
    tests: adapt to the last code reorganization
    tests: add skips on some configuration
    migrate ec content tests to use unified API
    removes remains of rainx
    Make tests pass (#609)
    bootstrap: review config input
    tests/func: removes unused imports
    
    ... in the context of skipped tests.
    Farewell to the rainx!
    
    + rawx simplification
    python: fix RAIN tests
    core: move python files around
    rainx: fix upload of empty content (upload the first empty subchunk)
    python and rainx: fix/add support of new xattr (policy, chunk method and mime type)
    python/content: improve upload tests
    python/content: remove orphan chunks when upload failed
    python: add support for storage policy on content_prepare and content_spare
    python/content/dup: add basic upload and download mechanisms
    python/rain: fix/add functionnal tests
    python/rain: add content download mechanism (with rebuild on the fly when necessary)
    python/rain: add mechanism to rebuild metachunk using rainx services
    python/rain: add content upload mechanism
    Add tests on webhook event
    test: Verify events emission when deleting container
    tests: Expect a new field in events
    blob-improver: various improvements
    oio-meta2-indexer, Python API: add a new meta2 indexing utility
    
    - Add a new wrapper to list all meta2 records indexed for a volume.
    - Add new meta2 indexing tool, sample conf and tests.
    Relocate python api tests and fix indentation errors
    
    - Fix indentation errors in test_events_emission.py test suite.
    - Relocate python API mocked tests to tests/unit/api and make sure
    they use dummy namespaces instead of pre-loading the configuration.
    - Fix a problem where the RdirClient didn't correctly pass the
    endpoint to the superclass constructor.
    Fix deprecated use of map/filter amongst other things
    
    - Use list comprehension instead of the deprecated map/filter
    - Move the event-agent service restart to tearDown to allow
    recovery even when tests fail.
    - Rename parameter to avoid use of language keyword as variable
    name
    - Avoid redefining ns and account variables
    Disable events emission tests on multi-beanstalk setup
    Fix indentation errors and remove unused imports
    Add tests to inspect generated events on container ops
    meta2: notify the sparse contents
    
    Add meta2_filter_action_check_content before action_put_content
    Check the size and the position of the all the chunks a content.
    Depending of the storage_policy some chunks can be rebuild (eg copy or ec)
    with the chunks already presents.
    If the chunks can be rebuild it send a event storage.content.broken containing
    "present_chunks":[{"id":"...","pos":"...","hash":"...","size":"..."}],
    "missing_chunks":[pos1,pos2,...,posn]
    if not return FILTER_KO.
    Add an event handler content_broken that permit to rebuild the missing chunks
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    events: forward all replication events by default
    
    To avoid problems during the update of old platforms, the check to see
    if replication is enabled for each bucket must be explicitly enabled.
    account: allow to set bucket metadata
    xcute: Retry later when the worker can't reply
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Make some tests more reliable
    event: allow to notify events without URL
    event-agent: Permit to not replicate some accounts and containers
    
    Jira: OS-433
    Python API: Delete old BlobRebuilder
    Python API: document code, reduce number of warnings
    tests: make blob-rebuilder tests more robust
    
    And some other tests less verbose.
    oio-blob-rebuilder: Distribute the broken chunks
    oio-blob-rebuilder: fix default tube, improve logging
    tests: Poll a random beanstalkd
    
    Instead of using an arbitrary "default" hard-written connection string
    events: Fix invalid ssample beanstalk addresses
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    CLI: Manage import (#1098)
    NotifyFilter: Remove unnecessary code
    ContentRebuilderFilter: Merge with NotifyFilter (fix #1033)
    Event-handler, oio-blob-rebuilder: use beanstalkd to recreate chunks
    
    Correct meta2 spare chunk error: now when the number in the blacklist
    is equal to the number of chunk for the storage policy return a 400 error
    
    Event-handler write in a beanstald's tube the missing chunks
    
    oio-blob-rebuilder: now we have to specify the way we want to get the list
    of chunks to rebuild
    event-agent: content_rebuilder write chunk to a file
    
    Still keep the format of the oio-blob-rebuilder but modify the chunk_id field
    so it can also be use for the position
    'container_id|content_id|(short_chunk_id||pos)'.
    The position is distinguished from the chunk_id by the size (inferior to
    32 digit)
    Meta2, event: fix content rebuild
    
    Add check of a partial content upload to comply with multipart upload of oiofs
    Add another verification for the event handler tests
    meta2: notify the sparse contents
    
    Add meta2_filter_action_check_content before action_put_content
    Check the size and the position of the all the chunks a content.
    Depending of the storage_policy some chunks can be rebuild (eg copy or ec)
    with the chunks already presents.
    If the chunks can be rebuild it send a event storage.content.broken containing
    "present_chunks":[{"id":"...","pos":"...","hash":"...","size":"..."}],
    "missing_chunks":[pos1,pos2,...,posn]
    if not return FILTER_KO.
    Add an event handler content_broken that permit to rebuild the missing chunks
    meta2: notify the sparse contents
    
    Add meta2_filter_action_check_content before action_put_content
    Check the size and the position of the all the chunks a content.
    Depending of the storage_policy some chunks can be rebuild (eg copy or ec)
    with the chunks already presents.
    If the chunks can be rebuild it send a event storage.content.broken containing
    "present_chunks":[{"id":"...","pos":"...","hash":"...","size":"..."}],
    "missing_chunks":[pos1,pos2,...,posn]
    if not return FILTER_KO.
    Add an event handler content_broken that permit to rebuild the missing chunks
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    Tests: Replace `requests` by `urllib3`
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    api: add functional tests around directory and container
    tests/directory: more flush/reload to remove obsolete services
    tests/func: starts to generate random user names
    tests/func/ref: fixed test case
    core: move python files around
    tests / directory: Fxies test case
    
    Now services are locked at first registration, it is easier to force their score.
    tests: commented broken tests (thanks to Couille d'Ours), split Container/Content.
    python: fixed func tests on containers
    python: fixed functional tests
    python / functional tests: now passes the pep8 check
    directory: functional tests cleaned
    python / func tests: fixed test case on references
    meta1: better functional tests result.
    Various beautifications
    
    agent: unused code removed
    cluster: uniform interface
    cluster: agent bypass
    conscience: func tests OK
    replace std json python lib with simplejson
    refactor functional tests config loading
    Python tests : code convention applied
    Python : gathered all tests
    Updated proxy tests
    Proxy and Rawx tests : corrected indentation
    Proxy and Rawx tests : cleaned and updated configuration procedures
    Proxy and Rawx tests : fixed indentation
    Rawx tests : automatized tests configuration and updated basic tests (to be continued) & Proxy tests : a few corrections
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    Proxy tests : corrected indentation
    Client and proxy tests : a few corrections
    Updated proxy tests & Added client property tests
    proxy tests : added README and improved conscience & directory tests
    proxy tests : fixed config issues
    Functional tests on conscience and directory functions for proxy
    Functional tests on conscience and directory functions for proxy
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    Python API, tests: improve Python3 compatibility
    Python API: another batch of python3 conversions
    ECD: Test the download
    ECD: Test the download
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    Minor fixes for Python 3
    
    Fixup remaing print keyword
    Use six to import StringIO
    test: Fix the test with the expected behavior
    Python API, meta2: Send the content ID to create an object
    Improve WORM mode tests
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Python API: fix requests ids and kwargs
    conf: Add the ability to set/get the variables of a running service
    
    Currently covers oio-proxy, oio-{sqlx,meta{0,1,2}}-server.
    
    The proxy is queried with the route `/v3.0/config` (GET and POST).
    
    The services are queried through the proxy with the route `/v3.0/forward/config?id=SRVID`.
    Python API: merge GeneratorReader and GeneratorIO classes
    tests: adapt to the last code reorganization
    Python API: code reorganization and documentation
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    Python API, tests: another batch of Python 3 fixes
    CLI: Improve 'openio-admin meta2 rebuild'
    Python API: Return the list of processed tasks when running a tool
    Python API: Delete old BlobRebuilder
    Go rawx: Allow to read old chunk
    CLI: hide not-implemented feature, fix chunk attr parsing
    proxy, Python API: support 'client specified' peers in more routes
    tests: factorize rawx type detection code
    Test old xattr
    Remove useless tests
    Test oio-blob-converter
    Test oio-blob-indexer
    oio-blob-{rebuilder,mover}: Accept old chunk to recreate new chunk
    Python API, tests: another batch of python3 conversions
    test: Deindex chunk when deleting chunk
    blob-indexer: do not warn on pending or just deleted chunks
    Test old xattr
    tests: speedup some tests
    Test the events of deleted chunks
    Remove useless tests
    Test oio-blob-converter
    Test oio-blob-indexer
    converter: Update the oio version only if the conversion was successful
    Python API, tests: another batch of Python 3 fixes
    CI: enable python3 unit tests
    
    Jira: R1910-1
    CLI: support checking object versions, log to files
    
    Support checking multiple object versions (only the latest was checked)
    with oio-crawler-integrity and 'openio-admin object check' (and related
    commands).
    
    Also allow 'openio-admin <item_type> check' to log to files, as does
    oio-crawler-integrity.
    
    Jira: OB-339
    oio-blob-converter: restore fullpath if grid.content.path or oio:HASH are missing
    proxy, Python API: support 'client specified' peers in more routes
    blob-converter: recover missing fullpath extended attribute
    Test old xattr
    tests: speedup some tests
    Remove useless tests
    Test oio-blob-converter
    Python API: Check size and hash when moving chunk
    Python API, tests: another batch of Python 3 fixes
    CLI: hide not-implemented feature, fix chunk attr parsing
    proxy, Python API: support 'client specified' peers in more routes
    Test old xattr
    Remove useless tests
    Test oio-blob-converter
    Test oio-blob-indexer
    oio-blob-{rebuilder,mover}: Accept old chunk to recreate new chunk
    rawx: fix behavior when chunk size attr is missing (again)
    rawx: fix behavior when chunk size attr is missing
    rawx: Improve missing xattr error messages
    blob-auditor: Adapt to the compression in the rawx
    
    F*ck, the auditor accesses the chunks without passing through the rawx.
    This is a bad idea, shortcuts are bad ideas, we must respect APIs
    rawx: skip tests invalidated by the presence of compression
    Python API, tests: another batch of Python 3 fixes
    Python API, tests: another batch of python3 conversions
    Python API: another batch of python3 conversions
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Tests: Move strange_paths to tests/utils
    Rawx: Test chunk hash without xattrs
    tests: Add some more tests to check chunk hash
    tests: implement a facility to wait for a specific event
    
    Event can be specified by type and/or request ID.
    add tests on HEAD for checksum
    Go rawx: Allow to read old chunk
    tests: factorize rawx type detection code
    Test old xattr
    rawx: Test the headers when putting chunk
    Remove useless tests
    rawx: Log with different severity and different output
    test: Wait until rawx is ready
    rawx: Skip unnecessary tests
    rawx: Check chunk ID
    tests: Adapt the test for rawx v2
    Test oio-blob-converter
    xattr: Get metadata and raw metadata
    Test oio-blob-indexer
    oio-blob-{rebuilder,mover}: Accept old chunk to recreate new chunk
    Update the copyright
    rawx: Test to read old chunk
    rawx: Test with the old fullpath
    rawx: Test strange fullpath
    rawx: Test 'COPY' with wrong source and destination
    rawx: Check content fullpath
    Python API, core: Add the content ID to the fullpath
    Python API: Factorize the encoding and decoding of the fullpath
    rawx: Remove fullpath when deleting a chunk
    rawx: Save fullpath with the associated chunk ID
    Add rawx fast copy
    Fix Flake8
    tests: fix python test
    Add container snapshot
    
    The snapshot take the form of:
    -A copy of the sqlite base of the target to a meta2 chose by the load balancer.
    -All the chunks of the snapshot are replaced by new chunk that hardlink the target one.
    -The snapshot is frozen afterward.
    
    The chunks hardlink implies that the target and the snapshot chunks are in the same rawx.
    Currently it is the client that freeze and enable the containers during the snapshot.
    common/http: Split to reduce dependencies
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    tests: relax "full-path" chunk tests
    
    Do not enforce the order of paths in the response header.
    Rawx: make it more robust against strange path
    Rawx: Add xattr oio_version and full_path
    
    Modify the client to send the header X-oio-chunk-meta-full-path:Acct/Container/Name
    Convert the header to the xattr oio.user:Acct/Container/Name=""
    rawx: lower memory usage (especially when writing) (fix #944)
    rawx: lower memory usage (especially when writing) (fix #944)
    tests: use liberasurecode_rs_vand as default backend
    merge python client api from oiopy into core
    
    integrate CLI
    review rdir and add metachunk_hash
    
    * get rid of useless metadata
    * add random in tests
    tests: actually test metachunk-size trailer support in rawx
    Make tests pass (#609)
    bootstrap: review config input
    rawx headers review: deal with trailers in tests
    core: move python files around
    python tests: fix chunk path for the new width/depth
    python tests: fix chunk path for the new width/depth
    tests: fix blob content-version missing header
    update libs and tests according to new rawx chunk metadata checks
    functional tests fixed on blob services (rawx)
    
    oio-bootstrap.py has been adapted to generated more valuable information.
    fix blob func tests
    
    add sds_path in test.conf file generated by oio-bootstrap.py
    fix blob func tests
    rename rawx tests to blob
    Python tests : code convention applied
    Python : gathered all tests
    Updated rawx tests
    Proxy and Rawx tests : corrected indentation
    Proxy and Rawx tests : cleaned and updated configuration procedures
    adds support for apache2 binary path on debian
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    Python API, tests: another batch of Python 3 fixes
    CI: enable python3 unit tests
    
    Jira: R1910-1
    oio-blob-converter: restore fullpath if grid.content.path or oio:HASH are missing
    blob-converter: recover missing fullpath extended attribute
    Test old xattr
    Remove useless tests
    Test oio-blob-converter
    Test oio-blob-auditor
    Test oio-blob-indexer
    oio-blob-{rebuilder,mover}: Accept old chunk to recreate new chunk
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    proxy, Python API: support 'client specified' peers in more routes
    Test old xattr
    tests: speedup some tests
    Remove useless tests
    Test oio-blob-converter
    Test oio-blob-auditor
    Python API, tests: improve Python3 compatibility
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    tests: complies to pep8, adds missing spaces
    tests: indent Python code to pass flake8
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    Python API, tests: improve Python3 compatibility
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Python API: add support for versions in object lists
    tests: complies to pep8, adds missing spaces
    tests: pep8 compliance for test_oiosds.py
    tests: adapts the proxy's Mock to return a chunk-method
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    tests: indent Python code to pass flake8
    test/sds: fixed test on containers listings.
    test/sds: fixed test for download
    
    The proxy's mock itself returned chunks with positions that were invalid for the case being tested.
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    proxy: V3 routes now used in core/, V2 routes removed from the proxy
    
    Some functional tests still require to be adapted (container, reference)
    core: fixed paths (now absolute) for make test (sds)
    core: aliases listing implemented.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    tests/func: Add much more tests
    
    ... especially with the `-m thorough` option
    tests/func: Test the chunk_size clamping
    core: Add function to delete directory
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    tests: uses the thread-local GRand
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    core/cs: API completed
    
    Also, the API has been made more robust to manage strings with '"' and UTF-8 characters in the JSON messages
    Hook'able clock function now used everywhere
    core: pseudo-object directory client continued + tests
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    core: Directory mock added
    cache/: Remove because unused
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    cmake: Explicit the ABI version of each shared library
    tests/func: Test the chunk_size clamping
    test/func: Add tests for libgridcluster
    tests/func: Reproduce the bug of an invalid service killing the proxies
    Add Python coverage
    Adapt the code to the central config
    tests: add tests of container with weird names
    cache: memcached and hiredis not built by default (#648)
    cmake: added 'Werror' in CFLAGS where there is no warning
    
    Warnings are the voice of Evil.
    
    Let's try to avoid them on targets already clean.
    core/cs: API completed
    
    Also, the API has been made more robust to manage strings with '"' and UTF-8 characters in the JSON messages
    core/cs: proxy instanciation + partial func test
    sqlx: 'create_db' vfunc method added to interface
    
    * create_db added to the interface
    * implementation added to the 'sds' client (link in the directory, then simple hit on the sqlx to autocreate)
    * no-op implem. added to the 'local' client'
    * tests of the 'local' client moved from 'func' to 'unit' tests
    * execution of a single statemeent now accepts NULL pointers as output placeholders, meaning the caller wants to ignore the output.
    sqlx: sqlxclient rename to oiosqlx
    tests: test_cache_lru moved from func to unit
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    test/cluster: Adapt a test to the file reorg
    cluster,metautils: Turn static some functions used once
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    tests/func: Remove conflicts markers
    test/func: Add tests for libgridcluster
    cluster/lib: Early prevent the service error in the client
    tests/func: Reproduce the bug of an invalid service killing the proxies
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    tests/http: fixed upload logic in the test
    C SDK: many fixes
    
    * parallel upload fixed.
    * streamed upload fixed
    * missing fields now sent to the rawx
    * slight redesign of single upload
    * minor API change for more clarity
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    tests: Fix a memory management warning
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    test/func: Add tests for libgridcluster
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    core/cs: interface slightly changed
    
    score now returned when listing services.
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    core/cs: API completed
    
    Also, the API has been made more robust to manage strings with '"' and UTF-8 characters in the JSON messages
    core/cs: fixed listing of services and types
    
    srv listing not yet functional (not parsed).
    core/cs: proxy instanciation + partial func test
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Update copyright mentions
    Tests: ensure Variables.md is up-to-date
    tests: make "test_weird_chars" more reliable
    
    (cherry picked from commit af6b3da0cc212dd24382c1323c684a9131222eba)
    tests: make "test_weird_chars" more reliable
    copyright: Update the mention of altered files
    core/log: Stop using the useless/unused flags
    
    * Impact only with stderr output
    * Remove a useless macro
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core: add oio_url_check to validate components
    
    The function will check:
    - if path is a valid UTF8 string
    - if version is a number
    - if namespace matchs with provided it
    core: add tests around container and object names
    tests: add tests of container with weird names
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    tests/func: Adapt the oio-sds client test suite
    Adapt the code to the central config
    Implement metachunk replacement
    
    This will allow optimized random writes (to change 1 byte, you will
    have to download and reupload only 1 metachunk, not the whole content).
    EC through gateway + rebase on master (#594)
    
    * fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    
    * event-agent: use basic http for account client
    
    * oio-bootstrap.py: fixed default schema for mail applications
    
    * metautils/lb: uses the local PRNG, uniform distribution (#582)
    
    Uses the local PRNG instead of the libc's rand(), with its guarantee on
    the uniform distribution over a given range.
    
    This should lead to better random and should fix the apparent preference
    for the first item.
    
    * Do not generate extra debug and asserts when building in RelWithDebInfo
    
    * core: implement upload and download through http gateway
    test/sds: fixed test for download
    
    The proxy's mock itself returned chunks with positions that were invalid for the case being tested.
    sqlx: 'create_db' vfunc method added to interface
    
    * create_db added to the interface
    * implementation added to the 'sds' client (link in the directory, then simple hit on the sqlx to autocreate)
    * no-op implem. added to the 'local' client'
    * tests of the 'local' client moved from 'func' to 'unit' tests
    * execution of a single statemeent now accepts NULL pointers as output placeholders, meaning the caller wants to ignore the output.
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    core: aliases listing implemented.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    CI: enable python3 unit tests
    
    Jira: R1910-1
    core/lb: allow disabling distance check optimization
    
    Introduce core.lb.allow_distance_bypass variable that disables some load
    balancing optimizations that may lead to unbalanced situations. Also add
    new tests.
    bin/*: Add copyright mentions
    common/utils: Split to reduce dependencies
    core: move python files around
    crawler/storage tiering: fix sample conf and bin/script export
    python/crawler/storage tiering: add crawler to change storage policy of old contents
    rdir: crawler added + rdir installed using oio-reset + fixes
    use /usr/bin/env for python scripts shebangs
    add blob mover
    blob-auditor: audit chunks
    python: now build with setupttools and pbr
    improve python cmake build
    event agent WIP
    core/lb: allow disabling distance check optimization
    
    Introduce core.lb.allow_distance_bypass variable that disables some load
    balancing optimizations that may lead to unbalanced situations. Also add
    new tests.
    core/lb: allow disabling distance check optimization
    
    Introduce core.lb.allow_distance_bypass variable that disables some load
    balancing optimizations that may lead to unbalanced situations. Also add
    new tests.
    core/lb: fix distance check optimization, add tests
    core/lb: allow disabling distance check optimization
    
    Introduce core.lb.allow_distance_bypass variable that disables some load
    balancing optimizations that may lead to unbalanced situations. Also add
    new tests.
    lb: investigate load-balancing issues
    
    Jira: OS-369
    core/lb: add new LB tests
    core/lb: allow disabling distance check optimization
    
    Introduce core.lb.allow_distance_bypass variable that disables some load
    balancing optimizations that may lead to unbalanced situations. Also add
    new tests.
    core/lb: allow disabling distance check optimization
    
    Introduce core.lb.allow_distance_bypass variable that disables some load
    balancing optimizations that may lead to unbalanced situations. Also add
    new tests.
    core/lb: add new LB tests
    tests/uni/nsinfo: Loop check for the encoding/decoding
    
    Helps detecting possible memleaks
    Python API: Respect minimum distance when rebalancing meta1 databases
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Make most unit tests pass in python3
    
    Please note that no test was broken in python2, this only add more
    compatibility to python3 as verified by the test suite.
    CI: run oio-reset.sh in quiet mode, produce less logs
    tests/unit: Comply to PEP8
    test/unit: Fix the failure expectations in meta0 bootstrap
    
    Thanks to @fvennetier
    cli: Make the resilience configurable upon a `directory bootstrap`
    directory bootstrap: Manage partial locations
    
    Set level=3 by default
    tests/unit: Add exhaustive tests around directory bootstrap
    cli: Better & Faster directory bootstrap
    oio-meta2-mover: Add script to move meta2 bases
    Python API, CLI: mostly working code to decommision meta1
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    meta0: improve directory bootstrap (fix #965)
    tests: more directory bootstrap tests
    merge python client api from oiopy into core
    
    integrate CLI
    Add tests of new meta0 utilities
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    License: OpenIO -> OpenIO SAS
    Re-licenses to Affero cache/ and some test-reltaed files
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core + sqlx_service : still more pragmatic usage of GRand
    Fixed several optimisations around up/down services
    
    There were partition/shuffle problems when looping on lists of services.
    * the ok/nok qualification of services didn't work (in the resolver)
    * the shuffling was potentially broken by a subsequent partition ok ok/nok services.
    * both weren't called at all in several cases.
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    core: added features to shuffle and partition arrays.
    
    These will be necessary for the resolvers to manage array of targets:
    * shuffling to avoid hitting always the same target
    * partioning to prefer services with no known problems.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    OpenIO is lifting off now !
    Finer gauges for active threads, reliable accesslog delays
    
    This patch provides the maximum number of active threads, and a round-robin storage for that information.
    The granularity proposed is intervals of 1s over the past 30s, and intervals of 1 minute over the past 1 hour.
    This data is used by the core server library to expose statistics, e.g.
    
            server.thread.max.1 = 0
            server.thread.max.5 = 1
            server.thread.max.15 = 2
            server.thread.max.30 = 2
            server.thread.max.60 = 3
            server.thread.max.300 = 3
            server.thread.max.900 = 3
            server.thread.max.3600 = 3
    
    This patch also alters the accesslog format for gridd transports, and it is now unified with http transport.
    An access log record now provides 2 treatment durations:
    - the total time spent since the reception of the last buffer that completes the request
    - the total treatment time, from the moment where a worker thread starts the request handling til the moment an answer is generated.
    The delta between both delays is the time spent in the internals queues of the process.
    
    The patch divides in:
    - server/stats_holder.* :
      - drops the adherence to system time, the current timestamp is now received from the caller. This is necessary to manager counter with a granularity different than 1s.
      - New calls to compute the cumulative maximum
      - code simplification
    - server/network_server.* :
      - new round-robin stats now managed
      - new stats exposed.
      - precise monotonic clock used on the last input
    - server/transport_http.c :
      - useless variables removed.
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - server/transport_gridd.c :
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - sqlx/sqlx_service.c :
      - code adapted to match the lost "time adherence"
    
    Change-Id: I248ae7a1937860e4062290e95b68465d7ec62821
    tests: run dummy server with invalid bind address
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    OpenIO is lifting off now !
    Test CLI tools factorized.
    
    Change-Id: Ic45d6ff997ba1bb9d940d56ec91836856fb4f1c4
    1.8.4 release candidate
    Initial commit
    tests/variable_period: Fix the unit tests
    meta*,sqlx: Make configurable the period of the DB decaches
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    tests/unit: Test for possible strings truncations
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core: simplifies the signature of autocontainers functions
    core+metautils: code cleanup, functions {re,}moved
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    Useless/Unused functions removed
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    Speeds up the startup of services.
    
    More agressive delays for:
    * LB refresh
    * prefix loading in meta1
    
    The period between the iterations is shortened until the first success.
    Fixes, improvements
    
    m2v2: fixed "bean leak" when purging exceeding aliases (properties not removed).
    m2v2: fixed "bean leak" when deleting explicit aliases (properties not removed).
    proxy: Fixed compile-time warnings
    proxy: properties returned in headers when getting objects
    proxy: headers matching now case-insensitive
    proxy: In addition, request handlers returning invariable and dummy outputs (empty lists, empty sets) now return nothing.
    tools: bootstrap doesn't deploy the admin flask (it is destined to disappear in the next release and is already used by no one).
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    OpenIO is lifting off now !
    Test CLI tools factorized.
    
    Change-Id: Ic45d6ff997ba1bb9d940d56ec91836856fb4f1c4
    1.8.4 release candidate
    events: Test simplification (game on macros)
    
    No need for an extra macro, HAVE_EXTRA_DEBUG is enough.
    Thanks to @murlock
    events/beanstalkd: Split the code for more clarity
    
    * Flush the queues when exiting
    * Loop more often to avoid delaying for too long
    * Force a max delay to exit
    * Alert for lost events
    events: Give each tube an internal thread
    
    It has to be explicitely started with a new call of the signature:
    `start`.
    events: Remove zmq (unused) and configure the tube per queue
    Add unit tests around the beanstalkd connector
    Fix the events/beanstalkd unit test
    
    The former rigid test did not represent the new expected sollicatation.
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    server: Allow an action when SIGHUP has been raised
    conf: Move the FD limits in the central config
    events / beanstalkd: now checked with unit tests
    Fix sqliterepo election tests with ZooKeeper 3.5
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    sqliterepo: more request IDs
    test/unit/election: Adapt to the latest FSM
    sqliterepo: Emit a MASTER flag in DB_USE
    Change default option value to true
    Create option to force a service to deny the role of MASTER in any election
    sqliterepo: Keep pointer on election to avoid lookups
    
    This leads to smaller structures (the pointer is smaller than the name
    components) and less CPU, and requires recounts to be well handled.
    sqliterepo: Defer syscalls out of  the critical section
    metautils,sqlx,tests: Get rid of the useless gridd_client_factory
    
    That pseudo object was never used!
    sqliterepo/election: Remove obsolete code
    
    Synchronuous completions are considered harmful, they slow the ZK
    background thread down.
    test/unit/election: Add test cases on recent transitions
    sqliterepo/election: Avoid looping on GETVERS
    sqliterepo/election: Simplify the delay between GETVERS attempts
    
    The mechanism must be reviewed, for sub-second reactivity.
    sqliterepo/election: Introduce deferred GETVERS reloads
    
    After failures in CHECKING_{SLAVES,MASTER}
    sqliterepo/election: Add unit tests for the 2 new states
    
    (cherry picked from commit 08496d12d20718c3836ae6162363e179eba20397)
    test/election: Adapt the unit test suite to the PEERING state
    sqliterepo: Evoid calling election_get_status when DB not replicated
    sqliterepo: Refine the conditions to autocreate a missing DB
    
    Also make configurable the auto-recovery of missing DB
    sqliterepo/election: Add unit tests for the 2 new states
    tests/unit/election: Exhibit a possible loop
    Sqliterepo: add check of 'when_unstable' for every state
    Sqliterepo: Fix election SLAVE state
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo: Shard the elections on several ZK
    sqliterepo/sync: Remove unused code
    Avoid allocating memory for small strings with a bounded size
    
    Rather use character arrays located on the stack or inlined into their
    owner structures.
    sqliterepo: Fix an non-intuitive macro name and typo in its comment
    sqliterepo: Move strings handlings onto the stack
    events, rawx: Reduce the number of calls to realloc() and strlen()
    sqliterepo/election: also allows synchronous completions hook
    
    Disabled by default
    For testing purposes
    sqliterepo/election: saved 24 bytes per member structure
    
    * 8B saved while changing ID from gint64 to gint32 (enough according to
      the ZK spec at https://zookeeper.apache.org/doc/r3.4.8/zookeeperProgrammers.html#Sequence+Nodes+--+Unique+Naming
    * (1B * EVENTLOG_SIZE) saved with a packed log structure
    tests: fixed tests cases around STEP_CHECKING_MASTER
    sqliterepo/election: 3 tries of GETVERS on network errors
    sqliterepo/election: pre-SLAVE only check the possible MASTER
    
    This change suppresses `(N-1) * (N-2)` GETVERS messages per election in
    a group of `N` members.
    sqliterepo/election: cleaner trasitions the FSM
    
    The goal of the commit is to prevent entering a state with several
    pending callbacks that can trouble the transitions and cause messages
    storms.
    
    Only the completion events make the FSM (finite state machine) step
    forward. All the "interruptions" events are delayed until the normal
    actions are all done.
    
    Summary of the changes:
    
    * general renaming of the states to more intuitive names that denote the
      action that is pending. LEADER -> MASTER, LOST -> SLAVE.
    * new states added, so that at most one action is pending in each state.
      specially PRELOST that becomes [ASKING,CHECKING_MASTER] and CANDOK
      that becomes [WATCHING,LISTING].
    * new state added to leave-and-then-fail, instead of leaving then
      retrying.
    * Tests, tests, test. Despite the FSM is not 100% covered yet, the major
      transitions are now checked.
    * Timers simplified: since we wait for actionns before leaving an FSM
      state,.the necessity to retry an election is vastly simplified and
      only occurs from the NONE state.
    * A jitter has been introduced before sending a ping (USE) from a final
      state.
    
    Despite the result should be more stable, robust and resilient, this is
    a big set of changes and one shoould take care of possible unexpected
    effects. Especially of elections that could go more often than necessary
    in the FAILED state, and then undergo a 5s timer before the retry.
    (Prior to this commit, we would have loop-retry more often than
    necessary.)
    proxy: prefer MASTER for writing, SLAVE for reading
    tests: uses the thread-local GRand
    sqlx: fixes on the DEQUE management
    sqlx: limits the number of timers fired at each step
    
    + fields renamed to match the expectations for a DEQUE
    sqlx: elections now stored in "per-status" lists
    
    Helps managing properly long lists of items with timers set.
    sqliterepo/election: memleak chased
    sqliterepo: interface reduction
    
    Attempt to simplify the code before re-organizing it into pseudo-objects suitable for tests.
    tests / unit: loops added around sqliterepo elections to emphasize leaks.
    tests/unit: still more coverage for sqliterepo
    tests/unit: still better coverage for sqliterepo
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Move lrutree.* from metautils/ to core/
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    lru: removes unused code
    core/cs: API completed
    
    Also, the API has been made more robust to manage strings with '"' and UTF-8 characters in the JSON messages
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    tests/unit: still more coverage for sqliterepo
    tests/unit: better sqliterepo coverage
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    OpenIO is lifting off now !
    1.8.4 release candidate
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    OpenIO is lifting off now !
    test code factorized
    
    Change-Id: Iefdfdd808cfc476faaec8b6e343b7636d7720c6f
    1.8.4 release candidate
    tests/unit: Test for the possible truncation service ID
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    4th cleanup, unused code purged from metautils
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Fixed service push to the conscience + Cleanup, round 8
    
    * The last cleanup commit was named #6, but this was a mistke, there was already a #6.
    * Code factorized
    * Useless code removed
    * Codec functions simplified.
    ASN.1 addresses simplified
    
    In addition, we got rid of a legacy of the redcurrant's early days, where ports were encoded on 4 bytes integers.
    OpenIO is lifting off now !
    Test CLI tools factorized.
    
    Change-Id: Ic45d6ff997ba1bb9d940d56ec91836856fb4f1c4
    test code factorized
    
    Change-Id: Iefdfdd808cfc476faaec8b6e343b7636d7720c6f
    1.8.4 release candidate
    sqliterepo: Remove unused code
    meta2: Send position to rebuild in a string
    Reorganize the libraries, Avoid a loop on the proxy
    meta2: Drop the unused content deduplication
    meta2: Allow to add delete marker to a specific version
    m2, tests: fix memory leaks
    m2: send notifications for deleted properties
    
    Property that have changed (creation, modification or deletion) are now
    properly reported in storage.content.new and storage.content.update
    events.
    - A property with a value indicates a creation or modification
      (the value is the new one).
    - A property with a null value indicates a deletion.
    
    Fixes: #1667
    Update Copyright
    meta2: Increase missing chunks when creating an object
    meta2: Send event to notify the modification of properties
    
    (cherry picked from commit 7057a1e53d46fceadde84e68e06b5cbd4c085c31)
    meta2: Don't link a deleted alias to a content
    meta2: Check if the last metachunks are present
    meta2: Create a message for the event only if the content is incomplete
    meta2: Send the correct list of missing chunks
    meta2: Test the check of missing chunks
    test: fix test on version
    meta2: parse chunk qualities, send event if required
    proxy: forward special property beans
    
    Jira: R1810-27
    meta2: Send event to notify the modification of properties
    Update the copyright
    meta2: Require content ID when creating an object
    meta2: Limit the number of deleted object when flushing
    meta2: Send events to remove the chunks when flushing a container
    meta2: Delete exceeding versions when adding a new alias
    core/lb: prevent writes while under reader lock
    meta2: refuse objects versions older than latest
    
    This is to prevent a data loss happening when a high-level retry
    (from a client) is executed before a low-level retry (from the proxy).
    core/var: Introduce a readonly flag on the variables
    
    * The variables set at the CLI receive the flag.
    * readonly variables are not reset
    * a specific function is used to force a variable to a readonly value,
      and it can be used to force a behavior, programmatically.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    tests: Replace C++ bool keywords with glib2 gboolean macros
    Meta2: fix memory leak in m2db_check_content
    
    The memory leak was caused by a GSList not freed in each node of
    sorted_content.metachunks
    
    (cherry picked from commit e380fc9afa732023209537b8d5283bee3a1232e2)
    Meta2: fix memory leak in m2db_check_content
    
    The memory leak was caused by a GSList not freed in each node of
    sorted_content.metachunks
    test/meta2: Fix to match the central config variables
    cluster: Remove the useless "chunk_size" field from the nsinfo
    
    Also remove it from the ASN.1 structure.
    Everything has been migrated to the central configuration facility.
    cluster: Remove the useless "options" field from the nsinfo
    
    Also remove it from the ASN.1 structure.
    Meta2, event: fix content rebuild
    
    Add check of a partial content upload to comply with multipart upload of oiofs
    Add another verification for the event handler tests
    meta2: notify the sparse contents
    
    Add meta2_filter_action_check_content before action_put_content
    Check the size and the position of the all the chunks a content.
    Depending of the storage_policy some chunks can be rebuild (eg copy or ec)
    with the chunks already presents.
    If the chunks can be rebuild it send a event storage.content.broken containing
    "present_chunks":[{"id":"...","pos":"...","hash":"...","size":"..."}],
    "missing_chunks":[pos1,pos2,...,posn]
    if not return FILTER_KO.
    Add an event handler content_broken that permit to rebuild the missing chunks
    conf: Move the FD limits in the central config
    Adapt the code to the central config
    proxy: Allow to ask for master only in meta2 RPC
    
    Currently, only upon /content/show and /content/locate
    test/meta2: fixed memleak
    sqliterepo/cache: prevents threads starvation
    
    Get rid of the old model with a fixed-number of GCond used to bucketize
    all the DB accesses.
    
    Now one couple of GCond (normal, prio) is associated to each cache item,
    and this is better since the lifetime of each item is the whole
    execution.
    
    In addition, the notion of maximum bases used has been reviewed to allow
    slight changes on the effective maximum. Now we propose one "hard"
    maximum used to allocate structures at init time, and one "soft" maximum
    that can be freely changed between (0,hard].
    Fix meta2 backend and storage policy tests
    lb: remove g_alloca() from loops
    m2v2: integrate new load balancer
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    tests: uses the thread-local GRand
    m2: add a cache of DB entries required for M2_PREPARE
    
    This prevents opening the database in most cases,
    and thus saves IO.
    proxy,resolver: expresses delays in monotonic time precision
    
    One step further in the uniformisation of the TTL and Delays management
    that previously mixed gdouble (seconds), time_t (second) and gint64
    (monotonic clock).
    
    The monotonic clock is the law!
    sqliterepo/election: memleak chased
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    Useless/Unused functions removed
    proxy: container/destroy plainly destroys the containers and their references
    
    * a container destruction is now: 1/freeze 2/flush 3/unlink 4/destroy(local)
    * meta2 slighty simplified around PURGE/DEDUP/FLUSH, where the dry_run options have disappeared.
    sqlx: 'create_db' vfunc method added to interface
    
    * create_db added to the interface
    * implementation added to the 'sds' client (link in the directory, then simple hit on the sqlx to autocreate)
    * no-op implem. added to the 'local' client'
    * tests of the 'local' client moved from 'func' to 'unit' tests
    * execution of a single statemeent now accepts NULL pointers as output placeholders, meaning the caller wants to ignore the output.
    sqliterepo: speed-up the schema checks
    
    * sqliterepo: the checks of the schema are now performed with lowered security, to avoid useless transaction syncs.
    * sqliterepo: got rid of the useless "version" provided when checking for the schema
    * meta0: removed the useless "vacuum" in the schema.
    * meta0/meta1/sqlx/tests: adapted to the changes previously listed.
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    tests: meta2_backend now passes
    Hook'able clock function now used everywhere
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    Dropped the dependency to the Linux's specific clock functions.
    m2v2: backend fixed (URL problem)
    m2v2: adapted to the presence CONTENT in oio_url.
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    Volume lock factorized (rawx) and moved from the repository to the service.
    m2v2: code simplifications and memleaks fixes around namespace_info structures
    m2v2: make the functional tests pass.
    m2v2: append feature reviwed with new semantics.
    m2v2: systematically play the tests for 4 versioning modes.
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    core : explicit content links implemented.
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    m2v2: when listing a container's aliases, the container's metadata are also returned.
    
    In addition, unused code have been pruned from meta2.
    That code has been released with integrity-loop's removal.
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    m2v2 + sqlx + proxy : set properties on contents and containers now manage a flush options and deletion by null value.
    Content propeties reviewed + Cleanup, round 2
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    (FVE & GLA) : local base creation + operations allowed on local bases
    
    allow BEANS, PUT, GET, LIST and DELETE on local bases.
    
    Change-Id: I07b0e38352f9e4a3a4c1dd3031e9270ebd800d36
    (FVE & GLA) : local base creation + operations allowed on local bases
    
    allow BEANS, PUT, GET, LIST and DELETE on local bases.
    
    Change-Id: I783322d68d407f32bd9da68b16da90e50ede239b
    1.8.4 release candidate
    Initial commit
    cache/: Remove because unused
    Reorganize the libraries, Avoid a loop on the proxy
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    cmake,ci: Restore the SDK_ONLY option
    core: Removes a useless test on the logger
    tests: autodetect LB tests environments
    tests: run dummy server with invalid bind address
    sqliterepo: Add unit tests for the active clients limit
    tests/uni/nsinfo: Loop check for the encoding/decoding
    
    Helps detecting possible memleaks
    meta*,sqlx: Make configurable the period of the DB decaches
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta1: Add unit tests
    coverage: Avoid files generated by asn1c
    
    These files contain a lot of unused code.
    tests/unit: sysstat now tested
    events / beanstalkd: now checked with unit tests
    Remove last traces of old load balancer
    m2v2: integrate new load balancer
    lb: review for more efficiency
    events: insulates module, adds beanstalkd implementation
    sqliterepo/election: memleak chased
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    cmake: added 'Werror' in CFLAGS where there is no warning
    
    Warnings are the voice of Evil.
    
    Let's try to avoid them on targets already clean.
    core/cs: API completed
    
    Also, the API has been made more robust to manage strings with '"' and UTF-8 characters in the JSON messages
    sqlx: 'create_db' vfunc method added to interface
    
    * create_db added to the interface
    * implementation added to the 'sds' client (link in the directory, then simple hit on the sqlx to autocreate)
    * no-op implem. added to the 'local' client'
    * tests of the 'local' client moved from 'func' to 'unit' tests
    * execution of a single statemeent now accepts NULL pointers as output placeholders, meaning the caller wants to ignore the output.
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    tests: test_cache_lru moved from func to unit
    tests/unit: still more coverage for sqliterepo
    tests/unit: still better coverage for sqliterepo
    tests/unit: better sqliterepo coverage
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    Stop accepting composed service types
    core,m1,m2: check container name is valid UTF-8
    
    Jira: OS-100
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core: add oio_url_check to validate components
    
    The function will check:
    - if path is a valid UTF8 string
    - if version is a number
    - if namespace matchs with provided it
    core: stronger checks around URL handlings
    core/url: '+' now decoded as a ' ' in query strings
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    core: URL tests fixed
    core: URL now have mandatory accounts and a content field.
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    core: hc_url renamed to oio_url.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    metautils: fixed hc_url parsing.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    OpenIO is lifting off now !
    Test CLI tools factorized.
    
    Change-Id: Ic45d6ff997ba1bb9d940d56ec91836856fb4f1c4
    hc_url now lighter.
    
    Get rid of the GHashTable for options. We went to a simple GSList implementation.
    It was too heavyweight when the only use case manages at most 3 tuples...
    1.8.4 release candidate
    Initial commit
    events: Give each tube an internal thread
    
    It has to be explicitely started with a new call of the signature:
    `start`.
    events: Remove zmq (unused) and configure the tube per queue
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    Adapt the code to the central config
    events: insulates module, adds beanstalkd implementation
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Move the minimal rrd from server to metautils
    
    It prepares a change coming soon in sqliterepo, that requires the simple
    RRD implementation.
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    OpenIO is lifting off now !
    Finer gauges for active threads, reliable accesslog delays
    
    This patch provides the maximum number of active threads, and a round-robin storage for that information.
    The granularity proposed is intervals of 1s over the past 30s, and intervals of 1 minute over the past 1 hour.
    This data is used by the core server library to expose statistics, e.g.
    
            server.thread.max.1 = 0
            server.thread.max.5 = 1
            server.thread.max.15 = 2
            server.thread.max.30 = 2
            server.thread.max.60 = 3
            server.thread.max.300 = 3
            server.thread.max.900 = 3
            server.thread.max.3600 = 3
    
    This patch also alters the accesslog format for gridd transports, and it is now unified with http transport.
    An access log record now provides 2 treatment durations:
    - the total time spent since the reception of the last buffer that completes the request
    - the total treatment time, from the moment where a worker thread starts the request handling til the moment an answer is generated.
    The delta between both delays is the time spent in the internals queues of the process.
    
    The patch divides in:
    - server/stats_holder.* :
      - drops the adherence to system time, the current timestamp is now received from the caller. This is necessary to manager counter with a granularity different than 1s.
      - New calls to compute the cumulative maximum
      - code simplification
    - server/network_server.* :
      - new round-robin stats now managed
      - new stats exposed.
      - precise monotonic clock used on the last input
    - server/transport_http.c :
      - useless variables removed.
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - server/transport_gridd.c :
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - sqlx/sqlx_service.c :
      - code adapted to match the lost "time adherence"
    
    Change-Id: I248ae7a1937860e4062290e95b68465d7ec62821
    sqliterepo: Remove unused code
    meta1: Decache when deleting meta1 database
    m1: resolve account and cname only when asked
    
    This is to avoid problems during migrations from pre 4.4.0 versions.
    proxy,m1: resolve CID to acc/cont on /reference/show requests
    
    - Add the account and the container name of the requested reference
    to the SRV_LIST reply as prefixed strings.
    - Extract account and container name from the SRV_LIST reply
    and fill the oio_url_s object passed as a parameter.
    - Include the resolved acc/cont in the /reference/show reply.
    core/lb: prevent writes while under reader lock
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta1: Add unit tests
    sqliterepo: prevent deadlock during database deletion
    Adapt sqliterepo to manage deadlines (cache, elections)
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    conf: Move the FD limits in the central config
    sqliterepo/cache: prevents threads starvation
    
    Get rid of the old model with a fixed-number of GCond used to bucketize
    all the DB accesses.
    
    Now one couple of GCond (normal, prio) is associated to each cache item,
    and this is better since the lifetime of each item is the whole
    execution.
    
    In addition, the notion of maximum bases used has been reviewed to allow
    slight changes on the effective maximum. Now we propose one "hard"
    maximum used to allocate structures at init time, and one "soft" maximum
    that can be freely changed between (0,hard].
    sqliterepo: give priority to DB_GETVERS and DB_REPLI
    proxy: prefer MASTER for writing, SLAVE for reading
    tests: uses the thread-local GRand
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    tests/unit: still better coverage for sqliterepo
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    tests: update FakeConn
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Solve every unit test for python3
    Python API: enable TCP_CORK, avoid buffer copies
    Python API: Fix concurrency
    Python API: remove obsolete function
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    tests: pep8 minor fixes
    api: fix missing failed chunk in EC
    merge python client api from oiopy into core
    
    integrate CLI
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    tests: Remove commenetd code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    tests: Fix a minor memleak
    cluster: Remove the useless "chunk_size" field from the nsinfo
    
    Also remove it from the ASN.1 structure.
    Everything has been migrated to the central configuration facility.
    cluster: Remove the useless "options" field from the nsinfo
    
    Also remove it from the ASN.1 structure.
    Fix meta2 backend and storage policy tests
    Review storage policy and service pool configuration
    m2v2: integrate new load balancer
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    Storage policy cleaned, storage class explicit loading
    
    Now able to load a storage class explicitely, out of any storage policy context. This is necessary for the metacd-http to process load-balancing requests with stgclass constraints. In facts, the metacd_http simply wraps the calls to metautils/lib/lb.h API.
    
    A corner case has been managed, when a storage class exists but must not have fallbacks. It was necessary to declare the storage class with an empty configuration.
    
    Then, the code has been cleaned, simplified and reordered by purpose.
    
    Change-Id: Ibd66594d53666f5ca4d1fab6d4226e1dc17ba95d
    sqliterepo: Add unit tests for the active clients limit
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    License: OpenIO -> OpenIO SAS
    Re-licenses to Affero cache/ and some test-reltaed files
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    tests/unit: sysstat now tested
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo/cache: prevents threads starvation
    
    Get rid of the old model with a fixed-number of GCond used to bucketize
    all the DB accesses.
    
    Now one couple of GCond (normal, prio) is associated to each cache item,
    and this is better since the lifetime of each item is the whole
    execution.
    
    In addition, the notion of maximum bases used has been reviewed to allow
    slight changes on the effective maximum. Now we propose one "hard"
    maximum used to allocate structures at init time, and one "soft" maximum
    that can be freely changed between (0,hard].
    sqliterepo/election: memleak chased
    sqliterepo: dirty admin fleg cleared when admin table reloaded.
    sqliterepo: speed-up the schema checks
    
    * sqliterepo: the checks of the schema are now performed with lowered security, to avoid useless transaction syncs.
    * sqliterepo: got rid of the useless "version" provided when checking for the schema
    * meta0: removed the useless "vacuum" in the schema.
    * meta0/meta1/sqlx/tests: adapted to the changes previously listed.
    tests/unit: still more coverage for sqliterepo
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    OpenIO is lifting off now !
    Test CLI tools factorized.
    
    Change-Id: Ic45d6ff997ba1bb9d940d56ec91836856fb4f1c4
    1.8.4 release candidate
    Add a unit test around the avoidance of the down peers
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    metautils / gridd_client: fixed test case naming
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Slab allocation for small structures + ASN.1 message simplification
    Slab allocation for small structures + ASN.1 message simplification
    Get rid of an old rename trick born in redcurrant.
    OpenIO is lifting off now !
    metautils : socket_* functions names normalized
    
    Change-Id: Id0b227816c8067e99f0e6a104ac7b0b24c9fed69
    1.8.4 release candidate
    tests: modularize LB tests
    metautils: implement facility to load services from a file
    core/lb: fix distance check optimization, add tests
    core/lb: allow disabling distance check optimization
    
    Introduce core.lb.allow_distance_bypass variable that disables some load
    balancing optimizations that may lead to unbalanced situations. Also add
    new tests.
    core/lb: tolerate weird pool configurations
    
    Jira: OS-314
    core/lb: keep track of the quality of selected services
    core/lb: fix the size of LB item struct
    tests: fix minor memory leaks in test_lb.c
    tests: improve LB tests, add real life cases
    tests: check that LB does not count zero-scored services
    tests: autodetect LB tests environments
    Fix test with new size of struct oio_lb_item_s
    Core/lb: Associate UUID with addr
    core/lb: prevent writes while under reader lock
    core/lb: add new LB tests
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    License: OpenIO -> OpenIO SAS
    Re-licenses to Affero cache/ and some test-reltaed files
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    tests: add some more LB tests
    tests: add some more LB tests
    core/lb: better error handling, warn if flawed
    core/lb: detect max_dist when loading services
    core/lb: review the configuration
    
    Simplify the configuration of the service pools (and the code).
    Do not use bit mask, use bit shifts before comparing locations.
    The location requirements are now expressed by "distance".
    By default, there is nothing to set: the biggest distance requirements
    will be tried, and then loosened if not satisfiable.
    core/lb: improve balancing in tight situations
    
    Avoid selecting too many service of a same location, by checking
    the "popularity" of service locations selected so far.
    tests: add 4 big LB tests for a real life case
    New LB tests for tight platforms
    
    Check how many unbalanced repartitions we get on platforms where
    there is not enough locations to ensure a perfect data securing.
    
    For example, when there is 3 host with 4 services each, and we ask
    for 9 services, the load-balancer sometimes returns 4 services from
    the first host, 2 from the second and 3 from the third,
    whereas we expect 3, 3 and 3.
    New LB tests for tight platforms
    
    Check how many unbalanced repartitions we get on platforms where
    there is not enough locations to ensure a perfect data securing.
    
    For example, when there is 3 host with 4 services each, and we ask
    for 9 services, the load-balancer sometimes returns 4 services from
    the first host, 2 from the second and 3 from the third,
    whereas we expect 3, 3 and 3.
    metautils,tests: fix LB location from IPv6, add tests
    tests/lb: fixed minor one-shot memleak
    
    Raised only in the tests
    lb: fix generation of locations from addresses and add tests
    tests/lb: relaxes the accepted drift to 20%
    Remove last traces of old load balancer
    m2v2: integrate new load balancer
    lb: review for more efficiency
    tests: implement LB tests with 'weak' distance requirements
    lb: better error messages (#570)
    
    Fix #567
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    sqlx: 'create_db' vfunc method added to interface
    
    * create_db added to the interface
    * implementation added to the 'sds' client (link in the directory, then simple hit on the sqlx to autocreate)
    * no-op implem. added to the 'local' client'
    * tests of the 'local' client moved from 'func' to 'unit' tests
    * execution of a single statemeent now accepts NULL pointers as output placeholders, meaning the caller wants to ignore the output.
    Hook'able clock function now used everywhere
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    Dropped the dependency to the Linux's specific clock functions.
    cluster: stat.io restored in service_info descriptions.
    
    In addition, useless/unused code has been removed.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    OpenIO is lifting off now !
    Load-balancing cleanup.
    
    The starting point of this patch was allowing a caller (i.e. the metacd_http) to use an iterator different than those specified in the NS configuration. In other words, to thinly wrap the API.
    
    Some code reorganisation took place:
      - function reordering (to be grouped by puposes)
      - obsoletes removals (scored iterators ... meaningless since the score is the weight).
      - functions moved in others modules (checks on the storage class of services, moved into service_info)
      - code factorized (minor container handling, in metautils_containers)
    
    Change-Id: I625fd9413e0fa01d68d085f93160c026b9744c0f
    test code factorized
    
    Change-Id: Iefdfdd808cfc476faaec8b6e343b7636d7720c6f
    1.8.4 release candidate
    Initial commit
    meta2: Keep the same ctime if the object already exists
    lifecycle: Save a random ID if there is no ID in the configuration
    lifecycle: Format configuration
    lifecycle: Improve tests
    lifecycle: Update the tests
    lifecycle: Check the XML schemas
    lifecycle: Test the filter with S3 tags
    lifecycle: Change architecture
    Python API: implement LifeCycle rules matching
    Python API: implement LifecycleConfiguration parsing
    Python API: implement LifecycleConfiguration parsing
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    Update test suite to make it compatible with py3
    
    This commit introduce changes in the test suite and potentially changes
    in the programming interface of each function. It should be treated with
    caution.
    Python API: raise ServiceBusy when no chunk quorum
    
    Raise a ServiceBusy error when writing an object and the quorum of the
    chunks is not reached, and this cannot be attributed to a timeout.
    
    Jira: OS-434
    tests: minor fixes for pep8 and pylint
    tests: minor fixes for pep8 and pylint
    tests: Update copyright mentions
    tests: Fix a weird indentation
    Python API: Fix concurrency
    Python API: allow disabling client-side chunk checksums
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    Rawx: Add xattr oio_version and full_path
    
    Modify the client to send the header X-oio-chunk-meta-full-path:Acct/Container/Name
    Convert the header to the xattr oio.user:Acct/Container/Name=""
    Python API: refactor, improve error messages (fix #1048)
    Python API: convert eventlet Timeout to OioTimeout
    tests/unit: Update the test of replicated uploads
    
    ... to match the latest expectations of the oio.api.io.WriteHandler
    Python API: improve download error messages
    tests/unit: Update the test of replicated uploads
    
    ... to match the latest expectations of the oio.api.io.WriteHandler
    Python API: improve download error messages
    Python API: merge GeneratorReader and GeneratorIO classes
    oio: clean separation of green code
    merge python client api from oiopy into core
    
    integrate CLI
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Solve every unit test for python3
    Update test suite to make it compatible with py3
    
    This commit introduce changes in the test suite and potentially changes
    in the programming interface of each function. It should be treated with
    caution.
    Python API: improve exception handling
    
    Improve exception messages.
    Never return 'green' timeouts to client applications.
    Python API: change exceptions originating from rawx
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    oio: clean separation of green code
    merge python client api from oiopy into core
    
    integrate CLI
    Python API: use REQID_HEADER constant everywhere
    Python API: do not raise Conflict after retrying POST
    oio: Comply to the latest PEP8 rules enfroced by flake8
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    HttpApi: Remove 'requests' to use 'urllib3'
    Python API: get rid of DirectoryAPI (replaced by DirectoryClient)
    api: add functional tests around directory and container
    api: adapt to new properties handling
    cli: add more functional tests
    merge python client api from oiopy into core
    
    integrate CLI
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Python API: implement BlobImprover on top of Rebuilder
    
    Jira: R1810-28
    python: Adapt the unit tests to the policy of retrial
    Python API: do not raise Conflict after retrying POST
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Python API: Allow to paginate the status of the volume
    Python API: use REQID_HEADER constant everywhere
    CLI: implement 'openio-admin <item_type> check'
    Relocate python api tests and fix indentation errors
    
    - Fix indentation errors in test_events_emission.py test suite.
    - Relocate python API mocked tests to tests/unit/api and make sure
    they use dummy namespaces instead of pre-loading the configuration.
    - Fix a problem where the RdirClient didn't correctly pass the
    endpoint to the superclass constructor.
    Add python sdk rdir api tests
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    review rdir and add metachunk_hash
    
    * get rid of useless metadata
    * add random in tests
    core: move python files around
    tests / rdir: moves the client suite of tests to functional
    
    The suite currently depends on an environement (at least for the test.conf file).
    tests / rdir: moves the client suite of tests to functional
    
    The suite currently depends on an environement (at least for the test.conf file).
    rdir: fetch: use list instead of dict to preserve entries order
    rdir: move functionnal tests to unit tests
    rdir: add new commands to client + client bypasses the proxy to contact rdir server
    rebuilder: use new lock commands to avoid two rebuild at the same time
    rdir: add rebuild crawler to rebuild chunks on the same valume after its replacement
    proxy+rdir: add actions to fetch the index and to show rebuild status
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Update test suite to make it compatible with py3
    
    This commit introduce changes in the test suite and potentially changes
    in the programming interface of each function. It should be treated with
    caution.
    Python API: Fix concurrency
    Python API: allow disabling client-side chunk checksums
    Python API: do not raise Conflict after retrying POST
    common/http: Split to reduce dependencies
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    HttpApi: Remove 'requests' to use 'urllib3'
    account: facatorize code, add documentation (fix #1054)
    Python API: merge GeneratorReader and GeneratorIO classes
    Python API: get rid of DirectoryAPI (replaced by DirectoryClient)
    Python API: use ChunkReader in BlobClient
    merge python client api from oiopy into core
    
    integrate CLI
    Python API: cast get_pool_manager params to integers
    Python API: recompute deadline after data upload success
    
    At some point in the upload process, we know that the metadata server
    is fine (it provided us with chunk addresses) and the client is still
    listening (he just uploaded all data). It seems a good idea to
    postpone the deadline.
    Python API: add support for operation deadlines
    Add LazyLoader for ObjectStorageApi
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    Python API: rework get_meta_ranges function
    fixed meta chunk ranges
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Python API: fix request ID header name
    Python API: Allow to read object with duplicated position
    Python API: improve request ID usage
    Python API: use REQID_HEADER constant everywhere
    Permit to only list buckets
    Python API: forward timeouts, compute a deadline
    
    The 'patch_kwargs' functionality was used only on a few ObjectStorageApi
    methods, resulting in the read_timeout not being applied on all requests
    to oio-proxy. This is now fixed.
    
    Also, if a timeout is provided, a deadline is now computed for internal
    usage, and a timeout is computed accordingly for each subrequest.
    proxy, Python API: support 'client specified' peers in more routes
    oio/api: new method to create an object
    
    A new method will now return obj_metadata after
    creation of new object, including version.
    
    Required for OS-239
    Python API: Add command to flush container
    Python API: fix kwargs hack
    
    Fix kwargs hack in ObjectStorageApi preventing usage of
    chunk_checksum_algo keyword.
    proxy: fix end_marker parameter for object listing
    oio: fix end-marker for list objects
    
    Python API use --end-marker but proxy await marker_end
    Python API: allow sourcing object data from iterable
    
    Before this commit, only files, buffers or bare generators were allowed.
    Python API: add documentation, ensure a request ID is sent
    Python API: do not raise Conflict after retrying POST
    Add LazyLoader for ObjectStorageApi
    oio-account-server: Extend the openio CLI tool
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    HttpApi: Remove 'requests' to use 'urllib3'
    account: facatorize code, add documentation (fix #1054)
    Python API: fix requests ids and kwargs
    proxy: Add bulk delete content
    
    Permit to delete many content in one go for one container.
    Modify the format of cli command 'openio object delete' to return a List.Lister.
    Modify tests that depended on the old format response to use the new one.
    
    The format of a request to the proxy is a json '{"contents":[{"name":"..."},{"name":"..."}]}'
    and the url is /content/delete_many.
    The format of the answer is a json '{"contents":[{"name":"...", "status":"...", "message":"..."}]}'
    proxy: Add bulk delete content
    
    Permit to delete many content in one go for one container.
    Modify the format of cli command 'openio object delete' to return a List.Lister.
    Modify tests that depended on the old format response to use the new one.
    
    The format of a request to the proxy is a json '{"contents":[{"name":"..."},{"name":"..."}]}'
    and the url is /content/delete_many.
    The format of the answer is a json '{"contents":[{"name":"...", "status":"...", "message":"..."}]}'
    tests/unit: Amend the tests to allow the filtering of invalid chunks
    tests: adapt to the last code reorganization
    cli: allow to set quota and storage policy (fix #727, fix #737)
    api: fix invalid request body format for object_set_properties (#745)
    Python API: fix ranges when not doing EC
    python: allow object creation without content_length
    api: add functional tests around directory and container
    api: adapt to new properties handling
    merge python client api from oiopy into core
    
    integrate CLI
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Solve every unit test for python3
    Update test suite to make it compatible with py3
    
    This commit introduce changes in the test suite and potentially changes
    in the programming interface of each function. It should be treated with
    caution.
    Python API: raise ServiceBusy when no chunk quorum
    
    Raise a ServiceBusy error when writing an object and the quorum of the
    chunks is not reached, and this cannot be attributed to a timeout.
    
    Jira: OS-434
    Python API: Fix concurrency
    Python API: allow disabling client-side chunk checksums
    Python API: improve exception handling
    
    Improve exception messages.
    Never return 'green' timeouts to client applications.
    Python API, CLI: keep track of request durations
    
    First step: keep track of resolving and request times in proxy,
    then rawx request time in Python API.
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    Rawx: Add xattr oio_version and full_path
    
    Modify the client to send the header X-oio-chunk-meta-full-path:Acct/Container/Name
    Convert the header to the xattr oio.user:Acct/Container/Name=""
    Python API: refactor, improve error messages (fix #1048)
    Python API: convert eventlet Timeout to OioTimeout
    Python API: fix EC failure after rawx connection failure
    
    This failure was manifesting with 'list index out of range' errors
    happening in oio/api/ec.py.
    Python API: fix EC failure after rawx connection failure
    
    This failure was manifesting with 'list index out of range' errors
    happening in oio/api/ec.py.
    Python API: merge GeneratorReader and GeneratorIO classes
    tests: pep8 minor fixes
    api: fix missing failed chunk in EC
    api: fix Range header for GET requests in EC
    
    this caused ranges in EC to be broken
    
    changed the corresponding unit test to check Range header in GET request
    
    TODO we should tests more ranges
    merge python client api from oiopy into core
    
    integrate CLI
    Python API: Fix the conversion of negative size values
    
    Jira: OS-574
    Minor fixes for Python 3
    
    Fixup remaing print keyword
    Use six to import StringIO
    common/utils: Split to reduce dependencies
    CLI: Make 'account/container show' human readable
    
    close #1140
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    core: move python files around
    event-agent now support async chunk delete
    WIP account service with redis backend
    Python API: create NoMatchFound exception for RegexContainerBuilder
    Python API: allow regexcontainer to yield alternatives
    Autocontainer: fix HashContainerBuilder.verify()
    Python API: use regex to build container names
    CLI: add '--min-dist' option to 'rdir bootstrap'
    
    Jira: OS-281
    Python API: do not raise Conflict after retrying POST
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    HttpApi: Remove 'requests' to use 'urllib3'
    merge python client api from oiopy into core
    
    integrate CLI
    Python API: Add consistency to the endpoint
    
    close #1151
    Python API: more rate limiting facilities
    Python API: rework hour-based rate limiting policies
    
    Policies can be loaded from strings like
        "0h30:10;6h45:2;9h45:5;15h30:3;20h00:8"
    Python API: Add hour-based rate limiting policies utils
    Add the Licence preamble (LGPL) in the tests
    
    ... where it was missing, and turns several tests to LGPL, that were
    previously with AGPL (OpenIO-owned at 100%).
    core: move python files around
    event-agent now support async chunk delete
    WIP account service with redis backend
    Test the encoding and decoding of the fullpath
    Python API: apply timeouts parameters to account requests
    
    As for ObjectStorageApi, apply timeouts passed to the AccountClient
    constructor to all method calls.
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    CI: pass some tests with Python 2.7 and some with 3.6
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Update test suite to make it compatible with py3
    
    This commit introduce changes in the test suite and potentially changes
    in the programming interface of each function. It should be treated with
    caution.
    Python API: allow sourcing object data from iterable
    
    Before this commit, only files, buffers or bare generators were allowed.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Python API: merge GeneratorReader and GeneratorIO classes
    migrate ec content tests to use unified API
    merge python client api from oiopy into core
    
    integrate CLI
    removes remains of rainx
    core: move python files around
    python/content: add mechanism to change the storage policy of existing contents
    python/content/dup: add basic upload and download mechanisms
    python/rain: add mechanism to rebuild metachunk using rainx services
    python/content: sort chunks in content
    python/rain: add content upload mechanism
    python/policy: prepare integration of rain policy
    blob-improver: various improvements
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    Reorganize the libraries, Avoid a loop on the proxy
    cmake: Reorganize the targets
    
    * do not list headers, as it is recommended
    * drop the dependency to sqlite3 in oio-proxy
    Build & Use static libraries
    resolver: Fix the library name
    
    Error introduced at 76c8e17e9e390b7aa1f5704443d5bf341b9621cb
    cmake: Explicit the ABI version of each shared library
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    Adapt the code to the central config
    cmake: added 'Werror' in CFLAGS where there is no warning
    
    Warnings are the voice of Evil.
    
    Let's try to avoid them on targets already clean.
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    cmake: G_LOG_DOMAIN set at cmake's level.
    SSL replaced by GLib equivalent.
    Content propeties reviewed + Cleanup, round 2
    1.8.4 release candidate
    Initial commit
    proxy,m1: tell meta0 which namespace we are working on
    resolver: Remove unused code
    resolver: allow to resolve only meta0 services
    
    This is useful to run election commands on a broken meta0.
    Move lrutree.* from metautils/ to core/
    Reorganize the libraries, Avoid a loop on the proxy
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    Let the resolver return 503 (Retry) upon net errors
    resolver: Turns assertions into EXTRA_ESSERT, Reformat the code
    
    Less lines to do the same.
    resolver,proxy: Centralise to variable to on/off the whole cache
    
    A live managed variable instead a fixed field in a structure.
    resolver: Rename the managed variables (code side)
    
    Give them a common prefix that reflects the library they belong to.
    resolver: Simplify the code to benefit from the managed config
    resolver: Consider max==0 as the infinite
    
    .. so that by default we keep an unlimited cache
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    resolver: Fix logical conditions
    
    Thanks to @fvennetier!
    + Avoid shuffling singleton arrays...
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    Adapt the code to the central config
    proxy,resolver: expresses delays in monotonic time precision
    
    One step further in the uniformisation of the TTL and Delays management
    that previously mixed gdouble (seconds), time_t (second) and gint64
    (monotonic clock).
    
    The monotonic clock is the law!
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    Useless/Unused functions removed
    resolver: M0 not flushed + explicit tell() function
    
    In addition, several functions have been modified to explicitely mention they handle const data.
    Let's hope the compiler will like this and be still better at optimizing the code produced.
    Fixed several optimisations around up/down services
    
    There were partition/shuffle problems when looping on lists of services.
    * the ok/nok qualification of services didn't work (in the resolver)
    * the shuffling was potentially broken by a subsequent partition ok ok/nok services.
    * both weren't called at all in several cases.
    Dropped the dependency to the Linux's specific clock functions.
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    conscience: renaming + pruning + reorg
    
    * conscience/agent remote functions have been renamed for more clarity
    * MACRO tags have been removed (usage too scarce and immutable, no need of something so flexible)
    * CPU/IO/SPACE computation moved from the oio-cluster-agent to libgridcluster
    * oio-cluster-agent is now now mandatory
    Various beautifications
    
    agent: unused code removed
    cluster: uniform interface
    cluster: agent bypass
    conscience: func tests OK
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    metautils: minor simplification
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    resolver: avoid storing empty list of services.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    Finer gauges for active threads, reliable accesslog delays
    
    This patch provides the maximum number of active threads, and a round-robin storage for that information.
    The granularity proposed is intervals of 1s over the past 30s, and intervals of 1 minute over the past 1 hour.
    This data is used by the core server library to expose statistics, e.g.
    
            server.thread.max.1 = 0
            server.thread.max.5 = 1
            server.thread.max.15 = 2
            server.thread.max.30 = 2
            server.thread.max.60 = 3
            server.thread.max.300 = 3
            server.thread.max.900 = 3
            server.thread.max.3600 = 3
    
    This patch also alters the accesslog format for gridd transports, and it is now unified with http transport.
    An access log record now provides 2 treatment durations:
    - the total time spent since the reception of the last buffer that completes the request
    - the total treatment time, from the moment where a worker thread starts the request handling til the moment an answer is generated.
    The delta between both delays is the time spent in the internals queues of the process.
    
    The patch divides in:
    - server/stats_holder.* :
      - drops the adherence to system time, the current timestamp is now received from the caller. This is necessary to manager counter with a granularity different than 1s.
      - New calls to compute the cumulative maximum
      - code simplification
    - server/network_server.* :
      - new round-robin stats now managed
      - new stats exposed.
      - precise monotonic clock used on the last input
    - server/transport_http.c :
      - useless variables removed.
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - server/transport_gridd.c :
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - sqlx/sqlx_service.c :
      - code adapted to match the lost "time adherence"
    
    Change-Id: I248ae7a1937860e4062290e95b68465d7ec62821
    Several fixes and improvements
    
    JSON fixed for service_info.
    Finer decache in resolver.
    m2v2_remote_touch_content fixed.
    m2v2 does not generates events when disabled.
    
    Change-Id: Ib145ba973ad7d9f3810c4c0fa4f30f1be1ff4639
    Early assertions in resolver.
    
    Change-Id: I32838912087c58fbfd8bc24f78e222067b9679c9
    New feature to resolve the directory servers for a reference.
    
    Before was it only possible to locate the services referenced in that directory.
    
    Change-Id: Icaa1cf571e867ab827fe4cd4c5a1bc1bc1b4e417
    1.8.4 release candidate
    Initial commit
    resolver: Remove unused code
    resolver: allow to resolve only meta0 services
    
    This is useful to run election commands on a broken meta0.
    Reorganize the libraries, Avoid a loop on the proxy
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    resolver: Drop the HC_RESOLVER_NOCACHE options
    
    Now managed by a live centalized variable
    resolver: Drop an unused configuration flag
    resolver: Simplify the code to benefit from the managed config
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Adapt the code to the central config
    proxy,resolver: expresses delays in monotonic time precision
    
    One step further in the uniformisation of the TTL and Delays management
    that previously mixed gdouble (seconds), time_t (second) and gint64
    (monotonic clock).
    
    The monotonic clock is the law!
    resolver: M0 not flushed + explicit tell() function
    
    In addition, several functions have been modified to explicitely mention they handle const data.
    Let's hope the compiler will like this and be still better at optimizing the code produced.
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    Dropped the dependency to the Linux's specific clock functions.
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    s/hc_url_/oio_url_/ ... continued
    OpenIO is lifting off now !
    Finer gauges for active threads, reliable accesslog delays
    
    This patch provides the maximum number of active threads, and a round-robin storage for that information.
    The granularity proposed is intervals of 1s over the past 30s, and intervals of 1 minute over the past 1 hour.
    This data is used by the core server library to expose statistics, e.g.
    
            server.thread.max.1 = 0
            server.thread.max.5 = 1
            server.thread.max.15 = 2
            server.thread.max.30 = 2
            server.thread.max.60 = 3
            server.thread.max.300 = 3
            server.thread.max.900 = 3
            server.thread.max.3600 = 3
    
    This patch also alters the accesslog format for gridd transports, and it is now unified with http transport.
    An access log record now provides 2 treatment durations:
    - the total time spent since the reception of the last buffer that completes the request
    - the total treatment time, from the moment where a worker thread starts the request handling til the moment an answer is generated.
    The delta between both delays is the time spent in the internals queues of the process.
    
    The patch divides in:
    - server/stats_holder.* :
      - drops the adherence to system time, the current timestamp is now received from the caller. This is necessary to manager counter with a granularity different than 1s.
      - New calls to compute the cumulative maximum
      - code simplification
    - server/network_server.* :
      - new round-robin stats now managed
      - new stats exposed.
      - precise monotonic clock used on the last input
    - server/transport_http.c :
      - useless variables removed.
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - server/transport_gridd.c :
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - sqlx/sqlx_service.c :
      - code adapted to match the lost "time adherence"
    
    Change-Id: I248ae7a1937860e4062290e95b68465d7ec62821
    Several fixes and improvements
    
    JSON fixed for service_info.
    Finer decache in resolver.
    m2v2_remote_touch_content fixed.
    m2v2 does not generates events when disabled.
    
    Change-Id: Ib145ba973ad7d9f3810c4c0fa4f30f1be1ff4639
    New feature to resolve the directory servers for a reference.
    
    Before was it only possible to locate the services referenced in that directory.
    
    Change-Id: Icaa1cf571e867ab827fe4cd4c5a1bc1bc1b4e417
    1.8.4 release candidate
    Initial commit
    meta0: Remove unused code
    meta0: Fix the error message (hint: openio zk bootstrap)
    meta0: React well on ZK disconnections
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta0: Remove unused struct fieds, useless headers
    meta0: Use CSV-related macros instead of hardcoded strings
    
    Not sure we increase the readability...
    meta0: Adapt meta0 to a possible ZK sharding
    
    Ugly quirk because shard the ZK for meta0 makes no sense: only one base
    that is managed with the `zk_manager`, that is to be deleted and
    replaced by the current sqlx_sync_s.
    sqliterepo,meta0: Move `zk_manager` in meta0
    
    meta0v2 is the only code using zk_manager, and zk_manager itself is
    completely redundant with sqliterepo/synchro.h
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    Adapt the code to the central config
    sqliterepo: Fix an non-intuitive macro name and typo in its comment
    sqliterepo: Move strings handlings onto the stack
    sqliterepo/election: cleaner trasitions the FSM
    
    The goal of the commit is to prevent entering a state with several
    pending callbacks that can trouble the transitions and cause messages
    storms.
    
    Only the completion events make the FSM (finite state machine) step
    forward. All the "interruptions" events are delayed until the normal
    actions are all done.
    
    Summary of the changes:
    
    * general renaming of the states to more intuitive names that denote the
      action that is pending. LEADER -> MASTER, LOST -> SLAVE.
    * new states added, so that at most one action is pending in each state.
      specially PRELOST that becomes [ASKING,CHECKING_MASTER] and CANDOK
      that becomes [WATCHING,LISTING].
    * new state added to leave-and-then-fail, instead of leaving then
      retrying.
    * Tests, tests, test. Despite the FSM is not 100% covered yet, the major
      transitions are now checked.
    * Timers simplified: since we wait for actionns before leaving an FSM
      state,.the necessity to retry an election is vastly simplified and
      only occurs from the NONE state.
    * A jitter has been introduced before sending a ping (USE) from a final
      state.
    
    Despite the result should be more stable, robust and resilient, this is
    a big set of changes and one shoould take care of possible unexpected
    effects. Especially of elections that could go more often than necessary
    in the FAILED state, and then undergo a 5s timer before the retry.
    (Prior to this commit, we would have loop-retry more often than
    necessary.)
    sqliterepo: fixes the mechanism for the reconnection to ZooKeeper.
    
    TODO: huge code factorisation in scope, because sqliterepo/zk_manager.c is
    merely the synchronous version of sqliterepo/synchro.c
    m0: improve messages and connection to zookeeper
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    OpenIO is lifting off now !
    sqliterepo: increase replication timeout, fix warning
    
    See https://jira.itsm.atosworldline.com/jira/browse/TO-HONEYCOMB-771
    
    Change-Id: Iab0e406c297215ad4d02c53962b938602dd8aaf3
    Finer gauges for active threads, reliable accesslog delays
    
    This patch provides the maximum number of active threads, and a round-robin storage for that information.
    The granularity proposed is intervals of 1s over the past 30s, and intervals of 1 minute over the past 1 hour.
    This data is used by the core server library to expose statistics, e.g.
    
            server.thread.max.1 = 0
            server.thread.max.5 = 1
            server.thread.max.15 = 2
            server.thread.max.30 = 2
            server.thread.max.60 = 3
            server.thread.max.300 = 3
            server.thread.max.900 = 3
            server.thread.max.3600 = 3
    
    This patch also alters the accesslog format for gridd transports, and it is now unified with http transport.
    An access log record now provides 2 treatment durations:
    - the total time spent since the reception of the last buffer that completes the request
    - the total treatment time, from the moment where a worker thread starts the request handling til the moment an answer is generated.
    The delta between both delays is the time spent in the internals queues of the process.
    
    The patch divides in:
    - server/stats_holder.* :
      - drops the adherence to system time, the current timestamp is now received from the caller. This is necessary to manager counter with a granularity different than 1s.
      - New calls to compute the cumulative maximum
      - code simplification
    - server/network_server.* :
      - new round-robin stats now managed
      - new stats exposed.
      - precise monotonic clock used on the last input
    - server/transport_http.c :
      - useless variables removed.
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - server/transport_gridd.c :
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - sqlx/sqlx_service.c :
      - code adapted to match the lost "time adherence"
    
    Change-Id: I248ae7a1937860e4062290e95b68465d7ec62821
    1.8.4 release candidate
    Initial commit
    meta0: Remove unused code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    m0, proxy: new routes and tools to list and force meta0 mapping
    m{0,1,2}v2: shortened requests names
    m0v2: backend RESET added
    
    Workaround for #193
    Content propeties reviewed + Cleanup, round 2
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    m0: compare request namespace to local namespace
    
    We have seen services registed in the wrong namespace. But nothing
    prevented these services to be used. Now some request handlers will
    compare the input namespace againt the configured one, and deny the
    request is they do not match.
    meta0: Apply cosmetic changes
    meta0: Remove useless error prefix
    
    More confusing than helpful
    meta0: Replying error code 500 is a bad idea
    
    Especially when it overrides any real error from the backend.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta0: Remove unused struct fieds, useless headers
    meta0: Remove unused request handlers
    Remove unused/useless #include, fix minor warnings
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    m0, proxy: new routes and tools to list and force meta0 mapping
    Useless/Unused functions removed
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    m0v2: minor one-shot memleak fixed.
    m0v2: backend fix around meta0_fill (NODIST management)
    m0v2: backend RESET added
    
    Workaround for #193
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Message handling functions refatored
    
    * Useless / unused functions removed.
    * Signatures more intuitive.
    * code factorized.
    Slab allocation for small structures + ASN.1 message simplification
    Slab allocation for small structures + ASN.1 message simplification
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Content propeties reviewed + Cleanup, round 2
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    proxy,m1: tell meta0 which namespace we are working on
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta0/remote: Remove unused features
    m0,proxy: fix buffer overflow (fix #899)
    
    (cherry picked from commit 45142bea052791a9c418428d130d003d094a4326)
    m0,proxy: fix buffer overflow (fix #899)
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    m0, proxy: new routes and tools to list and force meta0 mapping
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    m0v2: backend RESET added
    
    Workaround for #193
    Content propeties reviewed + Cleanup, round 2
    Get rid of an old rename trick born in redcurrant.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    meta0: Remove unused code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta0: Turn static a function not exported
    meta0: Remove unused backend features
    meta0/utils: Remove unused functions
    metautils: reduce number of memory allocations
    
    This slightly speeds up meta0 and meta1.
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    m0, proxy: new routes and tools to list and force meta0 mapping
    Cleanup, round 6
    
    * path to sqlite bases unified and simplified. It should also plainly manage several containers for the same user.
    * warnings removed.
    * useless comments removed.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    cmake: Only install prod-related tools in other build types than Debug
    meta0: Restore the meta0 client tool
    
    Still needed for the openio-admin CLI
    Reorganize the libraries, Avoid a loop on the proxy
    cmake: Reorganize the targets
    
    * do not list headers, as it is recommended
    * drop the dependency to sqlite3 in oio-proxy
    Build & Use static libraries
    cmake: Explicit the ABI version of each shared library
    meta0: Removed unused meta0-init
    m0: fix compilation with zookeeper 3.5.3
    
    (cherry picked from commit 3c4886b8831d070a350a9e9b03bf2326dae52f9b)
    coverage: Avoid files generated by asn1c
    
    These files contain a lot of unused code.
    m0: fix compilation with zookeeper 3.5.3
    sqliterepo,meta0: Move `zk_manager` in meta0
    
    meta0v2 is the only code using zk_manager, and zk_manager itself is
    completely redundant with sqliterepo/synchro.h
    Adapt the code to the central config
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    cmake: added 'Werror' in CFLAGS where there is no warning
    
    Warnings are the voice of Evil.
    
    Let's try to avoid them on targets already clean.
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    cmake: G_LOG_DOMAIN set at cmake's level.
    Content propeties reviewed + Cleanup, round 2
    OpenIO is lifting off now !
    Binary installation names reviewed.
    Fixes missing dependency to libgridcluster
    1.8.4 release candidate
    Initial commit
    sqliterepo: Remove unused struct fields
    
    Also touches meta0, meta1, meta2
    meta0: Remove unused code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta0: Remove unused struct fieds, useless headers
    sqliterepo,meta0: Move `zk_manager` in meta0
    
    meta0v2 is the only code using zk_manager, and zk_manager itself is
    completely redundant with sqliterepo/synchro.h
    sqliterepo: Ensure there is a consistant output when locating the peers
    
    Either the error or the peers should be set, but never none nor both!
    Also, returning "no peer but no error" de facto become an empty array
    and never a NULL array anymore.
    meta0: Refactor slightly the code for more readability
    meta0: Better error message upon ZK errors
    meta0: Bound the number of registration attempts in ZK
    m0,m1,m2,sqlx: use local peers if available
    Remove unused/useless #include, fix minor warnings
    Move the minimal rrd from server to metautils
    
    It prepares a change coming soon in sqliterepo, that requires the simple
    RRD implementation.
    meta0: fix periodical memleak
    
    (cherry picked from commit 30a685b867a31b5ca9129e775b69fb561f3bf02c)
    meta0: fix periodical memleak
    sqliterepo/election: cleaner trasitions the FSM
    
    The goal of the commit is to prevent entering a state with several
    pending callbacks that can trouble the transitions and cause messages
    storms.
    
    Only the completion events make the FSM (finite state machine) step
    forward. All the "interruptions" events are delayed until the normal
    actions are all done.
    
    Summary of the changes:
    
    * general renaming of the states to more intuitive names that denote the
      action that is pending. LEADER -> MASTER, LOST -> SLAVE.
    * new states added, so that at most one action is pending in each state.
      specially PRELOST that becomes [ASKING,CHECKING_MASTER] and CANDOK
      that becomes [WATCHING,LISTING].
    * new state added to leave-and-then-fail, instead of leaving then
      retrying.
    * Tests, tests, test. Despite the FSM is not 100% covered yet, the major
      transitions are now checked.
    * Timers simplified: since we wait for actionns before leaving an FSM
      state,.the necessity to retry an election is vastly simplified and
      only occurs from the NONE state.
    * A jitter has been introduced before sending a ping (USE) from a final
      state.
    
    Despite the result should be more stable, robust and resilient, this is
    a big set of changes and one shoould take care of possible unexpected
    effects. Especially of elections that could go more often than necessary
    in the FAILED state, and then undergo a 5s timer before the retry.
    (Prior to this commit, we would have loop-retry more often than
    necessary.)
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    m0: improve messages and connection to zookeeper
    sqliterepo/election: memleak chased
    m{0,1}v2: protects the init phase while shutting down
    
    * m0v2: ZK registration protected in cases where server is stopped
    * m0v2: prevents event queue creation (useless for meta0)
    * m1v2: M0 loading protected
    Self-registration dropped
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    Dropped the dependency to the Linux's specific clock functions.
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    m0v2: useless comment removed
    Cleanup, round 6
    
    * path to sqlite bases unified and simplified. It should also plainly manage several containers for the same user.
    * warnings removed.
    * useless comments removed.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    OpenIO is lifting off now !
    sqliterepo: add forced meta1 decache in SQLX_RESYNC.
    
    and fix small bugs.
    
    Change-Id: I905f8dcb61c00b1e60c0e0b459bd27a4e0172cdf
    sqliterepo,sqlx,m2v2: fix election problems after move.
    
    Allow get_peers to bypass meta1 cache in sqlx and meta2v2.
    Add SQLX_EXITELECTION request in sqlx-based services.
    
    Change-Id: Ife2760bc869376c3b793950fca2fa703ca23bec9
    1.8.4 release candidate
    Initial commit
    meta0: Remove unused code
    meta1: Avoid losing the cache of managed prefixes
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta0: Turn static a function not exported
    meta0: Remove unused backend features
    meta0/utils: Remove unused functions
    Remove unused/useless #include, fix minor warnings
    meta0: Fix odd mixing of libc and glib2 memory managements
    metautils: reduce number of memory allocations
    
    This slightly speeds up meta0 and meta1.
    meta0: fixes a loop condition while checking for m0 prefixes
    meta0: clearer code around bitwise operations
    
    ... around meta0 prefixes sanity checks
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    m0, proxy: new routes and tools to list and force meta0 mapping
    m0: refactor and comment meta1 assignment code
    m0: code cleaning
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    m0v2: removed nested func
    conscience: renaming + pruning + reorg
    
    * conscience/agent remote functions have been renamed for more clarity
    * MACRO tags have been removed (usage too scarce and immutable, no need of something so flexible)
    * CPU/IO/SPACE computation moved from the oio-cluster-agent to libgridcluster
    * oio-cluster-agent is now now mandatory
    Various beautifications
    
    agent: unused code removed
    cluster: uniform interface
    cluster: agent bypass
    conscience: func tests OK
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Some hardcoded numbers replaced by the right macro.
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta0: Remove unused backend functions
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    meta0: removes unreachable code
    m0, proxy: new routes and tools to list and force meta0 mapping
    Useless/Unused functions removed
    sqliterepo: speed-up the schema checks
    
    * sqliterepo: the checks of the schema are now performed with lowered security, to avoid useless transaction syncs.
    * sqliterepo: got rid of the useless "version" provided when checking for the schema
    * meta0: removed the useless "vacuum" in the schema.
    * meta0/meta1/sqlx/tests: adapted to the changes previously listed.
    m0v2: backend RESET added
    
    Workaround for #193
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    meta0: Remove unused code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo,meta0: Move `zk_manager` in meta0
    
    meta0v2 is the only code using zk_manager, and zk_manager itself is
    completely redundant with sqliterepo/synchro.h
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    proxy,m1: tell meta0 which namespace we are working on
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta0/remote: Remove unused features
    meta0: Replace old macros by their recent equivalent
    Remove unused/useless #include, fix minor warnings
    meta0: Fix odd mixing of libc and glib2 memory managements
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    m0, proxy: new routes and tools to list and force meta0 mapping
    Useless/Unused functions removed
    m0v2/client: fixed reeturn code, error printed, std{out,err} not redirected
    Fixed compilation on x86_32
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    m0v2: backend RESET added
    
    Workaround for #193
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta0: Remove unused struct fieds, useless headers
    sqliterepo,meta0: Move `zk_manager` in meta0
    
    meta0v2 is the only code using zk_manager, and zk_manager itself is
    completely redundant with sqliterepo/synchro.h
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    m0,oio-reset: better error message, more debugging output
    meta0: Clarify the error messages on M0 not ready
    meta0: fix return error
    meta0: Avoid raising an assertion when prefixes not loaded
    meta0: Avoid raising an error on prefixes not ready
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta0: Remove unused backend features
    meta0: Remove unused backend functions
    meta0: Always autocreate the bases
    meta0: Avoid looping on sqlite errors
    meta0: Fix a memory load happening during the bootstrap
    
    Fix #953
    meta0: Fix a memory load happening during the bootstrap
    
    Fix #953
    Remove unused/useless #include, fix minor warnings
    meta0: Fix odd mixing of libc and glib2 memory managements
    metautils: reduce number of memory allocations
    
    This slightly speeds up meta0 and meta1.
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    meta0: removes unreachable code
    m0, proxy: new routes and tools to list and force meta0 mapping
    m0: speed up replication, increase oio-meta0-init timeout
    
    Force the meta0 slaves to restore the whole database from the master
    which is far quicker than using the standard replication mechanism
    when a large part of the database has changed.
    Useless/Unused functions removed
    sqliterepo: reduced amount of I/O upon open/create
    
    Only one sqlite transaction is now used when opening a base, even if creating it.
    The whole schema setup is sent during this only transaction.
    m0v2: minor one-shot memleak fixed.
    m0v2: backend RESET added
    
    Workaround for #193
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    proxy,m1: tell meta0 which namespace we are working on
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta0: Remove unused struct fieds, useless headers
    meta0/remote: Remove unused features
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    m0,proxy: fix buffer overflow (fix #899)
    
    (cherry picked from commit 45142bea052791a9c418428d130d003d094a4326)
    Adapt the code to the central config
    m0,proxy: fix buffer overflow (fix #899)
    Remove unused/useless #include, fix minor warnings
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    m0, proxy: new routes and tools to list and force meta0 mapping
    m0v2: extends the timeout for the FILL operations
    
    Those are notoriously longer then read-only ops.
    Useless/Unused functions removed
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    m0v2: backend RESET added
    
    Workaround for #193
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Fixed service push to the conscience + Cleanup, round 8
    
    * The last cleanup commit was named #6, but this was a mistke, there was already a #6.
    * Code factorized
    * Useless code removed
    * Codec functions simplified.
    m0v2: fixes memory leaks
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Minor code and macros factorisation
    Message handling functions refatored
    
    * Useless / unused functions removed.
    * Signatures more intuitive.
    * code factorized.
    Get rid of grid_storage_client_stat
    
    One of the ugliest piece of code present here.
    It was intrusive and based on static variables.
    Content propeties reviewed + Cleanup, round 2
    Request-Id now managed in clients and servers
    
    * transmitted via a thread-local data
    * explicit ID eliminated from remote API (m2v2) + caller code adapted
    * in servers, collected from incoming requests, propagated to outgoing requests.
    * set to a random value when not set.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    oio-bootstrap.py: Remove obsolete options
    oio-reset: do not use oio-cluster, fix callgrind conf
    oio-bootstrap.py: Manages the central configuration + presets added
    oio-bootstrap: Allow deploying several beanstalkd
    CI: Test EC with large chunk-size
    Add oio-reset.sh options + config presets
    
    * multiple IP (must be local) for all the services
    * multiple IP for each service, different frim the global set
    * configuration files renamed
    * CI scripts modified accordingly
    oio-reset.sh: zookeeper untouched when not concerned
    
    When zookeeper is set to 'false', it overrides any zookeeper config from
    any other file specified before on the CLI. To avoid giving to much
    importance to the order of configs, let's leave zookeeper untouched when
    not concerned.
    Adds new test envs
    bootstrap: EC profile deploy redis
    adapt travis tools to test EC
    bootstrap: review config input
    Allow oio-boostrap with webhook
    CI: review the "long timeouts" configuration
    CI: new configuration with long timeouts
    tests: Add configs to reproduce a bug
    Allow to place some chunks locally to the proxy
    Pass proc_name setting to gunicorn applications
    Allow to set various Redis sentinel parameters
    Allow to set various Redis parameters
    core: move python files around
    account-server: add possibility to use redis-sentinel
    tools: minor logging fixes in bootstrap script
    python: improved syslog logging
    account-server bin (using gunicorn)
    account backend now supports listing options (prefix, delimiter, limit, marker, end_marker)
    Add bootstrap config file for versioning
    conf: Avoid prefixing the variable keys with 'oio.'
    oio-bootstrap.py: Remove obsolete options
    Add oio-reset.sh options + config presets
    
    * multiple IP (must be local) for all the services
    * multiple IP for each service, different frim the global set
    * configuration files renamed
    * CI scripts modified accordingly
    rawx: skip tests invalidated by the presence of compression
    tools: add option to bootstrap rawx with TLS
    
    Note: The certificate itself is static at this time
    Add oio-reset.sh options + config presets
    
    * multiple IP (must be local) for all the services
    * multiple IP for each service, different frim the global set
    * configuration files renamed
    * CI scripts modified accordingly
    oio-bootstrap: Allow deploying several beanstalkd
    oio-bootstrap.py: Update the presets for the central config facility
    Add oio-reset.sh options + config presets
    
    * multiple IP (must be local) for all the services
    * multiple IP for each service, different frim the global set
    * configuration files renamed
    * CI scripts modified accordingly
    sqliterepo: actually reuse idle bases when max reached
    bootstrap: add option to enable fsync for RAWX
    core: move python files around
    add conscience-agent
    oio-bootstrap.py: Manages the central configuration + presets added
    oio-reset: Add an option file to set 4 meta1 digits
    Allow to place some chunks locally to the proxy
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    CI: Test EC with large chunk-size
    oio-bootstrap.py: Manages the central configuration + presets added
    Add oio-reset.sh options + config presets
    
    * multiple IP (must be local) for all the services
    * multiple IP for each service, different frim the global set
    * configuration files renamed
    * CI scripts modified accordingly
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    CI: Test EC with large chunk-size
    oio-bootstrap.py: Manages the central configuration + presets added
    blob-mover: Allow to exclude some rawx
    blob-mover: implement concurrency
    
    The chunk mover will now use 10 coroutines to move chunks in parallel.
    This can be changed with the 'concurrency' parameter in the
    configuration file. The rate limiting is global (not per each
    coroutine).
    core: move python files around
    add blob mover
    travis: Activate tests with UDP and various meta1_digits
    
    Go for a better code coverage!
    lb: fix distance for chunks close to proxy
    conf: remove unused proxy.srv_local.prefer parameter
    proxy: Prefer local services
    
    1/ Give a location to any proxy on the host (central variable)
    2/ Mangle the scores of RAWX to give precedence to services that are
       closer
    3/ Allow to enable/disable that behavior.
    Pass proc_name setting to gunicorn applications
    xcute: Set limit of jobs per beanstalkd
    
    We must avoid filling the beanstalkd without limit, otherwise it may crash.
    xcute: Increase refresh time to search available beanstalkd
    xcute: Add sample configuration
    Allow to set various Redis sentinel parameters
    Allow to set various Redis parameters
    core: move python files around
    account-server: add possibility to use redis-sentinel
    tools: minor logging fixes in bootstrap script
    python: improved syslog logging
    account-server bin (using gunicorn)
    account backend now supports listing options (prefix, delimiter, limit, marker, end_marker)
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    sandbox: Add a config directive with a positiv zk.mux_factor
    oio-bootstrap: Allow to deploy event-agent with replication
    CI: Test EC with large chunk-size
    Add oio-reset.sh options + config presets
    
    * multiple IP (must be local) for all the services
    * multiple IP for each service, different frim the global set
    * configuration files renamed
    * CI scripts modified accordingly
    oio-reset.sh: zookeeper untouched when not concerned
    
    When zookeeper is set to 'false', it overrides any zookeeper config from
    any other file specified before on the CLI. To avoid giving to much
    importance to the order of configs, let's leave zookeeper untouched when
    not concerned.
    Adds new test envs
    bootstrap: review config input
    oio-bootstrap.py: Manages the central configuration + presets added
    Add oio-reset.sh options + config presets
    
    * multiple IP (must be local) for all the services
    * multiple IP for each service, different frim the global set
    * configuration files renamed
    * CI scripts modified accordingly
    oio-reset.sh is now able to enable UDP
    deployment: add option to configure flatns
    rdir: Allow thread-based parallelism
    core: move python files around
    rdir: server checks the namespace in the http request
    rdir: crawler added + rdir installed using oio-reset + fixes
    index: fix sample conf file
    revdir: add basic index service
    CI: Test EC with large chunk-size
    Add oio-reset.sh options + config presets
    
    * multiple IP (must be local) for all the services
    * multiple IP for each service, different frim the global set
    * configuration files renamed
    * CI scripts modified accordingly
    core,m1: fix 'user_is_a_service' option handling (2)
    
    There was a problem with the location of the service for which
    the load-balancer was queried.
    oio-reset.sh: zookeeper untouched when not concerned
    
    When zookeeper is set to 'false', it overrides any zookeeper config from
    any other file specified before on the CLI. To avoid giving to much
    importance to the order of configs, let's leave zookeeper untouched when
    not concerned.
    Adds new test envs
    bootstrap: review config input
    oio-meta2-indexer, Python API: add a new meta2 indexing utility
    
    - Add a new wrapper to list all meta2 records indexed for a volume.
    - Add new meta2 indexing tool, sample conf and tests.
    CI: Test EC with large chunk-size
    Add oio-reset.sh options + config presets
    
    * multiple IP (must be local) for all the services
    * multiple IP for each service, different frim the global set
    * configuration files renamed
    * CI scripts modified accordingly
    etc: finer oio-reset.sh configuration files
    oio-reset.py: accepts several configuration files
    lb: fix distance for chunks close to proxy
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    CI: Test EC with large chunk-size
    Add oio-reset.sh options + config presets
    
    * multiple IP (must be local) for all the services
    * multiple IP for each service, different frim the global set
    * configuration files renamed
    * CI scripts modified accordingly
    CI: Test EC with large chunk-size
    Add oio-reset.sh options + config presets
    
    * multiple IP (must be local) for all the services
    * multiple IP for each service, different frim the global set
    * configuration files renamed
    * CI scripts modified accordingly
    core,m1: fix 'user_is_a_service' option handling (2)
    
    There was a problem with the location of the service for which
    the load-balancer was queried.
    oio-reset.sh: zookeeper untouched when not concerned
    
    When zookeeper is set to 'false', it overrides any zookeeper config from
    any other file specified before on the CLI. To avoid giving to much
    importance to the order of configs, let's leave zookeeper untouched when
    not concerned.
    Adds new test envs
    bootstrap: EC profile deploy redis
    adapt travis tools to test EC
    bootstrap: review config input
    oio-bootstrap.py: Update the presets for the central config facility
    oio-bootstrap.py: Manages the central configuration + presets added
    Add oio-reset.sh options + config presets
    
    * multiple IP (must be local) for all the services
    * multiple IP for each service, different frim the global set
    * configuration files renamed
    * CI scripts modified accordingly
    oio-blob-indexer: Disable the backup when converting chunks
    Update the sample of oio-blob-indexer configuration
    oio-blob-indexer: Convert chunks
    blob-indexer: add interval parameter
    core: move python files around
    rdir: crawler added + rdir installed using oio-reset + fixes
    blob-auditor: audit chunks
    CI: Test EC with large chunk-size
    Add oio-reset.sh options + config presets
    
    * multiple IP (must be local) for all the services
    * multiple IP for each service, different frim the global set
    * configuration files renamed
    * CI scripts modified accordingly
    core,m1: fix 'user_is_a_service' option handling (2)
    
    There was a problem with the location of the service for which
    the load-balancer was queried.
    oio-reset.sh: zookeeper untouched when not concerned
    
    When zookeeper is set to 'false', it overrides any zookeeper config from
    any other file specified before on the CLI. To avoid giving to much
    importance to the order of configs, let's leave zookeeper untouched when
    not concerned.
    Adds new test envs
    bootstrap: review config input
    CI: preserve events only during functional tests
    Allow to place some chunks locally to the proxy
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    conscience-agent: collect beanstalkd stats
    
    Collect some statistics about beanstalkd jobs. They could help refining
    the score of beanstalkd services.
    
    Also improve the configuration sample.
    Review storage policy and service pool configuration
    core: move python files around
    conscience-agent: set service location
    oio-reset: use conscience-agent to monitor rdir/account
    conscience-agent: fetch stats from system or a volume
    conscience-agent: implement basic rawx stats
    add conscience-agent
    conf: Avoid prefixing the variable keys with 'oio.'
    oio-bootstrap.py: Remove obsolete options
    Add oio-reset.sh options + config presets
    
    * multiple IP (must be local) for all the services
    * multiple IP for each service, different frim the global set
    * configuration files renamed
    * CI scripts modified accordingly
    oio-reset: Add an option file to trigger DB autocreate
    Storage tierer: fix CID generation and logging
    core: move python files around
    crawler/storage tiering: fix sample conf and bin/script export
    python/crawler/storage tiering: add crawler to change storage policy of old contents
    account: allow to call the master account service for reads
    
    Also add a parameter to the event-agent "replicate" filter to enable
    this feature, and display a message in case of exception while
    refreshing the "replication_enabled" parameter.
    events: forward all replication events by default
    
    To avoid problems during the update of old platforms, the check to see
    if replication is enabled for each bucket must be explicitly enabled.
    Enable or disable replication for each bucket
    
    Implement a new event-agent plugin that will query the account service
    to know if a container must be replicated.
    
    Jira: OB-477
    event-agent: Update the sample of the event handler configuration
    Provide examples for event notifier exclude list
    event-agent: Handle 'storage.container.update' events
    event-agent: allow to configure content_cleaner cnx pool
    
    This will help reducing the number of persistent connections to one
    service, while keeping at least one persistent connection to each
    service. Set:
    - pool_connections: high value (ideally one per rawx service)
    - pool_maxsize: low value (one per coroutine, "concurrency" in the main
    configuration file)
    event-agent: configure timeouts to the account service
    
    Jira: OS-355
    conf: update event-handlers sample
    Update the sample of the event handler configuration
    event-agent: Add event handler for the modification of properties
    
    (cherry picked from commit 02da0c6f1f8a13f2fad6b60493d45618649aa05f)
    Update event-agent configuration sample
    
    `meta2_index` filter disappears and is replaced by `volume_index`.
    Add event filters to index META2 databases
    oio-bootstrap: configure LB warn_dist
    event-agent: Add event handler for the modification of properties
    events/webhook filter: add sample conf
    Meta2, event: fix content rebuild
    
    Add check of a partial content upload to comply with multipart upload of oiofs
    Add another verification for the event handler tests
    meta2: notify the sparse contents
    
    Add meta2_filter_action_check_content before action_put_content
    Check the size and the position of the all the chunks a content.
    Depending of the storage_policy some chunks can be rebuild (eg copy or ec)
    with the chunks already presents.
    If the chunks can be rebuild it send a event storage.content.broken containing
    "present_chunks":[{"id":"...","pos":"...","hash":"...","size":"..."}],
    "missing_chunks":[pos1,pos2,...,posn]
    if not return FILTER_KO.
    Add an event handler content_broken that permit to rebuild the missing chunks
    event: new noop event filter
    
    Does nothing with the input event. Useful if you just want to drop the events.
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    tests: Add configs to reproduce a bug
    Allow to place some chunks locally to the proxy
    oio-bootstrap: Allow deploying several beanstalkd
    Add oio-reset.sh options + config presets
    
    * multiple IP (must be local) for all the services
    * multiple IP for each service, different frim the global set
    * configuration files renamed
    * CI scripts modified accordingly
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    etc: finer oio-reset.sh configuration files
    oio-reset.py: accepts several configuration files
    oio-reset: Add an option file for a 32MiB chunk size
    tools: Add oio-zk-harass to stress a ZK server
    Test content.perfectible events management
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    core: move python files around
    blob-auditor: audit chunks
    event-agent: share AccountClient and RdirClient instances
    
    Also review configuration defaults:
    - refresh account address every 3600s;
    - allow as many connections as coroutines ("concurrency").
    event: review event-agent configuration options
    
    - Update sample configuration file.
    - Print a link to the configuration sample when no argument is passed.
    - Print a warning when a deprecated option is used.
    events: Fix invalid ssample beanstalk addresses
    EC through gateway + rebase on master (#594)
    
    * fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    
    * event-agent: use basic http for account client
    
    * oio-bootstrap.py: fixed default schema for mail applications
    
    * metautils/lb: uses the local PRNG, uniform distribution (#582)
    
    Uses the local PRNG instead of the libc's rand(), with its guarantee on
    the uniform distribution over a given range.
    
    This should lead to better random and should fix the apparent preference
    for the first item.
    
    * Do not generate extra debug and asserts when building in RelWithDebInfo
    
    * core: implement upload and download through http gateway
    fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    event-agent: get rid of old useless stuff
    event-agent: add concurrency option for workers
    core: move python files around
    event-agent: retries_per_second now replace retry_interval
    event-agent: improve queue backend
    
    add batch_size setting
    fix bootstrap for queue location
    event agent: add configuration option to skip rdir updates
    event-agent: option to disable account updates
    event agent: add persistence queue
    event-agent : added namespace field to sample config
    python: improved syslog logging
    tools: set user for event-agent in bootstrap script
    event-agent now support async chunk delete
    WIP account service with redis backend
    improve python cmake build
    event agent WIP
    Integrate new erasure coding daemon
    storage policies: moar review
    
    iod: PUT and GET meta chunks via HTTP
    container_streaming: rework generation of TarEntry
    
    Also add comments and fix related to flake8
    Implement service 'admin'
    
    This service will allow to download a container.
    The API is now managed by a WSGI rule with parameters acct and ref
    like other services.
    
    Previously, oio-bootstrap.py was using configuration file to store
    Apache configuration. This patch moves them into dedicated files
    with component httpd.
    It allow to specify configuration file for this new service.
    Integrate new erasure coding daemon
    storage policies: moar review
    
    iod: PUT and GET meta chunks via HTTP
    container backup: rename ambiguous variables and files
    Implement service 'admin'
    
    This service will allow to download a container.
    The API is now managed by a WSGI rule with parameters acct and ref
    like other services.
    
    Previously, oio-bootstrap.py was using configuration file to store
    Apache configuration. This patch moves them into dedicated files
    with component httpd.
    It allow to specify configuration file for this new service.
    Integrate new erasure coding daemon
    proxy: Remove unused code
    proxy: Deregister specific services
    proxy: Send 503 when the service types are not yet loaded
    meta2, proxy: return 405 on unallowed WORM mode op
    proxy: map meta2 code 424 to HTTP 409 Conflict
    sqliterepo: new error code 511 for corrupted databases
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    proxy: Reply '503 Retry' upon frozen containers.
    
    Helps the (coming soon) retries by the clients
    proxy/lb: new route to create a service pool
    proxy: Fix bulk requests
    
    * Factorized the code
    * Fixed memleaks upon errors
    proxy: Fix bulk requests
    
    * Factorized the code
    * Fixed memleaks upon errors
    proxy: Reply "503 unavailable" with Retry-After, when meaningful
    
    When the service's load is excessive, when the targeted election is in a
    (temporary) failed state, when too many redirection occur, etc.
    proxy: Display the source erorr in the access log
    proxy: Reduce the number of calls to realloc() and strlen()
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    proxy: prefer MASTER for writing, SLAVE for reading
    proxy: allows replying with a GBytes that can be shared.
    
    The feature to reply with GByteArray was unused and the analog with
    GBytes was expected to efficiently reply entries from a shared cache of
    service.
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    proxy: fixed response status upon code=400 from the backend
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    proxy: fix domain logging
    proxy: add new routes and use headers
    
    New routes:
    We want clean and simple routes for interaction with dir/m2/sqlx APIs.
    
    New route format is '/v3.0/$NS/$api/$action'
    
    request parameters are now passed as query args.
    
    Example:
    for container creation:
    
        POST /v3.0/NS/container/create?acct=myaccount&ref=mycontainer
    
    With parameters as query args it is now easier to access API actions
    using optional parameters.
    This is especially useful when using the CID, example:
    
        POST /v3.0/NS/container/destroy?acct=myaccount&ref=4
    
        POST /v3.0/NS/container/destroy?cid=044B85A46CE9A1B256A1BD3D257B1ADBE2DD6FDFD7D6B33DE47AF23C9CD5C38D
    
    Simplified API names:
    m2 -> container & content
    dir -> reference
    sqlx -> admin
    
    Note: this is a proposal, we may change theÃmm.
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    proxy: better error management, now able to multiple-bind
    proxy: now manages objects listing with delimiter and prefix.
    OpenIO is lifting off now !
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    proxy: sqlx properties fixed
    proxy: sqlx properties fixed
    proxy: properties actions now implemented on containers.
    OpenIO is lifting off now !
    proxy: Allow to force the request on master service
    
    It was already possible to do this by adding 'proxy.force.master'
    in the proxy configuration. But this was applied to all requests.
    
    If we wanted to force the master only on a specific request,
    we can add the 'x-oio-force-master' header in the request.
    But this header was only used to list the objects in a container.
    
    Now, it is possible to specifically force the master on all meta2 requests.
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    proxy: Allow to rebuild chunk in frozen container
    proxy: Send boolean field only if it is true
    proxy: Handle /content/spare locally, no meta2 involved
    proxy: Allow to add delete marker to a specific version
    proxy: Allow to simulate versioning when creating and deleting an object
    Update max_versions of container from header (2/2)
    
    This commit bring same mecanism to update sys.m2.policy.versions
    from header to content/delete operation: we want to control
    if current version of object must be deleted or add a delete marker.
    Update max_versions of container from header
    
    This commit introduce possibility to update max_versions when creating
    object:
    this is useful for container created through autocreate functionality:
    for Container Hierarchy, enabling versioning is set on root container,
    it is not possible to parse all container to update value and
    for performance, a dedicated request to update container is skipped
    (as a lot of upload may occurs at same time)
    
    If header `x-oio-force-versioning` is received,
    the max_versions is updated before completing
    object (to keep mecanism to delete prior object if needed)
    proxy: Recompute damaged objects count of a container
    Update Copyright
    proxy: Recompute statistics of a container
    proxy: Allow to change the policy of an object
    Update the copyright
    proxy, meta2: Remove 'content/link'
    proxy, meta2: Remove 'content/copy'
    meta2: Limit the number of deleted object when flushing
    meta2: Send events to remove the chunks when flushing a container
    Purge with a fixed number of versions
    meta2: Purge alias
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    Let transmit deadline in M2 rpc issued by the proxy
    meta2: get rid of M2_LEAVE RPC
    
    This was used to workaround resolver cache issues. But since we reduced
    usage of resolver cache, we don't need it anymore.
    Container snapshot: fix small issues
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    Adapt the code to the central config
    proxy: Extend the preference for te proxy to all the M2 read-only RPC
    m2,proxy: return properties when listing contents
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    m2,proxy: implement content truncate operation
    Implement metachunk replacement
    
    This will allow optimized random writes (to change 1 byte, you will
    have to download and reupload only 1 metachunk, not the whole content).
    proxy: prefer MASTER for writing, SLAVE for reading
    m2v2: adds ISEMPTY feature, fixes DESTROY
    
    * DESTROY is now only local and the event emission is explicitely asked by the client
    * ISEMPTY quickly checks if any chunk is present
    proxy: container/destroy plainly destroys the containers and their references
    
    * a container destruction is now: 1/freeze 2/flush 3/unlink 4/destroy(local)
    * meta2 slighty simplified around PURGE/DEDUP/FLUSH, where the dry_run options have disappeared.
    metautils: unused code removed
    metautils+meta2: unused code removed
    m2v2+proxy: routes with explicit content id now manage this via the oio_url extracted from http URL.
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    m2v2 / remote : reduces the exposition of functions
    core : explicit content links implemented.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    m2v2: when listing a container's aliases, the container's metadata are also returned.
    
    In addition, unused code have been pruned from meta2.
    That code has been released with integrity-loop's removal.
    Fixed service push to the conscience + Cleanup, round 8
    
    * The last cleanup commit was named #6, but this was a mistke, there was already a #6.
    * Code factorized
    * Useless code removed
    * Codec functions simplified.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Centralized macros, shorter values.
    Minor code and macros factorisation
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    Slab allocation for small structures + ASN.1 message simplification
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    Slab allocation for small structures + ASN.1 message simplification
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Get rid of grid_storage_client_stat
    
    One of the ugliest piece of code present here.
    It was intrusive and based on static variables.
    Minor efficiency improvements.
    Content propeties reviewed + Cleanup, round 2
    Request-Id now managed in clients and servers
    
    * transmitted via a thread-local data
    * explicit ID eliminated from remote API (m2v2) + caller code adapted
    * in servers, collected from incoming requests, propagated to outgoing requests.
    * set to a random value when not set.
    Get rid of an old rename trick born in redcurrant.
    OpenIO is lifting off now !
    Several fixes and improvements
    
    JSON fixed for service_info.
    Finer decache in resolver.
    m2v2_remote_touch_content fixed.
    m2v2 does not generates events when disabled.
    
    Change-Id: Ib145ba973ad7d9f3810c4c0fa4f30f1be1ff4639
    integrity/m2v2: fixes for orphan chunk check.
    
     - use long timeout (1h) for all requests to m2v2 and m2v1
     - stop the check if a network error is encountered
     - handle more cases of chunkid starting with '/'
     - change check order: chunk referencing is checked before chunk date,
       so a referenced chunk cannot be moved to lost+found
    
    Change-Id: I57f0c7b237fe1aa852f876e72d029f00e4aaef8e
    Fixed logging domain
    
    Change-Id: I36e6a63789b3e2f3ce4bbcc3ff4a59ee96ca52f7
    m2v2: unused/useless rpc code removed
    
    Change-Id: Ia04052d18fb285e68717ce75b7557b153375e719
    Merges the promoter's changes.
    
      * client/c: adapt rainx_remote for future use
      * Remove meta2_container_services from installed binaries in honeycomb.spec
      * cluster/lib : Fixed memory when there is no /etc/gridstorage.conf
      * m2v2: minor safety fix for chunk substitution
      * metautils / sockets : Fixed return code check.
    c client: use libcurl instead of threads + rain bugfix
    1.8.4 release candidate
    Initial commit
    proxy: Remove unused code
    Move lrutree.* from metautils/ to core/
    proxy: upgrade real_url to https
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    proxy: Send 503 when the service types are not yet loaded
    proxy: Circumvent the LB problem
    
    Avoid the wrong distance computation ... by a general avoidance of
    npn-rawx services.
    Reorganize the libraries, Avoid a loop on the proxy
    proxy: Prefer local services
    
    1/ Give a location to any proxy on the host (central variable)
    2/ Mangle the scores of RAWX to give precedence to services that are
       closer
    3/ Allow to enable/disable that behavior.
    proxy: Decache stale service locations more often
    enbug/conf: More configurable behaviors
    
    Without this, it becomes really hard to test a single error case since
    all the variables had a non-null default value.
    proxy: Flush the cache upon code=431 errors
    
    These errors are clues of DB removed/moved.
    meta2: Limit the number of deleted object when flushing
    proxy: Leave the election for a specific service ID
    meta2, proxy: return 405 on unallowed WORM mode op
    Use Service Id everywhere
    Expose a REST API to convert UUID to ADDR
    proxy: Add conscience/resolve for UUID
    
    It depends on type and uuid.
    The LB cache is used at this time to avoid hit
    conscience.
    No fallback is done (maybe rename this route
    or add fallback to retrieve list from cosncience)
    proxy: Fix the deadline mgmt around conscience RPC
    proxy: Retry upon network errors toward the conscience
    proxy: Turn avoidance off for forwarded RPC
    Move gridd_client_exec_and_concat_string into proxy/
    
    The only place it is used
    Python API, CLI: keep track of request durations
    
    First step: keep track of resolving and request times in proxy,
    then rawx request time in Python API.
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    Let transmit deadline in M2 rpc issued by the proxy
    resolver,proxy: Centralise to variable to on/off the whole cache
    
    A live managed variable instead a fixed field in a structure.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    cluster: Remove the useless "chunk_size" field from the nsinfo
    
    Also remove it from the ASN.1 structure.
    Everything has been migrated to the central configuration facility.
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    conf: Insulate the variables of the proxy ... in the proxy
    proxy: Add sanity checks around some options
    proxy: Fix bulk requests
    
    * Factorized the code
    * Fixed memleaks upon errors
    lb: Expire the services that disappeared from the conscience
    
    Fix #815
    proxy: Fix bulk requests
    
    * Factorized the code
    * Fixed memleaks upon errors
    Avoid allocating memory for small strings with a bounded size
    
    Rather use character arrays located on the stack or inlined into their
    owner structures.
    proxy: Reply "503 unavailable" with Retry-After, when meaningful
    
    When the service's load is excessive, when the targeted election is in a
    (temporary) failed state, when too many redirection occur, etc.
    Adapt the code to the central config
    lb: Expire the services that disappeared from the conscience
    
    Fix #815
    proxy: Fix a wrong function prototype for callbacks
    
    The wrong prototype should have introduced no wrong behavior nor any
    corruption. But damned, this was ugly!
    proxy: Fix signedness mismatch in comparison
    proxy: Remove unused code
    proxy: Review the MASTER/SLAVE preference behavior
    
    PreferMasterForWrites -> prefer MASTER for write ops
    PreferMaster -> prefer MASTER for read-only ops
    PreferSlave -> prefer a SLAVE for read-only ops
    ForceMaster -> ask a SLAVE to redirect to the MASTER, even if read-only
    
    PreferMaster supersedes PreferSlave.
    proxy: Allow to ask for master only in meta2 RPC
    
    Currently, only upon /content/show and /content/locate
    proxy: Display the source erorr in the access log
    Move the minimal rrd from server to metautils
    
    It prepares a change coming soon in sqliterepo, that requires the simple
    RRD implementation.
    proxy: intentionally enbugs the requests toward replicated databases
    proxy: removes an unused variable
    proxy: new route to flush the proxy's internal LB pool
    proxy: all PREFER_SLAVE requests can be changed into PREFER_MASTER requests, if prefer_master flag in proxy is activated
    proxy: fail on empty properties requests
    
    Previously it was a noop.
    proxy: properties management unified
    
    ... when creating entities, setting properties, getting them.
    ... whatever the entity (user, container, content) the format is the
    same at the proxy level and at the backend service level.
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    proxy: integrate new load balancer
    proxy: all the boolean flags available from the URL
    proxy/common.c : add a function to recover flags from url, or header, or default (#586)
    Benefits from optimized strcmp() when case sensitivity is not worth (#578)
    proxy: prefer MASTER for writing, SLAVE for reading
    proxy,resolver: expresses delays in monotonic time precision
    
    One step further in the uniformisation of the TTL and Delays management
    that previously mixed gdouble (seconds), time_t (second) and gint64
    (monotonic clock).
    
    The monotonic clock is the law!
    proxy: trades some GMutex for GRWLock
    proxy: fixes comment to reflect the reality
    proxy: caches the list of services
    
    ... when caching is enabled. This saves a lot of calls to the
    conscience.
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    proxy: patches the local service to display their score
    proxy: container/destroy plainly destroys the containers and their references
    
    * a container destruction is now: 1/freeze 2/flush 3/unlink 4/destroy(local)
    * meta2 slighty simplified around PURGE/DEDUP/FLUSH, where the dry_run options have disappeared.
    proxy: ttl for local services set to 30s (intead of 5s)
    
    Modifiable at compile time with the help of PROXYD_TTL_DEAD_LOCAL_SERVICES
    proxy: minor facctorization + better debug
    
    Thanks to lru's fixup, whatever the <srv_registered> is declared with NOATIME or not.
    Its items are never accessed via the tree (only added).
    proxy+cluster: cluster now also uses the proxy to reach the conscience
    
    + proxy feature to avoid logging succesful accesses for "too common" requests. It avoids flooding the log service.
    m2v2+proxy: routes with explicit content id now manage this via the oio_url extracted from http URL.
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    proxy: V2.0 routes'es code removed, RDIR routes implemented
    conscience: renaming + pruning + reorg
    
    * conscience/agent remote functions have been renamed for more clarity
    * MACRO tags have been removed (usage too scarce and immutable, no need of something so flexible)
    * CPU/IO/SPACE computation moved from the oio-cluster-agent to libgridcluster
    * oio-cluster-agent is now now mandatory
    cluster, proxy: Fixes & Improvements
    
    * cluster / remote: cleaner and uniform interface, stripped code (+ dependencies adapted)
    * proxy: CLI option to disable the cache of services
    * proxy: management of services down, that are receive a lower priority
    * server: minor cleanups
    Fixes, improvements
    
    m2v2: fixed "bean leak" when purging exceeding aliases (properties not removed).
    m2v2: fixed "bean leak" when deleting explicit aliases (properties not removed).
    proxy: Fixed compile-time warnings
    proxy: properties returned in headers when getting objects
    proxy: headers matching now case-insensitive
    proxy: In addition, request handlers returning invariable and dummy outputs (empty lists, empty sets) now return nothing.
    tools: bootstrap doesn't deploy the admin flask (it is destined to disappear in the next release and is already used by no one).
    proxy: fixed response status upon code=400 from the backend
    add 3.0 routes for lb and conscience
    core: hc_url renamed to oio_url.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    fix include for json-c lib
    proxy: add new routes and use headers
    
    New routes:
    We want clean and simple routes for interaction with dir/m2/sqlx APIs.
    
    New route format is '/v3.0/$NS/$api/$action'
    
    request parameters are now passed as query args.
    
    Example:
    for container creation:
    
        POST /v3.0/NS/container/create?acct=myaccount&ref=mycontainer
    
    With parameters as query args it is now easier to access API actions
    using optional parameters.
    This is especially useful when using the CID, example:
    
        POST /v3.0/NS/container/destroy?acct=myaccount&ref=4
    
        POST /v3.0/NS/container/destroy?cid=044B85A46CE9A1B256A1BD3D257B1ADBE2DD6FDFD7D6B33DE47AF23C9CD5C38D
    
    Simplified API names:
    m2 -> container & content
    dir -> reference
    sqlx -> admin
    
    Note: this is a proposal, we may change theÃmm.
    proxy: Remove unused code
    proxy: Circumvent the LB problem
    
    Avoid the wrong distance computation ... by a general avoidance of
    npn-rawx services.
    proxy: Expose the balance-masters route
    sqliterepo: add possibility to balance master elections
    
    (cherry picked from commit b5633f3b9a44b41bf5f2065db97b4567241998f1)
    metaX: Specify the result for each key when setting config
    proxy: Specify the result for each key when setting config
    proxy: Reduce the log volume for /forward and /cache
    core: rename misnamed function
    Expose known services from proxy/cache
    
    When asking conscience/list, if no cache is availble, request is
    forwarded to conscience itself. There was no way to check
    current status of cache of proxy.
    proxy: Turn avoidance off for forwarded RPC
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    core/var: Introduce a readonly flag on the variables
    
    * The variables set at the CLI receive the flag.
    * readonly variables are not reset
    * a specific function is used to force a variable to a readonly value,
      and it can be used to force a behavior, programmatically.
    proxy: Remove the useless routes to manage the cache config
    
    The variables are already centralized in core/var.
    proxy: Expose the route /forward/info
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    conf: Insulate the variables of the proxy ... in the proxy
    conf: Add the ability to set/get the variables of a running service
    
    Currently covers oio-proxy, oio-{sqlx,meta{0,1,2}}-server.
    
    The proxy is queried with the route `/v3.0/config` (GET and POST).
    
    The services are queried through the proxy with the route `/v3.0/forward/config?id=SRVID`.
    proxy: Add a route to reply the live configuration (of the proxy itself)
    Adapt the code to the central config
    proxy: Reduce the number of calls to realloc() and strlen()
    proxy: new route /forward/info
    lb,proxy: add flush, refactor a bit
    proxy: integrate new load balancer
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    proxy,resolver: expresses delays in monotonic time precision
    
    One step further in the uniformisation of the TTL and Delays management
    that previously mixed gdouble (seconds), time_t (second) and gint64
    (monotonic clock).
    
    The monotonic clock is the law!
    proxy: configurable timeouts for outgoing stat + larger default
    proxy: allows replying with a GBytes that can be shared.
    
    The feature to reply with GByteArray was unused and the analog with
    GBytes was expected to efficiently reply entries from a shared cache of
    service.
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    proxy: access log disabled by default for some routes
    
    Disabled upon successes for some handlers that are called too often.
    oio-tool: admin requests moved to oio-proxy
    proxy: 'forward' modified to propose the 'stats' request
    
    + tests modified to take this evolution into account
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    Various beautifications
    
    agent: unused code removed
    cluster: uniform interface
    cluster: agent bypass
    conscience: func tests OK
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    proxy: new route to flush all the internal caches of the proxy
    proxy: fix domain logging
    proxy: add new routes and use headers
    
    New routes:
    We want clean and simple routes for interaction with dir/m2/sqlx APIs.
    
    New route format is '/v3.0/$NS/$api/$action'
    
    request parameters are now passed as query args.
    
    Example:
    for container creation:
    
        POST /v3.0/NS/container/create?acct=myaccount&ref=mycontainer
    
    With parameters as query args it is now easier to access API actions
    using optional parameters.
    This is especially useful when using the CID, example:
    
        POST /v3.0/NS/container/destroy?acct=myaccount&ref=4
    
        POST /v3.0/NS/container/destroy?cid=044B85A46CE9A1B256A1BD3D257B1ADBE2DD6FDFD7D6B33DE47AF23C9CD5C38D
    
    Simplified API names:
    m2 -> container & content
    dir -> reference
    sqlx -> admin
    
    Note: this is a proposal, we may change theÃmm.
    OpenIO is lifting off now !
    proxy: Remove unused code
    proxy: Expose a route /v3.0/:NS/conscience/score
    
    The route returns the score of a specific service, as it is known by the
    oio-proxy instance.
    sqliterepo: add possibility to balance master elections
    
    (cherry picked from commit b5633f3b9a44b41bf5f2065db97b4567241998f1)
    sqliterepo: implement database vacuum request
    
    Vacuum (defragment) the database on the master service, then
    resynchronize it on the slaves.
    
    Jira: OS-299
    proxy: forward special property beans
    
    Jira: R1810-27
    Update the copyright
    proxy, meta2: Remove 'content/link'
    proxy, meta2: Remove 'content/copy'
    proxy, sqliterepo: Remove specific base
    proxy, sqliterepo: Ask each peer if base exists
    meta2: Purge alias
    Use Service Id everywhere
    Expose known services from proxy/cache
    
    When asking conscience/list, if no cache is availble, request is
    forwarded to conscience itself. There was no way to check
    current status of cache of proxy.
    Expose a REST API to convert UUID to ADDR
    Add container snapshot
    
    The snapshot take the form of:
    -A copy of the sqlite base of the target to a meta2 chose by the load balancer.
    -All the chunks of the snapshot are replaced by new chunk that hardlink the target one.
    -The snapshot is frozen afterward.
    
    The chunks hardlink implies that the target and the snapshot chunks are in the same rawx.
    Currently it is the client that freeze and enable the containers during the snapshot.
    proxy: Remove the useless routes to manage the cache config
    
    The variables are already centralized in core/var.
    proxy: Expose the route /forward/info
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    proxy/lb: new route to create a service pool
    proxy: Add bulk delete content
    
    Permit to delete many content in one go for one container.
    Modify the format of cli command 'openio object delete' to return a List.Lister.
    Modify tests that depended on the old format response to use the new one.
    
    The format of a request to the proxy is a json '{"contents":[{"name":"..."},{"name":"..."}]}'
    and the url is /content/delete_many.
    The format of the answer is a json '{"contents":[{"name":"...", "status":"...", "message":"..."}]}'
    Add an option to create many containers in on go
    
    The command "openio container create <container>" used to send a request for every
    container in the list to create it.
    Now the command check the number of containers and use a specific request to ask for the
    creation of all the containers.
    proxy: Add bulk delete content
    
    Permit to delete many content in one go for one container.
    Modify the format of cli command 'openio object delete' to return a List.Lister.
    Modify tests that depended on the old format response to use the new one.
    
    The format of a request to the proxy is a json '{"contents":[{"name":"..."},{"name":"..."}]}'
    and the url is /content/delete_many.
    The format of the answer is a json '{"contents":[{"name":"...", "status":"...", "message":"..."}]}'
    conf: Add the ability to set/get the variables of a running service
    
    Currently covers oio-proxy, oio-{sqlx,meta{0,1,2}}-server.
    
    The proxy is queried with the route `/v3.0/config` (GET and POST).
    
    The services are queried through the proxy with the route `/v3.0/forward/config?id=SRVID`.
    proxy: Add a route to reply the live configuration (of the proxy itself)
    config: Manage a second batch of variables
    Add an option to create many containers in on go
    
    The command "openio container create <container>" used to send a request for every
    container in the list to create it.
    Now the command check the number of containers and use a specific request to ask for the
    creation of all the containers.
    proxy: new route to flush the proxy's internal LB pool
    m2,proxy: implement content truncate operation
    Implement metachunk replacement
    
    This will allow optimized random writes (to change 1 byte, you will
    have to download and reupload only 1 metachunk, not the whole content).
    proxy: integrate new load balancer
    m0, proxy: new routes and tools to list and force meta0 mapping
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    proxy: forward declaration making linters happy
    proxy: container/destroy plainly destroys the containers and their references
    
    * a container destruction is now: 1/freeze 2/flush 3/unlink 4/destroy(local)
    * meta2 slighty simplified around PURGE/DEDUP/FLUSH, where the dry_run options have disappeared.
    proxy+cluster: cluster now also uses the proxy to reach the conscience
    
    + proxy feature to avoid logging succesful accesses for "too common" requests. It avoids flooding the log service.
    core/cs: API completed
    
    Also, the API has been made more robust to manage strings with '"' and UTF-8 characters in the JSON messages
    proxy+rdir: remove useless rdir commands
    Python client sends commands to rdir server directly
    rdir: add rebuild crawler to rebuild chunks on the same valume after its replacement
    proxy+rdir: add actions to fetch the index and to show rebuild status
    rdir: add chunk deletion event
    proxy: V2.0 routes'es code removed, RDIR routes implemented
    proxy: V3 routes now used in core/, V2 routes removed from the proxy
    
    Some functional tests still require to be adapted (container, reference)
    Various beautifications
    
    agent: unused code removed
    cluster: uniform interface
    cluster: agent bypass
    conscience: func tests OK
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    proxy: export m1v2 RELINK
    add 3.0 routes for lb and conscience
    proxy: new route to flush all the internal caches of the proxy
    proxy: add new routes and use headers
    
    New routes:
    We want clean and simple routes for interaction with dir/m2/sqlx APIs.
    
    New route format is '/v3.0/$NS/$api/$action'
    
    request parameters are now passed as query args.
    
    Example:
    for container creation:
    
        POST /v3.0/NS/container/create?acct=myaccount&ref=mycontainer
    
    With parameters as query args it is now easier to access API actions
    using optional parameters.
    This is especially useful when using the CID, example:
    
        POST /v3.0/NS/container/destroy?acct=myaccount&ref=4
    
        POST /v3.0/NS/container/destroy?cid=044B85A46CE9A1B256A1BD3D257B1ADBE2DD6FDFD7D6B33DE47AF23C9CD5C38D
    
    Simplified API names:
    m2 -> container & content
    dir -> reference
    sqlx -> admin
    
    Note: this is a proposal, we may change theÃmm.
    resolver: allow to resolve only meta0 services
    
    This is useful to run election commands on a broken meta0.
    proxy: Decache meta1 when the base is not managed
    
    Jira: OS-437
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    proxy: Send 503 when the service types are not yet loaded
    proxy: Fix an erroneous memory management
    proxy: Stop considering sqlx a use case
    proxy: Remove unnecessary decache calls
    proxy: Remove an excessive decache
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    proxy: Prefer local services
    
    1/ Give a location to any proxy on the host (central variable)
    2/ Mangle the scores of RAWX to give precedence to services that are
       closer
    3/ Allow to enable/disable that behavior.
    proxy: Decache stale service locations more often
    proxy, Python API: support 'client specified' peers in more routes
    enbug/conf: More configurable behaviors
    
    Without this, it becomes really hard to test a single error case since
    all the variables had a non-null default value.
    proxy: Flush the cache upon code=431 errors
    
    These errors are clues of DB removed/moved.
    mover: Remove the bases that are no longer used
    proxy: remove dead code
    core, meta2, proxy, tests: rename things
    meta2: support use of ServiceId
    
    meta-server now support ServiceId option on command line
    (but it should be used only by meta2)
    proxy: support comma-separated service IDs
    proxy: Leave the election for a specific service ID
    proxy: Shuffle services if no preferred service
    proxy: Fix the management of invalid peers.
    proxy: Fix the management f directory URL
    
    and prevent a assertion to be raised.
    proxy: Retry upon network errors toward the conscience
    proxy: Turn avoidance off for forwarded RPC
    proxy: Rework a function for further changes
    Move gridd_client_exec_and_concat_string into proxy/
    
    The only place it is used
    Python API, CLI: keep track of request durations
    
    First step: keep track of resolving and request times in proxy,
    then rawx request time in Python API.
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    proxy: implement "PIPEFROM" route under admin/copy
    proxy: fix low-level property setting
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    conf: Insulate the variables of the proxy ... in the proxy
    Avoid allocating memory for small strings with a bounded size
    
    Rather use character arrays located on the stack or inlined into their
    owner structures.
    proxy: Manage the "503 busy" erros from the backend
    
    Previously consdered as simple error, too strong to continue to iterate
    but with no special action. Now we keep in mind that the peers is
    probably overloaded.
    Adapt the code to the central config
    proxy: Fix signedness mismatch in comparison
    proxy: Review the MASTER/SLAVE preference behavior
    
    PreferMasterForWrites -> prefer MASTER for write ops
    PreferMaster -> prefer MASTER for read-only ops
    PreferSlave -> prefer a SLAVE for read-only ops
    ForceMaster -> ask a SLAVE to redirect to the MASTER, even if read-only
    
    PreferMaster supersedes PreferSlave.
    proxy: Allow to ask for master only in meta2 RPC
    
    Currently, only upon /content/show and /content/locate
    proxy: Use the new fake error code for ENBUG errors
    proxy: fixes service type detection for /admin/{debug,status}
    proxy: fixes /admin/debug
    proxy: intentionally enbugs the requests toward replicated databases
    proxy: on multiple requests, ensures a result exists for each attempt
    
    Those results (url, error, body) are freed with a "strfreev" style,
    stopping at the first NULL pointer. Then with a non-NULL results even for
    error cases, we avoid memory leaks.
    proxy: all PREFER_SLAVE requests can be changed into PREFER_MASTER requests, if prefer_master flag in proxy is activated
    proxy: empty resolver cache when error is 'prefix not managed'
    meta2: empty meta2 cache when error is 'prefix not managed'
    meta1: reload prefixes when error is 'prefix not managed'
    proxy: fail on empty properties requests
    
    Previously it was a noop.
    proxy: properties management unified
    
    ... when creating entities, setting properties, getting them.
    ... whatever the entity (user, container, content) the format is the
    same at the proxy level and at the backend service level.
    core+metautils: code cleanup, functions {re,}moved
    proxy: Fixes /admin/status
    
    restores the 'noredirect' option when crawling services
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    proxy: integrate new load balancer
    proxy: all the boolean flags available from the URL
    proxy/common.c : add a function to recover flags from url, or header, or default (#586)
    proxy: fixes detection of containers not found
    proxy: prefer MASTER for writing, SLAVE for reading
    m2v2,proxy,events/zmq: benefits from thread-local PRNG
    proxy,resolver: expresses delays in monotonic time precision
    
    One step further in the uniformisation of the TTL and Delays management
    that previously mixed gdouble (seconds), time_t (second) and gint64
    (monotonic clock).
    
    The monotonic clock is the law!
    proxy: trades some GMutex for GRWLock
    proxy: caches the list of services
    
    ... when caching is enabled. This saves a lot of calls to the
    conscience.
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    Fixed several optimisations around up/down services
    
    There were partition/shuffle problems when looping on lists of services.
    * the ok/nok qualification of services didn't work (in the resolver)
    * the shuffling was potentially broken by a subsequent partition ok ok/nok services.
    * both weren't called at all in several cases.
    Hook'able clock function now used everywhere
    Dropped the dependency to the Linux's specific clock functions.
    fixed json parsing (proxy), trimmed unused parameter (sqlx_propget)
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    proxy: V2.0 routes'es code removed, RDIR routes implemented
    cluster, proxy: Fixes & Improvements
    
    * cluster / remote: cleaner and uniform interface, stripped code (+ dependencies adapted)
    * proxy: CLI option to disable the cache of services
    * proxy: management of services down, that are receive a lower priority
    * server: minor cleanups
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    proxy: fix domain logging
    proxy: add new routes and use headers
    
    New routes:
    We want clean and simple routes for interaction with dir/m2/sqlx APIs.
    
    New route format is '/v3.0/$NS/$api/$action'
    
    request parameters are now passed as query args.
    
    Example:
    for container creation:
    
        POST /v3.0/NS/container/create?acct=myaccount&ref=mycontainer
    
    With parameters as query args it is now easier to access API actions
    using optional parameters.
    This is especially useful when using the CID, example:
    
        POST /v3.0/NS/container/destroy?acct=myaccount&ref=4
    
        POST /v3.0/NS/container/destroy?cid=044B85A46CE9A1B256A1BD3D257B1ADBE2DD6FDFD7D6B33DE47AF23C9CD5C38D
    
    Simplified API names:
    m2 -> container & content
    dir -> reference
    sqlx -> admin
    
    Note: this is a proposal, we may change theÃmm.
    proxy: fixed flag detection.
    proxy: fixes and improvements
    
    * Duplicated '/' not agregated in URI (path not purified).
    * URI-encoding now managed
    * errors upon actions slightly clearer.
    m2v2: when listing a container's aliases, the container's metadata are also returned.
    
    In addition, unused code have been pruned from meta2.
    That code has been released with integrity-loop's removal.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Fixed memory leaks.
    
    Conflicts:
            meta1v2/meta1_backend_services.c
    Slab allocation for small structures + ASN.1 message simplification
    Fixed memory leaks.
    
    Conflicts:
            meta1v2/meta1_backend_services.c
    Slab allocation for small structures + ASN.1 message simplification
    proxy: access log lines about POST request now tell the action in the body.
    OpenIO is lifting off now !
    core: Merge TLS management with service_id
    
    oio_lb_item_s now contains new field. This new field is reused
    by oio_resolve_id
    proxy: Expose a route /v3.0/:NS/conscience/score
    
    The route returns the score of a specific service, as it is known by the
    oio-proxy instance.
    proxy: Deregister specific services
    proxy: Send 503 when the service types are not yet loaded
    Reorganize the libraries, Avoid a loop on the proxy
    CLI: document 'openio cluster <verb>' commands
    core/lb: make service ID comparisons case insensitive
    enbug/conf: More configurable behaviors
    
    Without this, it becomes really hard to test a single error case since
    all the variables had a non-null default value.
    Test content.perfectible events management
    Update conscience service documentation
    proxy: Avoid pushing empty lists to the conscience
    Use Service Id everywhere
    Expose a REST API to convert UUID to ADDR
    proxy: Add conscience/resolve for UUID
    
    It depends on type and uuid.
    The LB cache is used at this time to avoid hit
    conscience.
    No fallback is done (maybe rename this route
    or add fallback to retrieve list from cosncience)
    proxy: Fix the deadline mgmt around conscience RPC
    proxy: Retry upon network errors toward the conscience
    proxy: Add skeletons of docs, for the example
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    Add oio-conscience-server to replace gridd+msg_conscience
    
    * Drop gridd (a.k.a. oio-daemon)
    * Rewrite cluster/module/module.c as a standalone service
    * Adapt oio-bootstrap.py to generate env based on the new conscience
    * Merge the conscience lib in the server
    * Move the expression parsing from metautils to cluster
    * Fix compilation warnings about deprecated symbols
    proxy: fix memory corruption in batch registration (fix #1141)
    proxy: Manage batches of registrations
    Revert "proxy: Manage batches of registrations"
    
    This reverts commit 8493898b9d3ad12b96784bfb15f0ce886ee8dede.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    proxy: Manage batches of registrations
    proxy: Manage batches of registrations
    proxy: Early ignore the invalid services (upstream)
    
    Fix #1070
    conf: Insulate the variables of the proxy ... in the proxy
    proxy: make command lock/unlock check type of the service (fix #822)
    
    We cannot check if the service is valid, so invalid services will still be
    accepted. But unknown service types to the proxy at the time of the request
    will be rejected.
    proxy: Avoid losing the (un)lock on sinmple registrations
    
    Attempt to fix #845
    proxy: Reply "503 unavailable" with Retry-After, when meaningful
    
    When the service's load is excessive, when the targeted election is in a
    (temporary) failed state, when too many redirection occur, etc.
    proxy: make command lock/unlock check type of the service (fix #822)
    
    We cannot check if the service is valid, so invalid services will still be
    accepted. But unknown service types to the proxy at the time of the request
    will be rejected.
    Adapt the code to the central config
    proxy: Avoid losing the (un)lock on sinmple registrations
    
    Attempt to fix #845
    proxy: Reduce the number of calls to realloc() and strlen()
    proxy: removes abusive XXX comments
    
    Though it ws just used to higlight comments, those marks sometimes
    scary people reading the code.
    proxy: doesn't register local service on unlock
    cli: add 'openio cluster unlockall' command
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    proxy: integrate new load balancer
    proxy: all the boolean flags available from the URL
    proxy: prefer MASTER for writing, SLAVE for reading
    lru: removes unused code
    proxy: trades some GMutex for GRWLock
    proxy: caches the list of services
    
    ... when caching is enabled. This saves a lot of calls to the
    conscience.
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    proxy: patches the local service to display their score
    proxy: minor facctorization + better debug
    
    Thanks to lru's fixup, whatever the <srv_registered> is declared with NOATIME or not.
    Its items are never accessed via the tree (only added).
    proxy: fixed expiration of local services
    proxy: now able to list local services for any type
    proxy+cluster: cluster now also uses the proxy to reach the conscience
    
    + proxy feature to avoid logging succesful accesses for "too common" requests. It avoids flooding the log service.
    Fixed compilation on x86_32
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    core/cs: API completed
    
    Also, the API has been made more robust to manage strings with '"' and UTF-8 characters in the JSON messages
    proxy: fixed error code for an unmanaged srvtype
    Hook'able clock function now used everywhere
    proxy: minor fixes on bugs raised by the latest functional tests.
    proxy: V2.0 routes'es code removed, RDIR routes implemented
    proxy: V3 routes now used in core/, V2 routes removed from the proxy
    
    Some functional tests still require to be adapted (container, reference)
    m2v2: code simplifications and memleaks fixes around namespace_info structures
    conscience: renaming + pruning + reorg
    
    * conscience/agent remote functions have been renamed for more clarity
    * MACRO tags have been removed (usage too scarce and immutable, no need of something so flexible)
    * CPU/IO/SPACE computation moved from the oio-cluster-agent to libgridcluster
    * oio-cluster-agent is now now mandatory
    Various beautifications
    
    agent: unused code removed
    cluster: uniform interface
    cluster: agent bypass
    conscience: func tests OK
    cluster, proxy: Fixes & Improvements
    
    * cluster / remote: cleaner and uniform interface, stripped code (+ dependencies adapted)
    * proxy: CLI option to disable the cache of services
    * proxy: management of services down, that are receive a lower priority
    * server: minor cleanups
    add 3.0 routes for lb and conscience
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    proxy: fix domain logging
    proxy: add new routes and use headers
    
    New routes:
    We want clean and simple routes for interaction with dir/m2/sqlx APIs.
    
    New route format is '/v3.0/$NS/$api/$action'
    
    request parameters are now passed as query args.
    
    Example:
    for container creation:
    
        POST /v3.0/NS/container/create?acct=myaccount&ref=mycontainer
    
    With parameters as query args it is now easier to access API actions
    using optional parameters.
    This is especially useful when using the CID, example:
    
        POST /v3.0/NS/container/destroy?acct=myaccount&ref=4
    
        POST /v3.0/NS/container/destroy?cid=044B85A46CE9A1B256A1BD3D257B1ADBE2DD6FDFD7D6B33DE47AF23C9CD5C38D
    
    Simplified API names:
    m2 -> container & content
    dir -> reference
    sqlx -> admin
    
    Note: this is a proposal, we may change theÃmm.
    proxy: fixes and improvements
    
    * Duplicated '/' not agregated in URI (path not purified).
    * URI-encoding now managed
    * errors upon actions slightly clearer.
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    proxy: better error management, now able to multiple-bind
    Fixed service push to the conscience + Cleanup, round 8
    
    * The last cleanup commit was named #6, but this was a mistke, there was already a #6.
    * Code factorized
    * Useless code removed
    * Codec functions simplified.
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    OpenIO is lifting off now !
    proxy: Force slab allocations
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    proxy: fix possible buffer overflow
    
    g_snprintf() returns the size it could have written, did it have the
    place or not.
    proxy: removes abusive XXX comments
    
    Though it ws just used to higlight comments, those marks sometimes
    scary people reading the code.
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    Useless/Unused functions removed
    server+proxy: unified stats format
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    proxy: sqlx properties fixed
    proxy: sqlx properties fixed
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    proxy: fixed flag detection.
    proxy: fixes and improvements
    
    * Duplicated '/' not agregated in URI (path not purified).
    * URI-encoding now managed
    * errors upon actions slightly clearer.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    proxy: properties actions now implemented on containers.
    OpenIO is lifting off now !
    proxy: Send 503 when the service types are not yet loaded
    CLI: add '--min-dist' option to 'rdir bootstrap'
    
    Jira: OS-281
    core/lb: keep track of the quality of selected services
    Core/lb: Associate UUID with addr
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    proxy/lb: new route to create a service pool
    proxy/lb: refactor a little
    core/lb: better error handling, warn if flawed
    core/lb: use unsigned integers for bit shifts
    lb: Expire the services that disappeared from the conscience
    
    Fix #815
    lb: Expire the services that disappeared from the conscience
    
    Fix #815
    proxy/lb: Add sanity checks
    proxy: Reduce the number of calls to realloc() and strlen()
    proxy: new route to flush the proxy's internal LB pool
    Review storage policy and service pool configuration
    cli: fix container listing (#624)
    proxy/lb: fixed memleak
    lb: add functional tests
    lb,proxy: add flush, refactor a bit
    proxy: integrate new load balancer
    lb: review for more efficiency
    lb: better error messages (#570)
    
    Fix #567
    proxy: inhibits unwanted accesslog trace (lb)
    proxy: V2.0 routes'es code removed, RDIR routes implemented
    cluster, proxy: Fixes & Improvements
    
    * cluster / remote: cleaner and uniform interface, stripped code (+ dependencies adapted)
    * proxy: CLI option to disable the cache of services
    * proxy: management of services down, that are receive a lower priority
    * server: minor cleanups
    add 3.0 routes for lb and conscience
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    proxy: fix domain logging
    proxy: add new routes and use headers
    
    New routes:
    We want clean and simple routes for interaction with dir/m2/sqlx APIs.
    
    New route format is '/v3.0/$NS/$api/$action'
    
    request parameters are now passed as query args.
    
    Example:
    for container creation:
    
        POST /v3.0/NS/container/create?acct=myaccount&ref=mycontainer
    
    With parameters as query args it is now easier to access API actions
    using optional parameters.
    This is especially useful when using the CID, example:
    
        POST /v3.0/NS/container/destroy?acct=myaccount&ref=4
    
        POST /v3.0/NS/container/destroy?cid=044B85A46CE9A1B256A1BD3D257B1ADBE2DD6FDFD7D6B33DE47AF23C9CD5C38D
    
    Simplified API names:
    m2 -> container & content
    dir -> reference
    sqlx -> admin
    
    Note: this is a proposal, we may change theÃmm.
    OpenIO is lifting off now !
    cluster,metautils: Turn static some functions used once
    cmake: Reorganize the targets
    
    * do not list headers, as it is recommended
    * drop the dependency to sqlite3 in oio-proxy
    Let transmit deadline in M2 rpc issued by the proxy
    conf: Insulate the variables of the proxy ... in the proxy
    Adapt the code to the central config
    m0, proxy: new routes and tools to list and force meta0 mapping
    cmake: added 'Werror' in CFLAGS where there is no warning
    
    Warnings are the voice of Evil.
    
    Let's try to avoid them on targets already clean.
    proxy+rdir: remove useless rdir commands
    Python client sends commands to rdir server directly
    proxy: V2.0 routes'es code removed, RDIR routes implemented
    conscience: renaming + pruning + reorg
    
    * conscience/agent remote functions have been renamed for more clarity
    * MACRO tags have been removed (usage too scarce and immutable, no need of something so flexible)
    * CPU/IO/SPACE computation moved from the oio-cluster-agent to libgridcluster
    * oio-cluster-agent is now now mandatory
    cmake: G_LOG_DOMAIN set at cmake's level.
    proxy: add new routes and use headers
    
    New routes:
    We want clean and simple routes for interaction with dir/m2/sqlx APIs.
    
    New route format is '/v3.0/$NS/$api/$action'
    
    request parameters are now passed as query args.
    
    Example:
    for container creation:
    
        POST /v3.0/NS/container/create?acct=myaccount&ref=mycontainer
    
    With parameters as query args it is now easier to access API actions
    using optional parameters.
    This is especially useful when using the CID, example:
    
        POST /v3.0/NS/container/destroy?acct=myaccount&ref=4
    
        POST /v3.0/NS/container/destroy?cid=044B85A46CE9A1B256A1BD3D257B1ADBE2DD6FDFD7D6B33DE47AF23C9CD5C38D
    
    Simplified API names:
    m2 -> container & content
    dir -> reference
    sqlx -> admin
    
    Note: this is a proposal, we may change theÃmm.
    Content propeties reviewed + Cleanup, round 2
    OpenIO is lifting off now !
    proxy: Remove unused code
    proxy, rdir: Stop printing UID in access
    proxy: enable/disable TCP_CORK when appropriate
    
    We enable TCP_CORK when we know we will soon send another batch of data.
    This prevents sending a small packet, then another one, in cases where
    all data would fit in one bigger packet. We must though disable TCP_CORK
    immediatly after to tell the kernel we are finished (or it will keep
    waiting a few milliseconds for extra data).
    proxy: Lower the verbosity of annoying trace
    Transfer request ID in chunk events
    
    - Rawx forwards incoming request ID to outgoing events
    - Event-agent uses this request ID when indexing chunks in rdir
    
    Relates to #1346
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    proxy: Remove barely usefull headers in the replies
    
    Let's save fistful of bytes for each RPC
    m0,proxy: fix buffer overflow (fix #899)
    
    (cherry picked from commit 45142bea052791a9c418428d130d003d094a4326)
    m0,proxy: fix buffer overflow (fix #899)
    proxy: Remove unused code
    proxy: Fix mismatches in signedness comparisons
    Move the minimal rrd from server to metautils
    
    It prepares a change coming soon in sqliterepo, that requires the simple
    RRD implementation.
    proxy: Reduce the number of calls to realloc() and strlen()
    core: allow to log outgoing requests
    core: introduces new macro to check the API/ABI version
    
    We plan to introduce fields in some structures. We need such a simple
    way to let the application programmer check its installation is correct
    and check the version it used at compile time was the same the version
    currently known by the library.
    Benefits from optimized strcmp() when case sensitivity is not worth (#578)
    proxy: allows replying with a GBytes that can be shared.
    
    The feature to reply with GByteArray was unused and the analog with
    GBytes was expected to efficiently reply entries from a shared cache of
    service.
    Proxy: fixes Server token
    http+gridd: removes the ReqId after each request
    
    fixes a one-shot memleak reported by valgrind/memchecker
    access logs unified
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    proxy+cluster: cluster now also uses the proxy to reach the conscience
    
    + proxy feature to avoid logging succesful accesses for "too common" requests. It avoids flooding the log service.
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    proxy: fixed access log format, added CID
    Fixed printf format warnings
    
    Raised when compiling for 32bit architectures.
    oio-sds/pc now built, relase and version now configurable.
    Hook'able clock function now used everywhere
    Dropped the dependency to the Linux's specific clock functions.
    proxy, sqliterepo: fixed odd behavior due to nested functions.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Fixed formatting weaknesses.
    
    Sometimes, the use of variadic logging functions/macros used generated strings as formats.
    Those could lead to potential segfaults if the format contained unmatched parameters.
    proxy: empty file removed.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Fixed memory leaks.
    
    Conflicts:
            meta1v2/meta1_backend_services.c
    Fixed memory leaks.
    
    Conflicts:
            meta1v2/meta1_backend_services.c
    proxy: access log lines about POST request now tell the action in the body.
    Request-Id now managed in clients and servers
    
    * transmitted via a thread-local data
    * explicit ID eliminated from remote API (m2v2) + caller code adapted
    * in servers, collected from incoming requests, propagated to outgoing requests.
    * set to a random value when not set.
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    Finer gauges for active threads, reliable accesslog delays
    
    This patch provides the maximum number of active threads, and a round-robin storage for that information.
    The granularity proposed is intervals of 1s over the past 30s, and intervals of 1 minute over the past 1 hour.
    This data is used by the core server library to expose statistics, e.g.
    
            server.thread.max.1 = 0
            server.thread.max.5 = 1
            server.thread.max.15 = 2
            server.thread.max.30 = 2
            server.thread.max.60 = 3
            server.thread.max.300 = 3
            server.thread.max.900 = 3
            server.thread.max.3600 = 3
    
    This patch also alters the accesslog format for gridd transports, and it is now unified with http transport.
    An access log record now provides 2 treatment durations:
    - the total time spent since the reception of the last buffer that completes the request
    - the total treatment time, from the moment where a worker thread starts the request handling til the moment an answer is generated.
    The delta between both delays is the time spent in the internals queues of the process.
    
    The patch divides in:
    - server/stats_holder.* :
      - drops the adherence to system time, the current timestamp is now received from the caller. This is necessary to manager counter with a granularity different than 1s.
      - New calls to compute the cumulative maximum
      - code simplification
    - server/network_server.* :
      - new round-robin stats now managed
      - new stats exposed.
      - precise monotonic clock used on the last input
    - server/transport_http.c :
      - useless variables removed.
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - server/transport_gridd.c :
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - sqlx/sqlx_service.c :
      - code adapted to match the lost "time adherence"
    
    Change-Id: I248ae7a1937860e4062290e95b68465d7ec62821
    server : http transport now access-logs the method.
    
    Change-Id: Ie53083d0349c486b5905f8116013907e0c03b21c
    1.8.4 release candidate
    Initial commit
    resolver: allow to resolve only meta0 services
    
    This is useful to run election commands on a broken meta0.
    proxy: fix API documentation
    proxy,m1: resolve CID to acc/cont on /reference/show requests
    
    - Add the account and the container name of the requested reference
    to the SRV_LIST reply as prefixed strings.
    - Extract account and container name from the SRV_LIST reply
    and fill the oio_url_s object passed as a parameter.
    - Include the resolved acc/cont in the /reference/show reply.
    Update directory service documentation
    CLI: make 'openio reference locate' display the CID
    oio-meta2-mover: Add script to move meta2 bases
    proxy: Add skeletons of docs, for the example
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 3e12733b1ef6b247af2187db7d044c709501d0d6)
    Fix compilation issues with GCC 7
    proxy,m1: document "relink" operations
    proxy: Fix the /reference/relink route
    proxy: Fix a wrong function prototype for callbacks
    
    The wrong prototype should have introduced no wrong behavior nor any
    corruption. But damned, this was ugly!
    proxy: Reduce the number of calls to realloc() and strlen()
    proxy: fix unwanted free (causing coredumps)
    proxy,metautils: fix indentation
    proxy: fail on empty properties requests
    
    Previously it was a noop.
    proxy: properties management unified
    
    ... when creating entities, setting properties, getting them.
    ... whatever the entity (user, container, content) the format is the
    same at the proxy level and at the backend service level.
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    proxy/dir: fixed memleak
    proxy: all the boolean flags available from the URL
    proxy: trades some GMutex for GRWLock
    m1v2: renamed MACRO/functions/requests for more clarity
    
    Compatibility break!
    Fixed several optimisations around up/down services
    
    There were partition/shuffle problems when looping on lists of services.
    * the ok/nok qualification of services didn't work (in the resolver)
    * the shuffling was potentially broken by a subsequent partition ok ok/nok services.
    * both weren't called at all in several cases.
    proxy: /reference/show benefits from the local cache when the service type is known.
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    proxy: minor fixes on bugs raised by the latest functional tests.
    proxy: V2.0 routes'es code removed, RDIR routes implemented
    proxy: V3 routes now used in core/, V2 routes removed from the proxy
    
    Some functional tests still require to be adapted (container, reference)
    json: latest function used (m2v2, proxy, metautils)
    meta1: better functional tests result.
    cluster, proxy: Fixes & Improvements
    
    * cluster / remote: cleaner and uniform interface, stripped code (+ dependencies adapted)
    * proxy: CLI option to disable the cache of services
    * proxy: management of services down, that are receive a lower priority
    * server: minor cleanups
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    proxy: export m1v2 RELINK
    proxy: fixed response status upon code=400 from the backend
    proxy: added missing sanity checks
    
    With the v3.0 routes, URL tokens are not systematically checked.
    This has been fixed in several places for the service type.
    m1v2: now able replace all the properties on a reference with a new set.
    
    This is consistent with meta2 and sqlx : set + flush.
    Flushing and setting an empty array give the same result as calling a delete.
    proxy: no able to remove all the properties (i.e. replacing it with an empty set) with Set+FLUSH
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    proxy: fixed error code on DIR operations
    proxy: fix domain logging
    proxy: add new routes and use headers
    
    New routes:
    We want clean and simple routes for interaction with dir/m2/sqlx APIs.
    
    New route format is '/v3.0/$NS/$api/$action'
    
    request parameters are now passed as query args.
    
    Example:
    for container creation:
    
        POST /v3.0/NS/container/create?acct=myaccount&ref=mycontainer
    
    With parameters as query args it is now easier to access API actions
    using optional parameters.
    This is especially useful when using the CID, example:
    
        POST /v3.0/NS/container/destroy?acct=myaccount&ref=4
    
        POST /v3.0/NS/container/destroy?cid=044B85A46CE9A1B256A1BD3D257B1ADBE2DD6FDFD7D6B33DE47AF23C9CD5C38D
    
    Simplified API names:
    m2 -> container & content
    dir -> reference
    sqlx -> admin
    
    Note: this is a proposal, we may change theÃmm.
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    Various improvements
    
    * global error codes added
      * special codes for missing accounts, users, containers
      * client adapted.
    * containers autocreation
      * enabled in m1v2 backend
      * exposed in m1v2 remote
      * exposed in proxy
    * C SDK output reviewed
      * minimal API exposed
      * error messages normalized
    * C SDK: upload extended with the autocreation (disabled by default).
    proxy: fixes and improvements
    
    * Duplicated '/' not agregated in URI (path not purified).
    * URI-encoding now managed
    * errors upon actions slightly clearer.
    m2v2: when listing a container's aliases, the container's metadata are also returned.
    
    In addition, unused code have been pruned from meta2.
    That code has been released with integrity-loop's removal.
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    proxy : fixed directory's feature to force a service.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    OpenIO is lifting off now !
    proxy,m1: tell meta0 which namespace we are working on
    proxy: Fix prefixes of meta0 list
    Reorganize the libraries, Avoid a loop on the proxy
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 3e12733b1ef6b247af2187db7d044c709501d0d6)
    proxy: factorize, no error on empty meta1 prefix mapping
    
    (cherry picked from commit e0ee2b9e5b4f52fdb40a1e8d7efd771a7671d7bf)
    m0,proxy: fix buffer overflow (fix #899)
    
    (cherry picked from commit 45142bea052791a9c418428d130d003d094a4326)
    Fix compilation issues with GCC 7
    proxy: factorize, no error on empty meta1 prefix mapping
    m0,proxy: fix buffer overflow (fix #899)
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    m0, proxy: new routes and tools to list and force meta0 mapping
    proxy: Fix a minor B2 comment
    proxy: set a content type on delete markers
    
    This will benefit the swift connector.
    Fix warnings raised by the documentation extractor
    proxy: Limit size of object list when there is no max
    core: Merge TLS management with service_id
    
    oio_lb_item_s now contains new field. This new field is reused
    by oio_resolve_id
    proxy: upgrade real_url to https
    proxy: update content/create documentation
    
    Jira: OS-513
    server: get server-side performance data
    
    Save some performance data in the thread local data. This is disabled by
    default, can be enabled for each service (even when the service is running)
    or per request.
    Performance data is printed at the end of access log messages.
    Python API, proxy: set properties when autocreating containers
    proxy: Limit size of object list
    proxy: Allow to force the request on master service
    
    It was already possible to do this by adding 'proxy.force.master'
    in the proxy configuration. But this was applied to all requests.
    
    If we wanted to force the master only on a specific request,
    we can add the 'x-oio-force-master' header in the request.
    But this header was only used to list the objects in a container.
    
    Now, it is possible to specifically force the master on all meta2 requests.
    proxy: Decache user when creating container
    
    Prevent the use of old peers if the container has already existed
    and is still in the cache.
    proxy: Send a single event when deleting container
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    proxy: Allow to rebuild chunk in frozen container
    proxy: Ignore 503 errors if we have objects to list
    proxy: Get chunk method when listing objects in a container
    core: Fix the LB on local services (#1862)
    
    * Also also the placement of spare chunks on the local proxy.
    * core: Use service addr instead of ID for their unique key
    * lb: Pass debug message in TRACE level and restore fast lookups
    * oio-reset: Deploy a proxy with a location
    * Fix compilation warnings
    Allow to place some chunks locally to the proxy
    proxy: Circumvent the LB problem
    
    Avoid the wrong distance computation ... by a general avoidance of
    npn-rawx services.
    proxy: Slight code simplification
    proxy: Handle /content/spare locally, no meta2 involved
    proxy: USe the NS default stgpol if not set at content/prepare
    proxy: Generate beans locally, no call to meta2
    proxy: Allow to add delete marker to a specific version
    proxy: Allow to simulate versioning when creating and deleting an object
    metautils,proxy: fix typos and wording
    proxy: Send the URL when changing properties
    Update delete_many with force-versioning
    Update max_versions of container from header (2/2)
    
    This commit bring same mecanism to update sys.m2.policy.versions
    from header to content/delete operation: we want to control
    if current version of object must be deleted or add a delete marker.
    Update RPC description with Force-Versioning
    
    Fixes OS-373
    Update max_versions of container from header
    
    This commit introduce possibility to update max_versions when creating
    object:
    this is useful for container created through autocreate functionality:
    for Container Hierarchy, enabling versioning is set on root container,
    it is not possible to parse all container to update value and
    for performance, a dedicated request to update container is skipped
    (as a lot of upload may occurs at same time)
    
    If header `x-oio-force-versioning` is received,
    the max_versions is updated before completing
    object (to keep mecanism to delete prior object if needed)
    proxy: Fix the location comparison (#1805)
    Python API, sqliterepo: replicate container snapshots
    
    To avoid deadlocks at creation time, we used to keep a single copy
    of container snapshots. Now that the replication mechanism is more
    reliable, we can replicate them.
    proxy: update documentation
    proxy,m1: fix container snapshot feature
    
    The `sys.user.name` and `sys.account` entries of the snapshot were still
    refering to the snapshotted container. The 'storage.container.state'
    events emitted from the snapshot thus gave invalid information.
    
    This commit also call automatically a `container touch` to update account service.
    
    Fixes: OS-350
    m2: allow NULL values for byte array fields
    core: Improve the implementation of location functions
    proxy: Prefer local services
    
    1/ Give a location to any proxy on the host (central variable)
    2/ Mangle the scores of RAWX to give precedence to services that are
       closer
    3/ Allow to enable/disable that behavior.
    proxy: Recompute damaged objects count of a container
    proxy: optimize listings using a delimiter
    proxy: Decache stale service locations more often
    core/lb: make service ID comparisons case insensitive
    Update Copyright
    proxy: Recompute statistics of a container
    Stop accepting composed service types
    m2: return quality of chunks in spare chunk requests
    proxy: handle deadline during long listing requests
    
    Instead of propagating the deadline error, tell the caller the listing
    has been truncated, and let him continue on the next page of results.
    
    Jira: OS-194
    (cherry picked from commit 3d59405123808327fe5aa417b7468f5fe3231709)
    proxy: Return mtime when getting content properties
    
    (cherry picked from commit 7d74d4c5f31df9d9537dc1e2207958701ffbe755)
    proxy: Allow to change the policy of an object
    meta2: Fix listing with versioning
    proxy: handle deadline during long listing requests
    
    Instead of propagating the deadline error, tell the caller the listing
    has been truncated, and let him continue on the next page of results.
    
    Jira: OS-194
    m2: only send local peer in container.deleted events
    
    The drawback is that when deleting a container, several events are sent
    (one per peer).
    proxy: Add a 'id' key when listing a container
    proxy: Add a 'content-size' header when getting properties
    proxy: List orphan aliases with all keys
    Python API, rdir: document
    proxy: forward special property beans
    
    Jira: R1810-27
    proxy: Return mtime when getting content properties
    proxy: Flush the cache upon code=431 errors
    
    These errors are clues of DB removed/moved.
    Update container and content service API documentation
    CLI: make 'openio reference locate' display the CID
    proxy: use appropriate configuration for bulk delete
    proxy: ensure object listings have a limit
    
    The default limit is now 1000. This limit can be raised by specifying
    max=N in request query string.
    Update the copyright
    proxy, meta2: Remove 'content/link'
    proxy, meta2: Remove 'content/copy'
    meta2: Limit the number of deleted object when flushing
    proxy: fix dubious memory release
    proxy: remove dead code
    core, meta2, proxy, tests: rename things
    meta2: support use of ServiceId
    
    meta-server now support ServiceId option on command line
    (but it should be used only by meta2)
    proxy, Python API: fix missing object error codes
    proxy: Leave the election for a specific service ID
    proxy: Rollback if the destruction of the container failed
    
    Thanks to @murlock
    proxy: fix end_marker parameter for object listing
    proxy: allow disabling properties on content/show
    oio-proxy: Fix the retry behavior on container delete
    Purge with a fixed number of versions
    meta2: Purge alias
    Expose known services from proxy/cache
    
    When asking conscience/list, if no cache is availble, request is
    forwarded to conscience itself. There was no way to check
    current status of cache of proxy.
    proxy: move id to real_url in dedicated function
    Proxy: enrich beans with real_url when using UUID
    Disallow using an unknown storage policy
    
    Fixes #1153
    Python API, proxy: fix object listing pagination
    proxy: Add skeletons of docs, for the example
    Python API, CLI: keep track of request durations
    
    First step: keep track of resolving and request times in proxy,
    then rawx request time in Python API.
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    Let transmit deadline in M2 rpc issued by the proxy
    Snapshot: Factorize code and add sequence number as a request paramater
    Container snapshot: fix small issues
    Add container snapshot
    
    The snapshot take the form of:
    -A copy of the sqlite base of the target to a meta2 chose by the load balancer.
    -All the chunks of the snapshot are replaced by new chunk that hardlink the target one.
    -The snapshot is frozen afterward.
    
    The chunks hardlink implies that the target and the snapshot chunks are in the same rawx.
    Currently it is the client that freeze and enable the containers during the snapshot.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    proxy: Avoid always rolling back when /container/delete fails
    
    Under some circumstances, rolling back is hard, or even useless.
    proxy: Remove the 'flush' option of /container/delete
    
    Never used, and complicating the code, as the ability to rollback.
    proxy: improve error message on un-freeze (fix #1049)
    proxy: add check on oio_url_s
    cluster: Remove the useless "chunk_size" field from the nsinfo
    
    Also remove it from the ASN.1 structure.
    Everything has been migrated to the central configuration facility.
    conf: Insulate the variables of the proxy ... in the proxy
    Python API: add support for versions in object lists
    proxy,meta2: Expose the force flag when inserting raw beans
    proxy: Clearer error message
    proxy: Add sanity checks around some options
    Python API: fix requests ids and kwargs
    proxy: Fix bulk requests
    
    * Factorized the code
    * Fixed memleaks upon errors
    proxy: Add bulk delete content
    
    Permit to delete many content in one go for one container.
    Modify the format of cli command 'openio object delete' to return a List.Lister.
    Modify tests that depended on the old format response to use the new one.
    
    The format of a request to the proxy is a json '{"contents":[{"name":"..."},{"name":"..."}]}'
    and the url is /content/delete_many.
    The format of the answer is a json '{"contents":[{"name":"...", "status":"...", "message":"..."}]}'
    proxy: Allow an empty POST body when autocreating containers
    proxy: Set to TRUE the default for the autocreation of containers
    
    Fix #915
    Proxy: correct the create_many function and make tests passed
    Add an option to create many containers in on go
    
    The command "openio container create <container>" used to send a request for every
    container in the list to create it.
    Now the command check the number of containers and use a specific request to ask for the
    creation of all the containers.
    proxy: Fix bulk requests
    
    * Factorized the code
    * Fixed memleaks upon errors
    Avoid allocating memory for small strings with a bounded size
    
    Rather use character arrays located on the stack or inlined into their
    owner structures.
    proxy: Reply "503 unavailable" with Retry-After, when meaningful
    
    When the service's load is excessive, when the targeted election is in a
    (temporary) failed state, when too many redirection occur, etc.
    proxy: Add bulk delete content
    
    Permit to delete many content in one go for one container.
    Modify the format of cli command 'openio object delete' to return a List.Lister.
    Modify tests that depended on the old format response to use the new one.
    
    The format of a request to the proxy is a json '{"contents":[{"name":"..."},{"name":"..."}]}'
    and the url is /content/delete_many.
    The format of the answer is a json '{"contents":[{"name":"...", "status":"...", "message":"..."}]}'
    proxy: Allow an empty POST body when autocreating containers
    proxy: Set to TRUE the default for the autocreation of containers
    
    Fix #915
    config: Manage a second batch of variables
    Proxy: correct the create_many function and make tests passed
    Add an option to create many containers in on go
    
    The command "openio container create <container>" used to send a request for every
    container in the list to create it.
    Now the command check the number of containers and use a specific request to ask for the
    creation of all the containers.
    proxy: Fix a wrong function prototype for callbacks
    
    The wrong prototype should have introduced no wrong behavior nor any
    corruption. But damned, this was ugly!
    proxy: Fix minor warning
    
    Possible integer overflow, suspected by a paranoid code inspection tool.
    proxy: Don't look for props on a container's autocreation
    
    It avoids the properties of the content to be reused for the container.
    This doesn't happen yet, because both content-wide and container-wide
    properties are not provided at the same place. But this is ugly and
    subject to a change for the sake of uniformity.
    proxy: Review the MASTER/SLAVE preference behavior
    
    PreferMasterForWrites -> prefer MASTER for write ops
    PreferMaster -> prefer MASTER for read-only ops
    PreferSlave -> prefer a SLAVE for read-only ops
    ForceMaster -> ask a SLAVE to redirect to the MASTER, even if read-only
    
    PreferMaster supersedes PreferSlave.
    proxy: Extend the preference for te proxy to all the M2 read-only RPC
    proxy: Allow to ask for master only in meta2 RPC
    
    Currently, only upon /content/show and /content/locate
    proxy: Fix the sanity checks on a /content/touch
    proxy: Fix the autocreation of the container on a /content/prepare
    proxy: Fix the concurrent lazy creation of a container
    proxy: fix container/list properties serialization
    proxy: Reduce the number of calls to realloc() and strlen()
    proxy: fix /container/create return code
    core: code factorisation (integer format check)
    proxy/meta2: on muliple requests, skip failures
    
    Caused a segfault when the first result was an error.
    proxy: actually check value of 'properties' query string
    m2,proxy: return properties when listing contents
    proxy: answer 409 when content already exists (fix #747)
    proxy: check path on content put and update
    proxy: all PREFER_SLAVE requests can be changed into PREFER_MASTER requests, if prefer_master flag in proxy is activated
    proxy: fail on empty properties requests
    
    Previously it was a noop.
    core,m2: fix spare chunk requests
    proxy: fixes /content/create
    proxy: properties management unified
    
    ... when creating entities, setting properties, getting them.
    ... whatever the entity (user, container, content) the format is the
    same at the proxy level and at the backend service level.
    core+metautils: code cleanup, functions {re,}moved
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    proxy: removes unrachable code and unused macros
    proxy/m2: fixed management of malformed chunk URLs
    
    Prior to this, there was a segfault.
    Now the score is displayed to 0.
    proxy/m2: fixed behaviour of content/create without path
    m2,proxy: implement content truncate operation
    Implement metachunk replacement
    
    This will allow optimized random writes (to change 1 byte, you will
    have to download and reupload only 1 metachunk, not the whole content).
    proxy/m2: fixed memleak
    proxy: integrate new load balancer
    m2v2: integrate new load balancer
    proxy: all the boolean flags available from the URL
    proxy/common.c : add a function to recover flags from url, or header, or default (#586)
    Fixes and refactoring
    
    * rawx: fixed error message
    * rawx: fixed error message + fixed useless case-sensitivity management
    * proxy: cuts the crap from several error messages
    * m2v2: unreached code removed from alias deletion
    * m2v2: minor cosmetic change
    * core/sds: enables tracing RAWX requests for highest verbosity
    * proxy: re-enables case sensitive prefix matching in headers (brings more robustness)
    * core/sds: checks for content_id's format
    * core/sds: new feature to mangle the case of http headers (proxy,
      rawx). Mangling disabled by default, activated in tests.
    * core/tool_roundtrip: activates the mangling of headers case
    * core: fake chunksnb sent
    Benefits from optimized strcmp() when case sensitivity is not worth (#578)
    proxy: prefer MASTER for writing, SLAVE for reading
    proxy: when listing, dups the properties in the body (#552)
    
    Destined to replaces the properties in the headers, both are kept for
    the transition.
    proxy: trades some GMutex for GRWLock
    Add tests of weird content names and fix some quoting issues
    proxy/m2: fixes http status code upon invalid request when handling properties
    proxy: completes containers DESTROY
    
    * FREEZE is rolled back upon error
    * FLUSH asked only if wanted by the client, or ISEMPTY asked if no flush.
    * DESTROY patched: only 1 event is asked, to the first service replied
    core,proxy: sort chunks by score in client instead of proxy
    proxy: sort chunks by position then rawx score
    
    This may not be the best solution to make clients target the quickest
    rawx when downloading. It may be better to include the score (or a
    priority) in the answer and let the clients sort the list.
    proxy: container/destroy plainly destroys the containers and their references
    
    * a container destruction is now: 1/freeze 2/flush 3/unlink 4/destroy(local)
    * meta2 slighty simplified around PURGE/DEDUP/FLUSH, where the dry_run options have disappeared.
    proxy: one M1V2_LIST less upon a /container/create
    
    Now the resolver is told the URL of the meta2 just-linked, no need to ask the meta1 for this.
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    proxy: more checks on the content_id when linking
    Fixed printf format warnings
    
    Raised when compiling for 32bit architectures.
    proxy: now url-encodes X-oio headers replied
    proxy: show content id in container list
    proxy: fixed 'set_properties' output, fixed 'spare' checks
    Hook'able clock function now used everywhere
    fixed sub-type management for the services.
    
    The compound types of services are now well considered by the proxy, then transmitted in the various requests the proxy issues.
    fixed json parsing (proxy), trimmed unused parameter (sqlx_propget)
    proxy: manages flags when destroying a container
    proxy: sqlx properties fixed
    proxy: sqlx properties fixed
    proxy: content ID considered upon a content creation.
    m2v2+proxy: routes with explicit content id now manage this via the oio_url extracted from http URL.
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    proxy+rawx: version decoded bythe proxy, stored by the rawx.
    proxy+core: normalized headers
    proxy: mime-type now replied in container listings
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    proxy: V2.0 routes'es code removed, RDIR routes implemented
    proxy: V3 routes now used in core/, V2 routes removed from the proxy
    
    Some functional tests still require to be adapted (container, reference)
    json: latest function used (m2v2, proxy, metautils)
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    m2: one step toward passing functional tests
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    core : explicit content links implemented.
    proxy: the "prefixes" array is now always present in the successful output of the container's listing.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    proxy: fixed headers parsing when loading a container's properties
    proxy: fixed headers parsing when loading a container's properties
    Fixes, improvements
    
    m2v2: fixed "bean leak" when purging exceeding aliases (properties not removed).
    m2v2: fixed "bean leak" when deleting explicit aliases (properties not removed).
    proxy: Fixed compile-time warnings
    proxy: properties returned in headers when getting objects
    proxy: headers matching now case-insensitive
    proxy: In addition, request handlers returning invariable and dummy outputs (empty lists, empty sets) now return nothing.
    tools: bootstrap doesn't deploy the admin flask (it is destined to disappear in the next release and is already used by no one).
    proxy: when listing, fixed 'max' parsing and output's order.
    proxy: fixed response status upon code=400 from the backend
    proxy: fixed container's autocreation
    
    The case of a "user created but no service linked" was not managed.
    proxy: no able to remove all the properties (i.e. replacing it with an empty set) with Set+FLUSH
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    proxy: use simplified chunks for content spare action
    proxy: fix domain logging
    proxy: add new routes and use headers
    
    New routes:
    We want clean and simple routes for interaction with dir/m2/sqlx APIs.
    
    New route format is '/v3.0/$NS/$api/$action'
    
    request parameters are now passed as query args.
    
    Example:
    for container creation:
    
        POST /v3.0/NS/container/create?acct=myaccount&ref=mycontainer
    
    With parameters as query args it is now easier to access API actions
    using optional parameters.
    This is especially useful when using the CID, example:
    
        POST /v3.0/NS/container/destroy?acct=myaccount&ref=4
    
        POST /v3.0/NS/container/destroy?cid=044B85A46CE9A1B256A1BD3D257B1ADBE2DD6FDFD7D6B33DE47AF23C9CD5C38D
    
    Simplified API names:
    m2 -> container & content
    dir -> reference
    sqlx -> admin
    
    Note: this is a proposal, we may change theÃmm.
    proxy: added container's autocreation upon meta2 gbeans generation.
    proxy: fixed container's autocreation
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    Various improvements
    
    * global error codes added
      * special codes for missing accounts, users, containers
      * client adapted.
    * containers autocreation
      * enabled in m1v2 backend
      * exposed in m1v2 remote
      * exposed in proxy
    * C SDK output reviewed
      * minimal API exposed
      * error messages normalized
    * C SDK: upload extended with the autocreation (disabled by default).
    proxy: Better checks around the length and hash headers (#83)
    
    Attempts to fix issue #83
    proxy: fixes and improvements
    
    * Duplicated '/' not agregated in URI (path not purified).
    * URI-encoding now managed
    * errors upon actions slightly clearer.
    Fixed json parsing of service_info
    
    + Pretty formatting effort.
    m2v2: when listing a container's aliases, the container's metadata are also returned.
    
    In addition, unused code have been pruned from meta2.
    That code has been released with integrity-loop's removal.
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    proxy + m2v2 : fixed listing with large maxkeys
    
    The next marker from previous request was not ported in subsequent ones.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    proxy : fixed error management upon an invalid chunk hash.
    proxy: fixed base name, according to the latest norm.
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    proxy: stronger checks when listing a container
    proxy: upon a listing, fixed behavior when specifying a marker.
    proxy: fixed behavior for listing with 'delimiter' and 'max' modifiers.
    proxy: avoid looping infinitely when getting objects with max contraint and unmatched prefix.
    
    Truncated flags returned by meta2 now taken into account.
    m2v2 + sqlx + proxy : set properties on contents and containers now manage a flush options and deletion by null value.
    proxy: listing's output format reviewed.
    proxy: now manages objects listing with delimiter and prefix.
    proxy: on a PUT, set the alias'es mime-type to the header's content-type.
    proxy: 404 returned on m2/properties requests when content or container not found.
    proxy: fixed json output for properties
    Content propeties reviewed + Cleanup, round 2
    proxy: properties actions now implemented on containers.
    Request-Id now managed in clients and servers
    
    * transmitted via a thread-local data
    * explicit ID eliminated from remote API (m2v2) + caller code adapted
    * in servers, collected from incoming requests, propagated to outgoing requests.
    * set to a random value when not set.
    proxy: content's delete of properties now implemented (m2v2)
    proxy: "set properties" now implemented on contents (m2v2).
    m2v2: getproperties on contents now implemented as a POST action.
    proxy: generated beans now carry the NS chunk_size instead of real size
    m2v2: proxy now returns simplifed beans on a DELETE on a content.
    OpenIO is lifting off now !
    core: Merge TLS management with service_id
    
    oio_lb_item_s now contains new field. This new field is reused
    by oio_resolve_id
    proxy: upgrade real_url to https
    [WIP] merge fill_tls with _filter_good_service
    [WIP] proxy: save TLS info
    WIP: Retrieve tags for LB update
    proxy: Expose a route /v3.0/:NS/conscience/score
    
    The route returns the score of a specific service, as it is known by the
    oio-proxy instance.
    proxy: Allow to force the request on master service
    
    It was already possible to do this by adding 'proxy.force.master'
    in the proxy configuration. But this was applied to all requests.
    
    If we wanted to force the master only on a specific request,
    we can add the 'x-oio-force-master' header in the request.
    But this header was only used to list the objects in a container.
    
    Now, it is possible to specifically force the master on all meta2 requests.
    lb: fix distance for chunks close to proxy
    proxy: Circumvent the LB problem
    
    Avoid the wrong distance computation ... by a general avoidance of
    npn-rawx services.
    sqliterepo: add possibility to balance master elections
    
    (cherry picked from commit b5633f3b9a44b41bf5f2065db97b4567241998f1)
    Set an operation-dependent prefix on request ids
    
    Also, when compiled in debug mode, print a warning when a request without
    request ID is received.
    sqliterepo: implement database vacuum request
    
    Vacuum (defragment) the database on the master service, then
    resynchronize it on the slaves.
    
    Jira: OS-299
    proxy, rdir: Stop printing UID in access
    Reorganize the libraries, Avoid a loop on the proxy
    proxy: Allow to simulate versioning when creating and deleting an object
    conscience-agent: collect beanstalkd stats
    
    Collect some statistics about beanstalkd jobs. They could help refining
    the score of beanstalkd services.
    
    Also improve the configuration sample.
    proxy: document some routes
    proxy: Prefer local services
    
    1/ Give a location to any proxy on the host (central variable)
    2/ Mangle the scores of RAWX to give precedence to services that are
       closer
    3/ Allow to enable/disable that behavior.
    Simplify the management of metrics
    
    We don't need a complicated solution with a background thread. We here
    reduce the number of allocations, the number of locks, the number of
    threads. We expect less CPU (user & sys) to be used.
    Allow listing to be done on master service only
    
    For several operations, when a list is done just after an object
    deletion, the listing operation may occur on a slave which has not been
    synchronized yet.
    Stop accepting composed service types
    proxy,meta*: refactor the feeding of load balancer
    
    Use the new oio_lb_world__feed_slot_with_list function which allows to
    atomically feed a service slot with a list of items. This should prevent
    nasty messages like "LB reload not followed by rehash".
    
    Jira: OS-294
    meta2: Add User-Agent to the events
    m2: only send local peer in container.deleted events
    
    The drawback is that when deleting a container, several events are sent
    (one per peer).
    proxy: forward special property beans
    
    Jira: R1810-27
    proxy: Reduce the logs for /status
    Refresh LB even after loading errors
    
    When errors occur while reloading the LB, we do not trim the previous
    generations of services, and thus do not recompute the internal state.
    With this patch, the internal state will be recomputed in such cases.
    There is still room for improvements.
    Update the copyright
    proxy, meta2: Remove 'content/link'
    proxy, meta2: Remove 'content/copy'
    proxy, sqliterepo: Remove specific base
    proxy, sqliterepo: Ask each peer if base exists
    oio-proxy: Fix an ugly yoda condition
    
    Thanks to @fvennetier
    proxy: Pad CID with zeroes when below 4 characters
    
    Helps managing prefixes in meta1
    proxy: Fix the check of invalid CID
    proxy: tolerate base name passed as CID
    
    Tolerate the base name (with a dot and sequence number)
    passed as a container ID.
    meta2: Purge alias
    meta2, proxy: return 405 on unallowed WORM mode op
    Use Service Id everywhere
    Expose known services from proxy/cache
    
    When asking conscience/list, if no cache is availble, request is
    forwarded to conscience itself. There was no way to check
    current status of cache of proxy.
    Expose a REST API to convert UUID to ADDR
    proxy: Fix the deadline mgmt around conscience RPC
    proxy: Manage invalid deadlines
    proxy: Retry upon network errors toward the conscience
    Make the default timeout/dl configurable in the proxy
    Load the deadline in the th-local of a proxy request
    Add container snapshot
    
    The snapshot take the form of:
    -A copy of the sqlite base of the target to a meta2 chose by the load balancer.
    -All the chunks of the snapshot are replaced by new chunk that hardlink the target one.
    -The snapshot is frozen afterward.
    
    The chunks hardlink implies that the target and the snapshot chunks are in the same rawx.
    Currently it is the client that freeze and enable the containers during the snapshot.
    proxy: implement "PIPEFROM" route under admin/copy
    sqliterepo: cache peers in election instead of resolver
    
    * cache election peers in election member structure
    * disable service resolver cache
    * document some proxy routes
    * fix "admin/copy" proxy route
    resolver,proxy: Centralise to variable to on/off the whole cache
    
    A live managed variable instead a fixed field in a structure.
    proxy: Remove the useless routes to manage the cache config
    
    The variables are already centralized in core/var.
    proxy: Allow /forward/stats with POST verbs
    proxy: Expose the route /forward/info
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    proxy: Ignore invalid services (downstream)
    proxy: add check on oio_url_s
    proxy/lb: new route to create a service pool
    cluster: Remove the useless "chunk_size" field from the nsinfo
    
    Also remove it from the ASN.1 structure.
    Everything has been migrated to the central configuration facility.
    cluster,conf: Move to the CCF the stgpol and svcupdate_policy
    
    ... CCF for Central Config Facility
    proxy: Fix a typo in a comment.
    
    Thanks to @fvennetier!
    proxy: Reconfigure on SIGHUP
    server: Allow an action when SIGHUP has been raised
    conf: Move the FD limits in the central config
    conf,proxy: Remove 4 redundant variables
    conf: Insulate the variables of the proxy ... in the proxy
    proxy: Add sanity checks around some options
    proxy: Add bulk delete content
    
    Permit to delete many content in one go for one container.
    Modify the format of cli command 'openio object delete' to return a List.Lister.
    Modify tests that depended on the old format response to use the new one.
    
    The format of a request to the proxy is a json '{"contents":[{"name":"..."},{"name":"..."}]}'
    and the url is /content/delete_many.
    The format of the answer is a json '{"contents":[{"name":"...", "status":"...", "message":"..."}]}'
    Change place of create_many in metacd_http.c
    proxy: Fix a typo
    
    Thanks to @fvennetier!
    lb: Expire the services that disappeared from the conscience
    
    Fix #815
    Proxy: correct the create_many function and make tests passed
    Add an option to create many containers in on go
    
    The command "openio container create <container>" used to send a request for every
    container in the list to create it.
    Now the command check the number of containers and use a specific request to ask for the
    creation of all the containers.
    core/cfg: Get rid of the delay
    
    Counter-productive and dangerous.
    core: Fix a memleak around the local cached configuration
    proxy: Add bulk delete content
    
    Permit to delete many content in one go for one container.
    Modify the format of cli command 'openio object delete' to return a List.Lister.
    Modify tests that depended on the old format response to use the new one.
    
    The format of a request to the proxy is a json '{"contents":[{"name":"..."},{"name":"..."}]}'
    and the url is /content/delete_many.
    The format of the answer is a json '{"contents":[{"name":"...", "status":"...", "message":"..."}]}'
    Add a general trigger around the activiation of TFO
    
    TCP_FASTOPEN improved the behavior on small-to-medium loads but it seems
    to induce some side effects such an extra load when srongly stressing
    the services. Let's deactivate it by default and continue the job of
    improving out support.
    conf: Add the ability to set/get the variables of a running service
    
    Currently covers oio-proxy, oio-{sqlx,meta{0,1,2}}-server.
    
    The proxy is queried with the route `/v3.0/config` (GET and POST).
    
    The services are queried through the proxy with the route `/v3.0/forward/config?id=SRVID`.
    proxy: Add a route to reply the live configuration (of the proxy itself)
    core: Loads the configuration in the proxy
    
    + Fix the min/max bounding behavior in the central configuration module
    Adapt the code to the central config
    Change place of create_many in metacd_http.c
    proxy: Fix a typo
    
    Thanks to @fvennetier!
    lb: Expire the services that disappeared from the conscience
    
    Fix #815
    Proxy: correct the create_many function and make tests passed
    Add an option to create many containers in on go
    
    The command "openio container create <container>" used to send a request for every
    container in the list to create it.
    Now the command check the number of containers and use a specific request to ask for the
    creation of all the containers.
    proxy: Expose the /reference/relink
    proxy: Fix minor warning (missing #include)
    proxy: Fix mismatches in signedness comparisons
    proxy: Review the MASTER/SLAVE preference behavior
    
    PreferMasterForWrites -> prefer MASTER for write ops
    PreferMaster -> prefer MASTER for read-only ops
    PreferSlave -> prefer a SLAVE for read-only ops
    ForceMaster -> ask a SLAVE to redirect to the MASTER, even if read-only
    
    PreferMaster supersedes PreferSlave.
    proxy: Allow to ask for master only in meta2 RPC
    
    Currently, only upon /content/show and /content/locate
    meta1,meta2,proxy: Enables the faulty peers avoidance
    
    Triggered if actived in the system-wide configuration of the namespace.
    proxy: Reduce the number of calls to realloc() and strlen()
    core: implement local configuration cache
    
    This drastically reduces the number of times the proxy parses
    the configuration file.
    Fix missing braces in static allocations
    proxy: new route to flush the proxy's internal LB pool
    proxy: all PREFER_SLAVE requests can be changed into PREFER_MASTER requests, if prefer_master flag in proxy is activated
    proxy,metautils: fix indentation
    proxy: empty resolver cache when error is 'prefix not managed'
    meta2: empty meta2 cache when error is 'prefix not managed'
    meta1: reload prefixes when error is 'prefix not managed'
    core,m2: replace metautils_cfg_get_bool by oio_str_parse_bool
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    m2,proxy: implement content truncate operation
    proxy, metautils: fix #638
    Review storage policy and service pool configuration
    Implement metachunk replacement
    
    This will allow optimized random writes (to change 1 byte, you will
    have to download and reupload only 1 metachunk, not the whole content).
    lb,proxy: add flush, refactor a bit
    proxy: integrate new load balancer
    Benefits from optimized strcmp() when case sensitivity is not worth (#578)
    proxy: prefer MASTER for writing, SLAVE for reading
    m0, proxy: new routes and tools to list and force meta0 mapping
    lru: removes unused code
    proxy,resolver: expresses delays in monotonic time precision
    
    One step further in the uniformisation of the TTL and Delays management
    that previously mixed gdouble (seconds), time_t (second) and gint64
    (monotonic clock).
    
    The monotonic clock is the law!
    proxy: protects against empty list of services
    
    Prevents the effects of a conscience outage
    proxy: trades some GMutex for GRWLock
    proxy: caches the list of services
    
    ... when caching is enabled. This saves a lot of calls to the
    conscience.
    proxy: fixes expiration of services
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    proxy: patches the local service to display their score
    http+gridd: removes the ReqId after each request
    
    fixes a one-shot memleak reported by valgrind/memchecker
    Useless/Unused functions removed
    proxy: container/destroy plainly destroys the containers and their references
    
    * a container destruction is now: 1/freeze 2/flush 3/unlink 4/destroy(local)
    * meta2 slighty simplified around PURGE/DEDUP/FLUSH, where the dry_run options have disappeared.
    proxy: ttl for local services set to 30s (intead of 5s)
    
    Modifiable at compile time with the help of PROXYD_TTL_DEAD_LOCAL_SERVICES
    sqlx: now able to prepare "turnkey" sqlite DB, pre-schemed.
    
    * option added to oio-sqlx-server to mention a directory full of schemas.
      the filename is the schema name, and its content the set of SQL statements to create a DB.
    proxy: minor facctorization + better debug
    
    Thanks to lru's fixup, whatever the <srv_registered> is declared with NOATIME or not.
    Its items are never accessed via the tree (only added).
    proxy: fixed expiration of local services
    oio-proxy: uniform stats format
    proxy: now able to list local services for any type
    proxy: 'forward' modified to propose the 'stats' request
    
    + tests modified to take this evolution into account
    server+proxy: unified stats format
    server: several stats pushed at once.
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    proxy+cluster: cluster now also uses the proxy to reach the conscience
    
    + proxy feature to avoid logging succesful accesses for "too common" requests. It avoids flooding the log service.
    Fixed compilation on x86_32
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    core/cs: API completed
    
    Also, the API has been made more robust to manage strings with '"' and UTF-8 characters in the JSON messages
    proxy: populated CID on the access log line
    proxy: now url-encodes X-oio headers replied
    proxy: fixed non-freed error when conscience unreachabe.
    proxy: fixed admin (sqlx synchro) routes
    proxy: added to /status a stat about the number of services down
    Hook'able clock function now used everywhere
    Dropped the dependency to the Linux's specific clock functions.
    proxy: subtype taken into account
    Fixed 'Cache' option behavior
    proxy+rdir: remove useless rdir commands
    Python client sends commands to rdir server directly
    m2v2+proxy: routes with explicit content id now manage this via the oio_url extracted from http URL.
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    rdir: add rebuild crawler to rebuild chunks on the same valume after its replacement
    proxy+rdir: add actions to fetch the index and to show rebuild status
    rdir: add chunk deletion event
    proxy: minor fixes on bugs raised by the latest functional tests.
    proxy: V2.0 routes'es code removed, RDIR routes implemented
    proxy: V3 routes now used in core/, V2 routes removed from the proxy
    
    Some functional tests still require to be adapted (container, reference)
    m2v2: code simplifications and memleaks fixes around namespace_info structures
    conscience: renaming + pruning + reorg
    
    * conscience/agent remote functions have been renamed for more clarity
    * MACRO tags have been removed (usage too scarce and immutable, no need of something so flexible)
    * CPU/IO/SPACE computation moved from the oio-cluster-agent to libgridcluster
    * oio-cluster-agent is now now mandatory
    Various beautifications
    
    agent: unused code removed
    cluster: uniform interface
    cluster: agent bypass
    conscience: func tests OK
    cluster, proxy: Fixes & Improvements
    
    * cluster / remote: cleaner and uniform interface, stripped code (+ dependencies adapted)
    * proxy: CLI option to disable the cache of services
    * proxy: management of services down, that are receive a lower priority
    * server: minor cleanups
    proxy: fixed minor a one-shot memleak
    add 3.0 routes for lb and conscience
    core: hc_url renamed to oio_url.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    proxy: new route to flush all the internal caches of the proxy
    proxy: add new routes and use headers
    
    New routes:
    We want clean and simple routes for interaction with dir/m2/sqlx APIs.
    
    New route format is '/v3.0/$NS/$api/$action'
    
    request parameters are now passed as query args.
    
    Example:
    for container creation:
    
        POST /v3.0/NS/container/create?acct=myaccount&ref=mycontainer
    
    With parameters as query args it is now easier to access API actions
    using optional parameters.
    This is especially useful when using the CID, example:
    
        POST /v3.0/NS/container/destroy?acct=myaccount&ref=4
    
        POST /v3.0/NS/container/destroy?cid=044B85A46CE9A1B256A1BD3D257B1ADBE2DD6FDFD7D6B33DE47AF23C9CD5C38D
    
    Simplified API names:
    m2 -> container & content
    dir -> reference
    sqlx -> admin
    
    Note: this is a proposal, we may change theÃmm.
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    proxy: fixes and improvements
    
    * Duplicated '/' not agregated in URI (path not purified).
    * URI-encoding now managed
    * errors upon actions slightly clearer.
    proxy: empty file removed.
    m2v2: when listing a container's aliases, the container's metadata are also returned.
    
    In addition, unused code have been pruned from meta2.
    That code has been released with integrity-loop's removal.
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    proxy: better error management, now able to multiple-bind
    proxy: avoids a PUSH request when no service has to be pushed
    added account support in proxy
    added account support in proxy
    Fixed service push to the conscience + Cleanup, round 8
    
    * The last cleanup commit was named #6, but this was a mistke, there was already a #6.
    * Code factorized
    * Useless code removed
    * Codec functions simplified.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    proxy: version now get from URL query string, used each time there is a PATH specified.
    proxy: version now get from URL query string, used each time there is a PATH specified.
    proxy: now manages objects listing with delimiter and prefix.
    Content propeties reviewed + Cleanup, round 2
    proxy: properties actions now implemented on containers.
    Request-Id now managed in clients and servers
    
    * transmitted via a thread-local data
    * explicit ID eliminated from remote API (m2v2) + caller code adapted
    * in servers, collected from incoming requests, propagated to outgoing requests.
    * set to a random value when not set.
    proxy: prepares the transmission of the reqid from incoming to outgoing requests.
    OpenIO is lifting off now !
    meta2: Ignore the check after opening the base if it's admin request
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    sqliterepo: implement database vacuum request
    
    Vacuum (defragment) the database on the master service, then
    resynchronize it on the slaves.
    
    Jira: OS-299
    proxy: Send the URL when changing properties
    proxy, Python API: support 'client specified' peers in more routes
    sqliterepo: Emit a MASTER flag in DB_USE
    proxy: Flush the cache upon code=431 errors
    
    These errors are clues of DB removed/moved.
    mover: Remove the bases that are no longer used
    proxy, sqliterepo: Remove specific base
    proxy, sqliterepo: Ask each peer if base exists
    proxy: Leave the election for a specific service ID
    proxy: Mangle the DB name for /admin/* type=meta1
    
    Also centralizes the meta1_digits variable
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    proxy: implement "PIPEFROM" route under admin/copy
    sqliterepo: cache peers in election instead of resolver
    
    * cache election peers in election member structure
    * disable service resolver cache
    * document some proxy routes
    * fix "admin/copy" proxy route
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 3e12733b1ef6b247af2187db7d044c709501d0d6)
    proxy: Reply "503 unavailable" with Retry-After, when meaningful
    
    When the service's load is excessive, when the targeted election is in a
    (temporary) failed state, when too many redirection occur, etc.
    Fix compilation issues with GCC 7
    proxy: Fix a wrong function prototype for callbacks
    
    The wrong prototype should have introduced no wrong behavior nor any
    corruption. But damned, this was ugly!
    proxy: Fix mismatches in signedness comparisons
    proxy: Review the MASTER/SLAVE preference behavior
    
    PreferMasterForWrites -> prefer MASTER for write ops
    PreferMaster -> prefer MASTER for read-only ops
    PreferSlave -> prefer a SLAVE for read-only ops
    ForceMaster -> ask a SLAVE to redirect to the MASTER, even if read-only
    
    PreferMaster supersedes PreferSlave.
    proxy: Reduce the number of calls to realloc() and strlen()
    proxy: fixes the format of /admin/status
    proxy/sqlx: on muliple requests, skip failures
    
    Caused a segfault when the first result was an error.
    proxy: fail on empty properties requests
    
    Previously it was a noop.
    sqlx: fix property deletion
    proxy: properties management unified
    
    ... when creating entities, setting properties, getting them.
    ... whatever the entity (user, container, content) the format is the
    same at the proxy level and at the backend service level.
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    proxy/sqlx: fixed memleak
    proxy: prefer MASTER for writing, SLAVE for reading
    sqlx: replaces magic numbers by macros for timeouts
    
    + longer timeout for replication and synchronisation requests.
    proxy: quote property values when building JSON response
    sqliterepo/election: memleak chased
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    proxy: fixed admin (sqlx synchro) routes
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    fixed sub-type management for the services.
    
    The compound types of services are now well considered by the proxy, then transmitted in the various requests the proxy issues.
    fixed json parsing (proxy), trimmed unused parameter (sqlx_propget)
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    proxy: V2.0 routes'es code removed, RDIR routes implemented
    proxy: V3 routes now used in core/, V2 routes removed from the proxy
    
    Some functional tests still require to be adapted (container, reference)
    proxy: added sanity checks in sqlx routes.
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    proxy: fixed response status upon code=400 from the backend
    proxy: no able to remove all the properties (i.e. replacing it with an empty set) with Set+FLUSH
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    proxy: fix domain logging
    proxy: add new routes and use headers
    
    New routes:
    We want clean and simple routes for interaction with dir/m2/sqlx APIs.
    
    New route format is '/v3.0/$NS/$api/$action'
    
    request parameters are now passed as query args.
    
    Example:
    for container creation:
    
        POST /v3.0/NS/container/create?acct=myaccount&ref=mycontainer
    
    With parameters as query args it is now easier to access API actions
    using optional parameters.
    This is especially useful when using the CID, example:
    
        POST /v3.0/NS/container/destroy?acct=myaccount&ref=4
    
        POST /v3.0/NS/container/destroy?cid=044B85A46CE9A1B256A1BD3D257B1ADBE2DD6FDFD7D6B33DE47AF23C9CD5C38D
    
    Simplified API names:
    m2 -> container & content
    dir -> reference
    sqlx -> admin
    
    Note: this is a proposal, we may change theÃmm.
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    proxy: fixes and improvements
    
    * Duplicated '/' not agregated in URI (path not purified).
    * URI-encoding now managed
    * errors upon actions slightly clearer.
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    proxy: better error management, now able to multiple-bind
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    proxy: fixed base name, according to the latest norm.
    Fixed memory leaks.
    
    Conflicts:
            meta1v2/meta1_backend_services.c
    Slab allocation for small structures + ASN.1 message simplification
    Fixed memory leaks.
    
    Conflicts:
            meta1v2/meta1_backend_services.c
    Slab allocation for small structures + ASN.1 message simplification
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    m2v2 + sqlx + proxy : set properties on contents and containers now manage a flush options and deletion by null value.
    Content propeties reviewed + Cleanup, round 2
    proxy: properties actions now implemented on containers.
    OpenIO is lifting off now !
    proxy, rdir: Stop printing UID in access
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    proxy: Remove unused code
    proxy: allows replying with a GBytes that can be shared.
    
    The feature to reply with GByteArray was unused and the analog with
    GBytes was expected to efficiently reply entries from a shared cache of
    service.
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    proxy+cluster: cluster now also uses the proxy to reach the conscience
    
    + proxy feature to avoid logging succesful accesses for "too common" requests. It avoids flooding the log service.
    proxy: fixed access log format, added CID
    proxy: access log lines about POST request now tell the action in the body.
    Request-Id now managed in clients and servers
    
    * transmitted via a thread-local data
    * explicit ID eliminated from remote API (m2v2) + caller code adapted
    * in servers, collected from incoming requests, propagated to outgoing requests.
    * set to a random value when not set.
    OpenIO is lifting off now !
    http: Useless  unused struct fields removed.
    
    Change-Id: Ib0565ecf84a4682570f31ea7a12726567eff0904
    1.8.4 release candidate
    Initial commit
    proxy: Allow to force the request on master service
    
    It was already possible to do this by adding 'proxy.force.master'
    in the proxy configuration. But this was applied to all requests.
    
    If we wanted to force the master only on a specific request,
    we can add the 'x-oio-force-master' header in the request.
    But this header was only used to list the objects in a container.
    
    Now, it is possible to specifically force the master on all meta2 requests.
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    proxy: Allow to rebuild chunk in frozen container
    proxy: Handle /content/spare locally, no meta2 involved
    proxy: Allow to add delete marker to a specific version
    proxy: Allow to simulate versioning when creating and deleting an object
    Update max_versions of container from header (2/2)
    
    This commit bring same mecanism to update sys.m2.policy.versions
    from header to content/delete operation: we want to control
    if current version of object must be deleted or add a delete marker.
    Update max_versions of container from header
    
    This commit introduce possibility to update max_versions when creating
    object:
    this is useful for container created through autocreate functionality:
    for Container Hierarchy, enabling versioning is set on root container,
    it is not possible to parse all container to update value and
    for performance, a dedicated request to update container is skipped
    (as a lot of upload may occurs at same time)
    
    If header `x-oio-force-versioning` is received,
    the max_versions is updated before completing
    object (to keep mecanism to delete prior object if needed)
    proxy: Recompute damaged objects count of a container
    Update Copyright
    proxy: Recompute statistics of a container
    proxy: Allow to change the policy of an object
    Update the copyright
    proxy, meta2: Remove 'content/link'
    proxy, meta2: Remove 'content/copy'
    meta2: Limit the number of deleted object when flushing
    Purge with a fixed number of versions
    meta2: Purge alias
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    Let transmit deadline in M2 rpc issued by the proxy
    meta2: get rid of M2_LEAVE RPC
    
    This was used to workaround resolver cache issues. But since we reduced
    usage of resolver cache, we don't need it anymore.
    Container snapshot: fix small issues
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    Adapt the code to the central config
    proxy: Extend the preference for te proxy to all the M2 read-only RPC
    proxy: Allow to ask for master only in meta2 RPC
    
    Currently, only upon /content/show and /content/locate
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    m2,proxy: implement content truncate operation
    Implement metachunk replacement
    
    This will allow optimized random writes (to change 1 byte, you will
    have to download and reupload only 1 metachunk, not the whole content).
    proxy: prefer MASTER for writing, SLAVE for reading
    m2v2: adds ISEMPTY feature, fixes DESTROY
    
    * DESTROY is now only local and the event emission is explicitely asked by the client
    * ISEMPTY quickly checks if any chunk is present
    proxy: container/destroy plainly destroys the containers and their references
    
    * a container destruction is now: 1/freeze 2/flush 3/unlink 4/destroy(local)
    * meta2 slighty simplified around PURGE/DEDUP/FLUSH, where the dry_run options have disappeared.
    metautils+meta2: unused code removed
    m2v2+proxy: routes with explicit content id now manage this via the oio_url extracted from http URL.
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    m2v2 / remote : reduces the exposition of functions
    core : explicit content links implemented.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    New features, several improvements.
    
      * New feature to list aliases linked to speicific contents (with their hash).
      * New feature to list aliases linked to speicific chunks (with their id).
      * Minor factorisations where the order doesn't matter after the merge (g_slist_concat() -> metautils_gslist_precat())
    m2v2: when listing a container's aliases, the container's metadata are also returned.
    
    In addition, unused code have been pruned from meta2.
    That code has been released with integrity-loop's removal.
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    m2v2 + sqlx + proxy : set properties on contents and containers now manage a flush options and deletion by null value.
    m2v2: minor code reorganisation.
    Content propeties reviewed + Cleanup, round 2
    Request-Id now managed in clients and servers
    
    * transmitted via a thread-local data
    * explicit ID eliminated from remote API (m2v2) + caller code adapted
    * in servers, collected from incoming requests, propagated to outgoing requests.
    * set to a random value when not set.
    OpenIO is lifting off now !
    client: fix meta1 timeouts and a memory leak
    
    Change-Id: I1b3e069bfca183b186b42a36002f71a8f2f9f558
    (cherry picked from commit 56fa88b8e8da97418d2022b201d177eb48fc023f)
    integrity/m2v2: fixes for orphan chunk check.
    
     - use long timeout (1h) for all requests to m2v2 and m2v1
     - stop the check if a network error is encountered
     - handle more cases of chunkid starting with '/'
     - change check order: chunk referencing is checked before chunk date,
       so a referenced chunk cannot be moved to lost+found
    
    Change-Id: I57f0c7b237fe1aa852f876e72d029f00e4aaef8e
    m2v2: unused/useless rpc code removed
    
    Change-Id: Ia04052d18fb285e68717ce75b7557b153375e719
    (FVE & GLA) : local base creation + operations allowed on local bases
    
    allow BEANS, PUT, GET, LIST and DELETE on local bases.
    
    Change-Id: I07b0e38352f9e4a3a4c1dd3031e9270ebd800d36
    (FVE & GLA) : local base creation + operations allowed on local bases
    
    allow BEANS, PUT, GET, LIST and DELETE on local bases.
    
    Change-Id: I783322d68d407f32bd9da68b16da90e50ede239b
    Merges the promoter's changes.
    
      * client/c: adapt rainx_remote for future use
      * Remove meta2_container_services from installed binaries in honeycomb.spec
      * cluster/lib : Fixed memory when there is no /etc/gridstorage.conf
      * m2v2: minor safety fix for chunk substitution
      * metautils / sockets : Fixed return code check.
    1.8.4 release candidate
    Initial commit
    server: Remove unused code
    server: remove the configurable flags, use good defaults
    Simplify the management of metrics
    
    We don't need a complicated solution with a background thread. We here
    reduce the number of allocations, the number of locks, the number of
    threads. We expect less CPU (user & sys) to be used.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    conf: Move the FD limits in the central config
    Adapt the code to the central config
    server: Remove useless or unused code.
    sqliterepo: Shorten the cnx timeout for USE and GETVERS requests
    
    From a default of 2s, use now 0.5s for GETVERS and 0.25s for USE.
    server: bounds the number of pending USE in udp queue
    server: able to manage UDP incoming packets
    
    Disabled by default
    server: replace the notification pipe by eventfd
    server: new macros for internal limits + limits reviewed
    
    * Macros moved in core/oiocfg.h
    * More events raised by epoll_wait: 16 -> 128
    * Limits to 64 the number of accept() on each round: avoids starving on
      established connections, and prefer finishing established connections
      before accepting others.
    * Removes the limits on the number of idle workers (5 -> -1). Just let
      the expiration timeout of 30s do the job.
    server: fix exit of servers with long polling clients
    server: uniform stats formats
    server: KILL disabled by default
    server+proxy: unified stats format
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    server: fixed timeouts and warnings around idle connections
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    server: Force slab allocations
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    server: Trim unused (slab) code
    server: adds GBytes slabs, removes file-based slabs
    
    The GBytes slabs allows to easily reply shared data without copying it,
    while only increasing the refcount.
    
    The file-based slabs (file, path, tmpfile) were unused.
    Fixed printf formats
    Fixed printf format warnings
    
    Raised when compiling for 32bit architectures.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Various fixes and improvements
    
    * metautils: now uses slice allocation
    * server: now uses slice allocation
    * sdk: ReqId, fixed missing headers
    Slab allocation for small structures + ASN.1 message simplification
    Slab allocation for small structures + ASN.1 message simplification
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    server: Remove unused code
    server: get server-side performance data
    
    Save some performance data in the thread local data. This is disabled by
    default, can be enabled for each service (even when the service is running)
    or per request.
    Performance data is printed at the end of access log messages.
    CI: slightly rework the test suites
    
    - Enable compression on half of the rawx services.
    - Run only the "big" rebuilder test.
    - Enable compresion during the rebuilder tests.
    - Update project version to 6.1
    server: display better messages after IO errors
    Increase max request run time for sqliterepo-based services
    
    The default value was too low and reduced some timeouts
    server: Remove the CID from access log lines
    
    The purpose of that field originates in the very first days of the
    ancestor of OpenIO, where we had no request-id. The container-id was
    used to follow actions on a container (i.e. an end user). Before this
    commit it still consumed 63 bytes on each line.
    metaX: Specify the result for each key when setting config
    server: remove the configurable flags, use good defaults
    Simplify the management of metrics
    
    We don't need a complicated solution with a background thread. We here
    reduce the number of allocations, the number of locks, the number of
    threads. We expect less CPU (user & sys) to be used.
    Python API, server: limit length of request ID
    server: Lowers the verbosity of a low-necessity trace
    server: Restore access logs in debug mode
    
    This may flood a log collector on a production server but it is useful for
    debugging purposes. That's why meta* and conscience services have their
    full access log reactivated when the log verbosity is set to Debug.
    server: Ease the integration with prometheus exporters
    
    Adds a payload to replies on PING calls. With a marker in it, so that a
    simple TCP handler can look for that marker: "OK\r\n"
    sqliterepo: Probe the basedir for I/O errors
    server: allow non-hexadecimal request IDs
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    Make the gridd server adapter transmit the deadline
    
    An optional field is looked for in the messages. It contains a timeout
    (in microseconds) used to compute a new deadline that is set in a
    thread-local variable.
    sqliterepo: new error code 511 for corrupted databases
    core/var: Introduce a readonly flag on the variables
    
    * The variables set at the CLI receive the flag.
    * readonly variables are not reset
    * a specific function is used to force a variable to a readonly value,
      and it can be used to force a behavior, programmatically.
    server: Simplify the LEANIFY command
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    server: Turn paranoid checks into assertions
    server: Trim unused code
    server/gridd: Replace useless checks by assertions
    server: Remove unused code
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    meta*: Help to detect starvations
    
    ... with a smarter error message that will be printed in the access log.
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 3e12733b1ef6b247af2187db7d044c709501d0d6)
    server: Add a test handler and the oio-tool corresponding action
    
    New action that always redirects, for testing purposes
    
    (cherry picked from commit 6b7f06a93092a0c7b03fda8146a2175e349dc8ed)
    server: Transform 2 magic numbers into managed configuration variables
    meta*: Deny (gently) the requests queued for too long
    
    A soft '503 retry later' is replied in meta* services when the
    connection could not receive a worker thread within 500ms. We decide
    this is way too long and that the server is already overloaded. So let's
    help to client to retry.
    Fix compilation issues with GCC 7
    server: Add a test handler and the oio-tool corresponding action
    
    New action that always redirects, for testing purposes
    conf: Add the ability to set/get the variables of a running service
    
    Currently covers oio-proxy, oio-{sqlx,meta{0,1,2}}-server.
    
    The proxy is queried with the route `/v3.0/config` (GET and POST).
    
    The services are queried through the proxy with the route `/v3.0/forward/config?id=SRVID`.
    config: Manage a second batch of variables
    server: Remove useless or unused code.
    Move the minimal rrd from server to metautils
    
    It prepares a change coming soon in sqliterepo, that requires the simple
    RRD implementation.
    server: Reduce the number of calls to realloc() and strlen()
    server: very slight code optimization
    core: allow to log outgoing requests
    server: able to manage UDP incoming packets
    
    Disabled by default
    core: introduces new macro to check the API/ABI version
    
    We plan to introduce fields in some structures. We need such a simple
    way to let the application programmer check its installation is correct
    and check the version it used at compile time was the same the version
    currently known by the library.
    server: log access AFTER answering and log response size
    
    Closes #546
    http+gridd: removes the ReqId after each request
    
    fixes a one-shot memleak reported by valgrind/memchecker
    server: access log disabled by default for some handlers
    
    Disabled upon successes for some handlers that are called too often.
    sqlx: server now reports its volume in its stats
    Useless/Unused functions removed
    access logs unified
    malloc_trim moved in a periodic task in sqlx_service
    
    * magic numbers replaced by macros (malloc_trim sizes)
    server: KILL disabled by default
    server: several stats pushed at once.
    metautils: unused code removed
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    Fixed printf format warnings
    
    Raised when compiling for 32bit architectures.
    oio-sds/pc now built, relase and version now configurable.
    Hook'able clock function now used everywhere
    Dropped the dependency to the Linux's specific clock functions.
    server: gridd transport slightly reviewed (common requests for stats and version)
    cluster, proxy: Fixes & Improvements
    
    * cluster / remote: cleaner and uniform interface, stripped code (+ dependencies adapted)
    * proxy: CLI option to disable the cache of services
    * proxy: management of services down, that are receive a lower priority
    * server: minor cleanups
    server: clearer message in access log upon a redirect
    
    Fixes #167
    server / gridd : accesslog now extracts the CID from sqlx base names.
    
    Useful for log agregation on replicated environments.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    server: the replied error is now traced in the access log
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Centralized macros, shorter values.
    Message handling functions refatored
    
    * Useless / unused functions removed.
    * Signatures more intuitive.
    * code factorized.
    Slab allocation for small structures + ASN.1 message simplification
    Slab allocation for small structures + ASN.1 message simplification
    Request-Id now managed in clients and servers
    
    * transmitted via a thread-local data
    * explicit ID eliminated from remote API (m2v2) + caller code adapted
    * in servers, collected from incoming requests, propagated to outgoing requests.
    * set to a random value when not set.
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    server: fix warning
    
    Change-Id: I666888e4a0ad2635a951099a7549aa7f45ef2d68
    Finer gauges for active threads, reliable accesslog delays
    
    This patch provides the maximum number of active threads, and a round-robin storage for that information.
    The granularity proposed is intervals of 1s over the past 30s, and intervals of 1 minute over the past 1 hour.
    This data is used by the core server library to expose statistics, e.g.
    
            server.thread.max.1 = 0
            server.thread.max.5 = 1
            server.thread.max.15 = 2
            server.thread.max.30 = 2
            server.thread.max.60 = 3
            server.thread.max.300 = 3
            server.thread.max.900 = 3
            server.thread.max.3600 = 3
    
    This patch also alters the accesslog format for gridd transports, and it is now unified with http transport.
    An access log record now provides 2 treatment durations:
    - the total time spent since the reception of the last buffer that completes the request
    - the total treatment time, from the moment where a worker thread starts the request handling til the moment an answer is generated.
    The delta between both delays is the time spent in the internals queues of the process.
    
    The patch divides in:
    - server/stats_holder.* :
      - drops the adherence to system time, the current timestamp is now received from the caller. This is necessary to manager counter with a granularity different than 1s.
      - New calls to compute the cumulative maximum
      - code simplification
    - server/network_server.* :
      - new round-robin stats now managed
      - new stats exposed.
      - precise monotonic clock used on the last input
    - server/transport_http.c :
      - useless variables removed.
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - server/transport_gridd.c :
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - sqlx/sqlx_service.c :
      - code adapted to match the lost "time adherence"
    
    Change-Id: I248ae7a1937860e4062290e95b68465d7ec62821
    1.8.4 release candidate
    Initial commit
    server: Remove unused code
    server: fix typo
    server: remove the configurable flags, use good defaults
    server: fix "request has been queued" warning message
    Simplify the management of metrics
    
    We don't need a complicated solution with a background thread. We here
    reduce the number of allocations, the number of locks, the number of
    threads. We expect less CPU (user & sys) to be used.
    server,sqliterepo: improve error messages
    
    Also display which configuration variable sets the threshold that
    triggered the warning or error message.
    server: Lower the verbosity of useless trace
    server: verify bind address parsing
    
    Jira: OS-76
    server: Force slab allocations
    sqliterepo: Probe the basedir for I/O errors
    metautils: Factorize the logging of g_thread_pool_push() errors
    
    * Throttling (max 1 log / process / minute)
    * Factorized in metatuils
    server: Fix the management of the errors of g_thread_pool_push()
    Proxy: Manage error 503
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    server: Trim dead code (useless traces and checks)
    server: Trim dead code (useless comments)
    server: Remove unused code
    server: Allow an action when SIGHUP has been raised
    conf: Move the FD limits in the central config
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    sqlx,meta*: Move the max-workers variable to tne central config
    server: Warn on thread starvation
    server: Rename misnamed symbols
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 3e12733b1ef6b247af2187db7d044c709501d0d6)
    server: Transform 2 magic numbers into managed configuration variables
    server: Replace a magic number by the convenient macro
    meta*: Deny (gently) the requests queued for too long
    
    A soft '503 retry later' is replied in meta* services when the
    connection could not receive a worker thread within 500ms. We decide
    this is way too long and that the server is already overloaded. So let's
    help to client to retry.
    server: Reset connetions suffering from thread starvations
    
    If a request could not receive a worker thread within 1 second, we
    decide the server was overloaded enough to drop the connection and let
    the client retry.
    server: Avoid reserved threads for the stats management
    Fix compilation issues with GCC 7
    server: Trigger the TCP_FASTOPEN option
    Adapt the code to the central config
    server: Remove useless or unused code.
    Clarify server warning, improve zk-reset help
    Move the minimal rrd from server to metautils
    
    It prepares a change coming soon in sqliterepo, that requires the simple
    RRD implementation.
    sqliterepo: Shorten the cnx timeout for USE and GETVERS requests
    
    From a default of 2s, use now 0.5s for GETVERS and 0.25s for USE.
    m2: fix some memory leaks
    
    (cherry picked from commit 8a34b728ee83706c85b3f4c0ea11ec76eb1c6f1c)
    m2: fix some memory leaks
    server: drop UDP messages in queue at exit
    
    It prevents a spam of 500-coded errors because of a repository being
    closed.
    server: bounds the number of pending USE in udp queue
    server: cosmetic changes
    
    Fixes "inconsistent bracket positions" as noticed by our Ayatollah
    of formatting, and a typo.
    server: able to manage UDP incoming packets
    
    Disabled by default
    server: replace the notification pipe by eventfd
    events / beanstalkd: now checked with unit tests
    m0,m1,m2,sqlx: reduce the number of logs at startup
    
    Closes #538
    server: new macros for internal limits + limits reviewed
    
    * Macros moved in core/oiocfg.h
    * More events raised by epoll_wait: 16 -> 128
    * Limits to 64 the number of accept() on each round: avoids starving on
      established connections, and prefer finishing established connections
      before accepting others.
    * Removes the limits on the number of idle workers (5 -> -1). Just let
      the expiration timeout of 30s do the job.
    server: drops the useless "cnx_backlog"
    server: cosmetic beauty enlargement
    server: protects fields handling while shutting down
    server: prevents a segfault when exiting server based processes
    
    The threadpool dedicated to worker was cleaned in the server's thread.
    But it could be accessed in a task thread.
    server: fix exit of servers with long polling clients
    server: fix service stop sequence
    
    Some services (e.g. oio-proxy) used to hang when asked to stop.
    server: uniform stats formats
    server+proxy: unified stats format
    server: several stats pushed at once.
    metautils: unused code removed
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    server: fixed timeouts and warnings around idle connections
    server: more checks around idle/inactive connections.
    server: fixes random connections resets (proxy, oio-*-server).
    Hook'able clock function now used everywhere
    Dropped the dependency to the Linux's specific clock functions.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Various fixes and improvements
    
    * metautils: now uses slice allocation
    * server: now uses slice allocation
    * sdk: ReqId, fixed missing headers
    Fixed several warnings appeared with recent GCC versions
    
    * improved printf format checks.
    * fixed formatting weaknesses
    * fixed "unmanaged results" in some functions.
    * fixed unused paramerers
    * tools: adds missing 'import syslog' in monitoring scripts.
    server: restored the hard-limit on connections numbers
    
    Destined to avoid a "too many opened files". It is known to be poorly managed by the sqlite bases.
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    server: now ready to manage UNIX sockets.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Slab allocation for small structures + ASN.1 message simplification
    Slab allocation for small structures + ASN.1 message simplification
    OpenIO is lifting off now !
    m0v2,m1v2,m2v2,sqlx: max worker threads config (TO-HONEYCOMB-775)
    
    New commandline option: MaxWorkers
    New conscience option: param_option.<type>_max_workers
    Default value is 200.
    
    Change-Id: Id80545e05df458b642f7d7b942139a87207820b4
    Finer gauges for active threads, reliable accesslog delays
    
    This patch provides the maximum number of active threads, and a round-robin storage for that information.
    The granularity proposed is intervals of 1s over the past 30s, and intervals of 1 minute over the past 1 hour.
    This data is used by the core server library to expose statistics, e.g.
    
            server.thread.max.1 = 0
            server.thread.max.5 = 1
            server.thread.max.15 = 2
            server.thread.max.30 = 2
            server.thread.max.60 = 3
            server.thread.max.300 = 3
            server.thread.max.900 = 3
            server.thread.max.3600 = 3
    
    This patch also alters the accesslog format for gridd transports, and it is now unified with http transport.
    An access log record now provides 2 treatment durations:
    - the total time spent since the reception of the last buffer that completes the request
    - the total treatment time, from the moment where a worker thread starts the request handling til the moment an answer is generated.
    The delta between both delays is the time spent in the internals queues of the process.
    
    The patch divides in:
    - server/stats_holder.* :
      - drops the adherence to system time, the current timestamp is now received from the caller. This is necessary to manager counter with a granularity different than 1s.
      - New calls to compute the cumulative maximum
      - code simplification
    - server/network_server.* :
      - new round-robin stats now managed
      - new stats exposed.
      - precise monotonic clock used on the last input
    - server/transport_http.c :
      - useless variables removed.
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - server/transport_gridd.c :
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - sqlx/sqlx_service.c :
      - code adapted to match the lost "time adherence"
    
    Change-Id: I248ae7a1937860e4062290e95b68465d7ec62821
    FIX: Allow threads to be killed when max started threads reached.
    
    Thank you, CDE.
    
    Change-Id: I71a77c69f04911a96af5df6df9203da55176bda8
    1.8.4 release candidate
    Initial commit
    Build & Use static libraries
    cmake: Explicit the ABI version of each shared library
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    Adapt the code to the central config
    Move the minimal rrd from server to metautils
    
    It prepares a change coming soon in sqliterepo, that requires the simple
    RRD implementation.
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    cmake: added 'Werror' in CFLAGS where there is no warning
    
    Warnings are the voice of Evil.
    
    Let's try to avoid them on targets already clean.
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    cmake: G_LOG_DOMAIN set at cmake's level.
    Content propeties reviewed + Cleanup, round 2
    OpenIO is lifting off now !
    Finer gauges for active threads, reliable accesslog delays
    
    This patch provides the maximum number of active threads, and a round-robin storage for that information.
    The granularity proposed is intervals of 1s over the past 30s, and intervals of 1 minute over the past 1 hour.
    This data is used by the core server library to expose statistics, e.g.
    
            server.thread.max.1 = 0
            server.thread.max.5 = 1
            server.thread.max.15 = 2
            server.thread.max.30 = 2
            server.thread.max.60 = 3
            server.thread.max.300 = 3
            server.thread.max.900 = 3
            server.thread.max.3600 = 3
    
    This patch also alters the accesslog format for gridd transports, and it is now unified with http transport.
    An access log record now provides 2 treatment durations:
    - the total time spent since the reception of the last buffer that completes the request
    - the total treatment time, from the moment where a worker thread starts the request handling til the moment an answer is generated.
    The delta between both delays is the time spent in the internals queues of the process.
    
    The patch divides in:
    - server/stats_holder.* :
      - drops the adherence to system time, the current timestamp is now received from the caller. This is necessary to manager counter with a granularity different than 1s.
      - New calls to compute the cumulative maximum
      - code simplification
    - server/network_server.* :
      - new round-robin stats now managed
      - new stats exposed.
      - precise monotonic clock used on the last input
    - server/transport_http.c :
      - useless variables removed.
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - server/transport_gridd.c :
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - sqlx/sqlx_service.c :
      - code adapted to match the lost "time adherence"
    
    Change-Id: I248ae7a1937860e4062290e95b68465d7ec62821
    1.8.4 release candidate
    Initial commit
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    server: Remove unused code
    server: display better messages after IO errors
    Simplify the management of metrics
    
    We don't need a complicated solution with a background thread. We here
    reduce the number of allocations, the number of locks, the number of
    threads. We expect less CPU (user & sys) to be used.
    sqliterepo: Probe the basedir for I/O errors
    Make the gridd server adapter transmit the deadline
    
    An optional field is looked for in the messages. It contains a timeout
    (in microseconds) used to compute a new deadline that is set in a
    thread-local variable.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    server: Trim unused code
    server: Remove unused code
    server: Remove useless or unused code.
    server: access log disabled by default for some handlers
    
    Disabled upon successes for some handlers that are called too often.
    sqlx: server now reports its volume in its stats
    server: uniform stats formats
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    Dropped the dependency to the Linux's specific clock functions.
    Slab allocation for small structures + ASN.1 message simplification
    Slab allocation for small structures + ASN.1 message simplification
    OpenIO is lifting off now !
    Finer gauges for active threads, reliable accesslog delays
    
    This patch provides the maximum number of active threads, and a round-robin storage for that information.
    The granularity proposed is intervals of 1s over the past 30s, and intervals of 1 minute over the past 1 hour.
    This data is used by the core server library to expose statistics, e.g.
    
            server.thread.max.1 = 0
            server.thread.max.5 = 1
            server.thread.max.15 = 2
            server.thread.max.30 = 2
            server.thread.max.60 = 3
            server.thread.max.300 = 3
            server.thread.max.900 = 3
            server.thread.max.3600 = 3
    
    This patch also alters the accesslog format for gridd transports, and it is now unified with http transport.
    An access log record now provides 2 treatment durations:
    - the total time spent since the reception of the last buffer that completes the request
    - the total treatment time, from the moment where a worker thread starts the request handling til the moment an answer is generated.
    The delta between both delays is the time spent in the internals queues of the process.
    
    The patch divides in:
    - server/stats_holder.* :
      - drops the adherence to system time, the current timestamp is now received from the caller. This is necessary to manager counter with a granularity different than 1s.
      - New calls to compute the cumulative maximum
      - code simplification
    - server/network_server.* :
      - new round-robin stats now managed
      - new stats exposed.
      - precise monotonic clock used on the last input
    - server/transport_http.c :
      - useless variables removed.
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - server/transport_gridd.c :
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - sqlx/sqlx_service.c :
      - code adapted to match the lost "time adherence"
    
    Change-Id: I248ae7a1937860e4062290e95b68465d7ec62821
    1.8.4 release candidate
    Initial commit
    server: Remove unused code
    server: remove the configurable flags, use good defaults
    Simplify the management of metrics
    
    We don't need a complicated solution with a background thread. We here
    reduce the number of allocations, the number of locks, the number of
    threads. We expect less CPU (user & sys) to be used.
    sqliterepo: Probe the basedir for I/O errors
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    server: Remove unused code
    server: Allow an action when SIGHUP has been raised
    conf: Move the FD limits in the central config
    sqlx,meta*: Move the max-workers variable to tne central config
    meta*: Deny (gently) the requests queued for too long
    
    A soft '503 retry later' is replied in meta* services when the
    connection could not receive a worker thread within 500ms. We decide
    this is way too long and that the server is already overloaded. So let's
    help to client to retry.
    server: Remove useless or unused code.
    server: able to manage UDP incoming packets
    
    Disabled by default
    events / beanstalkd: now checked with unit tests
    server: drops the useless "cnx_backlog"
    server: several stats pushed at once.
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    server: more checks around idle/inactive connections.
    Dropped the dependency to the Linux's specific clock functions.
    OpenIO is lifting off now !
    m0v2,m1v2,m2v2,sqlx: max worker threads config (TO-HONEYCOMB-775)
    
    New commandline option: MaxWorkers
    New conscience option: param_option.<type>_max_workers
    Default value is 200.
    
    Change-Id: Id80545e05df458b642f7d7b942139a87207820b4
    Finer gauges for active threads, reliable accesslog delays
    
    This patch provides the maximum number of active threads, and a round-robin storage for that information.
    The granularity proposed is intervals of 1s over the past 30s, and intervals of 1 minute over the past 1 hour.
    This data is used by the core server library to expose statistics, e.g.
    
            server.thread.max.1 = 0
            server.thread.max.5 = 1
            server.thread.max.15 = 2
            server.thread.max.30 = 2
            server.thread.max.60 = 3
            server.thread.max.300 = 3
            server.thread.max.900 = 3
            server.thread.max.3600 = 3
    
    This patch also alters the accesslog format for gridd transports, and it is now unified with http transport.
    An access log record now provides 2 treatment durations:
    - the total time spent since the reception of the last buffer that completes the request
    - the total treatment time, from the moment where a worker thread starts the request handling til the moment an answer is generated.
    The delta between both delays is the time spent in the internals queues of the process.
    
    The patch divides in:
    - server/stats_holder.* :
      - drops the adherence to system time, the current timestamp is now received from the caller. This is necessary to manager counter with a granularity different than 1s.
      - New calls to compute the cumulative maximum
      - code simplification
    - server/network_server.* :
      - new round-robin stats now managed
      - new stats exposed.
      - precise monotonic clock used on the last input
    - server/transport_http.c :
      - useless variables removed.
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - server/transport_gridd.c :
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - sqlx/sqlx_service.c :
      - code adapted to match the lost "time adherence"
    
    Change-Id: I248ae7a1937860e4062290e95b68465d7ec62821
    1.8.4 release candidate
    Initial commit
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    server: Trim unused (slab) code
    server: Remove useless or unused code.
    server: able to manage UDP incoming packets
    
    Disabled by default
    server: adds GBytes slabs, removes file-based slabs
    
    The GBytes slabs allows to easily reply shared data without copying it,
    while only increasing the refcount.
    
    The file-based slabs (file, path, tmpfile) were unused.
    Slab allocation for small structures + ASN.1 message simplification
    Slab allocation for small structures + ASN.1 message simplification
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    add openio logo for documentation purposes
    docs: new directory dedicated to schemas
    docs: new directory dedicated to schemas
    docs: added schema of the client infra. when metacd existed.
    docs: added schema of the client infra. when metacd existed.
    docs: new directory dedicated to schemas
    docs: new directory dedicated to schemas
    sqliterepo: Remove unused struct fields
    
    Also touches meta0, meta1, meta2
    meta*,sqlx: Respect the central lazy-lock flag
    meta*: Stop managing replication mode
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    sqliterepo/election: Set the retry-on-FAIL at 250ms
    
    ... instead of 2s
    
    The previous precision was at 1s with a huge bias.
    Now we can honor timers with a precision in milliseconds.
    sqlx: Stop using a common notifier
    Add option to manage xattr-lock
    meta2: support use of ServiceId
    
    meta-server now support ServiceId option on command line
    (but it should be used only by meta2)
    metautils,sqlx,tests: Get rid of the useless gridd_client_factory
    
    That pseudo object was never used!
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    meta*,sqlx: Shard on several connections to a single ZK cluster
    sqlx: Remove an unused struct field
    sqliterepo: Drop the feature of the global autocreation flag for DB
    conf: Move the FD limits in the central config
    sqlx,meta*: Move the max-workers variable to tne central config
    lb: Expire the services that disappeared from the conscience
    
    Fix #815
    meta2: Rely on the LB reloading proposed by sqlx_service
    
    While following the goal to reduce the bad cache effects, it seems
    necessary to cut the repeated code that impacts caching effects.
    sqlx: Allow the meta* services to override the central config
    Adapt the code to the central config
    lb: Expire the services that disappeared from the conscience
    
    Fix #815
    meta2: Rely on the LB reloading proposed by sqlx_service
    
    While following the goal to reduce the bad cache effects, it seems
    necessary to cut the repeated code that impacts caching effects.
    m0,m1,m2,sqlx: use local peers if available
    sqliterepo/cache: prevents threads starvation
    
    Get rid of the old model with a fixed-number of GCond used to bucketize
    all the DB accesses.
    
    Now one couple of GCond (normal, prio) is associated to each cache item,
    and this is better since the lifetime of each item is the whole
    execution.
    
    In addition, the notion of maximum bases used has been reviewed to allow
    slight changes on the effective maximum. Now we propose one "hard"
    maximum used to allocate structures at init time, and one "soft" maximum
    that can be freely changed between (0,hard].
    Review storage policy and service pool configuration
    Remove last traces of old load balancer
    proxy: integrate new load balancer
    m1v2: integrate new load balancer
    m2v2: integrate new load balancer
    rawx,sqlx*: new options to preallocate chunks and databases
    
    - rawx: new "grid_fallocate" option (enabled by default), to tell
      the server to preallocate the space for the chunk, and
      possibly fail at the beginnig of the upload if there is not enough
    - m0,m1,m2,sqlx: new "PageSize" commandline option to change the
      sqlite database page_size (defaults to 4096 bytes)
    sqlx_service: review FDs and connections limits
    server: drops the useless "cnx_backlog"
    sqlx: limits the number of timers fired at each step
    
    + fields renamed to match the expectations for a DEQUE
    sqliterepo/election: memleak chased
    sqlx/service: protects tasks while shutting down, allows disabling event queue.
    Self-registration dropped
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    sqliterepo: fix lack of decache upon a GETVERS error
    
    Avoids recreate deleted bases.
    sqlx: now able to prepare "turnkey" sqlite DB, pre-schemed.
    
    * option added to oio-sqlx-server to mention a directory full of schemas.
      the filename is the schema name, and its content the set of SQL statements to create a DB.
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    sqlx: prints stats about events flowing through event services
    m2v2: code simplifications and memleaks fixes around namespace_info structures
    Various beautifications
    
    agent: unused code removed
    cluster: uniform interface
    cluster: agent bypass
    conscience: func tests OK
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    sqlx_services: fixes around events transmissions to the event-agent.
    sqlx services : better shutdown for events-relted threads.
    
    The thread responsible for the forwarding to the agent now waits for the "end of events flox" from the workers.
    sqlx + m2v2 : events generation reviewed.
    
    PUSH/PULL pattern between the agent and the services has been replaced by a REP/REQ pattern:
      * the event's emitter sends 2 frames to the agent : |ID|JSON|
      * it expects replies formatted as : |ID|
    The ID replied acknowledgeds the event with the same ID.
    
    A minimal mechanism of periodical retries has been added.
    Cleanup, round 6
    
    * path to sqlite bases unified and simplified. It should also plainly manage several containers for the same user.
    * warnings removed.
    * useless comments removed.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    OpenIO is lifting off now !
    m0v2,m1v2,m2v2,sqlx: max worker threads config (TO-HONEYCOMB-775)
    
    New commandline option: MaxWorkers
    New conscience option: param_option.<type>_max_workers
    Default value is 200.
    
    Change-Id: Id80545e05df458b642f7d7b942139a87207820b4
    sqliterepo,sqlx,m2v2: fix election problems after move.
    
    Allow get_peers to bypass meta1 cache in sqlx and meta2v2.
    Add SQLX_EXITELECTION request in sqlx-based services.
    
    Change-Id: Ife2760bc869376c3b793950fca2fa703ca23bec9
    sqlx_service: an URL can now be announced, different from bind URL
    
    In addition, checks have been added on the URL provided.
    
    Change-Id: Ib21f8d07c2224385df2c515fc43a22e0cd5a415c
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    1.8.4 release candidate
    cmake: Reorganize the targets
    
    * do not list headers, as it is recommended
    * drop the dependency to sqlite3 in oio-proxy
    Build & Use static libraries
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    cmake: Explicit the ABI version of each shared library
    coverage: Avoid files generated by asn1c
    
    These files contain a lot of unused code.
    Adapt the code to the central config
    events: insulates module, adds beanstalkd implementation
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    cmake: added 'Werror' in CFLAGS where there is no warning
    
    Warnings are the voice of Evil.
    
    Let's try to avoid them on targets already clean.
    sqlx: fixed parametrized queries
    sqlx: fixed sqlx CLI tool
    sqlx: sqlxclient rename to oiosqlx
    oio-sds/pc now built, relase and version now configurable.
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    sqlx: client API continued.
    
    Not stable yet.
    core: Directory mock added
    sqlx: client implementation with ":memory:" databases.
    sqlx client : API proposal
    sqlx: CLI tool renamed
    1st cleanup : client, rawx-client, gridd/client
    
    * client/c/lib has been replaced by core/sds (pure http/json client)
    * rawx-client was not used
    * gridd/client has been replaced by tools/oio-tool
    * some metautils have been gathered in a single tool: oio-tool
    cmake: G_LOG_DOMAIN set at cmake's level.
    SSL replaced by GLib equivalent.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Content propeties reviewed + Cleanup, round 2
    OpenIO is lifting off now !
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    Binary installation names reviewed.
    1.8.4 release candidate
    Initial commit
    sqlx: manage getrlimit error
    sqlx: allow to disable sqliterepo_max_rss
    
    Current behavior was to compute rss always if unset.
    The only way to disable it was to ran:
    `openio-admin -p sqliterepo_max_rss=0`
    
    With this commit,
    -  0 to disable sqliterepo_max_rss feature
    - -1 to keep current behavior with autodetection
    sqliterepo: Remove unused struct fields
    
    Also touches meta0, meta1, meta2
    sqliterepo: Restore an option to prevent any lock operation.
    sqlx: Check directory/file creation without depending on network
    server: display better messages after IO errors
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    meta*,sqlx: Respect the central lazy-lock flag
    meta*: Stop managing replication mode
    meta*: Avoid a minor memory leak upon meta1 moves
    meta*: Typo that has an impact only in the sqlx
    
    The function is misplaced and should be relocated in sqlx code in
    further versions.
    Reorganize the libraries, Avoid a loop on the proxy
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    sqlx: Fixed indent + Log on max RSS changes
    sqliterepo: Update copyright mentions
    sqliterepo: Throttle the memory consumption
    sqliterepo/election: Simplification
    sqliterepo/election: Set the retry-on-FAIL at 250ms
    
    ... instead of 2s
    
    The previous precision was at 1s with a huge bias.
    Now we can honor timers with a precision in milliseconds.
    sqlx: Stop using a common notifier
    events: Remove zmq (unused) and configure the tube per queue
    sqliterepo: Close the reposiroty much faster
    
    We do not exit elections
    Stop accepting composed service types
    proxy,meta*: refactor the feeding of load balancer
    
    Use the new oio_lb_world__feed_slot_with_list function which allows to
    atomically feed a service slot with a list of items. This should prevent
    nasty messages like "LB reload not followed by rehash".
    
    Jira: OS-294
    sqliterepo: configure sqlite3 logging callback
    sqliterepo: Clean stale DB dumps
    
    Only at the startup when we own the lock on the base directory.
    Various small cosmetic fixes
    
    that I would have forgotten if not commited now.
    meta*, sqlx: Restore the cache of the resolver
    rdir, sqlx: document "Servicing" option
    Add option to manage xattr-lock
    Refresh LB even after loading errors
    
    When errors occur while reloading the LB, we do not trim the previous
    generations of services, and thus do not recompute the internal state.
    With this patch, the internal state will be recomputed in such cases.
    There is still room for improvements.
    meta2: support use of ServiceId
    
    meta-server now support ServiceId option on command line
    (but it should be used only by meta2)
    metautils,sqlx,tests: Get rid of the useless gridd_client_factory
    
    That pseudo object was never used!
    sqliterepo: Get rid of periodic DB_USE
    
    Also simplifies the management of timers
    sql*: Finer alerting upon long locks
    sqlx_service: Fix an alerting logic
    
    Thanks to @fvennetier, once again!
    sqliterepo: prevent warning with autoconfigured fd limits
    meta*: Ensure the configuration is reapplied after the init
    
    Additional security to prevent future bugs
    sqlx/sqlx_service: Simplify the code
    
    Big thanks to @fvennetier
    sqliterepo: Probe the basedir for I/O errors
    server: fix and document the automatic FD limits
    meta1,meta2,sqlx: add "event.health" stat
    meta*: Fix a missing final NULL pointer in an array
    
    Causes a probable segfautl when services are down.
    meta*: Fix the loading of peers down
    Slows down the alert for peers down
    
    From 5 seconds to 15 minutes
    meta*: Periodically reload the list of peers down
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    sqliterepo: autoconfigure "hard" maximum of open files
    sqlx,meta*: Split the main background task of re-kicking elections
    
    Several tasks with each one:
    * its lock on the election set
    * its trigger period
    * its threashold delay to warn for a long lock
    
    -> Now we should know when the lock is held for too long, and also
    split the critical section to remain fair with the other threads.
    sqliterepo: adapt to recent cache modifications
    sqliterepo: cache peers in election instead of resolver
    
    * cache election peers in election member structure
    * disable service resolver cache
    * document some proxy routes
    * fix "admin/copy" proxy route
    sqliterepo: fix service reload error message
    meta*: Align the resolver cleansing rules with those of the proxy
    
    Let both be purged of exceeding items, whether it is because of the TTL
    of the max number of items.
    meta*,sqlx: Make configurable the period of the DB decaches
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqlx,meta*: Avoid alerting when no peer because of an absent DB
    sqliterepo: Use CSV-related macros instead of hardcoded strings
    
    Not sure we increase the readability...
    sqlx: Shard the election across several containers
    meta*,sqlx: Shard on several connections to a single ZK cluster
    sqliterepo: Shard the elections on several ZK
    sqliterepo: Drop the feature of the global autocreation flag for DB
    cluster,conf: Move to the CCF the stgpol and svcupdate_policy
    
    ... CCF for Central Config Facility
    sqliterepo: Ensure there is a consistant output when locating the peers
    
    Either the error or the peers should be set, but never none nor both!
    Also, returning "no peer but no error" de facto become an empty array
    and never a NULL array anymore.
    meta*,sqlx: Reconfigure the service on SIGHUP
    server: Allow an action when SIGHUP has been raised
    conf: Move the FD limits in the central config
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    sqlx,meta*: Move the max-workers variable to tne central config
    sqliterepo: fix segfault in weird case
    sqliterepo: fix case of crash at shutdown
    meta*: Fix minor one-shot memleak
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 3e12733b1ef6b247af2187db7d044c709501d0d6)
    lb: Expire the services that disappeared from the conscience
    
    Fix #815
    meta2: Rely on the LB reloading proposed by sqlx_service
    
    While following the goal to reduce the bad cache effects, it seems
    necessary to cut the repeated code that impacts caching effects.
    sqlx: review shutdown sequence (timeout is now 10s)
    
    (cherry picked from commit e16dcc68dc84c3221d82900d1a0e2c33bd567950)
    core/cfg: Get rid of the delay
    
    Counter-productive and dangerous.
    core: Fix a memleak around the local cached configuration
    sqliterepo: fix case of crash at shutdown
    meta*: Fix minor one-shot memleak
    Add a general trigger around the activiation of TFO
    
    TCP_FASTOPEN improved the behavior on small-to-medium loads but it seems
    to induce some side effects such an extra load when srongly stressing
    the services. Let's deactivate it by default and continue the job of
    improving out support.
    Fix compilation issues with GCC 7
    sqlx: Allow the meta* services to override the central config
    conf: Third batch of variables
    
    udp_allowed, log_outgoing, rawx_events
    config: Manage a second batch of variables
    Adapt the code to the central config
    lb: Expire the services that disappeared from the conscience
    
    Fix #815
    meta2: Rely on the LB reloading proposed by sqlx_service
    
    While following the goal to reduce the bad cache effects, it seems
    necessary to cut the repeated code that impacts caching effects.
    m0,m1,m2,sqlx: use local peers if available
    sqlx: review shutdown sequence (timeout is now 10s)
    sqlx: review shutdown sequence (timeout is now 10s)
    meta1,meta2,proxy: Enables the faulty peers avoidance
    
    Triggered if actived in the system-wide configuration of the namespace.
    Move the minimal rrd from server to metautils
    
    It prepares a change coming soon in sqliterepo, that requires the simple
    RRD implementation.
    sqliterepo: review service shutdown sequence
    sqliterepo/election: cleaner trasitions the FSM
    
    The goal of the commit is to prevent entering a state with several
    pending callbacks that can trouble the transitions and cause messages
    storms.
    
    Only the completion events make the FSM (finite state machine) step
    forward. All the "interruptions" events are delayed until the normal
    actions are all done.
    
    Summary of the changes:
    
    * general renaming of the states to more intuitive names that denote the
      action that is pending. LEADER -> MASTER, LOST -> SLAVE.
    * new states added, so that at most one action is pending in each state.
      specially PRELOST that becomes [ASKING,CHECKING_MASTER] and CANDOK
      that becomes [WATCHING,LISTING].
    * new state added to leave-and-then-fail, instead of leaving then
      retrying.
    * Tests, tests, test. Despite the FSM is not 100% covered yet, the major
      transitions are now checked.
    * Timers simplified: since we wait for actionns before leaving an FSM
      state,.the necessity to retry an election is vastly simplified and
      only occurs from the NONE state.
    * A jitter has been introduced before sending a ping (USE) from a final
      state.
    
    Despite the result should be more stable, robust and resilient, this is
    a big set of changes and one shoould take care of possible unexpected
    effects. Especially of elections that could go more often than necessary
    in the FAILED state, and then undergo a 5s timer before the retry.
    (Prior to this commit, we would have loop-retry more often than
    necessary.)
    sqliterepo: actually reuse idle bases when max reached
    sqliterepo: log outgoing Sync/Perring requests
    sqliterepo: shuffle the ZK cnx string before usage
    sqlitepo-based services: incoming UDP now always allowed
    
    Eases migration.
    sqlite services: enables UDP if configured so
    meta{0,1,2},sqlx: allows alternate ZK url in /etc/oio/sds.conf
    
    A service with the XXX service type now overrides its ZK url (found at
    'zookeeper' in /etc/oio/sds.conf) with an other value found at
    zookeeper.XXX in /etc/oio/sds.conf. If the specific value is not set,
    the main value is left untouched.
    sqliterepo/cache: prevents threads starvation
    
    Get rid of the old model with a fixed-number of GCond used to bucketize
    all the DB accesses.
    
    Now one couple of GCond (normal, prio) is associated to each cache item,
    and this is better since the lifetime of each item is the whole
    execution.
    
    In addition, the notion of maximum bases used has been reviewed to allow
    slight changes on the effective maximum. Now we propose one "hard"
    maximum used to allocate structures at init time, and one "soft" maximum
    that can be freely changed between (0,hard].
    sqlx: actually flush service slots
    Review storage policy and service pool configuration
    proxy: integrate new load balancer
    m1v2: integrate new load balancer
    m2v2: integrate new load balancer
    lb: review for more efficiency
    sqlx*: Fixes a check on the page size
    sqlx: fixes the SQLite page size config
    
    The configuration was not taken int account and left to the default
    (1024 for < 3.12, 4096 for >= 3.12).
    proxy,resolver: expresses delays in monotonic time precision
    
    One step further in the uniformisation of the TTL and Delays management
    that previously mixed gdouble (seconds), time_t (second) and gint64
    (monotonic clock).
    
    The monotonic clock is the law!
    events: make buffer delay configurable (5s by default)
    m0,m1,m2,sqlx: reduce the number of logs at startup
    
    Closes #538
    events: insulates module, adds beanstalkd implementation
    rawx,sqlx*: new options to preallocate chunks and databases
    
    - rawx: new "grid_fallocate" option (enabled by default), to tell
      the server to preallocate the space for the chunk, and
      possibly fail at the beginnig of the upload if there is not enough
    - m0,m1,m2,sqlx: new "PageSize" commandline option to change the
      sqlite database page_size (defaults to 4096 bytes)
    m0,m1,m2,sqlx: do not enforce fsync when replication is enabled
    sqlx*: displays FD limits even if not modified
    sqlx_service: review FDs and connections limits
    server: drops the useless "cnx_backlog"
    sqlx: better default intervals for DB_USE
    sqlx: limits the number of timers fired at each step
    
    + fields renamed to match the expectations for a DEQUE
    sqlx: elections now stored in "per-status" lists
    
    Helps managing properly long lists of items with timers set.
    sqlx: reconfigure the max-pending for the services'es events queues.
    
    + sample configuration
    sqlx: reconfigure the max-pending for the services'es events queues.
    
    + sample configuration
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    sqliterepo/election: memleak chased
    sqlx/service: protects tasks while shutting down, allows disabling event queue.
    sqlx*: properly handle exit signal bursts
    sqlx*: fix service stop sequence (elections were freed too early)
    sqlx: server now reports its volume in its stats
    Self-registration dropped
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    Useless/Unused functions removed
    sqlx: now able to prepare "turnkey" sqlite DB, pre-schemed.
    
    * option added to oio-sqlx-server to mention a directory full of schemas.
      the filename is the schema name, and its content the set of SQL statements to create a DB.
    malloc_trim moved in a periodic task in sqlx_service
    
    * magic numbers replaced by macros (malloc_trim sizes)
    sqliterepo: open_timeout now expressed in the precision of oio_ext_monotonic_time()
    server: uniform stats formats
    core + sqlx_service : still more pragmatic usage of GRand
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    Fixed compilation on x86_32
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    Fixed printf formats
    Fixed printf format warnings
    
    Raised when compiling for 32bit architectures.
    sqliterepo: speed-up the schema checks
    
    * sqliterepo: the checks of the schema are now performed with lowered security, to avoid useless transaction syncs.
    * sqliterepo: got rid of the useless "version" provided when checking for the schema
    * meta0: removed the useless "vacuum" in the schema.
    * meta0/meta1/sqlx/tests: adapted to the changes previously listed.
    sqlx: smoother exit sequence for sqliterepo-based
    
    Avoids calling zookeeper hooks on closed elections.
    Hook'able clock function now used everywhere
    Dropped the dependency to the Linux's specific clock functions.
    cluster: stat.io restored in service_info descriptions.
    
    In addition, useless/unused code has been removed.
    sqlx: prints stats about events flowing through event services
    sqlx_service: fixed minor one-shot memleak.
    proxy: V2.0 routes'es code removed, RDIR routes implemented
    Volume lock factorized (rawx) and moved from the repository to the service.
    m2v2: code simplifications and memleaks fixes around namespace_info structures
    LB: flush option added to reload, reload code moved from cluster to sqlx.
    
    sqlx_service was the only place it was called from.
    conscience: renaming + pruning + reorg
    
    * conscience/agent remote functions have been renamed for more clarity
    * MACRO tags have been removed (usage too scarce and immutable, no need of something so flexible)
    * CPU/IO/SPACE computation moved from the oio-cluster-agent to libgridcluster
    * oio-cluster-agent is now now mandatory
    Various beautifications
    
    agent: unused code removed
    cluster: uniform interface
    cluster: agent bypass
    conscience: func tests OK
    sqlx / service : little speed up in the initial loading of LB pools.
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    Speeds up the startup of services.
    
    More agressive delays for:
    * LB refresh
    * prefix loading in meta1
    
    The period between the iterations is shortened until the first success.
    sqlx: fixed minor one-shot memleak
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    sqlx_services: fixes around events transmissions to the event-agent.
    sqlx services : better shutdown for events-relted threads.
    
    The thread responsible for the forwarding to the agent now waits for the "end of events flox" from the workers.
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    event-agent config key fixed + trigger to disable zookeeper in oio-reset
    m2v2 delete content simplified with the help of asynchronous chunk's removal.
    event-agent config key fixed + trigger to disable zookeeper in oio-reset
    sqlx_service : depends on ZMQ 3.X
    
    Symbols for ZMQ 4.X were used.
    sqlx + m2v2 : events generation reviewed.
    
    PUSH/PULL pattern between the agent and the services has been replaced by a REP/REQ pattern:
      * the event's emitter sends 2 frames to the agent : |ID|JSON|
      * it expects replies formatted as : |ID|
    The ID replied acknowledgeds the event with the same ID.
    
    A minimal mechanism of periodical retries has been added.
    Cleanup, round 6
    
    * path to sqlite bases unified and simplified. It should also plainly manage several containers for the same user.
    * warnings removed.
    * useless comments removed.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    OpenIO is lifting off now !
    m0v2,m1v2,m2v2,sqlx: get ZooKeeper addresses from conscience
    
    if none configured in /etc/gridstorage.conf
    
    Change-Id: I9de952111b13c07c775a0285724b738ff20f43f2
    m0v2,m1v2,m2v2,sqlx: max worker threads config (TO-HONEYCOMB-775)
    
    New commandline option: MaxWorkers
    New conscience option: param_option.<type>_max_workers
    Default value is 200.
    
    Change-Id: Id80545e05df458b642f7d7b942139a87207820b4
    Finer gauges for active threads, reliable accesslog delays
    
    This patch provides the maximum number of active threads, and a round-robin storage for that information.
    The granularity proposed is intervals of 1s over the past 30s, and intervals of 1 minute over the past 1 hour.
    This data is used by the core server library to expose statistics, e.g.
    
            server.thread.max.1 = 0
            server.thread.max.5 = 1
            server.thread.max.15 = 2
            server.thread.max.30 = 2
            server.thread.max.60 = 3
            server.thread.max.300 = 3
            server.thread.max.900 = 3
            server.thread.max.3600 = 3
    
    This patch also alters the accesslog format for gridd transports, and it is now unified with http transport.
    An access log record now provides 2 treatment durations:
    - the total time spent since the reception of the last buffer that completes the request
    - the total treatment time, from the moment where a worker thread starts the request handling til the moment an answer is generated.
    The delta between both delays is the time spent in the internals queues of the process.
    
    The patch divides in:
    - server/stats_holder.* :
      - drops the adherence to system time, the current timestamp is now received from the caller. This is necessary to manager counter with a granularity different than 1s.
      - New calls to compute the cumulative maximum
      - code simplification
    - server/network_server.* :
      - new round-robin stats now managed
      - new stats exposed.
      - precise monotonic clock used on the last input
    - server/transport_http.c :
      - useless variables removed.
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - server/transport_gridd.c :
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - sqlx/sqlx_service.c :
      - code adapted to match the lost "time adherence"
    
    Change-Id: I248ae7a1937860e4062290e95b68465d7ec62821
    sqliterepo: add forced meta1 decache in SQLX_RESYNC.
    
    and fix small bugs.
    
    Change-Id: I905f8dcb61c00b1e60c0e0b459bd27a4e0172cdf
    sqlx_service: an URL can now be announced, different from bind URL
    
    In addition, checks have been added on the URL provided.
    
    Change-Id: Ib21f8d07c2224385df2c515fc43a22e0cd5a415c
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    Fixed error management when bind() fails.
    Merges the promoter's changes.
    
      * client/c: adapt rainx_remote for future use
      * Remove meta2_container_services from installed binaries in honeycomb.spec
      * cluster/lib : Fixed memory when there is no /etc/gridstorage.conf
      * m2v2: minor safety fix for chunk substitution
      * metautils / sockets : Fixed return code check.
    Fix replication mode's configuration
    
    Solo's value was used for both solo and repli modes.
    2014-06-19 update from the promoter's version.
    
      * cleanup (paths, includes, macros)
      * m2v1: fix warnings
      * conscience: fix (warn on custom NONE stgpol)
      * sqliterepo: add check of redirection target (in debug mode)
      * m2v2: add retry loop for self redirections
      * c client: replaced some g_print by GRID_INFO to allow quiet mode
      * c client: add message on container destroy success
      * sqliterepo: leave election if no peers found in defer_USE
      * client/c: if m2 is replicated, make client retry
      * m2v2: handle error on exit_election
      * conscience: add check on VNS chunk_size
      * sqliterepo: fix leak
      * m2v2, c client: implement TO-HONEYCOMB-713 (chunk_size per VNS)
      * m2v2: fix TO-HONEYCOMB-715 (error after destroying not empty container)
      * sqliterepo, m2v2: improve debug traces
      * metautils: new function to compute printable thread id
      * c client: fix typo in get_virtual_namespace
      * sqliterepo: call malloc_trim after expiring bases
      * c client: fixed physical/virtual namespace confusions
      * rawx-lib: improved recovery of truncated chunks
      * rawx-lib: new options for gs_uncompress (log4c and keep_pending)
      * gridd: Fixed typo
      * gridd: timeout for idle connection is now configurable, and even disableable.
      * client : feature to change the VNS of an established client
      * replicator : VNS are now partially managed (only containers and contents) container_events are not yet supported.
      * metautils : CID computation more robust
      * meta2 / module : events when SLAVE ns + container's VNS in events instead of service's NS.
      * meta2 / lib : backend feature to get the VNS of a container
      * rawx-lib : fixed attr checks
      * cluster/dummy_service : annoying output level-lowered
      * gridd: annoying trace level-lowered
      * metautils: fix copy of chunk.metadata when its length is 0.(cherry picked from commit f5011e6d305b974319062084eac52f950a2d0270)
      * meta2: fixed TO-HONEYCOMB-678 (append on dup chunks)
      * saver: fixed TO-HONEYCOMB-677 (tsmx service not unlinked)
      * saver: now able to manage content delete events (to be tested)
      * saver: now able to make difference between PUT events and the other
      * Fixed relative #include path, that path doesn't allow a graceful split between the OSS/Proprietary parts.
      * m2v2: remove call to sleep in purge
    Fixes an infinite loop on epool_wait() when bind() failed.
    
    + Factorisation of few error management lines.
    Prevent initiating the sync manager when no sync has been configured.
    
    ... not configured means no zookeeper variable in the namespace's section in /etc/gridstorage.conf files.
    1.8.4 release candidate
    events: Remove unused code
    events: Relicence to LGPL
    events: Give each tube an internal thread
    
    It has to be explicitely started with a new call of the signature:
    `start`.
    meta1,meta2,sqlx: add "event.health" stat
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    events: use LRU-tree for buffering, avoid bursts
    Adapt the code to the central config
    m2,events: new function send overwritable events with delay
    
    This will reduce the number of events sent by meta2 to account-server:
    maximum one event by container each second.
    events: insulates module, adds beanstalkd implementation
    events: Relicence to LGPL
    events/beanstalkd: Split the code for more clarity
    
    * Flush the queues when exiting
    * Loop more often to avoid delaying for too long
    * Force a max delay to exit
    * Alert for lost events
    events: Make configurable the buffering delay
    
    Only considered at the startup of the service.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    events: use LRU-tree for buffering, avoid bursts
    Adapt the code to the central config
    m2,events: new function send overwritable events with delay
    
    This will reduce the number of events sent by meta2 to account-server:
    maximum one event by container each second.
    events: insulates module, adds beanstalkd implementation
    Build & Use static libraries
    cmake: Explicit the ABI version of each shared library
    events: Remove zmq (unused) and configure the tube per queue
    events: Accept multiple benastalkd output in sql* services
    
    With the help of a special agregator event queue.
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    events: use LRU-tree for buffering, avoid bursts
    Adapt the code to the central config
    m2,events: new function send overwritable events with delay
    
    This will reduce the number of events sent by meta2 to account-server:
    maximum one event by container each second.
    events: insulates module, adds beanstalkd implementation
    events: Remove unused code
    events: Relicence to LGPL
    events/beanstalkd: Split the code for more clarity
    
    * Flush the queues when exiting
    * Loop more often to avoid delaying for too long
    * Force a max delay to exit
    * Alert for lost events
    events: Give each tube an internal thread
    
    It has to be explicitely started with a new call of the signature:
    `start`.
    multi-beanstalk: Check correctly if the service running
    events: Make configurable the buffering delay
    
    Only considered at the startup of the service.
    events: Accept multiple benastalkd output in sql* services
    
    With the help of a special agregator event queue.
    events: Relicence to LGPL
    Move lrutree.* from metautils/ to core/
    events/beanstalkd: Split the code for more clarity
    
    * Flush the queues when exiting
    * Loop more often to avoid delaying for too long
    * Force a max delay to exit
    * Alert for lost events
    events: Make configurable the buffering delay
    
    Only considered at the startup of the service.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    events: use LRU-tree for buffering, avoid bursts
    events: warn if too many buffered events were sent at once
    Adapt the code to the central config
    m2,events: new function send overwritable events with delay
    
    This will reduce the number of events sent by meta2 to account-server:
    maximum one event by container each second.
    events: Relicence to LGPL
    m2, events: emit a warning before retrying to send an event
    
    Also review some log messages so it's easier to grep them.
    events: Test simplification (game on macros)
    
    No need for an extra macro, HAVE_EXTRA_DEBUG is enough.
    Thanks to @murlock
    events: Fix a typo in a comment
    
    Thanks to @murlock
    events/beanstalkd: Split the code for more clarity
    
    * Flush the queues when exiting
    * Loop more often to avoid delaying for too long
    * Force a max delay to exit
    * Alert for lost events
    events: Give each tube an internal thread
    
    It has to be explicitely started with a new call of the signature:
    `start`.
    events: Remove zmq (unused) and configure the tube per queue
    events/beanstalkd: Replace strcpy with g_strlcpy
    events: Make configurable the buffering delay
    
    Only considered at the startup of the service.
    events: Remove a useless header include
    meta1,meta2,sqlx: add "event.health" stat
    Set a longer+configurablle timeout for beanstalkd requests
    beanstalkd: Generate clearer errors
    Print the limits upon beanstalkd load errors/alerts
    beanstalkd: Add an exponential backoff on net errors
    events/beanstalkd: Fix compilation warnings
    beanstalkd: Factorize, fix memleaks, retry well
    meta*: Periodically check the beanstalkd
    
    Fixes #1194
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    events: reduce CPU usage, warn when reaching max queue size
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    events: use LRU-tree for buffering, avoid bursts
    events: warn if too many buffered events were sent at once
    Adapt the code to the central config
    events / beanstalkd: now checked with unit tests
    oio/events : verify content received from beanstalkd
    tests : adding some tests to verify beanstalkd requests
    events/beanstalkd: fixed `use` command (#590)
    
    Mandatory in lowercase.
    events/beanstalkd: fixed `use` command
    
    Mandatory in lowercase.
    beanstalkd: configurable TUBE (#574)
    events: better management of beanstalkd connections (#569)
    
    Fixes #568
    events: make buffer delay configurable (5s by default)
    m0,m1,m2,sqlx: reduce the number of logs at startup
    
    Closes #538
    m2,events: new function send overwritable events with delay
    
    This will reduce the number of events sent by meta2 to account-server:
    maximum one event by container each second.
    events/beanstalkd: fixes a meamleak
    
    Happened once par queue creation --> thus happened once per request in
    RAWX
    events/beanstalkd: fixes
    
    * socket polling for OUT avalability
    * emptyness detection of the queue
    * periodic retry after deconnection
    events: fixes the default beanstalk configuration
    
    Now the config for C clients conforms to what it was for the Python
    tools.
    events: insulates module, adds beanstalkd implementation
    events: Relicence to LGPL
    events: Give each tube an internal thread
    
    It has to be explicitely started with a new call of the signature:
    `start`.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    events: use LRU-tree for buffering, avoid bursts
    events: Relicence to LGPL
    events: Remove zmq (unused) and configure the tube per queue
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Adapt the code to the central config
    beanstalkd: configurable TUBE (#574)
    events: fixes the default beanstalk configuration
    
    Now the config for C clients conforms to what it was for the Python
    tools.
    events: insulates module, adds beanstalkd implementation
    sqlx: sqlxclient rename to oiosqlx
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    events: Relicence to LGPL
    events: Accept multiple benastalkd output in sql* services
    
    With the help of a special agregator event queue.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    events: insulates module, adds beanstalkd implementation
    Message handling functions refatored
    
    * Useless / unused functions removed.
    * Signatures more intuitive.
    * code factorized.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    events: Relicence to LGPL
    events: Give each tube an internal thread
    
    It has to be explicitely started with a new call of the signature:
    `start`.
    events: Remove zmq (unused) and configure the tube per queue
    meta2: Add User-Agent to the events
    rawx: Accept multiple beanstalkd
    Transfer request ID in chunk events
    
    - Rawx forwards incoming request ID to outgoing events
    - Event-agent uses this request ID when indexing chunks in rdir
    
    Relates to #1346
    events: Make configurable the buffering delay
    
    Only considered at the startup of the service.
    events: Use a macro for the separator in compound config values
    
    Thanks to @fvennetier
    events: Accept multiple benastalkd output in sql* services
    
    With the help of a special agregator event queue.
    meta1,meta2,sqlx: add "event.health" stat
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Adapt the code to the central config
    events, rawx: Reduce the number of calls to realloc() and strlen()
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    m2,events: new function send overwritable events with delay
    
    This will reduce the number of events sent by meta2 to account-server:
    maximum one event by container each second.
    events: adds a feature to 'just' check the config
    events: insulates module, adds beanstalkd implementation
    events: Remove unused code
    events: Relicence to LGPL
    events: Give each tube an internal thread
    
    It has to be explicitely started with a new call of the signature:
    `start`.
    events: Remove zmq (unused) and configure the tube per queue
    rawx: Accept multiple beanstalkd
    Transfer request ID in chunk events
    
    - Rawx forwards incoming request ID to outgoing events
    - Event-agent uses this request ID when indexing chunks in rdir
    
    Relates to #1346
    events: Make configurable the buffering delay
    
    Only considered at the startup of the service.
    meta1,meta2,sqlx: add "event.health" stat
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Adapt the code to the central config
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    m2,events: new function send overwritable events with delay
    
    This will reduce the number of events sent by meta2 to account-server:
    maximum one event by container each second.
    events: adds a feature to 'just' check the config
    events: insulates module, adds beanstalkd implementation
    sqlx: reconfigure the max-pending for the services'es events queues.
    
    + sample configuration
    sqlx: reconfigure the max-pending for the services'es events queues.
    
    + sample configuration
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    server,sqliterepo: improve error messages
    
    Also display which configuration variable sets the threshold that
    triggered the warning or error message.
    sqliterepo: Force slab allocations
    sqliterepo: Defer syscalls out of  the critical section
    sqliterepo/client_pool: Add an explicit notify, reduce complexity
    
    Expects this change to reduce by ~2 the number of write() on the eventfd,
    then causing less context switches and system CPU usage.
    
    Also get rid of the non-necessary/unused pseudo-object around the gridd
    client pool.
    sqliterepo: Avoid a possible starvation under concurrency
    sqliterepo: Change active clients limit according to timeout
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    conf: Move the FD limits in the central config
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    Adapt the code to the central config
    sqliterepo: Fix an error code for fake errors
    sqliterepo/gridd_client: Restores the checks for expired timeouts
    enbug: sqliterepo/election: lowers to 10% the failure rate of GETVERS
    sqliterepo: bounds to 4s the time spent in queud by sync requests
    sqliterepo: fixes potential memleak while syncing
    
    sqliterepo leaked GError structures that happened while deferring the
    peering requests (connect, request). Upon an error, the GError was not
    freed and the global RPC was started.
    
    Now the GError is freed and the application is notified immediately of
    an error.
    sqliterepo: warn on long election request queue
    sqliterepo: replace the notification pipe by eventfd
    sqliterepo/election: memleak chased
    Fixed compilation on x86_32
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    Hook'able clock function now used everywhere
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    OpenIO is lifting off now !
    1.8.4 release candidate
    sqliterepo: display election access time and last status
    
    This will help debugging election garbage collection.
    sqliterepo: Remove unused code
    sqliterepo: Show SYNC_KO on failed PIPEFROM
    core: implement array filtering function
    sqliterepo: reset elections stuck in CREATING step
    
    This helps recovering after a ZooKeeper failure. The delay of 12s can be
    changed with sqliterepo.election.delay.expire_pending, and should be set
    between sqliterepo.zk.timeout and sqliterepo.election.wait.delay.
    sqliterepo: remove watches before deleting ZK nodes
    
    Removing watches before deleting ZooKeeper nodes prevents this watches
    to trigger callbacks after the election is gone (this happens when
    ZooKeeper is under heavy load).
    
    This modification requires ZooKeeper 3.5. Behavior with older versions
    is unchanged.
    sqliterepo: provide more debugging hints
    
    The debugging JSON object will now show the full path to the ZooKeeper
    node, and the server address.
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    sqliterepo: Expose the BALM (balance masters) RPC
    sqliterepo: add possibility to balance master elections
    
    (cherry picked from commit b5633f3b9a44b41bf5f2065db97b4567241998f1)
    sqliterepo: Fix the synchronous mode
    
    OFF by default, anyone uses replicated DB that can cope with less fsync
    sqliterepo: Better detection of removed container
    sqliterepo: Fix a memory leak
    sqliterepo: Fix the detection of peers to work with deleted bases
    sqliterepo: Save calls to the peers-reference with proper caching
    sqliterepo: prevent get_version when leaving
    sqliterepo: more request IDs
    sqliterepo: create the database on internal GETVERS requests
    
    External DB_VERS requests used to create the database, but internal ones
    did not. This resulted in a meta2 service never being elected master
    during M2_CREATE requests.
    
    Jira: OS-411
    sqliterepo: accept slow callbacks of deleted elections
    sqliterepo: reset master elections on unbound ZOO_DELETED_EVENT
    
    Instead of just printing a warning message, take precautions and reset
    master elections.
    sqliterepo: reset master elections on ZOO_SESSION_EVENT
    
    A long time ago, we used to reset all elections on such Zookeeper
    event. We stopped doing this when we started to use several
    connections to Zookeeper, because it seemed a bad idea to reset
    everything on a single connection failure.
    Unfortunately, this leads to elections staying forever in the same state
    while their Zookeeper node has vanished.
    
    Now, after getting an unbound (no path is provided) ZOO_SESSION_EVENT,
    we will reset all elections in the master state, to avoid any infamous
    "double master" situations.
    
    (cherry picked from commit 49b99472c38b5dbf0c6b005c0d6c57a7f939d48d)
    sqliterepo: remove the unused "ping_final" parameter
    sqliterepo: reset master elections on ZOO_SESSION_EVENT
    
    A long time ago, we used to reset all elections on such Zookeeper
    event. We stopped doing this when we started to use several
    connections to Zookeeper, because it seemed a bad idea to reset
    everything on a single connection failure.
    Unfortunately, this leads to elections staying forever in the same state
    while their Zookeeper node has vanished.
    
    Now, after getting an unbound (no path is provided) ZOO_SESSION_EVENT,
    we will reset all elections in the master state, to avoid any infamous
    "double master" situations.
    sqliterepo/election: Fix a misleading comment
    
    Thanks, @fvennetier
    sqliterepo/election: Be more consistent with sharded/multiplied ZK
    sqliterepo/election: Fix an ugly but harmless memory management
    
    Hopefully, we did not write out of the `id` integer variable because the
    source hexadecimal string ends early enough.
    sqliterepo/election: Simplification
    sqliterepo/election: Set the retry-on-FAIL at 250ms
    
    ... instead of 2s
    
    The previous precision was at 1s with a huge bias.
    Now we can honor timers with a precision in milliseconds.
    sqliterepo/election: Avoid blocking the FSM on disconnections
    
    We should always call the transition() function on an event.
    sqliterepo: minor fixes
    
    `completion_LISTING` did not check validity of argument before using it.
    Also fix a codepath with strrchr could be called on NULL
    sqliterepo: React quickly to a MASTER disappearing while ASKING
    sqliterepo: Close the reposiroty much faster
    
    We do not exit elections
    enbug/election: Simulate a double-master condition
    
    e.g. declare what follows in your etc/sds.conf file (please note there
    is no quote around the value):
    
    enbug.election.double_master.db=9006CE70B59E5777D6BB410C57944812EB05FCDB5BA85D520A14B3051D1D094F.1
    
    ... and you will trigger a double master on the container 1 for the
    service type "meta2" of the reference "JFS".
    sqliterepo/election: Emit a DB_USE when becoming master
    sqliterepo: Emit a MASTER flag in DB_USE
    sqliterepo, meta2: display request ID in more messages
    sqliterepo: tell which service we could not pipe from
    Create option to force a service to deny the role of MASTER in any election
    sqliterepo: fix small memory leak
    sqliterepo: Keep pointer on election to avoid lookups
    
    This leads to smaller structures (the pointer is smaller than the name
    components) and less CPU, and requires recounts to be well handled.
    sqliterepo/election: Fix the detection of Rogue nodes
    sqliterepo: Force slab allocations
    sqliterepo/election: Resolve the peers from the reference
    sqliterepo/election: Set a deadline when fetching the peers
    sqliterepo/election: Set a deadline when reacting to ZK completions
    sqliterepo/election: Display better messages
    sqliterepo: Defer syscalls out of  the critical section
    sqliterepo/election: Fix code format
    sqliterepo/election: Set more threads for ZK completions
    sqliterepo/election: Don't log execution on exit
    sqliterepo/election: Add a missing exec trace while locked
    
    Before, no trace when leaving
    sqliterepo/election: Remove useless warning (rogue)
    sqliterepo/election: Remove unwanted traces
    
    They are duplicated with TRACE_EXECUTION that is much more a-propos
    sqliterepo/election: Align some struct fields
    sqliterepo/election: Fix a typo
    
    Thanks to @fvennetier
    sqliterepo/election: Debug long locks
    
    Also remove old logs around the calls to the ZK client
    sqliterepo/election: Split big critical sections
    
    Background tasks of firing timers are now split into 1 critical section
    per item instead of on lock per task.
    sqliterepo: Get rid of periodic DB_USE
    
    Also simplifies the management of timers
    sql*: Finer alerting upon long locks
    rawx, sqliterepo: replace strncpy by g_strlcpy
    sqliterepo/election.c: Add a missing log around a transition
    
    And mitigate a possible infinite recursion.
    sqliterepo/election: Shorten the critical sections (main lock)
    
    iThe election can be computed out of the lock.
    sqliterepo/election: Remove obsolete code
    
    Synchronuous completions are considered harmful, they slow the ZK
    background thread down.
    sqliterepo/election: Fix a transition
    sqliterepo/election: Fix a memory leak
    
    Thanks to @fvennetier, that is always watching!
    sqliterepo/election: Avoid looping on GETVERS
    sqliterepo/election: React to an unknown MASTER
    
    Weird case managed or the sake of robustness
    sqliterepo/election: Simplify the delay between GETVERS attempts
    
    The mechanism must be reviewed, for sub-second reactivity.
    sqliterepo/election: Introduce deferred GETVERS reloads
    
    After failures in CHECKING_{SLAVES,MASTER}
    sqliterepo/election: Introduce a delay between GETVERS retries
    
    (cherry picked from commit e1cd5b748883f625b44ec506b541cee00de47c90)
    election: Defer the peers resolution out the critical section
    sqliterepo: Evoid calling election_get_status when DB not replicated
    sqliterepo: Refine the conditions to autocreate a missing DB
    
    Also make configurable the auto-recovery of missing DB
    sqliterepo/election: Trace local GETVERS failures
    Fix 32 bits build, for example armhf
    
    [ 50%] Building C object sqliterepo/CMakeFiles/sqliterepo.dir/election.c.o
    cd /build/openio-sds-4.1.13/obj-arm-linux-gnueabihf/sqliterepo && /usr/bin/arm-linux-gnueabihf-gcc  -DG_LOG_DOMAIN=\"oio.sqlite\" -DHAVE_ACCEPT4 -DHAVE_SOCKET3 -DHAVE_SOCKLEN_T -DOIOSDS_PROJECT_VERSION=\"master/4.1\" -DTHREADED -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE -D_LARGEFILE64_SOURCE -D_LARGEFILE_SOURCE -D_LARGE_FILES -D_REENTRANT -Dsqliterepo_EXPORTS -I/build/openio-sds-4.1.13/obj-arm-linux-gnueabihf/sqliterepo -I/build/openio-sds-4.1.13/obj-arm-linux-gnueabihf/metautils/lib -I/build/openio-sds-4.1.13/obj-arm-linux-gnueabihf/metautils/asn1c -I/build/openio-sds-4.1.13/obj-arm-linux-gnueabihf -I/build/openio-sds-4.1.13 -I/build/openio-sds-4.1.13/sqliterepo -I/usr/include/glib-2.0 -I/usr/lib/arm-linux-gnueabihf/glib-2.0/include -I/usr/include/zookeeper  -g -fPIC -pipe -Wall -Wextra -std=gnu99 -Wno-missing-field-initializers -Wunused -Wno-variadic-macros -Wsequence-point -Wredundant-decls -Wshadow -Wcomment -Wmain -Wparentheses -Wfloat-equal -Wunsafe-loop-optimizations -Wunused-but-set-parameter -Wunused-but-set-variable -Wmissing-prototypes -Werror -O2 -fPIC   -o CMakeFiles/sqliterepo.dir/election.c.o   -c /build/openio-sds-4.1.13/sqliterepo/election.c
    /build/openio-sds-4.1.13/sqliterepo/election.c: In function 'member_log_event':
    /build/openio-sds-4.1.13/sqliterepo/election.c:975:69: error: left shift count >= width of type [-Werror=shift-count-overflow]
      plog->time = (oio_ext_real_time() / G_TIME_SPAN_MILLISECOND) % (1L << 48);
                                                                         ^
    /build/openio-sds-4.1.13/sqliterepo/election.c:975:63: error: division by zero [-Werror=div-by-zero]
      plog->time = (oio_ext_real_time() / G_TIME_SPAN_MILLISECOND) % (1L << 48);
    
    Fixes: b17504724c68bc49a1379ddce1ae085cacb4d2fb
    election: Remove an unwanted assertion
    election: Enlarge the journal size (16 -> 32)
    election: Avoid losing return code of a CREATE
    election: Refactor (slightly) a code statement
    election: Ensure a journal mark when an election change
    election: Make expirations mark the journal
    election: Add missing braces
    sqliterepo: add missing call to member_unref()
    sqliterepo: add timestamps in election debug logs
    
    These timestamps are milliseconds from Unix epoch.
    
    ```
                "log": [
                    "1517326850602:CHECKING_MASTER:GETVERS_OK:SLAVE",
                    "1517326850597:ASKING:MASTER_OK:CHECKING_MASTER",
                    "1517326850596:LISTING:LIST_OK:ASKING",
                    "1517326850595:WATCHING:EXISTS_OK:LISTING",
                    "1517326850589:CREATING:CREATE_OK:WATCHING",
                    "1517326850556:NONE:NONE:CREATING"
                ],
    ```
    Adapt sqliterepo to manage deadlines (cache, elections)
    sqliterepo/election: Fix a cosmetic format error
    sqliterepo/election: Introduce a delay between GETVERS retries
    sqliterepo: handle zk timeout during LISTING state
    
    If `sv` parameter is NULL, we handle it the same way as when it is empty
    array: we go to the LEAVING_FAILING state.
    sqliterepo: fix crash when unpausing process
    
    (cherry picked from commit fef82ca11af2f74fd7edcb88430f628df5e93336)
    sqlx,meta*: Split the main background task of re-kicking elections
    
    Several tasks with each one:
    * its lock on the election set
    * its trigger period
    * its threashold delay to warn for a long lock
    
    -> Now we should know when the lock is held for too long, and also
    split the critical section to remain fair with the other threads.
    sqliterepo: fix crash when unpausing process
    sqliterepo: lock election manager only when appropriate
    sqliterepo: automatically restore missing databases
    
    When receiving a request, if we have no local base but we detect we are
    actually part of an election, request a PIPEFROM from the supposed
    master.
    sqliterepo: cache peers in election instead of resolver
    
    * cache election peers in election member structure
    * disable service resolver cache
    * document some proxy routes
    * fix "admin/copy" proxy route
    sqliterepo/election: Fix the JSON format of an election dump
    sqliterepo/election: Comment a decision
    
    Not so obvious at a glance
    sqliterepo/election: Fix a possible loop
    
    An interruption flag hasn't been reset after being managed.
    metautils: Factorize the logging of g_thread_pool_push() errors
    
    * Throttling (max 1 log / process / minute)
    * Factorized in metatuils
    sqliterepo: Fix management of the errors of g_thread_pool_push()
     CLI: Add commands to debug elections
    Sqliterepo: add check of 'when_unstable' for every state
    Sqliterepo: Fix election SLAVE state
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo: Inhibit the test on stalled election
    
    Can be triggered back using 'sqliterepo.election.nowait.enable'
    (managed configuration), fallse by default until we discover where the
    transient timer (`when_unstable` is not reset as expected).
    sqliterepo: Fix a typo
    sqliterepo: Shard the elections on several ZK
    sqliterepo/election: Stop shunt'ing the global reset on hard-disconnects
    
    If we expect several sqlx_sync_s* structures to be used, when a hard
    disconnection occurs it concerns only one ZK cluster, and it is an error
    to decide the expiration of ALL the elections (as we did to be more
    efficient).
    sqliterepo/election: PRepare to manage several sqlx_sync instances
    
    Instead of having a single sqlx_sync_s* for the election manager, let's
    link each election to its sqlx_sync_s*, so that it will be easy to fix
    once the assignation of the sqlx_sync_s* when initiating the election.
    sqliterepo/election: Ensure the `when_unstable` marker is reset
    sqliterepo: Remove the 'ABNORMAL 04/LEFT_SELF'
    
    Abusive and annoying
    sqliterepo: Ensure there is a consistant output when locating the peers
    
    Either the error or the peers should be set, but never none nor both!
    Also, returning "no peer but no error" de facto become an empty array
    and never a NULL array anymore.
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    sqliterepo: fix case of crash at shutdown
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 3e12733b1ef6b247af2187db7d044c709501d0d6)
    sqliterepo: Prevent a potential deadlock while exiting
    
    During the cleanup routine of an election manager, the lock is acquired
    to prevent the elections to be modified. But at that time, the elections
    have left and the worker threads exited. The lock is not mandatory.
    
    Unfortunately, the queue of pending notifications is maybe not empty,
    and the notification hook still may want to acquire the lock. so let's
    just ignore that critical section.
    
    (cherry picked from commit 2b2929f7d74eb4820baeb14f7858e9a919f6c530)
    sqliterepo: cosmetic changes
    
    (cherry picked from commit a5fba8a41ab85bc7d786d05092ef44199ea98a3b)
    sqliterepo: fix case of crash at shutdown
    Avoid allocating memory for small strings with a bounded size
    
    Rather use character arrays located on the stack or inlined into their
    owner structures.
    sqliterepo/election: Avoid reserved threads in pools
    Fix compilation issues with GCC 7
    sqliterepo: Prevent a potential deadlock while exiting
    
    During the cleanup routine of an election manager, the lock is acquired
    to prevent the elections to be modified. But at that time, the elections
    have left and the worker threads exited. The lock is not mandatory.
    
    Unfortunately, the queue of pending notifications is maybe not empty,
    and the notification hook still may want to acquire the lock. so let's
    just ignore that critical section.
    Adapt the code to the central config
    sqliterepo: cosmetic changes
    sqliterepo: cosmetic changes
    sqliterepo/election: Fix printf formats for delays
    sqliterepo: Fix an non-intuitive macro name and typo in its comment
    sqliterepo: Move strings handlings onto the stack
    sqliterepo/election: Reduce the number of calls to realloc()
    sqliterepo: Stackify strings handlings
    sqliterepo: Reduce the number of calls to realloc() and strlen()
    sqliterepo/election: Fix merge errors
    sqliterepo: remove a syscall while managing election timers
    sqliterepo/election: balance the number of MASTER between peers
    sqliterepo/election: Turn into macros several short+void functions
    sqliterepo/election: less malloc/free, more stack strings
    sqliterepo/election: fixes merge ugly forgotten quirks
    sqliterepo/election: fixed segfault on SESSIONEXPIRED events
    
    No path is available, but we don't need any, in fact. We need to expire
    all the elections, whatever their state.
    sqliterepo/election: also allows synchronous completions hook
    
    Disabled by default
    For testing purposes
    sqliterepo/election: async management of the ZK completions callbacks
    
    Thanks to a GThreadPool
    sqliterepo/election: embedded timers around ZK hooks
    
    * The watchers completion hooks now rely on the path to locate the
      concerned member.
    * All the ZK hooks have been prepared for a further deferred execution
      in a GThreadPool.
    * Before deferring to a GThreadPool, warnings are now printed when a
      single hook lasts too long.
    sqliterepo/election: lower verbosity when a Rogue deletion completes
    sqliterepo: review service shutdown sequence
    sqliterepo/election: saved 1 pointer per election structure
    sqliterepo/election: saved 24 bytes per member structure
    
    * 8B saved while changing ID from gint64 to gint32 (enough according to
      the ZK spec at https://zookeeper.apache.org/doc/r3.4.8/zookeeperProgrammers.html#Sequence+Nodes+--+Unique+Naming
    * (1B * EVENTLOG_SIZE) saved with a packed log structure
    sqliterepo/election: saves 9 bytes permember structure
    sqliterepo/election: fixed unused variable
    sqliterepo/election: 3 tries of GETVERS on network errors
    sqliterepo/election: well detects the "pending for too long" cases
    sqliterepo: reviews the FSM transition from FAILED
    
    * Now only expires when in NONE
    * Adds assertions when entering to CREATING
    * `FAILED -> NONE` when no restart requested
    * `FAILED -> CREATING` when restart requested
    sqliterepo/election: FSM STEP_FAILED state is not "final"
    sqliterepo/election: fixes some forgotten variables resets
    sqliterepo/election: manages an empty listing result
    sqliterepo/election: no ping when in FAILED state
    sqliterepo/election: better jitter computation around pings (DB_USE)
    
    Computed once, to decide when the next gratuitous ping is to be sent.
    sqliterepo/election: s/ it's/ its/
    sqliterepo/election: warns for each election disconnected
    sqliterepo/eletion: removes useless UNUSED attributes
    sqliterepo: lower verbosity on Rogue deletions successes
    sqliterepo: better error code detection
    sqliterepo/election: pre-SLAVE only check the possible MASTER
    
    This change suppresses `(N-1) * (N-2)` GETVERS messages per election in
    a group of `N` members.
    sqliterepo/election: cleaner trasitions the FSM
    
    The goal of the commit is to prevent entering a state with several
    pending callbacks that can trouble the transitions and cause messages
    storms.
    
    Only the completion events make the FSM (finite state machine) step
    forward. All the "interruptions" events are delayed until the normal
    actions are all done.
    
    Summary of the changes:
    
    * general renaming of the states to more intuitive names that denote the
      action that is pending. LEADER -> MASTER, LOST -> SLAVE.
    * new states added, so that at most one action is pending in each state.
      specially PRELOST that becomes [ASKING,CHECKING_MASTER] and CANDOK
      that becomes [WATCHING,LISTING].
    * new state added to leave-and-then-fail, instead of leaving then
      retrying.
    * Tests, tests, test. Despite the FSM is not 100% covered yet, the major
      transitions are now checked.
    * Timers simplified: since we wait for actionns before leaving an FSM
      state,.the necessity to retry an election is vastly simplified and
      only occurs from the NONE state.
    * A jitter has been introduced before sending a ping (USE) from a final
      state.
    
    Despite the result should be more stable, robust and resilient, this is
    a big set of changes and one shoould take care of possible unexpected
    effects. Especially of elections that could go more often than necessary
    in the FAILED state, and then undergo a 5s timer before the retry.
    (Prior to this commit, we would have loop-retry more often than
    necessary.)
    sqliterepo/election: fix a segfault (CREATE_KO)
    sqliterepo: improve messages when exiting elections
    sqliterepo: review election FSM transitions after timeout
    sqliterepo/election: intercepts ZK disconnects
    
    aborts elections after the ZK disconnects.
    sqliterepo: warn on failed PIPEFROM
    sqliterepo/election: Add a missing transition on GETVERS network error
    sqliterepo/election: avoids abusive USE to be sent
    sqliterepo: removes a useless no-op/ping transition
    sqliterepo: fix election expiration
    
    Now the master expires AFTER the slaves. When it expires before, it
    triggers a new election on the slaves and they bring him back. With this
    change this case can still happen in case of read-only activity but it's
    not a problem.
    sqliterepo: delay the return to the CANDOK state
    
    Avoid flooding the client queue with GETVERS if other GETVERS requests
    are still pending.
    sqliterepo/election: more precise debug of election status
    sqliterepo: reset error counter while resending GETVERS
    sqliterepo: remove an unused field in elections structures
    core: code factorisation (integer format check)
    sqliterepo: delete invalid election nodes from zookeeper
    
    We don't know the source of these orphan nodes, but you can test their
    proper deletion with oio-election-smudge.py on a fresh namespace:
    - openio container create X
    - oio-election-smudge.py NS meta2 `openio reference list FVE -f value -c
    Host | head -n 1` &
    - curl -XPOST
    "http://localhost:6000/v3.0/NS/admin/leave?ref=X&type=meta2&acct=myaccount"
    - openio object create X /etc/magic
    
    In the logs you should see lines talking about "Rogue ZK node".
    sqliterepo: prevents an election storm upon invalid ZK content
    sqliterepo/elections: Avoids starvation on elections
    
    Drops the model with a fixed number of GCond o which the elections are
    sharded. Instead, we have as many GCond as the number of already
    encountered elections. In other words, we trade a possible starvation
    for a possible memory leak.
    proxy: properties management unified
    
    ... when creating entities, setting properties, getting them.
    ... whatever the entity (user, container, content) the format is the
    same at the proxy level and at the backend service level.
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    proxy: prefer MASTER for writing, SLAVE for reading
    proxy,resolver: expresses delays in monotonic time precision
    
    One step further in the uniformisation of the TTL and Delays management
    that previously mixed gdouble (seconds), time_t (second) and gint64
    (monotonic clock).
    
    The monotonic clock is the law!
    sqliterepo: fix PIPEFROM reqid
    sqlx: now warns on special error-prone conditions.
    sqlx: Fixes status printing
    sqlx: fixes on the DEQUE management
    sqlx: replaces magic numbers by macros for timeouts
    
    + longer timeout for replication and synchronisation requests.
    sqlx: limits the number of timers fired at each step
    
    + fields renamed to match the expectations for a DEQUE
    sqlx: elections now stored in "per-status" lists
    
    Helps managing properly long lists of items with timers set.
    core: proper sockopt set
    
    * SO_REUSEADDR
    * SO_REUSEPORT (if available)
    * SO_LINGER (toward proxy)
    * TCP_NODELAY (toward proxy)
    
    + minor refactoring
    Protects some calls to g_strv_length()
    Builds on x86_32
    sqliterepo: clean election tree at stop
    sqliterepo/election: memleak chased
    sqliterepo: discard ZK callbacks when exiting
    Useless/Unused functions removed
    sqliterepo/election: peers not checked when exiting
    
    Allows bases destructions
    sqliterepo: fix lack of decache upon a GETVERS error
    
    Avoids recreate deleted bases.
    sqliterepo: interface reduction
    
    Attempt to simplify the code before re-organizing it into pseudo-objects suitable for tests.
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    Hook'able clock function now used everywhere
    Dropped the dependency to the Linux's specific clock functions.
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Replaced some deprecated symbols from GLib (g_cond_timed_wait)
    Fixed formatting weaknesses.
    
    Sometimes, the use of variadic logging functions/macros used generated strings as formats.
    Those could lead to potential segfaults if the format contained unmatched parameters.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Message handling functions refatored
    
    * Useless / unused functions removed.
    * Signatures more intuitive.
    * code factorized.
    Slab allocation for small structures + ASN.1 message simplification
    Slab allocation for small structures + ASN.1 message simplification
    Fixed memory leaks.
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    sqliterepo: fix TO-HONEYCOMB-773 (stale election handling)
    
    Prevent sending another SQLX_GETVERS request before 30s elapsed.
    
    Change-Id: I93b19fdf3955c052edf98a059af973c4f30581f7
    (cherry picked from commit c4c032d99f5e125d50c1ba786f1da35e73bcf874)
    sqliterepo: add forced meta1 decache in SQLX_RESYNC.
    
    and fix small bugs.
    
    Change-Id: I905f8dcb61c00b1e60c0e0b459bd27a4e0172cdf
    sqliterepo,sqlx,m2v2: fix election problems after move.
    
    Allow get_peers to bypass meta1 cache in sqlx and meta2v2.
    Add SQLX_EXITELECTION request in sqlx-based services.
    
    Change-Id: Ife2760bc869376c3b793950fca2fa703ca23bec9
    Fixed problems of nodes registred several times.
    
    symptoms : redirect on itself, election with more nodes than active services.
    
    This comes from to many calls to member_reset().
    It is necessary to check for the current local ID before retrying.
    If the local ID is set, we must explicitely leave before retrying.
    
    Change-Id: I96d2e8539be033cdfe7c48e593da9188f512e05f
    Patched election mechanism (FVE)
    
    Elections stalled in PRELOST state.
    
    Change-Id: I24cdf49c213ada372b76e19b1f0bd586276fa024
    2014-06-19 update from the promoter's version.
    
      * cleanup (paths, includes, macros)
      * m2v1: fix warnings
      * conscience: fix (warn on custom NONE stgpol)
      * sqliterepo: add check of redirection target (in debug mode)
      * m2v2: add retry loop for self redirections
      * c client: replaced some g_print by GRID_INFO to allow quiet mode
      * c client: add message on container destroy success
      * sqliterepo: leave election if no peers found in defer_USE
      * client/c: if m2 is replicated, make client retry
      * m2v2: handle error on exit_election
      * conscience: add check on VNS chunk_size
      * sqliterepo: fix leak
      * m2v2, c client: implement TO-HONEYCOMB-713 (chunk_size per VNS)
      * m2v2: fix TO-HONEYCOMB-715 (error after destroying not empty container)
      * sqliterepo, m2v2: improve debug traces
      * metautils: new function to compute printable thread id
      * c client: fix typo in get_virtual_namespace
      * sqliterepo: call malloc_trim after expiring bases
      * c client: fixed physical/virtual namespace confusions
      * rawx-lib: improved recovery of truncated chunks
      * rawx-lib: new options for gs_uncompress (log4c and keep_pending)
      * gridd: Fixed typo
      * gridd: timeout for idle connection is now configurable, and even disableable.
      * client : feature to change the VNS of an established client
      * replicator : VNS are now partially managed (only containers and contents) container_events are not yet supported.
      * metautils : CID computation more robust
      * meta2 / module : events when SLAVE ns + container's VNS in events instead of service's NS.
      * meta2 / lib : backend feature to get the VNS of a container
      * rawx-lib : fixed attr checks
      * cluster/dummy_service : annoying output level-lowered
      * gridd: annoying trace level-lowered
      * metautils: fix copy of chunk.metadata when its length is 0.(cherry picked from commit f5011e6d305b974319062084eac52f950a2d0270)
      * meta2: fixed TO-HONEYCOMB-678 (append on dup chunks)
      * saver: fixed TO-HONEYCOMB-677 (tsmx service not unlinked)
      * saver: now able to manage content delete events (to be tested)
      * saver: now able to make difference between PUT events and the other
      * Fixed relative #include path, that path doesn't allow a graceful split between the OSS/Proprietary parts.
      * m2v2: remove call to sleep in purge
    1.8.4 release candidate
    Initial commit
    sqliterepo: Force slab allocations
    sqliterepo/client_pool: Add an explicit notify, reduce complexity
    
    Expects this change to reduce by ~2 the number of write() on the eventfd,
    then causing less context switches and system CPU usage.
    
    Also get rid of the non-necessary/unused pseudo-object around the gridd
    client pool.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    conf: Move the FD limits in the central config
    Adapt the code to the central config
    sqliterepo: bounds to 4s the time spent in queud by sync requests
    sqliterepo: fixes potential memleak while syncing
    
    sqliterepo leaked GError structures that happened while deferring the
    peering requests (connect, request). Upon an error, the GError was not
    freed and the global RPC was started.
    
    Now the GError is freed and the application is notified immediately of
    an error.
    sqliterepo/election: memleak chased
    Get rid of an old rename trick born in redcurrant.
    OpenIO is lifting off now !
    1.8.4 release candidate
    sqliterepo: Remove unused code
    sqliterepo: Return 404 when the container created but not initiated
    sqliterepo: Notify the changes of database properties
    sqliterepo: increase DB_PIPEFROM maximum timeout
    
    And allow to configure DB_DUMP chunk size.
    
    (cherry picked from commit cdcde7cec441a4e386825a62d68188afdcbfb43a)
    sqliterepo: increase DB_PIPEFROM maximum timeout
    
    And allow to configure DB_DUMP chunk size.
    sqliterepo: Keep pointer on election to avoid lookups
    
    This leads to smaller structures (the pointer is smaller than the name
    components) and less CPU, and requires recounts to be well handled.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo: Fix compilation warnings in Release builds
    sqliterepo: Shard the elections on several ZK
    sqliterepo: Drop the feature of the global autocreation flag for DB
    conf: Move the FD limits in the central config
    Avoid allocating memory for small strings with a bounded size
    
    Rather use character arrays located on the stack or inlined into their
    owner structures.
    Adapt the code to the central config
    sqliterepo/cache: max number of bases in cache changed from 8k to 32K
    sqliterepo/election: by default, no expiration when in final state
    sqliterepo/election: 3 tries of GETVERS on network errors
    sqliterepo/election: enbugs the RPC to the zookeeper
    sqliterepo: reviews the FSM transition from FAILED
    
    * Now only expires when in NONE
    * Adds assertions when entering to CREATING
    * `FAILED -> NONE` when no restart requested
    * `FAILED -> CREATING` when restart requested
    sqliterepo/election: no ping when in FAILED state
    sqliterepo/election: cleaner trasitions the FSM
    
    The goal of the commit is to prevent entering a state with several
    pending callbacks that can trouble the transitions and cause messages
    storms.
    
    Only the completion events make the FSM (finite state machine) step
    forward. All the "interruptions" events are delayed until the normal
    actions are all done.
    
    Summary of the changes:
    
    * general renaming of the states to more intuitive names that denote the
      action that is pending. LEADER -> MASTER, LOST -> SLAVE.
    * new states added, so that at most one action is pending in each state.
      specially PRELOST that becomes [ASKING,CHECKING_MASTER] and CANDOK
      that becomes [WATCHING,LISTING].
    * new state added to leave-and-then-fail, instead of leaving then
      retrying.
    * Tests, tests, test. Despite the FSM is not 100% covered yet, the major
      transitions are now checked.
    * Timers simplified: since we wait for actionns before leaving an FSM
      state,.the necessity to retry an election is vastly simplified and
      only occurs from the NONE state.
    * A jitter has been introduced before sending a ping (USE) from a final
      state.
    
    Despite the result should be more stable, robust and resilient, this is
    a big set of changes and one shoould take care of possible unexpected
    effects. Especially of elections that could go more often than necessary
    in the FAILED state, and then undergo a 5s timer before the retry.
    (Prior to this commit, we would have loop-retry more often than
    necessary.)
    sqliterepo: allow overriding election delays
    sqliterepo/cache: prevents threads starvation
    
    Get rid of the old model with a fixed-number of GCond used to bucketize
    all the DB accesses.
    
    Now one couple of GCond (normal, prio) is associated to each cache item,
    and this is better since the lifetime of each item is the whole
    execution.
    
    In addition, the notion of maximum bases used has been reviewed to allow
    slight changes on the effective maximum. Now we propose one "hard"
    maximum used to allocate structures at init time, and one "soft" maximum
    that can be freely changed between (0,hard].
    rawx,sqlx*: new options to preallocate chunks and databases
    
    - rawx: new "grid_fallocate" option (enabled by default), to tell
      the server to preallocate the space for the chunk, and
      possibly fail at the beginnig of the upload if there is not enough
    - m0,m1,m2,sqlx: new "PageSize" commandline option to change the
      sqlite database page_size (defaults to 4096 bytes)
    sqlx: better default intervals for DB_USE
    sqlx: replaces magic numbers by macros for timeouts
    
    + longer timeout for replication and synchronisation requests.
    sqlx: elections now stored in "per-status" lists
    
    Helps managing properly long lists of items with timers set.
    sqliterepo/election: memleak chased
    sqlx: now able to prepare "turnkey" sqlite DB, pre-schemed.
    
    * option added to oio-sqlx-server to mention a directory full of schemas.
      the filename is the schema name, and its content the set of SQL statements to create a DB.
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    sqliterepo: reduced amount of I/O upon open/create
    
    Only one sqlite transaction is now used when opening a base, even if creating it.
    The whole schema setup is sent during this only transaction.
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    Dropped the dependency to the Linux's specific clock functions.
    sqlx client evolution
    OpenIO is lifting off now !
    sqliterepo: increase replication timeout, fix warning
    
    See https://jira.itsm.atosworldline.com/jira/browse/TO-HONEYCOMB-771
    
    Change-Id: Iab0e406c297215ad4d02c53962b938602dd8aaf3
    sqliterepo: change default page_size to 4096
    
    Default page size of 1024 produces a lot of fragmentation.
    Increasing it to 4096 slightly reduces it without making databases
    a lot bigger. Increasing it to 32768 has bigger effect on
    fragmentation, but databases become bigger (at least 600k for
    an empty meta2 database).
    
    Change-Id: I6d157958737a260409698f072158fa3ec5592dec
    sqliterepo: fix TO-HONEYCOMB-586 (big sqliterepo bases)
    
    Base transfers are now chunked (8MiB) by default.
    Monolitic transfers are still supported.
    
    Some return codes have been replaced by constants.
    
    Change-Id: Iecc45841bdd333f5d45bd101c68255c8c14d9111
    1.8.4 release candidate
    Initial commit
    sqliterepo: Remove unused code
    sqliterepo: Updat a copyright mention
    sqliterepo: Configure the sqlite cache size of a DB
    server: get server-side performance data
    
    Save some performance data in the thread local data. This is disabled by
    default, can be enabled for each service (even when the service is running)
    or per request.
    Performance data is printed at the end of access log messages.
    sqliterepo: Accelerate database check
    
    The check is as before except that it does not verify UNIQUE constraints
    and does not verify that index content matches table content.
    By skipping UNIQUE and index consistency checks,
    this check is able to run much faster than before.
    Otherwise the two checks are the same.
    (https://www.sqlite.org/pragma.html#pragma_quick_check)
    sqliterepo: Check the size before the integrity when dumping database
    
    In the event that the database was too large,
    we would spend several seconds checking the integrity
    and finally doing nothing.
    sqliterepo: fix the snapshot feature
    sqliterepo: Send event for each deleted meta2 database
    sqliterepo: Return 404 when the container created but not initiated
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    proxy: Send 503 when the service types are not yet loaded
    sqliterepo: Fix the synchronous mode
    
    OFF by default, anyone uses replicated DB that can cope with less fsync
    sqliterepo: Save calls to the peers-reference with proper caching
    sqliterepo: Stop trashing bases from the cache.
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    sqliterepo: Notify the changes of database properties
    sqliterepo: create the database on internal GETVERS requests
    
    External DB_VERS requests used to create the database, but internal ones
    did not. This resulted in a meta2 service never being elected master
    during M2_CREATE requests.
    
    Jira: OS-411
    Python API, sqliterepo: replicate container snapshots
    
    To avoid deadlocks at creation time, we used to keep a single copy
    of container snapshots. Now that the replication mechanism is more
    reliable, we can replicate them.
    sqliterepo: No dump if database is corrupt
    sqliterepo: Make configurable the DB dump concurrency
    
    Timeout, number of dumps
    sqliterepo: Avoid too many concurrent DB dumps
    sqliterepo: Advise the OS of a sequential read()
    sqliterepo: directly dump database file, do not load more than 1GiB
    
    Before this commit, a local copy of the database file was created, and
    the data was sent to the network from the copy. Now, the data is read
    directly from the database file.
    
    This commit also sets a maximum on the size of database dumps, in order
    to avoid memory exhaustions. This maximum is 1GiB by default, but can be
    set to 0 to completely disable the DB_RESTORE mechanism, or set up to
    2047MiB, with the parameter "sqliterepo.dump.max_size".
    sqliterepo: increase DB_PIPEFROM maximum timeout
    
    And allow to configure DB_DUMP chunk size.
    
    (cherry picked from commit cdcde7cec441a4e386825a62d68188afdcbfb43a)
    sqliterepo: Clean stale attemps of dump AND restore
    sqliterepo: Clean stale DB dumps
    
    Only at the startup when we own the lock on the base directory.
    sqliterepo: Fix a possible file & descriptor leak
    
    When a dump fails in the repository and there is a retry in /tmp, the FD
    of the attempt file in the reposiroty is not closed, thus keeping the
    file present on the filesystem until the process is stopped.
    sqliterepo: Minor refactoring
    sqliterepo: Remove an unused function
    sqliterepo: increase DB_PIPEFROM maximum timeout
    
    And allow to configure DB_DUMP chunk size.
    sqliterepo: Print clearer warnings upon double master
    sqliterepo: Check possible double MASTER on DB_USE
    sqliterepo: declare internal get_peers requests as "urgent"
    meta2: Unlock base when removing cache
    sqliterepo: Force slab allocations
    sqliterepo: Add a TODO for a further improvement
    sqliterepo: Remove base from the cache
    proxy: remove dead code
    meta2: support use of ServiceId
    
    meta-server now support ServiceId option on command line
    (but it should be used only by meta2)
    sqliterepo: Make a thread-safe lazy DB creation
    
    Prior to this fix, a small window existed where DB could be created and
    be seen as READONLY from another thread.
    sqliterepo/repository: Autocreate DB upon opening
    
    When configured and allowed, prior to the election establishment.
    sqliterepo/repository: Slightly simplify a statement
    
    Minor cosmetic change
    sqliterepo: prevent deadlock during database deletion
    sqliterepo: Evoid calling election_get_status when DB not replicated
    sqliterepo: Refine the conditions to autocreate a missing DB
    
    Also make configurable the auto-recovery of missing DB
    sqliterepo: Create the DB when it doesn't exist
    sqliterepo: Force an election leave before recreating
    
    Ensure we are not MASTER, to avoid resync'ing an empty DB.
    sqliterepo: Ensure a DB exists before kicking the election FSM off
    sqliterepo: Probe the basedir for I/O errors
    sqliterepo: Sort the peers in the DB, for uniformity's sake
    Adapt sqliterepo to manage deadlines (cache, elections)
    sqliterepo: new error code 511 for corrupted databases
    sqliterepo: rename corrupted databases
    
    When a corruption is detected, the database is flagged as such.
    During closure, the database file is renamed with extension ".corrupted".
    A fresh database will be downloaded from a peer on the next request.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo: Drop the feature of the global autocreation flag for DB
    sqliterepo: Ensure there is a consistant output when locating the peers
    
    Either the error or the peers should be set, but never none nor both!
    Also, returning "no peer but no error" de facto become an empty array
    and never a NULL array anymore.
    sqliterepo: Release earlier the DB handle when locating the peers
    conf: Move the FD limits in the central config
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 3e12733b1ef6b247af2187db7d044c709501d0d6)
    sqliterepo: Reduce the amount of IO ops with a smarter cache
    
    Better management of modified/deleted entries in the cache of the
    `admin` table.
    Avoid allocating memory for small strings with a bounded size
    
    Rather use character arrays located on the stack or inlined into their
    owner structures.
    sqliterepo: Use an explicit code for failed elections
    Fix compilation issues with GCC 7
    sqliterepo: Reduce the amount of IO ops with a smarter cache
    
    Better management of modified/deleted entries in the cache of the
    `admin` table.
    Adapt the code to the central config
    sqliterepo: store replication peers in the database
    sqliterepo: store replication peers in the database
    sqliterepo: Reduce the number of calls to realloc() and strlen()
    sqliterepo/cache: prevents threads starvation
    
    Get rid of the old model with a fixed-number of GCond used to bucketize
    all the DB accesses.
    
    Now one couple of GCond (normal, prio) is associated to each cache item,
    and this is better since the lifetime of each item is the whole
    execution.
    
    In addition, the notion of maximum bases used has been reviewed to allow
    slight changes on the effective maximum. Now we propose one "hard"
    maximum used to allocate structures at init time, and one "soft" maximum
    that can be freely changed between (0,hard].
    sqliterepo: give priority to DB_GETVERS and DB_REPLI
    m0,m1,m2,sqlx: reduce the number of logs at startup
    
    Closes #538
    rawx,sqlx*: new options to preallocate chunks and databases
    
    - rawx: new "grid_fallocate" option (enabled by default), to tell
      the server to preallocate the space for the chunk, and
      possibly fail at the beginnig of the upload if there is not enough
    - m0,m1,m2,sqlx: new "PageSize" commandline option to change the
      sqlite database page_size (defaults to 4096 bytes)
    m0,m1,m2,sqlx: do not enforce fsync when replication is enabled
    sqlx: fixed db handle init when used in post_config
    
    In meta0, a base was opened *before* the all the iserver's structures were
    ready and bond together. That base was initiated with no known election manager,
    then returned in the cache, and reused later as is. But for replication to take
    place, such an information is mandatory (thus checked with an assert()).
    proxy: completes containers DESTROY
    
    * FREEZE is rolled back upon error
    * FLUSH asked only if wanted by the client, or ISEMPTY asked if no flush.
    * DESTROY patched: only 1 event is asked, to the first service replied
    sqliterepo/election: memleak chased
    sqliterepo: fix error format
    sqliterepo: new corner case for sqlx.* services when choosing a schema
    
    Cf. the XXX message in the code for more information.
    This is necessary to manage pre-schemed sqlx.* bases.
    sqliterepo: interface reduction
    
    Attempt to simplify the code before re-organizing it into pseudo-objects suitable for tests.
    sqliterepo: open_timeout now expressed in the precision of oio_ext_monotonic_time()
    sqliterepo: dirty admin fleg cleared when admin table reloaded.
    metautils: unused code removed
    sqliterepo: reduced amount of I/O upon open/create
    
    Only one sqlite transaction is now used when opening a base, even if creating it.
    The whole schema setup is sent during this only transaction.
    Fixed compilation on x86_32
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    sqliterepo: speed-up the schema checks
    
    * sqliterepo: the checks of the schema are now performed with lowered security, to avoid useless transaction syncs.
    * sqliterepo: got rid of the useless "version" provided when checking for the schema
    * meta0: removed the useless "vacuum" in the schema.
    * meta0/meta1/sqlx/tests: adapted to the changes previously listed.
    sqliterepo: new hook point to mangle database names, dedicated to testing
    Hook'able clock function now used everywhere
    Dropped the dependency to the Linux's specific clock functions.
    Volume lock factorized (rawx) and moved from the repository to the service.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    meta2: autocreation restored on ~all operations.
    
    * meta2: autocreation was disabled by a preliminary check on the bases existence.
    * sqliterepo: debug function added
    sqliterepo: the DB handle now carries the election status of the base at its opening.
    Fixed formatting weaknesses.
    
    Sometimes, the use of variadic logging functions/macros used generated strings as formats.
    Those could lead to potential segfaults if the format contained unmatched parameters.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Slab allocation for small structures + ASN.1 message simplification
    Slab allocation for small structures + ASN.1 message simplification
    Cleanup, round 6
    
    * path to sqlite bases unified and simplified. It should also plainly manage several containers for the same user.
    * warnings removed.
    * useless comments removed.
    Fixed memory leaks.
    sqliterepo: fixed a missing error check.
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    sqliterepo: change the way we set page_size
    
    Change-Id: If2ba13eadb561c7757a27834ea91766a6de7c9c1
    OpenIO is lifting off now !
    sqliterepo: use local volume for dump/restore (TO-HONEYCOMB-776)
    
    Do not rely on /tmp for dump/restore mechanism. Use <volume>/tmp
    first, and on error fallback to /tmp.
    
    Change-Id: Ibe3751571e6edddd219d96bab2b9f7b585339349
    sqliterepo: change default page_size to 4096
    
    Default page size of 1024 produces a lot of fragmentation.
    Increasing it to 4096 slightly reduces it without making databases
    a lot bigger. Increasing it to 32768 has bigger effect on
    fragmentation, but databases become bigger (at least 600k for
    an empty meta2 database).
    
    Change-Id: I6d157958737a260409698f072158fa3ec5592dec
    sqliterepo: fix TO-HONEYCOMB-586 (big sqliterepo bases)
    
    Base transfers are now chunked (8MiB) by default.
    Monolitic transfers are still supported.
    
    Some return codes have been replaced by constants.
    
    Change-Id: Iecc45841bdd333f5d45bd101c68255c8c14d9111
    sqliterepo,sqlx,m2v2: fix election problems after move.
    
    Allow get_peers to bypass meta1 cache in sqlx and meta2v2.
    Add SQLX_EXITELECTION request in sqlx-based services.
    
    Change-Id: Ife2760bc869376c3b793950fca2fa703ca23bec9
    sqliterepo: new database close flags
    
    Change-Id: I9fc7e6d3bd447dd4f00970cb9395d8dfbe7e391f
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    Merges the promoter's changes.
    
      * client/c: adapt rainx_remote for future use
      * Remove meta2_container_services from installed binaries in honeycomb.spec
      * cluster/lib : Fixed memory when there is no /etc/gridstorage.conf
      * m2v2: minor safety fix for chunk substitution
      * metautils / sockets : Fixed return code check.
    2014-06-19 update from the promoter's version.
    
      * cleanup (paths, includes, macros)
      * m2v1: fix warnings
      * conscience: fix (warn on custom NONE stgpol)
      * sqliterepo: add check of redirection target (in debug mode)
      * m2v2: add retry loop for self redirections
      * c client: replaced some g_print by GRID_INFO to allow quiet mode
      * c client: add message on container destroy success
      * sqliterepo: leave election if no peers found in defer_USE
      * client/c: if m2 is replicated, make client retry
      * m2v2: handle error on exit_election
      * conscience: add check on VNS chunk_size
      * sqliterepo: fix leak
      * m2v2, c client: implement TO-HONEYCOMB-713 (chunk_size per VNS)
      * m2v2: fix TO-HONEYCOMB-715 (error after destroying not empty container)
      * sqliterepo, m2v2: improve debug traces
      * metautils: new function to compute printable thread id
      * c client: fix typo in get_virtual_namespace
      * sqliterepo: call malloc_trim after expiring bases
      * c client: fixed physical/virtual namespace confusions
      * rawx-lib: improved recovery of truncated chunks
      * rawx-lib: new options for gs_uncompress (log4c and keep_pending)
      * gridd: Fixed typo
      * gridd: timeout for idle connection is now configurable, and even disableable.
      * client : feature to change the VNS of an established client
      * replicator : VNS are now partially managed (only containers and contents) container_events are not yet supported.
      * metautils : CID computation more robust
      * meta2 / module : events when SLAVE ns + container's VNS in events instead of service's NS.
      * meta2 / lib : backend feature to get the VNS of a container
      * rawx-lib : fixed attr checks
      * cluster/dummy_service : annoying output level-lowered
      * gridd: annoying trace level-lowered
      * metautils: fix copy of chunk.metadata when its length is 0.(cherry picked from commit f5011e6d305b974319062084eac52f950a2d0270)
      * meta2: fixed TO-HONEYCOMB-678 (append on dup chunks)
      * saver: fixed TO-HONEYCOMB-677 (tsmx service not unlinked)
      * saver: now able to manage content delete events (to be tested)
      * saver: now able to make difference between PUT events and the other
      * Fixed relative #include path, that path doesn't allow a graceful split between the OSS/Proprietary parts.
      * m2v2: remove call to sleep in purge
    1.8.4 release candidate
    Initial commit
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    sqliterepo: Expose the BALM (balance masters) RPC
    sqliterepo/election: Simplification
    sqliterepo/election: Set the retry-on-FAIL at 250ms
    
    ... instead of 2s
    
    The previous precision was at 1s with a huge bias.
    Now we can honor timers with a precision in milliseconds.
    sqliterepo: Close the reposiroty much faster
    
    We do not exit elections
    sqliterepo: Keep pointer on election to avoid lookups
    
    This leads to smaller structures (the pointer is smaller than the name
    components) and less CPU, and requires recounts to be well handled.
    sqliterepo: Get rid of periodic DB_USE
    
    Also simplifies the management of timers
    sql*: Finer alerting upon long locks
    sqliterepo/election: Introduce deferred GETVERS reloads
    
    After failures in CHECKING_{SLAVES,MASTER}
    sqliterepo/election: Introduce a delay between GETVERS retries
    
    (cherry picked from commit e1cd5b748883f625b44ec506b541cee00de47c90)
    election: Defer the peers resolution out the critical section
    sqliterepo: Evoid calling election_get_status when DB not replicated
    sqliterepo: Refine the conditions to autocreate a missing DB
    
    Also make configurable the auto-recovery of missing DB
    Adapt sqliterepo to manage deadlines (cache, elections)
    sqlx,meta*: Split the main background task of re-kicking elections
    
    Several tasks with each one:
    * its lock on the election set
    * its trigger period
    * its threashold delay to warn for a long lock
    
    -> Now we should know when the lock is held for too long, and also
    split the critical section to remain fair with the other threads.
    sqliterepo: lock election manager only when appropriate
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo: Shard the elections on several ZK
    sqliterepo: Ensure there is a consistant output when locating the peers
    
    Either the error or the peers should be set, but never none nor both!
    Also, returning "no peer but no error" de facto become an empty array
    and never a NULL array anymore.
    sqliterepo: fix case of crash at shutdown
    sqliterepo: fix case of crash at shutdown
    Adapt the code to the central config
    sqliterepo/election: Reduce the number of calls to realloc()
    sqliterepo/election: balance the number of MASTER between peers
    sqliterepo/election: cleaner trasitions the FSM
    
    The goal of the commit is to prevent entering a state with several
    pending callbacks that can trouble the transitions and cause messages
    storms.
    
    Only the completion events make the FSM (finite state machine) step
    forward. All the "interruptions" events are delayed until the normal
    actions are all done.
    
    Summary of the changes:
    
    * general renaming of the states to more intuitive names that denote the
      action that is pending. LEADER -> MASTER, LOST -> SLAVE.
    * new states added, so that at most one action is pending in each state.
      specially PRELOST that becomes [ASKING,CHECKING_MASTER] and CANDOK
      that becomes [WATCHING,LISTING].
    * new state added to leave-and-then-fail, instead of leaving then
      retrying.
    * Tests, tests, test. Despite the FSM is not 100% covered yet, the major
      transitions are now checked.
    * Timers simplified: since we wait for actionns before leaving an FSM
      state,.the necessity to retry an election is vastly simplified and
      only occurs from the NONE state.
    * A jitter has been introduced before sending a ping (USE) from a final
      state.
    
    Despite the result should be more stable, robust and resilient, this is
    a big set of changes and one shoould take care of possible unexpected
    effects. Especially of elections that could go more often than necessary
    in the FAILED state, and then undergo a 5s timer before the retry.
    (Prior to this commit, we would have loop-retry more often than
    necessary.)
    sqlx: limits the number of timers fired at each step
    
    + fields renamed to match the expectations for a DEQUE
    sqlx: elections now stored in "per-status" lists
    
    Helps managing properly long lists of items with timers set.
    sqliterepo/election: memleak chased
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    sqliterepo: interface reduction
    
    Attempt to simplify the code before re-organizing it into pseudo-objects suitable for tests.
    Dropped the dependency to the Linux's specific clock functions.
    sqliterepo: the DB handle now carries the election status of the base at its opening.
    OpenIO is lifting off now !
    sqliterepo: add forced meta1 decache in SQLX_RESYNC.
    
    and fix small bugs.
    
    Change-Id: I905f8dcb61c00b1e60c0e0b459bd27a4e0172cdf
    sqliterepo,sqlx,m2v2: fix election problems after move.
    
    Allow get_peers to bypass meta1 cache in sqlx and meta2v2.
    Add SQLX_EXITELECTION request in sqlx-based services.
    
    Change-Id: Ife2760bc869376c3b793950fca2fa703ca23bec9
    1.8.4 release candidate
    Initial commit
    sqliterepo: add possibility to balance master elections
    
    (cherry picked from commit b5633f3b9a44b41bf5f2065db97b4567241998f1)
    sqliterepo: implement database vacuum request
    
    Vacuum (defragment) the database on the master service, then
    resynchronize it on the slaves.
    
    Jira: OS-299
    proxy, sqliterepo: Remove specific base
    Add container snapshot
    
    The snapshot take the form of:
    -A copy of the sqlite base of the target to a meta2 chose by the load balancer.
    -All the chunks of the snapshot are replaced by new chunk that hardlink the target one.
    -The snapshot is frozen afterward.
    
    The chunks hardlink implies that the target and the snapshot chunks are in the same rawx.
    Currently it is the client that freeze and enable the containers during the snapshot.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqlx: shorter replication requests names
    sqlx: shortened requests names
    Various beautifications
    
    agent: unused code removed
    cluster: uniform interface
    cluster: agent bypass
    conscience: func tests OK
    m2v2 + sqlx + proxy : set properties on contents and containers now manage a flush options and deletion by null value.
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo/remote: Remove unused code
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    Adapt the code to the central config
    sqlx: replaces magic numbers by macros for timeouts
    
    + longer timeout for replication and synchronisation requests.
    sqliterepo: fixed base resync
    sqliterepo: fixed mem allocations destined to be freed by libasn1
    
    Sometimes, memory wad glib2-allocated, then libc-freed by libasn1.
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Message handling functions refatored
    
    * Useless / unused functions removed.
    * Signatures more intuitive.
    * code factorized.
    Get rid of an old rename trick born in redcurrant.
    sqliterepo: fix another function using /tmp + segfault
    
    Change-Id: Ic38bb31e01bd17f5619fe7b7a1f588b09cdfac38
    
    Conflicts:
            sqliterepo/replication_dispatcher.c
    OpenIO is lifting off now !
    sqliterepo: fix TO-HONEYCOMB-586 (big sqliterepo bases)
    
    Base transfers are now chunked (8MiB) by default.
    Monolitic transfers are still supported.
    
    Some return codes have been replaced by constants.
    
    Change-Id: Iecc45841bdd333f5d45bd101c68255c8c14d9111
    1.8.4 release candidate
    Initial commit
    sqliterepo: Remove unused code
    Fix compilation warning
    sqliterepo: remove watches before deleting ZK nodes
    
    Removing watches before deleting ZooKeeper nodes prevents this watches
    to trigger callbacks after the election is gone (this happens when
    ZooKeeper is under heavy load).
    
    This modification requires ZooKeeper 3.5. Behavior with older versions
    is unchanged.
    sqliterepo: provide more debugging hints
    
    The debugging JSON object will now show the full path to the ZooKeeper
    node, and the server address.
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    sqliterepo: more request IDs
    sqliterepo: accept slow callbacks of deleted elections
    sqliterepo: reset master elections on ZOO_SESSION_EVENT
    
    A long time ago, we used to reset all elections on such Zookeeper
    event. We stopped doing this when we started to use several
    connections to Zookeeper, because it seemed a bad idea to reset
    everything on a single connection failure.
    Unfortunately, this leads to elections staying forever in the same state
    while their Zookeeper node has vanished.
    
    Now, after getting an unbound (no path is provided) ZOO_SESSION_EVENT,
    we will reset all elections in the master state, to avoid any infamous
    "double master" situations.
    
    (cherry picked from commit 49b99472c38b5dbf0c6b005c0d6c57a7f939d48d)
    sqliterepo: reset master elections on ZOO_SESSION_EVENT
    
    A long time ago, we used to reset all elections on such Zookeeper
    event. We stopped doing this when we started to use several
    connections to Zookeeper, because it seemed a bad idea to reset
    everything on a single connection failure.
    Unfortunately, this leads to elections staying forever in the same state
    while their Zookeeper node has vanished.
    
    Now, after getting an unbound (no path is provided) ZOO_SESSION_EVENT,
    we will reset all elections in the master state, to avoid any infamous
    "double master" situations.
    sqliterepo: Emit a MASTER flag in DB_USE
    sqliterepo: tell which service we could not pipe from
    sqliterepo: Keep pointer on election to avoid lookups
    
    This leads to smaller structures (the pointer is smaller than the name
    components) and less CPU, and requires recounts to be well handled.
    sqliterepo: Force slab allocations
    core, meta2, proxy, tests: rename things
    meta2: support use of ServiceId
    
    meta-server now support ServiceId option on command line
    (but it should be used only by meta2)
    sqlierepo/election: Fix a memory leak
    
    Introduced at commit 0404fa1016b8fdc679970c4f5a1d9e97e4cdf627
    sqliterepo/synchro: Make configurable the deferral of DB_USE
    sqliterepo: Defer syscalls out of  the critical section
    metautils,sqlx,tests: Get rid of the useless gridd_client_factory
    
    That pseudo object was never used!
    sqliterepo/synchro: Avoid running useless testing code branches
    sqliterepo/election: Debug long locks
    
    Also remove old logs around the calls to the ZK client
    sqliterepo/synchro: Dump the duration of the calls to ZK
    sqliterepo/synchro: Remove unwanted calls in Release build mode
    sqliterepo/synchro: fix small memory leak
    
    During election, if connection on peer fails, error message
    is not freed.
    sqliterepo/zk: Prevent accesses to null pointers
    sqliterepo/sync: Don't inherit deadlines for synchro RPC
    Fix a missing deadline management in sqliterepo
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo/sync: Turn static some functions not exported
    sqliterepo: Use CSV-related macros instead of hardcoded strings
    
    Not sure we increase the readability...
    sqliterepo/sync: shuffle the set of ZK endpoints
    
    Also rename the key of the variable for the timeout of the ZK client
    sessions.
    sqliterepo/sync: Remove unused code
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    Use MSG_NOSIGNAL when calling sendto()
    
    (cherry picked from commit cd34669b9fd23e8e80c412f2c5b0d6caf96c9b27)
    Avoid allocating memory for small strings with a bounded size
    
    Rather use character arrays located on the stack or inlined into their
    owner structures.
    Use MSG_NOSIGNAL when calling sendto()
    sqliterepo: lower zookeeper connection failure threshold
    
    The threshold for starting a fresh connection to Zookeeper
    was 5 reconnections in 5s. It is now 5 reconnections in 30s.
    sqliterepo: lower zookeeper connection failure threshold
    
    The threshold for starting a fresh connection to Zookeeper
    was 5 reconnections in 5s. It is now 5 reconnections in 30s.
    conf: Third batch of variables
    
    udp_allowed, log_outgoing, rawx_events
    Adapt the code to the central config
    sqliterepo: detect zookeeper disconnection loops (fix #873)
    
    And do a fresh reconnection in such case.
    sqliterepo: Make shorter timeouts for USE/GETVERS
    
    The global request handling should not take longer than 2s for GETVERS
    and 1s for USE.
    sqliterepo: Shorten the cnx timeout for USE and GETVERS requests
    
    From a default of 2s, use now 0.5s for GETVERS and 0.25s for USE.
    sqliterepo: Stackify strings handlings
    sqliterepo/election: fixed segfault on SESSIONEXPIRED events
    
    No path is available, but we don't need any, in fact. We need to expire
    all the elections, whatever their state.
    sqliterepo/election: enbugs the RPC to the zookeeper
    sqliterepo: fixes a usage of a freed memory
    sqliterepo: qualify unused variable
    sqliterepo/synchro: trace ZK ignored events
    sqliterepo: log outgoing Sync/Perring requests
    sqliterepo: shuffle the ZK cnx string before usage
    sqliterepo: fixes potential memleak while syncing
    
    sqliterepo leaked GError structures that happened while deferring the
    peering requests (connect, request). Upon an error, the GError was not
    freed and the global RPC was started.
    
    Now the GError is freed and the application is notified immediately of
    an error.
    sqliterepo: able to send DB_USE via UDP
    
    Disabled by default
    sqliterepo: improve Zookeeper-related messages
    sqliterepo: fixes memleak upon a DB resync
    
    The strings with the DB name was lost.
    m0,m1,m2,sqlx: reduce the number of logs at startup
    
    Closes #538
    sqliterepo: fixes the mechanism for the reconnection to ZooKeeper.
    
    TODO: huge code factorisation in scope, because sqliterepo/zk_manager.c is
    merely the synchronous version of sqliterepo/synchro.c
    sqlx: replaces magic numbers by macros for timeouts
    
    + longer timeout for replication and synchronisation requests.
    m0: improve messages and connection to zookeeper
    sqliterepo/election: memleak chased
    sqliterepo/synchro: ZK lowered versbosity
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Fixed memory leaks.
    OpenIO is lifting off now !
    Finer gauges for active threads, reliable accesslog delays
    
    This patch provides the maximum number of active threads, and a round-robin storage for that information.
    The granularity proposed is intervals of 1s over the past 30s, and intervals of 1 minute over the past 1 hour.
    This data is used by the core server library to expose statistics, e.g.
    
            server.thread.max.1 = 0
            server.thread.max.5 = 1
            server.thread.max.15 = 2
            server.thread.max.30 = 2
            server.thread.max.60 = 3
            server.thread.max.300 = 3
            server.thread.max.900 = 3
            server.thread.max.3600 = 3
    
    This patch also alters the accesslog format for gridd transports, and it is now unified with http transport.
    An access log record now provides 2 treatment durations:
    - the total time spent since the reception of the last buffer that completes the request
    - the total treatment time, from the moment where a worker thread starts the request handling til the moment an answer is generated.
    The delta between both delays is the time spent in the internals queues of the process.
    
    The patch divides in:
    - server/stats_holder.* :
      - drops the adherence to system time, the current timestamp is now received from the caller. This is necessary to manager counter with a granularity different than 1s.
      - New calls to compute the cumulative maximum
      - code simplification
    - server/network_server.* :
      - new round-robin stats now managed
      - new stats exposed.
      - precise monotonic clock used on the last input
    - server/transport_http.c :
      - useless variables removed.
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - server/transport_gridd.c :
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - sqlx/sqlx_service.c :
      - code adapted to match the lost "time adherence"
    
    Change-Id: I248ae7a1937860e4062290e95b68465d7ec62821
    1.8.4 release candidate
    sqliterepo: Remove unused struct fields
    
    Also touches meta0, meta1, meta2
    sqliterepo: Remove unused code
    sqliterepo: Check the size before the integrity when dumping database
    
    In the event that the database was too large,
    we would spend several seconds checking the integrity
    and finally doing nothing.
    sqliterepo: fix the snapshot feature
    sqliterepo: Send event for each deleted meta2 database
    sqliterepo: Return 404 when the container created but not initiated
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    sqliterepo: Notify the changes of database properties
    sqliterepo: directly dump database file, do not load more than 1GiB
    
    Before this commit, a local copy of the database file was created, and
    the data was sent to the network from the copy. Now, the data is read
    directly from the database file.
    
    This commit also sets a maximum on the size of database dumps, in order
    to avoid memory exhaustions. This maximum is 1GiB by default, but can be
    set to 0 to completely disable the DB_RESTORE mechanism, or set up to
    2047MiB, with the parameter "sqliterepo.dump.max_size".
    sqliterepo: Clean stale DB dumps
    
    Only at the startup when we own the lock on the base directory.
    sqliterepo: Remove an unused function
    sqliterepo: Check possible double MASTER on DB_USE
    sqliterepo: Remove base from the cache
    sqliterepo: prevent deadlock during database deletion
    sqliterepo: Evoid calling election_get_status when DB not replicated
    sqliterepo: Refine the conditions to autocreate a missing DB
    
    Also make configurable the auto-recovery of missing DB
    Adapt sqliterepo to manage deadlines (cache, elections)
    sqliterepo: rename corrupted databases
    
    When a corruption is detected, the database is flagged as such.
    During closure, the database file is renamed with extension ".corrupted".
    A fresh database will be downloaded from a peer on the next request.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo: Drop the feature of the global autocreation flag for DB
    conf: Move the FD limits in the central config
    Avoid allocating memory for small strings with a bounded size
    
    Rather use character arrays located on the stack or inlined into their
    owner structures.
    Adapt the code to the central config
    sqliterepo: store replication peers in the database
    sqliterepo: store replication peers in the database
    sqliterepo/cache: prevents threads starvation
    
    Get rid of the old model with a fixed-number of GCond used to bucketize
    all the DB accesses.
    
    Now one couple of GCond (normal, prio) is associated to each cache item,
    and this is better since the lifetime of each item is the whole
    execution.
    
    In addition, the notion of maximum bases used has been reviewed to allow
    slight changes on the effective maximum. Now we propose one "hard"
    maximum used to allocate structures at init time, and one "soft" maximum
    that can be freely changed between (0,hard].
    sqliterepo: give priority to DB_GETVERS and DB_REPLI
    rawx,sqlx*: new options to preallocate chunks and databases
    
    - rawx: new "grid_fallocate" option (enabled by default), to tell
      the server to preallocate the space for the chunk, and
      possibly fail at the beginnig of the upload if there is not enough
    - m0,m1,m2,sqlx: new "PageSize" commandline option to change the
      sqlite database page_size (defaults to 4096 bytes)
    sqliterepo/election: memleak chased
    sqliterepo: interface reduction
    
    Attempt to simplify the code before re-organizing it into pseudo-objects suitable for tests.
    sqliterepo: open_timeout now expressed in the precision of oio_ext_monotonic_time()
    sqliterepo: reduced amount of I/O upon open/create
    
    Only one sqlite transaction is now used when opening a base, even if creating it.
    The whole schema setup is sent during this only transaction.
    sqliterepo: speed-up the schema checks
    
    * sqliterepo: the checks of the schema are now performed with lowered security, to avoid useless transaction syncs.
    * sqliterepo: got rid of the useless "version" provided when checking for the schema
    * meta0: removed the useless "vacuum" in the schema.
    * meta0/meta1/sqlx/tests: adapted to the changes previously listed.
    Volume lock factorized (rawx) and moved from the repository to the service.
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    meta2: autocreation restored on ~all operations.
    
    * meta2: autocreation was disabled by a preliminary check on the bases existence.
    * sqliterepo: debug function added
    sqliterepo: the DB handle now carries the election status of the base at its opening.
    OpenIO is lifting off now !
    sqliterepo: fix TO-HONEYCOMB-586 (big sqliterepo bases)
    
    Base transfers are now chunked (8MiB) by default.
    Monolitic transfers are still supported.
    
    Some return codes have been replaced by constants.
    
    Change-Id: Iecc45841bdd333f5d45bd101c68255c8c14d9111
    sqliterepo,sqlx,m2v2: fix election problems after move.
    
    Allow get_peers to bypass meta1 cache in sqlx and meta2v2.
    Add SQLX_EXITELECTION request in sqlx-based services.
    
    Change-Id: Ife2760bc869376c3b793950fca2fa703ca23bec9
    sqliterepo: new database close flags
    
    Change-Id: I9fc7e6d3bd447dd4f00970cb9395d8dfbe7e391f
    m1v2,m2v2,metautils: refactoring and meta1 service events
    
    Refactor the notification system and add meta1 notifications
    about linked services. Fatorize code duplicated in meta1v2
    and meta2v2 (now in sqlx_service_extras).
    
    Enable the notifications in conscience configuration with
      param_option.event_config.meta1 = kafka_enabled=true;kafka_topic=redc.meta1
    
    Change-Id: I4d6b0ac6917a900e4ed4ebfbcfa4c1ab1cdcba41
    sqliterepo : allows to disable peers checking.
    
    Change-Id: Ie284ed2d20a56fd9e48e10e549fdd3b321d9b7e5
    1.8.4 release candidate
    Initial commit
    sqliterepo: Remove unused code
    core: Fix the LB on local services (#1862)
    
    * Also also the placement of spare chunks on the local proxy.
    * core: Use service addr instead of ID for their unique key
    * lb: Pass debug message in TRACE level and restore fast lookups
    * oio-reset: Deploy a proxy with a location
    * Fix compilation warnings
    sqliterepo: implement database vacuum request
    
    Vacuum (defragment) the database on the master service, then
    resynchronize it on the slaves.
    
    Jira: OS-299
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo/remote: Remove unused code
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Get rid of an old rename trick born in redcurrant.
    OpenIO is lifting off now !
    1.8.4 release candidate
    sqliterepo: Remove dead code to upgrade from meta2v1 to meta2v2
    cmake: Only install prod-related tools in other build types than Debug
    cmake: Reorganize the targets
    
    * do not list headers, as it is recommended
    * drop the dependency to sqlite3 in oio-proxy
    Build & Use static libraries
    cmake: Explicit the ABI version of each shared library
    sqliterepo: fix compilation with zookeeper 3.5.3
    (cherry picked from commit ca4343fe8fe06644d2e24f93d41ee8dd9fc5570a)
    coverage: Avoid files generated by asn1c
    
    These files contain a lot of unused code.
    sqliterepo,meta0: Move `zk_manager` in meta0
    
    meta0v2 is the only code using zk_manager, and zk_manager itself is
    completely redundant with sqliterepo/synchro.h
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    sqliterepo: fix compilation with zookeeper 3.5.3
    Adapt the code to the central config
    Gather asn1.c header for further macro handlings
    sqliterepo/election: memleak chased
    cmake: added 'Werror' in CFLAGS where there is no warning
    
    Warnings are the voice of Evil.
    
    Let's try to avoid them on targets already clean.
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    conscience: renaming + pruning + reorg
    
    * conscience/agent remote functions have been renamed for more clarity
    * MACRO tags have been removed (usage too scarce and immutable, no need of something so flexible)
    * CPU/IO/SPACE computation moved from the oio-cluster-agent to libgridcluster
    * oio-cluster-agent is now now mandatory
    cmake: G_LOG_DOMAIN set at cmake's level.
    SSL replaced by GLib equivalent.
    Content propeties reviewed + Cleanup, round 2
    OpenIO is lifting off now !
    sqliterepo: fix TO-HONEYCOMB-586 (big sqliterepo bases)
    
    Base transfers are now chunked (8MiB) by default.
    Monolitic transfers are still supported.
    
    Some return codes have been replaced by constants.
    
    Change-Id: Iecc45841bdd333f5d45bd101c68255c8c14d9111
    Binary installation names reviewed.
    1.8.4 release candidate
    Initial commit
    sqliterepo: Remove unused code
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    sqliterepo: ignore null keys in admin table
    
    Emit an error when detecting a NULL key (instead of crashing).
    
    (cherry picked from commit 930042e5f76f4ceef3bfc6cdb64890ec0a24c3a9)
    sqliterepo: ignore null keys in admin table
    
    Emit an error when detecting a NULL key (instead of crashing).
    meta2: Send events when changing container properties
    meta2: Separate user and system properties when sending a 'container.new' event
    Python API, sqliterepo: replicate container snapshots
    
    To avoid deadlocks at creation time, we used to keep a single copy
    of container snapshots. Now that the replication mechanism is more
    reliable, we can replicate them.
    sqliterepo: fix sqlx_admin_has function
    
    When a value has the "deleted" flag, the function must return FALSE.
    Stop accepting composed service types
    sqlx: Fix bug when overwriting a deleted property with the same value
    sqliterepo: prevent empty property listing
    sqliterepo: Allow debug on changes in the admin table
    sqliterepo: Fix a missing replication upon a increment in the admin table
    sqliterepo: Replicate operations on the admin table
    sqliterepo: rename corrupted databases
    
    When a corruption is detected, the database is flagged as such.
    During closure, the database file is renamed with extension ".corrupted".
    A fresh database will be downloaded from a peer on the next request.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo/admin: Avoid listing entries being deleted
    sqliterepo/admin: Less malloc/free
    
    Impacts meta2 only, the only service to increment values, i.e. the
    contaier version number.
    sqliterepo: Minor change on a minimal buffer size
    sqliterepo: Reduce the amount of IO ops with a smarter cache
    
    Better management of modified/deleted entries in the cache of the
    `admin` table.
    sqliterepo/admin: Avoid listing entries being deleted
    sqliterepo/admin: Less malloc/free
    
    Impacts meta2 only, the only service to increment values, i.e. the
    contaier version number.
    sqliterepo: Minor change on a minimal buffer size
    sqliterepo: Reduce the amount of IO ops with a smarter cache
    
    Better management of modified/deleted entries in the cache of the
    `admin` table.
    sqliterepo: store replication peers in the database
    sqliterepo: store replication peers in the database
    sqliterepo: Reduce the number of calls to realloc() and strlen()
    sqlx: fix property deletion
    sqliterepo: fixes a memleak raised in meta2
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    sqliterepo: interface reduction
    
    Attempt to simplify the code before re-organizing it into pseudo-objects suitable for tests.
    sqliterepo: dirty admin fleg cleared when admin table reloaded.
    sqliterepo: reduced amount of I/O upon open/create
    
    Only one sqlite transaction is now used when opening a base, even if creating it.
    The whole schema setup is sent during this only transaction.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    m2v2: when listing a container's aliases, the container's metadata are also returned.
    
    In addition, unused code have been pruned from meta2.
    That code has been released with integrity-loop's removal.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    m2v2 + sqlx + proxy : set properties on contents and containers now manage a flush options and deletion by null value.
    sqliterepo + m2v2 : function renamed for more clarity.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo: Fix an non-intuitive macro name and typo in its comment
    metautils: Explain what does each length limit cover
    
    It is now documented if a `LIMIT_LENGTH_` macro manages the final NUL
    character of the string it concerns.
    
    Also, unused macros have been removed.
    sqliterepo: Move strings handlings onto the stack
    sqliterepo/election: cleaner trasitions the FSM
    
    The goal of the commit is to prevent entering a state with several
    pending callbacks that can trouble the transitions and cause messages
    storms.
    
    Only the completion events make the FSM (finite state machine) step
    forward. All the "interruptions" events are delayed until the normal
    actions are all done.
    
    Summary of the changes:
    
    * general renaming of the states to more intuitive names that denote the
      action that is pending. LEADER -> MASTER, LOST -> SLAVE.
    * new states added, so that at most one action is pending in each state.
      specially PRELOST that becomes [ASKING,CHECKING_MASTER] and CANDOK
      that becomes [WATCHING,LISTING].
    * new state added to leave-and-then-fail, instead of leaving then
      retrying.
    * Tests, tests, test. Despite the FSM is not 100% covered yet, the major
      transitions are now checked.
    * Timers simplified: since we wait for actionns before leaving an FSM
      state,.the necessity to retry an election is vastly simplified and
      only occurs from the NONE state.
    * A jitter has been introduced before sending a ping (USE) from a final
      state.
    
    Despite the result should be more stable, robust and resilient, this is
    a big set of changes and one shoould take care of possible unexpected
    effects. Especially of elections that could go more often than necessary
    in the FAILED state, and then undergo a 5s timer before the retry.
    (Prior to this commit, we would have loop-retry more often than
    necessary.)
    sqliterepo/election: memleak chased
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    sqliterepo: Remove unused code
    sqliterepo: Remove unused code
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    sqliterepo: Expose the BALM (balance masters) RPC
    sqliterepo: add possibility to balance master elections
    
    (cherry picked from commit b5633f3b9a44b41bf5f2065db97b4567241998f1)
    sqliterepo: implement database vacuum request
    
    Vacuum (defragment) the database on the master service, then
    resynchronize it on the slaves.
    
    Jira: OS-299
    proxy: Send the URL when changing properties
    Stop accepting composed service types
    sqliterepo: Emit a MASTER flag in DB_USE
    proxy, sqliterepo: Remove specific base
    proxy, sqliterepo: Ask each peer if base exists
    sqliterepo/sqlx_remote: Prevent faults with sanity checks
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    Snapshot: Factorize code and add sequence number as a request paramater
    Add container snapshot
    
    The snapshot take the form of:
    -A copy of the sqlite base of the target to a meta2 chose by the load balancer.
    -All the chunks of the snapshot are replaced by new chunk that hardlink the target one.
    -The snapshot is frozen afterward.
    
    The chunks hardlink implies that the target and the snapshot chunks are in the same rawx.
    Currently it is the client that freeze and enable the containers during the snapshot.
    meta1: ask directly meta0 for peers
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo/remote: Remove unused code
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    Avoid allocating memory for small strings with a bounded size
    
    Rather use character arrays located on the stack or inlined into their
    owner structures.
    Adapt the code to the central config
    Use the same macros for ans1c structures then in the codec code
    
    ... so we will be easily able to distribute a different asn1c release
    with a custom set of memory management functions.
    Gather asn1.c header for further macro handlings
    sqliterepo: Reduce the number of calls to realloc() and strlen()
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    proxy: prefer MASTER for writing, SLAVE for reading
    sqliterepo/election: memleak chased
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    sqliterepo: fixed mem allocations destined to be freed by libasn1
    
    Sometimes, memory wad glib2-allocated, then libc-freed by libasn1.
    fixed json parsing (proxy), trimmed unused parameter (sqlx_propget)
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    Various beautifications
    
    agent: unused code removed
    cluster: uniform interface
    cluster: agent bypass
    conscience: func tests OK
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    sqliterepo : fixed base name parsing (segfault when malformed).
    Minor code and macros factorisation
    Message handling functions refatored
    
    * Useless / unused functions removed.
    * Signatures more intuitive.
    * code factorized.
    Cleanup, round 6
    
    * path to sqlite bases unified and simplified. It should also plainly manage several containers for the same user.
    * warnings removed.
    * useless comments removed.
    m2v2 + sqlx + proxy : set properties on contents and containers now manage a flush options and deletion by null value.
    Content propeties reviewed + Cleanup, round 2
    OpenIO is lifting off now !
    sqliterepo: fix TO-HONEYCOMB-586 (big sqliterepo bases)
    
    Base transfers are now chunked (8MiB) by default.
    Monolitic transfers are still supported.
    
    Some return codes have been replaced by constants.
    
    Change-Id: Iecc45841bdd333f5d45bd101c68255c8c14d9111
    1.8.4 release candidate
    Initial commit
    sqliterepo: create the database on internal GETVERS requests
    
    External DB_VERS requests used to create the database, but internal ones
    did not. This resulted in a meta2 service never being elected master
    during M2_CREATE requests.
    
    Jira: OS-411
    replication: Increment the version number of the admin table
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo/version: Remove unused code
    sqliterepo/version: Remove unused code
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    Depend on the mainstream asn1c (#1834)
    
    * Depend on the mainstream asn1c instead of our modified version
    * cmake: Detect the version of gridinit: the option "-fwide-types" is not present in the 0.9.24 version that is still widely used, especially in Ubuntu Xenial Xerus.
    * ci: Add submodules for dependencies that are not managed by main linux distributions
    * ci: Avoid syncing unnecessary git submodules
    * metautils: Insulate the code with shared copyright
    replication: Increment the version number of the admin table
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo/version: Remove unused code
    sqliterepo: Reduce the amount of IO ops with a smarter cache
    
    Better management of modified/deleted entries in the cache of the
    `admin` table.
    sqliterepo: Reduce the amount of IO ops with a smarter cache
    
    Better management of modified/deleted entries in the cache of the
    `admin` table.
    Use the same macros for ans1c structures then in the codec code
    
    ... so we will be easily able to distribute a different asn1c release
    with a custom set of memory management functions.
    Gather asn1.c header for further macro handlings
    sqliterepo: Reduce the number of calls to realloc() and strlen()
    sqliterepo: fix one ASN1 memory allocation
    
    (cherry picked from commit 7453db8758373fb6ae9903773ad8be27656e7afb)
    sqliterepo: fix one ASN1 memory allocation
    Fixed compilation on x86_32
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    Hook'able clock function now used everywhere
    Dropped the dependency to the Linux's specific clock functions.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Fixed several warnings appeared with recent GCC versions
    
    * improved printf format checks.
    * fixed formatting weaknesses
    * fixed "unmanaged results" in some functions.
    * fixed unused paramerers
    * tools: adds missing 'import syslog' in monitoring scripts.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    sqliterepo: remove watches before deleting ZK nodes
    
    Removing watches before deleting ZooKeeper nodes prevents this watches
    to trigger callbacks after the election is gone (this happens when
    ZooKeeper is under heavy load).
    
    This modification requires ZooKeeper 3.5. Behavior with older versions
    is unchanged.
    sqliterepo: provide more debugging hints
    
    The debugging JSON object will now show the full path to the ZooKeeper
    node, and the server address.
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    sqliterepo: more request IDs
    sqliterepo: accept slow callbacks of deleted elections
    sqliterepo: reset master elections on ZOO_SESSION_EVENT
    
    A long time ago, we used to reset all elections on such Zookeeper
    event. We stopped doing this when we started to use several
    connections to Zookeeper, because it seemed a bad idea to reset
    everything on a single connection failure.
    Unfortunately, this leads to elections staying forever in the same state
    while their Zookeeper node has vanished.
    
    Now, after getting an unbound (no path is provided) ZOO_SESSION_EVENT,
    we will reset all elections in the master state, to avoid any infamous
    "double master" situations.
    
    (cherry picked from commit 49b99472c38b5dbf0c6b005c0d6c57a7f939d48d)
    sqliterepo: reset master elections on ZOO_SESSION_EVENT
    
    A long time ago, we used to reset all elections on such Zookeeper
    event. We stopped doing this when we started to use several
    connections to Zookeeper, because it seemed a bad idea to reset
    everything on a single connection failure.
    Unfortunately, this leads to elections staying forever in the same state
    while their Zookeeper node has vanished.
    
    Now, after getting an unbound (no path is provided) ZOO_SESSION_EVENT,
    we will reset all elections in the master state, to avoid any infamous
    "double master" situations.
    sqliterepo: Emit a MASTER flag in DB_USE
    sqliterepo: Keep pointer on election to avoid lookups
    
    This leads to smaller structures (the pointer is smaller than the name
    components) and less CPU, and requires recounts to be well handled.
    sqliterepo: Defer syscalls out of  the critical section
    metautils,sqlx,tests: Get rid of the useless gridd_client_factory
    
    That pseudo object was never used!
    sqliterepo/synchro: Avoid running useless testing code branches
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo/sync: Turn static some functions not exported
    sqliterepo/sync: Remove unused code
    conf: Third batch of variables
    
    udp_allowed, log_outgoing, rawx_events
    sqliterepo: Stackify strings handlings
    sqliterepo/election: fixed segfault on SESSIONEXPIRED events
    
    No path is available, but we don't need any, in fact. We need to expire
    all the elections, whatever their state.
    sqliterepo: shuffle the ZK cnx string before usage
    sqliterepo: able to send DB_USE via UDP
    
    Disabled by default
    Macro for the ZooKeeper timeout
    sqliterepo/election: memleak chased
    OpenIO is lifting off now !
    Finer gauges for active threads, reliable accesslog delays
    
    This patch provides the maximum number of active threads, and a round-robin storage for that information.
    The granularity proposed is intervals of 1s over the past 30s, and intervals of 1 minute over the past 1 hour.
    This data is used by the core server library to expose statistics, e.g.
    
            server.thread.max.1 = 0
            server.thread.max.5 = 1
            server.thread.max.15 = 2
            server.thread.max.30 = 2
            server.thread.max.60 = 3
            server.thread.max.300 = 3
            server.thread.max.900 = 3
            server.thread.max.3600 = 3
    
    This patch also alters the accesslog format for gridd transports, and it is now unified with http transport.
    An access log record now provides 2 treatment durations:
    - the total time spent since the reception of the last buffer that completes the request
    - the total treatment time, from the moment where a worker thread starts the request handling til the moment an answer is generated.
    The delta between both delays is the time spent in the internals queues of the process.
    
    The patch divides in:
    - server/stats_holder.* :
      - drops the adherence to system time, the current timestamp is now received from the caller. This is necessary to manager counter with a granularity different than 1s.
      - New calls to compute the cumulative maximum
      - code simplification
    - server/network_server.* :
      - new round-robin stats now managed
      - new stats exposed.
      - precise monotonic clock used on the last input
    - server/transport_http.c :
      - useless variables removed.
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - server/transport_gridd.c :
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - sqlx/sqlx_service.c :
      - code adapted to match the lost "time adherence"
    
    Change-Id: I248ae7a1937860e4062290e95b68465d7ec62821
    1.8.4 release candidate
    sqliterepo: Remove unused code
    server: get server-side performance data
    
    Save some performance data in the thread local data. This is disabled by
    default, can be enabled for each service (even when the service is running)
    or per request.
    Performance data is printed at the end of access log messages.
    Add reqid for replication errors
    Depend on the mainstream asn1c (#1834)
    
    * Depend on the mainstream asn1c instead of our modified version
    * cmake: Detect the version of gridinit: the option "-fwide-types" is not present in the 0.9.24 version that is still widely used, especially in Ubuntu Xenial Xerus.
    * ci: Add submodules for dependencies that are not managed by main linux distributions
    * ci: Avoid syncing unnecessary git submodules
    * metautils: Insulate the code with shared copyright
    sqliterepo: Detect corrupt databases at the end of the transaction
    sqliterepo: Improve error messages when quorum is not reached
    sqliterepo, meta2: display request ID in more messages
    sqliterepo: Force slab allocations
    sqliterepo: Trigger a repli. only on changes in the TNX
    replication: Increment the version number of the admin table
    sqliterepo: make "soft" replication errors more visible
    sqliterepo: return PIPEFROM when local base is not accessible
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo: Ensure there is a consistant output when locating the peers
    
    Either the error or the peers should be set, but never none nor both!
    Also, returning "no peer but no error" de facto become an empty array
    and never a NULL array anymore.
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 3e12733b1ef6b247af2187db7d044c709501d0d6)
    sqliterepo: cosmetic changes
    
    (cherry picked from commit a5fba8a41ab85bc7d786d05092ef44199ea98a3b)
    Avoid allocating memory for small strings with a bounded size
    
    Rather use character arrays located on the stack or inlined into their
    owner structures.
    sqliterepo: Use an explicit code for failed elections
    Fix compilation issues with GCC 7
    Adapt the code to the central config
    sqliterepo: cosmetic changes
    sqliterepo: cosmetic changes
    sqliterepo: Apply short connection timeouts for DB_REPLI requests
    Use the same macros for ans1c structures then in the codec code
    
    ... so we will be easily able to distribute a different asn1c release
    with a custom set of memory management functions.
    Gather asn1.c header for further macro handlings
    sqliterepo: Reduce the number of calls to realloc() and strlen()
    Benefits from optimized strcmp() when case sensitivity is not worth (#578)
    sqliterepo: remove a memory allocation in often called code
    m2: fix memleak, invalid read, replace some memmove by memcpy
    sqliterepo: better error message upon replication failures
    
    The DB name is now dispalyed.
    sqlx: reports the individual failures on replications (at commit on the master).
    sqlx: replaces magic numbers by macros for timeouts
    
    + longer timeout for replication and synchronisation requests.
    sqliterepo: interface reduction
    
    Attempt to simplify the code before re-organizing it into pseudo-objects suitable for tests.
    sqliterepo: dirty admin fleg cleared when admin table reloaded.
    metautils: unused code removed
    sqliterepo: reduced amount of I/O upon open/create
    
    Only one sqlite transaction is now used when opening a base, even if creating it.
    The whole schema setup is sent during this only transaction.
    sqlx client evolution
    sqliterepo: fixed mem allocations destined to be freed by libasn1
    
    Sometimes, memory wad glib2-allocated, then libc-freed by libasn1.
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    sqliterepo: fixed compile-time warning (unused function).
    proxy, sqliterepo: fixed odd behavior due to nested functions.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Slab allocation for small structures + ASN.1 message simplification
    Slab allocation for small structures + ASN.1 message simplification
    Get rid of an old rename trick born in redcurrant.
    OpenIO is lifting off now !
    sqliterepo: increase replication timeout, fix warning
    
    See https://jira.itsm.atosworldline.com/jira/browse/TO-HONEYCOMB-771
    
    Change-Id: Iab0e406c297215ad4d02c53962b938602dd8aaf3
    sqliterepo: fix TO-HONEYCOMB-586 (big sqliterepo bases)
    
    Base transfers are now chunked (8MiB) by default.
    Monolitic transfers are still supported.
    
    Some return codes have been replaced by constants.
    
    Change-Id: Iecc45841bdd333f5d45bd101c68255c8c14d9111
    sqliterepo : allows to disable peers checking.
    
    Change-Id: Ie284ed2d20a56fd9e48e10e549fdd3b321d9b7e5
    1.8.4 release candidate
    Initial commit
    sqliterepo: enrich sqlite with version
    sqliterepo: fix the snapshot feature
    meta2: Ignore the check after opening the base if it's admin request
    sqliterepo: Return 404 when the container created but not initiated
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    sqliterepo: Expose the BALM (balance masters) RPC
    sqliterepo: add possibility to balance master elections
    
    (cherry picked from commit b5633f3b9a44b41bf5f2065db97b4567241998f1)
    sqliterepo: implement database vacuum request
    
    Vacuum (defragment) the database on the master service, then
    resynchronize it on the slaves.
    
    Jira: OS-299
    meta*: Close the DB before replying
    
    Only affects operations playing with the `admin` table.
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    Depend on the mainstream asn1c (#1834)
    
    * Depend on the mainstream asn1c instead of our modified version
    * cmake: Detect the version of gridinit: the option "-fwide-types" is not present in the 0.9.24 version that is still widely used, especially in Ubuntu Xenial Xerus.
    * ci: Add submodules for dependencies that are not managed by main linux distributions
    * ci: Avoid syncing unnecessary git submodules
    * metautils: Insulate the code with shared copyright
    sqliterepo: Allow to delete all database properties
    sqliterepo: Fix memory leak
    meta2: Send events when changing container properties
    sqliterepo: reload admin table before calling change callback
    
    If the database has just been created, the cached admin table does not
    contain new entries. These entries may be required by the change
    callback, and thus we need to reload the whole admin table before
    calling it.
    
    Jira: OS-107
    sqliterepo: Add server information to service information
    sqliterepo: Add the version to service information
    Python API, sqliterepo: replicate container snapshots
    
    To avoid deadlocks at creation time, we used to keep a single copy
    of container snapshots. Now that the replication mechanism is more
    reliable, we can replicate them.
    sqliterepo: display soft_max in cache statistics
    sqliterepo: increase DB_PIPEFROM maximum timeout
    
    And allow to configure DB_DUMP chunk size.
    
    (cherry picked from commit cdcde7cec441a4e386825a62d68188afdcbfb43a)
    sqliterepo: increase DB_PIPEFROM maximum timeout
    
    And allow to configure DB_DUMP chunk size.
    sqliterepo: Check possible double MASTER on DB_USE
    m2: only send local peer in container.deleted events
    
    The drawback is that when deleting a container, several events are sent
    (one per peer).
    sqliterepo: Less access logs for synchro messages
    sqliterepo: print received size when body too short
    proxy, sqliterepo: Remove specific base
    proxy, sqliterepo: Ask each peer if base exists
    sqliterepo/dispatcher: Remove useless calls
    sqliterepo: Lazily create $repo/tmp when missing
    
    When the ./tmp sub-directory of a sqliterepo basedir has been removed
    after the startup of the service, the service is now able to recreate
    it.
    sqliterepo/election: React to an unknown MASTER
    
    Weird case managed or the sake of robustness
    sqliterepo: Evoid calling election_get_status when DB not replicated
    sqliterepo: Refine the conditions to autocreate a missing DB
    
    Also make configurable the auto-recovery of missing DB
    sqliterepo: do not alter error message when redirecting
    sqliterepo: Write only on the master
    sqliterepo: Ensure a DB exists before kicking the election FSM off
    replication: Increment the version number of the admin table
    sqliterepo: return PIPEFROM when local base is not accessible
    sqliterepo: Replicate operations on the admin table
    repli: Avoid preparing an UPDATE or nothing
    Sqliterepo: separate admin and non admin replication
    Sqliterepo: Fix replication error on admin table
    
    There was a problem of desynchronization of the rowid value.
    It is use internally by sqlite as the true primary key of the table.
    We used this value as the primary key to have exactly the same
    database, but it is not necessary for bases to have the same rowid for
    the same information.
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    Adapt sqliterepo to manage deadlines (cache, elections)
    Snapshot: Factorize code and add sequence number as a request paramater
    Container snapshot: fix small issues
    Add container snapshot
    
    The snapshot take the form of:
    -A copy of the sqlite base of the target to a meta2 chose by the load balancer.
    -All the chunks of the snapshot are replaced by new chunk that hardlink the target one.
    -The snapshot is frozen afterward.
    
    The chunks hardlink implies that the target and the snapshot chunks are in the same rawx.
    Currently it is the client that freeze and enable the containers during the snapshot.
    sqliterepo: lock election manager only when appropriate
    sqliterepo: fix indentation
    meta*,sqlx: Turn into JSON the server info
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqlx: Remove useless logic around `autocreate` flags in messages
    sqlx: Always autocreate a DB file upon a query
    sqliterepo: Explicitely autocreate DB files when meaningful
    sqliterepo: Ensure there is a consistant output when locating the peers
    
    Either the error or the peers should be set, but never none nor both!
    Also, returning "no peer but no error" de facto become an empty array
    and never a NULL array anymore.
    conf: Move the FD limits in the central config
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 3e12733b1ef6b247af2187db7d044c709501d0d6)
    Avoid allocating memory for small strings with a bounded size
    
    Rather use character arrays located on the stack or inlined into their
    owner structures.
    Fix compilation issues with GCC 7
    Adapt the code to the central config
    Use the same macros for ans1c structures then in the codec code
    
    ... so we will be easily able to distribute a different asn1c release
    with a custom set of memory management functions.
    Gather asn1.c header for further macro handlings
    sqliterepo/election: Reduce the number of calls to realloc()
    sqliterepo: Reduce the number of calls to realloc() and strlen()
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    sqliterepo: give priority to DB_GETVERS and DB_REPLI
    proxy: prefer MASTER for writing, SLAVE for reading
    sqliterepo: useless and cosmetic changes
    
    Because I fucking like lines shorter than 80 characters.
    sqliterepo: interface reduction
    
    Attempt to simplify the code before re-organizing it into pseudo-objects suitable for tests.
    malloc_trim moved in a periodic task in sqlx_service
    
    * magic numbers replaced by macros (malloc_trim sizes)
    sqliterepo: "lean" now considers a default size if none provided.
    metautils: unused code removed
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    sqliterepo: lighter access traces
    
    "REP" suffix removed.
    sqlx: shortened requests names
    sqliterepo: reduced amount of I/O upon open/create
    
    Only one sqlite transaction is now used when opening a base, even if creating it.
    The whole schema setup is sent during this only transaction.
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    sqlx: batch queries added
    sqlx: fixed parametrized queries
    sqliterepo: fixed base type check for sqlx servers
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    sqlx client evolution
    sqliterepo: fixed mem allocations destined to be freed by libasn1
    
    Sometimes, memory wad glib2-allocated, then libc-freed by libasn1.
    m2v2: fixed memleaks (PROPDEL)
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Message handling functions refatored
    
    * Useless / unused functions removed.
    * Signatures more intuitive.
    * code factorized.
    sqliterepo / sqlx : fixed memleak when getting the DB admin keys.
    Slab allocation for small structures + ASN.1 message simplification
    sqliterepo / sqlx : fixed memleak when getting the DB admin keys.
    Slab allocation for small structures + ASN.1 message simplification
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    m2v2 + sqlx + proxy : set properties on contents and containers now manage a flush options and deletion by null value.
    sqliterepo + m2v2 : function renamed for more clarity.
    sqliterepo: fixed double-free when setting properties on a base.
    sqliterepo: a propdel with no key means delete "user.*" properties.
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    sqliterepo: fix another function using /tmp + segfault
    
    Change-Id: Ic38bb31e01bd17f5619fe7b7a1f588b09cdfac38
    
    Conflicts:
            sqliterepo/replication_dispatcher.c
    OpenIO is lifting off now !
    sqliterepo: fix TO-HONEYCOMB-586 (big sqliterepo bases)
    
    Base transfers are now chunked (8MiB) by default.
    Monolitic transfers are still supported.
    
    Some return codes have been replaced by constants.
    
    Change-Id: Iecc45841bdd333f5d45bd101c68255c8c14d9111
    sqliterepo: add forced meta1 decache in SQLX_RESYNC.
    
    and fix small bugs.
    
    Change-Id: I905f8dcb61c00b1e60c0e0b459bd27a4e0172cdf
    sqliterepo,sqlx,m2v2: fix election problems after move.
    
    Allow get_peers to bypass meta1 cache in sqlx and meta2v2.
    Add SQLX_EXITELECTION request in sqlx-based services.
    
    Change-Id: Ife2760bc869376c3b793950fca2fa703ca23bec9
    1.8.4 release candidate
    Initial commit
    sqliterepo: Remove unused code
    sqliterepo/hash: Replace strncpy with g_strlcpy
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo: Move strings handlings onto the stack
    sqliterepo/election: cleaner trasitions the FSM
    
    The goal of the commit is to prevent entering a state with several
    pending callbacks that can trouble the transitions and cause messages
    storms.
    
    Only the completion events make the FSM (finite state machine) step
    forward. All the "interruptions" events are delayed until the normal
    actions are all done.
    
    Summary of the changes:
    
    * general renaming of the states to more intuitive names that denote the
      action that is pending. LEADER -> MASTER, LOST -> SLAVE.
    * new states added, so that at most one action is pending in each state.
      specially PRELOST that becomes [ASKING,CHECKING_MASTER] and CANDOK
      that becomes [WATCHING,LISTING].
    * new state added to leave-and-then-fail, instead of leaving then
      retrying.
    * Tests, tests, test. Despite the FSM is not 100% covered yet, the major
      transitions are now checked.
    * Timers simplified: since we wait for actionns before leaving an FSM
      state,.the necessity to retry an election is vastly simplified and
      only occurs from the NONE state.
    * A jitter has been introduced before sending a ping (USE) from a final
      state.
    
    Despite the result should be more stable, robust and resilient, this is
    a big set of changes and one shoould take care of possible unexpected
    effects. Especially of elections that could go more often than necessary
    in the FAILED state, and then undergo a 5s timer before the retry.
    (Prior to this commit, we would have loop-retry more often than
    necessary.)
    sqliterepo/election: memleak chased
    Useless/Unused functions removed
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    sqliterepo: Remove unused code
    sqliterepo: implement database vacuum request
    
    Vacuum (defragment) the database on the master service, then
    resynchronize it on the slaves.
    
    Jira: OS-299
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo/remote: Remove unused code
    OpenIO is lifting off now !
    1.8.4 release candidate
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    OpenIO is lifting off now !
    sqliterepo: fix TO-HONEYCOMB-586 (big sqliterepo bases)
    
    Base transfers are now chunked (8MiB) by default.
    Monolitic transfers are still supported.
    
    Some return codes have been replaced by constants.
    
    Change-Id: Iecc45841bdd333f5d45bd101c68255c8c14d9111
    sqliterepo: Minor code simplification
    
    Redundant code removed.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    OpenIO is lifting off now !
    sqliterepo: fix TO-HONEYCOMB-586 (big sqliterepo bases)
    
    Base transfers are now chunked (8MiB) by default.
    Monolitic transfers are still supported.
    
    Some return codes have been replaced by constants.
    
    Change-Id: Iecc45841bdd333f5d45bd101c68255c8c14d9111
    server: get server-side performance data
    
    Save some performance data in the thread local data. This is disabled by
    default, can be enabled for each service (even when the service is running)
    or per request.
    Performance data is printed at the end of access log messages.
    sqliterepo: display soft_max in cache statistics
    sqliterepo: prevent deadlock during database deletion
    Adapt sqliterepo to manage deadlines (cache, elections)
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqlx/cache: Remove unused code
    conf: Move the FD limits in the central config
    Adapt the code to the central config
    sqliterepo/cache: prevents threads starvation
    
    Get rid of the old model with a fixed-number of GCond used to bucketize
    all the DB accesses.
    
    Now one couple of GCond (normal, prio) is associated to each cache item,
    and this is better since the lifetime of each item is the whole
    execution.
    
    In addition, the notion of maximum bases used has been reviewed to allow
    slight changes on the effective maximum. Now we propose one "hard"
    maximum used to allocate structures at init time, and one "soft" maximum
    that can be freely changed between (0,hard].
    sqliterepo: give priority to DB_GETVERS and DB_REPLI
    sqliterepo: open_timeout now expressed in the precision of oio_ext_monotonic_time()
    Dropped the dependency to the Linux's specific clock functions.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    sqliterepo: Remove unused code
    sqliterepo: Remove unused code
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    sqliterepo: Expose the BALM (balance masters) RPC
    sqliterepo: add possibility to balance master elections
    
    (cherry picked from commit b5633f3b9a44b41bf5f2065db97b4567241998f1)
    sqliterepo: implement database vacuum request
    
    Vacuum (defragment) the database on the master service, then
    resynchronize it on the slaves.
    
    Jira: OS-299
    proxy: Send the URL when changing properties
    Stop accepting composed service types
    sqliterepo: Emit a MASTER flag in DB_USE
    proxy, sqliterepo: Remove specific base
    proxy, sqliterepo: Ask each peer if base exists
    Emit a deadline in all the RPC issued
    
    Exception: those toward the conscience
    Snapshot: Factorize code and add sequence number as a request paramater
    Add container snapshot
    
    The snapshot take the form of:
    -A copy of the sqlite base of the target to a meta2 chose by the load balancer.
    -All the chunks of the snapshot are replaced by new chunk that hardlink the target one.
    -The snapshot is frozen afterward.
    
    The chunks hardlink implies that the target and the snapshot chunks are in the same rawx.
    Currently it is the client that freeze and enable the containers during the snapshot.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo/remote: Remove unused code
    Avoid allocating memory for small strings with a bounded size
    
    Rather use character arrays located on the stack or inlined into their
    owner structures.
    Adapt the code to the central config
    sqliterepo: Reduce the number of calls to realloc() and strlen()
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    proxy: prefer MASTER for writing, SLAVE for reading
    sqliterepo/election: memleak chased
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    fixed json parsing (proxy), trimmed unused parameter (sqlx_propget)
    Got rid of 'hc_url_*' symbols, now only decently recent oio_url analogs.
    Various beautifications
    
    agent: unused code removed
    cluster: uniform interface
    cluster: agent bypass
    conscience: func tests OK
    Cleanup, round 6
    
    * path to sqlite bases unified and simplified. It should also plainly manage several containers for the same user.
    * warnings removed.
    * useless comments removed.
    m2v2 + sqlx + proxy : set properties on contents and containers now manage a flush options and deletion by null value.
    Content propeties reviewed + Cleanup, round 2
    OpenIO is lifting off now !
    sqliterepo: fix TO-HONEYCOMB-586 (big sqliterepo bases)
    
    Base transfers are now chunked (8MiB) by default.
    Monolitic transfers are still supported.
    
    Some return codes have been replaced by constants.
    
    Change-Id: Iecc45841bdd333f5d45bd101c68255c8c14d9111
    1.8.4 release candidate
    Initial commit
    sqliterepo: replace mallinfo by getrusage
    
    mallinfo doesn't rely on syscall but will parse
    all allocation page to compute its stats and will
    slow downduring time life.
    sqliterepo: Remove unused code
    server: get server-side performance data
    
    Save some performance data in the thread local data. This is disabled by
    default, can be enabled for each service (even when the service is running)
    or per request.
    Performance data is printed at the end of access log messages.
    m2: print high load messages only when near the timeout
    m2: track average DB open time
    
    Track (and display) average time spent by meta2 worker threads waiting
    for a database handle. The purpose of this modification is to provide
    better warning messages when the load on a meta2 database is increasing.
    sqliterepo/cache: Fix an annoying trace
    sqliterepo/cache: Fix RSS computation
    sqliterepo: Update copyright mentions
    sqliterepo: Throttle the memory consumption
    sqliterepo: display soft_max in cache statistics
    sqliterepo, meta2: display request ID in more messages
    sqliterepo/cache: Return 503 on actions on bases being closed
    sqliterepo: prevent deadlock during database deletion
    sqliterepo/cache: Enforce the maximum number of bases as configured
    sqliterepo/cache: Warn precisely on reached deadlines
    Change a TTL meaning: sqlx/cache (0 == infinity)
    Adapt sqliterepo to manage deadlines (cache, elections)
    sqliterepo: autoconfigure "hard" maximum of open files
    sqliterepo: report number of threads waiting for a base
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    conf: Move the FD limits in the central config
    conf: Split the set of variables and spread them in their libs
    
    + Regenerate the doc (cmake, github)
    + Rename a few variables to avoid collisions of purposes
    Adapt the code to the central config
    sqliterepo: actually reuse idle bases when max reached
    sqliterepo/cache: prevents threads starvation
    
    Get rid of the old model with a fixed-number of GCond used to bucketize
    all the DB accesses.
    
    Now one couple of GCond (normal, prio) is associated to each cache item,
    and this is better since the lifetime of each item is the whole
    execution.
    
    In addition, the notion of maximum bases used has been reviewed to allow
    slight changes on the effective maximum. Now we propose one "hard"
    maximum used to allocate structures at init time, and one "soft" maximum
    that can be freely changed between (0,hard].
    sqliterepo: give priority to DB_GETVERS and DB_REPLI
    m0,m1,m2,sqlx: reduce the number of logs at startup
    
    Closes #538
    malloc_trim moved in a periodic task in sqlx_service
    
    * magic numbers replaced by macros (malloc_trim sizes)
    sqliterepo: open_timeout now expressed in the precision of oio_ext_monotonic_time()
    sqliterepo: fixed typo making expiration tasks really agressive.
    One step further toward testability
    
    metautils: factorized asn1c hook
    sqliterepo: cache and election mechanism now more testable. Both are based on GCond to transmit synchronize all the threads waiting on the same objects. A single policy is now used: loop-wait with a short deadline based on the real clock, and check for a fake-clock deadline at each step.
    tests: unit tests completed
    global: fixed compile-time warnings
    Hook'able clock function now used everywhere
    Dropped the dependency to the Linux's specific clock functions.
    Fixed warnings (unused symbols)
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Replaced some deprecated symbols from GLib (g_cond_timed_wait)
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    sqliterepo: fix bug "Database stuck in closing state"
    
    See TO-HONEYCOMB-774.
    
    Change-Id: I271146ffe0ed0a7520d4ae26c733e74323eb4860
    2014-06-19 update from the promoter's version.
    
      * cleanup (paths, includes, macros)
      * m2v1: fix warnings
      * conscience: fix (warn on custom NONE stgpol)
      * sqliterepo: add check of redirection target (in debug mode)
      * m2v2: add retry loop for self redirections
      * c client: replaced some g_print by GRID_INFO to allow quiet mode
      * c client: add message on container destroy success
      * sqliterepo: leave election if no peers found in defer_USE
      * client/c: if m2 is replicated, make client retry
      * m2v2: handle error on exit_election
      * conscience: add check on VNS chunk_size
      * sqliterepo: fix leak
      * m2v2, c client: implement TO-HONEYCOMB-713 (chunk_size per VNS)
      * m2v2: fix TO-HONEYCOMB-715 (error after destroying not empty container)
      * sqliterepo, m2v2: improve debug traces
      * metautils: new function to compute printable thread id
      * c client: fix typo in get_virtual_namespace
      * sqliterepo: call malloc_trim after expiring bases
      * c client: fixed physical/virtual namespace confusions
      * rawx-lib: improved recovery of truncated chunks
      * rawx-lib: new options for gs_uncompress (log4c and keep_pending)
      * gridd: Fixed typo
      * gridd: timeout for idle connection is now configurable, and even disableable.
      * client : feature to change the VNS of an established client
      * replicator : VNS are now partially managed (only containers and contents) container_events are not yet supported.
      * metautils : CID computation more robust
      * meta2 / module : events when SLAVE ns + container's VNS in events instead of service's NS.
      * meta2 / lib : backend feature to get the VNS of a container
      * rawx-lib : fixed attr checks
      * cluster/dummy_service : annoying output level-lowered
      * gridd: annoying trace level-lowered
      * metautils: fix copy of chunk.metadata when its length is 0.(cherry picked from commit f5011e6d305b974319062084eac52f950a2d0270)
      * meta2: fixed TO-HONEYCOMB-678 (append on dup chunks)
      * saver: fixed TO-HONEYCOMB-677 (tsmx service not unlinked)
      * saver: now able to manage content delete events (to be tested)
      * saver: now able to make difference between PUT events and the other
      * Fixed relative #include path, that path doesn't allow a graceful split between the OSS/Proprietary parts.
      * m2v2: remove call to sleep in purge
    1.8.4 release candidate
    Initial commit
    sqliterepo: implement database vacuum request
    
    Vacuum (defragment) the database on the master service, then
    resynchronize it on the slaves.
    
    Jira: OS-299
    meta2: Send events when changing container properties
    meta2: Separate user and system properties when sending a 'container.new' event
    Python API, sqliterepo: replicate container snapshots
    
    To avoid deadlocks at creation time, we used to keep a single copy
    of container snapshots. Now that the replication mechanism is more
    reliable, we can replicate them.
    sqliterepo: get rid of legacy SQLX_ADMIN_USERTYPE
    sqliterepo: new error code 511 for corrupted databases
    sqliterepo: rename corrupted databases
    
    When a corruption is detected, the database is flagged as such.
    During closure, the database file is renamed with extension ".corrupted".
    A fresh database will be downloaded from a peer on the next request.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    sqliterepo: Reduce the amount of IO ops with a smarter cache
    
    Better management of modified/deleted entries in the cache of the
    `admin` table.
    sqliterepo: Reduce the amount of IO ops with a smarter cache
    
    Better management of modified/deleted entries in the cache of the
    `admin` table.
    sqliterepo: store replication peers in the database
    sqliterepo: store replication peers in the database
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    sqliterepo: interface reduction
    
    Attempt to simplify the code before re-organizing it into pseudo-objects suitable for tests.
    sqliterepo: dirty admin fleg cleared when admin table reloaded.
    sqliterepo: reduced amount of I/O upon open/create
    
    Only one sqlite transaction is now used when opening a base, even if creating it.
    The whole schema setup is sent during this only transaction.
    m2v2: when listing a container's aliases, the container's metadata are also returned.
    
    In addition, unused code have been pruned from meta2.
    That code has been released with integrity-loop's removal.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    m2v2 + sqlx + proxy : set properties on contents and containers now manage a flush options and deletion by null value.
    sqliterepo + m2v2 : function renamed for more clarity.
    sqliterepo: avoid logging some debug messages
    
    Change-Id: Ibb8d107716991166d8f0c473962115b08683542a
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    core+cluster: completed service registration/locking
    
    - removed useless tag.score
    + implemented lock_service
    core/cs: interface slightly changed
    
    score now returned when listing services.
    core/cs: API completed
    
    Also, the API has been made more robust to manage strings with '"' and UTF-8 characters in the JSON messages
    core/cs: proxy instanciation + partial func test
    core: new "oio_conscience" pseudo object
    
    Used for common operations, like registering services, listing them and listing the types.
    core: Remove unused macros
    proxy: Send 503 when the service types are not yet loaded
    core: Explicit the value of public enums
    meta2, proxy: return 405 on unallowed WORM mode op
    Expose func to handle a thread-local deadline
    sqliterepo: new error code 511 for corrupted databases
    meta*,sqlx: Make configurable the period of the DB decaches
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    core,metautils: Factorize the DJB hash functions
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    sqliterepo: Ensure there is a consistant output when locating the peers
    
    Either the error or the peers should be set, but never none nor both!
    Also, returning "no peer but no error" de facto become an empty array
    and never a NULL array anymore.
    core/cfg: New call to check if a NS is locally known
    proxy: Add bulk delete content
    
    Permit to delete many content in one go for one container.
    Modify the format of cli command 'openio object delete' to return a List.Lister.
    Modify tests that depended on the old format response to use the new one.
    
    The format of a request to the proxy is a json '{"contents":[{"name":"..."},{"name":"..."}]}'
    and the url is /content/delete_many.
    The format of the answer is a json '{"contents":[{"name":"...", "status":"...", "message":"..."}]}'
    core/ext: Reduce the number of memory allocations
    
    The threa-dlocal request ID is now inline in the thread-local structure.
    Its size is bounded to 63 bytes (including the final zero).
    core/cfg: Get rid of the delay
    
    Counter-productive and dangerous.
    proxy: Manage the "503 busy" erros from the backend
    
    Previously consdered as simple error, too strong to continue to iterate
    but with no special action. Now we keep in mind that the peers is
    probably overloaded.
    core/ext: Reduce the number of memory allocations
    
    The threa-dlocal request ID is now inline in the thread-local structure.
    Its size is bounded to 63 bytes (including the final zero).
    proxy: Add bulk delete content
    
    Permit to delete many content in one go for one container.
    Modify the format of cli command 'openio object delete' to return a List.Lister.
    Modify tests that depended on the old format response to use the new one.
    
    The format of a request to the proxy is a json '{"contents":[{"name":"..."},{"name":"..."}]}'
    and the url is /content/delete_many.
    The format of the answer is a json '{"contents":[{"name":"...", "status":"...", "message":"..."}]}'
    core: Loads the configuration in the proxy
    
    + Fix the min/max bounding behavior in the central configuration module
    Adapt the code to the central config
    metautils/gridd_client: Avoid faulty peers
    
    Allow the gridd_client to do it.
    core: new error code for fake errors
    core: implement local configuration cache
    
    This drastically reduces the number of times the proxy parses
    the configuration file.
    sqliterepo/cache: prevents threads starvation
    
    Get rid of the old model with a fixed-number of GCond used to bucketize
    all the DB accesses.
    
    Now one couple of GCond (normal, prio) is associated to each cache item,
    and this is better since the lifetime of each item is the whole
    execution.
    
    In addition, the notion of maximum bases used has been reviewed to allow
    slight changes on the effective maximum. Now we propose one "hard"
    maximum used to allocate structures at init time, and one "soft" maximum
    that can be freely changed between (0,hard].
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    sqlx-client: debugs outgoing sqlx requests
    core: more DL with ranges
    
    * non contiguous
    * not sorted
    Fixes and refactoring
    
    * rawx: fixed error message
    * rawx: fixed error message + fixed useless case-sensitivity management
    * proxy: cuts the crap from several error messages
    * m2v2: unreached code removed from alias deletion
    * m2v2: minor cosmetic change
    * core/sds: enables tracing RAWX requests for highest verbosity
    * proxy: re-enables case sensitive prefix matching in headers (brings more robustness)
    * core/sds: checks for content_id's format
    * core/sds: new feature to mangle the case of http headers (proxy,
      rawx). Mangling disabled by default, activated in tests.
    * core/tool_roundtrip: activates the mangling of headers case
    * core: fake chunksnb sent
    proxy: prefer MASTER for writing, SLAVE for reading
    proxy,resolver: expresses delays in monotonic time precision
    
    One step further in the uniformisation of the TTL and Delays management
    that previously mixed gdouble (seconds), time_t (second) and gint64
    (monotonic clock).
    
    The monotonic clock is the law!
    m2,events: new function send overwritable events with delay
    
    This will reduce the number of events sent by meta2 to account-server:
    maximum one event by container each second.
    core: standardizes the error message for BUSY servers
    core: standardizes the error message for BUSY servers
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    core: proper sockopt set
    
    * SO_REUSEADDR
    * SO_REUSEPORT (if available)
    * SO_LINGER (toward proxy)
    * TCP_NODELAY (toward proxy)
    
    + minor refactoring
    sqliterepo/election: memleak chased
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    Fixed several optimisations around up/down services
    
    There were partition/shuffle problems when looping on lists of services.
    * the ok/nok qualification of services didn't work (in the resolver)
    * the shuffling was potentially broken by a subsequent partition ok ok/nok services.
    * both weren't called at all in several cases.
    core: hooks now possible to override the system time functions.
    sqlx client : API proposal
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    core: autocontainer example + link proposal
    core: reintroduced the autocontainer hashing.
    core: Fix the LB of explicitely local services
    core: Improve the implementation of location functions
    core: Specific code files for the location management
    core: Fix a wrong license header
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    core: avoid naming conflict with C++ applications.
    core: Add function to delete directory
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    oio-event-benchmark: Format code
    Add functions for the routes 'reference/force' and 'reference/unlink' of proxy
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    core: various fixes and improvements on properties
    core: fix linkage with C++, export oiodir.h
    core: fixed guard macro
    core: pseudo-object directory client continued + tests
    core: Directory mock added
    Move lrutree.* from metautils/ to core/
    obsolete code and macros removed
    1.8.4 release candidate
    Initial commit
    C API: Implement the rollback of uploaded chunks
    core: Adapt the proxy client to the content/prepare evolution
    Update the copyright
    proxy, meta2: Remove 'content/link'
    core: Add function to delete directory
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    oio-event-benchmark: Format code
    Add functions for the routes 'reference/force' and 'reference/unlink' of proxy
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    core: Make the User-Agent configurable
    
    And disable it by default. This will save tens of bytes per request
    (proxy or rawx).
    core: allow listing properties while listing objects in C client
    core: various fixes and improvements on properties
    core: fix oio_sds_get_usage()
    core: modify set_properties and get_properties to respect new format
    core: The properties indicate in upload are set in the upload_commit step
    core: implement oio_sds_truncate() function
    core: tests reviewed (roundtrip), cosmetic changes
    Implement metachunk replacement
    
    This will allow optimized random writes (to change 1 byte, you will
    have to download and reupload only 1 metachunk, not the whole content).
    core: exposes the metachunks boundaries
    Integrate new erasure coding daemon
    EC through gateway + rebase on master (#594)
    
    * fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    
    * event-agent: use basic http for account client
    
    * oio-bootstrap.py: fixed default schema for mail applications
    
    * metautils/lb: uses the local PRNG, uniform distribution (#582)
    
    Uses the local PRNG instead of the libc's rand(), with its guarantee on
    the uniform distribution over a given range.
    
    This should lead to better random and should fix the apparent preference
    for the first item.
    
    * Do not generate extra debug and asserts when building in RelWithDebInfo
    
    * core: implement upload and download through http gateway
    core : add properties modification and container deletion
    c client: set storage policy when commiting chunks
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    core: proper sockopt set
    
    * SO_REUSEADDR
    * SO_REUSEPORT (if available)
    * SO_LINGER (toward proxy)
    * TCP_NODELAY (toward proxy)
    
    + minor refactoring
    core: allow getting container usage and quota
    core: add oio_sds_create() function
    core/cs: API completed
    
    Also, the API has been made more robust to manage strings with '"' and UTF-8 characters in the JSON messages
    core: new "oio_conscience" pseudo object
    
    Used for common operations, like registering services, listing them and listing the types.
    core: content-hash now computed and stored.
    C SDK: many fixes
    
    * parallel upload fixed.
    * streamed upload fixed
    * missing fields now sent to the rawx
    * slight redesign of single upload
    * minor API change for more clarity
    core: pseudo-object directory client continued + tests
    core: Directory mock added
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    sdk: now manage replication.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    proxy: set a content type on delete markers
    
    This will benefit the swift connector.
    core: extract upgrade-to-tls header
    proxy: Allow to simulate versioning when creating and deleting an object
    Update max_versions of container from header
    
    This commit introduce possibility to update max_versions when creating
    object:
    this is useful for container created through autocreate functionality:
    for Container Hierarchy, enabling versioning is set on root container,
    it is not possible to parse all container to update value and
    for performance, a dedicated request to update container is skipped
    (as a lot of upload may occurs at same time)
    
    If header `x-oio-force-versioning` is received,
    the max_versions is updated before completing
    object (to keep mecanism to delete prior object if needed)
    core: centralize rawx-header definitions
    Allow listing to be done on master service only
    
    For several operations, when a list is done just after an object
    deletion, the listing operation may occur on a slave which has not been
    synchronized yet.
    meta2: Add User-Agent to the events
    Python API, meta2: forward special property beans
    
    Jira: R1810-27
    Python API, CLI: keep track of request durations
    
    First step: keep track of resolving and request times in proxy,
    then rawx request time in Python API.
    Load the deadline in the th-local of a proxy request
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 3e12733b1ef6b247af2187db7d044c709501d0d6)
    Add a general trigger around the activiation of TFO
    
    TCP_FASTOPEN improved the behavior on small-to-medium loads but it seems
    to induce some side effects such an extra load when srongly stressing
    the services. Let's deactivate it by default and continue the job of
    improving out support.
    Fix compilation issues with GCC 7
    conf: Third batch of variables
    
    udp_allowed, log_outgoing, rawx_events
    config: Manage a second batch of variables
    core: Loads the configuration in the proxy
    
    + Fix the min/max bounding behavior in the central configuration module
    Adapt the code to the central config
    rawx: Allow to turn off the event source
    
    Controlled by the "rawx_events" in sds.conf
    Disabled by default.
    meta1,meta2,proxy: Enables the faulty peers avoidance
    
    Triggered if actived in the system-wide configuration of the namespace.
    sqliterepo: Apply short connection timeouts for DB_REPLI requests
    sqliterepo: Make shorter timeouts for USE/GETVERS
    
    The global request handling should not take longer than 2s for GETVERS
    and 1s for USE.
    sqliterepo: Shorten the cnx timeout for USE and GETVERS requests
    
    From a default of 2s, use now 0.5s for GETVERS and 0.25s for USE.
    core,sqliterepo: get rid of dumb ZK timeout default value
    core: allow to log outgoing requests
    sqliterepo: shuffle the ZK cnx string before usage
    sqlite services: enables UDP if configured so
    meta{0,1,2},sqlx: allows alternate ZK url in /etc/oio/sds.conf
    
    A service with the XXX service type now overrides its ZK url (found at
    'zookeeper' in /etc/oio/sds.conf) with an other value found at
    zookeeper.XXX in /etc/oio/sds.conf. If the specific value is not set,
    the main value is left untouched.
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    Integrate new erasure coding daemon
    EC through gateway + rebase on master (#594)
    
    * fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    
    * event-agent: use basic http for account client
    
    * oio-bootstrap.py: fixed default schema for mail applications
    
    * metautils/lb: uses the local PRNG, uniform distribution (#582)
    
    Uses the local PRNG instead of the libc's rand(), with its guarantee on
    the uniform distribution over a given range.
    
    This should lead to better random and should fix the apparent preference
    for the first item.
    
    * Do not generate extra debug and asserts when building in RelWithDebInfo
    
    * core: implement upload and download through http gateway
    Benefits from optimized strcmp() when case sensitivity is not worth (#578)
    proxy: prefer MASTER for writing, SLAVE for reading
    m0: speed up replication, increase oio-meta0-init timeout
    
    Force the meta0 slaves to restore the whole database from the master
    which is far quicker than using the standard replication mechanism
    when a large part of the database has changed.
    proxy,resolver: expresses delays in monotonic time precision
    
    One step further in the uniformisation of the TTL and Delays management
    that previously mixed gdouble (seconds), time_t (second) and gint64
    (monotonic clock).
    
    The monotonic clock is the law!
    proxy: configurable timeouts for outgoing stat + larger default
    events: make buffer delay configurable (5s by default)
    config: sets the TTL of locally known services to 5 days
    
    The goal os to survive to a conscience's outage for several days
    (typically a week-end plus 2 days to react).
    server: new macros for internal limits + limits reviewed
    
    * Macros moved in core/oiocfg.h
    * More events raised by epoll_wait: 16 -> 128
    * Limits to 64 the number of accept() on each round: avoids starving on
      established connections, and prefer finishing established connections
      before accepting others.
    * Removes the limits on the number of idle workers (5 -> -1). Just let
      the expiration timeout of 30s do the job.
    core: sets the default CNX timeout to 2s (instead of 1s).
    proxy: sets SRV downstream period to 2s (instead of 5s)
    Macro for the ZooKeeper timeout
    m0v2: extends the timeout for the FILL operations
    
    Those are notoriously longer then read-only ops.
    sqlx: replaces magic numbers by macros for timeouts
    
    + longer timeout for replication and synchronisation requests.
    rawx: avoids magic number when managing the 'grid_upload_blocksize' option
    sqlx: reconfigure the max-pending for the services'es events queues.
    
    + sample configuration
    sqlx: reconfigure the max-pending for the services'es events queues.
    
    + sample configuration
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    oio_events_queue: feature now in its own pseudo-class
    
    * 3 pseudo-methods: destroy, send, is_stalled
    * code modified to manage the new structure
    * additional cleanup of unused functions
    proxy: container/destroy plainly destroys the containers and their references
    
    * a container destruction is now: 1/freeze 2/flush 3/unlink 4/destroy(local)
    * meta2 slighty simplified around PURGE/DEDUP/FLUSH, where the dry_run options have disappeared.
    Doc effort.
    proxy: ttl for local services set to 30s (intead of 5s)
    
    Modifiable at compile time with the help of PROXYD_TTL_DEAD_LOCAL_SERVICES
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    C SDK: many fixes
    
    * parallel upload fixed.
    * streamed upload fixed
    * missing fields now sent to the rawx
    * slight redesign of single upload
    * minor API change for more clarity
    proxy: V2.0 routes'es code removed, RDIR routes implemented
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    core: avoid naming conflict with C++ applications.
    core: Add function to delete directory
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core/dir: release JSON object
    oio-event-benchmark: Format code
    Add functions for the routes 'reference/force' and 'reference/unlink' of proxy
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    dir: Prevents asserts raised with invalid namespaces
    core: various fixes and improvements on properties
    core: fix som compilation warnings
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    core: proper sockopt set
    
    * SO_REUSEADDR
    * SO_REUSEPORT (if available)
    * SO_LINGER (toward proxy)
    * TCP_NODELAY (toward proxy)
    
    + minor refactoring
    core: new "oio_conscience" pseudo object
    
    Used for common operations, like registering services, listing them and listing the types.
    core: pseudo-object directory client continued + tests
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    core: Directory mock added
    core: Specific code files for the location management
    core: Explicit the value of public enums
    copyright: Update the mention of altered files
    core/log: Stop using the useless/unused flags
    
    * Impact only with stderr output
    * Remove a useless macro
    core,metautils: Allow to send syslog msg to an UDP collector
    LOG: cast GRID_LOGLVL* values  to GLogLevelFlags
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core/log: Remove unused macros
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    conf: Third batch of variables
    
    udp_allowed, log_outgoing, rawx_events
    core: allow to log outgoing requests
    core/log: removes (nearly) unused logging macros
    core: do not compute TRACE logs when in low log-levels
    core: allows to specify a custom log handler
    
    For a better integration with specific management from the applications.
    core: adds feature to log to stderr with ISO timestamps
    m2v2: shortened content ID (32 -> 16)
    
    We can achieve good unicity inside a container with only 16 bytes.
    This information is present in every entry of the tables ALIAS, CONTENT, CHUNK
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Get rid of log4c emulation and some old (and unused) pieces of code.
    C API : fixed log initiation.
    
    Logging is disabled by default, the application can activate it via the GLib2 (https://developer.gnome.org/glib/2.38/glib-Message-Logging.html#g-log-set-default-handler).
    The verbosity is set to WARNING by default, the app. can make it more verbose whith the help of logger_init_level() (metautils/lib/metautils.h)
    OpenIO is lifting off now !
    metautils: fixed Kafka logging
    
    Change-Id: I47728764dbcd1b149cd8e761c7a8c4397abc219e
    Finer gauges for active threads, reliable accesslog delays
    
    This patch provides the maximum number of active threads, and a round-robin storage for that information.
    The granularity proposed is intervals of 1s over the past 30s, and intervals of 1 minute over the past 1 hour.
    This data is used by the core server library to expose statistics, e.g.
    
            server.thread.max.1 = 0
            server.thread.max.5 = 1
            server.thread.max.15 = 2
            server.thread.max.30 = 2
            server.thread.max.60 = 3
            server.thread.max.300 = 3
            server.thread.max.900 = 3
            server.thread.max.3600 = 3
    
    This patch also alters the accesslog format for gridd transports, and it is now unified with http transport.
    An access log record now provides 2 treatment durations:
    - the total time spent since the reception of the last buffer that completes the request
    - the total treatment time, from the moment where a worker thread starts the request handling til the moment an answer is generated.
    The delta between both delays is the time spent in the internals queues of the process.
    
    The patch divides in:
    - server/stats_holder.* :
      - drops the adherence to system time, the current timestamp is now received from the caller. This is necessary to manager counter with a granularity different than 1s.
      - New calls to compute the cumulative maximum
      - code simplification
    - server/network_server.* :
      - new round-robin stats now managed
      - new stats exposed.
      - precise monotonic clock used on the last input
    - server/transport_http.c :
      - useless variables removed.
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - server/transport_gridd.c :
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - sqlx/sqlx_service.c :
      - code adapted to match the lost "time adherence"
    
    Change-Id: I248ae7a1937860e4062290e95b68465d7ec62821
    metautils : logging now configurable from the environment.
    
    Used in tests.
    
    Change-Id: Ibfd4b3e8b4b067549095458dd06439db95651dbc
    2014-06-19 update from the promoter's version.
    
      * cleanup (paths, includes, macros)
      * m2v1: fix warnings
      * conscience: fix (warn on custom NONE stgpol)
      * sqliterepo: add check of redirection target (in debug mode)
      * m2v2: add retry loop for self redirections
      * c client: replaced some g_print by GRID_INFO to allow quiet mode
      * c client: add message on container destroy success
      * sqliterepo: leave election if no peers found in defer_USE
      * client/c: if m2 is replicated, make client retry
      * m2v2: handle error on exit_election
      * conscience: add check on VNS chunk_size
      * sqliterepo: fix leak
      * m2v2, c client: implement TO-HONEYCOMB-713 (chunk_size per VNS)
      * m2v2: fix TO-HONEYCOMB-715 (error after destroying not empty container)
      * sqliterepo, m2v2: improve debug traces
      * metautils: new function to compute printable thread id
      * c client: fix typo in get_virtual_namespace
      * sqliterepo: call malloc_trim after expiring bases
      * c client: fixed physical/virtual namespace confusions
      * rawx-lib: improved recovery of truncated chunks
      * rawx-lib: new options for gs_uncompress (log4c and keep_pending)
      * gridd: Fixed typo
      * gridd: timeout for idle connection is now configurable, and even disableable.
      * client : feature to change the VNS of an established client
      * replicator : VNS are now partially managed (only containers and contents) container_events are not yet supported.
      * metautils : CID computation more robust
      * meta2 / module : events when SLAVE ns + container's VNS in events instead of service's NS.
      * meta2 / lib : backend feature to get the VNS of a container
      * rawx-lib : fixed attr checks
      * cluster/dummy_service : annoying output level-lowered
      * gridd: annoying trace level-lowered
      * metautils: fix copy of chunk.metadata when its length is 0.(cherry picked from commit f5011e6d305b974319062084eac52f950a2d0270)
      * meta2: fixed TO-HONEYCOMB-678 (append on dup chunks)
      * saver: fixed TO-HONEYCOMB-677 (tsmx service not unlinked)
      * saver: now able to manage content delete events (to be tested)
      * saver: now able to make difference between PUT events and the other
      * Fixed relative #include path, that path doesn't allow a graceful split between the OSS/Proprietary parts.
      * m2v2: remove call to sleep in purge
    1.8.4 release candidate
    Initial commit
    core: Remove unused code
    core: implement array filtering function
    core: Convert null value to empty string
    core/lb: make service ID comparisons case insensitive
    Update the copyright
    rawx: Check content fullpath
    sqliterepo/election: React to an unknown MASTER
    
    Weird case managed or the sake of robustness
    Disallow using an unknown storage policy
    
    Fixes #1153
    server: allow non-hexadecimal request IDs
    core/str: Fix the encoding of booleans in JSON
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    oio-event-benchmark: Add event 'content.deleted'
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    sqliterepo: Ensure there is a consistant output when locating the peers
    
    Either the error or the peers should be set, but never none nor both!
    Also, returning "no peer but no error" de facto become an empty array
    and never a NULL array anymore.
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 3e12733b1ef6b247af2187db7d044c709501d0d6)
    Fix compilation issues with GCC 7
    core: Add macros to reduce the number of realloc() and strlen()
    
    ... that happen in JSON encodings
    core: code factorisation (integer format check)
    core: simplifies the signature of autocontainers functions
    core: fix som compilation warnings
    sqlx: fix property deletion
    proxy: fixes /content/create
    proxy: properties management unified
    
    ... when creating entities, setting properties, getting them.
    ... whatever the entity (user, container, content) the format is the
    same at the proxy level and at the backend service level.
    core+metautils: code cleanup, functions {re,}moved
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    cs,core,metautils: new services and LB configuration
    
    Rearrange service types configuration to make it more clear.
    Rearrange service pools configuration to add more options.
    Compute integer service location from dotted string location.
    core: tests reviewed (roundtrip), cosmetic changes
    core: fix EC upload and potential segfault
    lb: review for more efficiency
    Farewell to the rainx!
    
    + rawx simplification
    Fixes and refactoring
    
    * rawx: fixed error message
    * rawx: fixed error message + fixed useless case-sensitivity management
    * proxy: cuts the crap from several error messages
    * m2v2: unreached code removed from alias deletion
    * m2v2: minor cosmetic change
    * core/sds: enables tracing RAWX requests for highest verbosity
    * proxy: re-enables case sensitive prefix matching in headers (brings more robustness)
    * core/sds: checks for content_id's format
    * core/sds: new feature to mangle the case of http headers (proxy,
      rawx). Mangling disabled by default, activated in tests.
    * core/tool_roundtrip: activates the mangling of headers case
    * core: fake chunksnb sent
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    proxy: prefer MASTER for writing, SLAVE for reading
    core: provides a thread-local GRand lazily initialized
    
    This avoids calling the global GRand of the GLib that is protected by a
    GMutex. Less mutex operation means less syscalls (futex).
    utf8: fixed encoding (#551)
    core: minor feature addition (compute length of void**)
    core: fix #503, portability issue on armv7hl
    core: avoids system's size_t when an int is enough
    core: avoids system's size_t when an int is enough
    rawx: require "content_version", handle null values in events
    proxy: quote property values when building JSON response
    Add tests of weird content names and fix some quoting issues
    Useless/Unused functions removed
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    core/cs: API completed
    
    Also, the API has been made more robust to manage strings with '"' and UTF-8 characters in the JSON messages
    core+metautils: str_{upper,lower} moved from metautils to core
    proxy: sqlx properties fixed
    proxy: sqlx properties fixed
    core: URL now have mandatory accounts and a content field.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    core: autocontainer example + link proposal
    core: reintroduced the autocontainer hashing.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    core: Remove unused code
    lb: compare what's comparable, do not mix enums
    
    Took me several hours with GDB to find this one...
    core: Fix the LB of explicitely local services
    core: Improve the implementation of location functions
    core: Specific code files for the location management
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Several interlaced improvements
    
    * unused code removed (gridd/plugins/acl, cluster/agent/http_request, ...)
    * clients timeouts fixed and simplified (1 timeout not 2, monotonic_time based)
    * simplified calls on address handling functions (metautils)
    * uniform meta0 and meta1 remote API
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Replaced some deprecated symbols from GLib (g_memmove, G_MUTEX_INIT)
    Some hardcoded numbers replaced by the right macro.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    core: Explicit the value of public enums
    Various small cosmetic fixes
    
    that I would have forgotten if not commited now.
    Update ABI Version
    
    Function oio_var_value_one_with_option was splited in oio_var_fix_one and oio_var_value_one.
    Update the copyright
    proxy, meta2: Remove 'content/link'
    Update OIO_SDS_VERSION macro
    
    This is to reflect recent API changes (configurable chunk size).
    Still no ABI incompatibilities.
    C API: Add an option force chunks' size
    C API: configure chunk size of clients
    C SDK: Avoid doxygen warnings
    C api: Extend to doc to oio_url.
    C api: Add some doc elements
    C api: Fix typos
    core: Prepare a Doxygen context for the C API
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    Adapt the code to the central config
    core: use unsigned in some structure fields
    
    This does not change the meaning of the fields, but forces the
    formating functions to print positive numbers.
    core: allow listing properties while listing objects in C client
    core: various fixes and improvements on properties
    core: add tests around container and object names
    core: add possibility to sort chunks by score
    
    By default, chunks are shuffled before reading, so we don't ask
    always the same rawx.
    core: fix oio_sds_get_usage()
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    core: implement oio_sds_truncate() function
    core: restores the chunk-method detection
    core: show_content is more precise
    core: adds checks around partial/append constraints
    core: adds a minor CLI tool to put/append/replace contents
    core: tests reviewed (roundtrip), cosmetic changes
    Implement metachunk replacement
    
    This will allow optimized random writes (to change 1 byte, you will
    have to download and reupload only 1 metachunk, not the whole content).
    core: more DL with ranges
    
    * non contiguous
    * not sorted
    core: exposes the metachunks boundaries
    core: introduces new macro to check the API/ABI version
    
    We plan to introduce fields in some structures. We need such a simple
    way to let the application programmer check its installation is correct
    and check the version it used at compile time was the same the version
    currently known by the library.
    c client: support backblaze upload through ECD (WIP)
    Integrate new erasure coding daemon
    EC through gateway + rebase on master (#594)
    
    * fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    
    * event-agent: use basic http for account client
    
    * oio-bootstrap.py: fixed default schema for mail applications
    
    * metautils/lb: uses the local PRNG, uniform distribution (#582)
    
    Uses the local PRNG instead of the libc's rand(), with its guarantee on
    the uniform distribution over a given range.
    
    This should lead to better random and should fix the apparent preference
    for the first item.
    
    * Do not generate extra debug and asserts when building in RelWithDebInfo
    
    * core: implement upload and download through http gateway
    Fixes and refactoring
    
    * rawx: fixed error message
    * rawx: fixed error message + fixed useless case-sensitivity management
    * proxy: cuts the crap from several error messages
    * m2v2: unreached code removed from alias deletion
    * m2v2: minor cosmetic change
    * core/sds: enables tracing RAWX requests for highest verbosity
    * proxy: re-enables case sensitive prefix matching in headers (brings more robustness)
    * core/sds: checks for content_id's format
    * core/sds: new feature to mangle the case of http headers (proxy,
      rawx). Mangling disabled by default, activated in tests.
    * core/tool_roundtrip: activates the mangling of headers case
    * core: fake chunksnb sent
    core : add properties modification and container deletion
    core: allow getting container usage and quota
    core: add oio_sds_create() function
    core/upload: hook semantics changed
    
    Allows to manage the special case where no data is immediately available.
    C SDK: many fixes
    
    * parallel upload fixed.
    * streamed upload fixed
    * missing fields now sent to the rawx
    * slight redesign of single upload
    * minor API change for more clarity
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    core / sds: named enum to help C++ wrapers.
    core : explicit content links implemented.
    core: aliases listing implemented.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    core: autocontainer example + link proposal
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    sdk: Fixed URL construction
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    Various improvements
    
    * global error codes added
      * special codes for missing accounts, users, containers
      * client adapted.
    * containers autocreation
      * enabled in m1v2 backend
      * exposed in m1v2 remote
      * exposed in proxy
    * C SDK output reviewed
      * minimal API exposed
      * error messages normalized
    * C SDK: upload extended with the autocreation (disabled by default).
    sdk: new feature to collect all the compile-time configuration variables.
    
    * Compile-time options gathered in metautils
    * SDK extended with a new function
    * new sds/oio_config tool to dump the config.
    * unused CMake directives and/or macros pruned.
    sdk: new feature to collect all the compile-time configuration variables.
    
    * Compile-time options gathered in metautils
    * SDK extended with a new function
    * new sds/oio_config tool to dump the config.
    sdk: sync after download
    sdk: now manage replication.
    sdk: now configurable, presence check added, better error detection.
    C SDK rebooted.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    ci,core/tool_sdk_noconf: Manage an `ecd` in the live configuration (#1102)
    core/tool_sdk_noconf: Be more Glib-2.0 idiomatic
    core: Add a sample code for config lexx SDK usages
    core/url: Clarify the copyright coverage
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    core: URL now have mandatory accounts and a content field.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    core: hc_url renamed to oio_url.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    metautils: the "hc_url" functions signatures does not depend on the GLib.
    
    It is now much easier to embed in external apps.
    metautils: unused functions removed.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    core: extract upgrade-to-tls header
    server: get server-side performance data
    
    Save some performance data in the thread local data. This is disabled by
    default, can be enabled for each service (even when the service is running)
    or per request.
    Performance data is printed at the end of access log messages.
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    meta2: Allow to simulate versioning when creating and deleting an object
    sqliterepo: more request IDs
    meta2: properly reset oio_ext fields
    
    The user_agent and force_versioning was not cleaned before/after each request.
    Update max_versions of container from header
    
    This commit introduce possibility to update max_versions when creating
    object:
    this is useful for container created through autocreate functionality:
    for Container Hierarchy, enabling versioning is set on root container,
    it is not possible to parse all container to update value and
    for performance, a dedicated request to update container is skipped
    (as a lot of upload may occurs at same time)
    
    If header `x-oio-force-versioning` is received,
    the max_versions is updated before completing
    object (to keep mecanism to delete prior object if needed)
    core: allow generation of prefixed request IDs
    Allow listing to be done on master service only
    
    For several operations, when a list is done just after an object
    deletion, the listing operation may occur on a slave which has not been
    synchronized yet.
    meta2: Add User-Agent to the events
    core: Get rid of obsolete SLICE* macros
    cmake: Remove the FORBID_SLICES options
    
    Slab allocations are encouraged.
    Expose func to handle a thread-local deadline
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    tests: add tests of container with weird names
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    proxy: properties management unified
    
    ... when creating entities, setting properties, getting them.
    ... whatever the entity (user, container, content) the format is the
    same at the proxy level and at the backend service level.
    lb: review for more efficiency
    core: provides a thread-local GRand lazily initialized
    
    This avoids calling the global GRand of the GLib that is protected by a
    GMutex. Less mutex operation means less syscalls (futex).
    core: allows to disable slice allocaitons
    sqliterepo/election: memleak chased
    core/ext: commodity func. to get clocks with a precision of a second
    metautils: unused code removed
    Moved oio_sys_* from cluster/lib to core/ext
    
    (Functions to get the CPU & IO load)
    core/cs: API completed
    
    Also, the API has been made more robust to manage strings with '"' and UTF-8 characters in the JSON messages
    Fixed several optimisations around up/down services
    
    There were partition/shuffle problems when looping on lists of services.
    * the ok/nok qualification of services didn't work (in the resolver)
    * the shuffling was potentially broken by a subsequent partition ok ok/nok services.
    * both weren't called at all in several cases.
    core: hooks now possible to override the system time functions.
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    obsolete code and macros removed
    core: added features to shuffle and partition arrays.
    
    These will be necessary for the resolvers to manage array of targets:
    * shuffling to avoid hitting always the same target
    * partioning to prefer services with no known problems.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    core/url: Clarify the copyright coverage
    Compute container ID when converting URL to JSON
    core: Remove the unused NS from the CID computation
    Stop accepting composed service types
    m2: ensure there is a version in content.perfectible events
    core: Inline a few fields of an oio_url
    
    Onyl the shortest fields at the moment.
    core,m1,m2: check container name is valid UTF-8
    
    Jira: OS-100
    Update the copyright
    Python API, core: Add the content ID to the fullpath
    core: Unpack full path in URL
    core: Force slab allocations
    Python API, meta2: Send the content ID to create an object
    Python API, CLI: new 'openio election sync' command
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core/url: fixes around fullpath
    Rawx: make it more robust against strange path
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    core: add oio_url_check to validate components
    
    The function will check:
    - if path is a valid UTF8 string
    - if version is a number
    - if namespace matchs with provided it
    core/url: Dump the version in the packed URLs
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 3e12733b1ef6b247af2187db7d044c709501d0d6)
    Fix compilation issues with GCC 7
    core: add tests around container and object names
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    core: guards hexid compuation when fields are missing
    
    Prevents an assertion to be raised.
    sqliterepo/election: memleak chased
    metautils: unused code removed
    core: stronger checks around URL handlings
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    core: content_id now sent to the proxy
    core/url: '+' now decoded as a ' ' in query strings
    fixed sub-type management for the services.
    
    The compound types of services are now well considered by the proxy, then transmitted in the various requests the proxy issues.
    core: Directory mock added
    core: URL now have mandatory accounts and a content field.
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    core / url : unescape query items
    s/hc_url_/oio_url_/ ... continued
    core: hc_url renamed to oio_url.
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    metautils / list : corner case sped up when concating lists.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    metautils: more checks on URL before computing a container_id.
    
    In addition, removed the unused & useless errno management in hc_url.
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    metautils: fixed hc_url parsing.
    metautils: hc_url now printed as whole with URI-escaped components.
    metautils: hcurl parsing now provided for the format with accounts.
    metautils: the "hc_url" functions signatures does not depend on the GLib.
    
    It is now much easier to embed in external apps.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Slab allocation for small structures + ASN.1 message simplification
    Slab allocation for small structures + ASN.1 message simplification
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Unused code removed.
    Unused code removed.
    OpenIO is lifting off now !
    hc_url option set now resets the whole URL
    
    Change-Id: I11dfb92e5966fed34f75bf5d11e3ae06530572e7
    hc_url now lighter.
    
    Get rid of the GHashTable for options. We went to a simple GSList implementation.
    It was too heavyweight when the only use case manages at most 3 tuples...
    1.8.4 release candidate
    Initial commit
    core: Specific code files for the location management
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    Adapt the code to the central config
    core: fix linkage with C++, export oiodir.h
    core: new "oio_conscience" pseudo object
    
    Used for common operations, like registering services, listing them and listing the types.
    obsolete code and macros removed
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    C API: Implement the rollback of uploaded chunks
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    core/url: Clarify the copyright coverage
    core: Expose lrutree as a public header
    Move lrutree.* from metautils/ to core/
    cmake: Only install prod-related tools in other build types than Debug
    cmake: Reorganize the targets
    
    * do not list headers, as it is recommended
    * drop the dependency to sqlite3 in oio-proxy
    core: Specific code files for the location management
    cmake: Explicit the ABI version of each shared library
    core/lb: warn if writer lock is held for too long
    C API: Implement the rollback of uploaded chunks
    core: Add a sample code for config lexx SDK usages
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    Add support for a central configuration
    
    Components:
    * a config registrar in core/oiovar.h and core/var.c
    * a code generator, confgen.py, used by cmake to generate the variable
      descriptions, the github markdown files and the CMake support
    core: implement local configuration cache
    
    This drastically reduces the number of times the proxy parses
    the configuration file.
    core: adds a minor CLI tool to put/append/replace contents
    proxy: integrate new load balancer
    lb: review for more efficiency
    cmake: added 'Werror' in CFLAGS where there is no warning
    
    Warnings are the voice of Evil.
    
    Let's try to avoid them on targets already clean.
    core: new "oio_conscience" pseudo object
    
    Used for common operations, like registering services, listing them and listing the types.
    core: now installs oiodir.h
    Tests insulated, dispatched between unit / func sets.
    
    In addition:
    * cmake: avoid installing useless headers
    * tests: fixed typos and log domains
    * tests: restored some old tests
    * server: unused/useless servers removed
    core: Directory mock added
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    core: fixed paths (now absolute) for make test (sds)
    core: added features to shuffle and partition arrays.
    
    These will be necessary for the resolvers to manage array of targets:
    * shuffling to avoid hitting always the same target
    * partioning to prefer services with no known problems.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    core: reintroduced the autocontainer hashing.
    core: hc_url renamed to oio_url.
    cmake: G_LOG_DOMAIN set at cmake's level.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    sdk: more complete sample roundtrip, renamed for more clarity.
    sdk : README, test_ns added.
    
    * test_config now prints the live configuration.
    * test_ns checks a namespace is reachable.
    sdk: new feature to collect all the compile-time configuration variables.
    
    * Compile-time options gathered in metautils
    * SDK extended with a new function
    * new sds/oio_config tool to dump the config.
    * unused CMake directives and/or macros pruned.
    sdk: new feature to collect all the compile-time configuration variables.
    
    * Compile-time options gathered in metautils
    * SDK extended with a new function
    * new sds/oio_config tool to dump the config.
    sdk: now manage replication.
    sdk: PUT minimal implementation, proxying adapted to libcurl <7.4
    sdk: the SDK now make use of the proxy.
    
    Soon, that SDK will be a replacement for the old-style C API in ./client.
    Yet the download and the delete operations are performed without any intervention of the client.
    Still the upload has to be reimplemented.
    C SDK rebooted.
    core: Prepare a Doxygen context for the C API
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    core+cluster: completed service registration/locking
    
    - removed useless tag.score
    + implemented lock_service
    core/cs: interface slightly changed
    
    score now returned when listing services.
    core/cs: API completed
    
    Also, the API has been made more robust to manage strings with '"' and UTF-8 characters in the JSON messages
    core: new "oio_conscience" pseudo object
    
    Used for common operations, like registering services, listing them and listing the types.
    C api: Extend to doc to oio_url.
    core: Prepare a Doxygen context for the C API
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    C SDK: many fixes
    
    * parallel upload fixed.
    * streamed upload fixed
    * missing fields now sent to the rawx
    * slight redesign of single upload
    * minor API change for more clarity
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    sdk: now manage replication.
    C API : fixed log initiation.
    
    Logging is disabled by default, the application can activate it via the GLib2 (https://developer.gnome.org/glib/2.38/glib-Message-Logging.html#g-log-set-default-handler).
    The verbosity is set to WARNING by default, the app. can make it more verbose whith the help of logger_init_level() (metautils/lib/metautils.h)
    OpenIO is lifting off now !
    c client: use libcurl instead of threads + rain bugfix
    conf: Manage a modifier on second-wide (epoch) time variables
    core: Explicit the value of public enums
    core/var: Manage deprecated names for existing variables
    
    Through a list of aliases, when an alias in used instead of the real
    variable name, a warning is logged.
    core/var: Introduce a readonly flag on the variables
    
    * The variables set at the CLI receive the flag.
    * readonly variables are not reset
    * a specific function is used to force a variable to a readonly value,
      and it can be used to force a behavior, programmatically.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    conf,core: Manage strings in the central config facility.
    core/var: Fix a typo
    core/var: Manage units in oio/sds.conf
    core/var: Add a function to reset all the registered variables to their default
    core/var: Load a given set of files into the central config facility
    conf: Generate only one constructor per library
    conf: Add the ability to set/get the variables of a running service
    
    Currently covers oio-proxy, oio-{sqlx,meta{0,1,2}}-server.
    
    The proxy is queried with the route `/v3.0/config` (GET and POST).
    
    The services are queried through the proxy with the route `/v3.0/forward/config?id=SRVID`.
    core/var: Protects the exported variables with gcc's visibility
    Add support for a central configuration
    
    Components:
    * a config registrar in core/oiovar.h and core/var.c
    * a code generator, confgen.py, used by cmake to generate the variable
      descriptions, the github markdown files and the CMake support
    core/lrutree: Update the copyright mention
    core/lrutree: Restore a removed function
    core/lrutree: Add the C++ guard
    Move lrutree.* from metautils/ to core/
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    metautils: add new functions to LRU-tree
    lru: removes unused code
    metautils/lru: integrates timestamps to lru entries
    
    The time management is now manageable internally, and no wrappers are
    still necessary.
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    core: Define a max user length to 1023+1
    
    (cherry picked from commit c0290cf2cca5bf87a25bb939b59e922bb47dd23b)
    core: Explicit the value of public enums
    core: Define a max user length to 1023+1
    Stop accepting composed service types
    core: Define size limits constants in core instead of metautils
    Python API, meta2: Send the content ID to create an object
    C SDK: Avoid doxygen warnings
    C api: Extend to doc to oio_url.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Rawx: make it more robust against strange path
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    core: add oio_url_check to validate components
    
    The function will check:
    - if path is a valid UTF8 string
    - if version is a number
    - if namespace matchs with provided it
    core: documentation and workaround for missing fmemopen binary mode
    core: add tests around container and object names
    core: Directory mock added
    core: URL now have mandatory accounts and a content field.
    M2V2 meta2 changed (COMPATIBILITY BREAK for PERSISTED DATA)
    
    Before was a schema like:
    
        [chunks] -> [contents] <- [headers] <- [aliases] <- [properties]
    
    Now the schema is:
    
        [chunks] -> [headers] <- [aliases] <- [properties]
    
    The pros are a logic simplification (there logic slowly became out of control), less 'beans' to be managed (transfered, stored).
    The cons is the lost of a feature: the chunk deduplication.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    core: reintroduced the autocontainer hashing.
    s/hc_url_/oio_url_/ ... continued
    core: hc_url renamed to oio_url.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    metautils: hcurl parsing now provided for the format with accounts.
    sdk: PUT minimal implementation, proxying adapted to libcurl <7.4
    metautils: the "hc_url" functions signatures does not depend on the GLib.
    
    It is now much easier to embed in external apps.
    Cleanup, round 5
    
    Events remodeled:
      * only going through a ZMQ socket
      * no kafka anymore
      * only JSON
      * no gridagent support anymore
      * got rid of the ugly polix
    
    metaX remote remodeled:
      * overall use of the hc_url structure instead of plain arguments (container_id, path, etc).
    
    hc_url remodeled:
      * Dropped the format NS.VNS / REFERENCE / PATH
      * Welcome to NS / ACCOUNT / USER / TYPE / PATH
    Unused code removed.
    Unused code removed.
    OpenIO is lifting off now !
    hc_url now lighter.
    
    Get rid of the GHashTable for options. We went to a simple GSList implementation.
    It was too heavyweight when the only use case manages at most 3 tuples...
    1.8.4 release candidate
    Initial commit
    core: Patch tool_roundtrip to restore the old behavior
    copyright: Update the mention of altered files
    core/log: Stop using the useless/unused flags
    
    * Impact only with stderr output
    * Remove a useless macro
    Stop accepting composed service types
    C API: parse properties returned during content/prepare
    Update the copyright
    proxy, meta2: Remove 'content/link'
    tests: fix chunk_size-related test from tool_roundtrip
    core,metautils: Factorize the extraction of chunk_method params
    C API: Add an option force chunks' size
    C API: configure chunk size of clients
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core/url: fixes around fullpath
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 3e12733b1ef6b247af2187db7d044c709501d0d6)
    Fix compilation issues with GCC 7
    core: allow listing properties while listing objects in C client
    core: simplifies the signature of autocontainers functions
    core: add tests around content sizes after update or append
    core: implement oio_sds_truncate() function
    core: tool_roundtrip doesn't dump the files when TRACE disabled
    core: removes the trailing '\0' when downloading
    
    Happened when downloading into a buffer.
    core: show_content is more precise
    travis: test "Release" compilation
    core: adds feature to log to stderr with ISO timestamps
    core: tests reviewed (roundtrip), cosmetic changes
    Implement metachunk replacement
    
    This will allow optimized random writes (to change 1 byte, you will
    have to download and reupload only 1 metachunk, not the whole content).
    core: more DL with ranges
    
    * non contiguous
    * not sorted
    core: tests DL of ranges crossing metachunks boundaries
    core: exposes the metachunks boundaries
    EC through gateway + rebase on master (#594)
    
    * fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    
    * event-agent: use basic http for account client
    
    * oio-bootstrap.py: fixed default schema for mail applications
    
    * metautils/lb: uses the local PRNG, uniform distribution (#582)
    
    Uses the local PRNG instead of the libc's rand(), with its guarantee on
    the uniform distribution over a given range.
    
    This should lead to better random and should fix the apparent preference
    for the first item.
    
    * Do not generate extra debug and asserts when building in RelWithDebInfo
    
    * core: implement upload and download through http gateway
    Fixes and refactoring
    
    * rawx: fixed error message
    * rawx: fixed error message + fixed useless case-sensitivity management
    * proxy: cuts the crap from several error messages
    * m2v2: unreached code removed from alias deletion
    * m2v2: minor cosmetic change
    * core/sds: enables tracing RAWX requests for highest verbosity
    * proxy: re-enables case sensitive prefix matching in headers (brings more robustness)
    * core/sds: checks for content_id's format
    * core/sds: new feature to mangle the case of http headers (proxy,
      rawx). Mangling disabled by default, activated in tests.
    * core/tool_roundtrip: activates the mangling of headers case
    * core: fake chunksnb sent
    core : add properties modification and container deletion
    core: provides a thread-local GRand lazily initialized
    
    This avoids calling the global GRand of the GLib that is protected by a
    GMutex. Less mutex operation means less syscalls (futex).
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    core/tool_roundtrip: annoying 'stdout' move to debug output.
    core: content_id now sent to the proxy
    rawx-apache2: X-oio headers now URL encoded
    
    core/sds adapted accordingly.
    C SDK: many fixes
    
    * parallel upload fixed.
    * streamed upload fixed
    * missing fields now sent to the rawx
    * slight redesign of single upload
    * minor API change for more clarity
    Hook'able clock function now used everywhere
    Dropped the dependency to the Linux's specific clock functions.
    fixed sub-type management for the services.
    
    The compound types of services are now well considered by the proxy, then transmitted in the various requests the proxy issues.
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    core / roundtrip: fixed minor memleak
    core : explicit content links implemented.
    core: aliases listing implemented.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    core: autocontainer example + link proposal
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    sdk: Fixed URL construction
    Various improvements
    
    * global error codes added
      * special codes for missing accounts, users, containers
      * client adapted.
    * containers autocreation
      * enabled in m1v2 backend
      * exposed in m1v2 remote
      * exposed in proxy
    * C SDK output reviewed
      * minimal API exposed
      * error messages normalized
    * C SDK: upload extended with the autocreation (disabled by default).
    sdk: URI-encoding management.
    sdk: more complete sample roundtrip, renamed for more clarity.
    sdk: now manage replication.
    sdk : upload continued.
    sdk: now configurable, presence check added, better error detection.
    sdk: fixed minor memory leaks
    sdk: PUT minimal implementation, proxying adapted to libcurl <7.4
    sdk: the SDK now make use of the proxy.
    
    Soon, that SDK will be a replacement for the old-style C API in ./client.
    Yet the download and the delete operations are performed without any intervention of the client.
    Still the upload has to be reimplemented.
    core/lrutree: Update the copyright mention
    core/lrutree: Restore a removed function
    Move lrutree.* from metautils/ to core/
    metautils: mess with GCC warnings
    
    These ones have been bothering me for a while.
    metautils/lru: Force slab allocations
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    metautils: add new functions to LRU-tree
    metautils: fix copy/paste error in lru_tree
    proxy: prefer MASTER for writing, SLAVE for reading
    lru: removes 'ctime' (unused in facts)
    lru: removes unused code
    metautils/lru: integrates timestamps to lru entries
    
    The time management is now manageable internally, and no wrappers are
    still necessary.
    metautils/lru: NOATIME now has no effect when handling first & last items
    obsolete code and macros removed
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    Various fixes and improvements
    
    * metautils: now uses slice allocation
    * server: now uses slice allocation
    * sdk: ReqId, fixed missing headers
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    core: Remove unused code
    core: extract upgrade-to-tls header
    server: get server-side performance data
    
    Save some performance data in the thread local data. This is disabled by
    default, can be enabled for each service (even when the service is running)
    or per request.
    Performance data is printed at the end of access log messages.
    Reduce the number of calls from meta2 to meta1
    
    Some operations like M2_CREATE, DB_USE and DB_VERS now send the list of
    peers in the request. In the case where the service does not have the
    database already, it is no more forced to call meta1 to get the list.
    
    Jira: OS-374
    Set an operation-dependent prefix on request ids
    
    Also, when compiled in debug mode, print a warning when a request without
    request ID is received.
    meta2: Allow to simulate versioning when creating and deleting an object
    sqliterepo: more request IDs
    meta2: properly reset oio_ext fields
    
    The user_agent and force_versioning was not cleaned before/after each request.
    Update max_versions of container from header
    
    This commit introduce possibility to update max_versions when creating
    object:
    this is useful for container created through autocreate functionality:
    for Container Hierarchy, enabling versioning is set on root container,
    it is not possible to parse all container to update value and
    for performance, a dedicated request to update container is skipped
    (as a lot of upload may occurs at same time)
    
    If header `x-oio-force-versioning` is received,
    the max_versions is updated before completing
    object (to keep mecanism to delete prior object if needed)
    core: allow generation of prefixed request IDs
    Allow listing to be done on master service only
    
    For several operations, when a list is done just after an object
    deletion, the listing operation may occur on a slave which has not been
    synchronized yet.
    core/lb: allow disabling distance check optimization
    
    Introduce core.lb.allow_distance_bypass variable that disables some load
    balancing optimizations that may lead to unbalanced situations. Also add
    new tests.
    meta2: Add User-Agent to the events
    core: Replace strcpy with memcpy on known size
    core/ext: Avoid debug code to be called in Release build mode
    proxy: Shuffle services if no preferred service
    Expose func to handle a thread-local deadline
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core: fix compilation issue with recent glibc
    
    (cherry picked from commit b01255c7bda3e17ace91e67680d422cbf0c31ff1)
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    core: fix compilation with ALLOW_BACKTRACE enabled
    
    If ALLOW_BACKTRACE is set, a warn is emitted but due to
    compiler settings -Werror (which include cpp switch),
    it is converted to error.
    This patch remove temporary the cpp switch for the warning.
    core/ext: Reduce the number of memory allocations
    
    The threa-dlocal request ID is now inline in the thread-local structure.
    Its size is bounded to 63 bytes (including the final zero).
    core/ext: Reduce the number of memory allocations
    
    The threa-dlocal request ID is now inline in the thread-local structure.
    Its size is bounded to 63 bytes (including the final zero).
    rdir: reboot in C
    
    Uses the same base than the oio-proxy for the network and http parts.
    core: fix compilation issue with recent glibc
    
    (cherry picked from commit b01255c7bda3e17ace91e67680d422cbf0c31ff1)
    core: ensure stat.io and stat.cpu are not negative
    core: ensure stat.io and stat.cpu are not negative
    core: fix compilation issue with recent glibc
    Adapt the code to the central config
    core/json: Fix the unpacking of JSON objects
    core: Add macros to reduce the number of realloc() and strlen()
    
    ... that happen in JSON encodings
    core: make finer stat.io measurement
    
    Avoids as possible to count I/O ops after the monotonic time snapshot.
    
    (cherry picked from commit 8ca08fbdc3943698d6c81403c37fc18369ea4a3d)
    core: make finer stat.io measurement
    
    Avoids as possible to count I/O ops after the monotonic time snapshot.
    core: fix retrieval of idle IO
    core: fixes sigsegv when stat on an unexisting directory
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    proxy: properties management unified
    
    ... when creating entities, setting properties, getting them.
    ... whatever the entity (user, container, content) the format is the
    same at the proxy level and at the backend service level.
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    Fixes and refactoring
    
    * rawx: fixed error message
    * rawx: fixed error message + fixed useless case-sensitivity management
    * proxy: cuts the crap from several error messages
    * m2v2: unreached code removed from alias deletion
    * m2v2: minor cosmetic change
    * core/sds: enables tracing RAWX requests for highest verbosity
    * proxy: re-enables case sensitive prefix matching in headers (brings more robustness)
    * core/sds: checks for content_id's format
    * core/sds: new feature to mangle the case of http headers (proxy,
      rawx). Mangling disabled by default, activated in tests.
    * core/tool_roundtrip: activates the mangling of headers case
    * core: fake chunksnb sent
    Benefits from optimized strcmp() when case sensitivity is not worth (#578)
    core: provides a thread-local GRand lazily initialized
    
    This avoids calling the global GRand of the GLib that is protected by a
    GMutex. Less mutex operation means less syscalls (futex).
    core: fixes redefinition of system symbols
    core: fixes redefinition of system symbols
    core: removes useless checks
    
    Thanks to FVE, we now know this is managed by glib2 (and documented accordingly)
    core: now allows to remove a (thread-local) ReqId
    conscience-agent: fix potential segfault in volume stats
    core: fix stat.space when inode count not available
    core/ext: commodity func. to get clocks with a precision of a second
    core + sqlx_service : still more pragmatic usage of GRand
    core/sys stats: static allocation
    Moved oio_sys_* from cluster/lib to core/ext
    
    (Functions to get the CPU & IO load)
    core/cs: API completed
    
    Also, the API has been made more robust to manage strings with '"' and UTF-8 characters in the JSON messages
    Fixed several optimisations around up/down services
    
    There were partition/shuffle problems when looping on lists of services.
    * the ok/nok qualification of services didn't work (in the resolver)
    * the shuffling was potentially broken by a subsequent partition ok ok/nok services.
    * both weren't called at all in several cases.
    core: hooks now possible to override the system time functions.
    core: explicit compile-time when backtraces enabled in errors.
    
    backtraces can break redirections, since they alter the eerrors message.
    The message is used to tell the redirection target.
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    obsolete code and macros removed
    core: added features to shuffle and partition arrays.
    
    These will be necessary for the resolvers to manage array of targets:
    * shuffling to avoid hitting always the same target
    * partioning to prefer services with no known problems.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    core/url: Clarify the copyright coverage
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Review storage policy and service pool configuration
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    OpenIO is lifting off now !
    Storage policy cleaned, storage class explicit loading
    
    Now able to load a storage class explicitely, out of any storage policy context. This is necessary for the metacd-http to process load-balancing requests with stgclass constraints. In facts, the metacd_http simply wraps the calls to metautils/lib/lb.h API.
    
    A corner case has been managed, when a storage class exists but must not have fallbacks. It was necessary to declare the storage class with an empty configuration.
    
    Then, the code has been cleaned, simplified and reordered by purpose.
    
    Change-Id: Ibd66594d53666f5ca4d1fab6d4226e1dc17ba95d
    core: Remove unused code
    proxy: Check the count of known targets to avoid segfault
    core: Merge TLS management with service_id
    
    oio_lb_item_s now contains new field. This new field is reused
    by oio_resolve_id
    lb: more weighed random, less shuffled selection
    
    Allow to configure how many times we shall try to select a service using
    a weighted random algorithm, before switching to the shuffled selection.
    Increase core.lb.weighted_random_attempts (defaults to 1) if you observe
    too many choices of low-score services while high-score services are
    available.
    lb: Improve error message when policy is not satisfiable
    lb: compare what's comparable, do not mix enums
    
    Took me several hours with GDB to find this one...
    lb: fix distance for chunks close to proxy
    code/lb: recompute final distance after the selection
    core: Fix the LB on local services (#1862)
    
    * Also also the placement of spare chunks on the local proxy.
    * core: Use service addr instead of ID for their unique key
    * lb: Pass debug message in TRACE level and restore fast lookups
    * oio-reset: Deploy a proxy with a location
    * Fix compilation warnings
    core: Fix the LB of explicitely local services
    Allow to place some chunks locally to the proxy
    lb: investigate load-balancing issues
    
    Jira: OS-369
    core: Specific code files for the location management
    core/lb: fix distance check optimization, add tests
    core/lb: allow disabling distance check optimization
    
    Introduce core.lb.allow_distance_bypass variable that disables some load
    balancing optimizations that may lead to unbalanced situations. Also add
    new tests.
    core/lb: make service ID comparisons case insensitive
    core/lb: tolerate weird pool configurations
    
    Jira: OS-314
    core/lb: enlarge the lock-protected section
    
    When polling a set of services, take the lock before the loop, instead
    of locking/unlocking at each iteration.
    
    Jira: OS-294
    core/lb: atomically register a list of services
    core/lb: improve matching of targets and known services
    core/lb: Only print a periodical warning for "BUG dirty"
    
    Once per 5 minutes
    core/lb: Remove an useless comment
    
    D.U.I. spotted! (Developer Under Influence)
    meta2: fix memory leak
    core/lb: Limit the distance to the maximum distance
    Test content.perfectible events management
    meta2: implement warn_dist mechanisms
    core/lb: keep track of the quality of selected services
    core/lb: fix the size of LB item struct
    core/lb: try to avoid over-selected services
    
    Be smart when choosing the "jump" (number used to shuffle the search).
    This is to avoid situations where some services where chosen far more
    often than others.
    core/lb: handle another missing rehash case
    core/lb: warn if writer lock is held for too long
    core/lb: improve warning messages
    core: defer locking after parsing of service IDs
    core, meta2, proxy, tests: rename things
    meta2: support use of ServiceId
    
    meta-server now support ServiceId option on command line
    (but it should be used only by meta2)
    core/lb: Replace strcpy with memcpy on known size
    core: rename misnamed function
    Expose known services from proxy/cache
    
    When asking conscience/list, if no cache is availble, request is
    forwarded to conscience itself. There was no way to check
    current status of cache of proxy.
    Core/lb: Associate UUID with addr
    core/lb: fix rdir service assignation (fix #1337)
    core/lb: prevent writes while under reader lock
    core/lb: add new LB tests
    Fix printf formats
    
    Now buildable on arm32
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core/lb: fix operation on unbalanced tight platforms
    
    Detect when we are in a "tight" situation, where we need to pick more
    services than the number of different locations. In such case, disable
    the distance checks, and rely only on the theoretical maximum number of
    services per location.
    core,metautils: Factorize the DJB hash functions
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    core/lb: Resist to services with 'location == 0'
    core/lb: better error handling, warn if flawed
    core/lb: detect max_dist when loading services
    core/lb: use unsigned integers for bit shifts
    core/lb: review the configuration
    
    Simplify the configuration of the service pools (and the code).
    Do not use bit mask, use bit shifts before comparing locations.
    The location requirements are now expressed by "distance".
    By default, there is nothing to set: the biggest distance requirements
    will be tried, and then loosened if not satisfiable.
    core/lb: improve balancing in tight situations
    
    Avoid selecting too many service of a same location, by checking
    the "popularity" of service locations selected so far.
    Fix randomly failing Python LB tests
    New LB tests for tight platforms
    
    Check how many unbalanced repartitions we get on platforms where
    there is not enough locations to ensure a perfect data securing.
    
    For example, when there is 3 host with 4 services each, and we ask
    for 9 services, the load-balancer sometimes returns 4 services from
    the first host, 2 from the second and 3 from the third,
    whereas we expect 3, 3 and 3.
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 3e12733b1ef6b247af2187db7d044c709501d0d6)
    core: Fix a typo
    
    Thanks to @fvennetier!
    lb: Expire the services that disappeared from the conscience
    
    Fix #815
    New LB tests for tight platforms
    
    Check how many unbalanced repartitions we get on platforms where
    there is not enough locations to ensure a perfect data securing.
    
    For example, when there is 3 host with 4 services each, and we ask
    for 9 services, the load-balancer sometimes returns 4 services from
    the first host, 2 from the second and 3 from the third,
    whereas we expect 3, 3 and 3.
    Fix compilation issues with GCC 7
    core: Fix a typo
    
    Thanks to @fvennetier!
    lb: Expire the services that disappeared from the conscience
    
    Fix #815
    lb: do not crash when matching with empty service list
    core: use unsigned in some structure fields
    
    This does not change the meaning of the fields, but forces the
    formating functions to print positive numbers.
    core: fix LB mask parsing
    core,m1: fix 'user_is_a_service' option handling (2)
    
    There was a problem with the location of the service for which
    the load-balancer was queried.
    core/lb: prevents an assert to be raised when a slot is empty
    lb: additional asserts on arguments
    core,m2: fix spare chunk requests
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    lb,tools: "/24" notation for masks, new tool to compute locations
    core: add new LB options: mask_max_shift and nearby_mode
    cs,core,metautils: new services and LB configuration
    
    Rearrange service types configuration to make it more clear.
    Rearrange service pools configuration to add more options.
    Compute integer service location from dotted string location.
    lb: move location mask from slot to pool
    Review storage policy and service pool configuration
    core: tests reviewed (roundtrip), cosmetic changes
    lb: fix generation of locations from addresses and add tests
    lb,proxy: add flush, refactor a bit
    proxy: integrate new load balancer
    m1v2: integrate new load balancer
    m2v2: integrate new load balancer
    lb: fix repartition and add tests
    lb: review for more efficiency
    core: Remove unused code
    core: fix GLib version check
    
    Version 2.56 was required, but some function from 2.62+ were used.
    core: adapt to recent Glib versions
    
    g_get_current_time() has been deprecated.
    copyright: Update the mention of altered files
    core/log: Minor simplification at init
    
    Nearly never used, only meaningful in testing environments using stderr
    as their log output.
    core/log: Stop using the useless/unused flags
    
    * Impact only with stderr output
    * Remove a useless macro
    core,metautils: Allow to send syslog msg to an UDP collector
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    sqliterepo: Reduce the amount of IO ops with a smarter cache
    
    Better management of modified/deleted entries in the cache of the
    `admin` table.
    sqliterepo: Reduce the amount of IO ops with a smarter cache
    
    Better management of modified/deleted entries in the cache of the
    `admin` table.
    conf: Third batch of variables
    
    udp_allowed, log_outgoing, rawx_events
    core: Add macros to reduce the number of realloc() and strlen()
    
    ... that happen in JSON encodings
    sqliterepo/election: cleaner trasitions the FSM
    
    The goal of the commit is to prevent entering a state with several
    pending callbacks that can trouble the transitions and cause messages
    storms.
    
    Only the completion events make the FSM (finite state machine) step
    forward. All the "interruptions" events are delayed until the normal
    actions are all done.
    
    Summary of the changes:
    
    * general renaming of the states to more intuitive names that denote the
      action that is pending. LEADER -> MASTER, LOST -> SLAVE.
    * new states added, so that at most one action is pending in each state.
      specially PRELOST that becomes [ASKING,CHECKING_MASTER] and CANDOK
      that becomes [WATCHING,LISTING].
    * new state added to leave-and-then-fail, instead of leaving then
      retrying.
    * Tests, tests, test. Despite the FSM is not 100% covered yet, the major
      transitions are now checked.
    * Timers simplified: since we wait for actionns before leaving an FSM
      state,.the necessity to retry an election is vastly simplified and
      only occurs from the NONE state.
    * A jitter has been introduced before sending a ping (USE) from a final
      state.
    
    Despite the result should be more stable, robust and resilient, this is
    a big set of changes and one shoould take care of possible unexpected
    effects. Especially of elections that could go more often than necessary
    in the FAILED state, and then undergo a 5s timer before the retry.
    (Prior to this commit, we would have loop-retry more often than
    necessary.)
    core: allow to log outgoing requests
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    core: reports the DEBUG log level
    core: allows to specify a custom log handler
    
    For a better integration with specific management from the applications.
    core: adds feature to log to stderr with ISO timestamps
    core: tests reviewed (roundtrip), cosmetic changes
    Benefits from optimized strcmp() when case sensitivity is not worth (#578)
    core/log: restores the system monotonic time in log traces
    Hook'able clock function now used everywhere
    Dropped the dependency to the Linux's specific clock functions.
    m2v2: shortened content ID (32 -> 16)
    
    We can achieve good unicity inside a container with only 16 bytes.
    This information is present in every entry of the tables ALIAS, CONTENT, CHUNK
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    \r\n removed from errors causes.
    
    This helps working with syslog.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Get rid of log4c emulation and some old (and unused) pieces of code.
    C API : fixed log initiation.
    
    Logging is disabled by default, the application can activate it via the GLib2 (https://developer.gnome.org/glib/2.38/glib-Message-Logging.html#g-log-set-default-handler).
    The verbosity is set to WARNING by default, the app. can make it more verbose whith the help of logger_init_level() (metautils/lib/metautils.h)
    Cleanup, round 3
    
    * VNS-config dropped: back to a single config for the NS is sent in a namespace_info structure.
      * events configuration simplified
      * service update policies simplified
    * unused functions removed from metautils
    * svc-monitor now able to manage httpd services.
    * rawx-monitor dropped (due to svc-monitor evolution)
    * monitoring scripts centralized in ./tools
    Cleanup, round 1
    
    * Removed support for quotas. OpenIO plans to do it another way.
    * Function declared "static inline" in C ocde are now just declared "static". Current compilers are smarter than programmers to detect if a piece of code should be inlined or not.
    * Unnused code removed
    OpenIO is lifting off now !
    Finer gauges for active threads, reliable accesslog delays
    
    This patch provides the maximum number of active threads, and a round-robin storage for that information.
    The granularity proposed is intervals of 1s over the past 30s, and intervals of 1 minute over the past 1 hour.
    This data is used by the core server library to expose statistics, e.g.
    
            server.thread.max.1 = 0
            server.thread.max.5 = 1
            server.thread.max.15 = 2
            server.thread.max.30 = 2
            server.thread.max.60 = 3
            server.thread.max.300 = 3
            server.thread.max.900 = 3
            server.thread.max.3600 = 3
    
    This patch also alters the accesslog format for gridd transports, and it is now unified with http transport.
    An access log record now provides 2 treatment durations:
    - the total time spent since the reception of the last buffer that completes the request
    - the total treatment time, from the moment where a worker thread starts the request handling til the moment an answer is generated.
    The delta between both delays is the time spent in the internals queues of the process.
    
    The patch divides in:
    - server/stats_holder.* :
      - drops the adherence to system time, the current timestamp is now received from the caller. This is necessary to manager counter with a granularity different than 1s.
      - New calls to compute the cumulative maximum
      - code simplification
    - server/network_server.* :
      - new round-robin stats now managed
      - new stats exposed.
      - precise monotonic clock used on the last input
    - server/transport_http.c :
      - useless variables removed.
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - server/transport_gridd.c :
      - accesslog format reviewed (timers printed : total time spent, time spent in queue)
    - sqlx/sqlx_service.c :
      - code adapted to match the lost "time adherence"
    
    Change-Id: I248ae7a1937860e4062290e95b68465d7ec62821
    metautils : logging now configurable from the environment.
    
    Used in tests.
    
    Change-Id: Ibfd4b3e8b4b067549095458dd06439db95651dbc
    2014-06-19 update from the promoter's version.
    
      * cleanup (paths, includes, macros)
      * m2v1: fix warnings
      * conscience: fix (warn on custom NONE stgpol)
      * sqliterepo: add check of redirection target (in debug mode)
      * m2v2: add retry loop for self redirections
      * c client: replaced some g_print by GRID_INFO to allow quiet mode
      * c client: add message on container destroy success
      * sqliterepo: leave election if no peers found in defer_USE
      * client/c: if m2 is replicated, make client retry
      * m2v2: handle error on exit_election
      * conscience: add check on VNS chunk_size
      * sqliterepo: fix leak
      * m2v2, c client: implement TO-HONEYCOMB-713 (chunk_size per VNS)
      * m2v2: fix TO-HONEYCOMB-715 (error after destroying not empty container)
      * sqliterepo, m2v2: improve debug traces
      * metautils: new function to compute printable thread id
      * c client: fix typo in get_virtual_namespace
      * sqliterepo: call malloc_trim after expiring bases
      * c client: fixed physical/virtual namespace confusions
      * rawx-lib: improved recovery of truncated chunks
      * rawx-lib: new options for gs_uncompress (log4c and keep_pending)
      * gridd: Fixed typo
      * gridd: timeout for idle connection is now configurable, and even disableable.
      * client : feature to change the VNS of an established client
      * replicator : VNS are now partially managed (only containers and contents) container_events are not yet supported.
      * metautils : CID computation more robust
      * meta2 / module : events when SLAVE ns + container's VNS in events instead of service's NS.
      * meta2 / lib : backend feature to get the VNS of a container
      * rawx-lib : fixed attr checks
      * cluster/dummy_service : annoying output level-lowered
      * gridd: annoying trace level-lowered
      * metautils: fix copy of chunk.metadata when its length is 0.(cherry picked from commit f5011e6d305b974319062084eac52f950a2d0270)
      * meta2: fixed TO-HONEYCOMB-678 (append on dup chunks)
      * saver: fixed TO-HONEYCOMB-677 (tsmx service not unlinked)
      * saver: now able to manage content delete events (to be tested)
      * saver: now able to make difference between PUT events and the other
      * Fixed relative #include path, that path doesn't allow a graceful split between the OSS/Proprietary parts.
      * m2v2: remove call to sleep in purge
    1.8.4 release candidate
    Initial commit
    core/url: Clarify the copyright coverage
    Remove unsupported backblaze integration
    core: Adapt the proxy client to the content/prepare evolution
    core: centralize rawx-header definitions
    core: Always patch the chunk_size, do not trust the proxy
    core: fix EC chunk_size
    
    In case of chunk_size was set, the loop inside _sds_upload_renew
    call several times
    
    (cherry picked from commit 9d95413ae1a93c76fe14c197ea39e96ac2048908)
    C client: Avoid odd config from the app.
    C API: call content/prepare when content/prepare2 not available
    C API: parse properties returned during content/prepare
    Update the copyright
    Python API, core: Add the content ID to the fullpath
    core: Unpack full path in URL
    proxy, meta2: Remove 'content/link'
    Make optional EC metachunk size patch
    core: Force slab allocations
    c client: Reduce the number of memory copies
    c client: Only feed the upload when no data ready
    core,metautils: Factorize the extraction of chunk_method params
    c client: I,crease the buffer size when calling for data
    C sdk: Restore the chunksize mangling in EC cases
    core/sds: Replace strcpy with memcpy on known size
    SDK C now use real_url from proxy
    C API: Add an option force chunks' size
    Fix compilation with json-c 0.13
    
    (cherry picked from commit ec9420d8483691a732c1be01bd4cb21fb53cf24c)
    C API: configure chunk size of clients
    Fix compilation with json-c 0.13
    C API: Avoid warning on normal conditions
    
    Thanks to @fvennetier
    C API: Implement the rollback of uploaded chunks
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    Client C, Python: Fix wrong full path send
    Rawx: make it more robust against strange path
    Rawx: Add xattr oio_version and full_path
    
    Modify the client to send the header X-oio-chunk-meta-full-path:Acct/Container/Name
    Convert the header to the xattr oio.user:Acct/Container/Name=""
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    core: fix bug at upload with C client
    
    Due to a variable mismatch, only the first chunk of the first metachunk
    was referenced in meta2 database.
    core: format code
    Python API: add support for versions in object lists
    Fix compilation issues with GCC 7
    
    (cherry picked from commit 3e12733b1ef6b247af2187db7d044c709501d0d6)
    core/sds: Fixed memory leak at upload
    core/sds: Better thread-safety around the CURL handle to the proxy
    core/sds: Manage HTTP errors from the RAWX
    
    Prior to this fix, only the network errors were taken into account.
    
    Thanks to @fvennetier!
    core/sds: Save even the failed chunks when doing EC
    
    To read an erasure-code'd message, we need the information of all the
    blocks.
    core/sds: Save only the chunks that succeeded.
    
    Does the same than #919, but in the C API.
    Avoid filling the RPC with useless fields
    
    When the RPC mode is not set to "admin", don't tell "admin=false"
    because this is the default.
    Fix compilation issues with GCC 7
    core/sds: Fixed memory leak at upload
    core/sds: Better thread-safety around the CURL handle to the proxy
    core/sds: Manage HTTP errors from the RAWX
    
    Prior to this fix, only the network errors were taken into account.
    
    Thanks to @fvennetier!
    core/sds: Save even the failed chunks when doing EC
    
    To read an erasure-code'd message, we need the information of all the
    blocks.
    core/sds: Save only the chunks that succeeded.
    
    Does the same than #919, but in the C API.
    Adapt the code to the central config
    core: documentation and workaround for missing fmemopen binary mode
    core: Add macros to reduce the number of realloc() and strlen()
    
    ... that happen in JSON encodings
    core: add OIO_USE_OLD_FMEMOPEN to choose fmemopen implementation
    
    Add -DOIO_USE_OLD_FMEMOPEN=1 on cmake commandline to use old fmemopen
    implementation. This will workaround a bug with glibc >= 2.22, but
    unfortunately won't compile with stripped glibc.
    core: allow listing properties while listing objects in C client
    core: various fixes and improvements on properties
    core: add possibility to sort chunks by score
    
    By default, chunks are shuffled before reading, so we don't ask
    always the same rawx.
    core: fix oio_sds_get_usage()
    core: fix segfault on property reading
    core: force usage of old fmemopen with glibc >= 2.22
    
    Binary mode of fmemopen() has been removed in glibc 2.22.
    Without binary mode, fmemopen() tries to add '\0' at the end of the
    buffer, but if there is no room it fails an never flushes the writes,
    leading to unpredictable behavior.
    core: fix properties setting from C client
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    core: modify set_properties and get_properties to respect new format
    core: The properties indicate in upload are set in the upload_commit step
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    core: implement oio_sds_truncate() function
    core: restores the chunk-method detection
    core: removes the trailing '\0' when downloading
    
    Happened when downloading into a buffer.
    core: uses shorter macros for cosmetic purposes
    core: bigger buffers at upload + size limitation
    core: Fixes the size reporting after a download
    core: better management of EOF in file uploads
    
    Avoids an useless INFO message
    core: show_content is more precise
    core: adds checks around partial/append constraints
    core: Adds robustness for dummy chunks positions
    core/sds: fixed memory leak
    core: tests reviewed (roundtrip), cosmetic changes
    Implement metachunk replacement
    
    This will allow optimized random writes (to change 1 byte, you will
    have to download and reupload only 1 metachunk, not the whole content).
    core: more DL with ranges
    
    * non contiguous
    * not sorted
    core: tests DL of ranges crossing metachunks boundaries
    core: exposes the metachunks boundaries
    core: introduces new macro to check the API/ABI version
    
    We plan to introduce fields in some structures. We need such a simple
    way to let the application programmer check its installation is correct
    and check the version it used at compile time was the same the version
    currently known by the library.
    ecd: adapt for Backblaze upload from C client
    c client: support backblaze upload through ECD (WIP)
    core: fix EC upload and potential segfault
    Minor fixes around erasure coding and chunk events
    Integrate new erasure coding daemon
    EC through gateway + rebase on master (#594)
    
    * fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    
    * event-agent: use basic http for account client
    
    * oio-bootstrap.py: fixed default schema for mail applications
    
    * metautils/lb: uses the local PRNG, uniform distribution (#582)
    
    Uses the local PRNG instead of the libc's rand(), with its guarantee on
    the uniform distribution over a given range.
    
    This should lead to better random and should fix the apparent preference
    for the first item.
    
    * Do not generate extra debug and asserts when building in RelWithDebInfo
    
    * core: implement upload and download through http gateway
    core: better management of unknown namespaces (#591)
    core: fix warnings happening with some libcurl/gcc versions (2) (#589)
    core: fix warnings happening with some libcurl/gcc versions (2)
    Fixes and refactoring
    
    * rawx: fixed error message
    * rawx: fixed error message + fixed useless case-sensitivity management
    * proxy: cuts the crap from several error messages
    * m2v2: unreached code removed from alias deletion
    * m2v2: minor cosmetic change
    * core/sds: enables tracing RAWX requests for highest verbosity
    * proxy: re-enables case sensitive prefix matching in headers (brings more robustness)
    * core/sds: checks for content_id's format
    * core/sds: new feature to mangle the case of http headers (proxy,
      rawx). Mangling disabled by default, activated in tests.
    * core/tool_roundtrip: activates the mangling of headers case
    * core: fake chunksnb sent
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    core : add properties modification and container deletion
    c client: set storage policy when commiting chunks
    core: proper sockopt set
    
    * SO_REUSEADDR
    * SO_REUSEPORT (if available)
    * SO_LINGER (toward proxy)
    * TCP_NODELAY (toward proxy)
    
    + minor refactoring
    core,proxy: sort chunks by score in client instead of proxy
    proxy: container/destroy plainly destroys the containers and their references
    
    * a container destruction is now: 1/freeze 2/flush 3/unlink 4/destroy(local)
    * meta2 slighty simplified around PURGE/DEDUP/FLUSH, where the dry_run options have disappeared.
    core: allow getting container usage and quota
    core: fixed memleak at upload (metachunk_done)
    core: fix memory problem
    server: simplification!
    
    * server: Thread management now performed with a glib-2.0's GThreadPool
    * server: more logs upon idle connections
    * server: stats simplified a lot, the old stats_holder was over-engineered. Now a stat is identified by a glib-2.0's GQuark and their set is mannaged by a (singleton) GTreadPool.
    * proxy: stats (count,time) introduced for every route.
    * oio-tool new options (lean, kill) + backend counterparts.
    * common: got rid of specific GRand instanciated, specially thoose called on a per-request basis. They caused unwanted I/O ops (open/read/close) on "/dev/urandom".
    core,http_put: fix memory leaks
    core: add oio_sds_create() function
    Fixed compilation on x86_32
    core: fixed upload of empty contents
    core: content_id now sent to the proxy
    core: fixed chunk position printing
    Fixed printf formats
    Fixed printf format warnings
    
    Raised when compiling for 32bit architectures.
    rawx-apache2: X-oio headers now URL encoded
    
    core/sds adapted accordingly.
    core: fixed upload from file with forced size
    core: fixed erasure coding detection
    core/upload: hook semantics changed
    
    Allows to manage the special case where no data is immediately available.
    core: fixed verboosity of debug messages
    
    Remainings from the dev...
    core: Prevents NULL ReqId to be sent in requests
    
    That could happen when an oio_sds_s was initiated into a thread and used in another.
    the ReqId was stored in GThreadLocal placeholders.
    core: content-hash now computed and stored.
    core+rawx+rainx: contet's fields now saved into xattr
    
    Uniform scheme for HTTP headers in those services.
    C SDK: many fixes
    
    * parallel upload fixed.
    * streamed upload fixed
    * missing fields now sent to the rawx
    * slight redesign of single upload
    * minor API change for more clarity
    core/sds: fixed position format and chunks sequence management
    Fixed several optimisations around up/down services
    
    There were partition/shuffle problems when looping on lists of services.
    * the ok/nok qualification of services didn't work (in the resolver)
    * the shuffling was potentially broken by a subsequent partition ok ok/nok services.
    * both weren't called at all in several cases.
    Hook'able clock function now used everywhere
    fixed sub-type management for the services.
    
    The compound types of services are now well considered by the proxy, then transmitted in the various requests the proxy issues.
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    fix range checks on core/sds client
    proxy: V3 routes now used in core/, V2 routes removed from the proxy
    
    Some functional tests still require to be adapted (container, reference)
    core / sds: fixed compile warnings, fixed memleak when explicitely linking.
    core : explicit content links implemented.
    core: aliases listing implemented.
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    core: autocontainer example + link proposal
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Various fixes and improvements
    
    * metautils: now uses slice allocation
    * server: now uses slice allocation
    * sdk: ReqId, fixed missing headers
    sdk: Fixed URL construction
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    Various improvements
    
    * global error codes added
      * special codes for missing accounts, users, containers
      * client adapted.
    * containers autocreation
      * enabled in m1v2 backend
      * exposed in m1v2 remote
      * exposed in proxy
    * C SDK output reviewed
      * minimal API exposed
      * error messages normalized
    * C SDK: upload extended with the autocreation (disabled by default).
    Fixed several warnings appeared with recent GCC versions
    
    * improved printf format checks.
    * fixed formatting weaknesses
    * fixed "unmanaged results" in some functions.
    * fixed unused paramerers
    * tools: adds missing 'import syslog' in monitoring scripts.
    sdk: content checksum now computed.
    sdk: URI-encoding management.
    sdk: fixed headers management.
    sdk: new feature to collect all the compile-time configuration variables.
    
    * Compile-time options gathered in metautils
    * SDK extended with a new function
    * new sds/oio_config tool to dump the config.
    * unused CMake directives and/or macros pruned.
    sdk: new feature to collect all the compile-time configuration variables.
    
    * Compile-time options gathered in metautils
    * SDK extended with a new function
    * new sds/oio_config tool to dump the config.
    Fixed json parsing of service_info
    
    + Pretty formatting effort.
    Various cleanups
    
    * proxy: better error management, now able to multiple-bind
    * proxy: fixed when forcing services for references.
    * server: fixed REUSEADDR behaviour
    * server: fixed cleanup of UNIX sockets.
    * json extraction factorized in metautils
    * useless files removed.
    * minimal cache interface added to metautils
    sdk: sync after download
    sdk: now manage replication.
    sdk : upload continued.
    sdk: hash set in each chunk when putting a content.
    sdk: now configurable, presence check added, better error detection.
    sdk: fixed minor memory leaks
    sdk: PUT minimal implementation, proxying adapted to libcurl <7.4
    sdk: the SDK now make use of the proxy.
    
    Soon, that SDK will be a replacement for the old-style C API in ./client.
    Yet the download and the delete operations are performed without any intervention of the client.
    Still the upload has to be reimplemented.
    Fixed typo
    
    (oio_sds.h has been insulated into ./sdk)
    C SDK rebooted.
    core: Remove unused code
    conf: Manage a modifier on second-wide (epoch) time variables
    core/var: Replace strncpy with g_strlcpy
    core/var: Manage deprecated names for existing variables
    
    Through a list of aliases, when an alias in used instead of the real
    variable name, a warning is logged.
    core/var: Introduce a readonly flag on the variables
    
    * The variables set at the CLI receive the flag.
    * readonly variables are not reset
    * a specific function is used to force a variable to a readonly value,
      and it can be used to force a behavior, programmatically.
    Fix configuration reload SEGFAULT on SIGHUP
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    conf,core: Manage strings in the central config facility.
    core/var: Rename macros for the sake of correctness!
    core/var: Manage units in oio/sds.conf
    core/var: Add a function to reset all the registered variables to their default
    core/var: Load a given set of files into the central config facility
    conf: Add the ability to set/get the variables of a running service
    
    Currently covers oio-proxy, oio-{sqlx,meta{0,1,2}}-server.
    
    The proxy is queried with the route `/v3.0/config` (GET and POST).
    
    The services are queried through the proxy with the route `/v3.0/forward/config?id=SRVID`.
    core: Loads the configuration in the proxy
    
    + Fix the min/max bounding behavior in the central configuration module
    Add support for a central configuration
    
    Components:
    * a config registrar in core/oiovar.h and core/var.c
    * a code generator, confgen.py, used by cmake to generate the variable
      descriptions, the github markdown files and the CMake support
    core: Remove unused code
    core/cfg: Avoid overriding NS config with local files
    
    Only load the sections related to a NS if it is unknown yet.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    core/cfg: New call to check if a NS is locally known
    core: Fix a memleak around the local cached configuration
    core: Loads the configuration in the proxy
    
    + Fix the min/max bounding behavior in the central configuration module
    core: implement local configuration cache
    
    This drastically reduces the number of times the proxy parses
    the configuration file.
    sqliterepo: shuffle the ZK cnx string before usage
    EC through gateway + rebase on master (#594)
    
    * fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    
    * event-agent: use basic http for account client
    
    * oio-bootstrap.py: fixed default schema for mail applications
    
    * metautils/lb: uses the local PRNG, uniform distribution (#582)
    
    Uses the local PRNG instead of the libc's rand(), with its guarantee on
    the uniform distribution over a given range.
    
    This should lead to better random and should fix the apparent preference
    for the first item.
    
    * Do not generate extra debug and asserts when building in RelWithDebInfo
    
    * core: implement upload and download through http gateway
    sqliterepo/election: memleak chased
    core: fixed usage of the ternary operator
    sqlx client : API proposal
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Annoying traces removed
    
    * "oio <command>" debug trace : INFO -> DEBUG
    * gridcluster false error DEBUG->TRACE
    * minor code reorganisation (oio help sections)
    OpenIO is lifting off now !
    1.8.4 release candidate
    Initial commit
    c client: Manage unset timeouts
    c client: Fix the timeout enforcement
    c client: Allow to configure the libcurl buffer size toward rawx
    core/http: Make configurable the {SND,RCV]BUF toward the proxy
    core: Set a small sockt buffer for proxy RPC
    C API: allow configuration of rawx timeouts
    
    Allow configuration of connection and overall request timeouts to rawx
    services, from sds.conf configuration file.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    core: Make the User-Agent configurable
    
    And disable it by default. This will save tens of bytes per request
    (proxy or rawx).
    core/curl: Avoid intercepting signals upon curl errors
    
    Impacts the oio-sds C SDK and the meta* services while they contact the proxy.
    core/sds: Fixed memory leaks
    
    The oiosds SDK leaked 40 bytes for each metahcunk it uploaded.
    core/http: Fix an unused variable
    core/http: Fix the management of cnx errors
    core/curl: Avoid intercepting signals upon curl errors
    
    Impacts the oio-sds C SDK and the meta* services while they contact the proxy.
    core/sds: Fixed memory leaks
    
    The oiosds SDK leaked 40 bytes for each metahcunk it uploaded.
    core: Disable TCP_FASTOPEN toward rawx
    
    It has been reported by @fvennetier that libcurl==7.53 poorly manages
    the TCP_FASTOPEN when it is supportedbut disabled by a 0 set in
    /proc/sys/net/ipv4/tcp_fastopen
    core: Enables TCP_FASTOPEN in the proxy C client
    
    Only valid with curl >= 7.49
    
    https://curl.haxx.se/libcurl/c/CURLOPT_TCP_FASTOPEN.html
    core/http: Fix an unused variable
    core/http: Fix the management of cnx errors
    core: Prevent ENV[http_proxy] to be used
    core: fix som compilation warnings
    core+metautils: code cleanup, functions {re,}moved
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    core: allows to specify a custom log handler
    
    For a better integration with specific management from the applications.
    C client: avoid keeping rawx connections open
    core: tests reviewed (roundtrip), cosmetic changes
    core: fix warnings happening with some libcurl/gcc versions (2) (#589)
    core: fix warnings happening with some libcurl/gcc versions (2)
    core: fix warnings happening with some libcurl/gcc versions (#588)
    Fixes and refactoring
    
    * rawx: fixed error message
    * rawx: fixed error message + fixed useless case-sensitivity management
    * proxy: cuts the crap from several error messages
    * m2v2: unreached code removed from alias deletion
    * m2v2: minor cosmetic change
    * core/sds: enables tracing RAWX requests for highest verbosity
    * proxy: re-enables case sensitive prefix matching in headers (brings more robustness)
    * core/sds: checks for content_id's format
    * core/sds: new feature to mangle the case of http headers (proxy,
      rawx). Mangling disabled by default, activated in tests.
    * core/tool_roundtrip: activates the mangling of headers case
    * core: fake chunksnb sent
    core: proper sockopt set
    
    * SO_REUSEADDR
    * SO_REUSEPORT (if available)
    * SO_LINGER (toward proxy)
    * TCP_NODELAY (toward proxy)
    
    + minor refactoring
    core: fix memory problem
    core,http_put: fix memory leaks
    core: fix memory leak in http_put
    Fixed compilation on x86_32
    Efforts arounds tests industrialisation
    
    * travis: tests also fired with duplication (stgpol = THREECCOPIES)
    * travis: make -j N, tests with non-default NS names.
    * cflags: added -Wno-missing-field-initializers (it allows -Werror with static zeroed stack-allocation of structures, cf. C99 standard)
    * oio-reset.sh: fixed when killing an existing instance
    * tests: code factorized (macro for init, env considered, etc)
    * tests: fixed static zeroing
    * tests: now requires OIO_NS to be set in the env
    * code overall: Static zeroing of structures (={0} instead of memset)
    tests/http: fixed upload logic in the test
    core: content-hash now computed and stored.
    C SDK: many fixes
    
    * parallel upload fixed.
    * streamed upload fixed
    * missing fields now sent to the rawx
    * slight redesign of single upload
    * minor API change for more clarity
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    Fixed warnings (unused symbols)
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    G_LOG_DOMAIN lazy defs removed
    
    This is now managed by cmake.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Various improvements
    
    * global error codes added
      * special codes for missing accounts, users, containers
      * client adapted.
    * containers autocreation
      * enabled in m1v2 backend
      * exposed in m1v2 remote
      * exposed in proxy
    * C SDK output reviewed
      * minimal API exposed
      * error messages normalized
    * C SDK: upload extended with the autocreation (disabled by default).
    sdk: now manage replication.
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    Cleanup, round 6
    
    * broken elements removed (to be replaced soon by a pythonic and event-based implementation).
    * (internal) metautils features related to messages now prefixed to prevent names resolutions collisions with cyrus.
    * dead code pruned from metautils
    * bzero replaced by memset, useless memset removed.
    * more uses of macros
    client : unused code removed (delete on rawx).
    
    Since the C client does not delete the chunks itself, these features are now useless.
    OpenIO is lifting off now !
    c client: use libcurl instead of threads + rain bugfix
    core: Adapt the proxy client to the content/prepare evolution
    copyright: Update the mention of altered files
    core/log: Stop using the useless/unused flags
    
    * Impact only with stderr output
    * Remove a useless macro
    tool_sdk: Load the central config files to load the variables
    C API: Implement the rollback of uploaded chunks
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    core/tool/put: Fixed minor memory leak
    core/tool/put: Fixed minor memory leak
    core: modifies tool_sdk to make it load the content_id when necessary
    core: adds a minor CLI tool to put/append/replace contents
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    Adapt the code to the central config
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    Fixes and refactoring
    
    * rawx: fixed error message
    * rawx: fixed error message + fixed useless case-sensitivity management
    * proxy: cuts the crap from several error messages
    * m2v2: unreached code removed from alias deletion
    * m2v2: minor cosmetic change
    * core/sds: enables tracing RAWX requests for highest verbosity
    * proxy: re-enables case sensitive prefix matching in headers (brings more robustness)
    * core/sds: checks for content_id's format
    * core/sds: new feature to mangle the case of http headers (proxy,
      rawx). Mangling disabled by default, activated in tests.
    * core/tool_roundtrip: activates the mangling of headers case
    * core: fake chunksnb sent
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    core: Remove unused code
    core: Force slab allocations
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    core: Add macros to reduce the number of realloc() and strlen()
    
    ... that happen in JSON encodings
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    core: proper sockopt set
    
    * SO_REUSEADDR
    * SO_REUSEPORT (if available)
    * SO_LINGER (toward proxy)
    * TCP_NODELAY (toward proxy)
    
    + minor refactoring
    core: fix leak when deserializing service tags
    core: parse tags when listing services through proxy
    core+cluster: completed service registration/locking
    
    - removed useless tag.score
    + implemented lock_service
    core/cs: adapted to a evolution of the core library
    core/cs: interface slightly changed
    
    score now returned when listing services.
    core: fix cs registration with several tags/stats
    core/cs: API completed
    
    Also, the API has been made more robust to manage strings with '"' and UTF-8 characters in the JSON messages
    core/cs: fixed listing of services and types
    
    srv listing not yet functional (not parsed).
    core/cs: proxy instanciation + partial func test
    core: new "oio_conscience" pseudo object
    
    Used for common operations, like registering services, listing them and listing the types.
    core: Merge TLS management with service_id
    
    oio_lb_item_s now contains new field. This new field is reused
    by oio_resolve_id
    Allow to place some chunks locally to the proxy
    core: Specific code files for the location management
    core/lb: tolerate weird pool configurations
    
    Jira: OS-314
    core/lb: atomically register a list of services
    meta2: fix memory leak
    Test content.perfectible events management
    meta2: implement warn_dist mechanisms
    core/lb: keep track of the quality of selected services
    core/lb: fix the size of LB item struct
    core/lb: warn if writer lock is held for too long
    core, meta2, proxy, tests: rename things
    meta2: support use of ServiceId
    
    meta-server now support ServiceId option on command line
    (but it should be used only by meta2)
    core: rename misnamed function
    Expose known services from proxy/cache
    
    When asking conscience/list, if no cache is availble, request is
    forwarded to conscience itself. There was no way to check
    current status of cache of proxy.
    Core/lb: Associate UUID with addr
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    core/lb: better error handling, warn if flawed
    core/lb: review the configuration
    
    Simplify the configuration of the service pools (and the code).
    Do not use bit mask, use bit shifts before comparing locations.
    The location requirements are now expressed by "distance".
    By default, there is nothing to set: the biggest distance requirements
    will be tried, and then loosened if not satisfiable.
    core/lb: improve balancing in tight situations
    
    Avoid selecting too many service of a same location, by checking
    the "popularity" of service locations selected so far.
    lb: Expire the services that disappeared from the conscience
    
    Fix #815
    lb: Expire the services that disappeared from the conscience
    
    Fix #815
    core: Fix a printf format for locations
    lb,tools: "/24" notation for masks, new tool to compute locations
    core: add new LB options: mask_max_shift and nearby_mode
    cs,core,metautils: new services and LB configuration
    
    Rearrange service types configuration to make it more clear.
    Rearrange service pools configuration to add more options.
    Compute integer service location from dotted string location.
    Review storage policy and service pool configuration
    lb,proxy: add flush, refactor a bit
    proxy: integrate new load balancer
    m1v2: integrate new load balancer
    m2v2: integrate new load balancer
    lb: fix repartition and add tests
    lb: review for more efficiency
    core: Adapt the proxy client to the content/prepare evolution
    C API: Don't return 421 (content exists) after retrying POST
    C API: Don't retry when requesting the oio-proxy
    Stop accepting composed service types
    C API: call content/prepare when content/prepare2 not available
    C API: parse properties returned during content/prepare
    Update the copyright
    proxy, meta2: Remove 'content/link'
    core: Add function to delete directory
    Python API, CLI: keep track of request durations
    
    First step: keep track of resolving and request times in proxy,
    then rawx request time in Python API.
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    oio-event-benchmark: Format code
    oio-event-benchmark: Format code
    Add functions for the routes 'reference/force' and 'reference/unlink' of proxy
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    core: Fix a pointer management in the C proxy client
    core/proxy: Retry when the proxy replies a 503/Retry-After
    core: Fix the error detection on failed calls to the proxy
    proxy: Fix obscure error reporting by the proxy (WIP)
    core: Add macros to reduce the number of realloc() and strlen()
    
    ... that happen in JSON encodings
    core: allow listing properties while listing objects in C client
    core: various fixes and improvements on properties
    core: fix oio_sds_get_usage()
    core: fix properties setting from C client
    core: modify set_properties and get_properties to respect new format
    core: The properties indicate in upload are set in the upload_commit step
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    core: implement oio_sds_truncate() function
    core: tests reviewed (roundtrip), cosmetic changes
    Implement metachunk replacement
    
    This will allow optimized random writes (to change 1 byte, you will
    have to download and reupload only 1 metachunk, not the whole content).
    core: exposes the metachunks boundaries
    Integrate new erasure coding daemon
    EC through gateway + rebase on master (#594)
    
    * fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    
    * event-agent: use basic http for account client
    
    * oio-bootstrap.py: fixed default schema for mail applications
    
    * metautils/lb: uses the local PRNG, uniform distribution (#582)
    
    Uses the local PRNG instead of the libc's rand(), with its guarantee on
    the uniform distribution over a given range.
    
    This should lead to better random and should fix the apparent preference
    for the first item.
    
    * Do not generate extra debug and asserts when building in RelWithDebInfo
    
    * core: implement upload and download through http gateway
    core: better management of unknown namespaces (#591)
    core: fix warnings happening with some libcurl/gcc versions (2) (#589)
    core: fix warnings happening with some libcurl/gcc versions (2)
    core: fix warnings happening with some libcurl/gcc versions (#588)
    Fixes and refactoring
    
    * rawx: fixed error message
    * rawx: fixed error message + fixed useless case-sensitivity management
    * proxy: cuts the crap from several error messages
    * m2v2: unreached code removed from alias deletion
    * m2v2: minor cosmetic change
    * core/sds: enables tracing RAWX requests for highest verbosity
    * proxy: re-enables case sensitive prefix matching in headers (brings more robustness)
    * core/sds: checks for content_id's format
    * core/sds: new feature to mangle the case of http headers (proxy,
      rawx). Mangling disabled by default, activated in tests.
    * core/tool_roundtrip: activates the mangling of headers case
    * core: fake chunksnb sent
    core : add properties modification and container deletion
    Benefits from optimized strcmp() when case sensitivity is not worth (#578)
    c client: set storage policy when commiting chunks
    conscience reviewed
    
    * cluster/module: hub added as a full-mesh of ZMQ PUB/SUB, allowing several
      consciences to work in a master/master fashion
    * cluster/module: services locked when first registering (though, oio-reset.sh unlocks them all)
    * cluster/module: disables access logs on "too common" requests
    * cluster/agent: removed since unused
    * cluster/lib: agent's code removed
    * cluster/tool: agent-specific actions removed
    * proxy: now the signle pint to access the conscience, adapted to manage
      multiple conscience. Currently chooses one random conscience with no
      fallback yet upon error.
    * core: timeout set to 1s to the conscience
    * metautils: removes a useless and error-prone field of 'struct namespace_info_s'
    * conscience: now only accessed by the proxy
    * python/tests: tests updated
    * gridd: removes annoying & useless TRACE
    * core: declares error codes and macros
    * core: modifies the pseudo-class of conscience clients
    * core: A whole "registration" is now required when locking or unlocking services.
            This helps an implementation decing whether to use the service ID of its
            URL.
    * proxy: fixes http status when expecting 503
    * proxy: code adapted to the change in core
    * proxy: better status code for unreachable services
    * proxy: fixes timeout management for known service (cf. "lock at first registration")
    
    travis + bootstrap: better tests integration
    
    * tools: reset/bootstrap fixed and renamed for more clarity
    * oio-reset.sh: the proxy URL is now read from test.conf
    * oio-reset.sh: more debug about services when waiting for them to be registered.
    * oio-reset.sh: output /dev/null'ed for several commands (lighter output)
    * oio-reset.sh: asks a full meta1 reload before exiting
    * oio-bootstrap.py: macro normalized
    * oio-bootstrap.py: adapted to the conscience's evolution
    * travis: provides more debug upon failure
    * travis: dumps /var/log/syslog before exiting
    Protects some calls to g_strv_length()
    core: allow getting container usage and quota
    core: fix invalid JSON reported by oio-proy
    core/proxy: reqID lazily set to a random hexstring
    core,proxy: free request body
    core: add oio_sds_create() function
    core: stronger checks around URL handlings
    core/cs: API completed
    
    Also, the API has been made more robust to manage strings with '"' and UTF-8 characters in the JSON messages
    core/proxy: fixed srvtype listing (bad route)
    core: new "oio_conscience" pseudo object
    
    Used for common operations, like registering services, listing them and listing the types.
    core: fixed verboosity of debug messages
    
    Remainings from the dev...
    core: Prevents NULL ReqId to be sent in requests
    
    That could happen when an oio_sds_s was initiated into a thread and used in another.
    the ReqId was stored in GThreadLocal placeholders.
    core: content-hash now computed and stored.
    C SDK: many fixes
    
    * parallel upload fixed.
    * streamed upload fixed
    * missing fields now sent to the rawx
    * slight redesign of single upload
    * minor API change for more clarity
    Hook'able clock function now used everywhere
    core: pseudo-object directory client continued + tests
    fixed sub-type management for the services.
    
    The compound types of services are now well considered by the proxy, then transmitted in the various requests the proxy issues.
    core: Directory mock added
    proxy+core: normalized headers
    Full-stack refactoring
    
    * core: piloted "female" parallel http PUT implemented
    * core: upload for streams. With the help of the femalisation of the upload, it became easy to ask for chunks locations when new data was available.
    * minor code reorganisation: the error codes where necessary in the C sdk, so they have been moved
      * metautils: enum removed
      * core: enum added
      * proxy: code adapted.
    * metautils: redundant function strlen_len() removed
    * m2v2: when generating beans, the content ID is now set to something unique, and the alias version is set to a timestamp. This is destined to be reused at the PUT step.
    * proxy: now propagates the version and ID received from the m2v2. This is present is the headers.
    * rawx: new fields managed and stored in the xattr
    core: implement array filtering function
    core/lb: make service ID comparisons case insensitive
    proxy: List orphan aliases with all keys
    Update the copyright
    rawx: Check content fullpath
    sqliterepo/election: React to an unknown MASTER
    
    Weird case managed or the sake of robustness
    Disallow using an unknown storage policy
    
    Fixes #1153
    server: allow non-hexadecimal request IDs
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    oio-event-benchmark: Add event 'content.deleted'
    core: Slight code reorganisation
    
    * Update the license preambles
    * Reorder the includes to match the c/c++ rules of cpplint
    * Removes useless includes
    * Removes unused functions
    sqliterepo: Ensure there is a consistant output when locating the peers
    
    Either the error or the peers should be set, but never none nor both!
    Also, returning "no peer but no error" de facto become an empty array
    and never a NULL array anymore.
    conf: Generate only one constructor per library
    core: Fix a typo
    core: Clarify a function usage in its comment
    core: Add macros to reduce the number of realloc() and strlen()
    
    ... that happen in JSON encodings
    core: code factorisation (integer format check)
    core: fixed comments
    core: simplifies the signature of autocontainers functions
    sqlx: fix property deletion
    proxy: fixes /content/create
    proxy: properties management unified
    
    ... when creating entities, setting properties, getting them.
    ... whatever the entity (user, container, content) the format is the
    same at the proxy level and at the backend service level.
    core+metautils: code cleanup, functions {re,}moved
    Properties cleanup: unified protocol
    
    COMPATIBILITY BREAK
    
    * proxy: format modified for properties-related routes
    * asn1c: dropped a lot of useless messages dedicated to properties
             variants. From 5 methods, just one remains (JSON).
    * unused code removed
    cs,core,metautils: new services and LB configuration
    
    Rearrange service types configuration to make it more clear.
    Rearrange service pools configuration to add more options.
    Compute integer service location from dotted string location.
    Review storage policy and service pool configuration
    core: tests reviewed (roundtrip), cosmetic changes
    lb: review for more efficiency
    Fixes and refactoring
    
    * rawx: fixed error message
    * rawx: fixed error message + fixed useless case-sensitivity management
    * proxy: cuts the crap from several error messages
    * m2v2: unreached code removed from alias deletion
    * m2v2: minor cosmetic change
    * core/sds: enables tracing RAWX requests for highest verbosity
    * proxy: re-enables case sensitive prefix matching in headers (brings more robustness)
    * core/sds: checks for content_id's format
    * core/sds: new feature to mangle the case of http headers (proxy,
      rawx). Mangling disabled by default, activated in tests.
    * core/tool_roundtrip: activates the mangling of headers case
    * core: fake chunksnb sent
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    proxy: prefer MASTER for writing, SLAVE for reading
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    core: minor feature addition (compute length of void**)
    core: avoids system's size_t when an int is enough
    core: avoids system's size_t when an int is enough
    proxy: quote property values when building JSON response
    Useless/Unused functions removed
    core/cs: API completed
    
    Also, the API has been made more robust to manage strings with '"' and UTF-8 characters in the JSON messages
    core+metautils: str_{upper,lower} moved from metautils to core
    proxy: sqlx properties fixed
    proxy: sqlx properties fixed
    core / sds : new features added
    
    * core:
      * upload from a buffer / file / hook
      * download to a buffer / file / hook
      * aliases listing (NYI)
      * explicit linking (NYI)
      * testing improved
    * tools:
      * CLI tools renamed with the prefix "tool_", because "test_" is dedicated to unit/functional tests.
    * m2v2:
      * list by content ID
      * content explicit links
    core: autocontainer example + link proposal
    core: reintroduced the autocontainer hashing.
    oiocore created
    
    Created with the minimal features set from metautils that was used in the SDK.
    The "SDK_ONLY" management have been adapted : far less dependencies (only curl, json-c, glib-2.0)
    The naming conventions have been reviewed.
    Python API: remove unused LazyLoader class
    event: review event-agent configuration options
    
    - Update sample configuration file.
    - Print a link to the configuration sample when no argument is passed.
    - Print a warning when a deprecated option is used.
    Python API: hack the root module
    Add LazyLoader for ObjectStorageApi
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    tests: new test of account stats after container deletion
    
    The current implementation of this test is slow, because there is
    a 5s delay before event generation.
    tests: new test of account stats after container deletion
    
    The current implementation of this test is slow, because there is
    a 5s delay before event generation.
    Python API: get rid of DirectoryAPI (replaced by DirectoryClient)
    Python API: expose ObjectStorageApi at top level
    core: move python files around
    remove pbr runtime dependency
    python: now build with setupttools and pbr
    removed version in module
    event agent WIP
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    OpenIO is lifting off now !
    oio/integrity: Relicence to LGPL
    Revert "Python API: Allow to use dict with timeout"
    
    This reverts commit 4d281ce49f0d41fdebbae5235753d5478e768f99.
    Python API: Allow to use dict with timeout
    CI: enable python3 unit tests
    
    Jira: R1910-1
    oio/crawler: fix endless listing loop
    oio-crawler-integrity: send broken object events
    
    Send broken object events to a user-selected queue, for exemple the
    input queue of oio-blob-rebuilder. It is advised to also specify a delay
    before sending events, otherwise temporary failures may trigger unwanted
    chunk rebuilds.
    oio-crawler-integrity: report problems after confirmations
    
    Implement new parameters to control when the tool reports problems:
    - after a specified number of confirmations,
    - after a specified delay.
    
    Also, allow the tool to wait between passes.
    oio-crawler-integrity: report missing chunk positions
    
    Missing chunk positions were reported on the standard log, but not in
    output files. This is now fixed.
    
    Also, check the number of chunks against the quorum before reporting
    errors, such that missing chunks are potentially reported as
    irreparable (and not uselessly sent to the blob-rebuilder).
    oio-crawler-integrity: test rebuilder-input
    crawler-integrity: Make rebuilder-file fd accessible for test
    oio-crawler-integrity: fix output error when checking object
    
    The cid code comes from e043837165bbcf38ee50d295f83c7c41bab3e61b
    Jira: OS-423
    oio-crawler-integrity: new logging and rate limiting parameters
    
    Jira: R1904-22
    Fix import eventlet.Semaphore
    
    Jira: OS-385
    
    eventlet.Semaphore exists since version 0.20.1:
    https://github.com/eventlet/eventlet/commit/79292bd16a6a1384d8c3d11bcefa40eb53bbeae4#diff-e8a149cf9a6b76be0526ba05331438c5R42.
    But Centos 7 uses version 0.18.4.
    Admin CLI: Rename '--output-for-blob-rebuilder' to '--output-for-chunk-rebuild'
    Allow to recover object meta when checking a missing chunk
    Test 'openio-admin object check'
    crawler: provide informations from rdir to crawler
    
    When `openio-admin rawx check` found an indexed chunk from rdir
    but missing on rawx, the CLI stops.
    
    This commit enrich crawler checker with fields retrieved from rdir.
    Admin CLI: Fail if there is at least one error
    oio-crawler-integrity: fix concurrency issues
    oio-crawler-integrity: allow to check all accounts
    CLI-admin: add --checksum for check
    CLI: implement --depth parameter for check commands
    CLI: hide not-implemented feature, fix chunk attr parsing
    oio-crawler-integrity: fix stdout logging
    CLI: support checking object versions, log to files
    
    Support checking multiple object versions (only the latest was checked)
    with oio-crawler-integrity and 'openio-admin object check' (and related
    commands).
    
    Also allow 'openio-admin <item_type> check' to log to files, as does
    oio-crawler-integrity.
    
    Jira: OB-339
    CLI: implement 'openio-admin <item_type> check'
    Python API: improve missing chunk xattr error messages
    oio-crawler-integrity: Detect irreparable objects
    Python API: Fix concurrency
    Test oio-{blob,meta1,meta2}-rebuilder
    oio-blob-rebuilder: display where chunks have been rebuilt
    oio-crawler-integrity: still do full listings when reading from stdin
    oio-crawler-integrity: expose Account as mandatory
    oio-crawler-integrity: use limit if prefix is set
    oio-crawler-integrity: use container as prefix
    
    When container is set on command line, use it as prefix to avoid
    perform a full listing on account.
    oio-crawler-integrity: make account mandatory
    
    If only namespace was given, no check was done as if was empty !
    oio-crawler-integrity: use object as prefix
    
    When object is set on command line, use it as prefix to avoid
    perform a full listing on container.
    
    This commit fix #1370 issue.
    Python API: retry reading properties after error
    
    The legacy way of fetching properties is buggy when there is a lot of
    them. In case of error, retry with the new way (the drawback is that it
    does 2 requests instead of one).
    
    Fix #1369
    oio-crawler-integrity: expose concurrency parameter
    Fix crawler integrity
    oio-crawler-integrity: Propose a light presence check
    oio-crawler-integrity: report missing chunk positions
    
    For each metachunk of each checked object, verify that the number of
    chunks is at least equal to the number required by the storage policy.
    oio-crawler-integrity: fix output for blob-rebuilder
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    oio-crawler-integrity: Adapt to the latest account/container clients
    Make output of oio-crawler-integrity fit oio-blob-rebuilder input
    oio-crawler-integrity: check chunk size and hash xattrs
    
    Check only xattrs, actual size and hash are not checked.
    pep8: fixes
    crawler: add integrity check
    oio/storage_tierer: Relicence to LGPL
    Update copyright mentions
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    Python API: Delete useless function
    account: return container mtime in listings
    common/utils: Split to reduce dependencies
    Storage tierer: fix CID generation and logging
    Python API: Share loggers to not overwrite or recreate the logger
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    oio: clean separation of green code
    tests: adapt to the last code reorganization
    Python API: another batch of code reorganization
    core: move python files around
    python/crawler/storage tiering: add crawler to change storage policy of old contents
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/cli: Relicense to LGPL
    oio: Comply to the latest PEP8 rules enfroced by flake8
    CLI: Load small client
    Python API: allow to set "pool_manager" for each request
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    cli: organize imports, add versioning options
    cli: log to stderr in addition to syslog
    Python API: allow setting connection pool options
    oio: fixed erroneous comments
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    oio: complies to pep8, adds missing spaces
    oio: fixes symbols overriding when autocontainer enabled
    oio/cli/clientmanager: keeps track of a task to be done
    oio/cli/clientmanager.py: uses a better exception
    autocontainer now configured by the NS
    cli: add 'openio cluster unlockall' command
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    merge python client api from oiopy into core
    
    integrate CLI
    oio/cli: Relicense to LGPL
    Python API: Don't use the namespace to configure the logger
    xcute: Show job info when you run it
    CLI: Return 1 if part of the command failed
    Python API: use same logger for ObjectStorageApi and BlobClient
    CLI: add short options for account, namespace and request ID
    CLI: start new 'openio-admin' command line
    
    Jira: OB-339
    Python API: implement BlobImprover on top of Rebuilder
    
    Jira: R1810-28
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/cli: Relicense to LGPL
    cli: expose perfdata as dedicated entry
    
    To allow use of `--dump-perfdata` from other tools,
    the perdata will be exposed as dedicated columns in output.
    The previous output is still available through the `--debug` flag.
    You should use format yaml or json for best output
    The best display  will best when using format yaml:
    ```
    openio --dump-perfdata object create a /etc/magic -f yaml
    - Hash: 272913026300E7AE9B5E2D51F138E674
      Name: magic
      Perfdata:
        data_size: 111
        proxy:
          meta2: 0.002684
          overall: 0.0062420000322163105
          resolve: 0.001771
        rawx:
          http://127.0.0.1:6010/92C08C2F08D20542F462965E0600154179761EA4B2F83B763F9345A4FAC68B14: 0.0006470000371336937
          overall: 0.0011420000810176134
      Size: 111
      Status: Ok
    ```
    
    Fixes #OS-520
    oio: download chunks with TLS
    oio: upload chunks with TLS
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Solve some python3 errors in the tests
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    CLI: Return 1 if part of the command failed
    meta2: Keep the same ctime if the object already exists
    CLI: allow to override defaut flatns
    Python API: Fix concurrency
    CLI: document 'object link' command
    CLI: Allow to set S3 tags
    CLI: tolerate errors while listing objects from autocontainers
    proxy: List orphan aliases with all keys
    CLI: Save an object with a specific version
    CLI: fix 'openio object list --auto --no-paging'
    
    Jira: OS-164
    Fix formatting issue and tests
    Allow CID for object and container commands
    Add command to use object_link on CLI
    CLI: improve purge documentation
    Purge with a fixed number of versions
    meta2: Purge alias
    Python API, CLI: keep track of request durations
    
    First step: keep track of resolving and request times in proxy,
    then rawx request time in Python API.
    CLI: do not require account when --all is specified
    Python API: document, add depagination utility
    CLI: fix object create error handling
    common/http: Split to reduce dependencies
    common/utils: Split to reduce dependencies
    CLI: Load small client
    CLI: Add more explicit definition of object drain
    CLI: use partial func instead of instance variable
    CLI: Parallelize object listing for autocontainer
    Meta2: Accept "local" argument to open local database
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    HttpApi: Add doc
    CLI: Replace 'requests' with 'urllib3'
    CLI: Manage import (#1098)
    CLI: Fix limit on objects full listing
    Meta2, Event-handler: Create a separate handler to drain a content
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    CLI: Add option to the command object locate to show real size and hash
    CLI: fix object list paging (fix #1062)
    CLI: display policy in "openio object list --long"
    CLI: set formatter to 'value' only when doing long listings
    
    Formatter can be set to something else by specifying '-f something'
    AFTER '--no-paging'.
    CLI: Change default output to 'value' in listing containers and objects (fix #1025)
    cli: add versions in object lists
    cli: add coherency, new options for versioning
    Python API: add support for versions in object lists
    cli: organize imports, add versioning options
    oio/cli: Use the good looger for exceptions occuring upon contents creations
    cli: Fix the behavior of `openio object create` upon an error
    
    The whole command whould'nt fail at the first error if several contents
    have been specified.
    Python API: fix requests ids and kwargs
    python: Manage versioned object (CLI, API)
    proxy: Add bulk delete content
    
    Permit to delete many content in one go for one container.
    Modify the format of cli command 'openio object delete' to return a List.Lister.
    Modify tests that depended on the old format response to use the new one.
    
    The format of a request to the proxy is a json '{"contents":[{"name":"..."},{"name":"..."}]}'
    and the url is /content/delete_many.
    The format of the answer is a json '{"contents":[{"name":"...", "status":"...", "message":"..."}]}'
    proxy: Add bulk delete content
    
    Permit to delete many content in one go for one container.
    Modify the format of cli command 'openio object delete' to return a List.Lister.
    Modify tests that depended on the old format response to use the new one.
    
    The format of a request to the proxy is a json '{"contents":[{"name":"..."},{"name":"..."}]}'
    and the url is /content/delete_many.
    The format of the answer is a json '{"contents":[{"name":"...", "status":"...", "message":"..."}]}'
    oiopy: Expose `touch` commands on containers and objects
    fix: open object list --auto
    Python API: another batch of code reorganization
    cli: implement autocontainer listing
    cli: refactor 'openio object' subcommands
    cli: allow listing properties while listing objects
    oio/cli/storage/obj.py: fixes unused imports
    oio/cli/storage/obj.py: removes an unused function
    autocontainer now configured by the NS
    python: manage autocontainers with the CLI
    Python API: review content metadata keys (fix #726)
    cli: use yield for full listing
    
    add --long option for object list for more details about objects
    cli: add --full argument for full listing
    api: adapt to new properties handling
    cli: add more functional tests
    ecd: take Range header into account
    proxy, metautils: fix #638
    backblaze : delete operation is made asynchronously
    backblaze_http : add new class Utils
    ecd : add clear error messages
    backblaze: clean code
    merge python client api from oiopy into core
    
    integrate CLI
    CLI: Load small client
    merge python client api from oiopy into core
    
    integrate CLI
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/cli: Relicense to LGPL
    Python API: minor readability fixes
    Python API, CLI: keep track of request durations
    
    First step: keep track of resolving and request times in proxy,
    then rawx request time in Python API.
    CLI: Load small client
    Python API: allow to set "pool_manager" for each request
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    account: facatorize code, add documentation (fix #1054)
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    merge python client api from oiopy into core
    
    integrate CLI
    oio/cli: Relicense to LGPL
    Admin CLI: Rename '--workers' to '--concurrency'
    Admin CLI: Use mixin for all tools
    Test 'openio-admin object check'
    Admin CLI: Use common mixin
    CLI: Implement 'openio-admin account repair' command
    CLI: implement 'item locate' commands
    CLI: create mixin classes for container and object commands
    oio/cli: Relicense to LGPL
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Admin CLI: Use mixin for all tools
    CLI: Print the right account with `container locate --cid`
    CLI: Force `--fix-width` on openio-admin object|chunk locate
    Admin CLI: Use common mixin
    Admin CLI: Use the same logger
    Admin CLI: Fail if there is at least one error
    Admin CLI: Add column 'Errors' when the command lists items
    CLI: fix help of various commands
    Python API: Resolve CID
    CLI: implement 'item locate' commands
    oio/cli: Relicense to LGPL
    oio-crawler-integrity: report missing chunk positions
    
    Missing chunk positions were reported on the standard log, but not in
    output files. This is now fixed.
    
    Also, check the number of chunks against the quorum before reporting
    errors, such that missing chunks are potentially reported as
    irreparable (and not uselessly sent to the blob-rebuilder).
    Admin CLI: Implement 'openio-admin chunk [ditributed-]rebuild'
    oio/cli: Relicense to LGPL
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    Admin CLI: Use mixin for all tools
    Admin CLI: Specify the result for each key when setting config
    Admin CLI: Use common mixin
    Admin CLI: Use the same logger
    CLI: implement get-config and set-config commands
    
    These commands allow get/set ephemeral configuration parameters on the
    service.
    oio/cli: Relicense to LGPL
    Admin CLI: implement 'container vacuum' subcommand
    oio/cli: Relicense to LGPL
    xcute: Show job info when you run it
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    Admin CLI: Use mixin for all tools
    Admin CLI: Use common mixin
    CLI: Make 'openio-admin <service-type> info' human readable
    CLI: Implement 'openio-admin <service-type> info'
    
    Jira: OS-293
    oio/cli: Relicense to LGPL
    oio-crawler-integrity: report problems after confirmations
    
    Implement new parameters to control when the tool reports problems:
    - after a specified number of confirmations,
    - after a specified delay.
    
    Also, allow the tool to wait between passes.
    oio-crawler-integrity: report missing chunk positions
    
    Missing chunk positions were reported on the standard log, but not in
    output files. This is now fixed.
    
    Also, check the number of chunks against the quorum before reporting
    errors, such that missing chunks are potentially reported as
    irreparable (and not uselessly sent to the blob-rebuilder).
    Admin CLI: Rename '--output-for-blob-rebuilder' to '--output-for-chunk-rebuild'
    Admin CLI: Use mixin for all tools
    Admin CLI: Use common mixin
    Admin CLI: Use the same logger
    Admin CLI: Fail if there is at least one error
    oio-crawler-integrity: fix concurrency issues
    CLI: isolate '--depth' argument parser in its own class
    
    Actually the new class could be used to parse all arguments related to
    item recursion.
    CLI: Implement 'openio-admin account repair' command
    CLI: fix help of various commands
    CLI-admin: add --checksum for check
    CLI: reword "item check" commands a little
    CLI: create mixin classes for container and object commands
    CLI: implement --depth parameter for check commands
    CLI: hide not-implemented feature, fix chunk attr parsing
    CLI: support checking object versions, log to files
    
    Support checking multiple object versions (only the latest was checked)
    with oio-crawler-integrity and 'openio-admin object check' (and related
    commands).
    
    Also allow 'openio-admin <item_type> check' to log to files, as does
    oio-crawler-integrity.
    
    Jira: OB-339
    CLI: implement 'openio-admin <item_type> check'
    oio/cli: Relicense to LGPL
    Admin CLI: Use mixin for all tools
    Admin CLI: Use common mixin
    Admin CLI: Use the same logger
    Admin CLI: Fail if there is at least one error
    Admin CLI: Add column 'Errors' when the command lists items
    conscience-agent: collect beanstalkd stats
    
    Collect some statistics about beanstalkd jobs. They could help refining
    the score of beanstalkd services.
    
    Also improve the configuration sample.
    CLI: implement 'openio-admin service decache' commands
    oio/cli: Relicense to LGPL
    CI: enable python3 unit tests
    
    Jira: R1910-1
    CLI: test 'meta2 list containers' and 'rawx list containers'
    Admin CLI: Use mixin for all tools
    Admin CLI: Use common mixin
    Admin CLI: Use the same logger
    CLI: fix help of various commands
    CLI: fix 'openio-admin <service> list containers'
    
    - fix help
    - translate CIDs on-the-fly
    - allow to show untranslated CIDs (faster)
    CLI: list containers from rawx and meta2
    oio/cli: Relicense to LGPL
    Revert "Admin CLI: Set the default verbose level to INFO"
    
    This reverts commit a896febd0e49ea78c2fdcbf8a2dc09dbeda4847a.
    Admin CLI: Set the default verbose level to INFO
    Admin CLI: Allow to control the log level
    CLI: implement 'item locate' commands
    CLI: create request_id facility
    CLI: start new 'openio-admin' command line
    
    Jira: OB-339
    CLI: Load small client
    merge python client api from oiopy into core
    
    integrate CLI
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/cli: Relicense to LGPL
    Admin CLI: Use mixin for all tools
    Admin CLI: Use common mixin
    Admin CLI: Use the same logger
    Admin CLI: Fail if there is at least one error
    Admin CLI: Add column 'Errors' when the command lists items
    Python API: Clean code to execute maintenance operations on meta2 databases
    Admin CLI: Allow to use CID to move container
    Admin CLI: Move container
    oio/cli: Relicense to LGPL
    CLI: Keep the current commands as they are
    xcute: Format JSON job info
    Admin CLI: Fail if creation of jobs failed
    Admin CLI: Use xcute to rebuild rawx
    Update the docstrings for 'openio-admin <service> rebuild'
    Admin CLI: Use mixin for all tools
    Admin CLI: Use common mixin
    Admin CLI: Use the same logger
    Admin CLI: Add column 'Errors' when the command lists items
    Python API: Limit speed of distributed dispatcher
    CLI: Improve 'openio-admin meta2 rebuild'
    Python API: Refresh the containers in parallel when rebuilding account service
    CLI: Implement 'openio-admin account-service rebuild' command
    CLI: Rename 'rawx distrebuild' with 'rawx distributed-rebuild'
    CLI: Implement 'openio-admin <service-type> rebuild' commands
    
    Thanks to @murlock
    oio/cli: Relicense to LGPL
    Admin CLI: Use mixin for all tools
    Admin CLI: Use common mixin
    Admin CLI: Use the same logger
    Admin CLI: Add column 'Errors' when the command lists items
    Python API: Limit speed of distributed dispatcher
    CLI: Allow to reduce the repairs of a container
    Python API: Refresh the containers in parallel when rebuilding account service
    CLI: Implement 'openio-admin account repair' command
    CLI: Implement 'openio-admin container repair' command
    CLI: Implement 'openio-admin object repair' command
    Admin CLI: Enhance meta0 check
    
    The previous version of `openio-admin meta0 check` didn't show
    information when a mismatch between ZK and conscience occurs.
    
    The new command list emit Warn for meta0 down and Error when a
    mismatch occurs:
    
    ```
    +--------+--------------------------------------------+
    | Status | Errors                                     |
    +--------+--------------------------------------------+
    | Error  | 127.0.0.1:6012 known but not present in zk |
    +--------+--------------------------------------------+
    ```
    
    Jira OS-543
    oio/cli: Relicense to LGPL
    Admin CLI: make variables intelligible, replace asserts
    
    Jira: OS-491
    CI: enable python3 unit tests
    
    Jira: R1910-1
    CLI: call a cat a cat
    Admin CLI: Use mixin for all tools
    CLI: Do not use the stdout within the commands
    crawler: provide informations from rdir to crawler
    
    When `openio-admin rawx check` found an indexed chunk from rdir
    but missing on rawx, the CLI stops.
    
    This commit enrich crawler checker with fields retrieved from rdir.
    Admin CLI: Use common mixin
    Admin CLI: Use the same logger
    Admin CLI: Fail if there is at least one error
    Admin CLI: Add column 'Errors' when the command lists items
    CLI: implement 'openio-admin rawx check' command
    CLI: document service_check.py
    
    And remove oio-check-directory.
    CLI: add check for rdir and meta2
    CLI: import oio-check-directory
    oio/cli: Relicense to LGPL
    xcute: Improve job information display
    xcute: Show job info when you run it
    Admin CLI: Prefix all commands with 'xcute' to use 'xcute'
    xcute: Format JSON job info
    xcute: Fix flake8
    xcute: Format job info
    xcute: Pause and resume job
    xcute: Add xcute server in conscience
    xcute: Add CLI
    xcute: Allow to use a lock to not run multiple jobs on the same service
    xcute: Sort the jobs by date
    xcute: Save job configuration
    xcute: Allow to resume a job
    xcute: Rename task to job and action to task
    xcute: Implement commands to handle the tasks
    oio/cli: Relicense to LGPL
    xcute: Allow to set incident date when rebuilding
    xcute: factorize rdir parameters
    xcute: Allow to partially decommission a rawx
    xcute: Show job info when you run it
    xcute: Fix marker to list chunks with rdir
    Admin CLI: Prefix all commands with 'xcute' to use 'xcute'
    xcute: Format JSON job info
    Admin CLI: Fail if creation of jobs failed
    xcute: Separate specific job parameters from common job configurations
    xcute: Specify task class in job
    xcute: Format job info
    xcute: Allow to ratelimit the job
    xcute: Send job config in beanstalkd job
    xcute: Improve LUA script when create new job
    Admin CLI: implement 'rawx decommission'
    oio/cli: Relicense to LGPL
    xcute: specify which job uses a certain lock
    xcute: add lock list in API & cli
    Merge all the admin commands related to ZK
    Python API: minor readability fixes
    CLI: Load small client
    Python API: allow to set "pool_manager" for each request
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    account: facatorize code, add documentation (fix #1054)
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    merge python client api from oiopy into core
    
    integrate CLI
    oio/cli: Relicense to LGPL
    xcute: Specify the job types in beta
    xcute: factorize rdir parameters
    xcute: remove container mover, keep only meta2 decommissioner
    xcute: add meta2 mover/rebuilder to the admin CLI
    oio/cli: Relicense to LGPL
    xcute: factorize rdir parameters
    Admin CLI: Prefix all commands with 'xcute' to use 'xcute'
    ci: Use travis pipeline
    
    Fail fast on gotchas, then proceed with the long tests.
    Attempt to split the logic of the tests (in tools/oio-test-*) and the
    Travis environement specifics (in tools/oio-travis-*), so that the logic
    should be easy to run on a dev sandbox.
    Merge all the admin commands related to ZK
    Python API: minor readability fixes
    CLI: Load small client
    Python API: allow to set "pool_manager" for each request
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    account: facatorize code, add documentation (fix #1054)
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    merge python client api from oiopy into core
    
    integrate CLI
    oio/cli: Relicense to LGPL
    Enhance cluster show with --tags
    
    It will show remaining tags (other than service_id, ...)
    into dedicated column.
    Python API: Allow to use default value when converting value to boolean
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    CLI: Return 1 if part of the command failed
    CLI: Improve some cluster commands to accept multiple services
    CLI: Deregister specific services
    CLI: Wait for proxy when waiting for services
    CLI: Wait for conscience when waiting for services
    cli: Exponential wait when waiting for service to get a score
    oepnio cluster: Adapt to missing service ID in debug traces
    openio cluster: Better exponential backoff when waiting
    CLI: make 'cluster wait' display failing services
    CLI: display nicer KeyError messages
    CLI: add a new 'Locked' column to 'cluster list' output
    CLI: document 'openio cluster <verb>' commands
    CLI: implement 'cluster resolve' subcommand
    CLI: document volume subcommands
    Use Service Id everywhere
    oio: Expose UUID from CLI cluster list
    common/utils: Split to reduce dependencies
    CLI: Load small client
    openio: Don't expect a return from /conscience/lock
    
    Because the body of the replies is useless. More, it is non-sense.
    proxy/cs: Bounds the size of registration batches
    oio/cli/admin/cluster: Unlock batches of services
    Revert "oio/cli/admin/cluster: Unlock batches of services"
    
    This reverts commit ac053a8f02afa1efeca23181da6adcf501fbb91a.
    Revert "proxy/cs: Bounds the size of registration batches"
    
    This reverts commit a8fea5cf069e1a7ec27fe29256c66bc96037ae5e.
    Revert "openio: Don't expect a return from /conscience/lock"
    
    This reverts commit e126c9bdbaad4cc01de23ea4a56db3be06462f9c.
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    openio: Don't expect a return from /conscience/lock
    
    Because the body of the replies is useless. More, it is non-sense.
    proxy/cs: Bounds the size of registration batches
    oio/cli/admin/cluster: Unlock batches of services
    CLI: Manage import (#1098)
    openio: Don't expect a return from /conscience/lock
    
    Because the body of the replies is useless. More, it is non-sense.
    proxy/cs: Bounds the size of registration batches
    oio/cli/admin/cluster: Unlock batches of services
    cli: add '--stats' option to 'openio cluster list'
    cli: fix bug in `cluster local list` when the list is empty
    cli: unlockall and wait expect positional args
    
    + wait: default delay set at the parser level.
    CLI: fixes 'cluster wait' return code upon error
    
    An Exception is now raised.
    cli: adds `cluster wait`, completes `cluster unlockall`
    
    * unlockall: now able to unlock all the services with the same type
    * wait: wait for all the registered services to have a positive score
    python: when reading, choose chunk with weighted random algo
    cli: add 'openio cluster unlockall' command
    cli: do not require a type when calling 'openio cluster list'
    oio/cli: add oio-cluster command into openio client (fix #613)
    Review storage policy and service pool configuration
    merge python client api from oiopy into core
    
    integrate CLI
    cli: add cluster and events commands
    CLI: Load small client
    merge python client api from oiopy into core
    
    integrate CLI
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/cli: Relicense to LGPL
    Python API: minor readability fixes
    CLI: Load small client
    Python API: allow to set "pool_manager" for each request
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    account: facatorize code, add documentation (fix #1054)
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    merge python client api from oiopy into core
    
    integrate CLI
    CLI: allow to set a bucket name on an already created container
    
    Implement the --bucket-name parameter for 'openio container set' and
    'openio container unset' commands.
    
    Jira: OB-572
    account: Refresh bucket counters
    CLI: list bucket with versioning status
    
    Add `--versioning` option to `openio bucket list`
    If enabled, an extra request will be made for each bucket
    to associated container to retrieve metadata.
    
    The status will be Suspended or Enabled.
    oio/cli: Relicense to LGPL
    account: allow to set bucket metadata
    account,CLI: implement 'bucket show' command
    account,CLI: implement a bucket listing command
    
    Jira: OB-501
    CLI: Reuse variable to configure the deletion of exceeding versions
    Python API: Allow to use default value when converting value to boolean
    xcute: Fix flake8
    xcute: Use python time instead of redis time
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    CLI: display mtime and CID in 'container list' output
    CLI: Return 1 if part of the command failed
    sqliterepo: Allow to delete all container properties
    Python API: Resolve CID
    Python API, sqliterepo: replicate container snapshots
    
    To avoid deadlocks at creation time, we used to keep a single copy
    of container snapshots. Now that the replication mechanism is more
    reliable, we can replicate them.
    meta2: Send event with the number of damaged objects
    Update Copyright
    Python API: Recompute statistics of a container
    meta2: Send event with the number of missing chunks
    Python API, CLI: document container snapshots
    CLI: make 'openio container locate' display known peers
    CLI: fix formatting
    Fix formatting issue and tests
    Update tests
    Allow CID for object and container commands
    tests: fix flake8 warnings
    Add option to set container status
    Test --quickly option
    Add option to flush container quickly
    Python API: Add command to flush container
    CLI: improve purge documentation
    Purge with a fixed number of versions
    meta2: Delete exceeding versions when adding a new alias
    CLI: display status in 'container show' and 'container locate'
    CLI: implement 'container purge' subcommand
    
    And fix M2_PURGE RPC.
    Snapshots: rename meaningless variables and parameters
    Snapshot: Factorize code and add sequence number as a request paramater
    Container snapshot: fix small issues
    Add container snapshot
    
    The snapshot take the form of:
    -A copy of the sqlite base of the target to a meta2 chose by the load balancer.
    -All the chunks of the snapshot are replaced by new chunk that hardlink the target one.
    -The snapshot is frozen afterward.
    
    The chunks hardlink implies that the target and the snapshot chunks are in the same rawx.
    Currently it is the client that freeze and enable the containers during the snapshot.
    CLI: fix container locate
    common/utils: Split to reduce dependencies
    CLI: Load small client
    CLI: Make 'account/container show' human readable
    
    close #1140
    oio-account-server: Extend the openio CLI tool
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    CLI: set formatter to 'value' only when doing long listings
    
    Formatter can be set to something else by specifying '-f something'
    AFTER '--no-paging'.
    CLI: Change default output to 'value' in listing containers and objects (fix #1025)
    cli: add coherency, new options for versioning
    cli: organize imports, add versioning options
    Proxy: correct the create_many function and make tests passed
    Add an option to create many containers in on go
    
    The command "openio container create <container>" used to send a request for every
    container in the list to create it.
    Now the command check the number of containers and use a specific request to ask for the
    creation of all the containers.
    Proxy: correct the create_many function and make tests passed
    Add an option to create many containers in on go
    
    The command "openio container create <container>" used to send a request for every
    container in the list to create it.
    Now the command check the number of containers and use a specific request to ask for the
    creation of all the containers.
    oiopy: Expose `touch` commands on containers and objects
    cli: fix 'container locate' and 'reference locate'
    cli: fix #800 (openio container locate)
    Python API: another batch of code reorganization
    cli: allow to set quota and storage policy (fix #727, fix #737)
    cli: add object count and stgpol in `container show` (fix #725)
    cli: use yield for full listing
    
    add --long option for object list for more details about objects
    cli: add --full argument for full listing
    api,tests: continue to fix tests around properties
    api: add functional tests around directory and container
    api: adapt to new properties handling
    cli: "openio container locate" now shows meta0 and meta1 addresses
    merge python client api from oiopy into core
    
    integrate CLI
    CLI: Load small client
    merge python client api from oiopy into core
    
    integrate CLI
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    cli: cleanup make_client
    oio/cli: Relicense to LGPL
    CLI: Load small client
    Python API: allow to set "pool_manager" for each request
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    account: facatorize code, add documentation (fix #1054)
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    merge python client api from oiopy into core
    
    integrate CLI
    merge python client api from oiopy into core
    
    integrate CLI
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/cli: Relicense to LGPL
    Python API: minor readability fixes
    CLI: Load small client
    tests: fix directory test still using 'session'
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    Python API: get rid of DirectoryAPI (replaced by DirectoryClient)
    merge python client api from oiopy into core
    
    integrate CLI
    oio/cli: Relicense to LGPL
    Python API: Respect minimum distance when rebalancing meta1 databases
    CLI: check peer count before actually rebalancing meta1
    
    Also implement a new 'openio directory check' command, checking each
    reference prefix is managed by the right number of meta1 services. This
    complements 'openio-admin directory check' (which does not check this
    number).
    
    Jira: OS-470
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    CLI: Return 1 if part of the command failed
    Admin CLI: Rename '--workers' to '--concurrency'
    CLI: display nicer KeyError messages
    cli: Set 'volume' as a default level for `directory bootstrap`
    cli: Make the resilience configurable upon a `directory bootstrap`
    directory bootstrap: Manage partial locations
    
    Set level=3 by default
    cli: Better & Faster directory bootstrap
    cli: Remove the `--no-rdir` from `directory bootstrap`
    Python API: Fix concurrency
    Move RDIR/META2 assignment to new CLI command
    
    Moved the RDIR/META2 assignment a new "openio rdir bootstrap meta2"
    command, and added an "openio rdir bootstrap rawx" command that is
    exactly equivalent to "openio volume admin bootstrap" (which in fact
    re-uses the same code)
    Add CLI command to assign RDIR to META2
    
    Modified the "openio directory bootstrap" command so that
    "openio directory bootstrap meta2" with the parameter
    --max-per-rdir assigns an RDIR service to each META2 server.
    
    Also modified tools/oio-reset.sh to bootstrap META2 assignments
    using this command, with a default value of 10 for --max-per-rdir
    CLI: fix 'directory decommission'
    
    - Accept 'long' base names when meta1_digits < 4.
    - Check the number of replicas.
    - Make it more verbose by default.
    CLI: implement 'openio directory restore'
    
    This new subcommand is able to restore the meta0 content from a backup
    previously generated with 'openio directory dump'.
    openio directory: Fix broken imports
    oio-meta2-mover: Add script to move meta2 bases
    Pytho API, CLI: review directory bootstrap code
    Python API, CLI: mostly working code to decommision meta1
    Python API, CLI: review directory commands
    
    * new option '--meta0-timeout'
    * new API for low-level interaction with database elections
    * improve 'decommission' subcommand (still not working)
    CLI: Load small client
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    HttpApi: Remove 'requests' to use 'urllib3'
    oio-directory-bootstrap: add --min-dist option (fix #1018)
    cli: new options for "directory bootstrap" (fix #883)
    
    * --check to check the number or replicas before saving
    * --force to do the bootstrap even if already done
    * timeout is set to 30s
    oio/rdir: Do not link from the simple rdir client
    
    Keep this for a class whose purpose is administration and deployment.
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    rdir: filter on container id, better exceptions
    rdir: initialized early, better balanced
    
    rdir are linked to rawx by `openio directory bootstrap`.
    merge python client api from oiopy into core
    
    integrate CLI
    m0, proxy: new routes and tools to list and force meta0 mapping
    oio/cli: Relicense to LGPL
    CI: enable python3 unit tests
    
    Jira: R1910-1
    CLI: Return 1 if part of the command failed
    CLI: returns 1 when rdir bootstrap fails
    cli: fix invalid service type
    
    If anything go wrong in `openio rdir bootstrap rawx`,
    the behavior is to display current assignments but
    invalid refactoring has left `meta2` instead of current
    services.
    Python API: refactor
    CLI: add '--min-dist' option to 'rdir bootstrap'
    
    Jira: OS-281
    Python API, rdir: refactor
    Move RDIR/META2 assignment to new CLI command
    
    Moved the RDIR/META2 assignment a new "openio rdir bootstrap meta2"
    command, and added an "openio rdir bootstrap rawx" command that is
    exactly equivalent to "openio volume admin bootstrap" (which in fact
    re-uses the same code)
    Move RDIR/META2 assignment to new CLI command
    
    Moved the RDIR/META2 assignment a new "openio rdir bootstrap meta2"
    command, and added an "openio rdir bootstrap rawx" command that is
    exactly equivalent to "openio volume admin bootstrap" (which in fact
    re-uses the same code)
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/cli: Relicense to LGPL
    Python API: refactor
    Move RDIR/META2 assignment to new CLI command
    
    Moved the RDIR/META2 assignment a new "openio rdir bootstrap meta2"
    command, and added an "openio rdir bootstrap rawx" command that is
    exactly equivalent to "openio volume admin bootstrap" (which in fact
    re-uses the same code)
    Python API: minor readability fixes
    CLI: Load small client
    tests: fix directory test still using 'session'
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    Python API: get rid of DirectoryAPI (replaced by DirectoryClient)
    merge python client api from oiopy into core
    
    integrate CLI
    oio/cli: Relicense to LGPL
    Update copyright mentions
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    CLI: Load small client
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    merge python client api from oiopy into core
    
    integrate CLI
    oio/cli: Relicense to LGPL
    ClientManager: pass self._options as is to get_pool_manager
    
    get_pool_manager already filters arguments it care about,
    so just pass the whole thing and let it handle filtering directly
    xcute: Add xcute server in conscience
    CLI: display nicer KeyError messages
    CLI: implement 'item locate' commands
    CLI: load ObjectStorageApi from ClientManager
    CLI: implement 'openio-admin <item_type> check'
    CLI: add short options for account, namespace and request ID
    Python API: refactor
    CLI: start new 'openio-admin' command line
    
    Jira: OB-339
    CLI: fix loading of meta1_digits
    CLI: allow to override defaut flatns
    Python API: minor readability fixes
    oio: Comply to PEP8
    common/utils: Split to reduce dependencies
    CLI: Load small client
    CLI: Load small client
    merge python client api from oiopy into core
    
    integrate CLI
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/cli: Relicense to LGPL
    CLI: Load small client
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    CLI: set formatter to 'value' only when doing long listings
    
    Formatter can be set to something else by specifying '-f something'
    AFTER '--no-paging'.
    merge python client api from oiopy into core
    
    integrate CLI
    oio/cli: Relicense to LGPL
    CLI: set a request ID for election commands
    cli: expose perfdata as dedicated entry
    
    To allow use of `--dump-perfdata` from other tools,
    the perdata will be exposed as dedicated columns in output.
    The previous output is still available through the `--debug` flag.
    You should use format yaml or json for best output
    The best display  will best when using format yaml:
    ```
    openio --dump-perfdata object create a /etc/magic -f yaml
    - Hash: 272913026300E7AE9B5E2D51F138E674
      Name: magic
      Perfdata:
        data_size: 111
        proxy:
          meta2: 0.002684
          overall: 0.0062420000322163105
          resolve: 0.001771
        rawx:
          http://127.0.0.1:6010/92C08C2F08D20542F462965E0600154179761EA4B2F83B763F9345A4FAC68B14: 0.0006470000371336937
          overall: 0.0011420000810176134
      Size: 111
      Status: Ok
    ```
    
    Fixes #OS-520
    CI: enable python3 unit tests
    
    Jira: R1910-1
    CLI: Improve the perfdata display
    CLI: set better profiling parameters
    CLI: introduce a code profiler
    Admin CLI: Allow to control the log level
    CLI: start new 'openio-admin' command line
    
    Jira: OB-339
    Update copyright mentions
    Merge all the admin commands related to ZK
    Move RDIR/META2 assignment to new CLI command
    
    Moved the RDIR/META2 assignment a new "openio rdir bootstrap meta2"
    command, and added an "openio rdir bootstrap rawx" command that is
    exactly equivalent to "openio volume admin bootstrap" (which in fact
    re-uses the same code)
    Python API: minor readability fixes
    Python API, CLI: keep track of request durations
    
    First step: keep track of resolving and request times in proxy,
    then rawx request time in Python API.
    CLI: new 'openio lifecycle' commands
     CLI: Add commands to debug elections
    common/utils: Split to reduce dependencies
    CLI: Load small client
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    HttpApi: Remove 'requests' to use 'urllib3'
    cli: organize imports, add versioning options
    cli: minor fix to allow 'python -OO'
    cli: minor fix to allow 'python -OO'
    cli: log to stderr in addition to syslog
    cli: add 'openio cluster unlockall' command
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    merge python client api from oiopy into core
    
    integrate CLI
    CLI: Load small client
    merge python client api from oiopy into core
    
    integrate CLI
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/cli: Relicense to LGPL
    Update copyright mentions
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    CLI: Return 1 if part of the command failed
    Document account APIs
    Python API: improve documentation, add deprecation warnings
    CLI: do not require account when --all is specified
    common/utils: Split to reduce dependencies
    CLI: Load small client
    CLI: Make 'account/container show' human readable
    
    close #1140
    oio-account-server: Extend the openio CLI tool
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    CLI: set formatter to 'value' only when doing long listings
    
    Formatter can be set to something else by specifying '-f something'
    AFTER '--no-paging'.
    CLI: Change default output to 'value' in accounts listing
    CLI: cosmetic changes around account listing
    CLI: use a generator for account listing (fix #1024)
    cli: add coherency, new options for versioning
    Add account listing to the CLI (fix #817)
    cli: add more functional tests
    merge python client api from oiopy into core
    
    integrate CLI
    cli: cleanup make_client
    oio/cli: Relicense to LGPL
    CLI: Load small client
    Python API: allow to set "pool_manager" for each request
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    account: facatorize code, add documentation (fix #1054)
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    merge python client api from oiopy into core
    
    integrate CLI
    oio/cli: Relicense to LGPL
    CLI: set a request ID for election commands
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    cli: display human-readable dates in 'election debug' output
    
    The default output is still milliseconds timestamps. When specifying
    --human, the output is changed to dates.
    CLI: Return 1 if part of the command failed
    oio: Restrict the balance masters --average to only one srvtype at once
    oio: Expose the 'election balance' CLI action
    CLI: allow to query only one service with 'election' commands
    CLI: start new 'openio-admin' command line
    
    Jira: OB-339
    proxy: Leave the election for a specific service ID
    CLI: implement 'openio election leave' subcommand
    Python API, CLI: new 'openio election sync' command
    CLI: add timeout option to election subcommands
    Fix typo, improve CLI documentation
     CLI: Add commands to debug elections
     CLI: Add commands to debug elections
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/cli: Relicense to LGPL
    Python API: refactor
    CLI: start new 'openio-admin' command line
    
    Jira: OB-339
     CLI: Add commands to debug elections
    CLI: Load small client
    Python API: allow to set "pool_manager" for each request
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    account: facatorize code, add documentation (fix #1054)
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    merge python client api from oiopy into core
    
    integrate CLI
    oio/cli: Relicense to LGPL
    CLI: lazily load zookeeper dependency
    
    Jira: R1910-35
    CI: enable python3 unit tests
    
    Jira: R1910-1
    CLI: make zk commands return 1 after an error
    CLI: display nicer KeyError messages
    Update copyright mentions
    Merge all the admin commands related to ZK
    Merge all the admin commands related to ZK
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/cli: Relicense to LGPL
    Merge all the admin commands related to ZK
    Python API: minor readability fixes
    CLI: Load small client
    Python API: allow to set "pool_manager" for each request
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    account: facatorize code, add documentation (fix #1054)
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    merge python client api from oiopy into core
    
    integrate CLI
    CLI: Load small client
    merge python client api from oiopy into core
    
    integrate CLI
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/cli: Relicense to LGPL
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    CLI: Return 1 if part of the command failed
    CLI: document 'directory force' command
    CLI: make 'openio reference locate' display the CID
    oio-meta2-mover: Add script to move meta2 bases
    CLI: Load small client
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    cli: add coherency, new options for versioning
    cli: fix 'container locate' and 'reference locate'
    api: add functional tests around directory and container
    cli: add more functional tests
    merge python client api from oiopy into core
    
    integrate CLI
    oio/cli: Relicense to LGPL
    CLI: Load small client
    Python API: allow to set "pool_manager" for each request
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    account: facatorize code, add documentation (fix #1054)
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    merge python client api from oiopy into core
    
    integrate CLI
    oio/cli: Relicense to LGPL
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    CLI: Return 1 if part of the command failed
    Update Copyright
    CLI: Load small client
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    cli: new "events exhume" subcommand (fix #888)
    merge python client api from oiopy into core
    
    integrate CLI
    cli: add commands for volume, events, cluster
    
    Volume:
    * admin commands lock, unlock, incident, show
    * show command
    
    Events:
    * stats command
    
    Cluster:
    * list, show commands
    cli: add cluster and events commands
    CLI: Load small client
    merge python client api from oiopy into core
    
    integrate CLI
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/cli: Relicense to LGPL
    Python API: minor readability fixes
    CLI: Load small client
    Python API: allow to set "pool_manager" for each request
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    account: facatorize code, add documentation (fix #1054)
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    merge python client api from oiopy into core
    
    integrate CLI
    oio/cli: Relicense to LGPL
    Python API, tests: another batch of python3 conversions
    CLI: Return 1 if part of the command failed
    CLI: Remove useless argument
    Allow lifecycle to work with sharded buckets
    
    For S3 buckets which have been sharded using "container_hierarchy" swift
    middleware, allow to recurse on all shards when applying lifecycle
    rules.
    
    This behavior is enabled with a command line argument.
    The set of containers to recurse on is established by doing a prefixed
    listing (the prefix being the bucket name and the '%2F' delimiter).
    
    The metadata of listed objects will be enriched with
    - the name of the actual container they are stored in (under the key
    'container');
    - the name they have been given in this container (under the key
    'orig_name').
    
    All tests against filters are unchanged, but API calls will use
    `orig_name` and `container` instead of object and bucket names.
    lifecycle: Format configuration
    CLI: new 'openio lifecycle' commands
    CLI: new 'openio lifecycle' commands
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    cli: cleanup make_client
    oio/cli: Relicense to LGPL
    CLI: new 'openio lifecycle' commands
    CLI: Load small client
    Python API: allow to set "pool_manager" for each request
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    account: facatorize code, add documentation (fix #1054)
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    merge python client api from oiopy into core
    
    integrate CLI
    CLI: Load small client
    merge python client api from oiopy into core
    
    integrate CLI
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/cli: Relicense to LGPL
    blob-rebuilder: implement --rdir-timeout parameter
    
    This new parameter allows to set the timeout for rdir operations. The
    default value is 60.0s (was 30s before this commit).
    rdir: Get the number of chunks to rebuild
    rdir, CLI: Clear chunks entries
    Python API: minor readability fixes
    common/utils: Split to reduce dependencies
    CLI: Load small client
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    HttpApi: Remove 'requests' to use 'urllib3'
    oio/rdir: Do not link from the simple rdir client
    
    Keep this for a class whose purpose is administration and deployment.
    cli: log to stderr in addition to syslog
    cli: add '--stats' option to 'openio cluster list'
    Python API: allow setting connection pool options
    python: when reading, choose chunk with weighted random algo
    cli: do not require a type when calling 'openio cluster list'
    oio/cli: add oio-cluster command into openio client (fix #613)
    merge python client api from oiopy into core
    
    integrate CLI
    cli: add commands for volume, events, cluster
    
    Volume:
    * admin commands lock, unlock, incident, show
    * show command
    
    Events:
    * stats command
    
    Cluster:
    * list, show commands
    cli: volume dump command renamed to volume show
    cli: add cluster and events commands
    cli: rename rdir commands to volume
    core: move python files around
    rdir: explicit database create
    
    add draft cli for rdir interaction
    oio/cli: Relicense to LGPL
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    CLI: Return 1 if part of the command failed
    blob-rebuilder: implement --rdir-timeout parameter
    
    This new parameter allows to set the timeout for rdir operations. The
    default value is 60.0s (was 30s before this commit).
    CLI: Fix deprecation warning to give correct alternative command
    Python API, rdir: refactor
    Add CLI command to assign RDIR to META2
    
    Modified the "openio directory bootstrap" command so that
    "openio directory bootstrap meta2" with the parameter
    --max-per-rdir assigns an RDIR service to each META2 server.
    
    Also modified tools/oio-reset.sh to bootstrap META2 assignments
    using this command, with a default value of 10 for --max-per-rdir
    Rdir assignment to META2 on volume bootstrap
    
    The same facilities used to assign Rdir services to rawx services
    are reused in this patch to assign some to META2 services.
    
    For the time being, the bootstrapping is done when the initial
    volume bootstrapping is done.
    
    A future patch will bring a new command to do that separatly from
    the volume bootstrap.
    rdir, CLI: Clear chunks entries
    CLI: document volume subcommands
    CLI: display rawx and rdir IDs, if available
    CLI: Load small client
    CLI: Make 'account/container show' human readable
    
    close #1140
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Manage import (#1098)
    cli: display empty rdir in "volume assignation"
    cli: new 'volume assignation' subcommand
    
    Displays which rdir service is linked to each rawx service.
    Also add '--max-per-rdir' option to 'volume admin bootstrap'.
    oio/rdir: Do not link from the simple rdir client
    
    Keep this for a class whose purpose is administration and deployment.
    cli: warn if rawx are down when assigning rdir services
    Improve help on openio volume command
    rdir: initialized early, better balanced
    
    rdir are linked to rawx by `openio directory bootstrap`.
    cli: fix type of date in 'openio volume admin incident'
    cli: fix volume commands
    merge python client api from oiopy into core
    
    integrate CLI
    cli: add commands for volume, events, cluster
    
    Volume:
    * admin commands lock, unlock, incident, show
    * show command
    
    Events:
    * stats command
    
    Cluster:
    * list, show commands
    cli: volume dump command renamed to volume show
    cli: rename rdir commands to volume
    core: move python files around
    rdir: explicit database create
    
    add draft cli for rdir interaction
    oio/container service: Relicence to LGPL
    Try to make "container backup" compatible with Python 3
    Python API, tests: another batch of python3 conversions
    Python API: another batch of python3 conversions
    Make most unit tests pass in python3
    
    Please note that no test was broken in python2, this only add more
    compatibility to python3 as verified by the test suite.
    Allow to set various Redis parameters
    Python API: retry reading properties after error
    
    The legacy way of fetching properties is buggy when there is a lot of
    them. In case of error, retry with the new way (the drawback is that it
    does 2 requests instead of one).
    
    Fix #1369
    container backup: small refactoring
    Backup: Remove ambiguity error
    
    A dedicated flag is now used in LimitedStream before raising exception
    on Checksum error, and checking it to raise proper HTTP error.
    container backup: small refactoring
    Backup: manage checksums error in Tar entry
    
    Tar format contains checksums for regular entries, this
    patch will made service to response same error code as invalid
    data checksum.
    
    Please note that invalid data are not checked in extended
    headers.
    Backup: add test regarding chunks
    
    All chunks of all files must be verified before returning 201.
    This check should not occurs.
    Backup: compute and tests md5 per chunk
    
    If an error is detected (invalid chunk or input stream disconnected),
    the current object is truncated, and knonw MD5 are removed.
    Backup: store chunks with checksums
    
    For SLO objects, convert SLO JSON object to a list
    of chunks.
    oio: Comply to the latest PEP8 rules enfroced by flake8
    common/utils: Split to reduce dependencies
    Python API, tests: fix typos
    oio/container: allow resume restore on failure
    
    If a network error occurs while restoring a container,
    position for current processed file is now saved.
    User should retrieve X-Consumed-Size from HEAD method to
    resume restore operation, after checking value of X-Upload-In-Progress.
    oio/backup: protect concurrency restore
    
    A lock will be set on Container, avoiding to corrupt data.
    oio/backup: refactor restore method
    
    Before this commit, old code was very prone to error (like variable
    collision).
    
    This commit split several part of code in dedicated method.
    oio/backup: Add sentence for every 422 error
    
    It will help to identify reason of a failure.
    oio/backup: fix invalid restore
    
    A regression was introduced during f616a41ec as same var size was
    used to store HTTP Content-Length and object uploaded to SDS.
    
    This commit fix that by introducing new variable name (req_size) for
    HTTP Content-Length and enforce that total data consumed are now
    same size as HTTP.
    
    It also enforce test to ensure all objecst put are really restored
    Python API: Share loggers to not overwrite or recreate the logger
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    oio/backup: fix restoration with uwsgi
    
    When deploying backup service With uwsgi, the restoration of container
    is broken due to werkzeug.LimitedStream behavior.
    
    This fix add a very simple LimitedStream on our side to wrap input
    stream.
    oio/backup: fix invalid read
    
    Too much data was read when extracting a range, beside performance
    issue, it also raises invalid multi part download in few case.
    CLI: Manage import (#1098)
    oio/backup: Normalize HTTP headers
    oio/container: allow check of restoration
    
    A HEAD during a multipart restoration will returns headers to report
    total size of archive and size of consumed data.
    oio/backup: add parameter to control redis timeout
    
    By default, the cache for lifetime of Redis keys is set to one day.
    It can be overriden by parameter redis_cache_timeout in configuration file.
    oio/backup: fix restoration with uwsgi
    
    When deploying backup service With uwsgi, the restoration of container
    is broken due to werkzeug.LimitedStream behavior.
    
    This fix add a very simple LimitedStream on our side to wrap input
    stream.
    oio/backup: fix invalid read
    
    Too much data was read when extracting a range, beside performance
    issue, it also raises invalid multi part download in few case.
    container backup: avoid wasting RAM while restoring
    
    Instead of reading all data for a single object, wrap input
    stream within a LimitedStream and forward it to create_object API.
    oio/container: optimise backup
    
    An extended list was used but it was ineffective as
    only begin and end of this range to work properly.
    account,container,ecd: improve exception handling
    tools: fix travis test
    
    Fix a subtile issue with set -e and &&:
    some tests was launched with && but set -e option
    doesn't stop script if a intermediate compound fails.
    oio/container: Test for Redis connection error
    
    Redis connection error was not tested: when this issue was encountered,
    a python backtrace was emitted in syslog with a 500 generic error code.
    
    With this patch, service will now return a HTTP 503 error and emit
    an appropriate error log.
    container backup: rename ambiguous variables and files
    oio/container: add Manifest in tar itself
    
    As big header may be filtered or cut by webserver or proxy, the
    manifest is now embedded as first file in archive:
    It will simplify upload per range.
    
    During implementation, it has shown several issues with several items:
    - container_properties was using current timestamp and then download same
    container twice on different seconds generated with different checksum
    - an issue may occurs while dumping a container per range as json
    dumping/restoring did not kept keys orders and broke associate file.
    oio/container: rename URL dump/restore
    
    Their URL are now prefixed with container.
    oio/container: save and restore mime_type
    oio/container: extend support for tar
    
    This patch introduces support to create container from a Tar file:
    - directories entries are ignored
    - add support for AREGTYPE (for backward compatibility)
    oio: add more check on restore container operation
    
    When restoring a container, reply with 201 only for full restoration
    and last segment, other segments will got a 206 (PARTIAL).
    
    This patch also introduce use of redis to ensure that restoration
    is linear: it avoid missing segment and replay of already uploaded
    segment.
    oio: support restoration of container by range
    
    When a dump operation is launched, the value
    of X-Manifest-Container header must be sent when using
    restoration operations using range.
    
    This header can also be retrieved by a HEAD on container.
    
    Please note that restoration by range must be a multiple of 1 MB,
    as empty block may be inserted to avoid header split.
    
    When untaring a dump on Linux filesystem, you should provide option
    --ignore-zeroes to avoid 'A lone zero block at %d' error.
    oio: move container_streaming into container
    oio: create a shared RedisConn object
    
    It will help to manage StrictRedis or Sentinel on various
    daemons (account/backend.py and container_streaming)
    container_streaming: rework generation of TarEntry
    
    Also add comments and fix related to flake8
    container_streaming: restore use stream method
    container_streaming: manage S3 container
    
    This patch allow download of S3 SLO objects (uploaded with multipart).
    It will aggregate parts from second container and stream it as one object.
    Initial version of restore
    
    A new API is available with v1.0/restore with folloging paramaters:
    - acct: account
    - ref: container
    tests/container_streaming: more checks with charset
    
    Various charsets are tested as filename or metadata
    container_streaming: export container properties
    
    A special file named ".container_properties" will be created
    at root and will contains any metadata.
    container_streaming: add logs
    
    This patch introduces logs and rework oio-bootstrap.py to split
    one conf for httpd and one conf for service itself. Previously
    same file was used for both cases.
    container_streaming: optimizations and streaming
    
    This commit removes unnecessaries network access by read needed
    range in one operation and don't ask for metadata of objects if
    related block is unread.
    
    It also removes need to accumulate all data requested before
    sending on network side: it was ok for small container/file but with big
    container, it will be killed by OOM.
    
    Service now streams a container on the fly by sending file
    one after one (or for big file, by chunk of 50 MB)
    
    As bonus, full download or partial download now use same code.
    container_streaming: use Redis to store mapping
    
    Mapping of object from container is now stored in Redis instance
    during 24 hour to avoid recomputing again and again it.
    Implement service 'admin'
    
    This service will allow to download a container.
    The API is now managed by a WSGI rule with parameters acct and ref
    like other services.
    
    Previously, oio-bootstrap.py was using configuration file to store
    Apache configuration. This patch moves them into dedicated files
    with component httpd.
    It allow to specify configuration file for this new service.
    container_streaming: fix several HTTP return codes
    
    When a container is missing, properly return 404
    When a container contains nothing, returns 204 No Content
    container_streaming: allow GET to retrieve several blocks
    
    The Range HTTP header can now uses several blocks in same request.
    container_streaming: initial version
    
    This commit introduct a new WSGI application that allow to
    download through HTTP (with optional range) a container/bucket.
    The format used for downloading a container is TAR (without
    compression)
    
    Limitation known:
    - Range must be aligned on block of 512 bytes
    - Only one block
    - No multipart range supported
    oio/container service: Relicence to LGPL
    Python API: Allow to reduce the repairs of a container
    Python API: Create tool to rebuild meta2
    Python API: Create tool to repair containers
    Python API: format the pure MD5 implementation
    
    Also remove the exclusion from the tests, the file will be checked now.
    Backup: add MD5 python implementation
    
    To support multipart upload, a MD5 must support serialization.
    oio/container service: Relicence to LGPL
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    container backup: rename ambiguous variables and files
    oio/container: add Manifest in tar itself
    
    As big header may be filtered or cut by webserver or proxy, the
    manifest is now embedded as first file in archive:
    It will simplify upload per range.
    
    During implementation, it has shown several issues with several items:
    - container_properties was using current timestamp and then download same
    container twice on different seconds generated with different checksum
    - an issue may occurs while dumping a container per range as json
    dumping/restoring did not kept keys orders and broke associate file.
    oio/container: rename URL dump/restore
    
    Their URL are now prefixed with container.
    oio/container: save and restore mime_type
    oio/container: extend support for tar
    
    This patch introduces support to create container from a Tar file:
    - directories entries are ignored
    - add support for AREGTYPE (for backward compatibility)
    oio: add more check on restore container operation
    
    When restoring a container, reply with 201 only for full restoration
    and last segment, other segments will got a 206 (PARTIAL).
    
    This patch also introduce use of redis to ensure that restoration
    is linear: it avoid missing segment and replay of already uploaded
    segment.
    oio: support restoration of container by range
    
    When a dump operation is launched, the value
    of X-Manifest-Container header must be sent when using
    restoration operations using range.
    
    This header can also be retrieved by a HEAD on container.
    
    Please note that restoration by range must be a multiple of 1 MB,
    as empty block may be inserted to avoid header split.
    
    When untaring a dump on Linux filesystem, you should provide option
    --ignore-zeroes to avoid 'A lone zero block at %d' error.
    oio: move container_streaming into container
    oio: create a shared RedisConn object
    
    It will help to manage StrictRedis or Sentinel on various
    daemons (account/backend.py and container_streaming)
    container_streaming: rework generation of TarEntry
    
    Also add comments and fix related to flake8
    container_streaming: restore use stream method
    container_streaming: manage S3 container
    
    This patch allow download of S3 SLO objects (uploaded with multipart).
    It will aggregate parts from second container and stream it as one object.
    Initial version of restore
    
    A new API is available with v1.0/restore with folloging paramaters:
    - acct: account
    - ref: container
    tests/container_streaming: more checks with charset
    
    Various charsets are tested as filename or metadata
    container_streaming: export container properties
    
    A special file named ".container_properties" will be created
    at root and will contains any metadata.
    container_streaming: add logs
    
    This patch introduces logs and rework oio-bootstrap.py to split
    one conf for httpd and one conf for service itself. Previously
    same file was used for both cases.
    container_streaming: optimizations and streaming
    
    This commit removes unnecessaries network access by read needed
    range in one operation and don't ask for metadata of objects if
    related block is unread.
    
    It also removes need to accumulate all data requested before
    sending on network side: it was ok for small container/file but with big
    container, it will be killed by OOM.
    
    Service now streams a container on the fly by sending file
    one after one (or for big file, by chunk of 50 MB)
    
    As bonus, full download or partial download now use same code.
    container_streaming: use Redis to store mapping
    
    Mapping of object from container is now stored in Redis instance
    during 24 hour to avoid recomputing again and again it.
    Implement service 'admin'
    
    This service will allow to download a container.
    The API is now managed by a WSGI rule with parameters acct and ref
    like other services.
    
    Previously, oio-bootstrap.py was using configuration file to store
    Apache configuration. This patch moves them into dedicated files
    with component httpd.
    It allow to specify configuration file for this new service.
    container_streaming: fix several HTTP return codes
    
    When a container is missing, properly return 404
    When a container contains nothing, returns 204 No Content
    container_streaming: allow GET to retrieve several blocks
    
    The Range HTTP header can now uses several blocks in same request.
    container_streaming: initial version
    
    This commit introduct a new WSGI application that allow to
    download through HTTP (with optional range) a container/bucket.
    The format used for downloading a container is TAR (without
    compression)
    
    Limitation known:
    - Range must be aligned on block of 512 bytes
    - Only one block
    - No multipart range supported
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Allow lifecycle to work with sharded buckets
    
    For S3 buckets which have been sharded using "container_hierarchy" swift
    middleware, allow to recurse on all shards when applying lifecycle
    rules.
    
    This behavior is enabled with a command line argument.
    The set of containers to recurse on is established by doing a prefixed
    listing (the prefix being the bucket name and the '%2F' delimiter).
    
    The metadata of listed objects will be enriched with
    - the name of the actual container they are stored in (under the key
    'container');
    - the name they have been given in this container (under the key
    'orig_name').
    
    All tests against filters are unchanged, but API calls will use
    `orig_name` and `container` instead of object and bucket names.
    lifecycle: fix parsing when an XML namespace is provided
    meta2: Keep the same ctime if the object already exists
    Python API: Delete useless function
    lifecycle: Check the current object with the versions
    lifecycle: Rename variable
    lifecycle: Save a random ID if there is no ID in the configuration
    lifecycle: Apply the rules in the same order as the configuration
    lifecycle: Format configuration
    lifecycle: Add deleted flag when applying Expiration with versioning
    lifecycle: Apply Date only on the objects created before this date
    lifecycle: Apply Expiration and Transition only on the current version
    lifecycle: Apply one action by object
    lifecycle: Prevent some configurations
    lifecycle: Apply actions only to existing objects
    lifecycle: Allow to disable a rule
    lifecycle: Check the XML schemas
    lifecycle: Check the S3 tags instead of checking the properties
    lifecycle: Change architecture
    lifecycle: Share the ContainerLifecycle instance
    lifecycle: Add action to delete exceeding versions
    CLI: new 'openio lifecycle' commands
    Python API: apply LifeCycle rules on a container
    Python API: save LifeCycle rules to container property
    Python API: implement LifeCycle rules matching
    Python API: implement LifecycleConfiguration parsing
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    Python API: Refresh the rawx scores from cache
    client: allow https for proxy url
    
    Do not assume the proxy url is plain text http
    
    (cherry picked from commit a8e411f03b9f20e75cc671a42524f7d860175198)
    Python API: Allow to cache container metadata
    Python API: Allow to cache object metadata and location
    client: allow https for proxy url
    
    Do not assume the proxy url is plain text http
    Python API: Allow to use default value when converting value to boolean
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    Python API: Allow to rebuild chunk in frozen container
    Python API: Recompute damaged objects count of a container
    proxy, Python API: support 'client specified' peers in more routes
    Update Copyright
    Python API: Recompute statistics of a container
    blob-converter: recover missing fullpath extended attribute
    Python API: implement BlobImprover on top of Rebuilder
    
    Jira: R1810-28
    Python API: compare spare chunk and perfectible chunk qualities
    Python API: Flush properties of an object
    proxy: Return mtime when getting content properties
    
    (cherry picked from commit 7d74d4c5f31df9d9537dc1e2207958701ffbe755)
    Python API: Allow to change the policy of an object
    tests: new tests for container and object properties
    
    These new tests put focus on the size of properties, and ensure we can
    store at least 1MiB in a single object or container property.
    proxy: Add a 'content-size' header when getting properties
    Python API, meta2: forward special property beans
    
    Jira: R1810-27
    proxy: forward special property beans
    
    Jira: R1810-27
    proxy: Return mtime when getting content properties
    Python API: Delete useless method
    Fix formatting issue and tests
    Allow CID for object and container commands
    Python API: Use quote and unquote for headers
    Python API: Flush container fast
    oio: manage auto creation of container
    
    Previously, autocreate was forced to True.
    
    Parameter is now exposed on API side and default value is True for
    backward compatibility.
    Python API, meta2: Send the content ID to create an object
    proxy: fix end_marker parameter for object listing
    oio: fix end-marker for list objects
    
    Python API use --end-marker but proxy await marker_end
    Python API: retry reading properties after error
    
    The legacy way of fetching properties is buggy when there is a lot of
    them. In case of error, retry with the new way (the drawback is that it
    does 2 requests instead of one).
    
    Fix #1369
    Purge with a fixed number of versions
    meta2: Purge alias
    Python API: refactor object upload code
    
    Split object upload code in 3 smaller parts.
    Delete chunks that have just been uploaded in case of error.
    python: Dont't retry on content_create()
    Python API: add documentation, ensure a request ID is sent
    Python API: add documentation, fix warnings
    oio: Comply to the latest PEP8 rules enfroced by flake8
    Snapshots: rename meaningless variables and parameters
    Snapshot: Factorize code and add sequence number as a request paramater
    Container snapshot: fix small issues
    ObjectStorageApi: make container_raw_update accept list
    Add container snapshot
    
    The snapshot take the form of:
    -A copy of the sqlite base of the target to a meta2 chose by the load balancer.
    -All the chunks of the snapshot are replaced by new chunk that hardlink the target one.
    -The snapshot is frozen afterward.
    
    The chunks hardlink implies that the target and the snapshot chunks are in the same rawx.
    Currently it is the client that freeze and enable the containers during the snapshot.
    common/utils: Split to reduce dependencies
    Python API, tests: fix typos
    oio: implement truncate API
    
    If new size is not on chunk boundary, a new chunk will be created
    by downloading and uploading necessary part.
    ContainerClient: fix drain content status code
    
    Add tests to detect drain on nonexistent content.
    Add tests to the CLI for the command drain.
    Python API: fix content_locate() and properties
    Python API: Allow 3 attempts to register object metadata
    Meta2: Accept "local" argument to open local database
    CLI: Fix printing error (CreateContainer)
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    HttpApi: Remove 'requests' to use 'urllib3'
    Python API: rework object append code
    oio/api: allow append operations
    
    This patch introduces a new parameter for object_create to support
    appending data to an existing object.
    
    If object doesn't exist, it is created, only if container exists as
    flag append can not be used at same time with flag autocreate.
    Python API: support listing deleted objects
    Python API: add support for versions in object lists
    Python API: remove headers argument, add kwargs
    oio: Expose the forced behavior upon insertions of raw beans
    Python API: fix requests ids and kwargs
    python: Manage versioned object (CLI, API)
    bin: Add the oio-blob-registrator
    
    New tool to refresh the registration of the chunks in their container.
    Python API: fix WORM and SLAVE "admin" override
    tests: adapt to the last code reorganization
    Python API: another batch of code reorganization
    Python API: code reorganization and documentation
    cli: allow to set quota and storage policy (fix #727, fix #737)
    Python API: review content metadata keys (fix #726)
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    api: add functional tests around directory and container
    oio|tests : correct all int values inside headers for new requests update
    migrate ec content tests to use unified API
    core: move python files around
    Add tests of weird content names and fix some quoting issues
    python and rainx: fix/add support of new xattr (policy, chunk method and mime type)
    python: headers now returned when preparing a content
    python: add support for storage policy on content_prepare and content_spare
    python/rain: add mechanism to rebuild metachunk using rainx services
    python/rain: add content upload mechanism
    python/policy: prepare integration of rain policy
    rdir: rebuilder: add functionnal tests + fixes
    rdir: improve rebuilder and use the content id instead of the content path
    replace std json python lib with simplejson
    add default autocreate mode for container actions
    add blob mover
    internal-client: add support for cid param
    add internal container client
    tests: fix flaky service ID tests
    CI: enable python3 unit tests
    
    Jira: R1910-1
    oio: Expose the 'election balance' CLI action
    sqliterepo: add possibility to balance master elections
    
    (cherry picked from commit b5633f3b9a44b41bf5f2065db97b4567241998f1)
    sqliterepo: implement database vacuum request
    
    Vacuum (defragment) the database on the master service, then
    resynchronize it on the slaves.
    
    Jira: OS-299
    CLI: allow to query only one service with 'election' commands
    Admin CLI: Specify the result for each key when setting config
    CLI: Implement 'openio-admin <service-type> info'
    
    Jira: OS-293
    CLI: implement get-config and set-config commands
    
    These commands allow get/set ephemeral configuration parameters on the
    service.
    CLI: implement 'openio-admin service decache' commands
    tests: test sqliterepo replication
    Python API: stengthen the MetaMapping code
    
    Try to prevent dubious cases seen when running "directory decommission"
    operations, when the "old" peer set did not contain any of the previous
    peers, and thus the "new" peer set was empty.
    mover: Remove the bases that are no longer used
    Python API: Ask each peer if base exists
    proxy: Leave the election for a specific service ID
    Update python comments for managed namespaces
    CLI: implement 'openio election leave' subcommand
    Python API, CLI: new 'openio election sync' command
    proxy: implement "PIPEFROM" route under admin/copy
    sqliterepo: cache peers in election instead of resolver
    
    * cache election peers in election member structure
    * disable service resolver cache
    * document some proxy routes
    * fix "admin/copy" proxy route
     CLI: Add commands to debug elections
    Python API, CLI: review directory commands
    
    * new option '--meta0-timeout'
    * new API for low-level interaction with database elections
    * improve 'decommission' subcommand (still not working)
    oio/meta* client: Ensure LGPL as expected
    oio-meta2-mover: Leave election before deleting
    
    This prevents stale GETVERS commands to be sent to the old peer.
    oio-meta2-mover, Python API: Delete meta2 index entries from old peer
    Python API: stengthen the MetaMapping code
    
    Try to prevent dubious cases seen when running "directory decommission"
    operations, when the "old" peer set did not contain any of the previous
    peers, and thus the "new" peer set was empty.
    tests: Adapt 'oio-test-mover.sh' for service IDs
    mover: Remove the bases that are no longer used
    proxy: Leave the election for a specific service ID
    oio-meta2-mover: Add script to move meta2 bases
    oio/meta* client: Ensure LGPL as expected
    Python API: implement prefixed reqid decorator
    
    Implement a new decorator allowing to generate prefixed request IDs. Use
    this decorator in meta2 mover and rebuilder.
    Python API: Allow to rebuild meta2 databases when the quorum isn't reached
    Python API: Clean code to execute maintenance operations on meta2 databases
    Python API: clarify container moving code
    Python API: Remove unused class
    Python API: Prefer to copy the master when moving database
    Python API: Create class to handle meta2 databases
    oio/directory: Relicence to LGPL
    Python API: Create tool to rebuild meta2
    Python API: Create tool to repair containers
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/meta* client: Ensure LGPL as expected
    python: Adapt to the latest flake8 implementation
    Python API: Respect minimum distance when rebalancing meta1 databases
    Python API: another batch of python3 conversions
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Make most unit tests pass in python3
    
    Please note that no test was broken in python2, this only add more
    compatibility to python3 as verified by the test suite.
    proxy: Fix prefixes of meta0 list
    oio/directory: Remove a `print`
    cli: Make the resilience configurable upon a `directory bootstrap`
    directory bootstrap: Manage partial locations
    
    Set level=3 by default
    tests/unit: Add exhaustive tests around directory bootstrap
    cli: Code reorganized to ease the tests
    cli: Better & Faster directory bootstrap
    Check if the meta1 are present when bootstrapping
    Python API: do not try to balance meta1 services when zero-scored
    
    Also get rid of redundant tests about the presence of a logger.
    Python API: stengthen the MetaMapping code
    
    Try to prevent dubious cases seen when running "directory decommission"
    operations, when the "old" peer set did not contain any of the previous
    peers, and thus the "new" peer set was empty.
    CLI: fix 'directory decommission'
    
    - Accept 'long' base names when meta1_digits < 4.
    - Check the number of replicas.
    - Make it more verbose by default.
    proxy: Leave the election for a specific service ID
    oio-meta2-mover: Add script to move meta2 bases
    oio/directory/meta0.py: Use idiomatic exceptions
    oio/directory/meta0: Simplify the code
    
    Thanks to @fvennetier
    openio: Implement 'directory warmup'
    python: For the location to be instances of 'str'
    
    instead of the type inferred from a JSON message
    Make configurable the timeouts on meta0 operations
    Pytho API, CLI: review directory bootstrap code
    Python API, CLI: mostly working code to decommision meta1
    Python API, CLI: review directory commands
    
    * new option '--meta0-timeout'
    * new API for low-level interaction with database elections
    * improve 'decommission' subcommand (still not working)
    common/utils: Split to reduce dependencies
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    oio-directory-bootstrap: add --min-dist option (fix #1018)
    oio-directory-bootstrap: allow meta1_digits < 2 (fix #832)
    meta0: improve directory bootstrap (fix #965)
    cli: new options for "directory bootstrap" (fix #883)
    
    * --check to check the number or replicas before saving
    * --force to do the bootstrap even if already done
    * timeout is set to 30s
    Python API: another batch of code reorganization
    Python API: code reorganization and documentation
    oio: fixed erroneous comments
    oio: pep8 compliance
    
    ... *fucking* pep8 compliance ... yeah, fuck it !
    meta1 now manages prefixes from 0 to 4 digits
    
    By default, 4 digits are used, for the sake of backward compliance
    
    * meta1: coalesces prefixes in bases, based on the hexadecimal prefix
    * meta1: health check added around coalescence of prefixes, pre-refresh
    * oio: `directory bootstrap` manages the variable meta1 prefixes
    * tools/oio-bootstrap.py: manages the meta1 variable prefixes
    * tools/oio-reset.sh: manages the meta1 variable prefixes
    * meta1: code factorized, trimmed, beautified
    * etc/bootstrap-*: new presets
    * tools/oio-reset.sh: fixes number of directory replicas.
      It was equal to the number of meta1 services, by default.
    * meta0: crap code removed, remaining code simplified
    rdir: initialized early, better balanced
    
    rdir are linked to rawx by `openio directory bootstrap`.
    merge python client api from oiopy into core
    
    integrate CLI
    m0, proxy: new routes and tools to list and force meta0 mapping
    First implementation of a prefix balancing python script
    CI: enable python3 unit tests
    
    Jira: R1910-1
    CLI: document 'directory force' command
    oio-meta2-mover: Add script to move meta2 bases
    Python API, CLI: document "reference" operations
    common/utils: Split to reduce dependencies
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    HttpApi: Remove 'requests' to use 'urllib3'
    Python API: get rid of DirectoryAPI (replaced by DirectoryClient)
    Python API: another batch of code reorganization
    Python API: code reorganization and documentation
    Convert rdir client to DirectoryAPI (was DirectoryClient)
    core: move python files around
    rdir:  specify the service type to search service in the grid
    rdir: rebuilder: add functionnal tests + fixes
    replace std json python lib with simplejson
    internal-client: add support for cid param
    add internal proxy client
    
    directory & conscience client
    more to come
    oio/directory: Relicence to LGPL
    Python API: Allow to use default value when converting value to boolean
    Python API: another batch of python3 conversions
    CI: enable python3 unit tests
    
    Jira: R1910-1
    CLI: fix container list with non-ASCII characters
    oio-meta2-indexer, Python API: add a new meta2 indexing utility
    
    - Add a new wrapper to list all meta2 records indexed for a volume.
    - Add new meta2 indexing tool, sample conf and tests.
    Remove unsupported backblaze integration
    Python API: set is_latest field in object listings
    
    Implementing this feature in the Python API is easier than implementing
    it in our swift connector. And besides, it may be used in our CLI or
    tools like a lifecycle crawler (nothing has been implemented at the moment).
    Python API: Use 'depaginate' to refresh all containers when refreshing account
    Python API: fix download perfdata
    
    Measures were not taken at the proper code point, and were confusing
    CLI users.
    Python API: measure duration of last send() call
    Python API: retry fetch when clues of dirty cache
    Python API: compute extra perfdata
    
    Separate chunk connection and upload times.
    Compute average, standard deviation and relative standard deviation for
    chunk operations.
    oio: retrieve tls on configuration
    oio: download chunks with TLS
    oio: upload chunks with TLS
    Python API: Allow to cache container metadata
    Python API: Allow to cache object metadata and location
    Python API, proxy: set properties when autocreating containers
    CI: pass some tests with Python 2.7 and some with 3.6
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    Python API: improve error message aggregation on failed EC download
    
    Jira: OB-214
    Python API: Allow to read object with duplicated position
    Python API: Retry listing when the service is busy
    proxy: Get chunk method when listing objects in a container
    Python API: Use a quorum to link an object
    Set an operation-dependent prefix on request ids
    
    Also, when compiled in debug mode, print a warning when a request without
    request ID is received.
    Python API: apply timeouts parameters to account requests
    
    As for ObjectStorageApi, apply timeouts passed to the AccountClient
    constructor to all method calls.
    Python API: use same logger for ObjectStorageApi and BlobClient
    oio: propagate logger
    Python API: rename ambiguous perfdata 'total' to 'overall'
    Python API: enrich perfdata when reading and writing an object
    Python API: Enrich perfdata when requesting a service
    Python API: ramp up upload buffer size
    
    Start small to minimize initial dead time and parallelize early,
    then grow to avoid too much context switches.
    Python API: recompute deadline after data upload success
    
    At some point in the upload process, we know that the metadata server
    is fine (it provided us with chunk addresses) and the client is still
    listening (he just uploaded all data). It seems a good idea to
    postpone the deadline.
    Python API: load BackBlaze deps only when necessary
    Python API: Resolve CID
    Python API, sqliterepo: replicate container snapshots
    
    To avoid deadlocks at creation time, we used to keep a single copy
    of container snapshots. Now that the replication mechanism is more
    reliable, we can replicate them.
    proxy,m1: fix container snapshot feature
    
    The `sys.user.name` and `sys.account` entries of the snapshot were still
    refering to the snapshotted container. The 'storage.container.state'
    events emitted from the snapshot thus gave invalid information.
    
    This commit also call automatically a `container touch` to update account service.
    
    Fixes: OS-350
    CLI: load ObjectStorageApi from ClientManager
    account: fix filtering when more than 1000 containers
    
    Refactor the container filtering method so it is more readable
    and less error-prone.
    event-agent: share AccountClient and RdirClient instances
    
    Also review configuration defaults:
    - refresh account address every 3600s;
    - allow as many connections as coroutines ("concurrency").
    Test the stats of damaged objects
    Python API: Recompute damaged objects count of a container
    Permit to only list buckets
    Python API: forward timeouts, compute a deadline
    
    The 'patch_kwargs' functionality was used only on a few ObjectStorageApi
    methods, resulting in the read_timeout not being applied on all requests
    to oio-proxy. This is now fixed.
    
    Also, if a timeout is provided, a deadline is now computed for internal
    usage, and a timeout is computed accordingly for each subrequest.
    Update Copyright
    Python API: Recompute statistics of a container
    Python API: Flush properties of an object
    Python API: fix end condition of container_flush loop
    Python API: fix end condition of container_flush loop
    Lifecycle: use new method object_create_ext
    Python API: Delete useless function
    Python API: Allow to change the policy of an object
    tests: new tests for account and reference properties
    oio/api: new method to create an object
    
    A new method will now return obj_metadata after
    creation of new object, including version.
    
    Required for OS-239
    Python API: Fix listing with properties
    Document account APIs
    Test content.perfectible events management
    Python API, meta2: forward special property beans
    
    Jira: R1810-27
    Python API, CLI: document container snapshots
    Python API: Delete useless method
    Fix formatting issue and tests
    Allow CID for object and container commands
    Test --quickly option
    Add option to flush container quickly
    Python API: Allow generating a new chunk ID to link a chunk
    Python API: Use quote and unquote for headers
    Python API, core: Add the content ID to the fullpath
    Python API: Factorize the encoding and decoding of the fullpath
    Python API: Link an object with version and content ID
    Python API: Rename object_fastcopy to object_link
    oio: Manage metadata for object_fastcopy
    
    When new ACL was put on Swift/S3 with fastcopy middleware enabled,
    the ACL was not used at all.
    
    This commit add the option to use original metadata or to replace
    them through properties_directive parameter (COPY or REPLACE)
    Python API: Flush container fast
    Python API: Add command to flush container
    oio: manage auto creation of container
    
    Previously, autocreate was forced to True.
    
    Parameter is now exposed on API side and default value is True for
    backward compatibility.
    proxy, Python API: fix missing object error codes
    Python API, meta2: Send the content ID to create an object
    Python API: fix kwargs hack
    
    Fix kwargs hack in ObjectStorageApi preventing usage of
    chunk_checksum_algo keyword.
    Python API: allow disabling client-side chunk checksums
    Python API: retry reading properties after error
    
    The legacy way of fetching properties is buggy when there is a lot of
    them. In case of error, retry with the new way (the drawback is that it
    does 2 requests instead of one).
    
    Fix #1369
    Python API: allow sourcing object data from iterable
    
    Before this commit, only files, buffers or bare generators were allowed.
    Python API, CLI: Purge container
    Add fastcopy on Python API
    Python API: Add method to check if an object exists
    Fix Flake8
    oio/blob: Add a cache mecanism
    
    Cache will contains UUID IP:PORT associations.
    Cached entries will be used during 60 second by default.
    Python API: refactor object upload code
    
    Split object upload code in 3 smaller parts.
    Delete chunks that have just been uploaded in case of error.
    Python API: add support for operation deadlines
    Python API: delete chunk after object creation conflict
    account: return container mtime in listings
    Python API, proxy: fix object listing pagination
    Update python comments for managed namespaces
    Python API: minor readability fixes
    Python API: keep track of time-to-first-byte
    Python API: improve documentation, add deprecation warnings
    Python API, CLI: keep track of request durations
    
    First step: keep track of resolving and request times in proxy,
    then rawx request time in Python API.
    Python API: add documentation, ensure a request ID is sent
    Python API: document, add depagination utility
    Python API: implement LifeCycle rules matching
    Snapshots: rename meaningless variables and parameters
    Snapshot: Factorize code and add sequence number as a request paramater
    Container snapshot: fix small issues
    Add container snapshot
    
    The snapshot take the form of:
    -A copy of the sqlite base of the target to a meta2 chose by the load balancer.
    -All the chunks of the snapshot are replaced by new chunk that hardlink the target one.
    -The snapshot is frozen afterward.
    
    The chunks hardlink implies that the target and the snapshot chunks are in the same rawx.
    Currently it is the client that freeze and enable the containers during the snapshot.
    Add LazyLoader for ObjectStorageApi
    common/utils: Split to reduce dependencies
    Python API, tests: fix typos
    oio: implement truncate API
    
    If new size is not on chunk boundary, a new chunk will be created
    by downloading and uploading necessary part.
    Python API: allow to set "pool_manager" for each request
    Python API: Share loggers to not overwrite or recreate the logger
    oio-account-server: Extend the openio CLI tool
    CLI: Fix printing error (CreateContainer)
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Fix minor bug
    Python API: rework get_meta_ranges function
    Meta2, Proxy: Add action drain content
    
    The action remove all the chunks of a content but keep all the properties.
    
    We can replace the data or the properties of the content.
    But no action needing the removed chunks are accepted (A HTTP 410 Gone will be sent).
    Client C, Python: Fix wrong full path send
    Rawx: make it more robust against strange path
    Rawx: Add xattr oio_version and full_path
    
    Modify the client to send the header X-oio-chunk-meta-full-path:Acct/Container/Name
    Convert the header to the xattr oio.user:Acct/Container/Name=""
    account: facatorize code, add documentation (fix #1054)
    Python API: add some DeprecationWarning
    Python API: rework object append code
    oio/api: allow append operations
    
    This patch introduces a new parameter for object_create to support
    appending data to an existing object.
    
    If object doesn't exist, it is created, only if container exists as
    flag append can not be used at same time with flag autocreate.
    Python API: support listing deleted objects
    Python API: add support for versions in object lists
    cli: organize imports, add versioning options
    Python API: remove headers argument, add kwargs
    Python API: factorize code (fix #987)
    Python API: fix requests ids and kwargs
    python: Manage versioned object (CLI, API)
    oio: Fix bulk requests
    
    Allow the client to continue with series of unitary requests if the bulk
    versions are not supported. Also allow it to continue with smaller
    batches when the proxy tells the batch is too big.
    proxy: Add bulk delete content
    
    Permit to delete many content in one go for one container.
    Modify the format of cli command 'openio object delete' to return a List.Lister.
    Modify tests that depended on the old format response to use the new one.
    
    The format of a request to the proxy is a json '{"contents":[{"name":"..."},{"name":"..."}]}'
    and the url is /content/delete_many.
    The format of the answer is a json '{"contents":[{"name":"...", "status":"...", "message":"..."}]}'
    oio: Fix the behavior when uploading contents in EC cases
    
    Avoid filtering peers in EC case. Let's bound that usage to the upload
    of replicated contents.
    oio: Do not save failed chunks, when uploading replicated contents
    
    Fix #916
    
    Thanks to @fvennetier
    Python API: improve download error messages
    Proxy: correct the create_many function and make tests passed
    Add an option to create many containers in on go
    
    The command "openio container create <container>" used to send a request for every
    container in the list to create it.
    Now the command check the number of containers and use a specific request to ask for the
    creation of all the containers.
    oio: Fix bulk requests
    
    Allow the client to continue with series of unitary requests if the bulk
    versions are not supported. Also allow it to continue with smaller
    batches when the proxy tells the batch is too big.
    proxy: Add bulk delete content
    
    Permit to delete many content in one go for one container.
    Modify the format of cli command 'openio object delete' to return a List.Lister.
    Modify tests that depended on the old format response to use the new one.
    
    The format of a request to the proxy is a json '{"contents":[{"name":"..."},{"name":"..."}]}'
    and the url is /content/delete_many.
    The format of the answer is a json '{"contents":[{"name":"...", "status":"...", "message":"..."}]}'
    oio/api: Rewrite statements for clearer forms
    
    Thanks to @fvennetier!
    As a reply to his comment on #927
    oio: Avoid invalid chunks (out of the quorum)
    
    Resist to #916
    oio: Fix the behavior when uploading contents in EC cases
    
    Avoid filtering peers in EC case. Let's bound that usage to the upload
    of replicated contents.
    oio: Do not save failed chunks, when uploading replicated contents
    
    Fix #916
    
    Thanks to @fvennetier
    Add account listing to the CLI (fix #817)
    Python API: improve download error messages
    Proxy: correct the create_many function and make tests passed
    Add an option to create many containers in on go
    
    The command "openio container create <container>" used to send a request for every
    container in the list to create it.
    Now the command check the number of containers and use a specific request to ask for the
    creation of all the containers.
    Python API: merge GeneratorReader and GeneratorIO classes
    oiopy: Expose `touch` commands on containers and objects
    oio: `openio` resists to down account services.
    api: fix object_list metadata handling
    
    (cherry picked from commit 96ff33e554c86757284896031a283c9752a0b1d4)
    api: fix object_list metadata handling
    oio: Give an acceptable default for the B2 credentials file.
    oio: Fix an exception type
    api: object_create fix args mixup
    Python API: document some methods
    Python API: fix transitional ObjectStorageAPI for oio-swift
    tests: adapt to the last code reorganization
    Python API: another batch of code reorganization
    Python API: continue the documentation effort
    Python API: code reorganization and documentation
    cli: allow to set quota and storage policy (fix #727, fix #737)
    Python API: allow setting connection, read and write timeouts
    cli: allow listing properties while listing objects
    Python API: fix too aggressive property key rename
    api: fix invalid request body format for object_set_properties (#745)
    Python API: fix ranges when not doing EC
    Python API: _sort_chunks() adds offset in chunk descriptions
    Python API: review content metadata keys (fix #726)
    Python API: send request id on some requests
    cli: better message when all the services are locked
    
    Fixes #502
    
    Explicit message telling no account service is available.
    python: when reading, choose chunk with weighted random algo
    python: allow object creation without content_length
    api,tests: continue to fix tests around properties
    m1,tests: start to fix tests around properties
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    api: add functional tests around directory and container
    api: adapt to new properties handling
    cli: add more functional tests
    api: fix no ranges
    core: implement oio_sds_truncate() function
    python api: support multiple ranges in same request
    ecd: take Range header into account
    python: simplify initialization of ObjectStorageAPI
    backblaze : delete operation is made asynchronously
    backblaze_http : add new class Utils
    ecd : add clear error messages
    cli: fix container listing (#624)
    ecd: adapt for Backblaze upload from C client
    oio : namespace is not used anymore to push in backblaze
    oio/ecd/app.py : add backblaze storage policy support (plain is WIP)
    tools/oio-bootstrap.py : adding application-key to configure ecd service
    oio/api/backblaze_http.py : correcting some mistakes
    backblaze: clean code
    b2: change configuration, improve error handling
    merge python client api from oiopy into core
    
    integrate CLI
    Python API: Check size of all uploaded chunks
    Python API: fix download perfdata
    
    Measures were not taken at the proper code point, and were confusing
    CLI users.
    Python API: measure duration of last send() call
    CI: Fix test perfdata
    
    Change the format to have a consistent and readable format in "oioproxy-logging"
    Python API: compute extra perfdata
    
    Separate chunk connection and upload times.
    Compute average, standard deviation and relative standard deviation for
    chunk operations.
    oio: upload chunks with TLS
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Solve every unit test for python3
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    Python API: Prevent from writing simultaneously on same socket
    Python API: fix request ID header name
    Python API: improve error message aggregation on failed EC download
    
    Jira: OB-214
    Python API: Use a quorum to link an object
    oio: propagate logger
    Python API: report EC chunks errors only once
    
    Because of a recent modification, some errors were reported twice (or
    more!), and the Python API attempted to commit the same chunk several
    times. This was fortunately blocked by the meta2
    ("Content broken and irreparable (HTTP 500) (STATUS 425)"), and the
    whole object upload was considered a failure, even though the chunks
    quorum was reached. This is now fixed.
    oio: fix logger
    
    Few parts of Python API were using unset logger
    Python API: tolerate errors during EC chunk upload finish
    Python API: clean the EC upload code
    
    Rework the EC upload code to make it more readable.
    Also, parallelize the upload of the trailers, so a slow chunk upload
    does not block the termination of the other chunk uploads.
    Python API: rename an ambiguous method
    Python API: change how we count successful EC uploads
    
    The previous code may have considered as successes some uploads that
    had failed.
    Python API: reduce verbosity of some errors
    
    These errors are often reported twice:
    - one time on their own;
    - another time if the upload fails.
    
    Now, the first report will only be a warning.
    Python API: display cnx errors along with other errors
    Python API: ensure EC writers are closed whatever happens
    
    They used to leak open connections on SourceReadError or
    SourceReadTimeout exceptions.
    Python API: make eventlet yields more explicit
    Python API: align write buffer size to EC_SEGMENT_SIZE
    
    This will reduce the number of buffer copies in the ec_encode function.
    Python API: reduce usage of lists
    
    This improvement is not really visible in benchmarks, but with a code
    profiler, we can see a small decrease of the number of calls to
    'append'.
    Python API: enrich perfdata when reading and writing an object
    Python API: Replace Queue with LightQueue when sending data
    Python API: ramp up upload buffer size
    
    Start small to minimize initial dead time and parallelize early,
    then grow to avoid too much context switches.
    Python API: better eventlet coordination
    
    Bufferize less by better interleave of input and output greenlets.
    Python API: enable TCP_CORK, avoid buffer copies
    Python API: improve request ID usage
    Python API: use REQID_HEADER constant everywhere
    Python API: document and use ServiceUnavailable exception
    
    Jira: OS-263
    Python API: fix issue with chunk_checksum_algo=None
    
    The "x-oio-chunk-meta-chunk-hash" trailer was announced but not sent.
    Python API: fix issue with chunk_checksum_algo=None
    
    The "x-oio-chunk-meta-chunk-hash" trailer was announced but not sent.
    Python API: Fix concurrency
    Python API: fix EC data stream leak
    
    There was an object reference loop preventing the garbage collector from
    releasing some stream object, in the case these streams were not read
    until the end.
    Python API: explicitely close EC chunk sockets
    Python API: Reduce verbosity of socket errors
    Python API: do not print stack on chunk timeout
    
    Just print the type and duration of timeout.
    Python API: do align metachunk size if smaller than segment size
    ecd: Comply to PEP8
    Permit ECD to work with stream
    Python API: allow disabling client-side chunk checksums
    Python API: clarify error messages
    Python API: do not register faulty chunks on upload
    
    Fix #1239
    
    meta2 will check that the set of chunks satisfies the policy and emit an
    event if it does not.
    Python API: improve exception handling
    
    Improve exception messages.
    Never return 'green' timeouts to client applications.
    oio: use real_url if set
    
    Default is to always fallback to url.
    Python API: log details about SourceReadError
    Python API, CLI: keep track of request durations
    
    First step: keep track of resolving and request times in proxy,
    then rawx request time in Python API.
    oio: Comply to the latest PEP8 rules enfroced by flake8
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Python API: rework get_meta_ranges function
    oio/api: Fix invalid ranges
    
    When computing range download to chunks, results was stored inside
    a Dict. This result was used with an iterator and order of chunks was lost.
    The fix replace this Dict by a OrderectDict.
    Python API: refactor, improve error messages (fix #1048)
    Python API: convert eventlet Timeout to OioTimeout
    oio: Fix the upload of content named with non-ASCII characters
    Python API: factorize code (fix #987)
    oio/ec: Send the chunk hash in the HTTP trailer
    
    This lets the rawx check it matches its own checksum.
    Python API: fix requests ids and kwargs
    Python API: fix EC failure after rawx connection failure
    
    This failure was manifesting with 'list index out of range' errors
    happening in oio/api/ec.py.
    Python API: improve some error messages about chunks
    Python API: fix metachunk hashes for pos > 0 (fix #950)
    Python API: fix EC failure after rawx connection failure
    
    This failure was manifesting with 'list index out of range' errors
    happening in oio/api/ec.py.
    Python API: improve some error messages about chunks
    Python API: fix metachunk hashes for pos > 0 (fix #950)
    api: avoid empty chunks
    api: fix missing failed chunk in EC
    pep8: minor fixes
    oio: clean separation of green code
    Python API: allow setting connection, read and write timeouts
    Python API: fix ranges when not doing EC
    fixed meta chunk ranges
    api: fix Range header for GET requests in EC
    
    this caused ranges in EC to be broken
    
    changed the corresponding unit test to check Range header in GET request
    
    TODO we should tests more ranges
    Python API: send request id on some requests
    python: allow object creation without content_length
    ecd: take Range header into account
    migrate ec content tests to use unified API
    merge python client api from oiopy into core
    
    integrate CLI
    api/base: use urllib3 keywords from http_urllib3
    
    Do not redefine list of acceptable keywords when we have them in
    another file:
     - get_pool_manager does its own argument-filtering/int conversion,
    just let it do
     - use URLLIB3_REQUESTS_KWARGS straight from oio.common.http_urllib3
    to avoid missing updates
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Correct wrongfully migrated exceptions syntax
    
    The syntax for thoses exceptions were wrongfully migrated to python3
    with no regard to python2. This commit repair the build for python2.
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    Python API: fix request ID header name
    Python API: rename ambiguous perfdata 'total' to 'overall'
    Python API: Enrich perfdata when requesting a service
    Python API: allow more PoolManager parameters
    oio: fix duplicate req-id header
    Python API: use reqid instead of req_id
    
    Try to be consistent when using abbreviations. We choose reqid over
    req_id since it was more common in the existing code base, especially in
    log messages.
    Python API: use REQID_HEADER constant everywhere
    Python API, server: limit length of request ID
    Allow listing to be done on master service only
    
    For several operations, when a list is done just after an object
    deletion, the listing operation may occur on a slave which has not been
    synchronized yet.
    Python API: improve request ID usage
    Python API: filter urllib3 args, fix beanstalkd client
    Python API: explicitly set "Connection: keep-alive" header
    Python API: include netloc in urllib3 errors messages
    Python API: remove obsolete function
    Use only 'urllib3' imported with 'eventlet'
    Python API: improve exception handling
    
    Factorize code that converts exceptions from urllib3 to OioException.
    Python API: allow admin_mode parameter to be a string
    oio/common: expose backoff_factor option
    
    By default, urllib3 doesn't use backoff when retries are
    enabled. This commit introduce parameter to update it.
    
    Following urllib3 documentation, backoff is used after second
    try and will sleep by using formula:
    {backoff factor} * (2 ^ ({number of total retries} - 1))
    Python API: add support for operation deadlines
    Python API: cleanup exception handling
    
    Fix #1279
    Python API: minor readability fixes
    Python API, CLI: keep track of request durations
    
    First step: keep track of resolving and request times in proxy,
    then rawx request time in Python API.
    Let the python API transmit timeout in requests
    
    So that the backend services can compute deadlines for the handling of
    each request.
    common/http: Split to reduce dependencies
    common/utils: Split to reduce dependencies
    Python API: allow to set "pool_manager" for each request
    Proxy: Manage error 503
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    HttpApi: Add doc
    Python API: improve HttpApi exception handling
    HttpApi: Remove 'requests' to use 'urllib3'
    Python API: review exception handling in HttpApi
    cli: organize imports, add versioning options
    Python API: remove headers argument, add kwargs
    Python API: factorize code (fix #987)
    Python API: fix requests ids and kwargs
    tests: adapt to the last code reorganization
    Python API: another batch of code reorganization
    Python API: code reorganization and documentation
    Python API: allow setting connection pool options
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    oio|tests : correct all int values inside headers for new requests update
    merge python client api from oiopy into core
    
    integrate CLI
    Python API: Check size of all uploaded chunks
    Python API: measure duration of last send() call
    CI: Fix test perfdata
    
    Change the format to have a consistent and readable format in "oioproxy-logging"
    Python API: compute extra perfdata
    
    Separate chunk connection and upload times.
    Compute average, standard deviation and relative standard deviation for
    chunk operations.
    oio: upload chunks with TLS
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    oio: propagate logger
    oio: fix logger
    
    Few parts of Python API were using unset logger
    Python API: reduce verbosity of some errors
    
    These errors are often reported twice:
    - one time on their own;
    - another time if the upload fails.
    
    Now, the first report will only be a warning.
    Python API: enrich perfdata when reading and writing an object
    Python API: Replace Queue with LightQueue when sending data
    Python API: ramp up upload buffer size
    
    Start small to minimize initial dead time and parallelize early,
    then grow to avoid too much context switches.
    Python API: better eventlet coordination
    
    Bufferize less by better interleave of input and output greenlets.
    Python API: enable TCP_CORK, avoid buffer copies
    Python API: improve request ID usage
    Python API: Fix concurrency
    Python API: Reduce verbosity of socket errors
    Python API: do not print stack on chunk timeout
    
    Just print the type and duration of timeout.
    Python API: allow disabling client-side chunk checksums
    Python API: improve exception handling
    
    Improve exception messages.
    Never return 'green' timeouts to client applications.
    oio: use real_url if set
    
    Default is to always fallback to url.
    Python API, CLI: keep track of request durations
    
    First step: keep track of resolving and request times in proxy,
    then rawx request time in Python API.
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Python API: refactor, improve error messages (fix #1048)
    Python API: convert eventlet Timeout to OioTimeout
    replication: fix error on replicated write chunk
    
    Use a copy of a list of connections when a remove maybe needed
    Python API: do not send end marker to failed connection
    Python API: fix requests ids and kwargs
    Python API: fix metachunk hashes for pos > 0 (fix #950)
    oio: Fix the behavior when uploading contents in EC cases
    
    Avoid filtering peers in EC case. Let's bound that usage to the upload
    of replicated contents.
    oio: Do not save failed chunks, when uploading replicated contents
    
    Fix #916
    
    Thanks to @fvennetier
    Python API: improve upload error handling (fix #913)
    Python API: fix metachunk hashes for pos > 0 (fix #950)
    oio: Fix the behavior when uploading contents in EC cases
    
    Avoid filtering peers in EC case. Let's bound that usage to the upload
    of replicated contents.
    oio: Do not save failed chunks, when uploading replicated contents
    
    Fix #916
    
    Thanks to @fvennetier
    Python API: improve upload error handling (fix #913)
    api: avoid empty chunks
    oio: clean separation of green code
    api: missing Timeout on response read
    Python API: allow setting connection, read and write timeouts
    Python API: use ReplicatedChunkWriteHandler in BlobClient
    python: allow object creation without content_length
    merge python client api from oiopy into core
    
    integrate CLI
    merge python client api from oiopy into core
    
    integrate CLI
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    Python API: Pass the request ID when linking
    Python API: fix download perfdata
    
    Measures were not taken at the proper code point, and were confusing
    CLI users.
    oio: download chunks with TLS
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Solve every unit test for python3
    Make most unit tests pass in python3
    
    Please note that no test was broken in python2, this only add more
    compatibility to python3 as verified by the test suite.
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    Python API: fix request ID header name
    Python API: improve error message aggregation on failed EC download
    
    Jira: OB-214
    Python API: Use a quorum to link an object
    Python API: raise ServiceBusy when no chunk quorum
    
    Raise a ServiceBusy error when writing an object and the quorum of the
    chunks is not reached, and this cannot be attributed to a timeout.
    
    Jira: OS-434
    oio: propagate logger
    oio: fix logger
    
    Few parts of Python API were using unset logger
    Python API: enrich perfdata when reading and writing an object
    Python API: ramp up upload buffer size
    
    Start small to minimize initial dead time and parallelize early,
    then grow to avoid too much context switches.
    Python API: recompute deadline after data upload success
    
    At some point in the upload process, we know that the metadata server
    is fine (it provided us with chunk addresses) and the client is still
    listening (he just uploaded all data). It seems a good idea to
    postpone the deadline.
    Python API: improve request ID usage
    Python API: use REQID_HEADER constant everywhere
    proxy, Python API: support 'client specified' peers in more routes
    Python API: Fix concurrency
    Python API, meta2: forward special property beans
    
    Jira: R1810-27
    Python API: fix EC data stream leak
    
    There was an object reference loop preventing the garbage collector from
    releasing some stream object, in the case these streams were not read
    until the end.
    Python API: close chunks download connection
    
    In the case when the reader does not read data until the end, some
    connections where never closed.
    Python API: explicitely close EC chunk sockets
    Python API: shutdown sockets before closing
    
    A simple close() won't release the connection, it will stay some time in
    CLOSE_WAIT state, unless we call shutdown() before close().
    Python API: close chunk connection after 404 error
    Python API: Reduce verbosity of socket errors
    Python API: allow disabling client-side chunk checksums
    Python API: improve exception handling
    
    Improve exception messages.
    Never return 'green' timeouts to client applications.
    Python API: change exceptions originating from rawx
    oio/rawx: Enlarge your timeout to the rawx
    
    Might an op' feel free to reduce the values for its own deployment, long
    values now become the default.
    Python API: improve request ID usage in ChunkReader
    
    Relates to #1346
    oio: use real_url if set
    
    Default is to always fallback to url.
    Python API: refactor object upload code
    
    Split object upload code in 3 smaller parts.
    Delete chunks that have just been uploaded in case of error.
    Python API: add support for operation deadlines
    Python API: fix bad comment
    Python API: improve rawx timeout handling code
    common/http: Split to reduce dependencies
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Python API: refactor, improve error messages (fix #1048)
    Python API: remove headers argument, add kwargs
    Python API: factorize code (fix #987)
    Python API: improve some error messages about chunks
    Python API: set timeouts as float
    oio: Document the upload API
    Python API: improve upload error handling (fix #913)
    Python API: improve download error messages
    Python API: improve some error messages about chunks
    Python API: set timeouts as float
    oio: Document the upload API
    Python API: improve upload error handling (fix #913)
    Python API: improve download error messages
    Python API: wrap source stream into IOBase if necessary
    Python API: merge GeneratorReader and GeneratorIO classes
    api: avoid empty chunks
    oio: clean separation of green code
    Python API: code reorganization and documentation
    Python API: allow setting connection, read and write timeouts
    Python API: fix ranges when not doing EC
    Python API: use ChunkReader in BlobClient
    python: allow object creation without content_length
    merge python client api from oiopy into core
    
    integrate CLI
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/rdir: ensure LGPL
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    Python API: fix request ID header name
    Python API: Allow to paginate the status of the volume
    blob-rebuilder: Shuffle chunks after fetching them from rdir
    
    Jira: OS-442
    Python API: Enrich perfdata when requesting a service
    Python API: use reqid instead of req_id
    
    Try to be consistent when using abbreviations. We choose reqid over
    req_id since it was more common in the existing code base, especially in
    log messages.
    Python API: use REQID_HEADER constant everywhere
    CLI: implement 'openio-admin <item_type> check'
    Python API: refactor
    CLI: add '--min-dist' option to 'rdir bootstrap'
    
    Jira: OS-281
    blob-converter: recover missing fullpath extended attribute
    oio-meta2-mover, Python API: Delete meta2 index entries from old peer
    Python API: Add ability to delete meta2 index record with cid only
    oio-meta2-indexer, Python API: add a new meta2 indexing utility
    
    - Add a new wrapper to list all meta2 records indexed for a volume.
    - Add new meta2 indexing tool, sample conf and tests.
    Python API: fix bootstrap of meta2 rdir databases
    Relocate python api tests and fix indentation errors
    
    - Fix indentation errors in test_events_emission.py test suite.
    - Relocate python API mocked tests to tests/unit/api and make sure
    they use dummy namespaces instead of pre-loading the configuration.
    - Fix a problem where the RdirClient didn't correctly pass the
    endpoint to the superclass constructor.
    Add python sdk rdir api tests
    Python API, rdir: document
    Python API, rdir: refactor
    Change the container events' data format
    
    - Change the "storage.container.new" and "storage.container.deleted"
    events so that the peers are sent in a "peer" field of the "data" field
    instead of it being the whole "data" field.
    - Fix an indentation problem in oio/rdir/client.py
    Finish up work on RDIR and RdirClient
    
    - At @fvennetier's request, the "marker" parameter in /meta2/fetch
    is now a container url, that will not be included in the result set
    returned.
    - Fixed a problem while generating the json response for /meta2/fetch
    so we specifically copy vallen characters returned from the value
    returned by LevelDB iterator. Previously it compromised the generated
    JSON object.
    - Added the RdirClient.meta2_index_fetch method to reflect the
    /meta2/fetch route on RDIR.
    Move RDIR/META2 assignment to new CLI command
    
    Moved the RDIR/META2 assignment a new "openio rdir bootstrap meta2"
    command, and added an "openio rdir bootstrap rawx" command that is
    exactly equivalent to "openio volume admin bootstrap" (which in fact
    re-uses the same code)
    Fix variables names and req_id on RdirClient
    
    - Use container_id instead of content_id (which made no sense in this case)
    - Correctly fetch (or not) a req_id when trying to send an RDIR request.
    Refactor rdir assignment in RdirDispatcher
    
    - Factorize RdirDispatcher's assignments methods into a generic
    and two wrappers for RAWX and META2 services.
    - Fix for X-oio-req-id as requested by @fvennetier
    - Modify a test that plugs into the callstack to account for a slight
    modification of the callstack after introducing the RdirDispatcher
    wrappers.
    Addressing some of @fvennetier comments
    Rdir assignment to META2 on volume bootstrap
    
    The same facilities used to assign Rdir services to rawx services
    are reused in this patch to assign some to META2 services.
    
    For the time being, the bootstrapping is done when the initial
    volume bootstrapping is done.
    
    A future patch will bring a new command to do that separatly from
    the volume bootstrap.
    Add event filters to index META2 databases
    rdir, CLI: Clear chunks entries
    Transfer request ID in chunk events
    
    - Rawx forwards incoming request ID to outgoing events
    - Event-agent uses this request ID when indexing chunks in rdir
    
    Relates to #1346
    Python API: tolerate meta1 errors during 'volume admin bootstrap'
    
    Fix #1447
    Before this commit, a single meta1 failure was preventing the operation
    to continue. Also, 'volume assignation' command did not return any
    result.
    Python API: Retry to fetch chunks
    CLI: Don't retry upon bootstrap success
    
    Thanks to @jfsmig
    oio/rdir/client: Ignore 'already' errors when assigning
    Continue to assign all rawx if rdir is already linked
    oio/rdir: Retry 'volume bootstrap' when platform not ready
    oio/rdir: Manage configurable timeouts on create()
    oio: Inc. the timeouts involved in 'volume bootstrap'
    oio: Inc. the timeouts involved in 'volume bootstrap'
    Use Service Id everywhere
    Fix Flake8
    rdir: now uses uuid of rawx
    
    Fix also generated events by rawx and consumed by event-agent
    core/lb: fix rdir service assignation (fix #1337)
    Python API: fix RdirClient service address decache
    Python API: add documentation, ensure a request ID is sent
    Rdir client: clear cache on network errors
    common/utils: Split to reduce dependencies
    Python API: Share loggers to not overwrite or recreate the logger
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    HttpApi: Remove 'requests' to use 'urllib3'
    Python API: improve rdir assignation
    
    Use a special service pool, declared when needed by the CLI.
    No need for user_is_a_service anymore.
    cli: display empty rdir in "volume assignation"
    cli: new 'volume assignation' subcommand
    
    Displays which rdir service is linked to each rawx service.
    Also add '--max-per-rdir' option to 'volume admin bootstrap'.
    rdir: create DB during bootstrap, fix bug when rdir down
    oio/rdir: Fix typos and useless code
    oio/rdir: Do not link from the simple rdir client
    
    Keep this for a class whose purpose is administration and deployment.
    cli: warn if rawx are down when assigning rdir services
    Python API: another batch of code reorganization
    Python API: code reorganization and documentation
    oio: avoids division by zero when no service available
    
    It happened in `openio directory bootstrap` when all the rdir serviices
    where unavailable.
    test_lb: improve error message
    rdir: filter on container id, better exceptions
    rdir: initialized early, better balanced
    
    rdir are linked to rawx by `openio directory bootstrap`.
    Convert rdir client to DirectoryAPI (was DirectoryClient)
    cli: add more functional tests
    cli: fix type of date in 'openio volume admin incident'
    cli: add commands for volume, events, cluster
    
    Volume:
    * admin commands lock, unlock, incident, show
    * show command
    
    Events:
    * stats command
    
    Cluster:
    * list, show commands
    rdir and account: python-flask no longer required (#603)
    rdir client: keep a cache of rdir addresses
    
    This speeds up event-agent by about 25%.
    core: move python files around
    rdir client: fix bug when no rdir linked to rawx reference
    rdir: explicit database create
    
    add draft cli for rdir interaction
    rdir:  specify the service type to search service in the grid
    rdir: rebuilder: add functionnal tests + fixes
    rdir: fetch: use list instead of dict to preserve entries order
    rdir: change command name (broken date -> incident date)
    rdir: add protocol version in each url
    rdir: push all xattr in db
    rdir: create and link a reference to rdir service if necessary
    rdir: add new commands to client + client bypasses the proxy to contact rdir server
    rebuilder: use new lock commands to avoid two rebuild at the same time
    rdir: rebuilder rebuilds chunks up to the incident date set by admin in rdir
    rdir: fetch: add option 'ignore_rebuilt' to ignore chunks already rebuilt
    rebuilder: ignore rebuilt chunks to allow user to resume the crawling
    rdir: add rebuild crawler to rebuild chunks on the same valume after its replacement
    proxy+rdir: add actions to fetch the index and to show rebuild status
    rdir: client can force the modification time of chunk creation event
    rdir: add chunk deletion event
    rdir: add chunk creation event in rawx and in event agent + minor changes
    rdir: crawler added + rdir installed using oio-reset + fixes
    allow multiple glob patterns in conscienceagent's include_dir conf
    oio/conscience: Ensure the LGPL header
    conscience-agent: set a timeout for the http stats collector
    
    After investigation, it appears that stats/http doesn't
    implement a timeout, leaving the coroutine waiting forever.
    Propagate TLS port into tags
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    Python API: Deregister specific services
    Python API: Fix concurrency
    oio/conscience/agent: React to services reporting I/O errors
    Use Service Id everywhere
    oio: conscience agent can retreive uuid from stats
    
    However it move stat.uuid to tag.uid.
    oio/conscience/agent: Break several loops when exiting
    
    (cherry picked from commit 230ee5ab7a40c742fd99bbf03bb4f848f217e88b)
    oio/conscience/agent: Break several loops when exiting
    common/http: Split to reduce dependencies
    common/utils: Split to reduce dependencies
    Python API: Share loggers to not overwrite or recreate the logger
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    HttpApi: Add doc
    HttpApi: Remove 'requests' to use 'urllib3'
    Python API: another batch of code reorganization
    Python API: code reorganization and documentation
    oio: complies to pep8, adds missing spaces
    conscience-agent: better message on configuration error
    Review storage policy and service pool configuration
    conscience-agent: trap register errors
    
    Closes #537
    core: move python files around
    conscience-agent: configuration fixes and cleanup
    conscience-agent: refactoring and cleanup
    conscience-agent: set service location
    conscience-agent: use a boolean for tag.up
    conscience-agent: implement basic rawx stats
    add conscience-agent
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Python API: Deregister specific services
    Python API: use service addr as ID if no ID provided
    
    (cherry picked from commit 678bbbffe95140b0aecddb5f56462ad525809ba8)
    Python API: Improve the service resolver
    Python API: lazily load LbClient from ConscienceClient
    proxy: document some routes
    CLI: implement 'item locate' commands
    Python API: forward timeouts, compute a deadline
    
    The 'patch_kwargs' functionality was used only on a few ObjectStorageApi
    methods, resulting in the read_timeout not being applied on all requests
    to oio-proxy. This is now fixed.
    
    Also, if a timeout is provided, a deadline is now computed for internal
    usage, and a timeout is computed accordingly for each subrequest.
    CLI: add '--min-dist' option to 'rdir bootstrap'
    
    Jira: OS-281
    Test content.perfectible events management
    oio: Inc. the timeouts involved in 'volume bootstrap'
    Use Service Id everywhere
    oio/blob: Add a cache mecanism
    
    Cache will contains UUID IP:PORT associations.
    Cached entries will be used during 60 second by default.
    oio/conscience/client: Transmit **kwargs to register()
    
    (cherry picked from commit e3a22e9bb5ad7d32bd75dae0cc289d870212e751)
    oio/conscience/client: Transmit **kwargs to register()
    common/utils: Split to reduce dependencies
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    CLI: Fix minor bug
    HttpApi: Remove 'requests' to use 'urllib3'
    Python API: improve rdir assignation
    
    Use a special service pool, declared when needed by the CLI.
    No need for user_is_a_service anymore.
    Python API: another batch of code reorganization
    Python API: code reorganization and documentation
    rdir: initialized early, better balanced
    
    rdir are linked to rawx by `openio directory bootstrap`.
    python: when reading, choose chunk with weighted random algo
    cli: do not require a type when calling 'openio cluster list'
    oio/cli: add oio-cluster command into openio client (fix #613)
    Review storage policy and service pool configuration
    proxy: integrate new load balancer
    First implementation of a prefix balancing python script
    core: move python files around
    python/conscience: add request to get namespace information
    replace std json python lib with simplejson
    add 3.0 routes for lb and conscience
    add conscience-agent
    add internal proxy client
    
    directory & conscience client
    more to come
    python: clean code style
    Various fixes and improvements
    
    * m1v2 now allows and exposes a reverse-resoluton feature: from a NS and a CID, yu can retrieve the original URL with all the parts (NS, ACCOUNT, USER).
    * m1v2 features names normalized: there were confusing names in m1v2 backend (link was called "srvavail", list "srvall"). Now things are clearer
    * proxy dropped the support of old v1.0 routes. Now is it time for only v2.0
    * client code has been adapted to the previous points
    * metautils: obsolete macros have been removed.
    * metautils: removed cyrus-specific code.
    * metautils: hc_url JSON encoding factorized.
    * sdk: fixed and documented logging-related functions.
    * m2v2: no more bounded-windows when managing output beans. Since we need full lists fo notification purposes, there is no need for beans sets of limited size.
    * tools: reloved obsolete config templates, updated docs.
    * python: admin-flask: obsolete route removed, updated docs
    sc*le me, I'm famous!
    python: namespace config handling
    tools: proxy info now in sds.conf with bootstrap script
    python: namespace config handling
    tools: proxy info now in sds.conf with bootstrap script
    account-service: container update event with merge, more tests
    conscience: small python client
    event-agent: container updates handlers
    account-service: container update event with merge, more tests
    conscience: small python client
    event-agent: container updates handlers
    oio/conscience: Ensure the LGPL header
    CI: enable python3 unit tests
    
    Jira: R1910-1
    conscience-agent: Improve the log when the check of a service has failed
    conscience-agent: collect beanstalkd stats
    
    Collect some statistics about beanstalkd jobs. They could help refining
    the score of beanstalkd services.
    
    Also improve the configuration sample.
    Python API: Fix concurrency
    conscience-agent: new "asn1" service checker
    
    To be used with meta0, meta1, meta2 and sqlx.
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    core: move python files around
    conscience-agent: tcp check now set TCP_REUSEADDR socket option
    conscience-agent: refactoring and cleanup
    fix missing import in tcp checker
    add conscience-agent
    oio/conscience: Ensure the LGPL header
    Python API: Stop using deprecated 'message' attribute in Exception
    CI: enable python3 unit tests
    
    Jira: R1910-1
    conscience-agent: Improve the log when the check of a service has failed
    Python API: Fix concurrency
    common/utils: Split to reduce dependencies
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    core: move python files around
    conscience-agent: configuration fixes and cleanup
    event-agent: fix retry load from queue
    conscience-agent: tcp check now set TCP_REUSEADDR socket option
    conscience-agent: default timeout for checkers changed to 5s
    conscience-agent: refactoring and cleanup
    conscience-agent: implement basic rawx stats
    add conscience-agent
    oio/conscience: Ensure the LGPL header
    conscience-agent: Improve the log when the check of a service has failed
    Set an operation-dependent prefix on request ids
    
    Also, when compiled in debug mode, print a warning when a request without
    request ID is received.
    oio: avoid double slash in http checker
    conscience-agent: collect beanstalkd stats
    
    Collect some statistics about beanstalkd jobs. They could help refining
    the score of beanstalkd services.
    
    Also improve the configuration sample.
    conscience-agent: close connection to avoid keepalive issues
    
    Jira: OS-131
    Replace 'httplib' with 'urllib3'
    
    (cherry picked from commit cad9702b621c6ebd37c364659f64b146d445215d)
    conscience-agent: Log URL of broken HTTP services
    Replace 'httplib' with 'urllib3'
    common/http: Split to reduce dependencies
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    HttpApi: Remove 'requests' to use 'urllib3'
    merge python client api from oiopy into core
    
    integrate CLI
    conscience-agent: better error output
    core: move python files around
    conscience-agent: configuration fixes and cleanup
    conscience-agent: refactoring and cleanup
    conscience-agent: improve error logging output
    add conscience-agent
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/conscience: Ensure the LGPL header
    conscience-agent: Improve the log when the check of a service has failed
    conscience-agent: new "asn1" service checker
    
    To be used with meta0, meta1, meta2 and sqlx.
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    event: new noop event filter
    
    Does nothing with the input event. Useful if you just want to drop the events.
    oio/conscience: Ensure the LGPL header
    Use Service Id everywhere
    Rawx: add, save and expose UUID
    
    UUID will be saved in xattr instead IP:PORT
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    oio-conscience-agent: removes the special tag.vol case for the rawx
    core: move python files around
    oio-conscience-agent: removes the special tag.vol case for the rawx
    conscience-agent: configuration fixes and cleanup
    conscience-agent: refactoring and cleanup
    conscience-agent: implement basic rawx stats
    oio/conscience: Ensure the LGPL header
    conscience-agent: collect beanstalkd stats
    
    Collect some statistics about beanstalkd jobs. They could help refining
    the score of beanstalkd services.
    
    Also improve the configuration sample.
    oio/conscience: Ensure the LGPL header
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    core: move python files around
    conscience-agent: refactoring and cleanup
    conscience-agent: improve error logging output
    conscience-agent: handle rawx connection exceptions
    conscience-agent: fetch stats from system or a volume
    oio/conscience: Ensure the LGPL header
    CI: enable python3 unit tests
    
    Jira: R1910-1
    conscience-agent: collect beanstalkd stats
    
    Collect some statistics about beanstalkd jobs. They could help refining
    the score of beanstalkd services.
    
    Also improve the configuration sample.
    oio/conscience/agent: React to services reporting I/O errors
    conscience-agent: fix meta stats parsing
    oio/conscience/agent: Don't retry when registering meta* services
    
    The whole behavior is already a loop
    
    (cherry picked from commit 051159c8ebae82e59a4c83a2529ee5488f8f8395)
    oio/conscience/agent: Don't retry when registering meta* services
    
    The whole behavior is already a loop
    conscience-agent: Monitor the meta* using the GET verb
    
    via the oio-proxy, instead of the POST verb.
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Python API: code reorganization and documentation
    core: move python files around
    conscience-agent: configuration fixes and cleanup
    conscience-agent: refactoring and cleanup
    oio-conscience-agent: adds monitoring for meta*
    oio/conscience: Ensure the LGPL header
    CI: enable python3 unit tests
    
    Jira: R1910-1
    conscience-agent: collect beanstalkd stats
    
    Collect some statistics about beanstalkd jobs. They could help refining
    the score of beanstalkd services.
    
    Also improve the configuration sample.
    oio/conscience/agent: React to services reporting I/O errors
    conscience-agent: fix meta stats parsing
    oio/conscience/agent: Don't retry when registering meta* services
    
    The whole behavior is already a loop
    
    (cherry picked from commit 051159c8ebae82e59a4c83a2529ee5488f8f8395)
    oio/conscience/agent: Don't retry when registering meta* services
    
    The whole behavior is already a loop
    conscience-agent: Monitor the meta* using the GET verb
    
    via the oio-proxy, instead of the POST verb.
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Python API: code reorganization and documentation
    core: move python files around
    conscience-agent: configuration fixes and cleanup
    conscience-agent: refactoring and cleanup
    oio-conscience-agent: adds monitoring for meta*
    oio/conscience: Ensure the LGPL header
    conscience-agent: collect beanstalkd stats
    
    Collect some statistics about beanstalkd jobs. They could help refining
    the score of beanstalkd services.
    
    Also improve the configuration sample.
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    core: move python files around
    conscience-agent: refactoring and cleanup
    oio/conscience: Ensure the LGPL header
    conscience-agent: set a timeout for the http stats collector
    
    After investigation, it appears that stats/http doesn't
    implement a timeout, leaving the coroutine waiting forever.
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Set an operation-dependent prefix on request ids
    
    Also, when compiled in debug mode, print a warning when a request without
    request ID is received.
    conscience-agent: close connection to avoid keepalive issues
    
    Jira: OS-131
    Replace 'httplib' with 'urllib3'
    
    (cherry picked from commit cad9702b621c6ebd37c364659f64b146d445215d)
    oio/conscience/stats/http.py: Fix an exception raise
    oio/conscience/agent: React to services reporting I/O errors
    Associate UUID in cluster
    
    Move UUID in tag part though conscience/stats/http.py
    Replace 'httplib' with 'urllib3'
    common/http: Split to reduce dependencies
    common/utils: Split to reduce dependencies
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Very slight python code optimizations
    Very slight python code optimizations
    merge python client api from oiopy into core
    
    integrate CLI
    core: move python files around
    conscience-agent: configuration fixes and cleanup
    conscience-agent: refactoring and cleanup
    oio-conscience-agent: adds monitoring for meta*
    python: PEP8 compliance recovered
    conscience-agent: improve error logging output
    oio-reset: use conscience-agent to monitor rdir/account
    conscience-agent: handle rawx connection exceptions
    conscience-agent: implement basic rawx stats
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/conscience: Ensure the LGPL header
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    oio-conscience-agent: tag.vol added for each volume watcher
    core: move python files around
    oio-conscience-agent: tag.vol added for each volume watcher
    conscience-agent: refactoring and cleanup
    conscience-agent: fix potential segfault in volume stats
    conscience-agent: handle rawx connection exceptions
    conscience-agent: fetch stats from system or a volume
    Python API: restore sys.stderr in case of log error
    
    When logging to /dev/log and running with Python 3, if /dev/log becomes
    unavailable, the logging system writes an error to sys.stderr. But since
    we replace sys.stderr by a logger, we end up with an infinite recursion.
    
    Now, when detecting a logging error, we will restore the real stderr.
    Fix logging issue when /dev/log does not exists in Python 3
    
    A change in Python 3 (https://bugs.python.org/issue29808)
    leads to a stack overflow when /dev/log does not exists.
    Now we will check the presence of this file before creating the logger.
    add support for logging to udp with syslog
    common/utils: Split to reduce dependencies
    Python API: Sort chunks with weighted random
    Python API: Allow to cache object metadata and location
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    Python API: Allow to read object with duplicated position
    Python API: document and use ServiceUnavailable exception
    
    Jira: OS-263
    Python API: close chunks download connection
    
    In the case when the reader does not read data until the end, some
    connections where never closed.
    Add LazyLoader for ObjectStorageApi
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    oio/cfg: Avoid loading local files if any system file has been loaded
    
    Differs from the behavior of liboiocore but good enough for pythonic
    services.
    CLI: display nicer KeyError messages
    Python API: refactor
    tests: make service management easier
    common/utils: Split to reduce dependencies
    xcute: Use python time instead of redis time
    Update copyright mentions
    Solve some python3 errors in the tests
    common/utils: Split to reduce dependencies
    oio: upload chunks with TLS
    Add xcute orchestrator
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Python API: Fix ratelimit
    
    Before:
    ```
    loop 1:    run_time = now
    loop 1:
    loop 1:    run_time' = run_time + time_per_request
    loop 1: -> run_time' = now + time_per_request
    
    loop 2:    now' >= now
    loop 2:
    loop 2: To verify
    loop 2:    run_time' - now' > time_per_request
    loop 2: -> now + time_per_request - now' > time_per_request
    loop 2: -> now - now' > 0
    loop 2: -> now > now'
    loop 2: => impossible: now' >= now
    loop 2: => never sleep
    loop 2:
    loop 2:    run_time'' = run_time' + time_per_request
    loop 2: -> run_time'' = now + time_per_request + time_per_request
    loop 2: -> run_time'' = now + (2 * time_per_request)
    
    loop 3:    now'' >= now'
    loop 3: -> now'' >= now' >= now
    loop 3:
    loop 3: To verify
    loop 3:    run_time'' - now'' > time_per_request
    loop 3: -> now + (2 * time_per_request) - now'' > time_per_request
    loop 3: -> now + time_per_request - now'' > 0
    loop 3: -> now + time_per_request > now''
    loop 3: => possible: now'' >= now' >= now
    loop 3: => maybe sleep
    loop 3:
    loop 3:    run_time''' = run_time'' + time_per_request
    loop 3: -> run_time''' = now + (2 * time_per_request) + time_per_request
    loop 3: -> run_time''' = now + (3 * time_per_request)
    
    loop 4:    now''' >= now'' + (run_time'' - now'')  # now'' + "sleep time"
    loop 4: -> now''' >= run_time''
    loop 4:
    loop 4: To verify
    loop 4:    run_time''' - now''' > time_per_request
    loop 4: -> run_time'' + time_per_request - now''' > time_per_request
    loop 4: -> run_time'' - now''' > 0 (hors now''' >= run_time'')
    loop 4: -> run_time'' > now'''
    loop 4: => impossible: now''' >= run_time''
    loop 4: => never sleep
    loop 4:
    loop 4:    run_time'''' = run_time''' + time_per_request
    
    etc.
    ```
    ```
    >>> from oio.common.green import ratelimit, time
    >>> items_run_time = 0
    >>> while True:
    ...    items_run_time = ratelimit(items_run_time, 1)
    ...    print(time.time())
    ...
    1573838622.18
    1573838622.18
    1573838624.18
    1573838624.18
    1573838626.18
    1573838626.18
    1573838628.18
    1573838628.18
    ```
    
    After:
    ```
    loop 1:    run_time = now
    loop 1:
    loop 1:    run_time' = run_time + time_per_request
    loop 1: -> run_time' = now + time_per_request
    
    loop 2:    now' >= now
    loop 2:
    loop 2: To verify
    loop 2:    run_time' - now' > 0
    loop 2: -> now + time_per_request - now' > 0
    loop 2: -> now + time_per_request > now'
    loop 2: => possible: now' >= now
    loop 2: => maybe sleep
    loop 2:
    loop 2:    run_time'' = run_time' + time_per_request
    loop 2: -> run_time'' = now + time_per_request + time_per_request
    loop 2: -> run_time'' = now + (2 * time_per_request)
    
    loop 3:    now'' >= now' + (run_time' - now')  # now' + "sleep time"
    loop 3: -> now'' >= run_time'
    loop 3: -> now'' >= now + time_per_request
    loop 3:
    loop 3: To verify
    loop 3:    run_time'' - now'' > 0
    loop 3: -> now + (2 * time_per_request) > now''
    loop 3: => possible: now'' >= now + time_per_request
    loop 3: => maybe sleep
    loop 3:
    loop 3:    run_time''' = run_time'' + time_per_request
    loop 3: -> run_time''' = now + (2 * time_per_request) + time_per_request
    loop 3: -> run_time''' = now + (3 * time_per_request)
    
    loop 4:    now''' >= now'' + (run_time'' - now'')  # now'' + "sleep time"
    loop 4: -> now''' >= run_time''
    loop 4: -> now''' >= now + (2 * time_per_request)
    loop 4:
    loop 4: To verify
    loop 4:    run_time''' - now''' > 0
    loop 4: -> now + (3 * time_per_request) > now'''
    loop 4: => possible: now''' >= now + (2 * time_per_request)
    loop 4: => maybe sleep
    loop 4:
    loop 4:    run_time'''' = run_time''' + time_per_request
    
    etc.
    ```
    ```
    >>> from oio.common.green import ratelimit, time
    >>> items_run_time = 0
    >>> while True:
    ...    items_run_time = ratelimit(items_run_time, 1)
    ...    print(time.time())
    ...
    1573838486.79
    1573838487.8
    1573838488.8
    1573838489.8
    1573838490.8
    1573838491.8
    1573838492.8
    1573838493.8
    ```
    Python API: more rate limiting facilities
    Python API: make eventlet yields more explicit
    Fix import eventlet.Semaphore
    
    Jira: OS-385
    
    eventlet.Semaphore exists since version 0.20.1:
    https://github.com/eventlet/eventlet/commit/79292bd16a6a1384d8c3d11bcefa40eb53bbeae4#diff-e8a149cf9a6b76be0526ba05331438c5R42.
    But Centos 7 uses version 0.18.4.
    Python API: Replace Queue with LightQueue when sending data
    Python API: rework hour-based rate limiting policies
    
    Policies can be loaded from strings like
        "0h30:10;6h45:2;9h45:5;15h30:3;20h00:8"
    Python API: Add hour-based rate limiting policies utils
    Python API: implement new methods in Beanstalk class
    
    The wait_until_empty is useful during tests.
    Python API: Fix concurrency
    Python API: improve exception handling
    
    Improve exception messages.
    Never return 'green' timeouts to client applications.
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Python API: remove unused exception type
    Python API: improve upload error handling (fix #913)
    Python API: improve upload error handling (fix #913)
    oio: clean separation of green code
    Remove unsupported backblaze integration
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Update copyright mentions
    Correct wrongfully migrated exceptions syntax
    
    The syntax for thoses exceptions were wrongfully migrated to python3
    with no regard to python2. This commit repair the build for python2.
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    Python API: do not fail if liberasurecode is unavailable
    
    Fail later, if trying to access erasure-code policies. This enables
    light clients with a reduced set of packages to query the cluster, and
    access "plain" contents (which do not require liberasurecode).
    oio-crawler-integrity: Detect irreparable objects
    Python API: improve pyeclib errors
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    suppress annoying warning from pyeclib/liberasurecode when using CLI
    event-agent: fix TypeError on som delete events (fix #695)
    python api: fix StorageMethod cache
    
    This will avoid many object creations,
    and reduce impact of a memory leak in PyECLib.
    https://bitbucket.org/kmgreen2/pyeclib/issues/65/ecdriver-init-destruct-might-leak-memory
    Minor fixes around events
    backblaze: clean code
    merge python client api from oiopy into core
    
    integrate CLI
    Python API: Fix the conversion of negative size values
    
    Jira: OS-574
    Python API: Allow to use default value when converting value to boolean
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Minor fixes for Python 3
    
    Fixup remaing print keyword
    Use six to import StringIO
    Python API: Check if is hexa
    meta2: Delete exceeding versions when adding a new alias
    common/utils: Split to reduce dependencies
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Python API: Allow to encode fullpath with UTF-8 args
    
    Jira: OS-413
    CLI: hide not-implemented feature, fix chunk attr parsing
    Python API: return useful error message about fullpath
    Encode and decode old fullpath
    oio-blob-{rebuilder,mover}: Accept old chunk to recreate new chunk
    Python API: Use quote and unquote for headers
    Python API, core: Add the content ID to the fullpath
    Python API: Factorize the encoding and decoding of the fullpath
    Python API: protect against read-after-close operations
    
    Jira: R2004-5
    Python API: fix download perfdata
    
    Measures were not taken at the proper code point, and were confusing
    CLI users.
    oio: upload chunks with TLS
    Python API: Stop using deprecated 'message' attribute in Exception
    Avoid prefixing http path if / is already set
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Update copyright mentions
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    oio: fix logger
    
    Few parts of Python API were using unset logger
    Python API: enable TCP_CORK, avoid buffer copies
    Python API: protect against read-after-close operations
    
    Jira: OS-361
    Python API: Fix concurrency
    common/http: Split to reduce dependencies
    common/utils: Split to reduce dependencies
    oio/common/tool: Ensure LGPL
    Python API: Fix a typo
    Python API, tests: improve Python3 compatibility
    tool: Reduce the time to stop
    tool: Exit gracefully
    oio-crawler-integrity: report missing chunk positions
    
    Missing chunk positions were reported on the standard log, but not in
    output files. This is now fixed.
    
    Also, check the number of chunks against the quorum before reporting
    errors, such that missing chunks are potentially reported as
    irreparable (and not uselessly sent to the blob-rebuilder).
    Admin CLI: Rename '--workers' to '--concurrency'
    Python API: Stop distributed dispatcher when there is no item
    Python API: Limit speed of distributed dispatcher
    Python API: refactor Tool class a little
    Python API: Clean code for the tools
    Python API: Remove lock to update the counters of the tools
    Python API: Limit the spped when filling the queue of the tool
    Python API: Report log with the main thread for the tools
    Python API: Return the list of processed tasks when running a tool
    Python API: Allow to dispatch locally and across the platform
    Python API: Refresh the rawx scores from cache
    Python API: Allow to cache container metadata
    Python API: Allow to cache object metadata and location
    account: allow to call the master account service for reads
    
    Also add a parameter to the event-agent "replicate" filter to enable
    this feature, and display a message in case of exception while
    refreshing the "replication_enabled" parameter.
    account: make known errors less verbose
    
    Jira: 0S-505
    Python API: implement decorator for Redis server errors
    Python API: another batch of python3 conversions
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Allow to set various Redis sentinel parameters
    Allow to set various Redis parameters
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    oio: create a shared RedisConn object
    
    It will help to manage StrictRedis or Sentinel on various
    daemons (account/backend.py and container_streaming)
    Python API, tests: another batch of Python 3 fixes
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Improve header encoding
    
    Depending on the data type passed to the header, the encoding would
    fail. This commit solve the problem for some types like int.
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    Python API: shutdown sockets before closing
    
    A simple close() won't release the connection, it will stay some time in
    CLOSE_WAIT state, unless we call shutdown() before close().
    oio-blob-{rebuilder,mover}: Accept old chunk to recreate new chunk
    rawx: Check content fullpath
    Python API: include netloc in urllib3 errors messages
    Python API: fix chunk full_path conversion
    
    When full_path was a string (instead of a list or tuple), it was split
    and re-assembled with commas between letters, triggering the creation of
    many extended attributes on each chunk.
    
    Thanks to @AymericDu 🦁
    Use only 'urllib3' imported with 'eventlet'
    Python API: improve exception handling
    
    Factorize code that converts exceptions from urllib3 to OioException.
    oio: Increase the default connect/read timeouts
    oio/common: expose backoff_factor option
    
    By default, urllib3 doesn't use backoff when retries are
    enabled. This commit introduce parameter to update it.
    
    Following urllib3 documentation, backoff is used after second
    try and will sleep by using formula:
    {backoff factor} * (2 ^ ({number of total retries} - 1))
    oio-crawler-integrity: fix output for blob-rebuilder
    Python API, CLI: keep track of request durations
    
    First step: keep track of resolving and request times in proxy,
    then rawx request time in Python API.
    common/http: Split to reduce dependencies
    Tests: Replace `requests` by `urllib3`
    Python API: allow to set "pool_manager" for each request
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    HttpApi: Add doc
    HttpApi: Remove 'requests' to use 'urllib3'
    Rawx: make it more robust against strange path
    Rawx: Add xattr oio_version and full_path
    
    Modify the client to send the header X-oio-chunk-meta-full-path:Acct/Container/Name
    Convert the header to the xattr oio.user:Acct/Container/Name=""
    CLI: Add option to the command object locate to show real size and hash
    Python API: fix requests ids and kwargs
    Python API: set timeouts as float
    Python API: set timeouts as float
    Python API: allow setting connection pool options
    oio: complies to pep8, adds missing spaces
    merge python client api from oiopy into core
    
    integrate CLI
    tests: actually test metachunk-size trailer support in rawx
    rawx headers review: deal with trailers in tests
    EC through gateway + rebase on master (#594)
    
    * fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    
    * event-agent: use basic http for account client
    
    * oio-bootstrap.py: fixed default schema for mail applications
    
    * metautils/lb: uses the local PRNG, uniform distribution (#582)
    
    Uses the local PRNG instead of the libc's rand(), with its guarantee on
    the uniform distribution over a given range.
    
    This should lead to better random and should fix the apparent preference
    for the first item.
    
    * Do not generate extra debug and asserts when building in RelWithDebInfo
    
    * core: implement upload and download through http gateway
    event-agent: use basic http for account client
    core: move python files around
    python: clean code style
    event-agent now support async chunk delete
    WIP account service with redis backend
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Update copyright mentions
    Make most unit tests pass in python3
    
    Please note that no test was broken in python2, this only add more
    compatibility to python3 as verified by the test suite.
    Python API: do not crash RegexContainerBuilder on empty capture groups
    Python API: create NoMatchFound exception for RegexContainerBuilder
    Python API: allow regexcontainer to yield alternatives
    Autocontainer: fix HashContainerBuilder.verify()
    Python API: use regex to build container names
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    cli: implement autocontainer listing
    oio/hashedcontainer: avoids using immutable strings as work buffers
    autocontainer now configured by the NS
    python: manage autocontainers with the CLI
    python: import autocontainer implementation from oio-swift
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    xcute: Use redis to register task
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Update copyright mentions
    Python API: Use a quorum to link an object
    Python API: raise ServiceBusy when no chunk quorum
    
    Raise a ServiceBusy error when writing an object and the quorum of the
    chunks is not reached, and this cannot be attributed to a timeout.
    
    Jira: OS-434
    Python API: fix exception reraise function
    
    Jira: OS-383
    
    (cherry picked from commit 35c1dd856d324a87dbcae2f6855ae3c40085a94f)
    Python API: Create an Exception for Precondition Failed
    Python API: fix exception reraise function
    CLI: add '--min-dist' option to 'rdir bootstrap'
    
    Jira: OS-281
    Python API: improve missing chunk xattr error messages
    rebuilders: implement retry queue
    Python API: implement BlobImprover on top of Rebuilder
    
    Jira: R1810-28
    Python API: document and use ServiceUnavailable exception
    
    Jira: OS-263
    lifecycle: Format configuration
    oio-blob-indexer: sleep when no rdir assigned to local volume
    
    Fix #1512
    Python API: tolerate meta1 errors during 'volume admin bootstrap'
    
    Fix #1447
    Before this commit, a single meta1 failure was preventing the operation
    to continue. Also, 'volume assignation' command did not return any
    result.
    Python API: improve exception handling
    
    Factorize code that converts exceptions from urllib3 to OioException.
    Python API: improve exception handling
    
    Improve exception messages.
    Never return 'green' timeouts to client applications.
    Python API: new exceptions classes for WORM mode
    Python API: add support for operation deadlines
    oio: Comply to the latest PEP8 rules enfroced by flake8
    Rename JobBury into ExplicitBury
    event-agent: Add filter to bury job
    Proxy: Manage error 503
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    HttpApi: Remove 'requests' to use 'urllib3'
    Python API: review exception handling in HttpApi
    Very slight python code optimizations
    Python API: improve download error messages
    Very slight python code optimizations
    Python API: improve download error messages
    oio: clean separation of green code
    Python API: use ChunkReader in BlobClient
    cli: add more functional tests
    merge python client api from oiopy into core
    
    integrate CLI
    core: move python files around
    Add tests of weird content names and fix some quoting issues
    python/rain: add content upload mechanism
    python/policy: prepare integration of rain policy
    rdir: improve rebuilder and use the content id instead of the content path
    rdir: add rebuild crawler to rebuild chunks on the same valume after its replacement
    proxy+rdir: add actions to fetch the index and to show rebuild status
    add blob mover
    add better blob xattr metadata support
    blob-auditor: audit chunks
    add internal proxy client
    
    directory & conscience client
    more to come
    Python API: Fix concurrency
    oio/common/daemon: React to more exit signals
    
    (cherry picked from commit eb6373cb40efbb2d6578d382747efe9eca99945c)
    oio/common/daemon: React to more exit signals
    common/utils: Split to reduce dependencies
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    oio: clean separation of green code
    set eventlet default hub to poll
    core: move python files around
    add conscience-agent
    account-server bin (using gunicorn)
    account backend now supports listing options (prefix, delimiter, limit, marker, end_marker)
    event-agent now support async chunk delete
    WIP account service with redis backend
    event agent WIP
    common/http_urllib3: pass cert_reqs and ca_certs through to pool manager
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Python API: Retry listing when the service is busy
    event-agent: allow to configure content_cleaner cnx pool
    
    This will help reducing the number of persistent connections to one
    service, while keeping at least one persistent connection to each
    service. Set:
    - pool_connections: high value (ideally one per rawx service)
    - pool_maxsize: low value (one per coroutine, "concurrency" in the main
    configuration file)
    Python API: cast get_pool_manager params to integers
    Python API: allow more PoolManager parameters
    CLI: implement 'openio-admin <item_type> check'
    Python API: filter urllib3 args, fix beanstalkd client
    Python API: Fix concurrency
    conscience-agent: close connection to avoid keepalive issues
    
    Jira: OS-131
    common/http: Split to reduce dependencies
    Python API: load monotonic_time() from librt.so
    
    Instead of loading it from liboiocore.so.
    Python API: measure duration of last send() call
    CI: Fix test perfdata
    
    Change the format to have a consistent and readable format in "oioproxy-logging"
    Python API: compute extra perfdata
    
    Separate chunk connection and upload times.
    Compute average, standard deviation and relative standard deviation for
    chunk operations.
    Revert "Python API: Allow to use dict with timeout"
    
    This reverts commit 4d281ce49f0d41fdebbae5235753d5478e768f99.
    Python API: Allow to use dict with timeout
    CI: pass some tests with Python 2.7 and some with 3.6
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    CLI: fix container list with non-ASCII characters
    Python API: Retry listing when the service is busy
    Python API: move CacheDict to common/utils.py
    Python API: recompute deadline after data upload success
    
    At some point in the upload process, we know that the metadata server
    is fine (it provided us with chunk addresses) and the client is still
    listening (he just uploaded all data). It seems a good idea to
    postpone the deadline.
    Python API: forward timeouts, compute a deadline
    
    The 'patch_kwargs' functionality was used only on a few ObjectStorageApi
    methods, resulting in the read_timeout not being applied on all requests
    to oio-proxy. This is now fixed.
    
    Also, if a timeout is provided, a deadline is now computed for internal
    usage, and a timeout is computed accordingly for each subrequest.
    blob-auditor: warn about missing "fullpath" xattr
    Python API: improve missing chunk xattr error messages
    Python API: improve request ID usage
    Test content.perfectible events management
    blob-mover: fix style errors, improve documentation
    Fix disk usage calculation
    event: review event-agent configuration options
    
    - Update sample configuration file.
    - Print a link to the configuration sample when no argument is passed.
    - Print a warning when a deprecated option is used.
    Python API: improve exception handling
    
    Factorize code that converts exceptions from urllib3 to OioException.
    Python API: change exceptions originating from rawx
    Python API: add support for operation deadlines
    Python API: cleanup exception handling
    
    Fix #1279
    Python API, CLI: keep track of request durations
    
    First step: keep track of resolving and request times in proxy,
    then rawx request time in Python API.
    Python API: document, add depagination utility
    common/utils: Split to reduce dependencies
    CLI: Make 'account/container show' human readable
    
    close #1140
    Storage tierer: fix CID generation and logging
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Python API: factorize code (fix #987)
    Python API: fix requests ids and kwargs
    tests: try to fix container listing
    account: convert timestamps to seconds
    Python API: improve upload error handling (fix #913)
    tests: try to fix container listing
    account: convert timestamps to seconds
    Python API: improve upload error handling (fix #913)
    Python API: merge GeneratorReader and GeneratorIO classes
    oio: clean separation of green code
    cli: log to stderr in addition to syslog
    Python API: use ReplicatedChunkWriteHandler in BlobClient
    Python API: use ChunkReader in BlobClient
    Python API: send request id on some requests
    blob-mover: various small improvements
    cli: use yield for full listing
    
    add --long option for object list for more details about objects
    python: allow object creation without content_length
    ecd: take Range header into account
    merge python client api from oiopy into core
    
    integrate CLI
    bootstrap: review config input
    set eventlet default hub to poll
    add compat code for pyxattr vs xattr bullsh*t
    blob-indexer: add interval parameter
    core: move python files around
    event-agent: new queue backend and multiprocessing
    Improve log format of python services
    conscience-agent: implement basic rawx stats
    python: pep8 compliance effort
    python: use pyxattr
    
    What the hell is happening with pyxattr/xattr???
    replace std json python lib with simplejson
    replace pyxattr with xattr
    isolate gunicorn dependency in separate file
    add util cid_from_name
    fix pep8 warning for import in utils
    fix default behavior for read config in oio regarding yaml
    add conscience-agent
    add blob mover
    blob-auditor: audit chunks
    account: autocreate account option
    python: changed ns config validation
    sc*le me, I'm famous!
    event-agent : added namespace field to sample config
    python: improved syslog logging
    python: namespace config handling
    tools: proxy info now in sds.conf with bootstrap script
    python: namespace config handling
    tools: proxy info now in sds.conf with bootstrap script
    account-service: container update event with merge, more tests
    conscience: small python client
    event-agent: container updates handlers
    account-service: container update event with merge, more tests
    conscience: small python client
    event-agent: container updates handlers
    account-server bin (using gunicorn)
    account backend now supports listing options (prefix, delimiter, limit, marker, end_marker)
    event-agent now support async chunk delete
    WIP account service with redis backend
    event agent WIP
    Python API: accept a scheme in oioproxy URL
    
    Refactor the code so we handle oioproxy's URL the same way, whether it
    comes from the application's configuration object, a keyword parameter
    or the namespace configuration file.
    
    If there is no scheme in the URL, consider it is HTTP. If there is a
    scheme, use it (but only HTTP will work at the moment).
    client: allow https for proxy url
    
    Do not assume the proxy url is plain text http
    
    (cherry picked from commit a8e411f03b9f20e75cc671a42524f7d860175198)
    oio: use prefix constant
    oio: upload chunks with TLS
    client: allow https for proxy url
    
    Do not assume the proxy url is plain text http
    Python API: Enrich perfdata when requesting a service
    Python API: refactor
    Python API: Delete an unused parameter
    Python API: Fix concurrency
    Python API: do not raise Conflict after retrying POST
    oio: Consider the --oio-proxyd-url option to the CLI
    
    Fix #1219
    common/utils: Split to reduce dependencies
    Python API: Add consistency to the endpoint
    
    close #1151
    Python API: allow to set "request_attempts" for each request
    Python API: Share loggers to not overwrite or recreate the logger
    Proxy: Manage error 503
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    HttpApi: Remove 'requests' to use 'urllib3'
    Python API: rework object append code
    oio/api: allow append operations
    
    This patch introduces a new parameter for object_create to support
    appending data to an existing object.
    
    If object doesn't exist, it is created, only if container exists as
    flag append can not be used at same time with flag autocreate.
    Python API: fix requests ids and kwargs
    Very slight python code optimizations
    Very slight python code optimizations
    tests: adapt to the last code reorganization
    Python API: another batch of code reorganization
    Python API: code reorganization and documentation
    Python API: allow setting connection pool options
    oio|tests : correct all int values inside headers for new requests update
    core: move python files around
    rdir: explicit database create
    
    add draft cli for rdir interaction
    rdir: add new commands to client + client bypasses the proxy to contact rdir server
    rebuilder: use new lock commands to avoid two rebuild at the same time
    add internal proxy client
    
    directory & conscience client
    more to come
    converter: Update the oio version only if the conversion was successful
    Python API, tests: another batch of Python 3 fixes
    CI: enable python3 unit tests
    
    Jira: R1910-1
    blob-converter: recover missing fullpath extended attribute
    xattr: Save new fullpath and remove old xattr
    common/utils: Split to reduce dependencies
    account: allow to set bucket metadata
    account,CLI: implement a bucket listing command
    
    Jira: OB-501
    blob-auditor: Adapt to the compression in the rawx
    
    F*ck, the auditor accesses the chunks without passing through the rawx.
    This is a bad idea, shortcuts are bad ideas, we must respect APIs
    ECD: Test the download
    Python API: Use a quorum to link an object
    account: display request ID in access logs
    
    (cherry picked from commit 4477c5d4a28fb32153aa8cac7e7cce513b84515f)
    Python API: apply timeouts parameters to account requests
    
    As for ObjectStorageApi, apply timeouts passed to the AccountClient
    constructor to all method calls.
    Test the versioning simulation
    Allow lifecycle to work with sharded buckets
    
    For S3 buckets which have been sharded using "container_hierarchy" swift
    middleware, allow to recurse on all shards when applying lifecycle
    rules.
    
    This behavior is enabled with a command line argument.
    The set of containers to recurse on is established by doing a prefixed
    listing (the prefix being the bucket name and the '%2F' delimiter).
    
    The metadata of listed objects will be enriched with
    - the name of the actual container they are stored in (under the key
    'container');
    - the name they have been given in this container (under the key
    'orig_name').
    
    All tests against filters are unchanged, but API calls will use
    `orig_name` and `container` instead of object and bucket names.
    Event: Do not create _RDIR account on reference operations
    
    Jira: OS-246
    Update max_versions of container from header
    
    This commit introduce possibility to update max_versions when creating
    object:
    this is useful for container created through autocreate functionality:
    for Container Hierarchy, enabling versioning is set on root container,
    it is not possible to parse all container to update value and
    for performance, a dedicated request to update container is skipped
    (as a lot of upload may occurs at same time)
    
    If header `x-oio-force-versioning` is received,
    the max_versions is updated before completing
    object (to keep mecanism to delete prior object if needed)
    blob: allow use of x-oio-check-hash
    CLI: hide not-implemented feature, fix chunk attr parsing
    CLI: implement 'openio-admin <item_type> check'
    blob-indexer: do not warn on pending or just deleted chunks
    Python API, server: limit length of request ID
    Allow listing to be done on master service only
    
    For several operations, when a list is done just after an object
    deletion, the listing operation may occur on a slave which has not been
    synchronized yet.
    oio-meta2-indexer, Python API: add a new meta2 indexing utility
    
    - Add a new wrapper to list all meta2 records indexed for a volume.
    - Add new meta2 indexing tool, sample conf and tests.
    Update the copyright
    Change oio version from 4.0 to 4.2
    rawx: Remove xattr chunkid
    Python API: allow disabling client-side chunk checksums
    Python API, CLI: keep track of request durations
    
    First step: keep track of resolving and request times in proxy,
    then rawx request time in Python API.
    oio-blob-indexer: Control format of chunk ID
    
    Closes #1265
    Let the python API transmit timeout in requests
    
    So that the backend services can compute deadlines for the handling of
    each request.
    CLI: display status in 'container show' and 'container locate'
    common/http: Split to reduce dependencies
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Rawx: Add xattr oio_version and full_path
    
    Modify the client to send the header X-oio-chunk-meta-full-path:Acct/Container/Name
    Convert the header to the xattr oio.user:Acct/Container/Name=""
    meta2: add worm and ns_type functionnality (first version)
    core: adding admin mode in C SDK (ALL REQUESTS works)
    oio: adding admin mode in python cli (--admin option)
    tools: adding oio-flush-all.sh script to flush meta0, meta1 and meta2 cache
    tools/oio-reset.sh: execute oio-flush-all.sh
    migrate ec content tests to use unified API
    merge python client api from oiopy into core
    
    integrate CLI
    Python API: fix request ID header name
    Python API: apply timeouts parameters to account requests
    
    As for ObjectStorageApi, apply timeouts passed to the AccountClient
    constructor to all method calls.
    Python API: implement prefixed reqid decorator
    
    Implement a new decorator allowing to generate prefixed request IDs. Use
    this decorator in meta2 mover and rebuilder.
    Python API: improve request ID usage
    CLI: implement 'item locate' commands
    Python API: use reqid instead of req_id
    
    Try to be consistent when using abbreviations. We choose reqid over
    req_id since it was more common in the existing code base, especially in
    log messages.
    CLI: implement 'openio-admin <item_type> check'
    blob-improver: various improvements
    Python API: improve request ID usage
    Python API: fix issue with exception catching decorator
    Python API: improve documentation, add deprecation warnings
    Add LazyLoader for ObjectStorageApi
    common/utils: Split to reduce dependencies
    Pass proc_name setting to gunicorn applications
    account: make known errors less verbose
    
    Jira: 0S-505
    Add xcute orchestrator
    Python API: fix request ID header name
    Following the documentation http://docs.gunicorn.org/en/stable/settings.html
    The `threads` configuration only works for Gthread worker type and the
    cose uses evenlet. So move the define to `workers`.
    
    (cherry picked from commit 78c8608de8e0d94296bfd2246f50e22af2815200)
    use keepalive in wsgi.py, otherwise gunicorn closes the connection immediatly
    
    (cherry picked from commit dd964a660b6e2345d5cf686120ae260482fa16ba)
    account: send raw error message instead of HTML
    
    Fix #1278
    common/utils: Split to reduce dependencies
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    account,container,ecd: improve exception handling
    pep8: minor fixes
    oio: clean separation of green code
    rdir: threads support
    core: move python files around
    rdir: explicit database create
    
    add draft cli for rdir interaction
    Improve log format of python services
    account: allow UTF-8 encoded container names
    python: fix access logs query
    avoid /status access logging in wsgi apps
    python: fixed accesslog format for WSGI apps
    isolate gunicorn dependency in separate file
    account: do not try to decode "None" as UTF-8
    account: allow to call the master account service for reads
    
    Also add a parameter to the event-agent "replicate" filter to enable
    this feature, and display a message in case of exception while
    refreshing the "replication_enabled" parameter.
    account: Refresh bucket counters
    account: Add all totals when a container is not yet associated with its bucket
    account: Use the bucket name already registered when it is not given
    account: Format LUA code
    account: Declare local variables
    store the global list of buckets under the `buckets:` key
    
    On existing cluster, please feel free to use the following lua migration
    script: https://github.com/open-io/oio-toolkit/blob/master/scripts/updates-buckets:.lua
    ```
    local keys = redis.call("keys", "buckets:*")
    for i, key in ipairs(keys) do
            if key ~= "buckets:" then
                    local zrange = redis.call("ZRANGE", key, 0, -1)
                    for j, bucket in ipairs(zrange) do
                            redis.call("ZADD", "buckets:", "NX", 0, bucket)
                    end
            end
    end
    ```
    oio/account: Relicence to LGPL
    account: allow to set bucket metadata
    Enable or disable replication for each bucket
    
    Implement a new event-agent plugin that will query the account service
    to know if a container must be replicated.
    
    Jira: OB-477
    account,CLI: implement 'bucket show' command
    account,CLI: implement a bucket listing command
    
    Jira: OB-501
    account: maintain a list of all buckets of an account
    account: aggregate bucket statistics
    
    Jira: OB-501
    xcute: Fix flake8
    xcute: Use python time instead of redis time
    account: catch Redis server errors
    
    Catch Redis server errors, especially BusyLoadingError which is raised
    when the server is loading a large database into memory.
    Python API: another batch of python3 conversions
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    account: Use redis slave to read
    Allow to set various Redis parameters
    Account: Fix account refresh on missing values
    
    There was an error when damaged_objects or missing_chunks were missing.
    This happened when a container is created before oio-sds 18.10 and no object
    is created after an update > 18.10.
    The fix set the value to 0 but if some object had missing chunks before it will not
    be printed and therefore the value would be erroneous.
    account: fix filtering when more than 1000 containers
    
    Refactor the container filtering method so it is more readable
    and less error-prone.
    account: Save the damaged objects count by account and container
    account: Rename missing-chunks to missing_chunks
    Permit to only list buckets
    Update Copyright
    account: Save the missing chunks by account and container
    Python API: adapt bool values passing to new version of redis sdk
    oio: fix invalid stats with delimiter
    
    Listing containers with delimiter may use misaligned stats:
    Common prefixes was not skipped when extracting stats but results
    were skipped when merging results.
    
    OS-46 #comment Fixed
    account: return container mtime in listings
    Account: fix comparison between float
    common/utils: Split to reduce dependencies
    oio-account-server: Add new routes
    Account: Fix ghost containers
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    account: facatorize code, add documentation (fix #1054)
    oio: create a shared RedisConn object
    
    It will help to manage StrictRedis or Sentinel on various
    daemons (account/backend.py and container_streaming)
    Python API: fix unused import in account backend
    Account: Send a lua script to redis to update containers.
    
    Replace the lock/unlock by a script to redis.
    Since a script lua is atomic it should prevent the problem of tilted redis.
    Accounts: ensure that redis unlock is called (fix #1016)
    account: fix statistics after container deletion
    account: fix statistics after container deletion
    Add account listing to the CLI (fix #817)
    core: move python files around
    account: allow UTF-8 encoded container names
    account: add delete option (only if account is empty)
    python: fix some tests
    
    - add missing constructor param to make account test pass again
    - add 'score' to the list of fields returned by proxy for chunk requests
    conscience-agent: refactoring and cleanup
    account-server: add possibility to use redis-sentinel
    account: autocreate account option
    account: propagate exceptions for logging purposes + small fix on account update
    event-agent: use account provided in event url
    account: now include account metadata in containers listing
    list containers now include objects/bytes metadata
    event-agent: use account provided in event url
    account: now include account metadata in containers listing
    list containers now include objects/bytes metadata
    event-agent: use account provided in event url
    account: now include account metadata in containers listing
    list containers now include objects/bytes metadata
    account-service: container update event with merge, more tests
    conscience: small python client
    event-agent: container updates handlers
    account-service: container update event with merge, more tests
    conscience: small python client
    event-agent: container updates handlers
    account-server bin (using gunicorn)
    account backend now supports listing options (prefix, delimiter, limit, marker, end_marker)
    event-agent now support async chunk delete
    WIP account service with redis backend
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    account: Refresh bucket counters
    account: allow to set bucket metadata
    Enable or disable replication for each bucket
    
    Implement a new event-agent plugin that will query the account service
    to know if a container must be replicated.
    
    Jira: OB-477
    account,CLI: implement 'bucket show' command
    account,CLI: implement a bucket listing command
    
    Jira: OB-501
    Correct wrongfully migrated exceptions syntax
    
    The syntax for thoses exceptions were wrongfully migrated to python3
    with no regard to python2. This commit repair the build for python2.
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    Python API: apply timeouts parameters to account requests
    
    As for ObjectStorageApi, apply timeouts passed to the AccountClient
    constructor to all method calls.
    Python API: Enrich perfdata when requesting a service
    account: fix filtering when more than 1000 containers
    
    Refactor the container filtering method so it is more readable
    and less error-prone.
    Permit to only list buckets
    Python API: forward timeouts, compute a deadline
    
    The 'patch_kwargs' functionality was used only on a few ObjectStorageApi
    methods, resulting in the read_timeout not being applied on all requests
    to oio-proxy. This is now fixed.
    
    Also, if a timeout is provided, a deadline is now computed for internal
    usage, and a timeout is computed accordingly for each subrequest.
    Update Copyright
    account: Check the request method
    Document account APIs
    Python API: avoid masking exceptions from account client
    
    Jira: OS-77
    Python API: fix account client encoding
    
    Do not early quote account name, the low-level HTTP client will encode the
    whole query string.
    
    Jira: OS-68
    account: return container mtime in listings
    Python API: add documentation, ensure a request ID is sent
    Python API: document, add depagination utility
    oio/account/client: Print lighter warnings upon network errors
    common/utils: Split to reduce dependencies
    Python API: Share loggers to not overwrite or recreate the logger
    oio-account-server: Extend the openio CLI tool
    oio/account/client: Relicence under the terms of LGPL
    
    To avoid any viral infection when pulled as an unexpected dependency.
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    HttpApi: Remove 'requests' to use 'urllib3'
    Python API: review exception handling in HttpApi
    account: facatorize code, add documentation (fix #1054)
    Add account listing to the CLI (fix #817)
    tests: adapt to the last code reorganization
    Python API: another batch of code reorganization
    core: move python files around
    account: add delete option (only if account is empty)
    python/crawler/storage tiering: add crawler to change storage policy of old contents
    account: allow to call the master account service for reads
    
    Also add a parameter to the event-agent "replicate" filter to enable
    this feature, and display a message in case of exception while
    refreshing the "replication_enabled" parameter.
    account: Refresh bucket counters
    oio/account: Relicence to LGPL
    Fix warnings raised by the documentation extractor
    account: allow to set bucket metadata
    Enable or disable replication for each bucket
    
    Implement a new event-agent plugin that will query the account service
    to know if a container must be replicated.
    
    Jira: OB-477
    account,CLI: implement 'bucket show' command
    account,CLI: implement a bucket listing command
    
    Jira: OB-501
    account: aggregate bucket statistics
    
    Jira: OB-501
    account: Limit size of container list
    
    Jira: OS-485
    
    Python doesn't release the memory when we delete a large object:
    http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-delete-a-large-object.htm
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Python API: fix request ID header name
    account: display request ID in access logs
    
    (cherry picked from commit 4477c5d4a28fb32153aa8cac7e7cce513b84515f)
    Python API: use REQID_HEADER constant everywhere
    account: display request ID in access logs
    account: Save the damaged objects count by account and container
    account: Rename missing-chunks to missing_chunks
    Permit to only list buckets
    Update Copyright
    account: Save the missing chunks by account and container
    account: Check the request method
    Document account APIs
    CLI: fix 'openio object list --auto --no-paging'
    
    Jira: OS-164
    Update account service documentation
    oio-account-server: Simpler code
    oio-account-server: Minimal access log for read-only requests
    Extend the API doc to the account service.
    common/utils: Split to reduce dependencies
    oio-account-server: Add new routes
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    account,container,ecd: improve exception handling
    Account: Send a lua script to redis to update containers.
    
    Replace the lock/unlock by a script to redis.
    Since a script lua is atomic it should prevent the problem of tilted redis.
    Add account listing to the CLI (fix #817)
    rdir and account: python-flask no longer required (#603)
    core: move python files around
    account: add delete option (only if account is empty)
    avoid /status access logging in wsgi apps
    rdir, account: fix syslog facilities
    replace std json python lib with simplejson
    use /usr/bin/env for python scripts shebangs
    account-server: only log exception when using DEBUG log level
    account: remove useless check
    python: clean code style
    account: propagate exceptions for logging purposes + small fix on account update
    account: return not found on account_update if account does not exist
    account: return not found on account_update if account does not exist
    account: return not found on account_update if account does not exist
    account: now include account metadata in containers listing
    list containers now include objects/bytes metadata
    account: now include account metadata in containers listing
    list containers now include objects/bytes metadata
    account: now include account metadata in containers listing
    list containers now include objects/bytes metadata
    python: improved syslog logging
    account-service: container update event with merge, more tests
    conscience: small python client
    event-agent: container updates handlers
    account-service: container update event with merge, more tests
    conscience: small python client
    event-agent: container updates handlers
    account-server bin (using gunicorn)
    account backend now supports listing options (prefix, delimiter, limit, marker, end_marker)
    event-agent now support async chunk delete
    WIP account service with redis backend
    event agent WIP
    Cleanup, round 6
    
    * path to sqlite bases unified and simplified. It should also plainly manage several containers for the same user.
    * warnings removed.
    * useless comments removed.
    Update by default on PUT/POST operations
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    oio/account: Relicence to LGPL
    Python API: Fail rebuild when an account doesn't exist
    Python API: Refresh the containers in parallel when rebuilding account service
    Python API: Create tool to rebuild accounts
    Move the logic of the zk-*.py scripts into oio/
    
    Also introduce oio-directory-check, oio-check-master
    Thanks to @AymericDu, @murlock
    
    (cherry picked from commit 4cfce87518175cb0f2ce382e7ac6acb0c0109490)
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    CLI: make zk commands return 1 after an error
    Drop the sqlx service (#1836)
    
    * Drop the sqlx service
    * sqliterepo: Drop the sqlx handlers
    * sqliterepo: Trim unused code, reduce the public exposure
    * tests: Remove sqlx tests
    Allow not to have a zookeeper to check meta0
    
    Jira: OS-387
    Update copyright mentions
    Merge all the admin commands related to ZK
    tools: Factorize Zookeeper code
    Move the logic of the zk-*.py scripts into oio/
    
    Also introduce oio-directory-check, oio-check-master
    Thanks to @AymericDu, @murlock
    
    (cherry picked from commit 4cfce87518175cb0f2ce382e7ac6acb0c0109490)
    oio/content repairer: Relicence to LGPL
    CI: enable python3 unit tests
    
    Jira: R1910-1
    CLI: Repair corrupt chunks
    Python API: Create tool to repair contents
    Python API: Check size and hash when moving chunk
    blob-improver: various improvements
    Python API: Delete useless function
    Get content with path and version
    Python API: Use the same blob client for the content factory
    oio-blob-rebuilder: More logs during the rebuild of chunk
    Improve WORM mode tests
    Python API: implement LifeCycle rules matching
    common/utils: Split to reduce dependencies
    Python API: fix issues with mime_type and properties
    
    Fix #1149
    Python API: Share loggers to not overwrite or recreate the logger
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Rawx: make it more robust against strange path
    Rawx: Add xattr oio_version and full_path
    
    Modify the client to send the header X-oio-chunk-meta-full-path:Acct/Container/Name
    Convert the header to the xattr oio.user:Acct/Container/Name=""
    Python API: fix requests ids and kwargs
    Python API: merge GeneratorReader and GeneratorIO classes
    tests: adapt to the last code reorganization
    Python API: review content metadata keys (fix #726)
    migrate ec content tests to use unified API
    migrate plain tests to use "unified" python API
    removes remains of rainx
    EC through gateway + rebase on master (#594)
    
    * fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    
    * event-agent: use basic http for account client
    
    * oio-bootstrap.py: fixed default schema for mail applications
    
    * metautils/lb: uses the local PRNG, uniform distribution (#582)
    
    Uses the local PRNG instead of the libc's rand(), with its guarantee on
    the uniform distribution over a given range.
    
    This should lead to better random and should fix the apparent preference
    for the first item.
    
    * Do not generate extra debug and asserts when building in RelWithDebInfo
    
    * core: implement upload and download through http gateway
    Storage policies reviewed
    
    * removed "data_treatment": what the hell was the intention with this?
      its place is not in the storage policy. This is dedicated to RAWX
    * renamed: DUP and NONE -> plain
    * removed DUMMY: it made no sense
    * renamed: RAIN -> ec
    * format changed for the chunk_method + format unified with
      data_security
    core: move python files around
    python and rainx: fix/add support of new xattr (policy, chunk method and mime type)
    python/crawler/storage tiering: add crawler to change storage policy of old contents
    python/content: add mechanism to change the storage policy of existing contents
    python: add support for storage policy on content_prepare and content_spare
    python/rain: add content upload mechanism
    python/policy: prepare integration of rain policy
    CI: pass some tests with Python 2.7 and some with 3.6
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Python API: Allow to read object with duplicated position
    Python API: Allow to rebuild chunk in frozen container
    Python API: Return the list of processed tasks when running a tool
    rebuilders: implement retry queue
    Python API: document code, reduce number of warnings
    oio-blob-rebuilder: display where chunks have been rebuilt
    oio-blob-rebuilder: rebuild missing chunk positions
    
    You can rebuild an object by telling oio-blob-rebuilder which chunk
    position is missing, it is not mandatory to provide a chunk ID.
    Add LazyLoader for ObjectStorageApi
    Python API: fix issues with mime_type and properties
    
    Fix #1149
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Rawx: make it more robust against strange path
    Rawx: Add xattr oio_version and full_path
    
    Modify the client to send the header X-oio-chunk-meta-full-path:Acct/Container/Name
    Convert the header to the xattr oio.user:Acct/Container/Name=""
    event-agent: content_rebuilder write chunk to a file
    
    Still keep the format of the oio-blob-rebuilder but modify the chunk_id field
    so it can also be use for the position
    'container_id|content_id|(short_chunk_id||pos)'.
    The position is distinguished from the chunk_id by the size (inferior to
    32 digit)
    meta2: notify the sparse contents
    
    Add meta2_filter_action_check_content before action_put_content
    Check the size and the position of the all the chunks a content.
    Depending of the storage_policy some chunks can be rebuild (eg copy or ec)
    with the chunks already presents.
    If the chunks can be rebuild it send a event storage.content.broken containing
    "present_chunks":[{"id":"...","pos":"...","hash":"...","size":"..."}],
    "missing_chunks":[pos1,pos2,...,posn]
    if not return FILTER_KO.
    Add an event handler content_broken that permit to rebuild the missing chunks
    Python API: factorize code (fix #987)
    Python API: fix requests ids and kwargs
    Python API: merge GeneratorReader and GeneratorIO classes
    oio-blob-rebuilder: allow rebuild on the original rawx
    
    New option is --allow-same-rawx
    tests: adapt to the last code reorganization
    Python API: use ReplicatedChunkWriteHandler in BlobClient
    python api: support multiple ranges in same request
    migrate ec content tests to use unified API
    removes remains of rainx
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    Python API: Stop using deprecated 'message' attribute in Exception
    Make most unit tests pass in python3
    
    Please note that no test was broken in python2, this only add more
    compatibility to python3 as verified by the test suite.
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    Python API: Allow to rebuild chunk in frozen container
    blob-mover: Allow to exclude some rawx
    blob-improver: various improvements
    rebuilders: implement retry queue
    Python API: implement BlobImprover on top of Rebuilder
    
    Jira: R1810-28
    Python API: compare spare chunk and perfectible chunk qualities
    Get content with path and version
    oio-blob-{rebuilder,mover}: Accept old chunk to recreate new chunk
    oio-blob-mover: Allow linking the chunks
    Python API, core: Add the content ID to the fullpath
    Python API: Factorize the encoding and decoding of the fullpath
    Python API: Use the same blob client for the content factory
    oio-blob-rebuilder: More logs during the rebuild of chunk
    oio/blob: Add a cache mecanism
    
    Cache will contains UUID IP:PORT associations.
    Cached entries will be used during 60 second by default.
    Python API: implement LifeCycle rules matching
    oio: Comply to the latest PEP8 rules enfroced by flake8
    ObjectStorageApi: make container_raw_update accept list
    common/utils: Split to reduce dependencies
    Python API: fix issues with mime_type and properties
    
    Fix #1149
    Python API: Share loggers to not overwrite or recreate the logger
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Rawx: make it more robust against strange path
    Rawx: Add xattr oio_version and full_path
    
    Modify the client to send the header X-oio-chunk-meta-full-path:Acct/Container/Name
    Convert the header to the xattr oio.user:Acct/Container/Name=""
    event-agent: content_rebuilder write chunk to a file
    
    Still keep the format of the oio-blob-rebuilder but modify the chunk_id field
    so it can also be use for the position
    'container_id|content_id|(short_chunk_id||pos)'.
    The position is distinguished from the chunk_id by the size (inferior to
    32 digit)
    meta2: notify the sparse contents
    
    Add meta2_filter_action_check_content before action_put_content
    Check the size and the position of the all the chunks a content.
    Depending of the storage_policy some chunks can be rebuild (eg copy or ec)
    with the chunks already presents.
    If the chunks can be rebuild it send a event storage.content.broken containing
    "present_chunks":[{"id":"...","pos":"...","hash":"...","size":"..."}],
    "missing_chunks":[pos1,pos2,...,posn]
    if not return FILTER_KO.
    Add an event handler content_broken that permit to rebuild the missing chunks
    Python API: remove headers argument, add kwargs
    oio/content: Adapt move_chunk() to the latest container_raw_update()
    oio: Expose the forced behavior upon insertions of raw beans
    Python API: fix requests ids and kwargs
    oio-blob-rebuilder: allow rebuild on the original rawx
    
    New option is --allow-same-rawx
    Python API: allow setting connection pool options
    Python API: review content metadata keys (fix #726)
    migrate ec content tests to use unified API
    migrate plain tests to use "unified" python API
    core: move python files around
    tests: ensure all strange objects have actually been saved
    Add tests of weird content names and fix some quoting issues
    python/mover: move chunks correctly according to their policies
    python and rainx: fix/add support of new xattr (policy, chunk method and mime type)
    python/content: remove orphan chunks when upload failed
    python/content: add mechanism to change the storage policy of existing contents
    python: add support for storage policy on content_prepare and content_spare
    python/content/dup: add basic upload and download mechanisms
    python/rain: add mechanism to rebuild metachunk using rainx services
    python/content: sort chunks in content
    python/rain: add content upload mechanism
    python/policy: prepare integration of rain policy
    CI: pass some tests with Python 2.7 and some with 3.6
    Python API: Allow to read object with duplicated position
    Python API: Allow to rebuild chunk in frozen container
    Python API: Return the list of processed tasks when running a tool
    rebuilders: implement retry queue
    Python API: document code, reduce number of warnings
    Various small cosmetic fixes
    
    that I would have forgotten if not commited now.
    oio-blob-{rebuilder,mover}: Accept old chunk to recreate new chunk
    oio-blob-rebuilder: display where chunks have been rebuilt
    oio-blob-rebuilder: rebuild missing chunk positions
    
    You can rebuild an object by telling oio-blob-rebuilder which chunk
    position is missing, it is not mandatory to provide a chunk ID.
    Add LazyLoader for ObjectStorageApi
    Python API: fix issues with mime_type and properties
    
    Fix #1149
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Rawx: make it more robust against strange path
    Rawx: Add xattr oio_version and full_path
    
    Modify the client to send the header X-oio-chunk-meta-full-path:Acct/Container/Name
    Convert the header to the xattr oio.user:Acct/Container/Name=""
    event-agent: content_rebuilder write chunk to a file
    
    Still keep the format of the oio-blob-rebuilder but modify the chunk_id field
    so it can also be use for the position
    'container_id|content_id|(short_chunk_id||pos)'.
    The position is distinguished from the chunk_id by the size (inferior to
    32 digit)
    meta2: notify the sparse contents
    
    Add meta2_filter_action_check_content before action_put_content
    Check the size and the position of the all the chunks a content.
    Depending of the storage_policy some chunks can be rebuild (eg copy or ec)
    with the chunks already presents.
    If the chunks can be rebuild it send a event storage.content.broken containing
    "present_chunks":[{"id":"...","pos":"...","hash":"...","size":"..."}],
    "missing_chunks":[pos1,pos2,...,posn]
    if not return FILTER_KO.
    Add an event handler content_broken that permit to rebuild the missing chunks
    Python API: factorize code (fix #987)
    Python API: fix requests ids and kwargs
    Python API: improve download error messages
    Python API: improve download error messages
    oio-blob-rebuilder: allow rebuild on the original rawx
    
    New option is --allow-same-rawx
    Python API: another batch of code reorganization
    python: allow object creation without content_length
    python api: support multiple ranges in same request
    migrate ec content tests to use unified API
    merge python client api from oiopy into core
    
    integrate CLI
    migrate plain tests to use "unified" python API
    oio/event: Ensure the LGPL header
    
    As expected for the whole oio directory
    python: Adapt to the latest flake8 implementation
    Update copyright mentions
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    oio: Comply to the latest PEP8 rules enfroced by flake8
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    event-agent: fix account_update, optimize a little
    oio-event-agent: get rid of hardcoded event types (fix #882)
    oio: complies to pep8, adds missing spaces
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    oio/event: Ensure the LGPL header
    
    As expected for the whole oio directory
    CI: enable python3 unit tests
    
    Jira: R1910-1
    event-agent: Always spawn workers
    
    Jira: OS-398
    Python API: Fix concurrency
    oio: Comply to the latest PEP8 rules enfroced by flake8
    common/utils: Split to reduce dependencies
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    event-agent: minor optimizations
    event-agent: minor optimizations
    event-agent: minor optimizations
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    event-agent: get rid of old useless stuff
    core: move python files around
    event-agent: new queue backend and multiprocessing
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    Make some tests more reliable
    tool: Reduce the time to stop
    tests: fix test_content_perfectible.py
    
    Some tests were systematically skipped.
    rebuilder: Reduce the time to stop
    
    Jira: OS-382
    Python API: allow to drain buried events
    
    After running some tests, drain buried events.
    oio-crawler-integrity: report missing chunk positions
    
    Missing chunk positions were reported on the standard log, but not in
    output files. This is now fixed.
    
    Also, check the number of chunks against the quorum before reporting
    errors, such that missing chunks are potentially reported as
    irreparable (and not uselessly sent to the blob-rebuilder).
    Python API: fix warning at yaml loading
    
    This is more a workaround than a fix. The real fix requires a more
    recent version of PyYaml.
    Add tubes() method to list tube currently used
    beanstalk: Add stats method
    tests: new tests for oio-blob-improver
    rebuilders: implement retry queue
    Python API: filter urllib3 args, fix beanstalkd client
    Python API: implement BlobImprover on top of Rebuilder
    
    Jira: R1810-28
    tests: speedup some tests
    Python API: implement new methods in Beanstalk class
    
    The wait_until_empty is useful during tests.
    Python API: Fix concurrency
    Test content.perfectible events management
    oio/event: Comply to PEP8
    oio/event: Warn more on invalid beanstalkd URL
    oio: Comply to the latest PEP8 rules enfroced by flake8
    Python client: handle OUT_OF_MEMORY from beanstalk
    common/utils: Split to reduce dependencies
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    cli: new "events exhume" subcommand (fix #888)
    event-agent: make beanstalk thread-safe
    event-agent: make beanstalk thread-safe
    cli: add cluster and events commands
    event-agent: beanstalk interaction reviewed (#595)
    
    (cherry picked from commit d4c868e92155f5060fc1efd56314f989602314a4)
    event-agent: beanstalk interaction reviewed
    EC through gateway + rebase on master (#594)
    
    * fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    
    * event-agent: use basic http for account client
    
    * oio-bootstrap.py: fixed default schema for mail applications
    
    * metautils/lb: uses the local PRNG, uniform distribution (#582)
    
    Uses the local PRNG instead of the libc's rand(), with its guarantee on
    the uniform distribution over a given range.
    
    This should lead to better random and should fix the apparent preference
    for the first item.
    
    * Do not generate extra debug and asserts when building in RelWithDebInfo
    
    * core: implement upload and download through http gateway
    fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    beanstalkd: configurable TUBE (#574)
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    event-agent: add concurrency option for workers
    core: move python files around
    event-agent: new queue backend and multiprocessing
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/event: Ensure the LGPL header
    
    As expected for the whole oio directory
    Enable or disable replication for each bucket
    
    Implement a new event-agent plugin that will query the account service
    to know if a container must be replicated.
    
    Jira: OB-477
    xcute: Retry later when the worker can't reply
    event-agent: Deindex meta2 database when it's deleted
    Test new event 'storage.container.update'
    Python API: Allow to dispatch locally and across the platform
    blob-improver: various improvements
    Test content.perfectible events management
    Transfer request ID in chunk events
    
    - Rawx forwards incoming request ID to outgoing events
    - Event-agent uses this request ID when indexing chunks in rdir
    
    Relates to #1346
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    oio: complies to pep8, adds missing spaces
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    oio/event: Ensure the LGPL header
    
    As expected for the whole oio directory
    tests: make blob-rebuilder tests more robust
    
    And some other tests less verbose.
    common/utils: Split to reduce dependencies
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    cli: new "events exhume" subcommand (fix #888)
    Python API: another batch of code reorganization
    cli: add commands for volume, events, cluster
    
    Volume:
    * admin commands lock, unlock, incident, show
    * show command
    
    Events:
    * stats command
    
    Cluster:
    * list, show commands
    cli: add cluster and events commands
    oio/event: Ensure the LGPL header
    
    As expected for the whole oio directory
    xcute: Retry later when the worker can't reply
    CI: enable python3 unit tests
    
    Jira: R1910-1
    event-agent: improve error handling
    
    Do not print full stack traces when the process is stopping.
    event-agent: share AccountClient and RdirClient instances
    
    Also review configuration defaults:
    - refresh account address every 3600s;
    - allow as many connections as coroutines ("concurrency").
    webhook: avoid fetching properties for few cases
    
    If webhook receive storage.content.deleted, there is no need
    to try to retrieve properties.
    blob-improver: various improvements
    Python API: implement BlobImprover on top of Rebuilder
    
    Jira: R1810-28
    Python API: Fix concurrency
    event: review event-agent configuration options
    
    - Update sample configuration file.
    - Print a link to the configuration sample when no argument is passed.
    - Print a warning when a deprecated option is used.
    oio-event-agent: Avoid a dumb error
    
    Hopefully, @fvennetier is watching us. Thank you, @fvennetier!
    oio-event-agent: Log and bury malformed events
    oio/event: check value of safe_decode before using it
    oio/event: Fix a default URL for beanstalkd
    event-agent: Accept multiple beanstalkd
    oio-event-agent: Implement better catchinf of exceptions
    meta1: Send event when a reference is created
    
    Fixes #1291
    Python API: cleanup exception handling
    
    Fix #1279
    Rename JobBury into ExplicitBury
    event-agent: Add filter to bury job
    oio/event/agent: Print lighter warnings upon network errors
    common/utils: Split to reduce dependencies
    Python API: Share loggers to not overwrite or recreate the logger
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    HttpApi: Remove 'requests' to use 'urllib3'
    meta2: notify the sparse contents
    
    Add meta2_filter_action_check_content before action_put_content
    Check the size and the position of the all the chunks a content.
    Depending of the storage_policy some chunks can be rebuild (eg copy or ec)
    with the chunks already presents.
    If the chunks can be rebuild it send a event storage.content.broken containing
    "present_chunks":[{"id":"...","pos":"...","hash":"...","size":"..."}],
    "missing_chunks":[pos1,pos2,...,posn]
    if not return FILTER_KO.
    Add an event handler content_broken that permit to rebuild the missing chunks
    event-agent: fix account_update, optimize a little
    oio-event-agent: get rid of hardcoded event types (fix #882)
    event: new noop event filter
    
    Does nothing with the input event. Useful if you just want to drop the events.
    event-agent: change default behavior after failure in pipeline
    
    behavior was very unclear after any failure
    
    now default behavior is:
    
    filters can return an EventError to indicate reason of failure and the event will be released with a delay
    added a default 15 seconds delay (value could be improved)
    
    if an unmanaged expection is encountered while processing the event is buried
    event-agent: change default behavior after failure in pipeline
    
    behavior was very unclear after any failure
    
    now default behavior is:
    
    filters can return an EventError to indicate reason of failure and the event will be released with a delay
    added a default 15 seconds delay (value could be improved)
    
    if an unmanaged expection is encountered while processing the event is buried
    Python API: allow setting connection pool options
    event-agent: fix syslog_prefix
    event-agent: beanstalk interaction reviewed (#595)
    
    (cherry picked from commit d4c868e92155f5060fc1efd56314f989602314a4)
    event-agent: beanstalk interaction reviewed
    EC through gateway + rebase on master (#594)
    
    * fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    
    * event-agent: use basic http for account client
    
    * oio-bootstrap.py: fixed default schema for mail applications
    
    * metautils/lb: uses the local PRNG, uniform distribution (#582)
    
    Uses the local PRNG instead of the libc's rand(), with its guarantee on
    the uniform distribution over a given range.
    
    This should lead to better random and should fix the apparent preference
    for the first item.
    
    * Do not generate extra debug and asserts when building in RelWithDebInfo
    
    * core: implement upload and download through http gateway
    fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    beanstalkd: configurable TUBE (#574)
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    Change event names
    
    - "meta1" prefix removed
    - "meta2" prefix replaced by "storage"
    - "rawx" prefix replaced by "storage"
    - "container.create" replaced by "container.new"
    - "container.destroy" replaced by "container.deleted"
    - "chunk.delete" replaced by "chunk.deleted"
    event-agent: add concurrency option for workers
    core: move python files around
    event-agent: new queue backend and multiprocessing
    event-agent: retries_per_second now replace retry_interval
    event-agent: fix retry load from queue
    event-agent: fix bin data handling
    account: allow UTF-8 encoded container names
    event-agent: fix typo in database schema
    event-agent: ignore duplicate events
    event-agent: improve queue backend
    
    add batch_size setting
    fix bootstrap for queue location
    rawx: quote object names in generated JSON events
    oio-event-agent: destroys the ZMQ context (+linger)
    event-agent.py: zmq LINGER set, allowing to exit within 2s
    event agent: add configuration option to skip rdir updates
    event-agent: handle failed events
    event-agent: fixed infinite loop on unhandled events.
    event-agent: fixed infinite loop on unhandled events.
    rdir: push all xattr in db
    rdir: add rebuild crawler to rebuild chunks on the same valume after its replacement
    proxy+rdir: add actions to fetch the index and to show rebuild status
    rdir: client can force the modification time of chunk creation event
    rdir: add chunk deletion event
    rdir: add chunk creation event in rawx and in event agent + minor changes
    replace std json python lib with simplejson
    event-agent: option to disable account updates
    event agent: add persistence queue
    blob-auditor: audit chunks
    event-agent: improvement on account discovery
    event-agent: added default handler for reference update event
    event-agent: use requests Session
    event-agent: use requests Session
    event-agent: use account provided in event url
    list containers now include objects/bytes metadata
    event-agent: use account provided in event url
    list containers now include objects/bytes metadata
    event-agent: use account provided in event url
    list containers now include objects/bytes metadata
    python: improved syslog logging
    python: namespace config handling
    tools: proxy info now in sds.conf with bootstrap script
    python: namespace config handling
    tools: proxy info now in sds.conf with bootstrap script
    account-service: container update event with merge, more tests
    conscience: small python client
    event-agent: container updates handlers
    account-service: container update event with merge, more tests
    conscience: small python client
    event-agent: container updates handlers
    event-agent now support async chunk delete
    WIP account service with redis backend
    lazy commit message
    fixed ugly typo
    event agent WIP
    oio/event: Ensure the LGPL header
    
    As expected for the whole oio directory
    xcute: Retry later when the worker can't reply
    event-agent: improve error handling
    
    Do not print full stack traces when the process is stopping.
    event-agent: share AccountClient and RdirClient instances
    
    Also review configuration defaults:
    - refresh account address every 3600s;
    - allow as many connections as coroutines ("concurrency").
    oio: Comply to the latest PEP8 rules enfroced by flake8
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    event-agent: fix account_update, optimize a little
    Python API: allow setting connection pool options
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/event: Ensure the LGPL header
    
    As expected for the whole oio directory
    xcute: Retry later when the worker can't reply
    event-agent: Initialize the filters correctly
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    events: add event logging filter
    events: add event logging filter
    oio/event: Ensure the LGPL header
    
    As expected for the whole oio directory
    xcute: Retry later when the worker can't reply
    event-agent: Encode without whitespace when notifying event
    
    Jira: OS-472
    CI: enable python3 unit tests
    
    Jira: R1910-1
    event: allow to notify events without URL
    event-agent: Permit to not replicate some accounts and containers
    
    Jira: OS-433
    event-agent: Initialize the filters correctly
    oio-event-agent: Remove a hardcoded beanstalkd URL
    events: Fix invalid ssample beanstalk addresses
    common/utils: Split to reduce dependencies
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    NotifyFilter: Remove unnecessary code
    ContentRebuilderFilter: Merge with NotifyFilter (fix #1033)
    event-agent: change default behavior after failure in pipeline
    
    behavior was very unclear after any failure
    
    now default behavior is:
    
    filters can return an EventError to indicate reason of failure and the event will be released with a delay
    added a default 15 seconds delay (value could be improved)
    
    if an unmanaged expection is encountered while processing the event is buried
    event-agent: change default behavior after failure in pipeline
    
    behavior was very unclear after any failure
    
    now default behavior is:
    
    filters can return an EventError to indicate reason of failure and the event will be released with a delay
    added a default 15 seconds delay (value could be improved)
    
    if an unmanaged expection is encountered while processing the event is buried
    event-agent: beanstalk interaction reviewed (#595)
    
    (cherry picked from commit d4c868e92155f5060fc1efd56314f989602314a4)
    event-agent: beanstalk interaction reviewed
    EC through gateway + rebase on master (#594)
    
    * fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    
    * event-agent: use basic http for account client
    
    * oio-bootstrap.py: fixed default schema for mail applications
    
    * metautils/lb: uses the local PRNG, uniform distribution (#582)
    
    Uses the local PRNG instead of the libc's rand(), with its guarantee on
    the uniform distribution over a given range.
    
    This should lead to better random and should fix the apparent preference
    for the first item.
    
    * Do not generate extra debug and asserts when building in RelWithDebInfo
    
    * core: implement upload and download through http gateway
    fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    oio/event: Ensure the LGPL header
    
    As expected for the whole oio directory
    xcute: Retry later when the worker can't reply
    xcute: Create a filter for event-agent
    event-agent: Initialize the filters correctly
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    events: add event logging filter
    events: add event logging filter
    oio/event: Ensure the LGPL header
    
    As expected for the whole oio directory
    account: maintain a list of all buckets of an account
    account: aggregate bucket statistics
    
    Jira: OB-501
    xcute: Retry later when the worker can't reply
    Event: Do not create _RDIR account on reference operations
    
    Jira: OS-246
    Drop old event when updating account
    event-agent: configure timeouts to the account service
    
    Jira: OS-355
    event-agent: share AccountClient and RdirClient instances
    
    Also review configuration defaults:
    - refresh account address every 3600s;
    - allow as many connections as coroutines ("concurrency").
    Python API: use REQID_HEADER constant everywhere
    event-agent: reuse request-id from incoming event
    account: Save the damaged objects count by account and container
    account: Rename missing-chunks to missing_chunks
    account: Save the missing chunks by account and container
    blob-improver: various improvements
    event-agent: allow account_update to delete containers from account
    event-agent: Initialize the filters correctly
    meta1: Send event when a reference is created
    
    Fixes #1291
    common/utils: Split to reduce dependencies
    Python API: Share loggers to not overwrite or recreate the logger
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    account: facatorize code, add documentation (fix #1054)
    event-agent: fix account_update, optimize a little
    account: convert timestamps to seconds
    account: fix statistics after container deletion
    account: convert timestamps to seconds
    account: fix statistics after container deletion
    event-agent: change default behavior after failure in pipeline
    
    behavior was very unclear after any failure
    
    now default behavior is:
    
    filters can return an EventError to indicate reason of failure and the event will be released with a delay
    added a default 15 seconds delay (value could be improved)
    
    if an unmanaged expection is encountered while processing the event is buried
    event-agent: change default behavior after failure in pipeline
    
    behavior was very unclear after any failure
    
    now default behavior is:
    
    filters can return an EventError to indicate reason of failure and the event will be released with a delay
    added a default 15 seconds delay (value could be improved)
    
    if an unmanaged expection is encountered while processing the event is buried
    merge python client api from oiopy into core
    
    integrate CLI
    EC through gateway + rebase on master (#594)
    
    * fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    
    * event-agent: use basic http for account client
    
    * oio-bootstrap.py: fixed default schema for mail applications
    
    * metautils/lb: uses the local PRNG, uniform distribution (#582)
    
    Uses the local PRNG instead of the libc's rand(), with its guarantee on
    the uniform distribution over a given range.
    
    This should lead to better random and should fix the apparent preference
    for the first item.
    
    * Do not generate extra debug and asserts when building in RelWithDebInfo
    
    * core: implement upload and download through http gateway
    event-agent: use basic http for account client
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    oio/event: Ensure the LGPL header
    
    As expected for the whole oio directory
    xcute: Retry later when the worker can't reply
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Python API: fix request ID header name
    test: Verify events emission when deleting container
    event-agent: Deindex meta2 database when it's deleted
    event-agent: More logs when indexing chunks
    event-agent: share AccountClient and RdirClient instances
    
    Also review configuration defaults:
    - refresh account address every 3600s;
    - allow as many connections as coroutines ("concurrency").
    Python API: use REQID_HEADER constant everywhere
    blob-improver: various improvements
    event-agent: allow volume_index to handle service events
    Transfer request ID in chunk events
    
    - Rawx forwards incoming request ID to outgoing events
    - Event-agent uses this request ID when indexing chunks in rdir
    
    Relates to #1346
    event-agent: sanitize chunk event parser
    oio-event-agent: Do not retry failed push/delete to a rdir
    
    These failures will be recovered during the next pass of the
    oio-blob-indexer on that volume.
    Use Service Id everywhere
    rdir: now uses uuid of rawx
    
    Fix also generated events by rawx and consumed by event-agent
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    event: trap volume_index exceptions, retry later
    Python API: improve HttpApi exception handling
    HttpApi: Remove 'requests' to use 'urllib3'
    oio-event-agent: Allow a few retries on the RPC to the rdir
    events: fix #689
    remove useless metadata in volume_index
    Minor fixes around erasure coding and chunk events
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    Add event filters to index META2 databases
    oio/event: Ensure the LGPL header
    
    As expected for the whole oio directory
    xcute: Retry later when the worker can't reply
    event-agent: Initialize the filters correctly
    common/utils: Split to reduce dependencies
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    event-agent: fix account_update, optimize a little
    EC through gateway + rebase on master (#594)
    
    * fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    
    * event-agent: use basic http for account client
    
    * oio-bootstrap.py: fixed default schema for mail applications
    
    * metautils/lb: uses the local PRNG, uniform distribution (#582)
    
    Uses the local PRNG instead of the libc's rand(), with its guarantee on
    the uniform distribution over a given range.
    
    This should lead to better random and should fix the apparent preference
    for the first item.
    
    * Do not generate extra debug and asserts when building in RelWithDebInfo
    
    * core: implement upload and download through http gateway
    fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    account: allow to call the master account service for reads
    
    Also add a parameter to the event-agent "replicate" filter to enable
    this feature, and display a message in case of exception while
    refreshing the "replication_enabled" parameter.
    oio/event: Ensure the LGPL header
    
    As expected for the whole oio directory
    events: forward all replication events by default
    
    To avoid problems during the update of old platforms, the check to see
    if replication is enabled for each bucket must be explicitly enabled.
    account: allow to set bucket metadata
    Enable or disable replication for each bucket
    
    Implement a new event-agent plugin that will query the account service
    to know if a container must be replicated.
    
    Jira: OB-477
    oio/event: Ensure the LGPL header
    
    As expected for the whole oio directory
    xcute: Retry later when the worker can't reply
    webhook: avoid fetching properties for few cases
    
    If webhook receive storage.content.deleted, there is no need
    to try to retrieve properties.
    blob-improver: various improvements
    webhook: Load properties if event doesn't contain them
    event-agent: Initialize the filters correctly
    events/webhook filter: ignore irrelevant events
    events/webhook filter: don't return empty string for exception body
    events: add webhook filter
    oio/event: Ensure the LGPL header
    
    As expected for the whole oio directory
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    event: new noop event filter
    
    Does nothing with the input event. Useful if you just want to drop the events.
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/event: Ensure the LGPL header
    
    As expected for the whole oio directory
    xcute: Retry later when the worker can't reply
    event-agent: add dump filter
    
    It will help debugging events.
    Events will be store as event_{job_id} in /tmp/
    event-agent: Initialize the filters correctly
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    events: add event logging filter
    events: add event logging filter
    Remove unsupported backblaze integration
    oio/event: Ensure the LGPL header
    
    As expected for the whole oio directory
    xcute: Retry later when the worker can't reply
    Python API: fix request ID header name
    event-agent: allow to configure content_cleaner cnx pool
    
    This will help reducing the number of persistent connections to one
    service, while keeping at least one persistent connection to each
    service. Set:
    - pool_connections: high value (ideally one per rawx service)
    - pool_maxsize: low value (one per coroutine, "concurrency" in the main
    configuration file)
    Python API: load BackBlaze deps only when necessary
    Python API: use REQID_HEADER constant everywhere
    event-agent: reuse request-id from incoming event
    blob-improver: various improvements
    event-agent: set "Connection: close" when deleting chunks
    event-agent: Initialize the filters correctly
    oio/blob: Add a cache mecanism
    
    Cache will contains UUID IP:PORT associations.
    Cached entries will be used during 60 second by default.
    Python API: delete chunk after object creation conflict
    Replace 'httplib' with 'urllib3'
    common/http: Split to reduce dependencies
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Python API: send request id on some requests
    event-agent: fix TypeError on som delete events (fix #695)
    Minor fixes around events
    backblaze : delete operation is made asynchronously
    backblaze_http : add new class Utils
    ecd : add clear error messages
    merge python client api from oiopy into core
    
    integrate CLI
    EC through gateway + rebase on master (#594)
    
    * fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    
    * event-agent: use basic http for account client
    
    * oio-bootstrap.py: fixed default schema for mail applications
    
    * metautils/lb: uses the local PRNG, uniform distribution (#582)
    
    Uses the local PRNG instead of the libc's rand(), with its guarantee on
    the uniform distribution over a given range.
    
    This should lead to better random and should fix the apparent preference
    for the first item.
    
    * Do not generate extra debug and asserts when building in RelWithDebInfo
    
    * core: implement upload and download through http gateway
    fixes for event-agent (#580)
    
    * add default tube option in sample conf
    * add tube in notify filter and fix logger configuration
    * missing use tube command for consumers
    Events review (#573)
    
    * event-agent: make handlers more configurable
    
    * m2v2,m1v2,rawx: unifies events formats.
    
    * event-agent: event filters update
    
    * bootstrap: fix deploy conf with redis
    
    * travis: add better report on failure
    
    * event-agent: fixed signal management
    
    Restores the default signal handler for SIGCHLD. Certain Python releases
    seems to fork a `uname` command to learn the current type of architecture,
    and this require no signal handler to be set.
    
    More debug has been triggered in Travis on exit, so that well-known
    problematic modules situations are now traced (ulimit, python version,
    ...)
    oio/event: Ensure the LGPL header
    
    As expected for the whole oio directory
    xcute: Retry later when the worker can't reply
    event-agent: Initialize the filters correctly
    Rename JobBury into ExplicitBury
    event-agent: Add filter to bury job
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    events: add event logging filter
    events: add event logging filter
    oio/rebuilder: Relicence to LGPL
    rebuilder: Exit gracefully
    oio: old meta1_digits was used by meta1_rebuider
    
    The variable meta1_digits was renamed ns.meta1_digits in 4.1.22.
    If new variable is missing, we try to load old value
    rebuilder: Refactor and improve log message
    rebuilder: Inform of waiting time
    oio-meta*-rebuilder: Accept an input file
    Rebuild the meta1 and meta2 bases
    oio/rebuilder: Relicence to LGPL
    rebuilder: Exit gracefully
    rebuilder: Refactor and improve log message
    oio-meta{1,2}-rebuilder: Add more logs
    rebuilder: Add a TODO for a further improvement
    Python API: Ask each peer if base exists
    rebuilder: Trigger database replication only for missing bases
    oio-meta*-rebuilder: Accept an input file
    meta-rebuilder: Leave election when the base doesn't exist
    Rebuilders: document code and CLI
    Rebuild the meta1 and meta2 bases
    Rebuild the meta1 and meta2 bases
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/rebuilder: Relicence to LGPL
    rebuilder: Reduce the time to stop
    
    Jira: OS-382
    rebuilder: Exit gracefully
    Python API: use reqid instead of req_id
    
    Try to be consistent when using abbreviations. We choose reqid over
    req_id since it was more common in the existing code base, especially in
    log messages.
    blob-improver: do not crash when fullpath is not encodable
    tests: new tests for oio-blob-improver
    blob-improver: various improvements
    rebuilders: implement retry queue
    Python API: implement BlobImprover on top of Rebuilder
    
    Jira: R1810-28
    oio/rebuilder: Relicence to LGPL
    rebuilder: Exit gracefully
    Admin CLI: Rename '--workers' to '--concurrency'
    blob-rebuilder: Retry failed rebuild jobs, with a delay
    
    Jira: OS-416
    CLI: Implement 'openio-admin <service-type> rebuild' commands
    
    Thanks to @murlock
    rebuilders: implement retry queue
    Python API: implement BlobImprover on top of Rebuilder
    
    Jira: R1810-28
    Python API: document code, reduce number of warnings
    blob-rebuilder: add option to add random wait
    
    Default ratelimit tries to consume all events at start of
    every second: when launching a lot of threads/instance, it
    creates burst effects on cluster.
    
    This commit introduce an option to add random wait after each chunk
    rebuild, that take an argument to perform a [0, arg[ us wait.
    Python API: Fix concurrency
    oio-blob-rebuilder: Distribute the broken chunks
    rebuilder: Refactor and improve log message
    Test oio-{blob,meta1,meta2}-rebuilder
    rebuilder: Increase the size of the queue
    rebuilder: Inform of waiting time
    rebuilder: Reset the number of passes between each report
    oio-meta*-rebuilder: Accept an input file
    Rebuilders: document code and CLI
    Rebuild the meta1 and meta2 bases
    Python API: Enrich perfdata when requesting a service
    oio-check-services: Add script to check services
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Python API, CLI: keep track of request durations
    
    First step: keep track of resolving and request times in proxy,
    then rawx request time in Python API.
    oio-check-services: Add script to check services
    Update copyright mentions
    Solve some python3 errors in the tests
    Python API: Fix concurrency
    oio-check-services: Add script to check services
    oio-check-services: Add script to check services
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    Remove unsupported backblaze integration
    oio/ecd: Relicence to LGPL
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Make most unit tests pass in python3
    
    Please note that no test was broken in python2, this only add more
    compatibility to python3 as verified by the test suite.
    ECD: Close the stream after reading a metachunk
    ECD: Allow to read metachunk with missing chunks
    Python API: load BackBlaze deps only when necessary
    Update the copyright
    rawx: Check content fullpath
    Permit ECD to work with stream
    License: OpenIO -> OpenIO SAS
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    account,container,ecd: improve exception handling
    Rawx: Add xattr oio_version and full_path
    
    Modify the client to send the header X-oio-chunk-meta-full-path:Acct/Container/Name
    Convert the header to the xattr oio.user:Acct/Container/Name=""
    Python API: refactor, improve error messages (fix #1048)
    oio: complies to pep8, adds missing spaces
    ecd: take Range header into account
    backblaze : delete operation is made asynchronously
    backblaze_http : add new class Utils
    ecd : add clear error messages
    ecd: adapt for Backblaze upload from C client
    oio : namespace is not used anymore to push in backblaze
    oio/ecd/app.py : add backblaze storage policy support (plain is WIP)
    tools/oio-bootstrap.py : adding application-key to configure ecd service
    oio/api/backblaze_http.py : correcting some mistakes
    merge python client api from oiopy into core
    
    integrate CLI
    Integrate new erasure coding daemon
    storage policies: moar review
    
    iod: PUT and GET meta chunks via HTTP
    Integrate new erasure coding daemon
    storage policies: moar review
    
    iod: PUT and GET meta chunks via HTTP
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/blob CLI tools: Relicence to LGPL
    blob-auditor: Adapt to the compression in the rawx
    
    F*ck, the auditor accesses the chunks without passing through the rawx.
    This is a bad idea, shortcuts are bad ideas, we must respect APIs
    Python API, tests: another batch of Python 3 fixes
    blob-auditor: refactor
    Python API: Fix concurrency
    Update blob auditor usage
    xattr: Get metadata and raw metadata
    oio-blob-auditor: Compare metachunk size and hash correctly
    oio-blob-auditor: Accept the versioning
    Update the copyright
    rawx: Remove xattr chunkid
    Python API: retry reading properties after error
    
    The legacy way of fetching properties is buggy when there is a lot of
    them. In case of error, retry with the new way (the drawback is that it
    does 2 requests instead of one).
    
    Fix #1369
    common/utils: Split to reduce dependencies
    Python API: Share loggers to not overwrite or recreate the logger
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    oio: clean separation of green code
    tests: adapt to the last code reorganization
    migrate ec content tests to use unified API
    review rdir and add metachunk_hash
    
    * get rid of useless metadata
    * add random in tests
    core: move python files around
    blob-auditor: complete 'nbchunks' test
    python: implement missing test of content size chunk attr
    python and rainx: fix/add support of new xattr (policy, chunk method and mime type)
    python/policy: prepare integration of rain policy
    add better blob xattr metadata support
    blob-auditor: better testing support
    blob-auditor: fix safe chunk audit
    blob-auditor: fix stats report
    blob-auditor: audit chunks
    oio/blob CLI tools: Relicence to LGPL
    Python API: Check size and hash when moving chunk
    blob-mover: Reduce usage check interval
    blob-mover: Fix usage check interval
    
    After one hour (default), the check was performed for each chunk.
    CI: enable python3 unit tests
    
    Jira: R1910-1
    mover: Allow to move only chunk whose size is in a range
    blob-mover: Allow to exclude some rawx
    blob-mover: implement concurrency
    
    The chunk mover will now use 10 coroutines to move chunks in parallel.
    This can be changed with the 'concurrency' parameter in the
    configuration file. The rate limiting is global (not per each
    coroutine).
    rebuilders: implement retry queue
    Python API: Fix concurrency
    blob-mover: fix style errors, improve documentation
    Add limit and target_usage on configuration file
    Fix disk usage calculation
    Update configuration file usage
    add option to blob-mover
    xattr: Get metadata and raw metadata
    oio-blob-{rebuilder,mover}: Accept old chunk to recreate new chunk
    Update the copyright
    oio-blob-mover: Allow linking the chunks
    rawx: Remove xattr chunkid
    oio/blob: Add a cache mecanism
    
    Cache will contains UUID IP:PORT associations.
    Cached entries will be used during 60 second by default.
    common/utils: Split to reduce dependencies
    Python API: Share loggers to not overwrite or recreate the logger
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    oio: clean separation of green code
    blob-mover: various small improvements
    migrate ec content tests to use unified API
    core: move python files around
    python/mover: move chunks correctly according to their policies
    python and rainx: fix/add support of new xattr (policy, chunk method and mime type)
    python/policy: prepare integration of rain policy
    fix blob mover chunk spare request
    add blob mover
    oio/blob CLI tools: Relicence to LGPL
    blob-registrator: Allow to specify containers
    blob-registrator: Improve and factorize code
    blob-registrator: Insert alias and content
    Update the copyright
    rawx: Remove xattr chunkid
    ObjectStorageApi: make container_raw_update accept list
    Python API: Share loggers to not overwrite or recreate the logger
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    oio-blob-registrator: Add an insert/update/check trigger
    oio-blob-registrator: Step 2
    
    - Fix some loggings
    - Add TODO comments
    - Add an initial sanity check on the NS
    - Remove odd/unused options
    bin: Add the oio-blob-registrator
    
    New tool to refresh the registration of the chunks in their container.
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    oio/blob CLI tools: Relicence to LGPL
    Do not discard fullpath errors, even when converting
    converter: Always try as if the fullpath was new
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Add python3 compatibility for the cli
    
    This patch modify most of the imports to make the command line interface
    compatible with python3. Not all traces are yet tested but most were.
    blob-auditor: warn about missing "fullpath" xattr
    Python API: improve missing chunk xattr error messages
    oio-meta2-indexer, Python API: add a new meta2 indexing utility
    
    - Add a new wrapper to list all meta2 records indexed for a volume.
    - Add new meta2 indexing tool, sample conf and tests.
    xattr: Get metadata and raw metadata
    Python API: document and improve check_volume function
    
    CI tests often fail on this function which used to return a very
    imprecise error message. The function is now documented and returns
    helpful error messages.
    
    (cherry picked from commit 4449a4b0e6177b6bdffb0eb3ab03568a884a9e02)
    rawx: Remove xattr container ID, content path, content version and content ID
    rawx: Remove xattr chunkid
    Python API: document and improve check_volume function
    
    CI tests often fail on this function which used to return a very
    imprecise error message. The function is now documented and returns
    helpful error messages.
    common/utils: Split to reduce dependencies
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    migrate ec content tests to use unified API
    review rdir and add metachunk_hash
    
    * get rid of useless metadata
    * add random in tests
    tests: flake8 compliance
    test: manages optional xattr on chunks
    core: move python files around
    update libs and tests according to new rawx chunk metadata checks
    python/rain: add content upload mechanism
    python: 'blob' manages the new headers expected by the rawx.
    rdir: improve rebuilder and use the content id instead of the content path
    rdir: push all xattr in db
    update xattr volume keys for rawx
    add blob mover
    add better blob xattr metadata support
    Python API: Properly pass the connection and write timeout when linking
    Python API: Check size and hash when moving chunk
    xcute: Upgrade blob-mover
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Python API: fix request ID header name
    Python API: Use a quorum to link an object
    event-agent: allow to configure content_cleaner cnx pool
    
    This will help reducing the number of persistent connections to one
    service, while keeping at least one persistent connection to each
    service. Set:
    - pool_connections: high value (ideally one per rawx service)
    - pool_maxsize: low value (one per coroutine, "concurrency" in the main
    configuration file)
    Python API: rename ambiguous perfdata 'total' to 'overall'
    Python API: enrich perfdata when reading and writing an object
    Python API: Improve the service resolver
    blob: allow use of x-oio-check-hash
    event-agent: share AccountClient and RdirClient instances
    
    Also review configuration defaults:
    - refresh account address every 3600s;
    - allow as many connections as coroutines ("concurrency").
    CLI: hide not-implemented feature, fix chunk attr parsing
    CLI: implement 'openio-admin <item_type> check'
    Python API: improve missing chunk xattr error messages
    blob-improver: various improvements
    Python API: improve request ID usage
    Python API: Expect 200 when sending rawx HEAD request
    Python API: Fix concurrency
    Python API: Expect 204 when sending rawx HEAD request
    oio-blob-{rebuilder,mover}: Accept old chunk to recreate new chunk
    Python API: Allow generating a new chunk ID to link a chunk
    rawx: Check content fullpath
    rawx: Save fullpath with the associated chunk ID
    Python API: include netloc in urllib3 errors messages
    Use only 'urllib3' imported with 'eventlet'
    Python API: improve exception handling
    
    Factorize code that converts exceptions from urllib3 to OioException.
    Add fastcopy on Python API
    Fix Flake8
    tests: fix python test
    oio/blob: Add a cache mecanism
    
    Cache will contains UUID IP:PORT associations.
    Cached entries will be used during 60 second by default.
    crawler-integrity: Inhibit xattr checks when asked
    oio: Allow a light presence check for chunks
    Python API: delete chunk after object creation conflict
    Python API: improve documentation, add deprecation warnings
    Python API, CLI: keep track of request durations
    
    First step: keep track of resolving and request times in proxy,
    then rawx request time in Python API.
    Add container snapshot
    
    The snapshot take the form of:
    -A copy of the sqlite base of the target to a meta2 chose by the load balancer.
    -All the chunks of the snapshot are replaced by new chunk that hardlink the target one.
    -The snapshot is frozen afterward.
    
    The chunks hardlink implies that the target and the snapshot chunks are in the same rawx.
    Currently it is the client that freeze and enable the containers during the snapshot.
    common/http: Split to reduce dependencies
    BlobClient: Use urllib3 instead of requests
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Rawx: make it more robust against strange path
    Rawx: Add xattr oio_version and full_path
    
    Modify the client to send the header X-oio-chunk-meta-full-path:Acct/Container/Name
    Convert the header to the xattr oio.user:Acct/Container/Name=""
    Python API: refactor, improve error messages (fix #1048)
    Python API: fix requests ids and kwargs
    Python API: merge GeneratorReader and GeneratorIO classes
    Python API: use ReplicatedChunkWriteHandler in BlobClient
    Python API: use ChunkReader in BlobClient
    migrate ec content tests to use unified API
    review rdir and add metachunk_hash
    
    * get rid of useless metadata
    * add random in tests
    Make tests pass (#609)
    tests: flake8 compliance
    core: move python files around
    Add tests of weird content names and fix some quoting issues
    python: new headers declared for internal blob API
    python: BLOB client fixed (duplicate entry)
    python: 'blob' manages the new headers expected by the rawx.
    rdir: improve rebuilder and use the content id instead of the content path
    add blob mover
    oio/blob CLI tools: Relicence to LGPL
    Python API: fix request ID header name
    Python API: use REQID_HEADER constant everywhere
    blob-indexer: do not warn on pending or just deleted chunks
    oio-blob-indexer: Disable the backup when converting chunks
    blob-indexer: recover missing fullpath xattr, if possible
    
    Instead if just printing an error when the "fullpath" extended attribute
    is missing, try to recover it from information found in rdir and meta2.
    This behavior requires the "convert_chunks" option to be enabled.
    blob-indexer: improve error messages
    
    Do not print full tracebacks for missing chunk attributes.
    oio-blob-indexer: small improvements
    Python API: Fix concurrency
    oio-blob-indexer: Convert chunks
    xattr: Get metadata and raw metadata
    oio-blob-indexer: sleep when no rdir assigned to local volume
    
    Fix #1512
    rawx: Remove xattr chunkid
    Transfer request ID in chunk events
    
    - Rawx forwards incoming request ID to outgoing events
    - Event-agent uses this request ID when indexing chunks in rdir
    
    Relates to #1346
    oio-blob-indexer: Fix the value of the rate
    oio-blob-indexer: Control format of chunk ID
    
    Closes #1265
    oio/blob/indexer: Print lighter warnings upon network errors
    common/utils: Split to reduce dependencies
    Python API: Share loggers to not overwrite or recreate the logger
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    oio-blob-indexer: Factorizes the reporting
    
    10 less lines to do the same...
    In addition, a counter was misleading because continuously increasing.
    oio-blob-indexer: Fix typo in log
    Modify log format of oio-blob-rebuilder and oio-blob-indexer (fix #880)
    
    Add the date of the start and end of both command.
    Add name to the value of the field of the oio-blob-indexer logs
    like the one oio-blob-rebuilder is using.
    oio: clean separation of green code
    migrate ec content tests to use unified API
    review rdir and add metachunk_hash
    
    * get rid of useless metadata
    * add random in tests
    Make tests pass (#609)
    blob-indexer: add interval parameter
    core: move python files around
    rdir: indexer: add functionnal tests
    rdir: indexer crawler runs continuously
    python: attempt to make Travis pass
    rdir: push all xattr in db
    rdir: add rebuild crawler to rebuild chunks on the same valume after its replacement
    proxy+rdir: add actions to fetch the index and to show rebuild status
    rdir: add chunk creation event in rawx and in event agent + minor changes
    rdir: crawler added + rdir installed using oio-reset + fixes
    oio/blob CLI tools: Relicence to LGPL
    Python API: Don't raise an exception when chunk rebuild has worked
    
    Jira: OS-386
    Python API: Create tool to repair contents
    oio/blob CLI tools: Relicence to LGPL
    converter: Always try as if the fullpath was new
    converter: Fix chunk path to check inode
    converter: Reinforce the verification of the chunk ID
    Revert "Python API: Allow to use dict with timeout"
    
    This reverts commit 4d281ce49f0d41fdebbae5235753d5478e768f99.
    Python API: Allow to use dict with timeout
    CI: enable python3 unit tests
    
    Jira: R1910-1
    Python API: move CacheDict to common/utils.py
    Allow to recover object meta when checking a missing chunk
    oio-blob-converter: restore fullpath if grid.content.path or oio:HASH are missing
    blob-indexer: recover missing fullpath xattr, if possible
    
    Instead if just printing an error when the "fullpath" extended attribute
    is missing, try to recover it from information found in rdir and meta2.
    This behavior requires the "convert_chunks" option to be enabled.
    blob-converter: recover missing fullpath extended attribute
    oio-blob-indexer: small improvements
    Python API: Fix concurrency
    Python API: Delete useless method
    oio-blob-rebuilder: Add an option for dry running
    oio-blob-converter: Read chunks from a file
    oio-blob-converter: Save old xattr to a backup
    oio-blob-converter: Limit cache
    oio-blob-converter: Convert old xattr to new xattr
    oio/blob CLI tools: Relicence to LGPL
    CLI: Improve 'openio-admin meta2 rebuild'
    Python API: Create tool to repair contents
    Python API: Clean code for the tools
    Python API: Remove lock to update the counters of the tools
    Python API: Return the list of processed tasks when running a tool
    Python API: Create a new BlobRebuilder
    Rebuild the meta1 and meta2 bases
    oio-blob-rebuilder: Parallelize the rebuilding of the chunks
    oio-blob-rebuilder: handle beanstalk network errors
    oio-blob-rebuilder: rebuild missing chunk positions
    
    You can rebuild an object by telling oio-blob-rebuilder which chunk
    position is missing, it is not mandatory to provide a chunk ID.
    oio-crawler-integrity: fix output for blob-rebuilder
    common/utils: Split to reduce dependencies
    Blob-rebuilder: fix stat message
    Python API: Share loggers to not overwrite or recreate the logger
    Enforce a license preamble in oio/
    
    AGPL by default, LGPL when destined to a package to be include by an
    external app.
    Clean the License headers
    
    Update the periods
    Ensure headers in the C code
    Event-handler, oio-blob-rebuilder: use beanstalkd to recreate chunks
    
    Correct meta2 spare chunk error: now when the number in the blacklist
    is equal to the number of chunk for the storage policy return a 400 error
    
    Event-handler write in a beanstald's tube the missing chunks
    
    oio-blob-rebuilder: now we have to specify the way we want to get the list
    of chunks to rebuild
    event-agent: content_rebuilder write chunk to a file
    
    Still keep the format of the oio-blob-rebuilder but modify the chunk_id field
    so it can also be use for the position
    'container_id|content_id|(short_chunk_id||pos)'.
    The position is distinguished from the chunk_id by the size (inferior to
    32 digit)
    Make output of oio-crawler-integrity fit oio-blob-rebuilder input
    oio-blob-rebuilder: support input file, new options
    oio-blob-rebuilder: Comply with that fucking pep8
    oio-blob-rebuilder: Fix the progression message
    
    Improves & fixes #905
    oio-blob-revuilder: Remove the broken chunks from the rdir
    
    It seems it was a typo, the broken chunk was (re)introduced in the rdir
    of the broken volume it comes from.
    oio-lob-rebuilder: Give the date an ISO format
    
    (cherry picked from commit 0d660185193b73c05bf9797d6a7c645e2820c6b7)
    oio-blob-rebuilder: name the reported fields in the log
    
    Fix #720
    
    (cherry picked from commit d7b44ea4b5a898bf6497f1aa2f93674cc45c1bcb)
    Modify log format of oio-blob-rebuilder and oio-blob-indexer (fix #880)
    
    Add the date of the start and end of both command.
    Add name to the value of the field of the oio-blob-indexer logs
    like the one oio-blob-rebuilder is using.
    oio-blob-rebuilder: Comply with that fucking pep8
    oio-blob-rebuilder: Fix the progression message
    
    Improves & fixes #905
    oio-blob-revuilder: Remove the broken chunks from the rdir
    
    It seems it was a typo, the broken chunk was (re)introduced in the rdir
    of the broken volume it comes from.
    oio-lob-rebuilder: Give the date an ISO format
    oio-blob-rebuilder: name the reported fields in the log
    
    Fix #720
    oio-blob-rebuilder: allow rebuild on the original rawx
    
    New option is --allow-same-rawx
    oio: clean separation of green code
    review rdir and add metachunk_hash
    
    * get rid of useless metadata
    * add random in tests
    core: move python files around
    python/rain: add mechanism to rebuild metachunk using rainx services
    python/policy: prepare integration of rain policy
    rdir: rebuilder: add functionnal tests + fixes
    rdir: improve rebuilder and use the content id instead of the content path
    rdir: add new commands to client + client bypasses the proxy to contact rdir server
    rebuilder: use new lock commands to avoid two rebuild at the same time
    rdir: rebuilder rebuilds chunks up to the incident date set by admin in rdir
    rdir: fetch: add option 'ignore_rebuilt' to ignore chunks already rebuilt
    rebuilder: ignore rebuilt chunks to allow user to resume the crawling
    rdir: add rebuild crawler to rebuild chunks on the same valume after its replacement
    proxy+rdir: add actions to fetch the index and to show rebuild status
    xcute: Allow to set incident date when rebuilding
    xcute: Keep the launch of a job safe
    xcute: Start one job at a time
    
    If there are several jobs waiting
    and there are several orchestrators to process these jobs,
    they must be distributed among all the orchestrators.
    xcute: Allow enough time to process the tasks batch
    Xcute: fix the orchestrator using all the beanstalkd
    xcute: Don't send empty tasks batch to beanstalkd
    xcute: Retry later when the worker can't reply
    xcute: Handle backend errors
    xcute: Favor the workers with a good score
    xcute: Set limit of jobs per beanstalkd
    
    We must avoid filling the beanstalkd without limit, otherwise it may crash.
    xcute: Ignore the broken beanstalkd until the next refresh
    xcute: Look the tube statistics to know if worker is processing
    xcute: Increase refresh time to search available beanstalkd
    xcute: Improve the load balancing strategy for a single tube
    xcute: Keep tasks order to update tasks sent
    xcute: Always try to exit gracefully
    xcute: Merge orchestrator and server
    xcute: Delete 'manager'
    xcute: Gather the configuration in the job information
    xcute: Format JSON job info
    xcute: Run running job as new job
    xcute: Fix flake8 again
    xcute: fix logs when a job has no tasks
    xcute: fix computing total tasks on a resumed job
    xcute: fix last_sent and all_sent key names in the orchestrator
    xcute: rename total related keys
    xcute: remove total from get_tasks
    xcute: add get_total_tasks to job interface
    xcute: Separate specific job parameters from common job configurations
    xcute: Specify task class in job
    xcute: Fix flake8
    xcute: Format job info
    xcute: Allow to ratelimit the job
    xcute: Reply only the necessary information
    xcute: Allow to send tasks bacth
    xcute: Send job config in beanstalkd job
    xcute: Stop using pickle
    xcute: Minor fixes
    xcute: Free job when orchestrator exiting gracefully
    xcute: Improve LUA script when fail job
    xcute: Improve LUA script when run new job
    xcute: Improve LUA script when update tasks sent
    xcute: Improve LUA script when update tasks processed
    xcute: Take only counters in response to tasks
    xcute: Improve config for orchestrator
    xcute: make the main thread delete dead threads
    xcute: mark a job with 0 task as finished
    xcute: fix exiting when no beanstalkd has ever been found
    xcute: allow any json encodable result
    xcute: remove job from orchestrator jobs when failed
    xcute: fix hanging in beanstalkd loadbalancer
    xcute: bury replies in case of processing error
    xcute: fail job if task payload is too big for beanstalkd
    xcute: fix orchestrator not taking the reply beanstalkd addr from the conf
    xcute: prevent memory leak from job_results
    xcute: remove some debug logs
    xcute: Fail when the dispatcher failed
    xcute: Create a filter for event-agent
    xcute: Implement rawx decommission
    xcute: add job results, sanitize job conf and handle job params
    Add xcute orchestrator
    Add xcute orchestrator
    WIP
    WIP
    xcute: specify which job uses a certain lock
    xcute: add lock list in API & cli
    xcute: Change API format
    xcute: Send job config in beanstalkd job
    Admin CLI: implement 'rawx decommission'
    xcute: Add xcute server in conscience
    xcute: Add CLI
    WIP
    WIP
    oio/xcute: Relicence in LGPL
    xcute: specify which job uses a certain lock
    xcute: add lock list in API & cli
    xcute: add a simple lock system
    xcute: Add access logs
    xcute: Change API format
    xcute: Catch all backend errors in the server
    xcute: Delete 'manager'
    xcute: Gather the configuration in the job information
    xcute: Format JSON job info
    xcute: Fix flake8 again
    xcute: Use classmethod to sanitize job config
    xcute: fix creating a job with no config in the payload
    xcute: return more info in the API
    xcute: Fix missing Copyright
    xcute: Separate specific job parameters from common job configurations
    xcute: Specify task class in job
    xcute: Fix flake8
    xcute: Send job config in beanstalkd job
    xcute: Pause and resume job
    xcute: Improve LUA script when delete job
    xcute: Improve LUA script when create new job
    xcute: Add xcute server in conscience
    xcute: Add CLI
    xcute: Implement rawx decommission
    xcute: add job results, sanitize job conf and handle job params
    Add xcute orchestrator
    xcute: Allow to set incident date when rebuilding
    xcute: Allow enough time to process the tasks batch
    xcute: Fix blob rebuilder
    xcute: Use classmethod to sanitize job config
    xcute: remove total from get_tasks
    xcute: add get_total_tasks to job interface
    xcute: Separate specific job parameters from common job configurations
    xcute: Specify task class in job
    xcute: Fix flake8
    xcute: Allow to ratelimit the job
    xcute: Allow to send tasks bacth
    xcute: Send job config in beanstalkd job
    xcute: Stop using pickle
    xcute: Take only counters in response to tasks
    xcute: Implement rawx decommission
    xcute: add job results, sanitize job conf and handle job params
    Add xcute orchestrator
    xcute: Rename task to job and action to task
    xcute: Use redis to register task
    xcute: Create a common dispatcher
    common/utils: Split to reduce dependencies
    xcute: fix job listing in python3
    xcute: Improve Python3 compatibility
    Python API: Stop using deprecated 'message' attribute in Exception
    xcute: Show port in error message when the lock is already used
    xcute: when deleting a job, before deleting its associated lock, make sure the lock was held by that job
    xcute: specify which job uses a certain lock
    xcute: add lock list in API & cli
    xcute: add a simple lock system
    xcute: Keep estimated total in Redis
    xcute: Improve job information display
    xcute: Check if tasks are already sent
    xcute: Check if tasks are already processed
    xcute: Convert all redis errors to excetions
    xcute: Fix redis commands for Redis < 4.0.0
    xcute: Finish a job when it resumes without task
    xcute: Catch all exceptions of LUA scripts
    xcute: Always check if job exists
    xcute: Gather the configuration in the job information
    xcute: Add logger for backend
    xcute: Format JSON job info
    xcute: Run running job as new job
    xcute: Replace the estimated total with the actual total
    xcute: Always indicate that all tasks are sent when this is the case
    xcute: Fix flake8 again
    xcute: fix logs when a job has no tasks
    xcute: fix computing total tasks on a resumed job
    xcute: remove request_pause when job is paused
    xcute: fix request_pause name in unmarshal
    xcute: rename total related keys
    xcute: remove total from get_tasks
    xcute: return more info in the API
    xcute: add get_total_tasks to job interface
    xcute: Separate specific job parameters from common job configurations
    xcute: Fix flake8
    xcute: Format job info
    xcute: Use python time instead of redis time
    xcute: Count the errors by type
    xcute: Fix total tasks
    xcute: Allow to send tasks bacth
    xcute: Send job config in beanstalkd job
    xcute: Minor fixes
    xcute: Free job when orchestrator exiting gracefully
    xcute: Improve LUA script when fail job
    xcute: Pause and resume job
    xcute: Improve LUA script when delete job
    xcute: Improve LUA script when create new job
    xcute: Improve LUA script when run new job
    xcute: Improve LUA script when update tasks sent
    xcute: Improve LUA script when update tasks processed
    xcute: Take only counters in response to tasks
    xcute: properly delete paused job
    xcute: mark a job with 0 task as finished
    xcute: ensure transactions in backend calls
    xcute: allow any json encodable result
    xcute: remove job from orchestrator jobs when failed
    xcute: Add xcute server in conscience
    xcute: Add CLI
    xcute: add job results, sanitize job conf and handle job params
    Add xcute orchestrator
    xcute: Allow to use a lock to not run multiple jobs on the same service
    xcute: Sort the jobs by date
    xcute: Save job configuration
    xcute: Rename task to job and action to task
    xcute: Use redis to register task
    xcute: Improve Python3 compatibility
    xcute: Retry later when the worker can't reply
    xcute: Simplify sending results for workers
    xcute: Prefix request ID with job ID
    xcute: Separate specific job parameters from common job configurations
    xcute: Specify task class in job
    xcute: Fix flake8
    xcute: Keep the job in the workers' cache
    xcute: Allow to ratelimit the job
    xcute: Reply only the necessary information
    xcute: Count the errors by type
    xcute: Allow to send tasks bacth
    xcute: Send job config in beanstalkd job
    xcute: Stop using pickle
    xcute: Create a filter for event-agent
    xcute: Implement rawx decommission
    xcute: add job results, sanitize job conf and handle job params
    Add xcute orchestrator
    xcute: Rename task to job and action to task
    xcute: Implement commands to handle the tasks
    xcute: Use redis to register task
    xcute: Process action job
    xcute: Create a common dispatcher
    core: move python files around
    Support for accounts + Cleanup round 4
    
    * Accounts support still under progress
    * meta2v1 (remote) generator removed : generated code explicited
    * options added to bootstrap scripts
    * python code base added.
    python setup fix
    xcute: Add documentation
    xcute: Add documentation
    xcute: Add documentation
    xcute: factorize rdir parameters
    xcute: factorize rdir parameters
    xcute: make pep8 happy
    xcute: add meta2 rebuilder
    xcute: Allow to set incident date when rebuilding
    xcute: factorize rdir parameters
    xcute: Allow enough time to process the tasks batch
    xcute: Decrease tasks bacth size for some jobs
    xcute: Fix marker to list chunks with rdir
    xcute: Share common client for the same job
    xcute: Fix blob rebuilder
    xcute: Use classmethod to sanitize job config
    xcute: Implement job to rebuild rawx
    xcute: factorize rdir parameters
    xcute: make pep8 happy
    xcute: remove container mover, keep only meta2 decommissioner
    xcute: add meta2 mover
    xcute: factorize rdir parameters
    xcute: Allow enough time to process the tasks batch
    xcute: Ignore chunks that no longer exist when decommissioning rawx
    xcute: fix total tasks estimation for the blob mover
    xcute: Allow to partially decommission a rawx
    xcute: Decrease tasks bacth size for some jobs
    xcute: Fix marker to list chunks with rdir
    xcute: Share common client for the same job
    xcute: Fix flake8 again
    xcute: Use classmethod to sanitize job config
    xcute: Prefix request ID with job ID
    xcute: remove total from get_tasks
    xcute: add get_total_tasks to job interface
    xcute: Separate specific job parameters from common job configurations
    xcute: Make the results of the mover consistent
    xcute: Specify task class in job
    xcute: Fix flake8
    xcute: Allow to ratelimit the job
    xcute: Count the errors by type
    xcute: Allow to send tasks bacth
    xcute: Send job config in beanstalkd job
    xcute: Stop using pickle
    xcute: Take only counters in response to tasks
    xcute: limit the mover batch size
    xcute: remove redudant log in the mover
    xcute: batch mover tasks
    xcute: fix params rawxdecommission job params sanitization
    xcute: fix total tasks returned by the rawxdecommission job
    Admin CLI: implement 'rawx decommission'
    xcute: Implement rawx decommission
    xcute: add job results, sanitize job conf and handle job params
    xcute: Allow to use a lock to not run multiple jobs on the same service
    xcute: Save job configuration
    xcute: Allow to resume a job
    xcute: Rename task to job and action to task
    xcute: Use redis to register task
    xcute: Upgrade blob-mover
    xcute: factorize rdir parameters
    xcute: remove container mover, keep only meta2 decommissioner
    xcute: add meta2 rebuilder
    xcute: add meta2 mover
    xcute: Fix marker to list chunks with rdir
    xcute: Implement job to rebuild rawx
    xcute: Fix missing Copyright
    xcute: add job results, sanitize job conf and handle job params
    Add xcute orchestrator
    xcute: add a simple lock system
    xcute: Fix get total tasks for tester
    xcute: Fix flake8 again
    xcute: Use classmethod to sanitize job config
    xcute: Prefix request ID with job ID
    xcute: remove total from get_tasks
    xcute: add get_total_tasks to job interface
    xcute: fix job tester result
    xcute: Separate specific job parameters from common job configurations
    xcute: Specify task class in job
    xcute: Fix flake8
    xcute: Count the errors by type
    xcute: Send job config in beanstalkd job
    xcute: Stop using pickle
    xcute: Improve LUA script when update tasks processed
    xcute: Take only counters in response to tasks
    xcute: fix test task
    xcute: add job results, sanitize job conf and handle job params
    Add xcute orchestrator
    xcute: Save job configuration
    xcute: Allow to resume a job
    xcute: Allow to exit gracefully
    xcute: Rename task to job and action to task
    xcute: Implement commands to handle the tasks
    xcute: Use redis to register task
    xcute: Implement simple tester
    xcute: Create a common dispatcher
    common/utils: Split to reduce dependencies
